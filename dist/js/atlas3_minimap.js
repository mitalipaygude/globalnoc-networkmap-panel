(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g=(g.GlobalNOC||(g.GlobalNOC = {}));g=(g.Atlas||(g.Atlas = {}));g.MiniMap = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var path = require("path");

module.exports = new Function("d3", "(function() {\n  d3.geo.project = function(object, projection) {\n    var stream = projection.stream;\n    if (!stream) throw new Error(\"not yet supported\");\n    return (object && d3_geo_projectObjectType.hasOwnProperty(object.type) ? d3_geo_projectObjectType[object.type] : d3_geo_projectGeometry)(object, stream);\n  };\n  function d3_geo_projectFeature(object, stream) {\n    return {\n      type: \"Feature\",\n      id: object.id,\n      properties: object.properties,\n      geometry: d3_geo_projectGeometry(object.geometry, stream)\n    };\n  }\n  function d3_geo_projectGeometry(geometry, stream) {\n    if (!geometry) return null;\n    if (geometry.type === \"GeometryCollection\") return {\n      type: \"GeometryCollection\",\n      geometries: object.geometries.map(function(geometry) {\n        return d3_geo_projectGeometry(geometry, stream);\n      })\n    };\n    if (!d3_geo_projectGeometryType.hasOwnProperty(geometry.type)) return null;\n    var sink = d3_geo_projectGeometryType[geometry.type];\n    d3.geo.stream(geometry, stream(sink));\n    return sink.result();\n  }\n  var d3_geo_projectObjectType = {\n    Feature: d3_geo_projectFeature,\n    FeatureCollection: function(object, stream) {\n      return {\n        type: \"FeatureCollection\",\n        features: object.features.map(function(feature) {\n          return d3_geo_projectFeature(feature, stream);\n        })\n      };\n    }\n  };\n  var d3_geo_projectPoints = [], d3_geo_projectLines = [];\n  var d3_geo_projectPoint = {\n    point: function(x, y) {\n      d3_geo_projectPoints.push([ x, y ]);\n    },\n    result: function() {\n      var result = !d3_geo_projectPoints.length ? null : d3_geo_projectPoints.length < 2 ? {\n        type: \"Point\",\n        coordinates: d3_geo_projectPoints[0]\n      } : {\n        type: \"MultiPoint\",\n        coordinates: d3_geo_projectPoints\n      };\n      d3_geo_projectPoints = [];\n      return result;\n    }\n  };\n  var d3_geo_projectLine = {\n    lineStart: d3_geo_projectNoop,\n    point: function(x, y) {\n      d3_geo_projectPoints.push([ x, y ]);\n    },\n    lineEnd: function() {\n      if (d3_geo_projectPoints.length) d3_geo_projectLines.push(d3_geo_projectPoints), \n      d3_geo_projectPoints = [];\n    },\n    result: function() {\n      var result = !d3_geo_projectLines.length ? null : d3_geo_projectLines.length < 2 ? {\n        type: \"LineString\",\n        coordinates: d3_geo_projectLines[0]\n      } : {\n        type: \"MultiLineString\",\n        coordinates: d3_geo_projectLines\n      };\n      d3_geo_projectLines = [];\n      return result;\n    }\n  };\n  var d3_geo_projectPolygon = {\n    polygonStart: d3_geo_projectNoop,\n    lineStart: d3_geo_projectNoop,\n    point: function(x, y) {\n      d3_geo_projectPoints.push([ x, y ]);\n    },\n    lineEnd: function() {\n      var n = d3_geo_projectPoints.length;\n      if (n) {\n        do d3_geo_projectPoints.push(d3_geo_projectPoints[0].slice()); while (++n < 4);\n        d3_geo_projectLines.push(d3_geo_projectPoints), d3_geo_projectPoints = [];\n      }\n    },\n    polygonEnd: d3_geo_projectNoop,\n    result: function() {\n      if (!d3_geo_projectLines.length) return null;\n      var polygons = [], holes = [];\n      d3_geo_projectLines.forEach(function(ring) {\n        if (d3_geo_projectClockwise(ring)) polygons.push([ ring ]); else holes.push(ring);\n      });\n      holes.forEach(function(hole) {\n        var point = hole[0];\n        polygons.some(function(polygon) {\n          if (d3_geo_projectContains(polygon[0], point)) {\n            polygon.push(hole);\n            return true;\n          }\n        }) || polygons.push([ hole ]);\n      });\n      d3_geo_projectLines = [];\n      return !polygons.length ? null : polygons.length > 1 ? {\n        type: \"MultiPolygon\",\n        coordinates: polygons\n      } : {\n        type: \"Polygon\",\n        coordinates: polygons[0]\n      };\n    }\n  };\n  var d3_geo_projectGeometryType = {\n    Point: d3_geo_projectPoint,\n    MultiPoint: d3_geo_projectPoint,\n    LineString: d3_geo_projectLine,\n    MultiLineString: d3_geo_projectLine,\n    Polygon: d3_geo_projectPolygon,\n    MultiPolygon: d3_geo_projectPolygon,\n    Sphere: d3_geo_projectPolygon\n  };\n  function d3_geo_projectNoop() {}\n  function d3_geo_projectClockwise(ring) {\n    if ((n = ring.length) < 4) return false;\n    var i = 0, n, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n    while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n    return area <= 0;\n  }\n  function d3_geo_projectContains(ring, point) {\n    var x = point[0], y = point[1], contains = false;\n    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n      var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n      if (yi > y ^ yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = !contains;\n    }\n    return contains;\n  }\n  var \u03b5 = 1e-6, \u03b52 = \u03b5 * \u03b5, \u03c0 = Math.PI, half\u03c0 = \u03c0 / 2, sqrt\u03c0 = Math.sqrt(\u03c0), radians = \u03c0 / 180, degrees = 180 / \u03c0;\n  function sinci(x) {\n    return x ? x / Math.sin(x) : 1;\n  }\n  function sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function asin(x) {\n    return x > 1 ? half\u03c0 : x < -1 ? -half\u03c0 : Math.asin(x);\n  }\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? \u03c0 : Math.acos(x);\n  }\n  function asqrt(x) {\n    return x > 0 ? Math.sqrt(x) : 0;\n  }\n  var projection = d3.geo.projection, projectionMutator = d3.geo.projectionMutator;\n  d3.geo.interrupt = function(project) {\n    var lobes = [ [ [ [ -\u03c0, 0 ], [ 0, half\u03c0 ], [ \u03c0, 0 ] ] ], [ [ [ -\u03c0, 0 ], [ 0, -half\u03c0 ], [ \u03c0, 0 ] ] ] ];\n    var bounds;\n    function forward(\u03bb, \u03c6) {\n      var sign = \u03c6 < 0 ? -1 : +1, hemilobes = lobes[+(\u03c6 < 0)];\n      for (var i = 0, n = hemilobes.length - 1; i < n && \u03bb > hemilobes[i][2][0]; ++i) ;\n      var coordinates = project(\u03bb - hemilobes[i][1][0], \u03c6);\n      coordinates[0] += project(hemilobes[i][1][0], sign * \u03c6 > sign * hemilobes[i][0][1] ? hemilobes[i][0][1] : \u03c6)[0];\n      return coordinates;\n    }\n    function reset() {\n      bounds = lobes.map(function(hemilobes) {\n        return hemilobes.map(function(lobe) {\n          var x0 = project(lobe[0][0], lobe[0][1])[0], x1 = project(lobe[2][0], lobe[2][1])[0], y0 = project(lobe[1][0], lobe[0][1])[1], y1 = project(lobe[1][0], lobe[1][1])[1], t;\n          if (y0 > y1) t = y0, y0 = y1, y1 = t;\n          return [ [ x0, y0 ], [ x1, y1 ] ];\n        });\n      });\n    }\n    if (project.invert) forward.invert = function(x, y) {\n      var hemibounds = bounds[+(y < 0)], hemilobes = lobes[+(y < 0)];\n      for (var i = 0, n = hemibounds.length; i < n; ++i) {\n        var b = hemibounds[i];\n        if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n          var coordinates = project.invert(x - project(hemilobes[i][1][0], 0)[0], y);\n          coordinates[0] += hemilobes[i][1][0];\n          return pointEqual(forward(coordinates[0], coordinates[1]), [ x, y ]) ? coordinates : null;\n        }\n      }\n    };\n    var projection = d3.geo.projection(forward), stream_ = projection.stream;\n    projection.stream = function(stream) {\n      var rotate = projection.rotate(), rotateStream = stream_(stream), sphereStream = (projection.rotate([ 0, 0 ]), \n      stream_(stream));\n      projection.rotate(rotate);\n      rotateStream.sphere = function() {\n        d3.geo.stream(sphere(), sphereStream);\n      };\n      return rotateStream;\n    };\n    projection.lobes = function(_) {\n      if (!arguments.length) return lobes.map(function(lobes) {\n        return lobes.map(function(lobe) {\n          return [ [ lobe[0][0] * 180 / \u03c0, lobe[0][1] * 180 / \u03c0 ], [ lobe[1][0] * 180 / \u03c0, lobe[1][1] * 180 / \u03c0 ], [ lobe[2][0] * 180 / \u03c0, lobe[2][1] * 180 / \u03c0 ] ];\n        });\n      });\n      lobes = _.map(function(lobes) {\n        return lobes.map(function(lobe) {\n          return [ [ lobe[0][0] * \u03c0 / 180, lobe[0][1] * \u03c0 / 180 ], [ lobe[1][0] * \u03c0 / 180, lobe[1][1] * \u03c0 / 180 ], [ lobe[2][0] * \u03c0 / 180, lobe[2][1] * \u03c0 / 180 ] ];\n        });\n      });\n      reset();\n      return projection;\n    };\n    function sphere() {\n      var \u03b5 = 1e-6, coordinates = [];\n      for (var i = 0, n = lobes[0].length; i < n; ++i) {\n        var lobe = lobes[0][i], \u03bb0 = lobe[0][0] * 180 / \u03c0, \u03c60 = lobe[0][1] * 180 / \u03c0, \u03c61 = lobe[1][1] * 180 / \u03c0, \u03bb2 = lobe[2][0] * 180 / \u03c0, \u03c62 = lobe[2][1] * 180 / \u03c0;\n        coordinates.push(resample([ [ \u03bb0 + \u03b5, \u03c60 + \u03b5 ], [ \u03bb0 + \u03b5, \u03c61 - \u03b5 ], [ \u03bb2 - \u03b5, \u03c61 - \u03b5 ], [ \u03bb2 - \u03b5, \u03c62 + \u03b5 ] ], 30));\n      }\n      for (var i = lobes[1].length - 1; i >= 0; --i) {\n        var lobe = lobes[1][i], \u03bb0 = lobe[0][0] * 180 / \u03c0, \u03c60 = lobe[0][1] * 180 / \u03c0, \u03c61 = lobe[1][1] * 180 / \u03c0, \u03bb2 = lobe[2][0] * 180 / \u03c0, \u03c62 = lobe[2][1] * 180 / \u03c0;\n        coordinates.push(resample([ [ \u03bb2 - \u03b5, \u03c62 - \u03b5 ], [ \u03bb2 - \u03b5, \u03c61 + \u03b5 ], [ \u03bb0 + \u03b5, \u03c61 + \u03b5 ], [ \u03bb0 + \u03b5, \u03c60 - \u03b5 ] ], 30));\n      }\n      return {\n        type: \"Polygon\",\n        coordinates: [ d3.merge(coordinates) ]\n      };\n    }\n    function resample(coordinates, m) {\n      var i = -1, n = coordinates.length, p0 = coordinates[0], p1, dx, dy, resampled = [];\n      while (++i < n) {\n        p1 = coordinates[i];\n        dx = (p1[0] - p0[0]) / m;\n        dy = (p1[1] - p0[1]) / m;\n        for (var j = 0; j < m; ++j) resampled.push([ p0[0] + j * dx, p0[1] + j * dy ]);\n        p0 = p1;\n      }\n      resampled.push(p1);\n      return resampled;\n    }\n    function pointEqual(a, b) {\n      return Math.abs(a[0] - b[0]) < \u03b5 && Math.abs(a[1] - b[1]) < \u03b5;\n    }\n    return projection;\n  };\n  function airy(\u03b2) {\n    var tan\u03b2_2 = Math.tan(.5 * \u03b2), B = 2 * Math.log(Math.cos(.5 * \u03b2)) / (tan\u03b2_2 * tan\u03b2_2);\n    function forward(\u03bb, \u03c6) {\n      var cos\u03bb = Math.cos(\u03bb), cos\u03c6 = Math.cos(\u03c6), sin\u03c6 = Math.sin(\u03c6), cosz = cos\u03c6 * cos\u03bb, K = -((1 - cosz ? Math.log(.5 * (1 + cosz)) / (1 - cosz) : -.5) + B / (1 + cosz));\n      return [ K * cos\u03c6 * Math.sin(\u03bb), K * sin\u03c6 ];\n    }\n    forward.invert = function(x, y) {\n      var \u03c1 = Math.sqrt(x * x + y * y), z = \u03b2 * -.5, i = 50, \u03b4;\n      if (!\u03c1) return [ 0, 0 ];\n      do {\n        var z_2 = .5 * z, cosz_2 = Math.cos(z_2), sinz_2 = Math.sin(z_2), tanz_2 = Math.tan(z_2), lnsecz_2 = Math.log(1 / cosz_2);\n        z -= \u03b4 = (2 / tanz_2 * lnsecz_2 - B * tanz_2 - \u03c1) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - B / (2 * cosz_2 * cosz_2));\n      } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n      var sinz = Math.sin(z);\n      return [ Math.atan2(x * sinz, \u03c1 * Math.cos(z)), asin(y * sinz / \u03c1) ];\n    };\n    return forward;\n  }\n  function airyProjection() {\n    var \u03b2 = half\u03c0, m = projectionMutator(airy), p = m(\u03b2);\n    p.radius = function(_) {\n      if (!arguments.length) return \u03b2 / \u03c0 * 180;\n      return m(\u03b2 = _ * \u03c0 / 180);\n    };\n    return p;\n  }\n  (d3.geo.airy = airyProjection).raw = airy;\n  function aitoff(\u03bb, \u03c6) {\n    var cos\u03c6 = Math.cos(\u03c6), sinci\u03b1 = sinci(acos(cos\u03c6 * Math.cos(\u03bb /= 2)));\n    return [ 2 * cos\u03c6 * Math.sin(\u03bb) * sinci\u03b1, Math.sin(\u03c6) * sinci\u03b1 ];\n  }\n  aitoff.invert = function(x, y) {\n    if (x * x + 4 * y * y > \u03c0 * \u03c0 + \u03b5) return;\n    var \u03bb = x, \u03c6 = y, i = 25;\n    do {\n      var sin\u03bb = Math.sin(\u03bb), sin\u03bb_2 = Math.sin(\u03bb / 2), cos\u03bb_2 = Math.cos(\u03bb / 2), sin\u03c6 = Math.sin(\u03c6), cos\u03c6 = Math.cos(\u03c6), sin_2\u03c6 = Math.sin(2 * \u03c6), sin2\u03c6 = sin\u03c6 * sin\u03c6, cos2\u03c6 = cos\u03c6 * cos\u03c6, sin2\u03bb_2 = sin\u03bb_2 * sin\u03bb_2, C = 1 - cos2\u03c6 * cos\u03bb_2 * cos\u03bb_2, E = C ? acos(cos\u03c6 * cos\u03bb_2) * Math.sqrt(F = 1 / C) : F = 0, F, fx = 2 * E * cos\u03c6 * sin\u03bb_2 - x, fy = E * sin\u03c6 - y, \u03b4x\u03b4\u03bb = F * (cos2\u03c6 * sin2\u03bb_2 + E * cos\u03c6 * cos\u03bb_2 * sin2\u03c6), \u03b4x\u03b4\u03c6 = F * (.5 * sin\u03bb * sin_2\u03c6 - E * 2 * sin\u03c6 * sin\u03bb_2), \u03b4y\u03b4\u03bb = F * .25 * (sin_2\u03c6 * sin\u03bb_2 - E * sin\u03c6 * cos2\u03c6 * sin\u03bb), \u03b4y\u03b4\u03c6 = F * (sin2\u03c6 * cos\u03bb_2 + E * sin2\u03bb_2 * cos\u03c6), denominator = \u03b4x\u03b4\u03c6 * \u03b4y\u03b4\u03bb - \u03b4y\u03b4\u03c6 * \u03b4x\u03b4\u03bb;\n      if (!denominator) break;\n      var \u03b4\u03bb = (fy * \u03b4x\u03b4\u03c6 - fx * \u03b4y\u03b4\u03c6) / denominator, \u03b4\u03c6 = (fx * \u03b4y\u03b4\u03bb - fy * \u03b4x\u03b4\u03bb) / denominator;\n      \u03bb -= \u03b4\u03bb, \u03c6 -= \u03b4\u03c6;\n    } while ((Math.abs(\u03b4\u03bb) > \u03b5 || Math.abs(\u03b4\u03c6) > \u03b5) && --i > 0);\n    return [ \u03bb, \u03c6 ];\n  };\n  (d3.geo.aitoff = function() {\n    return projection(aitoff);\n  }).raw = aitoff;\n  function armadillo(\u03c60) {\n    var sin\u03c60 = Math.sin(\u03c60), cos\u03c60 = Math.cos(\u03c60), s\u03c60 = \u03c60 > 0 ? 1 : -1, tan\u03c60 = Math.tan(s\u03c60 * \u03c60), k = (1 + sin\u03c60 - cos\u03c60) / 2;\n    function forward(\u03bb, \u03c6) {\n      var cos\u03c6 = Math.cos(\u03c6), cos\u03bb = Math.cos(\u03bb /= 2);\n      return [ (1 + cos\u03c6) * Math.sin(\u03bb), (s\u03c60 * \u03c6 > -Math.atan2(cos\u03bb, tan\u03c60) - .001 ? 0 : -s\u03c60 * 10) + k + Math.sin(\u03c6) * cos\u03c60 - (1 + cos\u03c6) * sin\u03c60 * cos\u03bb ];\n    }\n    forward.invert = function(x, y) {\n      var \u03bb = 0, \u03c6 = 0, i = 50;\n      do {\n        var cos\u03bb = Math.cos(\u03bb), sin\u03bb = Math.sin(\u03bb), cos\u03c6 = Math.cos(\u03c6), sin\u03c6 = Math.sin(\u03c6), A = 1 + cos\u03c6, fx = A * sin\u03bb - x, fy = k + sin\u03c6 * cos\u03c60 - A * sin\u03c60 * cos\u03bb - y, \u03b4x\u03b4\u03bb = .5 * A * cos\u03bb, \u03b4x\u03b4\u03c6 = -sin\u03bb * sin\u03c6, \u03b4y\u03b4\u03bb = .5 * sin\u03c60 * A * sin\u03bb, \u03b4y\u03b4\u03c6 = cos\u03c60 * cos\u03c6 + sin\u03c60 * cos\u03bb * sin\u03c6, denominator = \u03b4x\u03b4\u03c6 * \u03b4y\u03b4\u03bb - \u03b4y\u03b4\u03c6 * \u03b4x\u03b4\u03bb, \u03b4\u03bb = .5 * (fy * \u03b4x\u03b4\u03c6 - fx * \u03b4y\u03b4\u03c6) / denominator, \u03b4\u03c6 = (fx * \u03b4y\u03b4\u03bb - fy * \u03b4x\u03b4\u03bb) / denominator;\n        \u03bb -= \u03b4\u03bb, \u03c6 -= \u03b4\u03c6;\n      } while ((Math.abs(\u03b4\u03bb) > \u03b5 || Math.abs(\u03b4\u03c6) > \u03b5) && --i > 0);\n      return s\u03c60 * \u03c6 > -Math.atan2(Math.cos(\u03bb), tan\u03c60) - .001 ? [ \u03bb * 2, \u03c6 ] : null;\n    };\n    return forward;\n  }\n  function armadilloProjection() {\n    var \u03c60 = \u03c0 / 9, s\u03c60 = \u03c60 > 0 ? 1 : -1, tan\u03c60 = Math.tan(s\u03c60 * \u03c60), m = projectionMutator(armadillo), p = m(\u03c60), stream_ = p.stream;\n    p.parallel = function(_) {\n      if (!arguments.length) return \u03c60 / \u03c0 * 180;\n      tan\u03c60 = Math.tan((s\u03c60 = (\u03c60 = _ * \u03c0 / 180) > 0 ? 1 : -1) * \u03c60);\n      return m(\u03c60);\n    };\n    p.stream = function(stream) {\n      var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([ 0, 0 ]), \n      stream_(stream));\n      p.rotate(rotate);\n      rotateStream.sphere = function() {\n        sphereStream.polygonStart(), sphereStream.lineStart();\n        for (var \u03bb = s\u03c60 * -180; s\u03c60 * \u03bb < 180; \u03bb += s\u03c60 * 90) sphereStream.point(\u03bb, s\u03c60 * 90);\n        while (s\u03c60 * (\u03bb -= \u03c60) >= -180) {\n          sphereStream.point(\u03bb, s\u03c60 * -Math.atan2(Math.cos(\u03bb * radians / 2), tan\u03c60) * degrees);\n        }\n        sphereStream.lineEnd(), sphereStream.polygonEnd();\n      };\n      return rotateStream;\n    };\n    return p;\n  }\n  (d3.geo.armadillo = armadilloProjection).raw = armadillo;\n  function tanh(x) {\n    x = Math.exp(2 * x);\n    return (x - 1) / (x + 1);\n  }\n  function sinh(x) {\n    return .5 * (Math.exp(x) - Math.exp(-x));\n  }\n  function cosh(x) {\n    return .5 * (Math.exp(x) + Math.exp(-x));\n  }\n  function arsinh(x) {\n    return Math.log(x + asqrt(x * x + 1));\n  }\n  function arcosh(x) {\n    return Math.log(x + asqrt(x * x - 1));\n  }\n  function august(\u03bb, \u03c6) {\n    var tan\u03c6 = Math.tan(\u03c6 / 2), k = asqrt(1 - tan\u03c6 * tan\u03c6), c = 1 + k * Math.cos(\u03bb /= 2), x = Math.sin(\u03bb) * k / c, y = tan\u03c6 / c, x2 = x * x, y2 = y * y;\n    return [ 4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2) ];\n  }\n  august.invert = function(x, y) {\n    x *= 3 / 8, y *= 3 / 8;\n    if (!x && Math.abs(y) > 1) return null;\n    var x2 = x * x, y2 = y * y, s = 1 + x2 + y2, sin3\u03b7 = Math.sqrt(.5 * (s - Math.sqrt(s * s - 4 * y * y))), \u03b7 = asin(sin3\u03b7) / 3, \u03be = sin3\u03b7 ? arcosh(Math.abs(y / sin3\u03b7)) / 3 : arsinh(Math.abs(x)) / 3, cos\u03b7 = Math.cos(\u03b7), cosh\u03be = cosh(\u03be), d = cosh\u03be * cosh\u03be - cos\u03b7 * cos\u03b7;\n    return [ sgn(x) * 2 * Math.atan2(sinh(\u03be) * cos\u03b7, .25 - d), sgn(y) * 2 * Math.atan2(cosh\u03be * Math.sin(\u03b7), .25 + d) ];\n  };\n  (d3.geo.august = function() {\n    return projection(august);\n  }).raw = august;\n  var baker\u03c6 = Math.log(1 + Math.SQRT2);\n  function baker(\u03bb, \u03c6) {\n    var \u03c60 = Math.abs(\u03c6);\n    return \u03c60 < \u03c0 / 4 ? [ \u03bb, Math.log(Math.tan(\u03c0 / 4 + \u03c6 / 2)) ] : [ \u03bb * Math.cos(\u03c60) * (2 * Math.SQRT2 - 1 / Math.sin(\u03c60)), sgn(\u03c6) * (2 * Math.SQRT2 * (\u03c60 - \u03c0 / 4) - Math.log(Math.tan(\u03c60 / 2))) ];\n  }\n  baker.invert = function(x, y) {\n    if ((y0 = Math.abs(y)) < baker\u03c6) return [ x, 2 * Math.atan(Math.exp(y)) - half\u03c0 ];\n    var sqrt8 = Math.sqrt(8), \u03c6 = \u03c0 / 4, i = 25, \u03b4, y0;\n    do {\n      var cos\u03c6_2 = Math.cos(\u03c6 / 2), tan\u03c6_2 = Math.tan(\u03c6 / 2);\n      \u03c6 -= \u03b4 = (sqrt8 * (\u03c6 - \u03c0 / 4) - Math.log(tan\u03c6_2) - y0) / (sqrt8 - .5 * cos\u03c6_2 * cos\u03c6_2 / tan\u03c6_2);\n    } while (Math.abs(\u03b4) > \u03b52 && --i > 0);\n    return [ x / (Math.cos(\u03c6) * (sqrt8 - 1 / Math.sin(\u03c6))), sgn(y) * \u03c6 ];\n  };\n  (d3.geo.baker = function() {\n    return projection(baker);\n  }).raw = baker;\n  var berghausAzimuthalEquidistant = d3.geo.azimuthalEquidistant.raw;\n  function berghaus(n) {\n    var k = 2 * \u03c0 / n;\n    function forward(\u03bb, \u03c6) {\n      var p = berghausAzimuthalEquidistant(\u03bb, \u03c6);\n      if (Math.abs(\u03bb) > half\u03c0) {\n        var \u03b8 = Math.atan2(p[1], p[0]), r = Math.sqrt(p[0] * p[0] + p[1] * p[1]), \u03b80 = k * Math.round((\u03b8 - half\u03c0) / k) + half\u03c0, \u03b1 = Math.atan2(Math.sin(\u03b8 -= \u03b80), 2 - Math.cos(\u03b8));\n        \u03b8 = \u03b80 + asin(\u03c0 / r * Math.sin(\u03b1)) - \u03b1;\n        p[0] = r * Math.cos(\u03b8);\n        p[1] = r * Math.sin(\u03b8);\n      }\n      return p;\n    }\n    forward.invert = function(x, y) {\n      var r = Math.sqrt(x * x + y * y);\n      if (r > half\u03c0) {\n        var \u03b8 = Math.atan2(y, x), \u03b80 = k * Math.round((\u03b8 - half\u03c0) / k) + half\u03c0, s = \u03b8 > \u03b80 ? -1 : 1, A = r * Math.cos(\u03b80 - \u03b8), cot\u03b1 = 1 / Math.tan(s * Math.acos((A - \u03c0) / Math.sqrt(\u03c0 * (\u03c0 - 2 * A) + r * r)));\n        \u03b8 = \u03b80 + 2 * Math.atan((cot\u03b1 + s * Math.sqrt(cot\u03b1 * cot\u03b1 - 3)) / 3);\n        x = r * Math.cos(\u03b8), y = r * Math.sin(\u03b8);\n      }\n      return berghausAzimuthalEquidistant.invert(x, y);\n    };\n    return forward;\n  }\n  function berghausProjection() {\n    var n = 5, m = projectionMutator(berghaus), p = m(n), stream_ = p.stream, \u03b5 = .01, cr = -Math.cos(\u03b5 * radians), sr = Math.sin(\u03b5 * radians);\n    p.lobes = function(_) {\n      if (!arguments.length) return n;\n      return m(n = +_);\n    };\n    p.stream = function(stream) {\n      var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([ 0, 0 ]), \n      stream_(stream));\n      p.rotate(rotate);\n      rotateStream.sphere = function() {\n        sphereStream.polygonStart(), sphereStream.lineStart();\n        for (var i = 0, \u03b4 = 360 / n, \u03b40 = 2 * \u03c0 / n, \u03c6 = 90 - 180 / n, \u03c60 = half\u03c0; i < n; ++i, \n        \u03c6 -= \u03b4, \u03c60 -= \u03b40) {\n          sphereStream.point(Math.atan2(sr * Math.cos(\u03c60), cr) * degrees, asin(sr * Math.sin(\u03c60)) * degrees);\n          if (\u03c6 < -90) {\n            sphereStream.point(-90, -180 - \u03c6 - \u03b5);\n            sphereStream.point(-90, -180 - \u03c6 + \u03b5);\n          } else {\n            sphereStream.point(90, \u03c6 + \u03b5);\n            sphereStream.point(90, \u03c6 - \u03b5);\n          }\n        }\n        sphereStream.lineEnd(), sphereStream.polygonEnd();\n      };\n      return rotateStream;\n    };\n    return p;\n  }\n  (d3.geo.berghaus = berghausProjection).raw = berghaus;\n  function mollweideBromley\u03b8(Cp) {\n    return function(\u03b8) {\n      var Cpsin\u03b8 = Cp * Math.sin(\u03b8), i = 30, \u03b4;\n      do \u03b8 -= \u03b4 = (\u03b8 + Math.sin(\u03b8) - Cpsin\u03b8) / (1 + Math.cos(\u03b8)); while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n      return \u03b8 / 2;\n    };\n  }\n  function mollweideBromley(Cx, Cy, Cp) {\n    var \u03b8 = mollweideBromley\u03b8(Cp);\n    function forward(\u03bb, \u03c6) {\n      return [ Cx * \u03bb * Math.cos(\u03c6 = \u03b8(\u03c6)), Cy * Math.sin(\u03c6) ];\n    }\n    forward.invert = function(x, y) {\n      var \u03b8 = asin(y / Cy);\n      return [ x / (Cx * Math.cos(\u03b8)), asin((2 * \u03b8 + Math.sin(2 * \u03b8)) / Cp) ];\n    };\n    return forward;\n  }\n  var mollweide\u03b8 = mollweideBromley\u03b8(\u03c0), mollweide = mollweideBromley(Math.SQRT2 / half\u03c0, Math.SQRT2, \u03c0);\n  (d3.geo.mollweide = function() {\n    return projection(mollweide);\n  }).raw = mollweide;\n  function boggs(\u03bb, \u03c6) {\n    var k = 2.00276, \u03b8 = mollweide\u03b8(\u03c6);\n    return [ k * \u03bb / (1 / Math.cos(\u03c6) + 1.11072 / Math.cos(\u03b8)), (\u03c6 + Math.SQRT2 * Math.sin(\u03b8)) / k ];\n  }\n  boggs.invert = function(x, y) {\n    var k = 2.00276, ky = k * y, \u03b8 = y < 0 ? -\u03c0 / 4 : \u03c0 / 4, i = 25, \u03b4, \u03c6;\n    do {\n      \u03c6 = ky - Math.SQRT2 * Math.sin(\u03b8);\n      \u03b8 -= \u03b4 = (Math.sin(2 * \u03b8) + 2 * \u03b8 - \u03c0 * Math.sin(\u03c6)) / (2 * Math.cos(2 * \u03b8) + 2 + \u03c0 * Math.cos(\u03c6) * Math.SQRT2 * Math.cos(\u03b8));\n    } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n    \u03c6 = ky - Math.SQRT2 * Math.sin(\u03b8);\n    return [ x * (1 / Math.cos(\u03c6) + 1.11072 / Math.cos(\u03b8)) / k, \u03c6 ];\n  };\n  (d3.geo.boggs = function() {\n    return projection(boggs);\n  }).raw = boggs;\n  function parallel1Projection(projectAt) {\n    var \u03c60 = 0, m = projectionMutator(projectAt), p = m(\u03c60);\n    p.parallel = function(_) {\n      if (!arguments.length) return \u03c60 / \u03c0 * 180;\n      return m(\u03c60 = _ * \u03c0 / 180);\n    };\n    return p;\n  }\n  function sinusoidal(\u03bb, \u03c6) {\n    return [ \u03bb * Math.cos(\u03c6), \u03c6 ];\n  }\n  sinusoidal.invert = function(x, y) {\n    return [ x / Math.cos(y), y ];\n  };\n  (d3.geo.sinusoidal = function() {\n    return projection(sinusoidal);\n  }).raw = sinusoidal;\n  function bonne(\u03c60) {\n    if (!\u03c60) return sinusoidal;\n    var cot\u03c60 = 1 / Math.tan(\u03c60);\n    function forward(\u03bb, \u03c6) {\n      var \u03c1 = cot\u03c60 + \u03c60 - \u03c6, E = \u03c1 ? \u03bb * Math.cos(\u03c6) / \u03c1 : \u03c1;\n      return [ \u03c1 * Math.sin(E), cot\u03c60 - \u03c1 * Math.cos(E) ];\n    }\n    forward.invert = function(x, y) {\n      var \u03c1 = Math.sqrt(x * x + (y = cot\u03c60 - y) * y), \u03c6 = cot\u03c60 + \u03c60 - \u03c1;\n      return [ \u03c1 / Math.cos(\u03c6) * Math.atan2(x, y), \u03c6 ];\n    };\n    return forward;\n  }\n  (d3.geo.bonne = function() {\n    return parallel1Projection(bonne).parallel(45);\n  }).raw = bonne;\n  function bottomleyRaw(\u03c8) {\n    var sin\u03c8 = Math.sin(\u03c8);\n    function forward(\u03bb, \u03c6) {\n      var \u03c1 = half\u03c0 - \u03c6, \u03b7 = \u03c1 ? \u03bb * sin\u03c8 * Math.sin(\u03c1) / \u03c1 : \u03c1;\n      return [ \u03c1 * Math.sin(\u03b7) / sin\u03c8, half\u03c0 - \u03c1 * Math.cos(\u03b7) ];\n    }\n    forward.invert = function(x, y) {\n      var x1 = x * sin\u03c8, y1 = half\u03c0 - y, \u03c1 = Math.sqrt(x1 * x1 + y1 * y1), \u03b7 = Math.atan2(x1, y1);\n      return [ (\u03c1 ? \u03c1 / Math.sin(\u03c1) : 1) * \u03b7 / sin\u03c8, half\u03c0 - \u03c1 ];\n    };\n    return forward;\n  }\n  (d3.geo.bottomley = function() {\n    var \u03c8 = \u03c0 / 6, mutate = d3.geo.projectionMutator(bottomleyRaw), projection = mutate(\u03c8);\n    projection.variant = function(_) {\n      return arguments.length ? mutate(\u03c8 = +_) : \u03c8;\n    };\n    return projection;\n  }).raw = bottomleyRaw;\n  var bromley = mollweideBromley(1, 4 / \u03c0, \u03c0);\n  (d3.geo.bromley = function() {\n    return projection(bromley);\n  }).raw = bromley;\n  function chamberlin(points) {\n    points = points.map(function(p) {\n      return [ p[0], p[1], Math.sin(p[1]), Math.cos(p[1]) ];\n    });\n    for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n      b = points[i];\n      a.v = chamberlinDistanceAzimuth(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n      a.point = [ 0, 0 ];\n    }\n    var \u03b20 = chamberlinAngle(points[0].v[0], points[2].v[0], points[1].v[0]), \u03b21 = chamberlinAngle(points[0].v[0], points[1].v[0], points[2].v[0]), \u03b22 = \u03c0 - \u03b20;\n    points[2].point[1] = 0;\n    points[0].point[0] = -(points[1].point[0] = .5 * points[0].v[0]);\n    var mean = [ points[2].point[0] = points[0].point[0] + points[2].v[0] * Math.cos(\u03b20), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * Math.sin(\u03b20)) ];\n    function forward(\u03bb, \u03c6) {\n      var sin\u03c6 = Math.sin(\u03c6), cos\u03c6 = Math.cos(\u03c6), v = new Array(3);\n      for (var i = 0; i < 3; ++i) {\n        var p = points[i];\n        v[i] = chamberlinDistanceAzimuth(\u03c6 - p[1], p[3], p[2], cos\u03c6, sin\u03c6, \u03bb - p[0]);\n        if (!v[i][0]) return p.point;\n        v[i][1] = chamberlinLongitude(v[i][1] - p.v[1]);\n      }\n      var point = mean.slice();\n      for (var i = 0; i < 3; ++i) {\n        var j = i == 2 ? 0 : i + 1;\n        var a = chamberlinAngle(points[i].v[0], v[i][0], v[j][0]);\n        if (v[i][1] < 0) a = -a;\n        if (!i) {\n          point[0] += v[i][0] * Math.cos(a);\n          point[1] -= v[i][0] * Math.sin(a);\n        } else if (i == 1) {\n          a = \u03b21 - a;\n          point[0] -= v[i][0] * Math.cos(a);\n          point[1] -= v[i][0] * Math.sin(a);\n        } else {\n          a = \u03b22 - a;\n          point[0] += v[i][0] * Math.cos(a);\n          point[1] += v[i][0] * Math.sin(a);\n        }\n      }\n      point[0] /= 3, point[1] /= 3;\n      return point;\n    }\n    return forward;\n  }\n  function chamberlinProjection() {\n    var points = [ [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ], m = projectionMutator(chamberlin), p = m(points), rotate = p.rotate;\n    delete p.rotate;\n    p.points = function(_) {\n      if (!arguments.length) return points;\n      points = _;\n      var origin = d3.geo.centroid({\n        type: \"MultiPoint\",\n        coordinates: points\n      }), r = [ -origin[0], -origin[1] ];\n      rotate.call(p, r);\n      return m(points.map(d3.geo.rotation(r)).map(chamberlinRadians));\n    };\n    return p.points([ [ -150, 55 ], [ -35, 55 ], [ -92.5, 10 ] ]);\n  }\n  function chamberlinDistanceAzimuth(d\u03c6, c1, s1, c2, s2, d\u03bb) {\n    var cosd\u03bb = Math.cos(d\u03bb), r;\n    if (Math.abs(d\u03c6) > 1 || Math.abs(d\u03bb) > 1) {\n      r = acos(s1 * s2 + c1 * c2 * cosd\u03bb);\n    } else {\n      var sind\u03c6 = Math.sin(.5 * d\u03c6), sind\u03bb = Math.sin(.5 * d\u03bb);\n      r = 2 * asin(Math.sqrt(sind\u03c6 * sind\u03c6 + c1 * c2 * sind\u03bb * sind\u03bb));\n    }\n    if (Math.abs(r) > \u03b5) {\n      return [ r, Math.atan2(c2 * Math.sin(d\u03bb), c1 * s2 - s1 * c2 * cosd\u03bb) ];\n    }\n    return [ 0, 0 ];\n  }\n  function chamberlinAngle(b, c, a) {\n    return acos(.5 * (b * b + c * c - a * a) / (b * c));\n  }\n  function chamberlinLongitude(\u03bb) {\n    return \u03bb - 2 * \u03c0 * Math.floor((\u03bb + \u03c0) / (2 * \u03c0));\n  }\n  function chamberlinRadians(point) {\n    return [ point[0] * radians, point[1] * radians ];\n  }\n  (d3.geo.chamberlin = chamberlinProjection).raw = chamberlin;\n  function collignon(\u03bb, \u03c6) {\n    var \u03b1 = asqrt(1 - Math.sin(\u03c6));\n    return [ 2 / sqrt\u03c0 * \u03bb * \u03b1, sqrt\u03c0 * (1 - \u03b1) ];\n  }\n  collignon.invert = function(x, y) {\n    var \u03bb = (\u03bb = y / sqrt\u03c0 - 1) * \u03bb;\n    return [ \u03bb > 0 ? x * Math.sqrt(\u03c0 / \u03bb) / 2 : 0, asin(1 - \u03bb) ];\n  };\n  (d3.geo.collignon = function() {\n    return projection(collignon);\n  }).raw = collignon;\n  function craig(\u03c60) {\n    var tan\u03c60 = Math.tan(\u03c60);\n    function forward(\u03bb, \u03c6) {\n      return [ \u03bb, (\u03bb ? \u03bb / Math.sin(\u03bb) : 1) * (Math.sin(\u03c6) * Math.cos(\u03bb) - tan\u03c60 * Math.cos(\u03c6)) ];\n    }\n    forward.invert = tan\u03c60 ? function(x, y) {\n      if (x) y *= Math.sin(x) / x;\n      var cos\u03bb = Math.cos(x);\n      return [ x, 2 * Math.atan2(Math.sqrt(cos\u03bb * cos\u03bb + tan\u03c60 * tan\u03c60 - y * y) - cos\u03bb, tan\u03c60 - y) ];\n    } : function(x, y) {\n      return [ x, asin(x ? y * Math.tan(x) / x : y) ];\n    };\n    return forward;\n  }\n  (d3.geo.craig = function() {\n    return parallel1Projection(craig);\n  }).raw = craig;\n  function craster(\u03bb, \u03c6) {\n    var sqrt3 = Math.sqrt(3);\n    return [ sqrt3 * \u03bb * (2 * Math.cos(2 * \u03c6 / 3) - 1) / sqrt\u03c0, sqrt3 * sqrt\u03c0 * Math.sin(\u03c6 / 3) ];\n  }\n  craster.invert = function(x, y) {\n    var sqrt3 = Math.sqrt(3), \u03c6 = 3 * asin(y / (sqrt3 * sqrt\u03c0));\n    return [ sqrt\u03c0 * x / (sqrt3 * (2 * Math.cos(2 * \u03c6 / 3) - 1)), \u03c6 ];\n  };\n  (d3.geo.craster = function() {\n    return projection(craster);\n  }).raw = craster;\n  function cylindricalEqualArea(\u03c60) {\n    var cos\u03c60 = Math.cos(\u03c60);\n    function forward(\u03bb, \u03c6) {\n      return [ \u03bb * cos\u03c60, Math.sin(\u03c6) / cos\u03c60 ];\n    }\n    forward.invert = function(x, y) {\n      return [ x / cos\u03c60, asin(y * cos\u03c60) ];\n    };\n    return forward;\n  }\n  (d3.geo.cylindricalEqualArea = function() {\n    return parallel1Projection(cylindricalEqualArea);\n  }).raw = cylindricalEqualArea;\n  function cylindricalStereographic(\u03c60) {\n    var cos\u03c60 = Math.cos(\u03c60);\n    function forward(\u03bb, \u03c6) {\n      return [ \u03bb * cos\u03c60, (1 + cos\u03c60) * Math.tan(\u03c6 * .5) ];\n    }\n    forward.invert = function(x, y) {\n      return [ x / cos\u03c60, Math.atan(y / (1 + cos\u03c60)) * 2 ];\n    };\n    return forward;\n  }\n  (d3.geo.cylindricalStereographic = function() {\n    return parallel1Projection(cylindricalStereographic);\n  }).raw = cylindricalStereographic;\n  function eckert1(\u03bb, \u03c6) {\n    var \u03b1 = Math.sqrt(8 / (3 * \u03c0));\n    return [ \u03b1 * \u03bb * (1 - Math.abs(\u03c6) / \u03c0), \u03b1 * \u03c6 ];\n  }\n  eckert1.invert = function(x, y) {\n    var \u03b1 = Math.sqrt(8 / (3 * \u03c0)), \u03c6 = y / \u03b1;\n    return [ x / (\u03b1 * (1 - Math.abs(\u03c6) / \u03c0)), \u03c6 ];\n  };\n  (d3.geo.eckert1 = function() {\n    return projection(eckert1);\n  }).raw = eckert1;\n  function eckert2(\u03bb, \u03c6) {\n    var \u03b1 = Math.sqrt(4 - 3 * Math.sin(Math.abs(\u03c6)));\n    return [ 2 / Math.sqrt(6 * \u03c0) * \u03bb * \u03b1, sgn(\u03c6) * Math.sqrt(2 * \u03c0 / 3) * (2 - \u03b1) ];\n  }\n  eckert2.invert = function(x, y) {\n    var \u03b1 = 2 - Math.abs(y) / Math.sqrt(2 * \u03c0 / 3);\n    return [ x * Math.sqrt(6 * \u03c0) / (2 * \u03b1), sgn(y) * asin((4 - \u03b1 * \u03b1) / 3) ];\n  };\n  (d3.geo.eckert2 = function() {\n    return projection(eckert2);\n  }).raw = eckert2;\n  function eckert3(\u03bb, \u03c6) {\n    var k = Math.sqrt(\u03c0 * (4 + \u03c0));\n    return [ 2 / k * \u03bb * (1 + Math.sqrt(1 - 4 * \u03c6 * \u03c6 / (\u03c0 * \u03c0))), 4 / k * \u03c6 ];\n  }\n  eckert3.invert = function(x, y) {\n    var k = Math.sqrt(\u03c0 * (4 + \u03c0)) / 2;\n    return [ x * k / (1 + asqrt(1 - y * y * (4 + \u03c0) / (4 * \u03c0))), y * k / 2 ];\n  };\n  (d3.geo.eckert3 = function() {\n    return projection(eckert3);\n  }).raw = eckert3;\n  function eckert4(\u03bb, \u03c6) {\n    var k = (2 + half\u03c0) * Math.sin(\u03c6);\n    \u03c6 /= 2;\n    for (var i = 0, \u03b4 = Infinity; i < 10 && Math.abs(\u03b4) > \u03b5; i++) {\n      var cos\u03c6 = Math.cos(\u03c6);\n      \u03c6 -= \u03b4 = (\u03c6 + Math.sin(\u03c6) * (cos\u03c6 + 2) - k) / (2 * cos\u03c6 * (1 + cos\u03c6));\n    }\n    return [ 2 / Math.sqrt(\u03c0 * (4 + \u03c0)) * \u03bb * (1 + Math.cos(\u03c6)), 2 * Math.sqrt(\u03c0 / (4 + \u03c0)) * Math.sin(\u03c6) ];\n  }\n  eckert4.invert = function(x, y) {\n    var A = .5 * y * Math.sqrt((4 + \u03c0) / \u03c0), k = asin(A), c = Math.cos(k);\n    return [ x / (2 / Math.sqrt(\u03c0 * (4 + \u03c0)) * (1 + c)), asin((k + A * (c + 2)) / (2 + half\u03c0)) ];\n  };\n  (d3.geo.eckert4 = function() {\n    return projection(eckert4);\n  }).raw = eckert4;\n  function eckert5(\u03bb, \u03c6) {\n    return [ \u03bb * (1 + Math.cos(\u03c6)) / Math.sqrt(2 + \u03c0), 2 * \u03c6 / Math.sqrt(2 + \u03c0) ];\n  }\n  eckert5.invert = function(x, y) {\n    var k = Math.sqrt(2 + \u03c0), \u03c6 = y * k / 2;\n    return [ k * x / (1 + Math.cos(\u03c6)), \u03c6 ];\n  };\n  (d3.geo.eckert5 = function() {\n    return projection(eckert5);\n  }).raw = eckert5;\n  function eckert6(\u03bb, \u03c6) {\n    var k = (1 + half\u03c0) * Math.sin(\u03c6);\n    for (var i = 0, \u03b4 = Infinity; i < 10 && Math.abs(\u03b4) > \u03b5; i++) {\n      \u03c6 -= \u03b4 = (\u03c6 + Math.sin(\u03c6) - k) / (1 + Math.cos(\u03c6));\n    }\n    k = Math.sqrt(2 + \u03c0);\n    return [ \u03bb * (1 + Math.cos(\u03c6)) / k, 2 * \u03c6 / k ];\n  }\n  eckert6.invert = function(x, y) {\n    var j = 1 + half\u03c0, k = Math.sqrt(j / 2);\n    return [ x * 2 * k / (1 + Math.cos(y *= k)), asin((y + Math.sin(y)) / j) ];\n  };\n  (d3.geo.eckert6 = function() {\n    return projection(eckert6);\n  }).raw = eckert6;\n  function eisenlohr(\u03bb, \u03c6) {\n    var s0 = Math.sin(\u03bb /= 2), c0 = Math.cos(\u03bb), k = Math.sqrt(Math.cos(\u03c6)), c1 = Math.cos(\u03c6 /= 2), t = Math.sin(\u03c6) / (c1 + Math.SQRT2 * c0 * k), c = Math.sqrt(2 / (1 + t * t)), v = Math.sqrt((Math.SQRT2 * c1 + (c0 + s0) * k) / (Math.SQRT2 * c1 + (c0 - s0) * k));\n    return [ eisenlohrK * (c * (v - 1 / v) - 2 * Math.log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * Math.atan(t)) ];\n  }\n  eisenlohr.invert = function(x, y) {\n    var p = d3.geo.august.raw.invert(x / 1.2, y * 1.065);\n    if (!p) return null;\n    var \u03bb = p[0], \u03c6 = p[1], i = 20;\n    x /= eisenlohrK, y /= eisenlohrK;\n    do {\n      var _0 = \u03bb / 2, _1 = \u03c6 / 2, s0 = Math.sin(_0), c0 = Math.cos(_0), s1 = Math.sin(_1), c1 = Math.cos(_1), cos1 = Math.cos(\u03c6), k = Math.sqrt(cos1), t = s1 / (c1 + Math.SQRT2 * c0 * k), t2 = t * t, c = Math.sqrt(2 / (1 + t2)), v0 = Math.SQRT2 * c1 + (c0 + s0) * k, v1 = Math.SQRT2 * c1 + (c0 - s0) * k, v2 = v0 / v1, v = Math.sqrt(v2), vm1v = v - 1 / v, vp1v = v + 1 / v, fx = c * vm1v - 2 * Math.log(v) - x, fy = c * t * vp1v - 2 * Math.atan(t) - y, \u03b4t\u03b4\u03bb = s1 && Math.SQRT1_2 * k * s0 * t2 / s1, \u03b4t\u03b4\u03c6 = (Math.SQRT2 * c0 * c1 + k) / (2 * (c1 + Math.SQRT2 * c0 * k) * (c1 + Math.SQRT2 * c0 * k) * k), \u03b4c\u03b4t = -.5 * t * c * c * c, \u03b4c\u03b4\u03bb = \u03b4c\u03b4t * \u03b4t\u03b4\u03bb, \u03b4c\u03b4\u03c6 = \u03b4c\u03b4t * \u03b4t\u03b4\u03c6, A = (A = 2 * c1 + Math.SQRT2 * k * (c0 - s0)) * A * v, \u03b4v\u03b4\u03bb = (Math.SQRT2 * c0 * c1 * k + cos1) / A, \u03b4v\u03b4\u03c6 = -(Math.SQRT2 * s0 * s1) / (k * A), \u03b4x\u03b4\u03bb = vm1v * \u03b4c\u03b4\u03bb - 2 * \u03b4v\u03b4\u03bb / v + c * (\u03b4v\u03b4\u03bb + \u03b4v\u03b4\u03bb / v2), \u03b4x\u03b4\u03c6 = vm1v * \u03b4c\u03b4\u03c6 - 2 * \u03b4v\u03b4\u03c6 / v + c * (\u03b4v\u03b4\u03c6 + \u03b4v\u03b4\u03c6 / v2), \u03b4y\u03b4\u03bb = t * vp1v * \u03b4c\u03b4\u03bb - 2 * \u03b4t\u03b4\u03bb / (1 + t2) + c * vp1v * \u03b4t\u03b4\u03bb + c * t * (\u03b4v\u03b4\u03bb - \u03b4v\u03b4\u03bb / v2), \u03b4y\u03b4\u03c6 = t * vp1v * \u03b4c\u03b4\u03c6 - 2 * \u03b4t\u03b4\u03c6 / (1 + t2) + c * vp1v * \u03b4t\u03b4\u03c6 + c * t * (\u03b4v\u03b4\u03c6 - \u03b4v\u03b4\u03c6 / v2), denominator = \u03b4x\u03b4\u03c6 * \u03b4y\u03b4\u03bb - \u03b4y\u03b4\u03c6 * \u03b4x\u03b4\u03bb;\n      if (!denominator) break;\n      var \u03b4\u03bb = (fy * \u03b4x\u03b4\u03c6 - fx * \u03b4y\u03b4\u03c6) / denominator, \u03b4\u03c6 = (fx * \u03b4y\u03b4\u03bb - fy * \u03b4x\u03b4\u03bb) / denominator;\n      \u03bb -= \u03b4\u03bb;\n      \u03c6 = Math.max(-half\u03c0, Math.min(half\u03c0, \u03c6 - \u03b4\u03c6));\n    } while ((Math.abs(\u03b4\u03bb) > \u03b5 || Math.abs(\u03b4\u03c6) > \u03b5) && --i > 0);\n    return Math.abs(Math.abs(\u03c6) - half\u03c0) < \u03b5 ? [ 0, \u03c6 ] : i && [ \u03bb, \u03c6 ];\n  };\n  var eisenlohrK = 3 + 2 * Math.SQRT2;\n  (d3.geo.eisenlohr = function() {\n    return projection(eisenlohr);\n  }).raw = eisenlohr;\n  function fahey(\u03bb, \u03c6) {\n    var t = Math.tan(\u03c6 / 2);\n    return [ \u03bb * faheyK * asqrt(1 - t * t), (1 + faheyK) * t ];\n  }\n  fahey.invert = function(x, y) {\n    var t = y / (1 + faheyK);\n    return [ x ? x / (faheyK * asqrt(1 - t * t)) : 0, 2 * Math.atan(t) ];\n  };\n  var faheyK = Math.cos(35 * radians);\n  (d3.geo.fahey = function() {\n    return projection(fahey);\n  }).raw = fahey;\n  function foucaut(\u03bb, \u03c6) {\n    var k = \u03c6 / 2, cosk = Math.cos(k);\n    return [ 2 * \u03bb / sqrt\u03c0 * Math.cos(\u03c6) * cosk * cosk, sqrt\u03c0 * Math.tan(k) ];\n  }\n  foucaut.invert = function(x, y) {\n    var k = Math.atan(y / sqrt\u03c0), cosk = Math.cos(k), \u03c6 = 2 * k;\n    return [ x * sqrt\u03c0 * .5 / (Math.cos(\u03c6) * cosk * cosk), \u03c6 ];\n  };\n  (d3.geo.foucaut = function() {\n    return projection(foucaut);\n  }).raw = foucaut;\n  d3.geo.gilbert = function(projection) {\n    var e = d3.geo.equirectangular().scale(degrees).translate([ 0, 0 ]);\n    function gilbert(coordinates) {\n      return projection([ coordinates[0] * .5, asin(Math.tan(coordinates[1] * .5 * radians)) * degrees ]);\n    }\n    if (projection.invert) gilbert.invert = function(coordinates) {\n      coordinates = projection.invert(coordinates);\n      coordinates[0] *= 2;\n      coordinates[1] = 2 * Math.atan(Math.sin(coordinates[1] * radians)) * degrees;\n      return coordinates;\n    };\n    gilbert.stream = function(stream) {\n      stream = projection.stream(stream);\n      var s = e.stream({\n        point: function(\u03bb, \u03c6) {\n          stream.point(\u03bb * .5, asin(Math.tan(-\u03c6 * .5 * radians)) * degrees);\n        },\n        lineStart: function() {\n          stream.lineStart();\n        },\n        lineEnd: function() {\n          stream.lineEnd();\n        },\n        polygonStart: function() {\n          stream.polygonStart();\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n        }\n      });\n      s.sphere = function() {\n        stream.sphere();\n      };\n      s.valid = false;\n      return s;\n    };\n    return gilbert;\n  };\n  var gingeryAzimuthalEquidistant = d3.geo.azimuthalEquidistant.raw;\n  function gingery(\u03c1, n) {\n    var k = 2 * \u03c0 / n, \u03c12 = \u03c1 * \u03c1;\n    function forward(\u03bb, \u03c6) {\n      var p = gingeryAzimuthalEquidistant(\u03bb, \u03c6), x = p[0], y = p[1], r2 = x * x + y * y;\n      if (r2 > \u03c12) {\n        var r = Math.sqrt(r2), \u03b8 = Math.atan2(y, x), \u03b80 = k * Math.round(\u03b8 / k), \u03b1 = \u03b8 - \u03b80, \u03c1cos\u03b1 = \u03c1 * Math.cos(\u03b1), k_ = (\u03c1 * Math.sin(\u03b1) - \u03b1 * Math.sin(\u03c1cos\u03b1)) / (half\u03c0 - \u03c1cos\u03b1), s_ = arcLength_(\u03b1, k_), e = (\u03c0 - \u03c1) / gingeryIntegrate(s_, \u03c1cos\u03b1, \u03c0);\n        x = r;\n        var i = 50, \u03b4;\n        do {\n          x -= \u03b4 = (\u03c1 + gingeryIntegrate(s_, \u03c1cos\u03b1, x) * e - r) / (s_(x) * e);\n        } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n        y = \u03b1 * Math.sin(x);\n        if (x < half\u03c0) y -= k_ * (x - half\u03c0);\n        var s = Math.sin(\u03b80), c = Math.cos(\u03b80);\n        p[0] = x * c - y * s;\n        p[1] = x * s + y * c;\n      }\n      return p;\n    }\n    forward.invert = function(x, y) {\n      var r2 = x * x + y * y;\n      if (r2 > \u03c12) {\n        var r = Math.sqrt(r2), \u03b8 = Math.atan2(y, x), \u03b80 = k * Math.round(\u03b8 / k), d\u03b8 = \u03b8 - \u03b80, x = r * Math.cos(d\u03b8);\n        y = r * Math.sin(d\u03b8);\n        var x_half\u03c0 = x - half\u03c0, sinx = Math.sin(x), \u03b1 = y / sinx, \u03b4 = x < half\u03c0 ? Infinity : 0, i = 10;\n        while (true) {\n          var \u03c1sin\u03b1 = \u03c1 * Math.sin(\u03b1), \u03c1cos\u03b1 = \u03c1 * Math.cos(\u03b1), sin\u03c1cos\u03b1 = Math.sin(\u03c1cos\u03b1), half\u03c0_\u03c1cos\u03b1 = half\u03c0 - \u03c1cos\u03b1, k_ = (\u03c1sin\u03b1 - \u03b1 * sin\u03c1cos\u03b1) / half\u03c0_\u03c1cos\u03b1, s_ = arcLength_(\u03b1, k_);\n          if (Math.abs(\u03b4) < \u03b52 || !--i) break;\n          \u03b1 -= \u03b4 = (\u03b1 * sinx - k_ * x_half\u03c0 - y) / (sinx - x_half\u03c0 * 2 * (half\u03c0_\u03c1cos\u03b1 * (\u03c1cos\u03b1 + \u03b1 * \u03c1sin\u03b1 * Math.cos(\u03c1cos\u03b1) - sin\u03c1cos\u03b1) - \u03c1sin\u03b1 * (\u03c1sin\u03b1 - \u03b1 * sin\u03c1cos\u03b1)) / (half\u03c0_\u03c1cos\u03b1 * half\u03c0_\u03c1cos\u03b1));\n        }\n        r = \u03c1 + gingeryIntegrate(s_, \u03c1cos\u03b1, x) * (\u03c0 - \u03c1) / gingeryIntegrate(s_, \u03c1cos\u03b1, \u03c0);\n        \u03b8 = \u03b80 + \u03b1;\n        x = r * Math.cos(\u03b8);\n        y = r * Math.sin(\u03b8);\n      }\n      return gingeryAzimuthalEquidistant.invert(x, y);\n    };\n    return forward;\n  }\n  function arcLength_(\u03b1, k) {\n    return function(x) {\n      var y_ = \u03b1 * Math.cos(x);\n      if (x < half\u03c0) y_ -= k;\n      return Math.sqrt(1 + y_ * y_);\n    };\n  }\n  function gingeryProjection() {\n    var n = 6, \u03c1 = 30 * radians, c\u03c1 = Math.cos(\u03c1), s\u03c1 = Math.sin(\u03c1), m = projectionMutator(gingery), p = m(\u03c1, n), stream_ = p.stream, \u03b5 = .01, cr = -Math.cos(\u03b5 * radians), sr = Math.sin(\u03b5 * radians);\n    p.radius = function(_) {\n      if (!arguments.length) return \u03c1 * degrees;\n      c\u03c1 = Math.cos(\u03c1 = _ * radians);\n      s\u03c1 = Math.sin(\u03c1);\n      return m(\u03c1, n);\n    };\n    p.lobes = function(_) {\n      if (!arguments.length) return n;\n      return m(\u03c1, n = +_);\n    };\n    p.stream = function(stream) {\n      var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([ 0, 0 ]), \n      stream_(stream));\n      p.rotate(rotate);\n      rotateStream.sphere = function() {\n        sphereStream.polygonStart(), sphereStream.lineStart();\n        for (var i = 0, \u03b4 = 2 * \u03c0 / n, \u03c6 = 0; i < n; ++i, \u03c6 -= \u03b4) {\n          sphereStream.point(Math.atan2(sr * Math.cos(\u03c6), cr) * degrees, Math.asin(sr * Math.sin(\u03c6)) * degrees);\n          sphereStream.point(Math.atan2(s\u03c1 * Math.cos(\u03c6 - \u03b4 / 2), c\u03c1) * degrees, Math.asin(s\u03c1 * Math.sin(\u03c6 - \u03b4 / 2)) * degrees);\n        }\n        sphereStream.lineEnd(), sphereStream.polygonEnd();\n      };\n      return rotateStream;\n    };\n    return p;\n  }\n  function gingeryIntegrate(f, a, b) {\n    var n = 50, h = (b - a) / n, s = f(a) + f(b);\n    for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n    return s * .5 * h;\n  }\n  (d3.geo.gingery = gingeryProjection).raw = gingery;\n  function ginzburgPolyconic(a, b, c, d, e, f, g, h) {\n    if (arguments.length < 8) h = 0;\n    function forward(\u03bb, \u03c6) {\n      if (!\u03c6) return [ a * \u03bb / \u03c0, 0 ];\n      var \u03c62 = \u03c6 * \u03c6, xB = a + \u03c62 * (b + \u03c62 * (c + \u03c62 * d)), yB = \u03c6 * (e - 1 + \u03c62 * (f - h + \u03c62 * g)), m = (xB * xB + yB * yB) / (2 * yB), \u03b1 = \u03bb * Math.asin(xB / m) / \u03c0;\n      return [ m * Math.sin(\u03b1), \u03c6 * (1 + \u03c62 * h) + m * (1 - Math.cos(\u03b1)) ];\n    }\n    forward.invert = function(x, y) {\n      var \u03bb = \u03c0 * x / a, \u03c6 = y, \u03b4\u03bb, \u03b4\u03c6, i = 50;\n      do {\n        var \u03c62 = \u03c6 * \u03c6, xB = a + \u03c62 * (b + \u03c62 * (c + \u03c62 * d)), yB = \u03c6 * (e - 1 + \u03c62 * (f - h + \u03c62 * g)), p = xB * xB + yB * yB, q = 2 * yB, m = p / q, m2 = m * m, d\u03b1d\u03bb = Math.asin(xB / m) / \u03c0, \u03b1 = \u03bb * d\u03b1d\u03bb;\n        xB2 = xB * xB, dxBd\u03c6 = (2 * b + \u03c62 * (4 * c + \u03c62 * 6 * d)) * \u03c6, dyBd\u03c6 = e + \u03c62 * (3 * f + \u03c62 * 5 * g), \n        dpd\u03c6 = 2 * (xB * dxBd\u03c6 + yB * (dyBd\u03c6 - 1)), dqd\u03c6 = 2 * (dyBd\u03c6 - 1), dmd\u03c6 = (dpd\u03c6 * q - p * dqd\u03c6) / (q * q), \n        cos\u03b1 = Math.cos(\u03b1), sin\u03b1 = Math.sin(\u03b1), mcos\u03b1 = m * cos\u03b1, msin\u03b1 = m * sin\u03b1, d\u03b1d\u03c6 = \u03bb / \u03c0 * (1 / asqrt(1 - xB2 / m2)) * (dxBd\u03c6 * m - xB * dmd\u03c6) / m2, \n        fx = msin\u03b1 - x, fy = \u03c6 * (1 + \u03c62 * h) + m - mcos\u03b1 - y, \u03b4x\u03b4\u03c6 = dmd\u03c6 * sin\u03b1 + mcos\u03b1 * d\u03b1d\u03c6, \n        \u03b4x\u03b4\u03bb = mcos\u03b1 * d\u03b1d\u03bb, \u03b4y\u03b4\u03c6 = 1 + dmd\u03c6 - (dmd\u03c6 * cos\u03b1 - msin\u03b1 * d\u03b1d\u03c6), \u03b4y\u03b4\u03bb = msin\u03b1 * d\u03b1d\u03bb, \n        denominator = \u03b4x\u03b4\u03c6 * \u03b4y\u03b4\u03bb - \u03b4y\u03b4\u03c6 * \u03b4x\u03b4\u03bb;\n        if (!denominator) break;\n        \u03bb -= \u03b4\u03bb = (fy * \u03b4x\u03b4\u03c6 - fx * \u03b4y\u03b4\u03c6) / denominator;\n        \u03c6 -= \u03b4\u03c6 = (fx * \u03b4y\u03b4\u03bb - fy * \u03b4x\u03b4\u03bb) / denominator;\n      } while ((Math.abs(\u03b4\u03bb) > \u03b5 || Math.abs(\u03b4\u03c6) > \u03b5) && --i > 0);\n      return [ \u03bb, \u03c6 ];\n    };\n    return forward;\n  }\n  var ginzburg4 = ginzburgPolyconic(2.8284, -1.6988, .75432, -.18071, 1.76003, -.38914, .042555);\n  (d3.geo.ginzburg4 = function() {\n    return projection(ginzburg4);\n  }).raw = ginzburg4;\n  var ginzburg5 = ginzburgPolyconic(2.583819, -.835827, .170354, -.038094, 1.543313, -.411435, .082742);\n  (d3.geo.ginzburg5 = function() {\n    return projection(ginzburg5);\n  }).raw = ginzburg5;\n  var ginzburg6 = ginzburgPolyconic(5 / 6 * \u03c0, -.62636, -.0344, 0, 1.3493, -.05524, 0, .045);\n  (d3.geo.ginzburg6 = function() {\n    return projection(ginzburg6);\n  }).raw = ginzburg6;\n  function ginzburg8(\u03bb, \u03c6) {\n    var \u03bb2 = \u03bb * \u03bb, \u03c62 = \u03c6 * \u03c6;\n    return [ \u03bb * (1 - .162388 * \u03c62) * (.87 - 952426e-9 * \u03bb2 * \u03bb2), \u03c6 * (1 + \u03c62 / 12) ];\n  }\n  ginzburg8.invert = function(x, y) {\n    var \u03bb = x, \u03c6 = y, i = 50, \u03b4;\n    do {\n      var \u03c62 = \u03c6 * \u03c6;\n      \u03c6 -= \u03b4 = (\u03c6 * (1 + \u03c62 / 12) - y) / (1 + \u03c62 / 4);\n    } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n    i = 50;\n    x /= 1 - .162388 * \u03c62;\n    do {\n      var \u03bb4 = (\u03bb4 = \u03bb * \u03bb) * \u03bb4;\n      \u03bb -= \u03b4 = (\u03bb * (.87 - 952426e-9 * \u03bb4) - x) / (.87 - .00476213 * \u03bb4);\n    } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n    return [ \u03bb, \u03c6 ];\n  };\n  (d3.geo.ginzburg8 = function() {\n    return projection(ginzburg8);\n  }).raw = ginzburg8;\n  var ginzburg9 = ginzburgPolyconic(2.6516, -.76534, .19123, -.047094, 1.36289, -.13965, .031762);\n  (d3.geo.ginzburg9 = function() {\n    return projection(ginzburg9);\n  }).raw = ginzburg9;\n  function quincuncialProjection(projectHemisphere) {\n    var dx = projectHemisphere(half\u03c0, 0)[0] - projectHemisphere(-half\u03c0, 0)[0];\n    function projection() {\n      var quincuncial = false, m = projectionMutator(projectAt), p = m(quincuncial);\n      p.quincuncial = function(_) {\n        if (!arguments.length) return quincuncial;\n        return m(quincuncial = !!_);\n      };\n      return p;\n    }\n    function projectAt(quincuncial) {\n      var forward = quincuncial ? function(\u03bb, \u03c6) {\n        var t = Math.abs(\u03bb) < half\u03c0, p = projectHemisphere(t ? \u03bb : \u03bb > 0 ? \u03bb - \u03c0 : \u03bb + \u03c0, \u03c6);\n        var x = (p[0] - p[1]) * Math.SQRT1_2, y = (p[0] + p[1]) * Math.SQRT1_2;\n        if (t) return [ x, y ];\n        var d = dx * Math.SQRT1_2, s = x > 0 ^ y > 0 ? -1 : 1;\n        return [ s * x - sgn(y) * d, s * y - sgn(x) * d ];\n      } : function(\u03bb, \u03c6) {\n        var s = \u03bb > 0 ? -.5 : .5, point = projectHemisphere(\u03bb + s * \u03c0, \u03c6);\n        point[0] -= s * dx;\n        return point;\n      };\n      if (projectHemisphere.invert) forward.invert = quincuncial ? function(x0, y0) {\n        var x = (x0 + y0) * Math.SQRT1_2, y = (y0 - x0) * Math.SQRT1_2, t = Math.abs(x) < .5 * dx && Math.abs(y) < .5 * dx;\n        if (!t) {\n          var d = dx * Math.SQRT1_2, s = x > 0 ^ y > 0 ? -1 : 1, x1 = -s * (x0 + (y > 0 ? 1 : -1) * d), y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);\n          x = (-x1 - y1) * Math.SQRT1_2;\n          y = (x1 - y1) * Math.SQRT1_2;\n        }\n        var p = projectHemisphere.invert(x, y);\n        if (!t) p[0] += x > 0 ? \u03c0 : -\u03c0;\n        return p;\n      } : function(x, y) {\n        var s = x > 0 ? -.5 : .5, location = projectHemisphere.invert(x + s * dx, y), \u03bb = location[0] - s * \u03c0;\n        if (\u03bb < -\u03c0) \u03bb += 2 * \u03c0; else if (\u03bb > \u03c0) \u03bb -= 2 * \u03c0;\n        location[0] = \u03bb;\n        return location;\n      };\n      return forward;\n    }\n    projection.raw = projectAt;\n    return projection;\n  }\n  function gringorten(\u03bb, \u03c6) {\n    var s\u03bb = sgn(\u03bb), s\u03c6 = sgn(\u03c6), cos\u03c6 = Math.cos(\u03c6), x = Math.cos(\u03bb) * cos\u03c6, y = Math.sin(\u03bb) * cos\u03c6, z = Math.sin(s\u03c6 * \u03c6);\n    \u03bb = Math.abs(Math.atan2(y, z));\n    \u03c6 = asin(x);\n    if (Math.abs(\u03bb - half\u03c0) > \u03b5) \u03bb %= half\u03c0;\n    var point = gringortenHexadecant(\u03bb > \u03c0 / 4 ? half\u03c0 - \u03bb : \u03bb, \u03c6);\n    if (\u03bb > \u03c0 / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n    return point[0] *= s\u03bb, point[1] *= -s\u03c6, point;\n  }\n  gringorten.invert = function(x, y) {\n    var sx = sgn(x), sy = sgn(y), x0 = -sx * x, y0 = -sy * y, t = y0 / x0 < 1, p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0), \u03bb = p[0], \u03c6 = p[1];\n    if (t) \u03bb = -half\u03c0 - \u03bb;\n    var cos\u03c6 = Math.cos(\u03c6), x = Math.cos(\u03bb) * cos\u03c6, y = Math.sin(\u03bb) * cos\u03c6, z = Math.sin(\u03c6);\n    return [ sx * (Math.atan2(y, -z) + \u03c0), sy * asin(x) ];\n  };\n  function gringortenHexadecant(\u03bb, \u03c6) {\n    if (\u03c6 === half\u03c0) return [ 0, 0 ];\n    var sin\u03c6 = Math.sin(\u03c6), r = sin\u03c6 * sin\u03c6, r2 = r * r, j = 1 + r2, k = 1 + 3 * r2, q = 1 - r2, z = asin(1 / Math.sqrt(j)), v = q + r * j * z, p2 = (1 - sin\u03c6) / v, p = Math.sqrt(p2), a2 = p2 * j, a = Math.sqrt(a2), h = p * q;\n    if (\u03bb === 0) return [ 0, -(h + r * a) ];\n    var cos\u03c6 = Math.cos(\u03c6), sec\u03c6 = 1 / cos\u03c6, drd\u03c6 = 2 * sin\u03c6 * cos\u03c6, dvd\u03c6 = (-3 * r + z * k) * drd\u03c6, dp2d\u03c6 = (-v * cos\u03c6 - (1 - sin\u03c6) * dvd\u03c6) / (v * v), dpd\u03c6 = .5 * dp2d\u03c6 / p, dhd\u03c6 = q * dpd\u03c6 - 2 * r * p * drd\u03c6, dra2d\u03c6 = r * j * dp2d\u03c6 + p2 * k * drd\u03c6, \u03bc = -sec\u03c6 * drd\u03c6, \u03bd = -sec\u03c6 * dra2d\u03c6, \u03b6 = -2 * sec\u03c6 * dhd\u03c6, \u039b = 4 * \u03bb / \u03c0;\n    if (\u03bb > .222 * \u03c0 || \u03c6 < \u03c0 / 4 && \u03bb > .175 * \u03c0) {\n      var x = (h + r * asqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n      if (\u03bb > \u03c0 / 4) return [ x, x ];\n      var x1 = x, x0 = .5 * x, i = 50;\n      x = .5 * (x0 + x1);\n      do {\n        var g = Math.sqrt(a2 - x * x), f = x * (\u03b6 + \u03bc * g) + \u03bd * asin(x / a) - \u039b;\n        if (!f) break;\n        if (f < 0) x0 = x; else x1 = x;\n        x = .5 * (x0 + x1);\n      } while (Math.abs(x1 - x0) > \u03b5 && --i > 0);\n    } else {\n      var x = \u03b5, i = 25, \u03b4;\n      do {\n        var x2 = x * x, g = asqrt(a2 - x2), \u03b6\u03bcg = \u03b6 + \u03bc * g, f = x * \u03b6\u03bcg + \u03bd * asin(x / a) - \u039b, df = \u03b6\u03bcg + (\u03bd - \u03bc * x2) / g;\n        x -= \u03b4 = g ? f / df : 0;\n      } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n    }\n    return [ x, -h - r * asqrt(a2 - x * x) ];\n  }\n  function gringortenHexadecantInvert(x, y) {\n    var x0 = 0, x1 = 1, r = .5, i = 50;\n    while (true) {\n      var r2 = r * r, sin\u03c6 = Math.sqrt(r), z = Math.asin(1 / Math.sqrt(1 + r2)), v = 1 - r2 + r * (1 + r2) * z, p2 = (1 - sin\u03c6) / v, p = Math.sqrt(p2), a2 = p2 * (1 + r2), h = p * (1 - r2), g2 = a2 - x * x, g = Math.sqrt(g2), y0 = y + h + r * g;\n      if (Math.abs(x1 - x0) < \u03b52 || --i === 0 || y0 === 0) break;\n      if (y0 > 0) x0 = r; else x1 = r;\n      r = .5 * (x0 + x1);\n    }\n    if (!i) return null;\n    var \u03c6 = Math.asin(sin\u03c6), cos\u03c6 = Math.cos(\u03c6), sec\u03c6 = 1 / cos\u03c6, drd\u03c6 = 2 * sin\u03c6 * cos\u03c6, dvd\u03c6 = (-3 * r + z * (1 + 3 * r2)) * drd\u03c6, dp2d\u03c6 = (-v * cos\u03c6 - (1 - sin\u03c6) * dvd\u03c6) / (v * v), dpd\u03c6 = .5 * dp2d\u03c6 / p, dhd\u03c6 = (1 - r2) * dpd\u03c6 - 2 * r * p * drd\u03c6, \u03b6 = -2 * sec\u03c6 * dhd\u03c6, \u03bc = -sec\u03c6 * drd\u03c6, \u03bd = -sec\u03c6 * (r * (1 + r2) * dp2d\u03c6 + p2 * (1 + 3 * r2) * drd\u03c6);\n    return [ \u03c0 / 4 * (x * (\u03b6 + \u03bc * g) + \u03bd * Math.asin(x / Math.sqrt(a2))), \u03c6 ];\n  }\n  d3.geo.gringorten = quincuncialProjection(gringorten);\n  function ellipticJi(u, v, m) {\n    if (!u) {\n      var b = ellipticJ(v, 1 - m);\n      return [ [ 0, b[0] / b[1] ], [ 1 / b[1], 0 ], [ b[2] / b[1], 0 ] ];\n    }\n    var a = ellipticJ(u, m);\n    if (!v) return [ [ a[0], 0 ], [ a[1], 0 ], [ a[2], 0 ] ];\n    var b = ellipticJ(v, 1 - m), denominator = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n    return [ [ a[0] * b[2] / denominator, a[1] * a[2] * b[0] * b[1] / denominator ], [ a[1] * b[1] / denominator, -a[0] * a[2] * b[0] * b[2] / denominator ], [ a[2] * b[1] * b[2] / denominator, -m * a[0] * a[1] * b[0] / denominator ] ];\n  }\n  function ellipticJ(u, m) {\n    var ai, b, \u03c6, t, twon;\n    if (m < \u03b5) {\n      t = Math.sin(u);\n      b = Math.cos(u);\n      ai = .25 * m * (u - t * b);\n      return [ t - ai * b, b + ai * t, 1 - .5 * m * t * t, u - ai ];\n    }\n    if (m >= 1 - \u03b5) {\n      ai = .25 * (1 - m);\n      b = cosh(u);\n      t = tanh(u);\n      \u03c6 = 1 / b;\n      twon = b * sinh(u);\n      return [ t + ai * (twon - u) / (b * b), \u03c6 - ai * t * \u03c6 * (twon - u), \u03c6 + ai * t * \u03c6 * (twon + u), 2 * Math.atan(Math.exp(u)) - half\u03c0 + ai * (twon - u) / b ];\n    }\n    var a = [ 1, 0, 0, 0, 0, 0, 0, 0, 0 ], c = [ Math.sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0 ], i = 0;\n    b = Math.sqrt(1 - m);\n    twon = 1;\n    while (Math.abs(c[i] / a[i]) > \u03b5 && i < 8) {\n      ai = a[i++];\n      c[i] = .5 * (ai - b);\n      a[i] = .5 * (ai + b);\n      b = asqrt(ai * b);\n      twon *= 2;\n    }\n    \u03c6 = twon * a[i] * u;\n    do {\n      t = c[i] * Math.sin(b = \u03c6) / a[i];\n      \u03c6 = .5 * (asin(t) + \u03c6);\n    } while (--i);\n    return [ Math.sin(\u03c6), t = Math.cos(\u03c6), t / Math.cos(\u03c6 - b), \u03c6 ];\n  }\n  function ellipticFi(\u03c6, \u03c8, m) {\n    var r = Math.abs(\u03c6), i = Math.abs(\u03c8), sinh\u03c8 = sinh(i);\n    if (r) {\n      var csc\u03c6 = 1 / Math.sin(r), cot\u03c62 = 1 / (Math.tan(r) * Math.tan(r)), b = -(cot\u03c62 + m * sinh\u03c8 * sinh\u03c8 * csc\u03c6 * csc\u03c6 - 1 + m), c = (m - 1) * cot\u03c62, cot\u03bb2 = .5 * (-b + Math.sqrt(b * b - 4 * c));\n      return [ ellipticF(Math.atan(1 / Math.sqrt(cot\u03bb2)), m) * sgn(\u03c6), ellipticF(Math.atan(asqrt((cot\u03bb2 / cot\u03c62 - 1) / m)), 1 - m) * sgn(\u03c8) ];\n    }\n    return [ 0, ellipticF(Math.atan(sinh\u03c8), 1 - m) * sgn(\u03c8) ];\n  }\n  function ellipticF(\u03c6, m) {\n    if (!m) return \u03c6;\n    if (m === 1) return Math.log(Math.tan(\u03c6 / 2 + \u03c0 / 4));\n    var a = 1, b = Math.sqrt(1 - m), c = Math.sqrt(m);\n    for (var i = 0; Math.abs(c) > \u03b5; i++) {\n      if (\u03c6 % \u03c0) {\n        var d\u03c6 = Math.atan(b * Math.tan(\u03c6) / a);\n        if (d\u03c6 < 0) d\u03c6 += \u03c0;\n        \u03c6 += d\u03c6 + ~~(\u03c6 / \u03c0) * \u03c0;\n      } else \u03c6 += \u03c6;\n      c = (a + b) / 2;\n      b = Math.sqrt(a * b);\n      c = ((a = c) - b) / 2;\n    }\n    return \u03c6 / (Math.pow(2, i) * a);\n  }\n  function guyou(\u03bb, \u03c6) {\n    var k_ = (Math.SQRT2 - 1) / (Math.SQRT2 + 1), k = Math.sqrt(1 - k_ * k_), K = ellipticF(half\u03c0, k * k), f = -1;\n    var \u03c8 = Math.log(Math.tan(\u03c0 / 4 + Math.abs(\u03c6) / 2)), r = Math.exp(f * \u03c8) / Math.sqrt(k_), at = guyouComplexAtan(r * Math.cos(f * \u03bb), r * Math.sin(f * \u03bb)), t = ellipticFi(at[0], at[1], k * k);\n    return [ -t[1], (\u03c6 >= 0 ? 1 : -1) * (.5 * K - t[0]) ];\n  }\n  function guyouComplexAtan(x, y) {\n    var x2 = x * x, y_1 = y + 1, t = 1 - x2 - y * y;\n    return [ .5 * ((x >= 0 ? half\u03c0 : -half\u03c0) - Math.atan2(t, 2 * x)), -.25 * Math.log(t * t + 4 * x2) + .5 * Math.log(y_1 * y_1 + x2) ];\n  }\n  function guyouComplexDivide(a, b) {\n    var denominator = b[0] * b[0] + b[1] * b[1];\n    return [ (a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator ];\n  }\n  guyou.invert = function(x, y) {\n    var k_ = (Math.SQRT2 - 1) / (Math.SQRT2 + 1), k = Math.sqrt(1 - k_ * k_), K = ellipticF(half\u03c0, k * k), f = -1;\n    var j = ellipticJi(.5 * K - y, -x, k * k), tn = guyouComplexDivide(j[0], j[1]), \u03bb = Math.atan2(tn[1], tn[0]) / f;\n    return [ \u03bb, 2 * Math.atan(Math.exp(.5 / f * Math.log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - half\u03c0 ];\n  };\n  d3.geo.guyou = quincuncialProjection(guyou);\n  function hammerRetroazimuthal(\u03c60) {\n    var sin\u03c60 = Math.sin(\u03c60), cos\u03c60 = Math.cos(\u03c60), rotate = hammerRetroazimuthalRotation(\u03c60);\n    rotate.invert = hammerRetroazimuthalRotation(-\u03c60);\n    function forward(\u03bb, \u03c6) {\n      var p = rotate(\u03bb, \u03c6);\n      \u03bb = p[0], \u03c6 = p[1];\n      var sin\u03c6 = Math.sin(\u03c6), cos\u03c6 = Math.cos(\u03c6), cos\u03bb = Math.cos(\u03bb), z = acos(sin\u03c60 * sin\u03c6 + cos\u03c60 * cos\u03c6 * cos\u03bb), sinz = Math.sin(z), K = Math.abs(sinz) > \u03b5 ? z / sinz : 1;\n      return [ K * cos\u03c60 * Math.sin(\u03bb), (Math.abs(\u03bb) > half\u03c0 ? K : -K) * (sin\u03c60 * cos\u03c6 - cos\u03c60 * sin\u03c6 * cos\u03bb) ];\n    }\n    forward.invert = function(x, y) {\n      var \u03c1 = Math.sqrt(x * x + y * y), sinz = -Math.sin(\u03c1), cosz = Math.cos(\u03c1), a = \u03c1 * cosz, b = -y * sinz, c = \u03c1 * sin\u03c60, d = asqrt(a * a + b * b - c * c), \u03c6 = Math.atan2(a * c + b * d, b * c - a * d), \u03bb = (\u03c1 > half\u03c0 ? -1 : 1) * Math.atan2(x * sinz, \u03c1 * Math.cos(\u03c6) * cosz + y * Math.sin(\u03c6) * sinz);\n      return rotate.invert(\u03bb, \u03c6);\n    };\n    return forward;\n  }\n  function hammerRetroazimuthalRotation(\u03c60) {\n    var sin\u03c60 = Math.sin(\u03c60), cos\u03c60 = Math.cos(\u03c60);\n    return function(\u03bb, \u03c6) {\n      var cos\u03c6 = Math.cos(\u03c6), x = Math.cos(\u03bb) * cos\u03c6, y = Math.sin(\u03bb) * cos\u03c6, z = Math.sin(\u03c6);\n      return [ Math.atan2(y, x * cos\u03c60 - z * sin\u03c60), asin(z * cos\u03c60 + x * sin\u03c60) ];\n    };\n  }\n  function hammerRetroazimuthalProjection() {\n    var \u03c60 = 0, m = projectionMutator(hammerRetroazimuthal), p = m(\u03c60), rotate_ = p.rotate, stream_ = p.stream, circle = d3.geo.circle();\n    p.parallel = function(_) {\n      if (!arguments.length) return \u03c60 / \u03c0 * 180;\n      var r = p.rotate();\n      return m(\u03c60 = _ * \u03c0 / 180).rotate(r);\n    };\n    p.rotate = function(_) {\n      if (!arguments.length) return _ = rotate_.call(p), _[1] += \u03c60 / \u03c0 * 180, _;\n      rotate_.call(p, [ _[0], _[1] - \u03c60 / \u03c0 * 180 ]);\n      circle.origin([ -_[0], -_[1] ]);\n      return p;\n    };\n    p.stream = function(stream) {\n      stream = stream_(stream);\n      stream.sphere = function() {\n        stream.polygonStart();\n        var \u03b5 = .01, ring = circle.angle(90 - \u03b5)().coordinates[0], n = ring.length - 1, i = -1, p;\n        stream.lineStart();\n        while (++i < n) stream.point((p = ring[i])[0], p[1]);\n        stream.lineEnd();\n        ring = circle.angle(90 + \u03b5)().coordinates[0];\n        n = ring.length - 1;\n        stream.lineStart();\n        while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n        stream.lineEnd();\n        stream.polygonEnd();\n      };\n      return stream;\n    };\n    return p;\n  }\n  (d3.geo.hammerRetroazimuthal = hammerRetroazimuthalProjection).raw = hammerRetroazimuthal;\n  var hammerAzimuthalEqualArea = d3.geo.azimuthalEqualArea.raw;\n  function hammer(A, B) {\n    if (arguments.length < 2) B = A;\n    if (B === 1) return hammerAzimuthalEqualArea;\n    if (B === Infinity) return hammerQuarticAuthalic;\n    function forward(\u03bb, \u03c6) {\n      var coordinates = hammerAzimuthalEqualArea(\u03bb / B, \u03c6);\n      coordinates[0] *= A;\n      return coordinates;\n    }\n    forward.invert = function(x, y) {\n      var coordinates = hammerAzimuthalEqualArea.invert(x / A, y);\n      coordinates[0] *= B;\n      return coordinates;\n    };\n    return forward;\n  }\n  function hammerProjection() {\n    var B = 2, m = projectionMutator(hammer), p = m(B);\n    p.coefficient = function(_) {\n      if (!arguments.length) return B;\n      return m(B = +_);\n    };\n    return p;\n  }\n  function hammerQuarticAuthalic(\u03bb, \u03c6) {\n    return [ \u03bb * Math.cos(\u03c6) / Math.cos(\u03c6 /= 2), 2 * Math.sin(\u03c6) ];\n  }\n  hammerQuarticAuthalic.invert = function(x, y) {\n    var \u03c6 = 2 * asin(y / 2);\n    return [ x * Math.cos(\u03c6 / 2) / Math.cos(\u03c6), \u03c6 ];\n  };\n  (d3.geo.hammer = hammerProjection).raw = hammer;\n  function hatano(\u03bb, \u03c6) {\n    var c = Math.sin(\u03c6) * (\u03c6 < 0 ? 2.43763 : 2.67595);\n    for (var i = 0, \u03b4; i < 20; i++) {\n      \u03c6 -= \u03b4 = (\u03c6 + Math.sin(\u03c6) - c) / (1 + Math.cos(\u03c6));\n      if (Math.abs(\u03b4) < \u03b5) break;\n    }\n    return [ .85 * \u03bb * Math.cos(\u03c6 *= .5), Math.sin(\u03c6) * (\u03c6 < 0 ? 1.93052 : 1.75859) ];\n  }\n  hatano.invert = function(x, y) {\n    var \u03b8 = Math.abs(\u03b8 = y * (y < 0 ? .5179951515653813 : .5686373742600607)) > 1 - \u03b5 ? \u03b8 > 0 ? half\u03c0 : -half\u03c0 : asin(\u03b8);\n    return [ 1.1764705882352942 * x / Math.cos(\u03b8), Math.abs(\u03b8 = ((\u03b8 += \u03b8) + Math.sin(\u03b8)) * (y < 0 ? .4102345310814193 : .3736990601468637)) > 1 - \u03b5 ? \u03b8 > 0 ? half\u03c0 : -half\u03c0 : asin(\u03b8) ];\n  };\n  (d3.geo.hatano = function() {\n    return projection(hatano);\n  }).raw = hatano;\n  var healpixParallel = 41 + 48 / 36 + 37 / 3600;\n  function healpix(h) {\n    var lambert = d3.geo.cylindricalEqualArea.raw(0), \u03c60 = healpixParallel * \u03c0 / 180, dx0 = 2 * \u03c0, dx1 = d3.geo.collignon.raw(\u03c0, \u03c60)[0] - d3.geo.collignon.raw(-\u03c0, \u03c60)[0], y0 = lambert(0, \u03c60)[1], y1 = d3.geo.collignon.raw(0, \u03c60)[1], dy1 = d3.geo.collignon.raw(0, half\u03c0)[1] - y1, k = 2 * \u03c0 / h;\n    function forward(\u03bb, \u03c6) {\n      var point, \u03c62 = Math.abs(\u03c6);\n      if (\u03c62 > \u03c60) {\n        var i = Math.min(h - 1, Math.max(0, Math.floor((\u03bb + \u03c0) / k)));\n        \u03bb += \u03c0 * (h - 1) / h - i * k;\n        point = d3.geo.collignon.raw(\u03bb, \u03c62);\n        point[0] = point[0] * dx0 / dx1 - dx0 * (h - 1) / (2 * h) + i * dx0 / h;\n        point[1] = y0 + (point[1] - y1) * 4 * dy1 / dx0;\n        if (\u03c6 < 0) point[1] = -point[1];\n      } else {\n        point = lambert(\u03bb, \u03c6);\n      }\n      point[0] /= 2;\n      return point;\n    }\n    forward.invert = function(x, y) {\n      x *= 2;\n      var y2 = Math.abs(y);\n      if (y2 > y0) {\n        var i = Math.min(h - 1, Math.max(0, Math.floor((x + \u03c0) / k)));\n        x = (x + \u03c0 * (h - 1) / h - i * k) * dx1 / dx0;\n        var point = d3.geo.collignon.raw.invert(x, .25 * (y2 - y0) * dx0 / dy1 + y1);\n        point[0] -= \u03c0 * (h - 1) / h - i * k;\n        if (y < 0) point[1] = -point[1];\n        return point;\n      }\n      return lambert.invert(x, y);\n    };\n    return forward;\n  }\n  function healpixProjection() {\n    var n = 2, m = projectionMutator(healpix), p = m(n), stream_ = p.stream;\n    p.lobes = function(_) {\n      if (!arguments.length) return n;\n      return m(n = +_);\n    };\n    p.stream = function(stream) {\n      var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([ 0, 0 ]), \n      stream_(stream));\n      p.rotate(rotate);\n      rotateStream.sphere = function() {\n        d3.geo.stream(sphere(), sphereStream);\n      };\n      return rotateStream;\n    };\n    function sphere() {\n      var step = 180 / n;\n      return {\n        type: \"Polygon\",\n        coordinates: [ d3.range(-180, 180 + step / 2, step).map(function(x, i) {\n          return [ x, i & 1 ? 90 - 1e-6 : healpixParallel ];\n        }).concat(d3.range(180, -180 - step / 2, -step).map(function(x, i) {\n          return [ x, i & 1 ? -90 + 1e-6 : -healpixParallel ];\n        })) ]\n      };\n    }\n    return p;\n  }\n  (d3.geo.healpix = healpixProjection).raw = healpix;\n  function hill(K) {\n    var L = 1 + K, sin\u03b2 = Math.sin(1 / L), \u03b2 = asin(sin\u03b2), A = 2 * Math.sqrt(\u03c0 / (B = \u03c0 + 4 * \u03b2 * L)), B, \u03c10 = .5 * A * (L + Math.sqrt(K * (2 + K))), K2 = K * K, L2 = L * L;\n    function forward(\u03bb, \u03c6) {\n      var t = 1 - Math.sin(\u03c6), \u03c1, \u03c9;\n      if (t && t < 2) {\n        var \u03b8 = half\u03c0 - \u03c6, i = 25, \u03b4;\n        do {\n          var sin\u03b8 = Math.sin(\u03b8), cos\u03b8 = Math.cos(\u03b8), \u03b2_\u03b21 = \u03b2 + Math.atan2(sin\u03b8, L - cos\u03b8), C = 1 + L2 - 2 * L * cos\u03b8;\n          \u03b8 -= \u03b4 = (\u03b8 - K2 * \u03b2 - L * sin\u03b8 + C * \u03b2_\u03b21 - .5 * t * B) / (2 * L * sin\u03b8 * \u03b2_\u03b21);\n        } while (Math.abs(\u03b4) > \u03b52 && --i > 0);\n        \u03c1 = A * Math.sqrt(C);\n        \u03c9 = \u03bb * \u03b2_\u03b21 / \u03c0;\n      } else {\n        \u03c1 = A * (K + t);\n        \u03c9 = \u03bb * \u03b2 / \u03c0;\n      }\n      return [ \u03c1 * Math.sin(\u03c9), \u03c10 - \u03c1 * Math.cos(\u03c9) ];\n    }\n    forward.invert = function(x, y) {\n      var \u03c12 = x * x + (y -= \u03c10) * y, cos\u03b8 = (1 + L2 - \u03c12 / (A * A)) / (2 * L), \u03b8 = acos(cos\u03b8), sin\u03b8 = Math.sin(\u03b8), \u03b2_\u03b21 = \u03b2 + Math.atan2(sin\u03b8, L - cos\u03b8);\n      return [ asin(x / Math.sqrt(\u03c12)) * \u03c0 / \u03b2_\u03b21, asin(1 - 2 * (\u03b8 - K2 * \u03b2 - L * sin\u03b8 + (1 + L2 - 2 * L * cos\u03b8) * \u03b2_\u03b21) / B) ];\n    };\n    return forward;\n  }\n  function hillProjection() {\n    var K = 1, m = projectionMutator(hill), p = m(K);\n    p.ratio = function(_) {\n      if (!arguments.length) return K;\n      return m(K = +_);\n    };\n    return p;\n  }\n  (d3.geo.hill = hillProjection).raw = hill;\n  var sinuMollweide\u03c6 = .7109889596207567, sinuMollweideY = .0528035274542;\n  function sinuMollweide(\u03bb, \u03c6) {\n    return \u03c6 > -sinuMollweide\u03c6 ? (\u03bb = mollweide(\u03bb, \u03c6), \u03bb[1] += sinuMollweideY, \u03bb) : sinusoidal(\u03bb, \u03c6);\n  }\n  sinuMollweide.invert = function(x, y) {\n    return y > -sinuMollweide\u03c6 ? mollweide.invert(x, y - sinuMollweideY) : sinusoidal.invert(x, y);\n  };\n  (d3.geo.sinuMollweide = function() {\n    return projection(sinuMollweide).rotate([ -20, -55 ]);\n  }).raw = sinuMollweide;\n  function homolosine(\u03bb, \u03c6) {\n    return Math.abs(\u03c6) > sinuMollweide\u03c6 ? (\u03bb = mollweide(\u03bb, \u03c6), \u03bb[1] -= \u03c6 > 0 ? sinuMollweideY : -sinuMollweideY, \n    \u03bb) : sinusoidal(\u03bb, \u03c6);\n  }\n  homolosine.invert = function(x, y) {\n    return Math.abs(y) > sinuMollweide\u03c6 ? mollweide.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidal.invert(x, y);\n  };\n  (d3.geo.homolosine = function() {\n    return projection(homolosine);\n  }).raw = homolosine;\n  function kavrayskiy7(\u03bb, \u03c6) {\n    return [ 3 * \u03bb / (2 * \u03c0) * Math.sqrt(\u03c0 * \u03c0 / 3 - \u03c6 * \u03c6), \u03c6 ];\n  }\n  kavrayskiy7.invert = function(x, y) {\n    return [ 2 / 3 * \u03c0 * x / Math.sqrt(\u03c0 * \u03c0 / 3 - y * y), y ];\n  };\n  (d3.geo.kavrayskiy7 = function() {\n    return projection(kavrayskiy7);\n  }).raw = kavrayskiy7;\n  function lagrange(n) {\n    function forward(\u03bb, \u03c6) {\n      if (Math.abs(Math.abs(\u03c6) - half\u03c0) < \u03b5) return [ 0, \u03c6 < 0 ? -2 : 2 ];\n      var sin\u03c6 = Math.sin(\u03c6), v = Math.pow((1 + sin\u03c6) / (1 - sin\u03c6), n / 2), c = .5 * (v + 1 / v) + Math.cos(\u03bb *= n);\n      return [ 2 * Math.sin(\u03bb) / c, (v - 1 / v) / c ];\n    }\n    forward.invert = function(x, y) {\n      var y0 = Math.abs(y);\n      if (Math.abs(y0 - 2) < \u03b5) return x ? null : [ 0, sgn(y) * half\u03c0 ];\n      if (y0 > 2) return null;\n      x /= 2, y /= 2;\n      var x2 = x * x, y2 = y * y, t = 2 * y / (1 + x2 + y2);\n      t = Math.pow((1 + t) / (1 - t), 1 / n);\n      return [ Math.atan2(2 * x, 1 - x2 - y2) / n, asin((t - 1) / (t + 1)) ];\n    };\n    return forward;\n  }\n  function lagrangeProjection() {\n    var n = .5, m = projectionMutator(lagrange), p = m(n);\n    p.spacing = function(_) {\n      if (!arguments.length) return n;\n      return m(n = +_);\n    };\n    return p;\n  }\n  (d3.geo.lagrange = lagrangeProjection).raw = lagrange;\n  function larrivee(\u03bb, \u03c6) {\n    return [ \u03bb * (1 + Math.sqrt(Math.cos(\u03c6))) / 2, \u03c6 / (Math.cos(\u03c6 / 2) * Math.cos(\u03bb / 6)) ];\n  }\n  larrivee.invert = function(x, y) {\n    var x0 = Math.abs(x), y0 = Math.abs(y), \u03c0_sqrt2 = \u03c0 / Math.SQRT2, \u03bb = \u03b5, \u03c6 = half\u03c0;\n    if (y0 < \u03c0_sqrt2) \u03c6 *= y0 / \u03c0_sqrt2; else \u03bb += 6 * acos(\u03c0_sqrt2 / y0);\n    for (var i = 0; i < 25; i++) {\n      var sin\u03c6 = Math.sin(\u03c6), sqrtcos\u03c6 = asqrt(Math.cos(\u03c6)), sin\u03c6_2 = Math.sin(\u03c6 / 2), cos\u03c6_2 = Math.cos(\u03c6 / 2), sin\u03bb_6 = Math.sin(\u03bb / 6), cos\u03bb_6 = Math.cos(\u03bb / 6), f0 = .5 * \u03bb * (1 + sqrtcos\u03c6) - x0, f1 = \u03c6 / (cos\u03c6_2 * cos\u03bb_6) - y0, df0d\u03c6 = sqrtcos\u03c6 ? -.25 * \u03bb * sin\u03c6 / sqrtcos\u03c6 : 0, df0d\u03bb = .5 * (1 + sqrtcos\u03c6), df1d\u03c6 = (1 + .5 * \u03c6 * sin\u03c6_2 / cos\u03c6_2) / (cos\u03c6_2 * cos\u03bb_6), df1d\u03bb = \u03c6 / cos\u03c6_2 * (sin\u03bb_6 / 6) / (cos\u03bb_6 * cos\u03bb_6), denom = df0d\u03c6 * df1d\u03bb - df1d\u03c6 * df0d\u03bb, d\u03c6 = (f0 * df1d\u03bb - f1 * df0d\u03bb) / denom, d\u03bb = (f1 * df0d\u03c6 - f0 * df1d\u03c6) / denom;\n      \u03c6 -= d\u03c6;\n      \u03bb -= d\u03bb;\n      if (Math.abs(d\u03c6) < \u03b5 && Math.abs(d\u03bb) < \u03b5) break;\n    }\n    return [ x < 0 ? -\u03bb : \u03bb, y < 0 ? -\u03c6 : \u03c6 ];\n  };\n  (d3.geo.larrivee = function() {\n    return projection(larrivee);\n  }).raw = larrivee;\n  function laskowski(\u03bb, \u03c6) {\n    var \u03bb2 = \u03bb * \u03bb, \u03c62 = \u03c6 * \u03c6;\n    return [ \u03bb * (.975534 + \u03c62 * (-.119161 + \u03bb2 * -.0143059 + \u03c62 * -.0547009)), \u03c6 * (1.00384 + \u03bb2 * (.0802894 + \u03c62 * -.02855 + \u03bb2 * 199025e-9) + \u03c62 * (.0998909 + \u03c62 * -.0491032)) ];\n  }\n  laskowski.invert = function(x, y) {\n    var \u03bb = sgn(x) * \u03c0, \u03c6 = y / 2, i = 50;\n    do {\n      var \u03bb2 = \u03bb * \u03bb, \u03c62 = \u03c6 * \u03c6, \u03bb\u03c6 = \u03bb * \u03c6, fx = \u03bb * (.975534 + \u03c62 * (-.119161 + \u03bb2 * -.0143059 + \u03c62 * -.0547009)) - x, fy = \u03c6 * (1.00384 + \u03bb2 * (.0802894 + \u03c62 * -.02855 + \u03bb2 * 199025e-9) + \u03c62 * (.0998909 + \u03c62 * -.0491032)) - y, \u03b4x\u03b4\u03bb = .975534 - \u03c62 * (.119161 + 3 * \u03bb2 * .0143059 + \u03c62 * .0547009), \u03b4x\u03b4\u03c6 = -\u03bb\u03c6 * (2 * .119161 + 4 * .0547009 * \u03c62 + 2 * .0143059 * \u03bb2), \u03b4y\u03b4\u03bb = \u03bb\u03c6 * (2 * .0802894 + 4 * 199025e-9 * \u03bb2 + 2 * -.02855 * \u03c62), \u03b4y\u03b4\u03c6 = 1.00384 + \u03bb2 * (.0802894 + 199025e-9 * \u03bb2) + \u03c62 * (3 * (.0998909 - .02855 * \u03bb2) - 5 * .0491032 * \u03c62), denominator = \u03b4x\u03b4\u03c6 * \u03b4y\u03b4\u03bb - \u03b4y\u03b4\u03c6 * \u03b4x\u03b4\u03bb, \u03b4\u03bb = (fy * \u03b4x\u03b4\u03c6 - fx * \u03b4y\u03b4\u03c6) / denominator, \u03b4\u03c6 = (fx * \u03b4y\u03b4\u03bb - fy * \u03b4x\u03b4\u03bb) / denominator;\n      \u03bb -= \u03b4\u03bb, \u03c6 -= \u03b4\u03c6;\n    } while ((Math.abs(\u03b4\u03bb) > \u03b5 || Math.abs(\u03b4\u03c6) > \u03b5) && --i > 0);\n    return i && [ \u03bb, \u03c6 ];\n  };\n  (d3.geo.laskowski = function() {\n    return projection(laskowski);\n  }).raw = laskowski;\n  function littrow(\u03bb, \u03c6) {\n    return [ Math.sin(\u03bb) / Math.cos(\u03c6), Math.tan(\u03c6) * Math.cos(\u03bb) ];\n  }\n  littrow.invert = function(x, y) {\n    var x2 = x * x, y2 = y * y, y2_1 = y2 + 1, cos\u03c6 = x ? Math.SQRT1_2 * Math.sqrt((y2_1 - Math.sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1) : 1 / Math.sqrt(y2_1);\n    return [ asin(x * cos\u03c6), sgn(y) * acos(cos\u03c6) ];\n  };\n  (d3.geo.littrow = function() {\n    return projection(littrow);\n  }).raw = littrow;\n  function loximuthal(\u03c60) {\n    var cos\u03c60 = Math.cos(\u03c60), tan\u03c60 = Math.tan(\u03c0 / 4 + \u03c60 / 2);\n    function forward(\u03bb, \u03c6) {\n      var y = \u03c6 - \u03c60, x = Math.abs(y) < \u03b5 ? \u03bb * cos\u03c60 : Math.abs(x = \u03c0 / 4 + \u03c6 / 2) < \u03b5 || Math.abs(Math.abs(x) - half\u03c0) < \u03b5 ? 0 : \u03bb * y / Math.log(Math.tan(x) / tan\u03c60);\n      return [ x, y ];\n    }\n    forward.invert = function(x, y) {\n      var \u03bb, \u03c6 = y + \u03c60;\n      return [ Math.abs(y) < \u03b5 ? x / cos\u03c60 : Math.abs(\u03bb = \u03c0 / 4 + \u03c6 / 2) < \u03b5 || Math.abs(Math.abs(\u03bb) - half\u03c0) < \u03b5 ? 0 : x * Math.log(Math.tan(\u03bb) / tan\u03c60) / y, \u03c6 ];\n    };\n    return forward;\n  }\n  (d3.geo.loximuthal = function() {\n    return parallel1Projection(loximuthal).parallel(40);\n  }).raw = loximuthal;\n  function miller(\u03bb, \u03c6) {\n    return [ \u03bb, 1.25 * Math.log(Math.tan(\u03c0 / 4 + .4 * \u03c6)) ];\n  }\n  miller.invert = function(x, y) {\n    return [ x, 2.5 * Math.atan(Math.exp(.8 * y)) - .625 * \u03c0 ];\n  };\n  (d3.geo.miller = function() {\n    return projection(miller);\n  }).raw = miller;\n  function modifiedStereographic(C) {\n    var m = C.length - 1;\n    function forward(\u03bb, \u03c6) {\n      var cos\u03c6 = Math.cos(\u03c6), k = 2 / (1 + cos\u03c6 * Math.cos(\u03bb)), zr = k * cos\u03c6 * Math.sin(\u03bb), zi = k * Math.sin(\u03c6), i = m, w = C[i], ar = w[0], ai = w[1], t;\n      while (--i >= 0) {\n        w = C[i];\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      ar = zr * (t = ar) - zi * ai;\n      ai = zr * ai + zi * t;\n      return [ ar, ai ];\n    }\n    forward.invert = function(x, y) {\n      var i = 20, zr = x, zi = y;\n      do {\n        var j = m, w = C[j], ar = w[0], ai = w[1], br = 0, bi = 0, t;\n        while (--j >= 0) {\n          w = C[j];\n          br = ar + zr * (t = br) - zi * bi;\n          bi = ai + zr * bi + zi * t;\n          ar = w[0] + zr * (t = ar) - zi * ai;\n          ai = w[1] + zr * ai + zi * t;\n        }\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = zr * (t = ar) - zi * ai - x;\n        ai = zr * ai + zi * t - y;\n        var denominator = br * br + bi * bi, \u03b4r, \u03b4i;\n        zr -= \u03b4r = (ar * br + ai * bi) / denominator;\n        zi -= \u03b4i = (ai * br - ar * bi) / denominator;\n      } while (Math.abs(\u03b4r) + Math.abs(\u03b4i) > \u03b5 * \u03b5 && --i > 0);\n      if (i) {\n        var \u03c1 = Math.sqrt(zr * zr + zi * zi), c = 2 * Math.atan(\u03c1 * .5), sinc = Math.sin(c);\n        return [ Math.atan2(zr * sinc, \u03c1 * Math.cos(c)), \u03c1 ? asin(zi * sinc / \u03c1) : 0 ];\n      }\n    };\n    return forward;\n  }\n  var modifiedStereographicCoefficients = {\n    alaska: [ [ .9972523, 0 ], [ .0052513, -.0041175 ], [ .0074606, .0048125 ], [ -.0153783, -.1968253 ], [ .0636871, -.1408027 ], [ .3660976, -.2937382 ] ],\n    gs48: [ [ .98879, 0 ], [ 0, 0 ], [ -.050909, 0 ], [ 0, 0 ], [ .075528, 0 ] ],\n    gs50: [ [ .984299, 0 ], [ .0211642, .0037608 ], [ -.1036018, -.0575102 ], [ -.0329095, -.0320119 ], [ .0499471, .1223335 ], [ .026046, .0899805 ], [ 7388e-7, -.1435792 ], [ .0075848, -.1334108 ], [ -.0216473, .0776645 ], [ -.0225161, .0853673 ] ],\n    miller: [ [ .9245, 0 ], [ 0, 0 ], [ .01943, 0 ] ],\n    lee: [ [ .721316, 0 ], [ 0, 0 ], [ -.00881625, -.00617325 ] ]\n  };\n  function modifiedStereographicProjection() {\n    var coefficients = modifiedStereographicCoefficients.miller, m = projectionMutator(modifiedStereographic), p = m(coefficients);\n    p.coefficients = function(_) {\n      if (!arguments.length) return coefficients;\n      return m(coefficients = typeof _ === \"string\" ? modifiedStereographicCoefficients[_] : _);\n    };\n    return p;\n  }\n  (d3.geo.modifiedStereographic = modifiedStereographicProjection).raw = modifiedStereographic;\n  function mtFlatPolarParabolic(\u03bb, \u03c6) {\n    var sqrt6 = Math.sqrt(6), sqrt7 = Math.sqrt(7), \u03b8 = Math.asin(7 * Math.sin(\u03c6) / (3 * sqrt6));\n    return [ sqrt6 * \u03bb * (2 * Math.cos(2 * \u03b8 / 3) - 1) / sqrt7, 9 * Math.sin(\u03b8 / 3) / sqrt7 ];\n  }\n  mtFlatPolarParabolic.invert = function(x, y) {\n    var sqrt6 = Math.sqrt(6), sqrt7 = Math.sqrt(7), \u03b8 = 3 * asin(y * sqrt7 / 9);\n    return [ x * sqrt7 / (sqrt6 * (2 * Math.cos(2 * \u03b8 / 3) - 1)), asin(Math.sin(\u03b8) * 3 * sqrt6 / 7) ];\n  };\n  (d3.geo.mtFlatPolarParabolic = function() {\n    return projection(mtFlatPolarParabolic);\n  }).raw = mtFlatPolarParabolic;\n  function mtFlatPolarQuartic(\u03bb, \u03c6) {\n    var k = (1 + Math.SQRT1_2) * Math.sin(\u03c6), \u03b8 = \u03c6;\n    for (var i = 0, \u03b4; i < 25; i++) {\n      \u03b8 -= \u03b4 = (Math.sin(\u03b8 / 2) + Math.sin(\u03b8) - k) / (.5 * Math.cos(\u03b8 / 2) + Math.cos(\u03b8));\n      if (Math.abs(\u03b4) < \u03b5) break;\n    }\n    return [ \u03bb * (1 + 2 * Math.cos(\u03b8) / Math.cos(\u03b8 / 2)) / (3 * Math.SQRT2), 2 * Math.sqrt(3) * Math.sin(\u03b8 / 2) / Math.sqrt(2 + Math.SQRT2) ];\n  }\n  mtFlatPolarQuartic.invert = function(x, y) {\n    var sin\u03b8_2 = y * Math.sqrt(2 + Math.SQRT2) / (2 * Math.sqrt(3)), \u03b8 = 2 * asin(sin\u03b8_2);\n    return [ 3 * Math.SQRT2 * x / (1 + 2 * Math.cos(\u03b8) / Math.cos(\u03b8 / 2)), asin((sin\u03b8_2 + Math.sin(\u03b8)) / (1 + Math.SQRT1_2)) ];\n  };\n  (d3.geo.mtFlatPolarQuartic = function() {\n    return projection(mtFlatPolarQuartic);\n  }).raw = mtFlatPolarQuartic;\n  function mtFlatPolarSinusoidal(\u03bb, \u03c6) {\n    var A = Math.sqrt(6 / (4 + \u03c0)), k = (1 + \u03c0 / 4) * Math.sin(\u03c6), \u03b8 = \u03c6 / 2;\n    for (var i = 0, \u03b4; i < 25; i++) {\n      \u03b8 -= \u03b4 = (\u03b8 / 2 + Math.sin(\u03b8) - k) / (.5 + Math.cos(\u03b8));\n      if (Math.abs(\u03b4) < \u03b5) break;\n    }\n    return [ A * (.5 + Math.cos(\u03b8)) * \u03bb / 1.5, A * \u03b8 ];\n  }\n  mtFlatPolarSinusoidal.invert = function(x, y) {\n    var A = Math.sqrt(6 / (4 + \u03c0)), \u03b8 = y / A;\n    if (Math.abs(Math.abs(\u03b8) - half\u03c0) < \u03b5) \u03b8 = \u03b8 < 0 ? -half\u03c0 : half\u03c0;\n    return [ 1.5 * x / (A * (.5 + Math.cos(\u03b8))), asin((\u03b8 / 2 + Math.sin(\u03b8)) / (1 + \u03c0 / 4)) ];\n  };\n  (d3.geo.mtFlatPolarSinusoidal = function() {\n    return projection(mtFlatPolarSinusoidal);\n  }).raw = mtFlatPolarSinusoidal;\n  function naturalEarth(\u03bb, \u03c6) {\n    var \u03c62 = \u03c6 * \u03c6, \u03c64 = \u03c62 * \u03c62;\n    return [ \u03bb * (.8707 - .131979 * \u03c62 + \u03c64 * (-.013791 + \u03c64 * (.003971 * \u03c62 - .001529 * \u03c64))), \u03c6 * (1.007226 + \u03c62 * (.015085 + \u03c64 * (-.044475 + .028874 * \u03c62 - .005916 * \u03c64))) ];\n  }\n  naturalEarth.invert = function(x, y) {\n    var \u03c6 = y, i = 25, \u03b4;\n    do {\n      var \u03c62 = \u03c6 * \u03c6, \u03c64 = \u03c62 * \u03c62;\n      \u03c6 -= \u03b4 = (\u03c6 * (1.007226 + \u03c62 * (.015085 + \u03c64 * (-.044475 + .028874 * \u03c62 - .005916 * \u03c64))) - y) / (1.007226 + \u03c62 * (.015085 * 3 + \u03c64 * (-.044475 * 7 + .028874 * 9 * \u03c62 - .005916 * 11 * \u03c64)));\n    } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n    return [ x / (.8707 + (\u03c62 = \u03c6 * \u03c6) * (-.131979 + \u03c62 * (-.013791 + \u03c62 * \u03c62 * \u03c62 * (.003971 - .001529 * \u03c62)))), \u03c6 ];\n  };\n  (d3.geo.naturalEarth = function() {\n    return projection(naturalEarth);\n  }).raw = naturalEarth;\n  function nellHammer(\u03bb, \u03c6) {\n    return [ \u03bb * (1 + Math.cos(\u03c6)) / 2, 2 * (\u03c6 - Math.tan(\u03c6 / 2)) ];\n  }\n  nellHammer.invert = function(x, y) {\n    var p = y / 2;\n    for (var i = 0, \u03b4 = Infinity; i < 10 && Math.abs(\u03b4) > \u03b5; i++) {\n      var c = Math.cos(y / 2);\n      y -= \u03b4 = (y - Math.tan(y / 2) - p) / (1 - .5 / (c * c));\n    }\n    return [ 2 * x / (1 + Math.cos(y)), y ];\n  };\n  (d3.geo.nellHammer = function() {\n    return projection(nellHammer);\n  }).raw = nellHammer;\n  var pattersonK1 = 1.0148, pattersonK2 = .23185, pattersonK3 = -.14499, pattersonK4 = .02406, pattersonC1 = pattersonK1, pattersonC2 = 5 * pattersonK2, pattersonC3 = 7 * pattersonK3, pattersonC4 = 9 * pattersonK4, pattersonYmax = 1.790857183;\n  function patterson(\u03bb, \u03c6) {\n    var \u03c62 = \u03c6 * \u03c6;\n    return [ \u03bb, \u03c6 * (pattersonK1 + \u03c62 * \u03c62 * (pattersonK2 + \u03c62 * (pattersonK3 + pattersonK4 * \u03c62))) ];\n  }\n  patterson.invert = function(x, y) {\n    if (y > pattersonYmax) y = pattersonYmax; else if (y < -pattersonYmax) y = -pattersonYmax;\n    var yc = y, \u03b4;\n    do {\n      var y2 = yc * yc;\n      yc -= \u03b4 = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n    } while (Math.abs(\u03b4) > \u03b5);\n    return [ x, yc ];\n  };\n  (d3.geo.patterson = function() {\n    return projection(patterson);\n  }).raw = patterson;\n  var peirceQuincuncialProjection = quincuncialProjection(guyou);\n  (d3.geo.peirceQuincuncial = function() {\n    return peirceQuincuncialProjection().quincuncial(true).rotate([ -90, -90, 45 ]).clipAngle(180 - 1e-6);\n  }).raw = peirceQuincuncialProjection.raw;\n  function polyconic(\u03bb, \u03c6) {\n    if (Math.abs(\u03c6) < \u03b5) return [ \u03bb, 0 ];\n    var tan\u03c6 = Math.tan(\u03c6), k = \u03bb * Math.sin(\u03c6);\n    return [ Math.sin(k) / tan\u03c6, \u03c6 + (1 - Math.cos(k)) / tan\u03c6 ];\n  }\n  polyconic.invert = function(x, y) {\n    if (Math.abs(y) < \u03b5) return [ x, 0 ];\n    var k = x * x + y * y, \u03c6 = y * .5, i = 10, \u03b4;\n    do {\n      var tan\u03c6 = Math.tan(\u03c6), sec\u03c6 = 1 / Math.cos(\u03c6), j = k - 2 * y * \u03c6 + \u03c6 * \u03c6;\n      \u03c6 -= \u03b4 = (tan\u03c6 * j + 2 * (\u03c6 - y)) / (2 + j * sec\u03c6 * sec\u03c6 + 2 * (\u03c6 - y) * tan\u03c6);\n    } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n    tan\u03c6 = Math.tan(\u03c6);\n    return [ (Math.abs(y) < Math.abs(\u03c6 + 1 / tan\u03c6) ? asin(x * tan\u03c6) : sgn(x) * (acos(Math.abs(x * tan\u03c6)) + half\u03c0)) / Math.sin(\u03c6), \u03c6 ];\n  };\n  (d3.geo.polyconic = function() {\n    return projection(polyconic);\n  }).raw = polyconic;\n  function rectangularPolyconic(\u03c60) {\n    var sin\u03c60 = Math.sin(\u03c60);\n    function forward(\u03bb, \u03c6) {\n      var A = sin\u03c60 ? Math.tan(\u03bb * sin\u03c60 / 2) / sin\u03c60 : \u03bb / 2;\n      if (!\u03c6) return [ 2 * A, -\u03c60 ];\n      var E = 2 * Math.atan(A * Math.sin(\u03c6)), cot\u03c6 = 1 / Math.tan(\u03c6);\n      return [ Math.sin(E) * cot\u03c6, \u03c6 + (1 - Math.cos(E)) * cot\u03c6 - \u03c60 ];\n    }\n    forward.invert = function(x, y) {\n      if (Math.abs(y += \u03c60) < \u03b5) return [ sin\u03c60 ? 2 * Math.atan(sin\u03c60 * x / 2) / sin\u03c60 : x, 0 ];\n      var k = x * x + y * y, \u03c6 = 0, i = 10, \u03b4;\n      do {\n        var tan\u03c6 = Math.tan(\u03c6), sec\u03c6 = 1 / Math.cos(\u03c6), j = k - 2 * y * \u03c6 + \u03c6 * \u03c6;\n        \u03c6 -= \u03b4 = (tan\u03c6 * j + 2 * (\u03c6 - y)) / (2 + j * sec\u03c6 * sec\u03c6 + 2 * (\u03c6 - y) * tan\u03c6);\n      } while (Math.abs(\u03b4) > \u03b5 && --i > 0);\n      var E = x * (tan\u03c6 = Math.tan(\u03c6)), A = Math.tan(Math.abs(y) < Math.abs(\u03c6 + 1 / tan\u03c6) ? asin(E) * .5 : acos(E) * .5 + \u03c0 / 4) / Math.sin(\u03c6);\n      return [ sin\u03c60 ? 2 * Math.atan(sin\u03c60 * A) / sin\u03c60 : 2 * A, \u03c6 ];\n    };\n    return forward;\n  }\n  (d3.geo.rectangularPolyconic = function() {\n    return parallel1Projection(rectangularPolyconic);\n  }).raw = rectangularPolyconic;\n  var robinsonConstants = [ [ .9986, -.062 ], [ 1, 0 ], [ .9986, .062 ], [ .9954, .124 ], [ .99, .186 ], [ .9822, .248 ], [ .973, .31 ], [ .96, .372 ], [ .9427, .434 ], [ .9216, .4958 ], [ .8962, .5571 ], [ .8679, .6176 ], [ .835, .6769 ], [ .7986, .7346 ], [ .7597, .7903 ], [ .7186, .8435 ], [ .6732, .8936 ], [ .6213, .9394 ], [ .5722, .9761 ], [ .5322, 1 ] ];\n  robinsonConstants.forEach(function(d) {\n    d[1] *= 1.0144;\n  });\n  function robinson(\u03bb, \u03c6) {\n    var i = Math.min(18, Math.abs(\u03c6) * 36 / \u03c0), i0 = Math.floor(i), di = i - i0, ax = (k = robinsonConstants[i0])[0], ay = k[1], bx = (k = robinsonConstants[++i0])[0], by = k[1], cx = (k = robinsonConstants[Math.min(19, ++i0)])[0], cy = k[1], k;\n    return [ \u03bb * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (\u03c6 > 0 ? half\u03c0 : -half\u03c0) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) ];\n  }\n  robinson.invert = function(x, y) {\n    var yy = y / half\u03c0, \u03c6 = yy * 90, i = Math.min(18, Math.abs(\u03c6 / 5)), i0 = Math.max(0, Math.floor(i));\n    do {\n      var ay = robinsonConstants[i0][1], by = robinsonConstants[i0 + 1][1], cy = robinsonConstants[Math.min(19, i0 + 2)][1], u = cy - ay, v = cy - 2 * by + ay, t = 2 * (Math.abs(yy) - by) / u, c = v / u, di = t * (1 - c * t * (1 - 2 * c * t));\n      if (di >= 0 || i0 === 1) {\n        \u03c6 = (y >= 0 ? 5 : -5) * (di + i);\n        var j = 50, \u03b4;\n        do {\n          i = Math.min(18, Math.abs(\u03c6) / 5);\n          i0 = Math.floor(i);\n          di = i - i0;\n          ay = robinsonConstants[i0][1];\n          by = robinsonConstants[i0 + 1][1];\n          cy = robinsonConstants[Math.min(19, i0 + 2)][1];\n          \u03c6 -= (\u03b4 = (y >= 0 ? half\u03c0 : -half\u03c0) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n        } while (Math.abs(\u03b4) > \u03b52 && --j > 0);\n        break;\n      }\n    } while (--i0 >= 0);\n    var ax = robinsonConstants[i0][0], bx = robinsonConstants[i0 + 1][0], cx = robinsonConstants[Math.min(19, i0 + 2)][0];\n    return [ x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), \u03c6 * radians ];\n  };\n  (d3.geo.robinson = function() {\n    return projection(robinson);\n  }).raw = robinson;\n  function satelliteVertical(P) {\n    function forward(\u03bb, \u03c6) {\n      var cos\u03c6 = Math.cos(\u03c6), k = (P - 1) / (P - cos\u03c6 * Math.cos(\u03bb));\n      return [ k * cos\u03c6 * Math.sin(\u03bb), k * Math.sin(\u03c6) ];\n    }\n    forward.invert = function(x, y) {\n      var \u03c12 = x * x + y * y, \u03c1 = Math.sqrt(\u03c12), sinc = (P - Math.sqrt(1 - \u03c12 * (P + 1) / (P - 1))) / ((P - 1) / \u03c1 + \u03c1 / (P - 1));\n      return [ Math.atan2(x * sinc, \u03c1 * Math.sqrt(1 - sinc * sinc)), \u03c1 ? asin(y * sinc / \u03c1) : 0 ];\n    };\n    return forward;\n  }\n  function satellite(P, \u03c9) {\n    var vertical = satelliteVertical(P);\n    if (!\u03c9) return vertical;\n    var cos\u03c9 = Math.cos(\u03c9), sin\u03c9 = Math.sin(\u03c9);\n    function forward(\u03bb, \u03c6) {\n      var coordinates = vertical(\u03bb, \u03c6), y = coordinates[1], A = y * sin\u03c9 / (P - 1) + cos\u03c9;\n      return [ coordinates[0] * cos\u03c9 / A, y / A ];\n    }\n    forward.invert = function(x, y) {\n      var k = (P - 1) / (P - 1 - y * sin\u03c9);\n      return vertical.invert(k * x, k * y * cos\u03c9);\n    };\n    return forward;\n  }\n  function satelliteProjection() {\n    var P = 1.4, \u03c9 = 0, m = projectionMutator(satellite), p = m(P, \u03c9);\n    p.distance = function(_) {\n      if (!arguments.length) return P;\n      return m(P = +_, \u03c9);\n    };\n    p.tilt = function(_) {\n      if (!arguments.length) return \u03c9 * 180 / \u03c0;\n      return m(P, \u03c9 = _ * \u03c0 / 180);\n    };\n    return p;\n  }\n  (d3.geo.satellite = satelliteProjection).raw = satellite;\n  function times(\u03bb, \u03c6) {\n    var t = Math.tan(\u03c6 / 2), s = Math.sin(\u03c0 / 4 * t);\n    return [ \u03bb * (.74482 - .34588 * s * s), 1.70711 * t ];\n  }\n  times.invert = function(x, y) {\n    var t = y / 1.70711, s = Math.sin(\u03c0 / 4 * t);\n    return [ x / (.74482 - .34588 * s * s), 2 * Math.atan(t) ];\n  };\n  (d3.geo.times = function() {\n    return projection(times);\n  }).raw = times;\n  function twoPointEquidistant(z0) {\n    if (!z0) return d3.geo.azimuthalEquidistant.raw;\n    var \u03bba = -z0 / 2, \u03bbb = -\u03bba, z02 = z0 * z0, tan\u03bb0 = Math.tan(\u03bbb), S = .5 / Math.sin(\u03bbb);\n    function forward(\u03bb, \u03c6) {\n      var za = acos(Math.cos(\u03c6) * Math.cos(\u03bb - \u03bba)), zb = acos(Math.cos(\u03c6) * Math.cos(\u03bb - \u03bbb)), ys = \u03c6 < 0 ? -1 : 1;\n      za *= za, zb *= zb;\n      return [ (za - zb) / (2 * z0), ys * asqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0) ];\n    }\n    forward.invert = function(x, y) {\n      var y2 = y * y, cosza = Math.cos(Math.sqrt(y2 + (t = x + \u03bba) * t)), coszb = Math.cos(Math.sqrt(y2 + (t = x + \u03bbb) * t)), t, d;\n      return [ Math.atan2(d = cosza - coszb, t = (cosza + coszb) * tan\u03bb0), (y < 0 ? -1 : 1) * acos(Math.sqrt(t * t + d * d) * S) ];\n    };\n    return forward;\n  }\n  function twoPointEquidistantProjection() {\n    var points = [ [ 0, 0 ], [ 0, 0 ] ], m = projectionMutator(twoPointEquidistant), p = m(0), rotate = p.rotate;\n    delete p.rotate;\n    p.points = function(_) {\n      if (!arguments.length) return points;\n      points = _;\n      var interpolate = d3.geo.interpolate(_[0], _[1]), origin = interpolate(.5), p = d3.geo.rotation([ -origin[0], -origin[1] ])(_[0]), b = interpolate.distance * .5, \u03b3 = -asin(Math.sin(p[1] * radians) / Math.sin(b));\n      if (p[0] > 0) \u03b3 = \u03c0 - \u03b3;\n      rotate.call(p, [ -origin[0], -origin[1], -\u03b3 * degrees ]);\n      return m(b * 2);\n    };\n    return p;\n  }\n  (d3.geo.twoPointEquidistant = twoPointEquidistantProjection).raw = twoPointEquidistant;\n  function twoPointAzimuthal(d) {\n    var cosd = Math.cos(d);\n    function forward(\u03bb, \u03c6) {\n      var coordinates = d3.geo.gnomonic.raw(\u03bb, \u03c6);\n      coordinates[0] *= cosd;\n      return coordinates;\n    }\n    forward.invert = function(x, y) {\n      return d3.geo.gnomonic.raw.invert(x / cosd, y);\n    };\n    return forward;\n  }\n  function twoPointAzimuthalProjection() {\n    var points = [ [ 0, 0 ], [ 0, 0 ] ], m = projectionMutator(twoPointAzimuthal), p = m(0), rotate = p.rotate;\n    delete p.rotate;\n    p.points = function(_) {\n      if (!arguments.length) return points;\n      points = _;\n      var interpolate = d3.geo.interpolate(_[0], _[1]), origin = interpolate(.5), p = d3.geo.rotation([ -origin[0], -origin[1] ])(_[0]), b = interpolate.distance * .5, \u03b3 = -asin(Math.sin(p[1] * radians) / Math.sin(b));\n      if (p[0] > 0) \u03b3 = \u03c0 - \u03b3;\n      rotate.call(p, [ -origin[0], -origin[1], -\u03b3 * degrees ]);\n      return m(b);\n    };\n    return p;\n  }\n  (d3.geo.twoPointAzimuthal = twoPointAzimuthalProjection).raw = twoPointAzimuthal;\n  function vanDerGrinten(\u03bb, \u03c6) {\n    if (Math.abs(\u03c6) < \u03b5) return [ \u03bb, 0 ];\n    var sin\u03b8 = Math.abs(\u03c6 / half\u03c0), \u03b8 = asin(sin\u03b8);\n    if (Math.abs(\u03bb) < \u03b5 || Math.abs(Math.abs(\u03c6) - half\u03c0) < \u03b5) return [ 0, sgn(\u03c6) * \u03c0 * Math.tan(\u03b8 / 2) ];\n    var cos\u03b8 = Math.cos(\u03b8), A = Math.abs(\u03c0 / \u03bb - \u03bb / \u03c0) / 2, A2 = A * A, G = cos\u03b8 / (sin\u03b8 + cos\u03b8 - 1), P = G * (2 / sin\u03b8 - 1), P2 = P * P, P2_A2 = P2 + A2, G_P2 = G - P2, Q = A2 + G;\n    return [ sgn(\u03bb) * \u03c0 * (A * G_P2 + Math.sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, sgn(\u03c6) * \u03c0 * (P * Q - A * Math.sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2 ];\n  }\n  vanDerGrinten.invert = function(x, y) {\n    if (Math.abs(y) < \u03b5) return [ x, 0 ];\n    if (Math.abs(x) < \u03b5) return [ 0, half\u03c0 * Math.sin(2 * Math.atan(y / \u03c0)) ];\n    var x2 = (x /= \u03c0) * x, y2 = (y /= \u03c0) * y, x2_y2 = x2 + y2, z = x2_y2 * x2_y2, c1 = -Math.abs(y) * (1 + x2_y2), c2 = c1 - 2 * y2 + x2, c3 = -2 * c1 + 1 + 2 * y2 + z, d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27, a1 = (c1 - c2 * c2 / (3 * c3)) / c3, m1 = 2 * Math.sqrt(-a1 / 3), \u03b81 = acos(3 * d / (a1 * m1)) / 3;\n    return [ \u03c0 * (x2_y2 - 1 + Math.sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x), sgn(y) * \u03c0 * (-m1 * Math.cos(\u03b81 + \u03c0 / 3) - c2 / (3 * c3)) ];\n  };\n  (d3.geo.vanDerGrinten = function() {\n    return projection(vanDerGrinten);\n  }).raw = vanDerGrinten;\n  function vanDerGrinten2(\u03bb, \u03c6) {\n    if (Math.abs(\u03c6) < \u03b5) return [ \u03bb, 0 ];\n    var sin\u03b8 = Math.abs(\u03c6 / half\u03c0), \u03b8 = asin(sin\u03b8);\n    if (Math.abs(\u03bb) < \u03b5 || Math.abs(Math.abs(\u03c6) - half\u03c0) < \u03b5) return [ 0, sgn(\u03c6) * \u03c0 * Math.tan(\u03b8 / 2) ];\n    var cos\u03b8 = Math.cos(\u03b8), A = Math.abs(\u03c0 / \u03bb - \u03bb / \u03c0) / 2, A2 = A * A, x1 = cos\u03b8 * (Math.sqrt(1 + A2) - A * cos\u03b8) / (1 + A2 * sin\u03b8 * sin\u03b8);\n    return [ sgn(\u03bb) * \u03c0 * x1, sgn(\u03c6) * \u03c0 * asqrt(1 - x1 * (2 * A + x1)) ];\n  }\n  vanDerGrinten2.invert = function(x, y) {\n    if (!x) return [ 0, half\u03c0 * Math.sin(2 * Math.atan(y / \u03c0)) ];\n    var x1 = Math.abs(x / \u03c0), A = (1 - x1 * x1 - (y /= \u03c0) * y) / (2 * x1), A2 = A * A, B = Math.sqrt(A2 + 1);\n    return [ sgn(x) * \u03c0 * (B - A), sgn(y) * half\u03c0 * Math.sin(2 * Math.atan2(Math.sqrt((1 - 2 * A * x1) * (A + B) - x1), Math.sqrt(B + A + x1))) ];\n  };\n  (d3.geo.vanDerGrinten2 = function() {\n    return projection(vanDerGrinten2);\n  }).raw = vanDerGrinten2;\n  function vanDerGrinten3(\u03bb, \u03c6) {\n    if (Math.abs(\u03c6) < \u03b5) return [ \u03bb, 0 ];\n    var sin\u03b8 = \u03c6 / half\u03c0, \u03b8 = asin(sin\u03b8);\n    if (Math.abs(\u03bb) < \u03b5 || Math.abs(Math.abs(\u03c6) - half\u03c0) < \u03b5) return [ 0, \u03c0 * Math.tan(\u03b8 / 2) ];\n    var A = (\u03c0 / \u03bb - \u03bb / \u03c0) / 2, y1 = sin\u03b8 / (1 + Math.cos(\u03b8));\n    return [ \u03c0 * (sgn(\u03bb) * asqrt(A * A + 1 - y1 * y1) - A), \u03c0 * y1 ];\n  }\n  vanDerGrinten3.invert = function(x, y) {\n    if (!y) return [ x, 0 ];\n    var y1 = y / \u03c0, A = (\u03c0 * \u03c0 * (1 - y1 * y1) - x * x) / (2 * \u03c0 * x);\n    return [ x ? \u03c0 * (sgn(x) * Math.sqrt(A * A + 1) - A) : 0, half\u03c0 * Math.sin(2 * Math.atan(y1)) ];\n  };\n  (d3.geo.vanDerGrinten3 = function() {\n    return projection(vanDerGrinten3);\n  }).raw = vanDerGrinten3;\n  function vanDerGrinten4(\u03bb, \u03c6) {\n    if (!\u03c6) return [ \u03bb, 0 ];\n    var \u03c60 = Math.abs(\u03c6);\n    if (!\u03bb || \u03c60 === half\u03c0) return [ 0, \u03c6 ];\n    var B = \u03c60 / half\u03c0, B2 = B * B, C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)), C2 = C * C, BC = B * C, B_C2 = B2 + C2 + 2 * BC, B_3C = B + 3 * C, \u03bb0 = \u03bb / half\u03c0, \u03bb1 = \u03bb0 + 1 / \u03bb0, D = sgn(Math.abs(\u03bb) - half\u03c0) * Math.sqrt(\u03bb1 * \u03bb1 - 4), D2 = D * D, F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2), x1 = (D * (B_C2 + C2 - 1) + 2 * asqrt(F)) / (4 * B_C2 + D2);\n    return [ sgn(\u03bb) * half\u03c0 * x1, sgn(\u03c6) * half\u03c0 * asqrt(1 + D * Math.abs(x1) - x1 * x1) ];\n  }\n  vanDerGrinten4.invert = function(x, y) {\n    if (!x || !y) return [ x, y ];\n    y /= \u03c0;\n    var x1 = sgn(x) * x / half\u03c0, D = (x1 * x1 - 1 + 4 * y * y) / Math.abs(x1), D2 = D * D, B = 2 * y, i = 50;\n    do {\n      var B2 = B * B, C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)), C_ = (3 * B - B2 * B - 10) / (2 * B2 * B), C2 = C * C, BC = B * C, B_C = B + C, B_C2 = B_C * B_C, B_3C = B + 3 * C, F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)), F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)), sqrtF = Math.sqrt(F), f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2), f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n      B -= \u03b4 = f / f_;\n    } while (\u03b4 > \u03b5 && --i > 0);\n    return [ sgn(x) * (Math.sqrt(D * D + 4) + D) * \u03c0 / 4, half\u03c0 * B ];\n  };\n  (d3.geo.vanDerGrinten4 = function() {\n    return projection(vanDerGrinten4);\n  }).raw = vanDerGrinten4;\n  var wagner4 = function() {\n    var A = 4 * \u03c0 + 3 * Math.sqrt(3), B = 2 * Math.sqrt(2 * \u03c0 * Math.sqrt(3) / A);\n    return mollweideBromley(B * Math.sqrt(3) / \u03c0, B, A / 6);\n  }();\n  (d3.geo.wagner4 = function() {\n    return projection(wagner4);\n  }).raw = wagner4;\n  function wagner6(\u03bb, \u03c6) {\n    return [ \u03bb * Math.sqrt(1 - 3 * \u03c6 * \u03c6 / (\u03c0 * \u03c0)), \u03c6 ];\n  }\n  wagner6.invert = function(x, y) {\n    return [ x / Math.sqrt(1 - 3 * y * y / (\u03c0 * \u03c0)), y ];\n  };\n  (d3.geo.wagner6 = function() {\n    return projection(wagner6);\n  }).raw = wagner6;\n  function wagner7(\u03bb, \u03c6) {\n    var s = .90631 * Math.sin(\u03c6), c0 = Math.sqrt(1 - s * s), c1 = Math.sqrt(2 / (1 + c0 * Math.cos(\u03bb /= 3)));\n    return [ 2.66723 * c0 * c1 * Math.sin(\u03bb), 1.24104 * s * c1 ];\n  }\n  wagner7.invert = function(x, y) {\n    var t1 = x / 2.66723, t2 = y / 1.24104, p = Math.sqrt(t1 * t1 + t2 * t2), c = 2 * asin(p / 2);\n    return [ 3 * Math.atan2(x * Math.tan(c), 2.66723 * p), p && asin(y * Math.sin(c) / (1.24104 * .90631 * p)) ];\n  };\n  (d3.geo.wagner7 = function() {\n    return projection(wagner7);\n  }).raw = wagner7;\n  function wiechel(\u03bb, \u03c6) {\n    var cos\u03c6 = Math.cos(\u03c6), sin\u03c6 = Math.cos(\u03bb) * cos\u03c6, sin1_\u03c6 = 1 - sin\u03c6, cos\u03bb = Math.cos(\u03bb = Math.atan2(Math.sin(\u03bb) * cos\u03c6, -Math.sin(\u03c6))), sin\u03bb = Math.sin(\u03bb);\n    cos\u03c6 = asqrt(1 - sin\u03c6 * sin\u03c6);\n    return [ sin\u03bb * cos\u03c6 - cos\u03bb * sin1_\u03c6, -cos\u03bb * cos\u03c6 - sin\u03bb * sin1_\u03c6 ];\n  }\n  wiechel.invert = function(x, y) {\n    var w = -.5 * (x * x + y * y), k = Math.sqrt(-w * (2 + w)), b = y * w + x * k, a = x * w - y * k, D = Math.sqrt(a * a + b * b);\n    return [ Math.atan2(k * b, D * (1 + w)), D ? -asin(k * a / D) : 0 ];\n  };\n  (d3.geo.wiechel = function() {\n    return projection(wiechel);\n  }).raw = wiechel;\n  function winkel3(\u03bb, \u03c6) {\n    var coordinates = aitoff(\u03bb, \u03c6);\n    return [ (coordinates[0] + \u03bb / half\u03c0) / 2, (coordinates[1] + \u03c6) / 2 ];\n  }\n  winkel3.invert = function(x, y) {\n    var \u03bb = x, \u03c6 = y, i = 25;\n    do {\n      var cos\u03c6 = Math.cos(\u03c6), sin\u03c6 = Math.sin(\u03c6), sin_2\u03c6 = Math.sin(2 * \u03c6), sin2\u03c6 = sin\u03c6 * sin\u03c6, cos2\u03c6 = cos\u03c6 * cos\u03c6, sin\u03bb = Math.sin(\u03bb), cos\u03bb_2 = Math.cos(\u03bb / 2), sin\u03bb_2 = Math.sin(\u03bb / 2), sin2\u03bb_2 = sin\u03bb_2 * sin\u03bb_2, C = 1 - cos2\u03c6 * cos\u03bb_2 * cos\u03bb_2, E = C ? acos(cos\u03c6 * cos\u03bb_2) * Math.sqrt(F = 1 / C) : F = 0, F, fx = .5 * (2 * E * cos\u03c6 * sin\u03bb_2 + \u03bb / half\u03c0) - x, fy = .5 * (E * sin\u03c6 + \u03c6) - y, \u03b4x\u03b4\u03bb = .5 * F * (cos2\u03c6 * sin2\u03bb_2 + E * cos\u03c6 * cos\u03bb_2 * sin2\u03c6) + .5 / half\u03c0, \u03b4x\u03b4\u03c6 = F * (sin\u03bb * sin_2\u03c6 / 4 - E * sin\u03c6 * sin\u03bb_2), \u03b4y\u03b4\u03bb = .125 * F * (sin_2\u03c6 * sin\u03bb_2 - E * sin\u03c6 * cos2\u03c6 * sin\u03bb), \u03b4y\u03b4\u03c6 = .5 * F * (sin2\u03c6 * cos\u03bb_2 + E * sin2\u03bb_2 * cos\u03c6) + .5, denominator = \u03b4x\u03b4\u03c6 * \u03b4y\u03b4\u03bb - \u03b4y\u03b4\u03c6 * \u03b4x\u03b4\u03bb, \u03b4\u03bb = (fy * \u03b4x\u03b4\u03c6 - fx * \u03b4y\u03b4\u03c6) / denominator, \u03b4\u03c6 = (fx * \u03b4y\u03b4\u03bb - fy * \u03b4x\u03b4\u03bb) / denominator;\n      \u03bb -= \u03b4\u03bb, \u03c6 -= \u03b4\u03c6;\n    } while ((Math.abs(\u03b4\u03bb) > \u03b5 || Math.abs(\u03b4\u03c6) > \u03b5) && --i > 0);\n    return [ \u03bb, \u03c6 ];\n  };\n  (d3.geo.winkel3 = function() {\n    return projection(winkel3);\n  }).raw = winkel3;\n})();");

},{"path":4}],2:[function(require,module,exports){
!function() {
  var d3 = {
    version: "3.5.14"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace && namespace !== document.documentElement.namespaceURI ? document.createElementNS(namespace, name) : document.createElement(name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var \u03b5 = 1e-6, \u03b52 = \u03b5 * \u03b5, \u03c0 = Math.PI, \u03c4 = 2 * \u03c0, \u03c4\u03b5 = \u03c4 - \u03b5, half\u03c0 = \u03c0 / 2, d3_radians = \u03c0 / 180, d3_degrees = 180 / \u03c0;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? \u03c0 : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? half\u03c0 : x < -1 ? -half\u03c0 : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var \u03c1 = Math.SQRT2, \u03c12 = 2, \u03c14 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < \u03b52) {
      S = Math.log(w1 / w0) / \u03c1;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(\u03c1 * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + \u03c14 * d2) / (2 * w0 * \u03c12 * d1), b1 = (w1 * w1 - w0 * w0 - \u03c14 * d2) / (2 * w1 * \u03c12 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / \u03c1;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (\u03c12 * d1) * (coshr0 * d3_tanh(\u03c1 * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(\u03c1 * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "\u00b5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * \u03c0;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * \u03c0 + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var \u03bb00, \u03c600, \u03bb0, cos\u03c60, sin\u03c60;
    d3_geo_area.point = function(\u03bb, \u03c6) {
      d3_geo_area.point = nextPoint;
      \u03bb0 = (\u03bb00 = \u03bb) * d3_radians, cos\u03c60 = Math.cos(\u03c6 = (\u03c600 = \u03c6) * d3_radians / 2 + \u03c0 / 4), 
      sin\u03c60 = Math.sin(\u03c6);
    };
    function nextPoint(\u03bb, \u03c6) {
      \u03bb *= d3_radians;
      \u03c6 = \u03c6 * d3_radians / 2 + \u03c0 / 4;
      var d\u03bb = \u03bb - \u03bb0, sd\u03bb = d\u03bb >= 0 ? 1 : -1, ad\u03bb = sd\u03bb * d\u03bb, cos\u03c6 = Math.cos(\u03c6), sin\u03c6 = Math.sin(\u03c6), k = sin\u03c60 * sin\u03c6, u = cos\u03c60 * cos\u03c6 + k * Math.cos(ad\u03bb), v = k * sd\u03bb * Math.sin(ad\u03bb);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      \u03bb0 = \u03bb, cos\u03c60 = cos\u03c6, sin\u03c60 = sin\u03c6;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(\u03bb00, \u03c600);
    };
  }
  function d3_geo_cartesian(spherical) {
    var \u03bb = spherical[0], \u03c6 = spherical[1], cos\u03c6 = Math.cos(\u03c6);
    return [ cos\u03c6 * Math.cos(\u03bb), cos\u03c6 * Math.sin(\u03bb), Math.sin(\u03c6) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < \u03b5 && abs(a[1] - b[1]) < \u03b5;
  }
  d3.geo.bounds = function() {
    var \u03bb0, \u03c60, \u03bb1, \u03c61, \u03bb_, \u03bb__, \u03c6__, p0, d\u03bbSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        d\u03bbSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) \u03bb0 = -(\u03bb1 = 180), \u03c60 = -(\u03c61 = 90); else if (d\u03bbSum > \u03b5) \u03c61 = 90; else if (d\u03bbSum < -\u03b5) \u03c60 = -90;
        range[0] = \u03bb0, range[1] = \u03bb1;
      }
    };
    function point(\u03bb, \u03c6) {
      ranges.push(range = [ \u03bb0 = \u03bb, \u03bb1 = \u03bb ]);
      if (\u03c6 < \u03c60) \u03c60 = \u03c6;
      if (\u03c6 > \u03c61) \u03c61 = \u03c6;
    }
    function linePoint(\u03bb, \u03c6) {
      var p = d3_geo_cartesian([ \u03bb * d3_radians, \u03c6 * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var d\u03bb = \u03bb - \u03bb_, s = d\u03bb > 0 ? 1 : -1, \u03bbi = inflection[0] * d3_degrees * s, antimeridian = abs(d\u03bb) > 180;
        if (antimeridian ^ (s * \u03bb_ < \u03bbi && \u03bbi < s * \u03bb)) {
          var \u03c6i = inflection[1] * d3_degrees;
          if (\u03c6i > \u03c61) \u03c61 = \u03c6i;
        } else if (\u03bbi = (\u03bbi + 360) % 360 - 180, antimeridian ^ (s * \u03bb_ < \u03bbi && \u03bbi < s * \u03bb)) {
          var \u03c6i = -inflection[1] * d3_degrees;
          if (\u03c6i < \u03c60) \u03c60 = \u03c6i;
        } else {
          if (\u03c6 < \u03c60) \u03c60 = \u03c6;
          if (\u03c6 > \u03c61) \u03c61 = \u03c6;
        }
        if (antimeridian) {
          if (\u03bb < \u03bb_) {
            if (angle(\u03bb0, \u03bb) > angle(\u03bb0, \u03bb1)) \u03bb1 = \u03bb;
          } else {
            if (angle(\u03bb, \u03bb1) > angle(\u03bb0, \u03bb1)) \u03bb0 = \u03bb;
          }
        } else {
          if (\u03bb1 >= \u03bb0) {
            if (\u03bb < \u03bb0) \u03bb0 = \u03bb;
            if (\u03bb > \u03bb1) \u03bb1 = \u03bb;
          } else {
            if (\u03bb > \u03bb_) {
              if (angle(\u03bb0, \u03bb) > angle(\u03bb0, \u03bb1)) \u03bb1 = \u03bb;
            } else {
              if (angle(\u03bb, \u03bb1) > angle(\u03bb0, \u03bb1)) \u03bb0 = \u03bb;
            }
          }
        }
      } else {
        point(\u03bb, \u03c6);
      }
      p0 = p, \u03bb_ = \u03bb;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = \u03bb0, range[1] = \u03bb1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(\u03bb, \u03c6) {
      if (p0) {
        var d\u03bb = \u03bb - \u03bb_;
        d\u03bbSum += abs(d\u03bb) > 180 ? d\u03bb + (d\u03bb > 0 ? 360 : -360) : d\u03bb;
      } else \u03bb__ = \u03bb, \u03c6__ = \u03c6;
      d3_geo_area.point(\u03bb, \u03c6);
      linePoint(\u03bb, \u03c6);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(\u03bb__, \u03c6__);
      d3_geo_area.lineEnd();
      if (abs(d\u03bbSum) > \u03b5) \u03bb0 = -(\u03bb1 = 180);
      range[0] = \u03bb0, range[1] = \u03bb1;
      p0 = null;
    }
    function angle(\u03bb0, \u03bb1) {
      return (\u03bb1 -= \u03bb0) < 0 ? \u03bb1 + 360 : \u03bb1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      \u03c61 = \u03bb1 = -(\u03bb0 = \u03c60 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, d\u03bb;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((d\u03bb = angle(a[1], b[0])) > best) best = d\u03bb, \u03bb0 = b[0], \u03bb1 = a[1];
        }
      }
      ranges = range = null;
      return \u03bb0 === Infinity || \u03c60 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ \u03bb0, \u03c60 ], [ \u03bb1, \u03c61 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < \u03b52) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < \u03b5) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < \u03b52) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(\u03bb, \u03c6) {
    \u03bb *= d3_radians;
    var cos\u03c6 = Math.cos(\u03c6 *= d3_radians);
    d3_geo_centroidPointXYZ(cos\u03c6 * Math.cos(\u03bb), cos\u03c6 * Math.sin(\u03bb), Math.sin(\u03c6));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(\u03bb, \u03c6) {
      \u03bb *= d3_radians;
      var cos\u03c6 = Math.cos(\u03c6 *= d3_radians);
      x0 = cos\u03c6 * Math.cos(\u03bb);
      y0 = cos\u03c6 * Math.sin(\u03bb);
      z0 = Math.sin(\u03c6);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(\u03bb, \u03c6) {
      \u03bb *= d3_radians;
      var cos\u03c6 = Math.cos(\u03c6 *= d3_radians), x = cos\u03c6 * Math.cos(\u03bb), y = cos\u03c6 * Math.sin(\u03bb), z = Math.sin(\u03c6), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var \u03bb00, \u03c600, x0, y0, z0;
    d3_geo_centroid.point = function(\u03bb, \u03c6) {
      \u03bb00 = \u03bb, \u03c600 = \u03c6;
      d3_geo_centroid.point = nextPoint;
      \u03bb *= d3_radians;
      var cos\u03c6 = Math.cos(\u03c6 *= d3_radians);
      x0 = cos\u03c6 * Math.cos(\u03bb);
      y0 = cos\u03c6 * Math.sin(\u03bb);
      z0 = Math.sin(\u03c6);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(\u03bb00, \u03c600);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(\u03bb, \u03c6) {
      \u03bb *= d3_radians;
      var cos\u03c6 = Math.cos(\u03c6 *= d3_radians), x = cos\u03c6 * Math.cos(\u03bb), y = cos\u03c6 * Math.sin(\u03bb), z = Math.sin(\u03c6), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(\u03bb, \u03c6) {
        var point = rotate(\u03bb, \u03c6);
        if (pointVisible(\u03bb = point[0], \u03c6 = point[1])) listener.point(\u03bb, \u03c6);
      }
      function pointLine(\u03bb, \u03c6) {
        var point = rotate(\u03bb, \u03c6);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(\u03bb, \u03c6) {
        ring.push([ \u03bb, \u03c6 ]);
        var point = rotate(\u03bb, \u03c6);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(\u03bb, \u03c6) {
        line.push([ \u03bb, \u03c6 ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - half\u03c0 - \u03b5 : half\u03c0 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - half\u03c0 - \u03b5 : half\u03c0 - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -\u03c0, -\u03c0 / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var \u03bb0 = NaN, \u03c60 = NaN, s\u03bb0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(\u03bb1, \u03c61) {
        var s\u03bb1 = \u03bb1 > 0 ? \u03c0 : -\u03c0, d\u03bb = abs(\u03bb1 - \u03bb0);
        if (abs(d\u03bb - \u03c0) < \u03b5) {
          listener.point(\u03bb0, \u03c60 = (\u03c60 + \u03c61) / 2 > 0 ? half\u03c0 : -half\u03c0);
          listener.point(s\u03bb0, \u03c60);
          listener.lineEnd();
          listener.lineStart();
          listener.point(s\u03bb1, \u03c60);
          listener.point(\u03bb1, \u03c60);
          clean = 0;
        } else if (s\u03bb0 !== s\u03bb1 && d\u03bb >= \u03c0) {
          if (abs(\u03bb0 - s\u03bb0) < \u03b5) \u03bb0 -= s\u03bb0 * \u03b5;
          if (abs(\u03bb1 - s\u03bb1) < \u03b5) \u03bb1 -= s\u03bb1 * \u03b5;
          \u03c60 = d3_geo_clipAntimeridianIntersect(\u03bb0, \u03c60, \u03bb1, \u03c61);
          listener.point(s\u03bb0, \u03c60);
          listener.lineEnd();
          listener.lineStart();
          listener.point(s\u03bb1, \u03c60);
          clean = 0;
        }
        listener.point(\u03bb0 = \u03bb1, \u03c60 = \u03c61);
        s\u03bb0 = s\u03bb1;
      },
      lineEnd: function() {
        listener.lineEnd();
        \u03bb0 = \u03c60 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(\u03bb0, \u03c60, \u03bb1, \u03c61) {
    var cos\u03c60, cos\u03c61, sin\u03bb0_\u03bb1 = Math.sin(\u03bb0 - \u03bb1);
    return abs(sin\u03bb0_\u03bb1) > \u03b5 ? Math.atan((Math.sin(\u03c60) * (cos\u03c61 = Math.cos(\u03c61)) * Math.sin(\u03bb1) - Math.sin(\u03c61) * (cos\u03c60 = Math.cos(\u03c60)) * Math.sin(\u03bb0)) / (cos\u03c60 * cos\u03c61 * sin\u03bb0_\u03bb1)) : (\u03c60 + \u03c61) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var \u03c6;
    if (from == null) {
      \u03c6 = direction * half\u03c0;
      listener.point(-\u03c0, \u03c6);
      listener.point(0, \u03c6);
      listener.point(\u03c0, \u03c6);
      listener.point(\u03c0, 0);
      listener.point(\u03c0, -\u03c6);
      listener.point(0, -\u03c6);
      listener.point(-\u03c0, -\u03c6);
      listener.point(-\u03c0, 0);
      listener.point(-\u03c0, \u03c6);
    } else if (abs(from[0] - to[0]) > \u03b5) {
      var s = from[0] < to[0] ? \u03c0 : -\u03c0;
      \u03c6 = direction * s / 2;
      listener.point(-s, \u03c6);
      listener.point(0, \u03c6);
      listener.point(s, \u03c6);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], \u03bb0 = point0[0], \u03c60 = point0[1] / 2 + \u03c0 / 4, sin\u03c60 = Math.sin(\u03c60), cos\u03c60 = Math.cos(\u03c60), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var \u03bb = point[0], \u03c6 = point[1] / 2 + \u03c0 / 4, sin\u03c6 = Math.sin(\u03c6), cos\u03c6 = Math.cos(\u03c6), d\u03bb = \u03bb - \u03bb0, sd\u03bb = d\u03bb >= 0 ? 1 : -1, ad\u03bb = sd\u03bb * d\u03bb, antimeridian = ad\u03bb > \u03c0, k = sin\u03c60 * sin\u03c6;
        d3_geo_areaRingSum.add(Math.atan2(k * sd\u03bb * Math.sin(ad\u03bb), cos\u03c60 * cos\u03c6 + k * Math.cos(ad\u03bb)));
        polarAngle += antimeridian ? d\u03bb + sd\u03bb * \u03c4 : d\u03bb;
        if (antimeridian ^ \u03bb0 >= meridian ^ \u03bb >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var \u03c6arc = (antimeridian ^ d\u03bb >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > \u03c6arc || parallel === \u03c6arc && (arc[0] || arc[1])) {
            winding += antimeridian ^ d\u03bb >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        \u03bb0 = \u03bb, sin\u03c60 = sin\u03c6, cos\u03c60 = cos\u03c6, point0 = point;
      }
    }
    return (polarAngle < -\u03b5 || polarAngle < \u03b5 && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > \u03b5, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -\u03c0, radius - \u03c0 ]);
    function visible(\u03bb, \u03c6) {
      return Math.cos(\u03bb) * Math.cos(\u03c6) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(\u03bb, \u03c6) {
          var point1 = [ \u03bb, \u03c6 ], point2, v = visible(\u03bb, \u03c6), c = smallRadius ? v ? 0 : code(\u03bb, \u03c6) : v ? code(\u03bb + (\u03bb < 0 ? \u03c0 : -\u03c0), \u03c6) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += \u03b5;
              point1[1] += \u03b5;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var \u03bb0 = a[0], \u03bb1 = b[0], \u03c60 = a[1], \u03c61 = b[1], z;
      if (\u03bb1 < \u03bb0) z = \u03bb0, \u03bb0 = \u03bb1, \u03bb1 = z;
      var \u03b4\u03bb = \u03bb1 - \u03bb0, polar = abs(\u03b4\u03bb - \u03c0) < \u03b5, meridian = polar || \u03b4\u03bb < \u03b5;
      if (!polar && \u03c61 < \u03c60) z = \u03c60, \u03c60 = \u03c61, \u03c61 = z;
      if (meridian ? polar ? \u03c60 + \u03c61 > 0 ^ q[1] < (abs(q[0] - \u03bb0) < \u03b5 ? \u03c60 : \u03c61) : \u03c60 <= q[1] && q[1] <= \u03c61 : \u03b4\u03bb > \u03c0 ^ (\u03bb0 <= q[0] && q[0] <= \u03bb1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(\u03bb, \u03c6) {
      var r = smallRadius ? radius : \u03c0 - radius, code = 0;
      if (\u03bb < -r) code |= 1; else if (\u03bb > r) code |= 2;
      if (\u03c6 < -r) code |= 4; else if (\u03c6 > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < \u03b5 ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < \u03b5 ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < \u03b5 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var \u03c60 = 0, \u03c61 = \u03c0 / 3, m = d3_geo_projectionMutator(projectAt), p = m(\u03c60, \u03c61);
    p.parallels = function(_) {
      if (!arguments.length) return [ \u03c60 / \u03c0 * 180, \u03c61 / \u03c0 * 180 ];
      return m(\u03c60 = _[0] * \u03c0 / 180, \u03c61 = _[1] * \u03c0 / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(\u03c60, \u03c61) {
    var sin\u03c60 = Math.sin(\u03c60), n = (sin\u03c60 + Math.sin(\u03c61)) / 2, C = 1 + sin\u03c60 * (2 * n - sin\u03c60), \u03c10 = Math.sqrt(C) / n;
    function forward(\u03bb, \u03c6) {
      var \u03c1 = Math.sqrt(C - 2 * n * Math.sin(\u03c6)) / n;
      return [ \u03c1 * Math.sin(\u03bb *= n), \u03c10 - \u03c1 * Math.cos(\u03bb) ];
    }
    forward.invert = function(x, y) {
      var \u03c10_y = \u03c10 - y;
      return [ Math.atan2(x, \u03c10_y) / n, d3_asin((C - (x * x + \u03c10_y * \u03c10_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + \u03b5, y + .12 * k + \u03b5 ], [ x - .214 * k - \u03b5, y + .234 * k - \u03b5 ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + \u03b5, y + .166 * k + \u03b5 ], [ x - .115 * k - \u03b5, y + .234 * k - \u03b5 ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, \u03c4);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var \u03b42 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var \u03bb00, \u03c600, x00, y00, a00, b00, c00, \u03bb0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(\u03bb, \u03c6) {
        var c = d3_geo_cartesian([ \u03bb, \u03c6 ]), p = project(\u03bb, \u03c6);
        resampleLineTo(x0, y0, \u03bb0, a0, b0, c0, x0 = p[0], y0 = p[1], \u03bb0 = \u03bb, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(\u03bb, \u03c6) {
        linePoint(\u03bb00 = \u03bb, \u03c600 = \u03c6), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, \u03bb0, a0, b0, c0, x00, y00, \u03bb00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, \u03bb0, a0, b0, c0, x1, y1, \u03bb1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * \u03b42 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), \u03c62 = Math.asin(c /= m), \u03bb2 = abs(abs(c) - 1) < \u03b5 || abs(\u03bb0 - \u03bb1) < \u03b5 ? (\u03bb0 + \u03bb1) / 2 : Math.atan2(b, a), p = project(\u03bb2, \u03c62), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > \u03b42 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, \u03bb0, a0, b0, c0, x2, y2, \u03bb2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, \u03bb2, a, b, c, x1, y1, \u03bb1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(\u03b42);
      maxDepth = (\u03b42 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + \u03b4x, \u03b4y - x[1] * k ];
    }), k = 150, x = 480, y = 250, \u03bb = 0, \u03c6 = 0, \u03b4\u03bb = 0, \u03b4\u03c6 = 0, \u03b4\u03b3 = 0, \u03b4x, \u03b4y, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + \u03b4x, \u03b4y - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - \u03b4x) / k, (\u03b4y - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ \u03bb * d3_degrees, \u03c6 * d3_degrees ];
      \u03bb = _[0] % 360 * d3_radians;
      \u03c6 = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ \u03b4\u03bb * d3_degrees, \u03b4\u03c6 * d3_degrees, \u03b4\u03b3 * d3_degrees ];
      \u03b4\u03bb = _[0] % 360 * d3_radians;
      \u03b4\u03c6 = _[1] % 360 * d3_radians;
      \u03b4\u03b3 = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(\u03b4\u03bb, \u03b4\u03c6, \u03b4\u03b3), project);
      var center = project(\u03bb, \u03c6);
      \u03b4x = x - center[0] * k;
      \u03b4y = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(\u03bb, \u03c6) {
    return [ \u03bb, \u03c6 ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(\u03bb, \u03c6) {
    return [ \u03bb > \u03c0 ? \u03bb - \u03c4 : \u03bb < -\u03c0 ? \u03bb + \u03c4 : \u03bb, \u03c6 ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(\u03b4\u03bb, \u03b4\u03c6, \u03b4\u03b3) {
    return \u03b4\u03bb ? \u03b4\u03c6 || \u03b4\u03b3 ? d3_geo_compose(d3_geo_rotation\u03bb(\u03b4\u03bb), d3_geo_rotation\u03c6\u03b3(\u03b4\u03c6, \u03b4\u03b3)) : d3_geo_rotation\u03bb(\u03b4\u03bb) : \u03b4\u03c6 || \u03b4\u03b3 ? d3_geo_rotation\u03c6\u03b3(\u03b4\u03c6, \u03b4\u03b3) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotation\u03bb(\u03b4\u03bb) {
    return function(\u03bb, \u03c6) {
      return \u03bb += \u03b4\u03bb, [ \u03bb > \u03c0 ? \u03bb - \u03c4 : \u03bb < -\u03c0 ? \u03bb + \u03c4 : \u03bb, \u03c6 ];
    };
  }
  function d3_geo_rotation\u03bb(\u03b4\u03bb) {
    var rotation = d3_geo_forwardRotation\u03bb(\u03b4\u03bb);
    rotation.invert = d3_geo_forwardRotation\u03bb(-\u03b4\u03bb);
    return rotation;
  }
  function d3_geo_rotation\u03c6\u03b3(\u03b4\u03c6, \u03b4\u03b3) {
    var cos\u03b4\u03c6 = Math.cos(\u03b4\u03c6), sin\u03b4\u03c6 = Math.sin(\u03b4\u03c6), cos\u03b4\u03b3 = Math.cos(\u03b4\u03b3), sin\u03b4\u03b3 = Math.sin(\u03b4\u03b3);
    function rotation(\u03bb, \u03c6) {
      var cos\u03c6 = Math.cos(\u03c6), x = Math.cos(\u03bb) * cos\u03c6, y = Math.sin(\u03bb) * cos\u03c6, z = Math.sin(\u03c6), k = z * cos\u03b4\u03c6 + x * sin\u03b4\u03c6;
      return [ Math.atan2(y * cos\u03b4\u03b3 - k * sin\u03b4\u03b3, x * cos\u03b4\u03c6 - z * sin\u03b4\u03c6), d3_asin(k * cos\u03b4\u03b3 + y * sin\u03b4\u03b3) ];
    }
    rotation.invert = function(\u03bb, \u03c6) {
      var cos\u03c6 = Math.cos(\u03c6), x = Math.cos(\u03bb) * cos\u03c6, y = Math.sin(\u03bb) * cos\u03c6, z = Math.sin(\u03c6), k = z * cos\u03b4\u03b3 - y * sin\u03b4\u03b3;
      return [ Math.atan2(y * cos\u03b4\u03b3 + z * sin\u03b4\u03b3, x * cos\u03b4\u03c6 + k * sin\u03b4\u03c6), d3_asin(k * cos\u03b4\u03c6 - x * sin\u03b4\u03c6) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * \u03c4;
      } else {
        from = radius + direction * \u03c4;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - \u03b5) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var \u0394\u03bb = (b[0] - a[0]) * d3_radians, \u03c60 = a[1] * d3_radians, \u03c61 = b[1] * d3_radians, sin\u0394\u03bb = Math.sin(\u0394\u03bb), cos\u0394\u03bb = Math.cos(\u0394\u03bb), sin\u03c60 = Math.sin(\u03c60), cos\u03c60 = Math.cos(\u03c60), sin\u03c61 = Math.sin(\u03c61), cos\u03c61 = Math.cos(\u03c61), t;
    return Math.atan2(Math.sqrt((t = cos\u03c61 * sin\u0394\u03bb) * t + (t = cos\u03c60 * sin\u03c61 - sin\u03c60 * cos\u03c61 * cos\u0394\u03bb) * t), sin\u03c60 * sin\u03c61 + cos\u03c60 * cos\u03c61 * cos\u0394\u03bb);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > \u03b5;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > \u03b5;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + \u03b5 ], [ 180, 90 - \u03b5 ] ]).minorExtent([ [ -180, -80 - \u03b5 ], [ 180, 80 + \u03b5 ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - \u03b5, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - \u03b5, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var \u03bb0, sin\u03c60, cos\u03c60;
    d3_geo_length.point = function(\u03bb, \u03c6) {
      \u03bb0 = \u03bb * d3_radians, sin\u03c60 = Math.sin(\u03c6 *= d3_radians), cos\u03c60 = Math.cos(\u03c6);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(\u03bb, \u03c6) {
      var sin\u03c6 = Math.sin(\u03c6 *= d3_radians), cos\u03c6 = Math.cos(\u03c6), t = abs((\u03bb *= d3_radians) - \u03bb0), cos\u0394\u03bb = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cos\u03c6 * Math.sin(t)) * t + (t = cos\u03c60 * sin\u03c6 - sin\u03c60 * cos\u03c6 * cos\u0394\u03bb) * t), sin\u03c60 * sin\u03c6 + cos\u03c60 * cos\u03c6 * cos\u0394\u03bb);
      \u03bb0 = \u03bb, sin\u03c60 = sin\u03c6, cos\u03c60 = cos\u03c6;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(\u03bb, \u03c6) {
      var cos\u03bb = Math.cos(\u03bb), cos\u03c6 = Math.cos(\u03c6), k = scale(cos\u03bb * cos\u03c6);
      return [ k * cos\u03c6 * Math.sin(\u03bb), k * Math.sin(\u03c6) ];
    }
    azimuthal.invert = function(x, y) {
      var \u03c1 = Math.sqrt(x * x + y * y), c = angle(\u03c1), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, \u03c1 * cosc), Math.asin(\u03c1 && y * sinc / \u03c1) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cos\u03bbcos\u03c6) {
    return Math.sqrt(2 / (1 + cos\u03bbcos\u03c6));
  }, function(\u03c1) {
    return 2 * Math.asin(\u03c1 / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cos\u03bbcos\u03c6) {
    var c = Math.acos(cos\u03bbcos\u03c6);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(\u03c60, \u03c61) {
    var cos\u03c60 = Math.cos(\u03c60), t = function(\u03c6) {
      return Math.tan(\u03c0 / 4 + \u03c6 / 2);
    }, n = \u03c60 === \u03c61 ? Math.sin(\u03c60) : Math.log(cos\u03c60 / Math.cos(\u03c61)) / Math.log(t(\u03c61) / t(\u03c60)), F = cos\u03c60 * Math.pow(t(\u03c60), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(\u03bb, \u03c6) {
      if (F > 0) {
        if (\u03c6 < -half\u03c0 + \u03b5) \u03c6 = -half\u03c0 + \u03b5;
      } else {
        if (\u03c6 > half\u03c0 - \u03b5) \u03c6 = half\u03c0 - \u03b5;
      }
      var \u03c1 = F / Math.pow(t(\u03c6), n);
      return [ \u03c1 * Math.sin(n * \u03bb), F - \u03c1 * Math.cos(n * \u03bb) ];
    }
    forward.invert = function(x, y) {
      var \u03c10_y = F - y, \u03c1 = d3_sgn(n) * Math.sqrt(x * x + \u03c10_y * \u03c10_y);
      return [ Math.atan2(x, \u03c10_y) / n, 2 * Math.atan(Math.pow(F / \u03c1, 1 / n)) - half\u03c0 ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(\u03c60, \u03c61) {
    var cos\u03c60 = Math.cos(\u03c60), n = \u03c60 === \u03c61 ? Math.sin(\u03c60) : (cos\u03c60 - Math.cos(\u03c61)) / (\u03c61 - \u03c60), G = cos\u03c60 / n + \u03c60;
    if (abs(n) < \u03b5) return d3_geo_equirectangular;
    function forward(\u03bb, \u03c6) {
      var \u03c1 = G - \u03c6;
      return [ \u03c1 * Math.sin(n * \u03bb), G - \u03c1 * Math.cos(n * \u03bb) ];
    }
    forward.invert = function(x, y) {
      var \u03c10_y = G - y;
      return [ Math.atan2(x, \u03c10_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + \u03c10_y * \u03c10_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cos\u03bbcos\u03c6) {
    return 1 / cos\u03bbcos\u03c6;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(\u03bb, \u03c6) {
    return [ \u03bb, Math.log(Math.tan(\u03c0 / 4 + \u03c6 / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - half\u03c0 ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = \u03c0 * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cos\u03bbcos\u03c6) {
    return 1 / (1 + cos\u03bbcos\u03c6);
  }, function(\u03c1) {
    return 2 * Math.atan(\u03c1);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(\u03bb, \u03c6) {
    return [ Math.log(Math.tan(\u03c0 / 4 + \u03c6 / 2)), -\u03bb ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - half\u03c0 ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < \u03b5 && abs(y - lArc.circle.cy) < \u03b5) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < \u03b5 && abs(y - rArc.circle.cy) < \u03b5) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > \u03b5) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > \u03b5) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -\u03b5) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -\u03b5) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > \u03b5 || abs(y3 - y2) > \u03b5) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < \u03b5 && y1 - y3 > \u03b5 ? {
            x: x0,
            y: abs(x2 - x0) < \u03b5 ? y2 : y1
          } : abs(y3 - y1) < \u03b5 && x1 - x3 > \u03b5 ? {
            x: abs(y2 - y1) < \u03b5 ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < \u03b5 && y3 - y0 > \u03b5 ? {
            x: x1,
            y: abs(x2 - x1) < \u03b5 ? y2 : y0
          } : abs(y3 - y0) < \u03b5 && x3 - x0 > \u03b5 ? {
            x: abs(y2 - y0) < \u03b5 ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -\u03b52) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < \u03b5 && abs(e.a.y - e.b.y) < \u03b5) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / \u03b5) * \u03b5,
          y: Math.round(fy(d, i) / \u03b5) * \u03b5,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * half\u03c0);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / \u03c4 * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * \u03c4 / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (\u03c4 - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = \u03c4, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(\u00b5, \u03c3) {
      var n = arguments.length;
      if (n < 2) \u03c3 = 1;
      if (n < 1) \u00b5 = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return \u00b5 + \u03c3 * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - half\u03c0, a1 = endAngle.apply(this, arguments) - half\u03c0, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= \u03c4\u03b5) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= \u03c0 ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= \u03c0 ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > \u03b5 && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < \u03c0) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - half\u03c0;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < \u03b5) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - half\u03c0;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - half\u03c0, a1 = endAngle.call(self, subgroup, i) - half\u03c0;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > \u03c0) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - half\u03c0;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / \u03c0);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", \u03b5), tickExit = d3.transition(tick.exit()).style("opacity", \u03b5).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) this.d3 = d3, define(d3); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
}();
},{}],3:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash -d -o ./lodash.js`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.0.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+',
    rsUpper + '+',
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function',
    'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',
    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[mapTag] = cloneableTags[numberTag] =
  cloneableTags[objectTag] = cloneableTags[regexpTag] =
  cloneableTags[setTag] = cloneableTags[stringTag] =
  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
  cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `exports`. */
  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;

  /** Detect free variable `module`. */
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

  /** Detect free variable `window`. */
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    var length = args ? args.length : 0;
    switch (length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * Creates a new array concatenating `array` with `other`.
   *
   * @private
   * @param {Array} array The first array to concatenate.
   * @param {Array} other The second array to concatenate.
   * @returns {Array} Returns the new concatenated array.
   */
  function arrayConcat(array, other) {
    var index = -1,
        length = array.length,
        othIndex = -1,
        othLength = other.length,
        result = Array(length + othLength);

    while (++index < length) {
      result[index] = array[index];
    }
    while (++othIndex < othLength) {
      result[index++] = other[othIndex];
    }
    return result;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    return !!array.length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * A specialized version of `_.includesWith` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? current === current
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of methods like `_.find` and `_.findKey`, without
   * support for iteratee shorthands, which iterates over `collection` using
   * `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define
   * the sort order of `array` and replaces criteria objects with their
   * corresponding values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the new array of key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing wrapper metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to an array.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the converted array.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the converted array.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        clearTimeout = context.clearTimeout,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getPrototypeOf = Object.getPrototypeOf,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var Map = getNative(context, 'Map'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to detect maps and sets. */
    var mapCtorString = Map ? funcToString.call(Map) : '',
        setCtorString = Set ? funcToString.call(Set) : '';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = Symbol ? symbolProto.valueOf : undefined,
        symbolToString = Symbol ? symbolProto.toString : undefined;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chaining. Methods that operate on and return arrays, collections, and
     * functions can be chained together. Methods that retrieve a single value or
     * may return a primitive value will automatically end the chain sequence and
     * return the unwrapped value. Otherwise, the value must be unwrapped with
     * `_#value`.
     *
     * Explicit chaining, which must be unwrapped with `_#value` in all cases,
     * may be enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization to merge iteratee calls; this avoids the creation
     * of intermediate arrays and can greatly reduce the number of iteratee executions.
     * Sections of a chain sequence qualify for shortcut fusion if the section is
     * applied to an array of at least two hundred elements and any iteratees
     * accept only one argument. The heuristic for whether a section qualifies
     * for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`,
     * `at`, `before`, `bind`, `bindAll`, `bindKey`, `chain`, `chunk`, `commit`,
     * `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`, `curry`,
     * `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,
     * `differenceBy`, `differenceWith`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flip`, `flow`,
     * `flowRight`, `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`,
     * `intersection`, `intersectionBy`, `intersectionWith`, `invert`, `invokeMap`,
     * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,
     * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,
     * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,
     * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,
     * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,
     * `pullAll`, `pullAllBy`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`,
     * `reject`, `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`,
     * `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`,
     * `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`,
     * `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`,
     * `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`,
     * `unset`, `unshift`, `unzip`, `unzipWith`, `values`, `valuesIn`, `without`,
     * `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,
     * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
     * `findLast`, `findLastIndex`, `findLastKey`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,
     * `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`,
     * `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMatch`, `isMatchWith`,
     * `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`, `isObject`, `isObjectLike`,
     * `isPlainObject`, `isRegExp`, `isSafeInteger`, `isString`, `isUndefined`,
     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`,
     * `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `min`, `minBy`,
     * `noConflict`, `noop`, `now`, `pad`, `padEnd`, `padStart`, `parseInt`,
     * `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,
     * `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
     * `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,
     * `startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toLower`,
     * `toInteger`, `toLength`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`,
     * `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`,
     * `upperCase`, `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an hash object.
     *
     * @private
     * @returns {Object} Returns the new hash object.
     */
    function Hash() {}

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(hash, key) {
      return hashHas(hash, key) && delete hash[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(hash, key) {
      if (nativeCreate) {
        var result = hash[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(hash, key) {
      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function hashSet(hash, key, value) {
      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function MapCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapClear() {
      this.__data__ = { 'hash': new Hash, 'map': Map ? new Map : [], 'string': new Hash };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapDelete(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapGet(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.get(key) : assocGet(data.map, key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.has(key) : assocHas(data.map, key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache object.
     */
    function mapSet(key, value) {
      var data = this.__data__;
      if (isKeyable(key)) {
        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
      } else if (Map) {
        data.map.set(key, value);
      } else {
        assocSet(data.map, key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a set cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.push(values[index]);
      }
    }

    /**
     * Checks if `value` is in `cache`.
     *
     * @private
     * @param {Object} cache The set cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function cacheHas(cache, value) {
      var map = cache.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        return hash[value] === HASH_UNDEFINED;
      }
      return map.has(value);
    }

    /**
     * Adds `value` to the set cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var map = this.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        hash[value] = HASH_UNDEFINED;
      }
      else {
        map.set(value, HASH_UNDEFINED);
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function Stack(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = { 'array': [], 'map': null };
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocDelete(array, key) : data.map['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocGet(array, key) : data.map.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocHas(array, key) : data.map.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache object.
     */
    function stackSet(key, value) {
      var data = this.__data__,
          array = data.array;

      if (array) {
        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
          assocSet(array, key, value);
        } else {
          data.array = null;
          data.map = new MapCache(array);
        }
      }
      var map = data.map;
      if (map) {
        map.set(key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Removes `key` and its value from the associative array.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function assocDelete(array, key) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = array.length - 1;
      if (index == lastIndex) {
        array.pop();
      } else {
        splice.call(array, index, 1);
      }
      return true;
    }

    /**
     * Gets the associative array value for `key`.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function assocGet(array, key) {
      var index = assocIndexOf(array, key);
      return index < 0 ? undefined : array[index][1];
    }

    /**
     * Checks if an associative array value for `key` exists.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function assocHas(array, key) {
      return assocIndexOf(array, key) > -1;
    }

    /**
     * Gets the index at which the first occurrence of `key` is found in `array`
     * of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Sets the associative array `key` to `value`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function assocSet(array, key, value) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        array.push([key, value]);
      } else {
        array[index][1] = value;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if ((!eq(objValue, value) ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));
      });
      return isArr ? result : copySymbols(value, result);
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     */
    function baseConforms(source) {
      var props = keys(source),
          length = props.length;

      return function(object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];

          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an array
     * of `func` arguments.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support for
     * excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isArrayLikeObject(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return object == null ? object : baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return hasOwnProperty.call(object, key) ||
        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        caches[othIndex] = !comparator && (iteratee || array.length >= 120)
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          length = array.length,
          seen = caches[0];

      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = baseToPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = getTag(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);
      }
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      if (!isPartial) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack,
              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      var type = typeof value;
      if (type == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (type == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @type Function
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      return nativeKeys(Object(object));
    }

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value &&
            (value !== undefined || (key in Object(object)));
        };
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      var props = (isArray(source) || isTypedArray(source)) ? undefined : keysIn(source);
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer ? customizer(object[key], srcValue, (key + ''), object, source, stack) : undefined;
          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue) || stack.get(objValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, (key + ''), object, source, stack) : undefined,
          isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = srcIndex ? copyArray(objValue) : objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else {
            newValue = baseClone(srcValue);
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = baseClone(srcValue);
          }
          else {
            newValue = srcIndex ? baseClone(objValue) : objValue;
          }
        }
        else {
          isCommon = false;
        }
      }
      stack.set(srcValue, newValue);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1,
          toIteratee = getIteratee();

      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {
        return toIteratee(iteratee);
      });

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property names.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function(result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key) {
        if (predicate(value, key)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAll`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values) {
      return basePullAllBy(array, values);
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAllBy(array, values, iteratee) {
      var index = -1,
          length = values.length,
          seen = array;

      if (iteratee) {
        seen = arrayMap(array, function(value) { return iteratee(value); });
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (lastIndex == length || index != previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = baseToPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[last(path)];
            }
          }
          else {
            delete array[index];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments to numbers.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the new array of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null ? (isIndex(path[index + 1]) ? [] : {}) : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array) {
      return baseSortedUniqBy(array);
    }

    /**
     * The base implementation of `_.sortedUniqBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniqBy(array, iteratee) {
      var index = 0,
          length = array.length,
          value = array[0],
          computed = iteratee ? iteratee(value) : value,
          seen = computed,
          resIndex = 0,
          result = [value];

      while (++index < length) {
        value = array[index],
        computed = iteratee ? iteratee(value) : value;

        if (!eq(computed, seen)) {
          seen = computed;
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toPath` which only converts `value` to a
     * path if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function baseToPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);
      object = parent(object, path);
      var key = last(path);
      return (object != null && has(object, key)) ? delete object[key] : true;
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * Creates a clone of `buffer`.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneBuffer(buffer) {
      var Ctor = buffer.constructor,
          result = new Ctor(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map) {
      var Ctor = map.constructor;
      return arrayReduce(mapToArray(map), addMapEntry, new Ctor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var Ctor = regexp.constructor,
          result = new Ctor(regexp.source, reFlags.exec(regexp));

      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set) {
      var Ctor = set.constructor;
      return arrayReduce(setToArray(set), addSetEntry, new Ctor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return Symbol ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = typedArray.buffer,
          Ctor = typedArray.constructor;

      return new Ctor(isDeep ? cloneBuffer(buffer) : buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object) {
      return copyObjectWith(source, props, object);
    }

    /**
     * This function is like `copyObject` except that it accepts a function to
     * customize copied values.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObjectWith(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index],
            newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];

        assignValue(object, key, newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var result = initializer ? initializer() : {};
        iteratee = getIteratee(iteratee);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return rest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined,
            chr = strSymbols ? strSymbols[0] : string.charAt(0),
            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string)), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,
            placeholder = wrapper.placeholder;

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        return length < arity
          ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)
          : apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return rest(function(funcs) {
        funcs = baseFlatten(funcs);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            return createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, thisArg, args, argsHolders, argPos, ary, arity - length);
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && args.length > 1) {
          args.reverse();
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new invoker function.
     */
    function createOver(arrayFunc) {
      return rest(function(iteratees) {
        iteratees = arrayMap(baseFlatten(iteratees), getIteratee());
        return rest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(string, length, chars) {
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars === undefined ? ' ' : (chars + '');

      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? stringToArray(result).slice(0, padLength).join('')
        : result.slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder to replace.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newArgPos = argPos ? copyArray(argPos) : undefined,
          newsHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, arity],
          result = wrapFunc.apply(undefined, newData);

      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = toInteger(precision);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var index = -1,
          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(array, other);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isUnordered) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
              })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {
      switch (tag) {
        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object) ? other != +other : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          // Recursively compare objects (susceptible to call stack limits).
          return (isPartial || object.size == other.size) &&
            equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);

        case symbolTag:
          return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is
     * customized this function returns the custom method, otherwise it returns
     * `baseIteratee`. If arguments are provided the chosen function is invoked
     * with them and its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = toPairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Creates an array of the own symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = getOwnPropertySymbols || function() {
      return [];
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function getTag(value) {
      return objectToString.call(value);
    }

    // Fallback for IE 11 providing `toStringTag` values for maps and sets.
    if ((Map && getTag(new Map) != mapTag) || (Set && getTag(new Set) != setTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : null,
            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

        if (ctorString) {
          if (ctorString == mapCtorString) {
            return mapTag;
          }
          if (ctorString == setCtorString) {
            return setTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      if (object == null) {
        return false;
      }
      var result = hasFunc(object, path);
      if (!result && !isKey(path)) {
        path = baseToPath(path);
        object = parent(object, path);
        if (object != null) {
          path = last(path);
          result = hasFunc(object, path);
        }
      }
      return result || (isLength(object && object.length) && isIndex(path, object.length) &&
        (isArray(object) || isString(object) || isArguments(object)));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      return (isLength(length) && (isArray(object) || isString(object) || isArguments(object)))
        ? baseTimes(length, String)
        : null;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (typeof value == 'number') {
        return true;
      }
      return !isArray(value) &&
        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object)));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return type == 'number' || type == 'boolean' ||
        (type == 'string' && value !== '__proto__') || value == null;
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * modify function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * combined case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||
        (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = copyArray(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
      }
      return objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    function stringToPath(string) {
      var result = [];
      toString(string).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the array-like object.
     */
    function toArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Converts `value` to a function if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Function} Returns the function.
     */
    function toFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=0] The length of each chunk.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size) {
      size = nativeMax(toInteger(size), 0);

      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var concat = rest(function(array, values) {
      if (!isArray(array)) {
        array = array == null ? [] : [Object(array)];
      }
      values = baseFlatten(values);
      return arrayConcat(array, values);
    });

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([3, 2, 1], [4, 2]);
     * // => [3, 1]
     */
    var difference = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
     * // => [3.1, 1.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = rest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true), getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = rest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // using the `_.matches` iteratee shorthand
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // using the `_.property` iteratee shorthand
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // using the `_.matches` iteratee shorthand
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // using the `_.property` iteratee shorthand
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // using the `_.matches` iteratee shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // using the `_.property` iteratee shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3))
        : -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // using the `_.matches` iteratee shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // using the `_.property` iteratee shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3), true)
        : -1;
    }

    /**
     * Creates an array of flattened values by running each element in `array`
     * through `iteratee` and concating its result to the other mapped values.
     * The iteratee is invoked with three arguments: (value, index|key, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(array, iteratee) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(arrayMap(array, getIteratee(iteratee, 3))) : [];
    }

    /**
     * Flattens `array` a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array) : [];
    }

    /**
     * This method is like `_.flatten` except that it recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      fromIndex = toInteger(fromIndex);
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * _.intersection([2, 1], [4, 2], [1, 2]);
     * // => [2]
     */
    var intersection = rest(function(arrays) {
      var mapped = arrayMap(arrays, toArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1]
     *
     * // using the `_.property` iteratee shorthand
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = rest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, toArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = rest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, toArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    var pull = rest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pullAll(array, [2, 3]);
     * console.log(array);
     * // => [1, 1]
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAllBy(array, values, getIteratee(iteratee))
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = rest(function(array, indexes) {
      indexes = arrayMap(baseFlatten(indexes), String);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(compareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @category Array
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)
     * to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 5], 4);
     * // => 0
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
     *
     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
     * // => 1
     *
     * // using the `_.property` iteratee shorthand
     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([1, 1, 2, 2], 2);
     * // => 2
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5], 4);
     * // => 1
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * // using the `_.property` iteratee shorthand
     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.2]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniqBy(array, getIteratee(iteratee))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with three
     * arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.matches` iteratee shorthand
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.property` iteratee shorthand
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2, 1], [4, 2], [1, 2]);
     * // => [2, 1, 4]
     */
    var union = rest(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1, 1.2, 4.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, false, true), getIteratee(iteratee));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, false, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // using the `_.property` iteratee shorthand
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([2, 1], [4, 2]);
     * // => [1, 4]
     */
    var xor = rest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [1.2, 4.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = rest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property names and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          valsLength = values ? values.length : 0,
          result = {};

      while (++index < length) {
        baseSet(result, props[index], index < valsLength ? values[index] : undefined);
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = rest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.
     * The result of such method chaining must be unwrapped with `_#value`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * invoked with one argument; (value). The purpose of this method is to "tap into"
     * a method chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     *
     * _(['a', 'b', 'c']).at(0, 2).value();
     * // => ['a', 'c']
     */
    var wrapperAt = rest(function(paths) {
      paths = baseFlatten(paths);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * This method is the wrapper version of `_.flatMap`.
     *
     * @name flatMap
     * @memberOf _
     * @category Seq
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _([1, 2]).flatMap(duplicate).value();
     * // => [1, 1, 2, 2]
     */
    function wrapperFlatMap(iteratee) {
      return this.map(iteratee).flatten();
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [reverse], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` iteratee shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.every(users, ['active', false]);
     * // => true
     *
     * // using the `_.property` iteratee shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // using the `_.matches` iteratee shorthand
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    function find(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEach);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate, true);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEachRight);
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
     * for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => logs `1` then `2`
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forEach(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEach(collection, iteratee)
        : baseEach(collection, toFunction(iteratee));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => logs `2` then `1`
     */
    function forEachRight(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEachRight(collection, iteratee)
        : baseEachRight(collection, toFunction(iteratee));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of elements responsible for generating the key.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // using the `_.property` iteratee shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string it's checked
     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it's
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = rest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(keyData, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
     * and `words`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` iteratee shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // using the `_.matches` iteratee shorthand
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` iteratee shorthand
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=0] The number of elements to sample.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = baseClamp(toInteger(n), 0, length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` iteratee shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.some(users, ['active', false]);
     * // => true
     *
     * // using the `_.property` iteratee shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]
     *  The iteratees to sort by, specified individually or in arrays.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortBy = rest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees.length = 1;
      }
      return baseOrderBy(collection, baseFlatten(iteratees), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = Date.now;

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = rest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = rest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide an options object to indicate whether `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent calls
     * to the debounced function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it's invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when clicked, debouncing subsequent calls
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // cancel a trailing debounced invocation
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          leading = false,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function flush() {
        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {
          result = func.apply(thisArg, args);
        }
        cancel();
        return result;
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = rest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = rest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // modifying the result cache
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // replacing `_.memoize.Cache`
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with arguments transformed by
     * corresponding `transforms`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = rest(function(func, transforms) {
      transforms = arrayMap(baseFlatten(transforms), getIteratee());

      var funcsLength = transforms.length;
      return rest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = rest(function(func, partials) {
      var holders = replaceHolders(partials, partial.placeholder);
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = rest(function(func, partials) {
      var holders = replaceHolders(partials, partialRight.placeholder);
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = rest(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, array);
          case 1: return func.call(this, args[0], array);
          case 2: return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return apply(func, this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide an options object to indicate whether
     * `func` should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // cancel a trailing throttled invocation
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': wait, 'trailing': trailing });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, customizer);
    }

    /**
     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null &&
        !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it's an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      return (!isObjectLike(value) || isFunction(value.splice))
        ? !size(value)
        : !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which is
     * invoked to compare values. If `customizer` returns `undefined` comparisons are
     * handled by the method instead. The `customizer` is invoked with up to six arguments:
     * (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) &&
        typeof value.message == 'string' && objectToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MAX_VALUE);
     * // => true
     *
     * _.isFinite(3.14);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array constructors, and
      // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined` comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(funcToString.call(value));
      }
      return isObjectLike(value) &&
        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = objectProto;
      if (typeof value.constructor == 'function') {
        proto = getPrototypeOf(value);
      }
      if (proto === null) {
        return true;
      }
      var Ctor = proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3');
     * // => 3
     */
    function toInteger(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      var remainder = value % 1;
      return value === value ? (remainder ? value - remainder : value) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3);
     * // => 3
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3');
     * // => 3
     */
    function toNumber(value) {
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string if it's not one. An empty string is returned
     * for `null` and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (value == null) {
        return '';
      }
      if (isSymbol(value)) {
        return Symbol ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source objects to the destination
     * object. Source objects are applied from left to right. Subsequent sources
     * overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.c = 3;
     * }
     *
     * function Bar() {
     *   this.e = 5;
     * }
     *
     * Foo.prototype.d = 4;
     * Bar.prototype.f = 6;
     *
     * _.assign({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3, 'e': 5 }
     */
    var assign = createAssigner(function(object, source) {
      copyObject(source, keys(source), object);
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * function Bar() {
     *   this.d = 4;
     * }
     *
     * Foo.prototype.c = 3;
     * Bar.prototype.e = 5;
     *
     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     *
     * _.at(['a', 'b', 'c'], 0, 2);
     * // => ['a', 'c']
     */
    var at = rest(function(object, paths) {
      return baseAt(object, baseFlatten(paths));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a `properties`
     * object is provided its own enumerable properties are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable properties of source objects to the
     * destination object for all destination properties that resolve to `undefined`.
     * Source objects are applied from left to right. Once a property is set,
     * additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = rest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = rest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` iteratee shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // using the `_.matches` iteratee shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
    }

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)
     */
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, toFunction(iteratee), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'
     */
    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, toFunction(iteratee), keysIn);
    }

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, toFunction(iteratee));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, toFunction(iteratee));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b.c');
     * // => true
     *
     * _.hasIn(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiVal` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiVal] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiVal`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiVal, guard) {
      return arrayReduce(keys(object), function(result, key) {
        var value = object[key];
        if (multiVal && !guard) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
        return result;
      }, {});
    }

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = rest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // using the `_.property` iteratee shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own and inherited enumerable properties of source
     * objects into the destination object, skipping source properties that resolve
     * to `undefined`. Array and plain object properties are merged recursively.
     * Other objects and value types are overridden by assignment. Source objects
     * are applied from left to right. Subsequent sources overwrite property
     * assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined` merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to omit, specified
     *  individually or in arrays..
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = rest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props), String);
      return basePick(object, baseDifference(keysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that `predicate`
     * doesn't return truthy for.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      predicate = getIteratee(predicate, 2);
      return basePickBy(object, function(value, key) {
        return !predicate(value, key);
      });
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to pick, specified
     *  individually or in arrays.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = rest(function(object, props) {
      return object == null ? {} : basePick(object, baseFlatten(props));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate, 2));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it's invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      if (!isKey(path, object)) {
        path = baseToPath(path);
        var result = get(object, path);
        object = parent(object, path);
      } else {
        result = object == null ? undefined : object[path];
      }
      if (result === undefined) {
        result = defaultValue;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);
     * // => { '0': { '1': { '2': 3 }, 'length': 2 } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable key-value pairs for `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    function toPairs(object) {
      return baseToPairs(object, keys(object));
    }

    /**
     * Creates an array of own and inherited enumerable key-value pairs for `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
     */
    function toPairsIn(object) {
      return baseToPairs(object, keysIn(object));
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The iteratee is invoked with four arguments:
     * (accumulator, value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * });
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? baseValues(object, keysIn(object)) : [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,
     * a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('d\u00e9j\u00e0 vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = typeof target == 'string' ? target : (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      return string + createPadding(string, length, chars);
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      return createPadding(string, length, chars) + string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      string = toString(string);
      n = toInteger(n);

      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the new array of string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      return toString(string).split(separator, limit);
    }

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + capitalize(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar');
     * // => '--foo-bar'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar');
     * // => '--FOO-BAR'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrim, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars);

      return strSymbols.slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimEnd, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols.slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimStart, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols.slice(charsStartIndex(strSymbols, stringToArray(chars))).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? toString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? strSymbols.slice(0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = rest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind,
     *  specified individually or in arrays.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, 'onClick');
     * jQuery(element).on('click', view.onClick);
     * // => logs 'clicked docs' when clicked
     */
    var bindAll = rest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames), function(key) {
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` invoking the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.constant(true),                _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return rest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name the created callback returns the
     * property value for a given element. If `func` is an object the created
     * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // create custom iteratee shorthands
     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {
     *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);
     *   return !p ? callback(func) : function(object) {
     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);
     *   };
     * });
     *
     * _.filter(users, 'age > 36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function iteratee(func) {
      return (isObjectLike(func) && !isArray(func))
        ? matches(func)
        : baseIteratee(func);
    }

    /**
     * Creates a function that performs a deep partial comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a deep partial comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = rest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = rest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Util
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns its nth argument.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.nthArg(1);
     *
     * func('a', 'b', 'c');
     * // => 'b'
     */
    function nthArg(n) {
      n = toInteger(n);
      return function() {
        return arguments[n];
      };
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments provided
     * to the created function and returns their results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} iteratees The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over(Math.max, Math.min);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(true));
     * // => [true, true, true, true]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = toFunction(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     *
     * var path = ['a', 'b', 'c'],
     *     newPath = _.toPath(path);
     *
     * console.log(newPath);
     * // => ['a', 'b', 'c']
     *
     * console.log(path === newPath);
     * // => false
     */
    function toPath(value) {
      return isArray(value) ? arrayMap(value, String) : stringToPath(value);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      var result;
      if (augend !== undefined) {
        result = augend;
      }
      if (addend !== undefined) {
        result = result === undefined ? addend : (result + addend);
      }
      return result;
    }

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, gt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // using the `_.property` iteratee shorthand
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), gt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return sum(array) / (array ? array.length : 0);
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, lt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // using the `_.property` iteratee shorthand
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), lt)
        : undefined;
    }

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    function subtract(minuend, subtrahend) {
      var result;
      if (minuend !== undefined) {
        result = minuend;
      }
      if (subtrahend !== undefined) {
        result = result === undefined ? subtrahend : (result - subtrahend);
      }
      return result;
    }

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : undefined;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // using the `_.property` iteratee shorthand
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee))
        : undefined;
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Avoid inheriting from `Object.prototype` when possible.
    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

    // Add functions to the `MapCache`.
    MapCache.prototype.clear = mapClear;
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `SetCache`.
    SetCache.prototype.push = cachePush;

    // Add functions to the `Stack` cache.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({ 'size': nativeMin(n, MAX_ARRAY_LENGTH), 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getIteratee(iteratee, 3), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.flatMap = wrapperFlatMap;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Expose lodash on the free variable `window` or `self` when available. This
  // prevents errors in cases where lodash is loaded by a script tag in the presence
  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
  (freeWindow || freeSelf || {})._ = _;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":5}],5:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],6:[function(require,module,exports){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.topojson = global.topojson || {})));
}(this, (function (exports) { 'use strict';

function noop() {}

function transformAbsolute(transform) {
  if (!transform) return noop;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(point, i) {
    if (!i) x0 = y0 = 0;
    point[0] = (x0 += point[0]) * kx + dx;
    point[1] = (y0 += point[1]) * ky + dy;
  };
}

function transformRelative(transform) {
  if (!transform) return noop;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(point, i) {
    if (!i) x0 = y0 = 0;
    var x1 = Math.round((point[0] - dx) / kx),
        y1 = Math.round((point[1] - dy) / ky);
    point[0] = x1 - x0;
    point[1] = y1 - y0;
    x0 = x1;
    y0 = y1;
  };
}

function reverse(array, n) {
  var t, j = array.length, i = j - n;
  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
}

function bisect(a, x) {
  var lo = 0, hi = a.length;
  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;
    else hi = mid;
  }
  return lo;
}

function feature(topology, o) {
  return o.type === "GeometryCollection" ? {
    type: "FeatureCollection",
    features: o.geometries.map(function(o) { return feature$1(topology, o); })
  } : feature$1(topology, o);
}

function feature$1(topology, o) {
  var f = {
    type: "Feature",
    id: o.id,
    properties: o.properties || {},
    geometry: object(topology, o)
  };
  if (o.id == null) delete f.id;
  return f;
}

function object(topology, o) {
  var absolute = transformAbsolute(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();
    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {
      points.push(p = a[k].slice());
      absolute(p, k);
    }
    if (i < 0) reverse(points, n);
  }

  function point(p) {
    p = p.slice();
    absolute(p, 0);
    return p;
  }

  function line(arcs) {
    var points = [];
    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
    if (points.length < 2) points.push(points[0].slice());
    return points;
  }

  function ring(arcs) {
    var points = line(arcs);
    while (points.length < 4) points.push(points[0].slice());
    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var t = o.type;
    return t === "GeometryCollection" ? {type: t, geometries: o.geometries.map(geometry)}
        : t in geometryType ? {type: t, coordinates: geometryType[t](o)}
        : null;
  }

  var geometryType = {
    Point: function(o) { return point(o.coordinates); },
    MultiPoint: function(o) { return o.coordinates.map(point); },
    LineString: function(o) { return line(o.arcs); },
    MultiLineString: function(o) { return o.arcs.map(line); },
    Polygon: function(o) { return polygon(o.arcs); },
    MultiPolygon: function(o) { return o.arcs.map(polygon); }
  };

  return geometry(o);
}

function stitchArcs(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1;

  // Stitch empty arcs first, since they may be subsumed by other arcs.
  arcs.forEach(function(i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i], t;
    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });

  arcs.forEach(function(i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f, g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;
      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;
      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
    else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });

  return fragments;
}

function mesh(topology) {
  return object(topology, meshArcs.apply(this, arguments));
}

function meshArcs(topology, o, filter) {
  var arcs = [];

  function arc(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
  }

  function line(arcs) {
    arcs.forEach(arc);
  }

  function polygon(arcs) {
    arcs.forEach(line);
  }

  function geometry(o) {
    if (o.type === "GeometryCollection") o.geometries.forEach(geometry);
    else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);
  }

  if (arguments.length > 1) {
    var geomsByArc = [],
        geom;

    var geometryType = {
      LineString: line,
      MultiLineString: polygon,
      Polygon: polygon,
      MultiPolygon: function(arcs) { arcs.forEach(polygon); }
    };

    geometry(o);

    geomsByArc.forEach(arguments.length < 3
        ? function(geoms) { arcs.push(geoms[0].i); }
        : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });
  } else {
    for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);
  }

  return {type: "MultiLineString", arcs: stitchArcs(topology, arcs)};
}

function cartesianTriangleArea(triangle) {
  var a = triangle[0], b = triangle[1], c = triangle[2];
  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));
}

function ring(ring) {
  var i = -1,
      n = ring.length,
      a,
      b = ring[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = ring[i];
    area += a[0] * b[1] - a[1] * b[0];
  }

  return area / 2;
}

function merge(topology) {
  return object(topology, mergeArcs.apply(this, arguments));
}

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      components = [];

  objects.forEach(function(o) {
    if (o.type === "Polygon") register(o.arcs);
    else if (o.type === "MultiPolygon") o.arcs.forEach(register);
  });

  function register(polygon) {
    polygon.forEach(function(ring$$) {
      ring$$.forEach(function(arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring$$) {
    return Math.abs(ring(object(topology, {type: "Polygon", arcs: [ring$$]}).coordinates[0]));
  }

  polygons.forEach(function(polygon) {
    if (!polygon._) {
      var component = [],
          neighbors = [polygon];
      polygon._ = 1;
      components.push(component);
      while (polygon = neighbors.pop()) {
        component.push(polygon);
        polygon.forEach(function(ring$$) {
          ring$$.forEach(function(arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });

  polygons.forEach(function(polygon) {
    delete polygon._;
  });

  return {
    type: "MultiPolygon",
    arcs: components.map(function(polygons) {
      var arcs = [], n;

      // Extract the exterior (unique) arcs.
      polygons.forEach(function(polygon) {
        polygon.forEach(function(ring$$) {
          ring$$.forEach(function(arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      });

      // Stitch the arcs into one or more rings.
      arcs = stitchArcs(topology, arcs);

      // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.
      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    })
  };
}

function neighbors(objects) {
  var indexesByArc = {}, // arc index -> array of object indexes
      neighbors = objects.map(function() { return []; });

  function line(arcs, i) {
    arcs.forEach(function(a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);
      else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function(arc) { line(arc, i); });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function(o) { geometry(o, i); });
    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }
  };

  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j], ik = indexes[k], n;
        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
}

function compareArea(a, b) {
  return a[1][2] - b[1][2];
}

function minAreaHeap() {
  var heap = {},
      array = [],
      size = 0;

  heap.push = function(object) {
    up(array[object._ = size] = object, size++);
    return size;
  };

  heap.pop = function() {
    if (size <= 0) return;
    var removed = array[0], object;
    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
    return removed;
  };

  heap.remove = function(removed) {
    var i = removed._, object;
    if (array[i] !== removed) return; // invalid request
    if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
    return i;
  };

  function up(object, i) {
    while (i > 0) {
      var j = ((i + 1) >> 1) - 1,
          parent = array[j];
      if (compareArea(object, parent) >= 0) break;
      array[parent._ = i] = parent;
      array[object._ = i = j] = object;
    }
  }

  function down(object, i) {
    while (true) {
      var r = (i + 1) << 1,
          l = r - 1,
          j = i,
          child = array[j];
      if (l < size && compareArea(array[l], child) < 0) child = array[j = l];
      if (r < size && compareArea(array[r], child) < 0) child = array[j = r];
      if (j === i) break;
      array[child._ = i] = child;
      array[object._ = i = j] = object;
    }
  }

  return heap;
}

function presimplify(topology, triangleArea) {
  var absolute = transformAbsolute(topology.transform),
      relative = transformRelative(topology.transform),
      heap = minAreaHeap();

  if (!triangleArea) triangleArea = cartesianTriangleArea;

  topology.arcs.forEach(function(arc) {
    var triangles = [],
        maxArea = 0,
        triangle,
        i,
        n,
        p;

    // To store each point\u2019s effective area, we create a new array rather than
    // extending the passed-in point to workaround a Chrome/V8 bug (getting
    // stuck in smi mode). For midpoints, the initial effective area of
    // Infinity will be computed in the next step.
    for (i = 0, n = arc.length; i < n; ++i) {
      p = arc[i];
      absolute(arc[i] = [p[0], p[1], Infinity], i);
    }

    for (i = 1, n = arc.length - 1; i < n; ++i) {
      triangle = arc.slice(i - 1, i + 2);
      triangle[1][2] = triangleArea(triangle);
      triangles.push(triangle);
      heap.push(triangle);
    }

    for (i = 0, n = triangles.length; i < n; ++i) {
      triangle = triangles[i];
      triangle.previous = triangles[i - 1];
      triangle.next = triangles[i + 1];
    }

    while (triangle = heap.pop()) {
      var previous = triangle.previous,
          next = triangle.next;

      // If the area of the current point is less than that of the previous point
      // to be eliminated, use the latter's area instead. This ensures that the
      // current point cannot be eliminated without eliminating previously-
      // eliminated points.
      if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;
      else maxArea = triangle[1][2];

      if (previous) {
        previous.next = next;
        previous[2] = triangle[2];
        update(previous);
      }

      if (next) {
        next.previous = previous;
        next[0] = triangle[0];
        update(next);
      }
    }

    arc.forEach(relative);
  });

  function update(triangle) {
    heap.remove(triangle);
    triangle[1][2] = triangleArea(triangle);
    heap.push(triangle);
  }

  return topology;
}

var version = "1.6.27";

exports.version = version;
exports.mesh = mesh;
exports.meshArcs = meshArcs;
exports.merge = merge;
exports.mergeArcs = mergeArcs;
exports.feature = feature;
exports.neighbors = neighbors;
exports.presimplify = presimplify;

Object.defineProperty(exports, '__esModule', { value: true });

})));
},{}],7:[function(require,module,exports){
module.exports={"type":"Topology","objects":{"counties":{"type":"GeometryCollection","bbox":[-179.1473399999999,17.67439566600018,179.7784800000003,71.38921046500008],"geometries":[{"type":"MultiPolygon","id":53073,"arcs":[[[0,1,2]]]},{"type":"Polygon","id":30105,"arcs":[[3,4,5,6,7,8]]},{"type":"Polygon","id":30029,"arcs":[[9,10,11,12,13,14,15,16,17,18]]},{"type":"Polygon","id":16021,"arcs":[[19,20,21,22]]},{"type":"Polygon","id":30071,"arcs":[[-8,23,24,25,26,27]]},{"type":"Polygon","id":38079,"arcs":[[28,29,30,31]]},{"type":"Polygon","id":30053,"arcs":[[-18,32,33,-20,34]]},{"type":"Polygon","id":38009,"arcs":[[-30,35,36,37,38]]},{"type":"Polygon","id":30035,"arcs":[[39,40,-10,41]]},{"type":"Polygon","id":30041,"arcs":[[42,43,44,45]]},{"type":"Polygon","id":30005,"arcs":[[-27,46,47,-46,48]]},{"type":"Polygon","id":30019,"arcs":[[49,50,-4,51]]},{"type":"Polygon","id":38067,"arcs":[[52,53,54,55]]},{"type":"Polygon","id":27069,"arcs":[[56,57,-53,58]]},{"type":"Polygon","id":38095,"arcs":[[59,60,61,-32,62,63]]},{"type":"Polygon","id":38019,"arcs":[[-55,64,65,-64,66]]},{"type":"Polygon","id":53047,"arcs":[[67,68,69,70,71,72,-1,73]]},{"type":"Polygon","id":53065,"arcs":[[74,75,76,77,78]]},{"type":"Polygon","id":53051,"arcs":[[-22,79,80,-75,81]]},{"type":"Polygon","id":53019,"arcs":[[-78,82,-68,83]]},{"type":"Polygon","id":30051,"arcs":[[84,85,86,-44,87]]},{"type":"Polygon","id":38023,"arcs":[[88,89,90,91]]},{"type":"Polygon","id":38013,"arcs":[[92,93,94,95,-89,96]]},{"type":"Polygon","id":30101,"arcs":[[97,-86,98,-40]]},{"type":"Polygon","id":38075,"arcs":[[99,100,-93,101,-38]]},{"type":"Polygon","id":27135,"arcs":[[102,103,-57,104,105]]},{"type":"Polygon","id":30091,"arcs":[[-91,106,107,-50,108]]},{"type":"Polygon","id":16017,"arcs":[[-34,109,110,111,112,-80,-21]]},{"type":"Polygon","id":38101,"arcs":[[-101,113,114,115,-94]]},{"type":"MultiPolygon","id":53055,"arcs":[[[116]],[[117]],[[118]]]},{"type":"Polygon","id":27071,"arcs":[[119,120,121,122,123]]},{"type":"MultiPolygon","id":53057,"arcs":[[[124,-2,-73,125,126,127]]]},{"type":"Polygon","id":38105,"arcs":[[-96,128,129,130,-107,-90]]},{"type":"Polygon","id":38049,"arcs":[[131,132,133,-114,-100,-37]]},{"type":"Polygon","id":27137,"arcs":[[134,135,136,137,138,139,-120,140]]},{"type":"Polygon","id":30085,"arcs":[[-108,-131,141,142,-5,-51]]},{"type":"Polygon","id":53007,"arcs":[[-72,143,144,145,146,-126]]},{"type":"Polygon","id":38061,"arcs":[[147,148,149,-129,-95,-116]]},{"type":"Polygon","id":27089,"arcs":[[150,151,152,153,154,-58,-104]]},{"type":"Polygon","id":38069,"arcs":[[-62,155,156,157,-132,-36,-29]]},{"type":"MultiPolygon","id":38071,"arcs":[[[158]],[[159,160,161,-60,-66]]]},{"type":"Polygon","id":38099,"arcs":[[-54,-155,162,163,-160,-65]]},{"type":"Polygon","id":27007,"arcs":[[-122,164,165,166,167,168,-151,-103,169]]},{"type":"Polygon","id":30073,"arcs":[[-99,-85,170,171,-11,-41]]},{"type":"MultiPolygon","id":53029,"arcs":[[[172,173]],[[174]]]},{"type":"MultiPolygon","id":53009,"arcs":[[[175,176]]]},{"type":"Polygon","id":38005,"arcs":[[-61,-162,177,178,179,-156],[-159]]},{"type":"Polygon","id":30015,"arcs":[[-48,180,181,182,183,-171,-88,-43]]},{"type":"MultiPolygon","id":53061,"arcs":[[[-147,184,185,-173,186,-127]]]},{"type":"Polygon","id":30089,"arcs":[[-17,187,188,189,190,-110,-33]]},{"type":"Polygon","id":27075,"arcs":[[191,192,-135,193]]},{"type":"Polygon","id":38063,"arcs":[[194,195,196,197,-178,-161,-164]]},{"type":"Polygon","id":38035,"arcs":[[-154,198,199,200,-195,-163]]},{"type":"Polygon","id":27119,"arcs":[[201,202,203,204,205,206,207,-199,-153]]},{"type":"Polygon","id":27113,"arcs":[[-169,208,-204,209,-202,-152]]},{"type":"Polygon","id":30083,"arcs":[[210,211,212,213,-142]]},{"type":"Polygon","id":53017,"arcs":[[214,215,-144,-71]]},{"type":"Polygon","id":38053,"arcs":[[-150,216,217,218,219,-211,-130]]},{"type":"MultiPolygon","id":53031,"arcs":[[[220,221,222,-176,223]]]},{"type":"Polygon","id":30099,"arcs":[[-184,224,225,-12,-172]]},{"type":"Polygon","id":30055,"arcs":[[-214,226,227,228,-6,-143]]},{"type":"Polygon","id":16079,"arcs":[[-191,229,230,231,232,233,-111]]},{"type":"Polygon","id":30047,"arcs":[[234,-188,-16]]},{"type":"Polygon","id":53063,"arcs":[[-81,-113,235,236,237,238,-76]]},{"type":"Polygon","id":27029,"arcs":[[239,240,241,-205,-209,-168]]},{"type":"Polygon","id":16055,"arcs":[[-234,242,-236,-112]]},{"type":"Polygon","id":30033,"arcs":[[-229,243,244,245,246,-24,-7]]},{"type":"Polygon","id":27125,"arcs":[[-203,-210]]},{"type":"Polygon","id":53025,"arcs":[[-70,247,248,249,250,251,252,-215]]},{"type":"Polygon","id":53043,"arcs":[[-83,-77,-239,253,254,-248,-69]]},{"type":"Polygon","id":30049,"arcs":[[255,256,257,258,259,-13,-226]]},{"type":"MultiPolygon","id":53035,"arcs":[[[260]],[[261,262,263,264,265]]]},{"type":"Polygon","id":27061,"arcs":[[-140,266,267,-165,-121]]},{"type":"Polygon","id":38055,"arcs":[[268,269,270,271,272,-148,-115,-134]]},{"type":"Polygon","id":38027,"arcs":[[-198,273,274,275,-179]]},{"type":"Polygon","id":38103,"arcs":[[-180,-276,276,277,278,279,-157]]},{"type":"Polygon","id":38083,"arcs":[[-158,-280,280,281,-269,-133]]},{"type":"Polygon","id":38025,"arcs":[[-273,282,283,284,-217,-149]]},{"type":"Polygon","id":30027,"arcs":[[-26,285,286,287,288,289,-181,-47]]},{"type":"Polygon","id":30021,"arcs":[[-213,290,291,-227]]},{"type":"MultiPolygon","id":53033,"arcs":[[[292]],[[-146,293,294,295,-185]]]},{"type":"Polygon","id":30013,"arcs":[[296,297,-256,-225,-183]]},{"type":"Polygon","id":38091,"arcs":[[-201,298,299,300,301,-196]]},{"type":"Polygon","id":38039,"arcs":[[-302,302,303,304,-274,-197]]},{"type":"Polygon","id":38097,"arcs":[[305,306,-299,-200,-208]]},{"type":"MultiPolygon","id":53045,"arcs":[[[307,-265,308,309,310,311,-221]]]},{"type":"Polygon","id":30063,"arcs":[[-15,312,313,314,315,316,317,-189,-235]]},{"type":"Polygon","id":30077,"arcs":[[-260,318,319,320,-313,-14]]},{"type":"Polygon","id":30069,"arcs":[[-247,321,322,-286,-25]]},{"type":"Polygon","id":53037,"arcs":[[-216,-253,323,-294,-145]]},{"type":"Polygon","id":38031,"arcs":[[-305,324,-277,-275]]},{"type":"Polygon","id":38057,"arcs":[[325,326,327,-283,-272]]},{"type":"MultiPolygon","id":53027,"arcs":[[[-312,328,329,330,331,-222]]]},{"type":"Polygon","id":27087,"arcs":[[332,333,-206,-242]]},{"type":"Polygon","id":27107,"arcs":[[-207,-334,334,335,336,-306]]},{"type":"Polygon","id":30061,"arcs":[[-318,337,-230,-190]]},{"type":"Polygon","id":27021,"arcs":[[338,339,340,341,342,343,-166,-268]]},{"type":"Polygon","id":23003,"arcs":[[344,345,346,347,348]]},{"type":"Polygon","id":30045,"arcs":[[-290,349,350,-297,-182]]},{"type":"Polygon","id":16009,"arcs":[[-233,351,352,-237,-243]]},{"type":"Polygon","id":27057,"arcs":[[-344,353,354,-240,-167]]},{"type":"MultiPolygon","id":53053,"arcs":[[[-295,355,356,357,358]],[[-262,359]],[[-309,-264,360]]]},{"type":"Polygon","id":30109,"arcs":[[-220,361,362,363,-291,-212]]},{"type":"Polygon","id":38007,"arcs":[[-285,364,365,366,-218]]},{"type":"Polygon","id":38033,"arcs":[[-367,367,368,-362,-219]]},{"type":"Polygon","id":38043,"arcs":[[369,370,371,372,-281,-279]]},{"type":"Polygon","id":38093,"arcs":[[-304,373,374,375,-370,-278,-325]]},{"type":"Polygon","id":38015,"arcs":[[-373,376,377,378,-270,-282]]},{"type":"Polygon","id":38065,"arcs":[[-379,379,-326,-271]]},{"type":"Polygon","id":53001,"arcs":[[380,381,-249,-255]]},{"type":"Polygon","id":53075,"arcs":[[-238,-353,382,383,384,385,386,387,-381,-254]]},{"type":"Polygon","id":38003,"arcs":[[-301,388,389,390,-374,-303]]},{"type":"Polygon","id":38017,"arcs":[[-307,-337,391,392,393,-389,-300]]},{"type":"Polygon","id":53067,"arcs":[[-358,394,-329,-311,395]]},{"type":"Polygon","id":30079,"arcs":[[-364,396,397,-244,-228,-292]]},{"type":"Polygon","id":27005,"arcs":[[-355,398,399,400,-335,-333,-241]]},{"type":"Polygon","id":27027,"arcs":[[-401,401,402,403,-392,-336]]},{"type":"Polygon","id":16057,"arcs":[[-232,404,405,-383,-352]]},{"type":"Polygon","id":53077,"arcs":[[-252,406,407,408,409,-356,-324]]},{"type":"Polygon","id":30059,"arcs":[[-351,410,411,412,413,414,-257,-298]]},{"type":"Polygon","id":27001,"arcs":[[-139,415,416,417,418,419,-339,-267]]},{"type":"Polygon","id":26131,"arcs":[[420,421,422,423]]},{"type":"Polygon","id":38089,"arcs":[[-328,424,425,426,427,-365,-284]]},{"type":"Polygon","id":38059,"arcs":[[-378,428,429,430,-425,-327,-380]]},{"type":"Polygon","id":26013,"arcs":[[431,432,433,434]]},{"type":"Polygon","id":16035,"arcs":[[-338,-317,435,436,437,-405,-231]]},{"type":"Polygon","id":30017,"arcs":[[438,439,440,441,-245,-398]]},{"type":"Polygon","id":30087,"arcs":[[-442,442,443,444,445,446,-322,-246]]},{"type":"Polygon","id":30039,"arcs":[[447,448,-314,-321]]},{"type":"Polygon","id":27159,"arcs":[[-343,449,450,-399,-354]]},{"type":"Polygon","id":27035,"arcs":[[-420,451,452,-340]]},{"type":"MultiPolygon","id":53049,"arcs":[[[453,454,455,-331]]]},{"type":"Polygon","id":53041,"arcs":[[-395,-357,-410,456,457,458,-454,-330]]},{"type":"Polygon","id":30007,"arcs":[[-415,459,460,-258]]},{"type":"Polygon","id":27017,"arcs":[[461,462,-416,-138]]},{"type":"Polygon","id":26053,"arcs":[[463,464,465,466,-422]]},{"type":"Polygon","id":30065,"arcs":[[-447,467,468,-287,-323]]},{"type":"Polygon","id":26095,"arcs":[[469,470,471,472,473]]},{"type":"Polygon","id":30037,"arcs":[[-469,474,475,476,477,-288]]},{"type":"Polygon","id":30107,"arcs":[[-289,-478,478,-411,-350]]},{"type":"Polygon","id":53021,"arcs":[[479,480,481,-250,-382,-388]]},{"type":"Polygon","id":53005,"arcs":[[482,483,484,485,-407,-251,-482]]},{"type":"Polygon","id":27111,"arcs":[[-451,486,487,488,489,-402,-400]]},{"type":"Polygon","id":38037,"arcs":[[490,491,492,-426,-431]]},{"type":"Polygon","id":53023,"arcs":[[493,494,495,-386]]},{"type":"Polygon","id":30025,"arcs":[[-369,496,497,498,499,-439,-397,-363]]},{"type":"Polygon","id":16049,"arcs":[[500,501,502,503,504,505,506,-436,-316]]},{"type":"Polygon","id":30081,"arcs":[[-449,507,508,509,-501,-315]]},{"type":"Polygon","id":38029,"arcs":[[-372,510,511,512,513,-429,-377]]},{"type":"Polygon","id":38047,"arcs":[[-376,514,515,-511,-371]]},{"type":"Polygon","id":16069,"arcs":[[-438,516,-506,517,518,-384,-406]]},{"type":"Polygon","id":38087,"arcs":[[519,520,521,-497,-368,-366,-428]]},{"type":"Polygon","id":38045,"arcs":[[522,523,524,-515,-375,-391]]},{"type":"Polygon","id":38041,"arcs":[[-493,525,-520,-427]]},{"type":"Polygon","id":27167,"arcs":[[-490,526,527,528,-403]]},{"type":"Polygon","id":38073,"arcs":[[-394,529,530,531,-523,-390]]},{"type":"Polygon","id":38077,"arcs":[[-529,532,533,534,-530,-393,-404]]},{"type":"Polygon","id":53013,"arcs":[[535,536,537,-480,-387,-496]]},{"type":"Polygon","id":53071,"arcs":[[-538,538,-483,-481]]},{"type":"Polygon","id":55051,"arcs":[[-466,539,540,541,542]]},{"type":"Polygon","id":23025,"arcs":[[543,544,545,546,547,548,-348]]},{"type":"Polygon","id":23021,"arcs":[[549,-544,-347]]},{"type":"Polygon","id":30043,"arcs":[[-461,550,551,552,553,-319,-259]]},{"type":"Polygon","id":26153,"arcs":[[-472,554,555,556,557]]},{"type":"Polygon","id":30111,"arcs":[[558,559,560,561,-475,-468,-446]]},{"type":"Polygon","id":30103,"arcs":[[562,-559,-445]]},{"type":"Polygon","id":16061,"arcs":[[-437,-507,-517]]},{"type":"Polygon","id":53003,"arcs":[[-519,563,-494,-385]]},{"type":"Polygon","id":38085,"arcs":[[-514,564,565,-491,-430]]},{"type":"Polygon","id":26071,"arcs":[[-433,566,567,568,569,570,-464,-421,571]]},{"type":"Polygon","id":27115,"arcs":[[572,573,574,575,-417,-463]]},{"type":"Polygon","id":23019,"arcs":[[576,577,578,579,-545,-550,-346]]},{"type":"Polygon","id":53059,"arcs":[[-409,580,581,582,583,584,-457]]},{"type":"Polygon","id":53015,"arcs":[[-585,585,586,587,588,-458]]},{"type":"MultiPolygon","id":53069,"arcs":[[[-459,-589,589,-455]]]},{"type":"Polygon","id":27153,"arcs":[[-342,590,591,592,-487,-450]]},{"type":"Polygon","id":27097,"arcs":[[-453,593,594,595,-591,-341]]},{"type":"Polygon","id":55125,"arcs":[[596,597,-540,-465,-571,598]]},{"type":"MultiPolygon","id":41007,"arcs":[[[599,600,601]]]},{"type":"Polygon","id":38001,"arcs":[[-492,-566,602,603,604,605,-521,-526]]},{"type":"Polygon","id":38081,"arcs":[[-535,606,607,608,-531]]},{"type":"Polygon","id":38051,"arcs":[[-525,609,610,611,-512,-516]]},{"type":"Polygon","id":38021,"arcs":[[-532,-609,612,613,-610,-524]]},{"type":"Polygon","id":38011,"arcs":[[-606,614,-498,-522]]},{"type":"Polygon","id":30023,"arcs":[[-554,615,616,-508,-448,-320]]},{"type":"Polygon","id":26043,"arcs":[[617,618,619,-568,620]]},{"type":"Polygon","id":27095,"arcs":[[621,622,623,624,-594,-452,-419]]},{"type":"Polygon","id":30097,"arcs":[[-477,625,626,-412,-479]]},{"type":"Polygon","id":30031,"arcs":[[-414,627,628,629,630,631,-551,-460]]},{"type":"Polygon","id":30067,"arcs":[[-627,632,633,634,-628,-413]]},{"type":"Polygon","id":30093,"arcs":[[635,636,-616,-553]]},{"type":"MultiPolygon","id":41009,"arcs":[[[637,638,639,-600,640,-587]]]},{"type":"Polygon","id":27065,"arcs":[[-576,641,-622,-418]]},{"type":"Polygon","id":55013,"arcs":[[642,643,644,645,-574,646]]},{"type":"Polygon","id":55113,"arcs":[[647,648,649,650,651]]},{"type":"Polygon","id":55129,"arcs":[[-651,652,-643,653]]},{"type":"Polygon","id":30011,"arcs":[[654,655,656,657,-440,-500]]},{"type":"Polygon","id":30095,"arcs":[[-562,658,-633,-626,-476]]},{"type":"Polygon","id":27051,"arcs":[[-489,659,660,661,-527]]},{"type":"Polygon","id":27041,"arcs":[[-593,662,663,-660,-488]]},{"type":"Polygon","id":55041,"arcs":[[664,665,666,667,668,-599,-570]]},{"type":"Polygon","id":53011,"arcs":[[-584,669,-638,-586]]},{"type":"Polygon","id":53039,"arcs":[[-486,670,671,672,673,674,-581,-408]]},{"type":"Polygon","id":30003,"arcs":[[-444,675,676,677,678,-560,-563]]},{"type":"Polygon","id":27155,"arcs":[[-662,679,680,681,-533,-528]]},{"type":"Polygon","id":55037,"arcs":[[-620,682,-665,-569]]},{"type":"Polygon","id":41059,"arcs":[[-537,683,684,685,686,-484,-539]]},{"type":"Polygon","id":41063,"arcs":[[-495,-564,-518,-505,687,688,689,-684,-536]]},{"type":"Polygon","id":26109,"arcs":[[690,691,692,-618,693]]},{"type":"Polygon","id":55099,"arcs":[[-598,694,695,696,697,-649,698,-541]]},{"type":"Polygon","id":46105,"arcs":[[699,700,701,702,703,-604]]},{"type":"Polygon","id":46031,"arcs":[[704,705,706,707,-700,-603,-565]]},{"type":"Polygon","id":46063,"arcs":[[-605,-704,708,-655,-499,-615]]},{"type":"Polygon","id":46021,"arcs":[[-612,709,710,-705,-513]]},{"type":"Polygon","id":30001,"arcs":[[-637,711,712,713,714,-509,-617]]},{"type":"Polygon","id":46089,"arcs":[[-614,715,716,717,-710,-611]]},{"type":"Polygon","id":46013,"arcs":[[-608,718,719,720,721,722,-716,-613]]},{"type":"Polygon","id":46109,"arcs":[[-682,723,724,725,726,-534]]},{"type":"Polygon","id":46091,"arcs":[[-727,727,-719,-607]]},{"type":"Polygon","id":41049,"arcs":[[-687,728,729,730,-671,-485]]},{"type":"Polygon","id":55085,"arcs":[[-669,731,732,-695,-597]]},{"type":"Polygon","id":41061,"arcs":[[733,734,-685,-690]]},{"type":"Polygon","id":30057,"arcs":[[-632,735,-712,-636,-552]]},{"type":"Polygon","id":27009,"arcs":[[-625,736,737,-595]]},{"type":"Polygon","id":41021,"arcs":[[738,739,740,-672,-731]]},{"type":"Polygon","id":30075,"arcs":[[-658,741,742,743,-676,-443,-441]]},{"type":"Polygon","id":26031,"arcs":[[744,745,746,747,748,749]]},{"type":"MultiPolygon","id":41057,"arcs":[[[750,751,752,753,754,-601]]]},{"type":"Polygon","id":41067,"arcs":[[755,756,757,-751,-640]]},{"type":"Polygon","id":27145,"arcs":[[-738,758,759,760,761,762,-663,-592,-596]]},{"type":"Polygon","id":27149,"arcs":[[763,764,765,-680,-661]]},{"type":"Polygon","id":27121,"arcs":[[-763,766,767,-764,-664]]},{"type":"Polygon","id":41055,"arcs":[[768,-673,-741]]},{"type":"Polygon","id":27059,"arcs":[[769,770,771,-623,-642]]},{"type":"Polygon","id":27025,"arcs":[[-646,772,773,774,-770,-575]]},{"type":"Polygon","id":55095,"arcs":[[775,776,777,-773,-645]]},{"type":"Polygon","id":41051,"arcs":[[-670,-583,778,779,-756,-639]]},{"type":"Polygon","id":41027,"arcs":[[780,781,-779,-582,-675]]},{"type":"Polygon","id":41065,"arcs":[[-769,-740,782,783,784,785,-781,-674]]},{"type":"Polygon","id":16059,"arcs":[[-715,786,787,788,789,-502,-510]]},{"type":"MultiPolygon","id":23029,"arcs":[[[790,-577,-345,791]]]},{"type":"Polygon","id":23007,"arcs":[[792,793,794,795,-548]]},{"type":"Polygon","id":26141,"arcs":[[796,797,-745,798]]},{"type":"Polygon","id":55005,"arcs":[[-653,799,800,801,-776,-644]]},{"type":"Polygon","id":55107,"arcs":[[-698,802,803,-800,-650]]},{"type":"Polygon","id":30009,"arcs":[[-679,804,805,-634,-659,-561]]},{"type":"Polygon","id":46129,"arcs":[[-718,806,807,808,-706,-711]]},{"type":"Polygon","id":46045,"arcs":[[-723,809,810,-807,-717]]},{"type":"Polygon","id":46037,"arcs":[[-728,-726,811,812,813,814,-720]]},{"type":"Polygon","id":27011,"arcs":[[-681,-766,815,816,817,-724]]},{"type":"Polygon","id":27141,"arcs":[[-624,-772,818,819,820,-759,-737]]},{"type":"Polygon","id":55069,"arcs":[[821,822,823,-696,-733]]},{"type":"Polygon","id":46041,"arcs":[[-809,824,825,826,827,-707]]},{"type":"Polygon","id":46137,"arcs":[[-828,828,829,-701,-708]]},{"type":"Polygon","id":55067,"arcs":[[-668,830,831,832,833,-822,-732]]},{"type":"Polygon","id":41005,"arcs":[[-782,-786,834,835,-757,-780]]},{"type":"Polygon","id":41071,"arcs":[[-836,836,837,-752,-758]]},{"type":"Polygon","id":27171,"arcs":[[-821,838,839,840,841,-760]]},{"type":"Polygon","id":27003,"arcs":[[-775,842,843,844,-819,-771]]},{"type":"Polygon","id":27067,"arcs":[[845,846,847,848,-767,-762]]},{"type":"Polygon","id":27151,"arcs":[[-849,849,850,-816,-765,-768]]},{"type":"Polygon","id":55119,"arcs":[[-824,851,852,853,-803,-697]]},{"type":"Polygon","id":55083,"arcs":[[854,855,856,857,858,859,860,-831,-667]]},{"type":"Polygon","id":23017,"arcs":[[-795,861,862,863,864,865,866]]},{"type":"Polygon","id":46051,"arcs":[[-818,867,868,869,-812,-725]]},{"type":"Polygon","id":27093,"arcs":[[-842,870,871,-846,-761]]},{"type":"Polygon","id":33007,"arcs":[[872,873,874,875,-866]]},{"type":"Polygon","id":27163,"arcs":[[-778,876,877,878,879,-843,-774]]},{"type":"Polygon","id":55017,"arcs":[[-854,880,881,882,-801,-804]]},{"type":"Polygon","id":41047,"arcs":[[-835,-785,883,884,885,-837]]},{"type":"Polygon","id":16003,"arcs":[[886,887,888,889,-688,-504]]},{"type":"Polygon","id":27073,"arcs":[[-851,890,891,892,-868,-817]]},{"type":"MultiPolygon","id":23009,"arcs":[[[893]],[[894]],[[895,-578,-791]]]},{"type":"Polygon","id":46107,"arcs":[[-811,896,897,898,-825,-808]]},{"type":"Polygon","id":46049,"arcs":[[-722,899,900,901,-897,-810]]},{"type":"Polygon","id":27053,"arcs":[[-820,-845,902,903,904,905,-839]]},{"type":"Polygon","id":46115,"arcs":[[-815,906,907,908,-900,-721]]},{"type":"Polygon","id":16085,"arcs":[[-790,909,910,911,-887,-503]]},{"type":"Polygon","id":46019,"arcs":[[-703,912,913,914,-656,-709]]},{"type":"Polygon","id":55109,"arcs":[[915,916,-877,-777]]},{"type":"Polygon","id":55033,"arcs":[[-883,917,918,919,-916,-802]]},{"type":"Polygon","id":26009,"arcs":[[920,921,922,923,924]]},{"type":"Polygon","id":26137,"arcs":[[925,926,-921,927,-747]]},{"type":"Polygon","id":26119,"arcs":[[928,929,-926,-746,-798]]},{"type":"Polygon","id":46025,"arcs":[[930,931,932,933,-907,-814]]},{"type":"Polygon","id":46029,"arcs":[[-870,934,935,-931,-813]]},{"type":"Polygon","id":27023,"arcs":[[-848,936,937,-891,-850]]},{"type":"Polygon","id":27123,"arcs":[[-880,938,-903,-844]]},{"type":"Polygon","id":55073,"arcs":[[-823,-834,939,940,941,942,-852]]},{"type":"Polygon","id":55078,"arcs":[[-861,943,-832]]},{"type":"Polygon","id":41001,"arcs":[[-890,944,945,946,-734,-689]]},{"type":"Polygon","id":41053,"arcs":[[-886,947,948,949,-753,-838]]},{"type":"Polygon","id":41069,"arcs":[[-730,950,951,952,-783,-739]]},{"type":"Polygon","id":41041,"arcs":[[-950,953,954,955,-754]]},{"type":"Polygon","id":46093,"arcs":[[-830,956,957,958,-913,-702]]},{"type":"Polygon","id":55019,"arcs":[[-943,959,960,961,-881,-853]]},{"type":"Polygon","id":55115,"arcs":[[-944,-860,962,963,964,-940,-833]]},{"type":"Polygon","id":50011,"arcs":[[965,966,967,968,969]]},{"type":"Polygon","id":50009,"arcs":[[970,971,972,973,-875]]},{"type":"Polygon","id":50013,"arcs":[[974,975,976,-969]]},{"type":"Polygon","id":36019,"arcs":[[977,978,979,980,-976]]},{"type":"Polygon","id":50019,"arcs":[[-973,981,982,-966,983]]},{"type":"Polygon","id":56029,"arcs":[[984,985,986,987,988,-629,-635,-806]]},{"type":"Polygon","id":36089,"arcs":[[989,990,991,992,993,994]]},{"type":"Polygon","id":56003,"arcs":[[995,996,997,-985,-805,-678]]},{"type":"Polygon","id":56005,"arcs":[[998,999,1000,1001,1002,-743]]},{"type":"Polygon","id":56033,"arcs":[[-744,-1003,1003,-996,-677]]},{"type":"Polygon","id":36033,"arcs":[[-980,1004,1005,-990,1006]]},{"type":"Polygon","id":56011,"arcs":[[-657,-915,1007,1008,-999,-742]]},{"type":"Polygon","id":41023,"arcs":[[-735,-947,1009,1010,1011,-951,-729,-686]]},{"type":"Polygon","id":27085,"arcs":[[-841,1012,1013,1014,-871]]},{"type":"Polygon","id":27019,"arcs":[[-906,1015,1016,-1013,-840]]},{"type":"Polygon","id":46039,"arcs":[[-893,1017,1018,1019,1020,-935,-869]]},{"type":"Polygon","id":27173,"arcs":[[1021,1022,1023,1024,-1018,-892,-938]]},{"type":"Polygon","id":27037,"arcs":[[-879,1025,1026,1027,1028,-904,-939]]},{"type":"Polygon","id":46119,"arcs":[[1029,1030,1031,-826,-899]]},{"type":"Polygon","id":46069,"arcs":[[-902,1032,1033,1034,1035,-1030,-898]]},{"type":"Polygon","id":46059,"arcs":[[-909,1036,1037,1038,-1033,-901]]},{"type":"Polygon","id":27129,"arcs":[[-872,-1015,1039,1040,1041,1042,-1022,-937,-847]]},{"type":"Polygon","id":16037,"arcs":[[1043,1044,1045,1046,-910,-789]]},{"type":"Polygon","id":55093,"arcs":[[-920,1047,1048,-1026,-878,-917]]},{"type":"Polygon","id":26001,"arcs":[[1049,1050,1051,1052]]},{"type":"Polygon","id":26079,"arcs":[[1053,1054,1055,-922]]},{"type":"Polygon","id":26039,"arcs":[[1056,1057,-1054,-927]]},{"type":"Polygon","id":55035,"arcs":[[-962,1058,1059,1060,1061,-918,-882]]},{"type":"Polygon","id":26135,"arcs":[[-1052,1062,-1057,-930]]},{"type":"Polygon","id":16087,"arcs":[[1063,1064,1065,-945,-889]]},{"type":"Polygon","id":41031,"arcs":[[-953,1066,1067,1068,-884,-784]]},{"type":"Polygon","id":27139,"arcs":[[-1029,1069,1070,1071,-1016,-905]]},{"type":"Polygon","id":46057,"arcs":[[-1021,1072,1073,-932,-936]]},{"type":"Polygon","id":50015,"arcs":[[1074,1075,1076,-967,-983]]},{"type":"Polygon","id":41043,"arcs":[[-1069,1077,1078,1079,-948,-885]]},{"type":"Polygon","id":46117,"arcs":[[-1032,1080,1081,1082,1083,-827]]},{"type":"Polygon","id":26019,"arcs":[[1084,1085,1086,1087]]},{"type":"Polygon","id":50005,"arcs":[[1088,1089,1090,-1075,-982,-972]]},{"type":"MultiPolygon","id":23027,"arcs":[[[-580,1091,1092,1093,1094,-546]]]},{"type":"Polygon","id":16043,"arcs":[[1095,1096,1097,1098,1099,-713,-736,-631]]},{"type":"Polygon","id":46055,"arcs":[[1100,1101,1102,-957,-829,-1084]]},{"type":"Polygon","id":50007,"arcs":[[-1077,1103,1104,1105,-978,-975,-968]]},{"type":"Polygon","id":41003,"arcs":[[-1080,1106,-954,-949]]},{"type":"Polygon","id":23011,"arcs":[[1107,1108,1109,1110,-793,-547,-1095]]},{"type":"Polygon","id":27143,"arcs":[[-1017,-1072,1111,1112,-1040,-1014]]},{"type":"Polygon","id":27049,"arcs":[[1113,1114,1115,1116,1117,-1027,-1049]]},{"type":"Polygon","id":27127,"arcs":[[1118,1119,1120,1121,-1023,-1043]]},{"type":"Polygon","id":55097,"arcs":[[1122,1123,1124,1125,-941]]},{"type":"Polygon","id":55141,"arcs":[[-1126,1126,1127,1128,-960,-942]]},{"type":"MultiPolygon","id":55009,"arcs":[[[-857,1129]],[[-859,1130,1131,1132,1133,1134,-963]]]},{"type":"Polygon","id":55091,"arcs":[[-1062,1135,1136,-1114,-1048,-919]]},{"type":"Polygon","id":55135,"arcs":[[1137,1138,1139,-1123,-965]]},{"type":"Polygon","id":55061,"arcs":[[1140,1141,-1132,1142,1143]]},{"type":"Polygon","id":56039,"arcs":[[1144,1145,1146,1147,1148,-1096,-630,-989]]},{"type":"Polygon","id":46005,"arcs":[[-934,1149,1150,1151,-1037,-908]]},{"type":"Polygon","id":27081,"arcs":[[1152,1153,1154,-1019,-1025]]},{"type":"Polygon","id":27083,"arcs":[[-1122,1155,1156,-1153,-1024]]},{"type":"Polygon","id":46081,"arcs":[[-959,1157,1158,-1008,-914]]},{"type":"Polygon","id":55011,"arcs":[[-1061,1159,1160,1161,-1136]]},{"type":"Polygon","id":55121,"arcs":[[1162,1163,1164,-1160,-1060]]},{"type":"Polygon","id":55053,"arcs":[[-961,-1129,1165,1166,1167,-1163,-1059]]},{"type":"Polygon","id":55087,"arcs":[[-964,-1135,1168,1169,-1138]]},{"type":"Polygon","id":16033,"arcs":[[-1100,1170,1171,-787,-714]]},{"type":"Polygon","id":56019,"arcs":[[-1002,1172,1173,1174,-997,-1004]]},{"type":"Polygon","id":41013,"arcs":[[-952,-1012,1175,1176,-1067]]},{"type":"Polygon","id":46065,"arcs":[[-1036,1177,-1081,-1031]]},{"type":"Polygon","id":36031,"arcs":[[1178,1179,1180,1181,-1005,-979,-1106]]},{"type":"Polygon","id":27079,"arcs":[[1182,1183,1184,1185,-1112,-1071]]},{"type":"Polygon","id":27131,"arcs":[[-1028,-1118,1186,1187,1188,-1183,-1070]]},{"type":"Polygon","id":46077,"arcs":[[-1074,1189,1190,1191,1192,-1150,-933]]},{"type":"Polygon","id":46011,"arcs":[[-1155,1193,1194,1195,-1190,-1073,-1020]]},{"type":"Polygon","id":26101,"arcs":[[1196,1197,1198,1199,-1086]]},{"type":"Polygon","id":26165,"arcs":[[1200,1201,1202,-1197,1203]]},{"type":"Polygon","id":26143,"arcs":[[1204,1205,1206,1207,-1058]]},{"type":"Polygon","id":26113,"arcs":[[-1208,1208,1209,-1201,-1055]]},{"type":"Polygon","id":26069,"arcs":[[1210,1211,1212,-1051]]},{"type":"Polygon","id":26129,"arcs":[[-1213,1213,1214,-1205,-1063]]},{"type":"Polygon","id":16045,"arcs":[[-912,1215,1216,1217,1218,-1064,-888]]},{"type":"Polygon","id":46103,"arcs":[[-1103,1219,1220,1221,1222,-1158,-958]]},{"type":"Polygon","id":50023,"arcs":[[1223,1224,-1104,-1076,-1091]]},{"type":"Polygon","id":27015,"arcs":[[1225,1226,1227,1228,-1119,-1042]]},{"type":"Polygon","id":23001,"arcs":[[1229,1230,-862,-794,-1111]]},{"type":"Polygon","id":27103,"arcs":[[1231,-1226,-1041,-1113,-1186]]},{"type":"Polygon","id":27157,"arcs":[[-1137,-1162,1232,1233,-1115]]},{"type":"Polygon","id":41045,"arcs":[[-1066,1234,1235,1236,1237,1238,-1010,-946]]},{"type":"Polygon","id":33009,"arcs":[[1239,1240,1241,1242,1243,1244,-1089,-971,-874]]},{"type":"Polygon","id":41017,"arcs":[[-1177,1245,1246,1247,1248,-1078,-1068]]},{"type":"MultiPolygon","id":36045,"arcs":[[[1249,-994,1250,1251,1252,1253,1254]]]},{"type":"MultiPolygon","id":23013,"arcs":[[[1255,1256,-1093]]]},{"type":"Polygon","id":16015,"arcs":[[-1047,1257,1258,-1216,-911]]},{"type":"MultiPolygon","id":23015,"arcs":[[[-1094,-1257,1259,1260,1261,-1108]]]},{"type":"Polygon","id":55071,"arcs":[[-1142,1262,1263,1264,-1133]]},{"type":"Polygon","id":50001,"arcs":[[-1225,1265,1266,1267,1268,-1179,-1105]]},{"type":"MultiPolygon","id":41039,"arcs":[[[-1249,1269,1270,1271,-955,-1107,-1079]]]},{"type":"Polygon","id":33003,"arcs":[[-865,1272,1273,1274,-1240,-873]]},{"type":"Polygon","id":27013,"arcs":[[-1185,1275,1276,1277,1278,-1227,-1232]]},{"type":"Polygon","id":55057,"arcs":[[1279,1280,1281,1282,-1166,-1128]]},{"type":"Polygon","id":55001,"arcs":[[-1125,1283,1284,1285,-1280,-1127]]},{"type":"Polygon","id":55137,"arcs":[[-1140,1286,1287,1288,-1284,-1124]]},{"type":"Polygon","id":55139,"arcs":[[1289,1290,1291,-1287,-1139,-1170]]},{"type":"Polygon","id":55015,"arcs":[[-1134,-1265,1292,1293,-1290,-1169]]},{"type":"Polygon","id":16023,"arcs":[[-1172,1294,1295,1296,-1044,-788]]},{"type":"Polygon","id":50017,"arcs":[[-1245,1297,-1266,-1224,-1090]]},{"type":"Polygon","id":36049,"arcs":[[1298,1299,-1251,-993,1300]]},{"type":"Polygon","id":46085,"arcs":[[1301,1302,1303,1304,1305,-1082,-1178,-1035,1306]]},{"type":"Polygon","id":27117,"arcs":[[-1157,1307,1308,1309,-1194,-1154]]},{"type":"Polygon","id":27101,"arcs":[[-1121,1310,1311,1312,-1308,-1156]]},{"type":"Polygon","id":46073,"arcs":[[-1152,1313,1314,1315,1316,-1038]]},{"type":"Polygon","id":27147,"arcs":[[1317,1318,1319,1320,-1188]]},{"type":"Polygon","id":27039,"arcs":[[1321,1322,-1318,-1187,-1117]]},{"type":"Polygon","id":46101,"arcs":[[-1310,1323,1324,-1195]]},{"type":"Polygon","id":27161,"arcs":[[-1321,1325,1326,-1276,-1184,-1189]]},{"type":"Polygon","id":46017,"arcs":[[-1317,1327,-1307,-1034,-1039]]},{"type":"Polygon","id":46111,"arcs":[[-1193,1328,1329,1330,1331,-1314,-1151]]},{"type":"Polygon","id":27109,"arcs":[[-1234,1332,1333,1334,-1322,-1116]]},{"type":"Polygon","id":27033,"arcs":[[-1229,1335,1336,1337,-1311,-1120]]},{"type":"Polygon","id":46079,"arcs":[[-1196,-1325,1338,1339,1340,-1191]]},{"type":"Polygon","id":46097,"arcs":[[-1341,1341,1342,-1329,-1192]]},{"type":"Polygon","id":27169,"arcs":[[-1161,-1165,1343,1344,1345,-1333,-1233]]},{"type":"Polygon","id":56045,"arcs":[[-1159,-1223,1346,1347,1348,-1000,-1009]]},{"type":"Polygon","id":26105,"arcs":[[1349,1350,1351,-1199]]},{"type":"MultiPolygon","id":23005,"arcs":[[[-1231,1352,1353,1354,1355,1356,-863]]]},{"type":"Polygon","id":46075,"arcs":[[-1306,1357,1358,-1101,-1083]]},{"type":"Polygon","id":56043,"arcs":[[-1175,1359,1360,1361,-986,-998]]},{"type":"MultiPolygon","id":23023,"arcs":[[[-1355,1362]],[[1363,1364,-1261,1365]],[[1366,-1353,-1230,-1110]]]},{"type":"Polygon","id":26085,"arcs":[[-1198,-1203,1367,1368,-1350]]},{"type":"Polygon","id":26133,"arcs":[[-1210,1369,1370,-1368,-1202]]},{"type":"Polygon","id":26035,"arcs":[[-1207,1371,1372,-1370,-1209]]},{"type":"Polygon","id":26051,"arcs":[[1373,1374,1375,-1372,-1206,-1215]]},{"type":"Polygon","id":55081,"arcs":[[-1283,1376,1377,-1167]]},{"type":"Polygon","id":16075,"arcs":[[-1219,1378,-1235,-1065]]},{"type":"Polygon","id":36041,"arcs":[[1379,1380,1381,1382,-991,-1006,-1182]]},{"type":"Polygon","id":27165,"arcs":[[-1279,1383,1384,-1336,-1228]]},{"type":"Polygon","id":16039,"arcs":[[-1046,1385,1386,1387,1388,1389,1390,-1258]]},{"type":"Polygon","id":36043,"arcs":[[-1383,1391,1392,1393,1394,-1301,-992]]},{"type":"Polygon","id":55063,"arcs":[[-1168,-1378,1395,1396,-1344,-1164]]},{"type":"Polygon","id":56017,"arcs":[[-1362,1397,-987]]},{"type":"Polygon","id":16051,"arcs":[[-1099,1398,1399,1400,-1295,-1171]]},{"type":"Polygon","id":41025,"arcs":[[-1239,1401,1402,1403,-1246,-1176,-1011]]},{"type":"Polygon","id":56013,"arcs":[[-1398,-1361,1404,1405,1406,1407,-1145,-988]]},{"type":"Polygon","id":26017,"arcs":[[1408,1409,1410,1411,-1375,1412]]},{"type":"Polygon","id":46071,"arcs":[[-1359,1413,1414,1415,-1220,-1102]]},{"type":"Polygon","id":16013,"arcs":[[-1297,1416,1417,1418,1419,1420,1421,-1386,-1045]]},{"type":"Polygon","id":16081,"arcs":[[-1149,1422,1423,-1097]]},{"type":"Polygon","id":55047,"arcs":[[-1292,1424,1425,1426,1427,-1288]]},{"type":"Polygon","id":55077,"arcs":[[-1428,1428,-1285,-1289]]},{"type":"Polygon","id":50027,"arcs":[[-1244,1429,1430,1431,1432,-1267,-1298]]},{"type":"MultiPolygon","id":41019,"arcs":[[[1433,1434,1435,1436,1437,1438,-1271]]]},{"type":"Polygon","id":55039,"arcs":[[1439,1440,1441,-1425,-1291,-1294]]},{"type":"Polygon","id":46003,"arcs":[[-1332,1442,1443,1444,1445,-1315]]},{"type":"Polygon","id":46015,"arcs":[[-1446,1446,-1302,-1328,-1316]]},{"type":"Polygon","id":16065,"arcs":[[-1424,1447,-1399,-1098]]},{"type":"Polygon","id":55117,"arcs":[[1448,1449,1450,-1440,-1293,-1264]]},{"type":"Polygon","id":16027,"arcs":[[-1218,1451,1452,-1236,-1379]]},{"type":"Polygon","id":46095,"arcs":[[-1305,1453,1454,-1414,-1358]]},{"type":"Polygon","id":16025,"arcs":[[1455,1456,-1387,-1422]]},{"type":"Polygon","id":50021,"arcs":[[1457,1458,-1268,-1433]]},{"type":"Polygon","id":46033,"arcs":[[1459,1460,1461,-1347,-1222]]},{"type":"Polygon","id":27133,"arcs":[[-1313,1462,1463,1464,-1309]]},{"type":"Polygon","id":27105,"arcs":[[-1338,1465,1466,1467,-1463,-1312]]},{"type":"Polygon","id":27047,"arcs":[[1468,1469,1470,1471,-1326,-1320]]},{"type":"Polygon","id":27099,"arcs":[[-1335,1472,1473,1474,1475,-1469,-1319,-1323]]},{"type":"Polygon","id":27055,"arcs":[[-1397,1476,1477,1478,1479,-1345]]},{"type":"Polygon","id":46035,"arcs":[[1480,1481,1482,-1443,-1331]]},{"type":"Polygon","id":46061,"arcs":[[-1343,1483,1484,-1481,-1330]]},{"type":"Polygon","id":27045,"arcs":[[-1346,-1480,1485,1486,-1473,-1334]]},{"type":"Polygon","id":27063,"arcs":[[-1385,1487,1488,1489,1490,-1466,-1337]]},{"type":"Polygon","id":27043,"arcs":[[-1327,-1472,1491,1492,1493,-1277]]},{"type":"Polygon","id":46099,"arcs":[[1494,1495,1496,1497,-1339,-1324,-1465]]},{"type":"Polygon","id":27091,"arcs":[[-1278,-1494,1498,1499,-1488,-1384]]},{"type":"Polygon","id":46087,"arcs":[[-1340,-1498,1500,1501,-1484,-1342]]},{"type":"Polygon","id":26111,"arcs":[[-1412,1502,1503,1504,-1376]]},{"type":"Polygon","id":26127,"arcs":[[1505,1506,1507,-1351]]},{"type":"Polygon","id":26073,"arcs":[[-1505,1508,1509,1510,-1373]]},{"type":"MultiPolygon","id":23031,"arcs":[[[1511,1512,-1273,-864,-1357]]]},{"type":"Polygon","id":26107,"arcs":[[-1511,1513,1514,-1371]]},{"type":"Polygon","id":26123,"arcs":[[-1515,1515,1516,1517,-1506,-1369]]},{"type":"Polygon","id":36115,"arcs":[[-1459,1518,1519,1520,1521,-1180,-1269]]},{"type":"Polygon","id":16001,"arcs":[[-1259,-1391,1522,-1452,-1217]]},{"type":"Polygon","id":36113,"arcs":[[1523,-1380,-1181,-1522]]},{"type":"Polygon","id":46123,"arcs":[[1524,1525,1526,-1454,-1304]]},{"type":"Polygon","id":33001,"arcs":[[1527,1528,-1241,-1275]]},{"type":"Polygon","id":26157,"arcs":[[1529,1530,1531,1532,1533,-1410,1534]]},{"type":"Polygon","id":55123,"arcs":[[1535,1536,1537,1538,-1477,-1396,-1377,-1282]]},{"type":"MultiPolygon","id":36075,"arcs":[[[-1254,1539]],[[-1300,1540,1541,1542,1543,1544,-1252]]]},{"type":"Polygon","id":46113,"arcs":[[1545,1546,1547,1548,-1460,-1221,-1416]]},{"type":"Polygon","id":26151,"arcs":[[1549,1550,-1531,1551,1552]]},{"type":"Polygon","id":16073,"arcs":[[-1523,-1390,1553,1554,1555,-1237,-1453]]},{"type":"Polygon","id":55021,"arcs":[[1556,1557,1558,-1286,-1429,-1427]]},{"type":"Polygon","id":55111,"arcs":[[-1559,1559,1560,1561,-1536,-1281]]},{"type":"Polygon","id":55027,"arcs":[[1562,1563,1564,1565,-1557,-1426,-1442]]},{"type":"Polygon","id":16019,"arcs":[[-1448,-1423,-1148,1566,1567,1568,-1400]]},{"type":"Polygon","id":16011,"arcs":[[1569,1570,1571,-1417,-1296,-1401,-1569]]},{"type":"Polygon","id":41035,"arcs":[[1572,1573,1574,1575,-1434,-1270,-1248]]},{"type":"Polygon","id":41037,"arcs":[[1576,1577,-1573,-1247,-1404]]},{"type":"Polygon","id":36065,"arcs":[[1578,1579,-1541,-1299,-1395]]},{"type":"Polygon","id":33013,"arcs":[[-1529,1580,1581,1582,1583,-1242]]},{"type":"MultiPolygon","id":41011,"arcs":[[[1584,1585,-1438]]]},{"type":"Polygon","id":33019,"arcs":[[-1584,1586,1587,1588,-1430,-1243]]},{"type":"Polygon","id":33017,"arcs":[[-1513,1589,1590,-1581,-1528,-1274]]},{"type":"Polygon","id":26145,"arcs":[[-1534,1591,1592,1593,-1503,-1411]]},{"type":"Polygon","id":55103,"arcs":[[1594,1595,1596,-1537,-1562]]},{"type":"Polygon","id":55089,"arcs":[[1597,1598,1599,-1450]]},{"type":"Polygon","id":55131,"arcs":[[-1451,-1600,1600,-1563,-1441]]},{"type":"Polygon","id":19189,"arcs":[[1601,1602,1603,-1492,-1471]]},{"type":"Polygon","id":19109,"arcs":[[1604,1605,1606,-1499,-1493,-1604,1607]]},{"type":"Polygon","id":19059,"arcs":[[1608,1609,-1490,1610]]},{"type":"Polygon","id":19063,"arcs":[[1611,-1611,-1489,-1500,-1607]]},{"type":"Polygon","id":19195,"arcs":[[1612,-1602,-1470,-1476,1613]]},{"type":"Polygon","id":19143,"arcs":[[1614,1615,-1467,-1491,-1610]]},{"type":"Polygon","id":56027,"arcs":[[-1462,1616,1617,1618,1619,1620,-1348]]},{"type":"Polygon","id":19131,"arcs":[[1621,1622,-1614,-1475,1623]]},{"type":"Polygon","id":19119,"arcs":[[1624,1625,-1495,-1464,-1468,-1616]]},{"type":"Polygon","id":19089,"arcs":[[1626,1627,-1624,-1474,-1487]]},{"type":"Polygon","id":19005,"arcs":[[-1539,1628,1629,1630,-1478]]},{"type":"Polygon","id":19191,"arcs":[[1631,1632,-1627,-1486,-1479,-1631]]},{"type":"Polygon","id":46083,"arcs":[[-1626,1633,1634,1635,1636,-1496]]},{"type":"Polygon","id":56009,"arcs":[[-1621,1637,1638,1639,1640,-1173,-1001,-1349]]},{"type":"Polygon","id":46023,"arcs":[[-1445,1641,1642,1643,1644,1645,1646,-1447]]},{"type":"Polygon","id":46125,"arcs":[[-1497,-1637,1647,1648,1649,-1501]]},{"type":"Polygon","id":46067,"arcs":[[-1502,-1650,1650,1651,-1643,1652,-1482,-1485]]},{"type":"Polygon","id":56025,"arcs":[[-1174,-1641,1653,-1405,-1360]]},{"type":"Polygon","id":46043,"arcs":[[-1483,-1653,-1642,-1444]]},{"type":"Polygon","id":46053,"arcs":[[-1647,1654,1655,-1525,-1303]]},{"type":"Polygon","id":46047,"arcs":[[-1549,1656,1657,-1617,-1461]]},{"type":"Polygon","id":26121,"arcs":[[-1518,1658,1659,1660,-1507]]},{"type":"Polygon","id":26117,"arcs":[[-1510,1661,1662,1663,-1516,-1514]]},{"type":"Polygon","id":56035,"arcs":[[1664,1665,-1146,-1408]]},{"type":"Polygon","id":26057,"arcs":[[-1504,-1594,1666,1667,-1662,-1509]]},{"type":"Polygon","id":55023,"arcs":[[-1597,1668,1669,-1629,-1538]]},{"type":"Polygon","id":36011,"arcs":[[1670,1671,1672,1673,1674,1675,-1544]]},{"type":"Polygon","id":36091,"arcs":[[-1521,1676,1677,1678,1679,1680,-1381,-1524]]},{"type":"Polygon","id":46007,"arcs":[[1681,1682,-1546,-1415]]},{"type":"Polygon","id":46121,"arcs":[[-1527,1683,-1682,-1455]]},{"type":"Polygon","id":36073,"arcs":[[1684,1685,1686,1687]]},{"type":"Polygon","id":36063,"arcs":[[-1687,1688,1689,1690]]},{"type":"Polygon","id":36055,"arcs":[[1691,1692,1693,1694,-1685,1695]]},{"type":"MultiPolygon","id":36117,"arcs":[[[1696,1697,-1692,1698,-1675]]]},{"type":"Polygon","id":26087,"arcs":[[1699,1700,1701,1702,-1532,-1551]]},{"type":"Polygon","id":56023,"arcs":[[-1666,1703,1704,1705,1706,1707,-1567,-1147]]},{"type":"Polygon","id":50003,"arcs":[[-1432,1708,1709,1710,1711,-1519,-1458]]},{"type":"Polygon","id":55025,"arcs":[[-1566,1712,1713,1714,1715,-1560,-1558]]},{"type":"Polygon","id":26081,"arcs":[[1716,1717,1718,1719,-1659,-1517,-1664]]},{"type":"Polygon","id":36035,"arcs":[[-1681,1720,-1392,-1382]]},{"type":"MultiPolygon","id":33015,"arcs":[[[1721,1722,1723,-1582,-1591]]]},{"type":"Polygon","id":36067,"arcs":[[1724,1725,-1671,-1543]]},{"type":"Polygon","id":50025,"arcs":[[-1589,1726,1727,-1709,-1431]]},{"type":"Polygon","id":19167,"arcs":[[1728,1729,1730,-1634,-1625]]},{"type":"Polygon","id":19141,"arcs":[[1731,1732,-1729,-1615]]},{"type":"Polygon","id":19033,"arcs":[[-1623,1733,1734,1735,-1613]]},{"type":"Polygon","id":19081,"arcs":[[-1736,1736,-1608,-1603]]},{"type":"Polygon","id":19147,"arcs":[[-1606,1737,1738,-1612]]},{"type":"Polygon","id":19041,"arcs":[[-1739,1739,-1732,-1609]]},{"type":"Polygon","id":26049,"arcs":[[-1703,1740,1741,1742,-1592,-1533]]},{"type":"Polygon","id":19037,"arcs":[[-1633,1743,1744,1745,-1628]]},{"type":"Polygon","id":19067,"arcs":[[-1746,1746,-1734,-1622]]},{"type":"Polygon","id":55049,"arcs":[[-1561,-1716,1747,1748,1749,-1595]]},{"type":"Polygon","id":55043,"arcs":[[-1750,1750,1751,1752,1753,-1669,-1596]]},{"type":"Polygon","id":33011,"arcs":[[-1724,1754,1755,1756,1757,-1587,-1583]]},{"type":"Polygon","id":26139,"arcs":[[-1720,1758,1759,-1660]]},{"type":"Polygon","id":16063,"arcs":[[1760,1761,1762,-1456,-1421]]},{"type":"Polygon","id":16047,"arcs":[[-1763,1763,1764,-1388,-1457]]},{"type":"Polygon","id":55055,"arcs":[[1765,1766,1767,-1713,-1565]]},{"type":"Polygon","id":16067,"arcs":[[1768,1769,-1761,-1420]]},{"type":"Polygon","id":55133,"arcs":[[-1601,1770,1771,1772,-1766,-1564]]},{"type":"Polygon","id":55079,"arcs":[[1773,1774,-1771,-1599]]},{"type":"Polygon","id":36053,"arcs":[[-1580,1775,1776,1777,-1725,-1542]]},{"type":"Polygon","id":33005,"arcs":[[-1758,1778,1779,-1727,-1588]]},{"type":"Polygon","id":46135,"arcs":[[1780,1781,1782,1783,-1651,-1649]]},{"type":"Polygon","id":46009,"arcs":[[-1784,1784,-1644,-1652]]},{"type":"Polygon","id":26155,"arcs":[[-1743,1785,1786,1787,-1667,-1593]]},{"type":"Polygon","id":36037,"arcs":[[1788,1789,1790,-1689,-1686,-1695]]},{"type":"Polygon","id":26067,"arcs":[[1791,1792,1793,-1717,-1663]]},{"type":"Polygon","id":26037,"arcs":[[-1788,1794,1795,-1792,-1668]]},{"type":"Polygon","id":16077,"arcs":[[-1572,1796,1797,1798,-1418]]},{"type":"MultiPolygon","id":36029,"arcs":[[[1799]],[[-1791,1800,1801,1802,1803,-1690]]]},{"type":"Polygon","id":46127,"arcs":[[-1731,1804,1805,1806,1807,1808,-1635]]},{"type":"Polygon","id":46027,"arcs":[[-1809,1809,1810,-1781,-1648,-1636]]},{"type":"Polygon","id":19065,"arcs":[[1811,1812,1813,-1744,-1632]]},{"type":"Polygon","id":19043,"arcs":[[-1670,-1754,1814,1815,-1812,-1630]]},{"type":"Polygon","id":36057,"arcs":[[-1680,1816,1817,1818,-1393,-1721]]},{"type":"Polygon","id":36069,"arcs":[[1819,1820,1821,1822,-1693,-1698]]},{"type":"Polygon","id":16005,"arcs":[[1823,1824,1825,-1797,-1571]]},{"type":"Polygon","id":16029,"arcs":[[-1568,-1708,1826,1827,-1824,-1570]]},{"type":"Polygon","id":36099,"arcs":[[1828,1829,1830,-1820,-1697,-1674]]},{"type":"Polygon","id":31165,"arcs":[[1831,1832,1833,-1618,-1658,1834]]},{"type":"Polygon","id":31161,"arcs":[[1835,1836,1837,1838,1839,-1547,1840]]},{"type":"Polygon","id":31045,"arcs":[[1841,-1835,-1657,-1548,-1840]]},{"type":"Polygon","id":31015,"arcs":[[1842,1843,1844,-1655,-1646]]},{"type":"Polygon","id":31103,"arcs":[[-1845,1845,1846,1847,-1526,-1656]]},{"type":"Polygon","id":31031,"arcs":[[-1684,-1848,1848,1849,1850,1851,1852,-1841,-1683]]},{"type":"Polygon","id":41029,"arcs":[[-1576,1853,1854,-1435]]},{"type":"Polygon","id":36051,"arcs":[[-1823,1855,1856,1857,-1789,-1694]]},{"type":"Polygon","id":36083,"arcs":[[-1712,1858,1859,1860,-1677,-1520]]},{"type":"Polygon","id":36093,"arcs":[[1861,1862,-1817,-1679]]},{"type":"Polygon","id":41015,"arcs":[[-1437,1863,1864,1865,-1585]]},{"type":"Polygon","id":16083,"arcs":[[1866,1867,1868,-1554,-1389,-1765]]},{"type":"Polygon","id":19149,"arcs":[[1869,1870,-1805,-1730]]},{"type":"Polygon","id":19021,"arcs":[[1871,1872,1873,-1740]]},{"type":"Polygon","id":19035,"arcs":[[-1874,1874,1875,-1870,-1733]]},{"type":"Polygon","id":19151,"arcs":[[1876,1877,1878,-1872,-1738]]},{"type":"Polygon","id":19197,"arcs":[[1879,1880,1881,1882,-1737]]},{"type":"Polygon","id":19091,"arcs":[[-1883,1883,-1877,-1605]]},{"type":"Polygon","id":19069,"arcs":[[1884,1885,-1880,-1735]]},{"type":"Polygon","id":19023,"arcs":[[1886,1887,1888,-1885,-1747]]},{"type":"Polygon","id":19017,"arcs":[[-1814,1889,-1887,-1745]]},{"type":"Polygon","id":36077,"arcs":[[-1819,1890,1891,1892,-1776,-1579,-1394]]},{"type":"Polygon","id":31089,"arcs":[[1893,1894,1895,1896,1897,1898,-1844]]},{"type":"Polygon","id":26099,"arcs":[[1899,1900,1901,-1701,1902]]},{"type":"Polygon","id":26125,"arcs":[[1903,1904,1905,-1741,-1702,-1902]]},{"type":"MultiPolygon","id":25009,"arcs":[[[1906,1907,1908,-1755,-1723]]]},{"type":"Polygon","id":31107,"arcs":[[-1785,-1783,1909,1910,1911,-1894,-1843,-1645]]},{"type":"Polygon","id":31027,"arcs":[[-1811,1912,1913,1914,-1910,-1782]]},{"type":"Polygon","id":36121,"arcs":[[-1858,1915,1916,-1801,-1790]]},{"type":"Polygon","id":55045,"arcs":[[1917,1918,1919,1920,-1748,-1715]]},{"type":"Polygon","id":16053,"arcs":[[-1770,1921,-1867,-1764,-1762]]},{"type":"Polygon","id":55105,"arcs":[[-1768,1922,1923,1924,-1918,-1714]]},{"type":"Polygon","id":31017,"arcs":[[1925,1926,1927,-1849,-1847]]},{"type":"Polygon","id":55127,"arcs":[[-1773,1928,1929,1930,1931,-1923,-1767]]},{"type":"Polygon","id":55101,"arcs":[[1932,1933,-1929,-1772,-1775]]},{"type":"Polygon","id":36095,"arcs":[[-1863,1934,1935,1936,-1891,-1818]]},{"type":"Polygon","id":36001,"arcs":[[-1861,1937,-1935,-1862,-1678]]},{"type":"Polygon","id":55065,"arcs":[[-1921,1938,1939,-1751,-1749]]},{"type":"Polygon","id":31149,"arcs":[[1940,-1926,-1846,-1899]]},{"type":"Polygon","id":36023,"arcs":[[1941,1942,-1672,-1726,-1778,1943,1944]]},{"type":"Polygon","id":41033,"arcs":[[-1436,-1855,1945,1946,-1864]]},{"type":"Polygon","id":26093,"arcs":[[-1906,1947,1948,1949,-1786,-1742]]},{"type":"Polygon","id":26065,"arcs":[[-1950,1950,1951,-1795,-1787]]},{"type":"Polygon","id":26045,"arcs":[[-1796,-1952,1952,1953,1954,-1793]]},{"type":"Polygon","id":26015,"arcs":[[-1955,1955,1956,1957,-1718,-1794]]},{"type":"Polygon","id":26005,"arcs":[[-1719,-1958,1958,1959,1960,-1759]]},{"type":"Polygon","id":36123,"arcs":[[1961,1962,-1821,-1831]]},{"type":"Polygon","id":31051,"arcs":[[-1808,1963,1964,1965,-1913,-1810]]},{"type":"Polygon","id":25003,"arcs":[[1966,1967,1968,1969,1970,1971,-1859,-1711]]},{"type":"Polygon","id":36017,"arcs":[[-1893,1972,1973,-1944,-1777]]},{"type":"Polygon","id":25011,"arcs":[[1974,-1967,-1710,-1728,-1780,1975]]},{"type":"Polygon","id":25017,"arcs":[[1976,1977,1978,1979,1980,1981,1982,1983,1984,-1756,-1909]]},{"type":"Polygon","id":25027,"arcs":[[-1757,-1985,1985,1986,1987,1988,1989,1990,-1976,-1779]]},{"type":"Polygon","id":16031,"arcs":[[-1799,1991,1992,1993,-1868,-1922,-1769,-1419]]},{"type":"Polygon","id":19061,"arcs":[[1994,1995,1996,1997,-1815,-1753]]},{"type":"Polygon","id":55059,"arcs":[[1998,1999,2000,-1930,-1934]]},{"type":"Polygon","id":19055,"arcs":[[-1998,2001,2002,2003,-1816]]},{"type":"Polygon","id":19187,"arcs":[[-1882,2004,2005,2006,2007,-1878,-1884]]},{"type":"Polygon","id":19019,"arcs":[[-2004,2008,2009,2010,-1813]]},{"type":"Polygon","id":19013,"arcs":[[-2011,2011,2012,2013,-1888,-1890]]},{"type":"Polygon","id":36109,"arcs":[[-1943,2014,2015,2016,-1829,-1673]]},{"type":"Polygon","id":56015,"arcs":[[-1834,2017,2018,2019,2020,-1619]]},{"type":"Polygon","id":56031,"arcs":[[-2021,2021,2022,-1638,-1620]]},{"type":"Polygon","id":16007,"arcs":[[-1707,2023,2024,-1827]]},{"type":"Polygon","id":36101,"arcs":[[-1822,-1963,2025,2026,2027,2028,2029,-1856]]},{"type":"Polygon","id":36013,"arcs":[[2030,2031,2032,2033,-1803]]},{"type":"Polygon","id":19193,"arcs":[[-1876,2034,2035,2036,2037,-1806,-1871]]},{"type":"Polygon","id":19161,"arcs":[[2038,2039,2040,2041,-1873]]},{"type":"Polygon","id":19093,"arcs":[[-2042,2042,-2035,-1875]]},{"type":"Polygon","id":19025,"arcs":[[-2008,2043,2044,-2039,-1879]]},{"type":"Polygon","id":19079,"arcs":[[2045,2046,2047,-2005,-1881]]},{"type":"Polygon","id":19083,"arcs":[[-1886,2048,2049,2050,-2046]]},{"type":"Polygon","id":19075,"arcs":[[-2014,2051,2052,-2049,-1889]]},{"type":"Polygon","id":25015,"arcs":[[-1991,2053,-1968,-1975]]},{"type":"Polygon","id":36097,"arcs":[[-2017,2054,-2026,-1962,-1830]]},{"type":"Polygon","id":36009,"arcs":[[-1917,2055,2056,2057,-2031,-1802]]},{"type":"Polygon","id":31043,"arcs":[[-1807,-2038,2058,-1964]]},{"type":"Polygon","id":36003,"arcs":[[-1857,-2030,2059,2060,-2056,-1916]]},{"type":"Polygon","id":36025,"arcs":[[-1937,2061,2062,2063,2064,2065,-1973,-1892]]},{"type":"Polygon","id":17085,"arcs":[[-1940,2066,2067,2068,-1995,-1752]]},{"type":"Polygon","id":36021,"arcs":[[2069,2070,2071,-1860,-1972]]},{"type":"Polygon","id":17177,"arcs":[[2072,-2067,-1939,-1920,2073,2074]]},{"type":"Polygon","id":17201,"arcs":[[2075,2076,-2074,-1919,-1925]]},{"type":"Polygon","id":16071,"arcs":[[-1826,2077,2078,2079,-1992,-1798]]},{"type":"Polygon","id":17111,"arcs":[[2080,2081,2082,2083,2084,-1931,-2001]]},{"type":"Polygon","id":17007,"arcs":[[-1932,-2085,2085,-2076,-1924]]},{"type":"Polygon","id":17097,"arcs":[[2086,-2081,-2000,2087]]},{"type":"Polygon","id":36039,"arcs":[[2088,-2062,-1936,-1938,-2072]]},{"type":"MultiPolygon","id":25025,"arcs":[[[2089,2090,-1983,2091,-1981]],[[-1979,2092]],[[2093,-1977,-1908]]]},{"type":"Polygon","id":31139,"arcs":[[2094,2095,2096,-1911,-1915]]},{"type":"Polygon","id":31013,"arcs":[[2097,2098,-1832,-1842,-1839]]},{"type":"Polygon","id":31003,"arcs":[[-2097,2099,2100,2101,-1895,-1912]]},{"type":"Polygon","id":26161,"arcs":[[2102,2103,2104,-1948,-1905,2105]]},{"type":"Polygon","id":56007,"arcs":[[-1640,2106,2107,2108,2109,2110,-1406,-1654]]},{"type":"Polygon","id":56001,"arcs":[[-2023,2111,2112,2113,-2107,-1639]]},{"type":"Polygon","id":16041,"arcs":[[-2025,2114,-2078,-1825,-1828]]},{"type":"Polygon","id":26075,"arcs":[[-1949,-2105,2115,2116,2117,-1953,-1951]]},{"type":"Polygon","id":26025,"arcs":[[-2118,2118,2119,2120,-1956,-1954]]},{"type":"Polygon","id":26159,"arcs":[[2121,2122,2123,2124,-1960]]},{"type":"Polygon","id":26077,"arcs":[[-2121,2125,-2122,-1959,-1957]]},{"type":"Polygon","id":36007,"arcs":[[-2066,2126,2127,2128,-1945,-1974]]},{"type":"Polygon","id":36107,"arcs":[[-2129,2129,2130,2131,-2015,-1942]]},{"type":"Polygon","id":19097,"arcs":[[-2069,2132,2133,2134,-1996]]},{"type":"Polygon","id":31179,"arcs":[[-1966,2135,2136,2137,-2095,-1914]]},{"type":"MultiPolygon","id":25021,"arcs":[[[2138,2139]],[[-2091,2140,2141,2142,2143,-1986,-1984]],[[-1982,-2092]]]},{"type":"Polygon","id":25013,"arcs":[[-1990,2144,2145,2146,-1969,-2054]]},{"type":"MultiPolygon","id":25023,"arcs":[[[-2140,2147,2148,2149,2150,-2142,2151]]]},{"type":"Polygon","id":19011,"arcs":[[2152,2153,2154,-2012,-2010]]},{"type":"Polygon","id":19113,"arcs":[[-2003,2155,2156,2157,-2153,-2009]]},{"type":"Polygon","id":19171,"arcs":[[-2155,2158,2159,-2052,-2013]]},{"type":"Polygon","id":19105,"arcs":[[-1997,-2135,2160,2161,-2156,-2002]]},{"type":"Polygon","id":36015,"arcs":[[-2016,-2132,2162,2163,-2027,-2055]]},{"type":"Polygon","id":31173,"arcs":[[-2037,2164,2165,2166,-2136,-1965,-2059]]},{"type":"Polygon","id":56037,"arcs":[[-1407,-2111,2167,2168,2169,2170,-1704,-1665]]},{"type":"Polygon","id":42049,"arcs":[[2171,2172,2173,2174,-2033]]},{"type":"Polygon","id":26021,"arcs":[[2175,2176,2177,2178,-2124]]},{"type":"Polygon","id":19133,"arcs":[[2179,2180,2181,-2165,-2036]]},{"type":"Polygon","id":19127,"arcs":[[-2160,2182,2183,-2050,-2053]]},{"type":"Polygon","id":19027,"arcs":[[-2045,2184,2185,2186,2187,-2040]]},{"type":"Polygon","id":19047,"arcs":[[-2043,-2041,-2188,2188,2189,-2180]]},{"type":"Polygon","id":19015,"arcs":[[-2048,2190,2191,2192,2193,-2006]]},{"type":"Polygon","id":19073,"arcs":[[-2194,2194,2195,-2185,-2044,-2007]]},{"type":"Polygon","id":19169,"arcs":[[-2051,-2184,2196,2197,-2191,-2047]]},{"type":"Polygon","id":17141,"arcs":[[2198,2199,2200,2201,-2075,-2077]]},{"type":"Polygon","id":17015,"arcs":[[-2202,2202,2203,-2133,-2068,-2073]]},{"type":"Polygon","id":36111,"arcs":[[-2071,2204,2205,2206,-2063,-2089]]},{"type":"Polygon","id":17031,"arcs":[[-2087,2207,2208,2209,2210,2211,-2082]]},{"type":"Polygon","id":17037,"arcs":[[2212,2213,2214,2215,-2199,-2086,-2084]]},{"type":"Polygon","id":17089,"arcs":[[-2212,2216,2217,-2213,-2083]]},{"type":"Polygon","id":31075,"arcs":[[2218,2219,2220,-1836,-1853]]},{"type":"MultiPolygon","id":25005,"arcs":[[[2221,2222,2223,2224,2225,-2143,-2151]]]},{"type":"Polygon","id":31091,"arcs":[[2226,2227,2228,-2219,-1852]]},{"type":"Polygon","id":31039,"arcs":[[-2167,2229,2230,2231,2232,-2137]]},{"type":"Polygon","id":31119,"arcs":[[2233,2234,2235,-2100,-2096]]},{"type":"Polygon","id":31167,"arcs":[[-2233,2236,2237,-2234,-2138]]},{"type":"Polygon","id":31171,"arcs":[[2238,2239,2240,-2227,-1851]]},{"type":"Polygon","id":31183,"arcs":[[2241,2242,2243,2244,-1896,-2102]]},{"type":"Polygon","id":31009,"arcs":[[-1850,-1928,2245,2246,2247,-2239]]},{"type":"Polygon","id":31115,"arcs":[[2248,2249,-2246,-1927,-1941,-1898]]},{"type":"Polygon","id":31071,"arcs":[[-2245,2250,2251,-2249,-1897]]},{"type":"Polygon","id":26091,"arcs":[[2252,2253,2254,2255,-2116,-2104]]},{"type":"Polygon","id":36027,"arcs":[[-1971,2256,2257,2258,2259,-2205,-2070]]},{"type":"MultiPolygon","id":25001,"arcs":[[[2260,-2149,2261]]]},{"type":"Polygon","id":26023,"arcs":[[2262,2263,2264,2265,-2120]]},{"type":"Polygon","id":26059,"arcs":[[-2256,2266,2267,2268,-2263,-2119,-2117]]},{"type":"Polygon","id":26149,"arcs":[[-2266,2269,2270,2271,-2126]]},{"type":"Polygon","id":26027,"arcs":[[-2272,2272,2273,-2176,-2123]]},{"type":"Polygon","id":9005,"arcs":[[-2147,2274,2275,2276,-2257,-1970]]},{"type":"Polygon","id":31021,"arcs":[[2277,2278,2279,-2230,-2166,-2182]]},{"type":"Polygon","id":9003,"arcs":[[2280,2281,2282,2283,-2275,-2146]]},{"type":"Polygon","id":9013,"arcs":[[-1989,2284,2285,-2281,-2145]]},{"type":"Polygon","id":19045,"arcs":[[-2204,2286,2287,2288,2289,-2161,-2134]]},{"type":"Polygon","id":9015,"arcs":[[2290,2291,2292,-2285,-1988]]},{"type":"Polygon","id":44007,"arcs":[[-2226,2293,2294,2295,-2291,-1987,-2144]]},{"type":"Polygon","id":36105,"arcs":[[2296,2297,2298,-2064,-2207]]},{"type":"Polygon","id":6093,"arcs":[[-1575,2299,2300,2301,2302,2303,-1946,-1854]]},{"type":"Polygon","id":31069,"arcs":[[-2221,2304,2305,2306,2307,2308,-1837]]},{"type":"Polygon","id":31123,"arcs":[[-2309,2309,2310,2311,-2098,-1838]]},{"type":"Polygon","id":49005,"arcs":[[2312,2313,2314,-2079,-2115]]},{"type":"Polygon","id":31157,"arcs":[[-2312,2315,-2018,-1833,-2099]]},{"type":"Polygon","id":49033,"arcs":[[-1706,2316,2317,2318,2319,-2313,-2024]]},{"type":"Polygon","id":42015,"arcs":[[-2163,-2131,2320,2321,2322,2323,2324]]},{"type":"Polygon","id":42117,"arcs":[[-2164,-2325,2325,2326,-2028]]},{"type":"Polygon","id":49003,"arcs":[[2327,2328,2329,-1993,-2080,-2315]]},{"type":"Polygon","id":32013,"arcs":[[2330,2331,2332,-1402,-1238,-1556,2333]]},{"type":"Polygon","id":32007,"arcs":[[-1994,-2330,2334,2335,2336,2337,-2334,-1555,-1869]]},{"type":"Polygon","id":42083,"arcs":[[-2061,2338,2339,2340,2341,-2057]]},{"type":"Polygon","id":42105,"arcs":[[-2029,-2327,2342,2343,2344,-2339,-2060]]},{"type":"Polygon","id":6015,"arcs":[[-2304,2345,2346,-1865,-1947]]},{"type":"Polygon","id":42127,"arcs":[[-2065,-2299,2347,2348,2349,2350,-2127]]},{"type":"Polygon","id":42115,"arcs":[[2351,2352,-2321,-2130,-2128,-2351]]},{"type":"Polygon","id":42123,"arcs":[[-2342,2353,2354,2355,-2172,-2032,-2058]]},{"type":"Polygon","id":6049,"arcs":[[-1578,2356,2357,2358,-2300,-1574]]},{"type":"Polygon","id":32031,"arcs":[[2359,2360,2361,2362,2363,2364,2365,2366,2367,-2357,-1577,-1403,-2333]]},{"type":"Polygon","id":17043,"arcs":[[2368,2369,-2217,-2211]]},{"type":"Polygon","id":39007,"arcs":[[2370,2371,2372,2373,2374,-2174]]},{"type":"Polygon","id":19031,"arcs":[[-2162,-2290,2375,2376,2377,-2157]]},{"type":"Polygon","id":17195,"arcs":[[-2201,2378,2379,2380,2381,-2287,-2203]]},{"type":"Polygon","id":31011,"arcs":[[-2236,2382,2383,2384,-2242,-2101]]},{"type":"Polygon","id":17103,"arcs":[[-2216,2385,2386,-2379,-2200]]},{"type":"Polygon","id":19085,"arcs":[[-2190,2387,2388,2389,-2278,-2181]]},{"type":"Polygon","id":19095,"arcs":[[2390,2391,2392,2393,-2154]]},{"type":"Polygon","id":19049,"arcs":[[2394,2395,2396,-2195,-2193]]},{"type":"Polygon","id":19165,"arcs":[[2397,2398,2399,-2388,-2189]]},{"type":"Polygon","id":19009,"arcs":[[2400,2401,-2398,-2187]]},{"type":"Polygon","id":19157,"arcs":[[-2394,2402,2403,2404,-2159]]},{"type":"Polygon","id":19153,"arcs":[[-2198,2405,2406,2407,-2395,-2192]]},{"type":"Polygon","id":19099,"arcs":[[-2183,-2405,2408,2409,-2406,-2197]]},{"type":"Polygon","id":19077,"arcs":[[-2397,2410,-2401,-2186,-2196]]},{"type":"Polygon","id":19103,"arcs":[[-2378,2411,2412,2413,-2391,-2158]]},{"type":"Polygon","id":39085,"arcs":[[2414,2415,2416,-2374]]},{"type":"Polygon","id":42039,"arcs":[[-2356,2417,2418,2419,-2371,-2173]]},{"type":"Polygon","id":17161,"arcs":[[2420,2421,2422,2423,2424,-2288,-2382]]},{"type":"Polygon","id":44001,"arcs":[[2425,-2294,-2225]]},{"type":"Polygon","id":19163,"arcs":[[-2425,2426,-2376,-2289]]},{"type":"Polygon","id":44003,"arcs":[[2427,2428,2429,-2292,-2296]]},{"type":"Polygon","id":18039,"arcs":[[2430,2431,2432,2433,2434,-2273,-2271]]},{"type":"Polygon","id":18141,"arcs":[[2435,2436,2437,-2177,-2274,-2435]]},{"type":"Polygon","id":18091,"arcs":[[2438,2439,2440,-2178,-2438]]},{"type":"Polygon","id":18151,"arcs":[[2441,2442,-2264,-2269,2443]]},{"type":"Polygon","id":18087,"arcs":[[2444,-2431,-2270,-2265,-2443]]},{"type":"Polygon","id":31037,"arcs":[[-2232,2445,2446,2447,-2237]]},{"type":"Polygon","id":31141,"arcs":[[-2448,2448,2449,2450,2451,-2383,-2235,-2238]]},{"type":"Polygon","id":31053,"arcs":[[-2280,2452,2453,2454,2455,-2446,-2231]]},{"type":"Polygon","id":31117,"arcs":[[-2241,2456,2457,2458,2459,-2228]]},{"type":"Polygon","id":31005,"arcs":[[-2460,2460,-2305,-2220,-2229]]},{"type":"Polygon","id":31077,"arcs":[[2461,2462,2463,2464,-2243,-2385]]},{"type":"Polygon","id":31041,"arcs":[[-2252,2465,2466,2467,2468,2469,2470,-2247,-2250]]},{"type":"Polygon","id":31113,"arcs":[[-2248,-2471,2471,-2457,-2240]]},{"type":"Polygon","id":31175,"arcs":[[-2244,-2465,2472,-2466,-2251]]},{"type":"MultiPolygon","id":39095,"arcs":[[[2473,2474,2475,2476,-2254,2477,2478,2479,2480,2481,2482]]]},{"type":"Polygon","id":17197,"arcs":[[-2210,2483,2484,2485,2486,-2369]]},{"type":"MultiPolygon","id":39123,"arcs":[[[2487,2488,2489,2490,2491,-2474]]]},{"type":"Polygon","id":17093,"arcs":[[-2487,2492,2493,-2214,-2218,-2370]]},{"type":"Polygon","id":39051,"arcs":[[2494,2495,-2267,-2255,-2477]]},{"type":"Polygon","id":39055,"arcs":[[2496,2497,2498,-2415,-2373]]},{"type":"MultiPolygon","id":9011,"arcs":[[[-2430,2499,2500,2501,-2282,-2286,-2293]]]},{"type":"Polygon","id":18089,"arcs":[[2502,2503,2504,2505,-2484,-2209,2506]]},{"type":"Polygon","id":18127,"arcs":[[2507,-2503,2508,-2440]]},{"type":"Polygon","id":39171,"arcs":[[2509,2510,2511,-2444,-2268,-2496]]},{"type":"Polygon","id":31007,"arcs":[[-2311,2512,2513,2514,-2019,-2316]]},{"type":"Polygon","id":31177,"arcs":[[-2390,2515,2516,-2453,-2279]]},{"type":"MultiPolygon","id":44005,"arcs":[[[2517]],[[2518,-2223]]]},{"type":"MultiPolygon","id":9001,"arcs":[[[2519,2520,2521,2522,-2258,-2277]]]},{"type":"Polygon","id":56021,"arcs":[[-2020,-2515,2523,2524,2525,-2112,-2022]]},{"type":"MultiPolygon","id":44009,"arcs":[[[-2500,-2429,2526]]]},{"type":"Polygon","id":42131,"arcs":[[-2353,2527,2528,2529,-2322]]},{"type":"MultiPolygon","id":9007,"arcs":[[[2530,2531]],[[-2502,2532,2533,-2283]]]},{"type":"Polygon","id":9009,"arcs":[[-2534,2534,-2531,2535,-2520,-2276,-2284]]},{"type":"Polygon","id":42069,"arcs":[[-2350,2536,2537,-2528,-2352]]},{"type":"Polygon","id":36071,"arcs":[[-2260,2538,2539,2540,2541,2542,-2297,-2206]]},{"type":"Polygon","id":17099,"arcs":[[-2494,2543,2544,2545,2546,2547,2548,-2386,-2215]]},{"type":"Polygon","id":39035,"arcs":[[-2499,2549,2550,2551,2552,2553,-2416]]},{"type":"Polygon","id":42047,"arcs":[[2554,2555,2556,2557,-2341]]},{"type":"Polygon","id":42053,"arcs":[[-2558,2558,2559,2560,-2354]]},{"type":"Polygon","id":42121,"arcs":[[2561,2562,2563,-2418,-2355,-2561]]},{"type":"MultiPolygon","id":39043,"arcs":[[[2564,2565,2566,2567]]]},{"type":"Polygon","id":39173,"arcs":[[-2492,2568,2569,2570,2571,-2475]]},{"type":"Polygon","id":42023,"arcs":[[-2345,2572,2573,-2555,-2340]]},{"type":"Polygon","id":42103,"arcs":[[-2543,2574,2575,-2348,-2298]]},{"type":"Polygon","id":19139,"arcs":[[-2377,-2427,-2424,2576,-2412]]},{"type":"Polygon","id":42081,"arcs":[[2577,2578,2579,2580,2581,2582,-2343,-2326,-2324]]},{"type":"Polygon","id":42113,"arcs":[[-2578,-2323,-2530,2583,2584]]},{"type":"Polygon","id":17011,"arcs":[[-2549,2585,2586,2587,2588,-2380,-2387]]},{"type":"Polygon","id":17073,"arcs":[[-2589,2589,2590,2591,-2421,-2381]]},{"type":"Polygon","id":56041,"arcs":[[-2171,2592,-2317,-1705]]},{"type":"Polygon","id":18033,"arcs":[[2593,2594,2595,-2442,-2512]]},{"type":"Polygon","id":18113,"arcs":[[-2596,2596,2597,2598,-2432,-2445]]},{"type":"Polygon","id":31125,"arcs":[[2599,2600,-2462,-2384,-2452]]},{"type":"Polygon","id":36079,"arcs":[[2601,2602,-2539,-2259,-2523,2603]]},{"type":"MultiPolygon","id":25007,"arcs":[[[2604]]]},{"type":"Polygon","id":39093,"arcs":[[-2553,2605,2606,2607,-2565,2608]]},{"type":"Polygon","id":19183,"arcs":[[2609,2610,2611,2612,-2392,-2414]]},{"type":"Polygon","id":19181,"arcs":[[2613,2614,2615,2616,-2408]]},{"type":"Polygon","id":19107,"arcs":[[-2613,2617,2618,2619,-2403,-2393]]},{"type":"Polygon","id":19121,"arcs":[[2620,2621,2622,-2396,-2617]]},{"type":"Polygon","id":19123,"arcs":[[-2620,2623,2624,2625,-2409,-2404]]},{"type":"Polygon","id":19125,"arcs":[[-2626,2626,2627,-2614,-2407,-2410]]},{"type":"Polygon","id":19155,"arcs":[[-2400,2628,2629,2630,2631,2632,-2516,-2389]]},{"type":"Polygon","id":19029,"arcs":[[-2402,2633,2634,2635,-2629,-2399]]},{"type":"Polygon","id":19001,"arcs":[[-2411,-2623,2636,2637,-2634]]},{"type":"Polygon","id":39155,"arcs":[[-2420,2638,2639,2640,-2497,-2372]]},{"type":"MultiPolygon","id":39143,"arcs":[[[-2489,2641]],[[2642,-2567,2643,2644,-2569,-2491]]]},{"type":"Polygon","id":42085,"arcs":[[-2564,2645,2646,2647,-2639,-2419]]},{"type":"Polygon","id":39069,"arcs":[[-2476,-2572,2648,2649,-2510,-2495]]},{"type":"Polygon","id":18099,"arcs":[[-2434,2650,2651,2652,-2436]]},{"type":"Polygon","id":42035,"arcs":[[-2583,2653,2654,2655,-2573,-2344]]},{"type":"MultiPolygon","id":6023,"arcs":[[[-2303,2656,2657,2658,-2346]]]},{"type":"Polygon","id":17063,"arcs":[[2659,2660,-2544,-2493,-2486]]},{"type":"Polygon","id":31023,"arcs":[[-2456,2661,2662,2663,2664,-2449,-2447]]},{"type":"Polygon","id":31155,"arcs":[[2665,2666,2667,2668,-2662,-2455]]},{"type":"Polygon","id":18085,"arcs":[[-2599,2669,2670,2671,-2651,-2433]]},{"type":"Polygon","id":31033,"arcs":[[-2308,2672,2673,2674,2675,-2513,-2310]]},{"type":"Polygon","id":42031,"arcs":[[2676,2677,2678,-2562,-2560]]},{"type":"Polygon","id":49057,"arcs":[[-2314,-2320,2679,2680,-2328]]},{"type":"Polygon","id":18149,"arcs":[[-2653,2681,2682,-2439,-2437]]},{"type":"Polygon","id":42079,"arcs":[[2683,2684,2685,2686,-2584,-2529,-2538]]},{"type":"Polygon","id":39039,"arcs":[[2687,2688,2689,-2594,-2511,-2650]]},{"type":"Polygon","id":19115,"arcs":[[-2577,-2423,2690,2691,2692,-2610,-2413]]},{"type":"Polygon","id":31101,"arcs":[[2693,2694,2695,-2306,-2461,-2459]]},{"type":"Polygon","id":31111,"arcs":[[-2472,-2470,2696,2697,2698,2699,-2694,-2458]]},{"type":"MultiPolygon","id":25019,"arcs":[[[2700]]]},{"type":"Polygon","id":31143,"arcs":[[2701,2702,2703,-2450,-2665]]},{"type":"Polygon","id":31105,"arcs":[[-2676,2704,2705,-2524,-2514]]},{"type":"Polygon","id":31121,"arcs":[[-2704,2706,2707,2708,-2600,-2451]]},{"type":"Polygon","id":31093,"arcs":[[-2601,-2709,2709,2710,2711,-2463]]},{"type":"Polygon","id":31163,"arcs":[[-2464,-2712,2712,-2467,-2473]]},{"type":"Polygon","id":31055,"arcs":[[-2517,-2633,2713,-2666,-2454]]},{"type":"Polygon","id":49029,"arcs":[[2714,2715,2716,-2680,-2319]]},{"type":"Polygon","id":42065,"arcs":[[2717,2718,2719,-2677,-2559,-2557]]},{"type":"Polygon","id":6105,"arcs":[[2720,2721,2722,-2657,-2302]]},{"type":"MultiPolygon","id":36119,"arcs":[[[2723,2724,2725,-2604,-2522,2726]]]},{"type":"Polygon","id":34037,"arcs":[[2727,2728,2729,2730,-2575,-2542]]},{"type":"Polygon","id":39153,"arcs":[[2731,2732,2733,2734,-2551]]},{"type":"Polygon","id":39133,"arcs":[[-2641,2735,2736,-2732,-2550,-2498]]},{"type":"Polygon","id":17131,"arcs":[[-2592,2737,2738,2739,2740,-2691,-2422]]},{"type":"Polygon","id":17155,"arcs":[[-2548,2741,-2586]]},{"type":"Polygon","id":36087,"arcs":[[2742,2743,-2540,-2603,2744]]},{"type":"Polygon","id":42037,"arcs":[[2745,2746,2747,-2579,-2585,-2687]]},{"type":"Polygon","id":17091,"arcs":[[-2506,2748,2749,2750,2751,-2660,-2485]]},{"type":"Polygon","id":18183,"arcs":[[2752,2753,2754,-2670,-2598]]},{"type":"MultiPolygon","id":36103,"arcs":[[[2755,2756]],[[2757,2758]]]},{"type":"Polygon","id":39077,"arcs":[[-2608,2759,2760,2761,2762,-2644,-2566]]},{"type":"Polygon","id":18073,"arcs":[[-2683,2763,2764,2765,2766,-2504,-2508]]},{"type":"Polygon","id":39103,"arcs":[[-2735,2767,2768,-2606,-2552]]},{"type":"Polygon","id":18003,"arcs":[[2769,2770,2771,2772,2773,-2753,-2597,-2595,-2690]]},{"type":"Polygon","id":39147,"arcs":[[-2763,2774,2775,2776,-2570,-2645]]},{"type":"Polygon","id":42033,"arcs":[[2777,2778,2779,2780,-2718,-2556,-2574,-2656]]},{"type":"Polygon","id":49043,"arcs":[[-2593,-2170,2781,2782,2783,2784,-2715,-2318]]},{"type":"Polygon","id":42027,"arcs":[[2785,2786,2787,2788,-2778,-2655]]},{"type":"Polygon","id":42089,"arcs":[[-2731,2789,2790,2791,-2684,-2537,-2349,-2576]]},{"type":"Polygon","id":39125,"arcs":[[2792,2793,-2770,-2689]]},{"type":"Polygon","id":17175,"arcs":[[-2588,2794,2795,2796,-2590]]},{"type":"Polygon","id":31049,"arcs":[[-2696,2797,2798,-2673,-2307]]},{"type":"Polygon","id":18111,"arcs":[[2799,2800,-2749,-2505,-2767]]},{"type":"Polygon","id":34031,"arcs":[[2801,2802,-2728,-2541,-2744,2803]]},{"type":"Polygon","id":31153,"arcs":[[-2632,2804,2805,-2667,-2714]]},{"type":"Polygon","id":6035,"arcs":[[-2368,2806,2807,2808,-2358]]},{"type":"Polygon","id":6089,"arcs":[[-2359,-2809,2809,2810,-2721,-2301]]},{"type":"Polygon","id":42097,"arcs":[[2811,-2747,2812,2813,2814,2815,2816,-2581]]},{"type":"Polygon","id":18049,"arcs":[[2817,2818,2819,2820,-2652,-2672]]},{"type":"Polygon","id":31081,"arcs":[[2821,2822,2823,2824,-2707,-2703]]},{"type":"Polygon","id":18131,"arcs":[[-2821,2825,2826,-2764,-2682]]},{"type":"Polygon","id":42093,"arcs":[[-2748,-2812,-2580]]},{"type":"Polygon","id":42019,"arcs":[[-2679,2827,2828,2829,2830,-2646,-2563]]},{"type":"Polygon","id":42005,"arcs":[[-2720,2831,2832,2833,-2828,-2678]]},{"type":"Polygon","id":39063,"arcs":[[-2777,2834,2835,2836,2837,-2571]]},{"type":"Polygon","id":39137,"arcs":[[-2838,2838,2839,-2793,-2688,-2649]]},{"type":"Polygon","id":19101,"arcs":[[-2612,2840,2841,2842,-2618]]},{"type":"Polygon","id":19087,"arcs":[[-2693,2843,2844,2845,-2841,-2611]]},{"type":"Polygon","id":19179,"arcs":[[-2843,2846,2847,-2624,-2619]]},{"type":"Polygon","id":19039,"arcs":[[2848,2849,2850,-2621,-2616]]},{"type":"Polygon","id":19117,"arcs":[[-2628,2851,2852,-2849,-2615]]},{"type":"Polygon","id":19135,"arcs":[[-2848,2853,-2852,-2627,-2625]]},{"type":"Polygon","id":19129,"arcs":[[2854,2855,2856,-2805,-2631]]},{"type":"Polygon","id":19137,"arcs":[[-2636,2857,2858,-2855,-2630]]},{"type":"Polygon","id":19003,"arcs":[[-2638,2859,2860,-2858,-2635]]},{"type":"Polygon","id":19175,"arcs":[[-2622,-2851,2861,-2860,-2637]]},{"type":"Polygon","id":49011,"arcs":[[-2717,2862,2863,-2681]]},{"type":"Polygon","id":17095,"arcs":[[-2797,2864,2865,2866,-2738,-2591]]},{"type":"Polygon","id":42119,"arcs":[[2867,2868,-2786,-2654,-2582,-2817]]},{"type":"Polygon","id":17123,"arcs":[[-2742,-2547,2869,2870,-2795,-2587]]},{"type":"Polygon","id":34003,"arcs":[[2871,2872,-2804,-2743,2873]]},{"type":"Polygon","id":39099,"arcs":[[-2648,2874,2875,2876,-2736,-2640]]},{"type":"Polygon","id":42025,"arcs":[[-2792,2877,2878,2879,-2685]]},{"type":"Polygon","id":42073,"arcs":[[-2831,2880,2881,-2875,-2647]]},{"type":"Polygon","id":17105,"arcs":[[-2752,2882,2883,2884,-2545,-2661]]},{"type":"Polygon","id":34041,"arcs":[[2885,2886,2887,2888,-2790,-2730]]},{"type":"Polygon","id":34027,"arcs":[[2889,2890,2891,2892,-2886,-2729,-2803]]},{"type":"Polygon","id":49045,"arcs":[[2893,2894,2895,2896,-2335,-2329,-2864]]},{"type":"Polygon","id":19057,"arcs":[[-2741,2897,2898,-2844,-2692]]},{"type":"Polygon","id":17071,"arcs":[[2899,2900,2901,2902,-2898,-2740]]},{"type":"Polygon","id":17187,"arcs":[[-2867,2903,2904,-2900,-2739]]},{"type":"Polygon","id":39005,"arcs":[[-2769,2905,2906,2907,2908,-2760,-2607]]},{"type":"Polygon","id":31025,"arcs":[[-2857,2909,2910,2911,-2668,-2806]]},{"type":"Polygon","id":31185,"arcs":[[2912,2913,2914,-2822,-2702]]},{"type":"Polygon","id":31079,"arcs":[[-2708,-2825,2915,2916,-2710]]},{"type":"Polygon","id":31047,"arcs":[[2917,2918,2919,2920,-2697,-2469]]},{"type":"Polygon","id":31019,"arcs":[[-2711,-2917,2921,2922,2923,-2918,-2468,-2713]]},{"type":"Polygon","id":31159,"arcs":[[2924,2925,-2913,-2664]]},{"type":"Polygon","id":31109,"arcs":[[-2912,2926,2927,2928,-2925,-2663,-2669]]},{"type":"Polygon","id":18169,"arcs":[[-2755,2929,2930,2931,-2818,-2671]]},{"type":"Polygon","id":17075,"arcs":[[-2801,2932,2933,2934,-2750]]},{"type":"Polygon","id":18069,"arcs":[[-2774,2935,2936,-2930,-2754]]},{"type":"MultiPolygon","id":8123,"arcs":[[[2937]],[[2938,2939,2940,2941,2942,-2525,-2706,2943]]]},{"type":"Polygon","id":31135,"arcs":[[-2700,2944,2945,2946,2947,-2798,-2695]]},{"type":"Polygon","id":8107,"arcs":[[2948,2949,2950,2951,2952,-2109,2953]]},{"type":"Polygon","id":8057,"arcs":[[2954,-2954,-2108,-2114,2955]]},{"type":"Polygon","id":8081,"arcs":[[-2953,2956,2957,2958,-2168,-2110]]},{"type":"Polygon","id":8075,"arcs":[[2959,2960,2961,-2944,-2705,-2675,2962,2963]]},{"type":"Polygon","id":8115,"arcs":[[2964,-2963,-2674,-2799,-2948]]},{"type":"Polygon","id":49009,"arcs":[[2965,2966,-2782,-2169,-2959]]},{"type":"Polygon","id":32011,"arcs":[[2967,2968,2969,-2337]]},{"type":"Polygon","id":32015,"arcs":[[-2970,2970,2971,2972,-2331,-2338]]},{"type":"Polygon","id":8069,"arcs":[[2973,2974,-2956,-2113,-2526,-2943]]},{"type":"Polygon","id":18103,"arcs":[[-2932,2975,2976,2977,-2819]]},{"type":"Polygon","id":39033,"arcs":[[2978,2979,2980,2981,-2775,-2762]]},{"type":"Polygon","id":17053,"arcs":[[2982,2983,2984,-2883,-2751,-2935]]},{"type":"Polygon","id":39139,"arcs":[[-2909,2985,2986,-2979,-2761]]},{"type":"Polygon","id":39175,"arcs":[[-2982,2987,2988,-2835,-2776]]},{"type":"Polygon","id":39169,"arcs":[[-2734,2989,2990,-2906,-2768]]},{"type":"Polygon","id":39161,"arcs":[[-2840,2991,2992,2993,2994,-2771,-2794]]},{"type":"Polygon","id":39151,"arcs":[[-2877,2995,2996,2997,2998,-2990,-2733,-2737]]},{"type":"Polygon","id":17143,"arcs":[[-2871,2999,3000,3001,-2865,-2796]]},{"type":"Polygon","id":42095,"arcs":[[3002,3003,-2878,-2791,-2889]]},{"type":"Polygon","id":32027,"arcs":[[-2973,3004,-2360,-2332]]},{"type":"Polygon","id":42107,"arcs":[[-2880,3005,3006,3007,3008,-2813,-2746,-2686]]},{"type":"Polygon","id":39029,"arcs":[[-2882,3009,3010,3011,3012,-2996,-2876]]},{"type":"Polygon","id":17203,"arcs":[[3013,3014,-3000,-2870,-2546,-2885]]},{"type":"Polygon","id":18001,"arcs":[[3015,3016,3017,-2772,-2995]]},{"type":"Polygon","id":39003,"arcs":[[-2837,3018,3019,-2992,-2839]]},{"type":"Polygon","id":49035,"arcs":[[-2716,-2785,3020,3021,-2894,-2863]]},{"type":"MultiPolygon","id":36005,"arcs":[[[3022,3023,3024,-2725]]]},{"type":"Polygon","id":18179,"arcs":[[-3018,3025,3026,3027,-2936,-2773]]},{"type":"MultiPolygon","id":36059,"arcs":[[[-2756,3028]],[[-2758,3029,3030,3031,3032,3033]]]},{"type":"Polygon","id":18181,"arcs":[[3034,3035,3036,3037,-2765,-2827]]},{"type":"Polygon","id":18017,"arcs":[[-2820,-2978,3038,3039,-3035,-2826]]},{"type":"Polygon","id":42063,"arcs":[[-2781,3040,3041,-2832,-2719]]},{"type":"Polygon","id":34013,"arcs":[[-2802,-2873,3042,3043,3044,-2890]]},{"type":"Polygon","id":19071,"arcs":[[3045,3046,3047,-2910,-2856]]},{"type":"Polygon","id":19145,"arcs":[[3048,3049,3050,-3046,-2859]]},{"type":"Polygon","id":19173,"arcs":[[3051,3052,3053,-3049,-2861]]},{"type":"Polygon","id":19177,"arcs":[[-2846,3054,3055,3056,3057,-2842]]},{"type":"Polygon","id":19051,"arcs":[[-3058,3058,3059,3060,-2847]]},{"type":"Polygon","id":19159,"arcs":[[3061,3062,3063,-3052,-2862]]},{"type":"Polygon","id":19053,"arcs":[[3064,3065,3066,-3062,-2850]]},{"type":"Polygon","id":19185,"arcs":[[3067,3068,3069,-3065,-2853]]},{"type":"Polygon","id":19007,"arcs":[[-3061,3070,3071,-3068,-2854]]},{"type":"Polygon","id":42109,"arcs":[[-2816,3072,3073,-2868]]},{"type":"Polygon","id":36061,"arcs":[[3074,-3024]]},{"type":"Polygon","id":49047,"arcs":[[-2958,3075,3076,3077,3078,3079,3080,-2966]]},{"type":"Polygon","id":42007,"arcs":[[-2830,3081,3082,3083,-3010,-2881]]},{"type":"Polygon","id":42087,"arcs":[[3084,-2787,-2869,-3074,3085]]},{"type":"Polygon","id":49013,"arcs":[[-2967,-3081,3086,3087,3088,-2783]]},{"type":"Polygon","id":39065,"arcs":[[-2989,3089,3090,3091,3092,-3019,-2836]]},{"type":"Polygon","id":34017,"arcs":[[3093,-3043,-2872]]},{"type":"Polygon","id":19111,"arcs":[[-2899,-2903,3094,3095,-3055,-2845]]},{"type":"MultiPolygon","id":36081,"arcs":[[[3096,-3031]],[[3097,3098]],[[-3033,3099,3100,3101]]]},{"type":"Polygon","id":34019,"arcs":[[3102,3103,3104,-2887,-2893]]},{"type":"Polygon","id":42077,"arcs":[[3105,3106,3107,-3006,-2879,-3004]]},{"type":"Polygon","id":31131,"arcs":[[-3048,3108,3109,3110,-2927,-2911]]},{"type":"Polygon","id":34035,"arcs":[[3111,3112,3113,-3103,-2892]]},{"type":"Polygon","id":17113,"arcs":[[-2985,3114,3115,3116,3117,3118,-3014,-2884]]},{"type":"Polygon","id":8095,"arcs":[[-2947,3119,3120,-2964,-2965]]},{"type":"Polygon","id":17179,"arcs":[[-3119,3121,3122,3123,-3001,-3015]]},{"type":"Polygon","id":42061,"arcs":[[-3085,3124,3125,3126,3127,3128,-2788]]},{"type":"Polygon","id":42013,"arcs":[[3129,3130,-2779,-2789,-3129]]},{"type":"MultiPolygon","id":36047,"arcs":[[[3131,-3098]],[[3132,-3101]]]},{"type":"Polygon","id":18007,"arcs":[[-2766,-3038,3133,3134,3135,-2933,-2800]]},{"type":"Polygon","id":34039,"arcs":[[3136,3137,-3112,-2891,-3045]]},{"type":"Polygon","id":18015,"arcs":[[-3040,3138,3139,3140,-3036]]},{"type":"Polygon","id":39019,"arcs":[[-3013,3141,3142,3143,-2997]]},{"type":"Polygon","id":39107,"arcs":[[3144,3145,3146,3147,-3016,-2994]]},{"type":"Polygon","id":42021,"arcs":[[-3131,3148,3149,3150,-3041,-2780]]},{"type":"Polygon","id":17057,"arcs":[[-3002,-3124,3151,3152,3153,-2904,-2866]]},{"type":"Polygon","id":39117,"arcs":[[-2987,3154,3155,3156,-2980]]},{"type":"Polygon","id":39101,"arcs":[[-3157,3157,3158,-3090,-2988,-2981]]},{"type":"Polygon","id":31063,"arcs":[[-2921,3159,3160,3161,3162,3163,-2698]]},{"type":"Polygon","id":31001,"arcs":[[-2824,3164,3165,3166,-2922,-2916]]},{"type":"Polygon","id":31073,"arcs":[[3167,3168,-3160,-2920]]},{"type":"Polygon","id":31085,"arcs":[[-3164,3169,3170,3171,-2945,-2699]]},{"type":"Polygon","id":31029,"arcs":[[-3172,3172,3173,-3120,-2946]]},{"type":"Polygon","id":31059,"arcs":[[3174,3175,3176,3177,-2914]]},{"type":"Polygon","id":31151,"arcs":[[-2926,-2929,3178,3179,-3175]]},{"type":"Polygon","id":31035,"arcs":[[-3178,3180,3181,-3165,-2823,-2915]]},{"type":"Polygon","id":42067,"arcs":[[-2815,3182,3183,-3125,-3086,-3073]]},{"type":"Polygon","id":49051,"arcs":[[-3089,3184,-3021,-2784]]},{"type":"Polygon","id":31099,"arcs":[[3185,3186,3187,-2923,-3167]]},{"type":"Polygon","id":39011,"arcs":[[-3093,3188,3189,-3145,-2993,-3020]]},{"type":"Polygon","id":31137,"arcs":[[-2924,-3188,3190,3191,-3168,-2919]]},{"type":"Polygon","id":42129,"arcs":[[-3042,-3151,3192,3193,3194,3195,-2833]]},{"type":"Polygon","id":42011,"arcs":[[3196,3197,3198,3199,-3007,-3108]]},{"type":"Polygon","id":42003,"arcs":[[-2834,-3196,3200,-3082,-2829]]},{"type":"Polygon","id":39075,"arcs":[[-2999,3201,3202,3203,-2907,-2991]]},{"type":"Polygon","id":39157,"arcs":[[-3144,3204,3205,3206,-3202,-2998]]},{"type":"Polygon","id":42043,"arcs":[[-3009,3207,3208,3209,3210,3211,-2814]]},{"type":"Polygon","id":18053,"arcs":[[-3028,3212,3213,3214,3215,3216,-2976,-2931,-2937]]},{"type":"Polygon","id":36085,"arcs":[[3217]]},{"type":"Polygon","id":17067,"arcs":[[3218,3219,3220,3221,3222,-3095,-2902]]},{"type":"Polygon","id":54029,"arcs":[[3223,3224,3225,-3011,-3084]]},{"type":"Polygon","id":17109,"arcs":[[-3154,3226,-3219,-2901,-2905]]},{"type":"Polygon","id":42099,"arcs":[[3227,3228,-3183,-3212]]},{"type":"Polygon","id":29045,"arcs":[[-3223,3229,3230,3231,-3056,-3096]]},{"type":"Polygon","id":42017,"arcs":[[3232,3233,3234,3235,-3106,-3003,-2888,-3105]]},{"type":"Polygon","id":34023,"arcs":[[3236,3237,3238,-3113,-3138]]},{"type":"Polygon","id":29199,"arcs":[[-3232,3239,3240,3241,-3059,-3057]]},{"type":"Polygon","id":39081,"arcs":[[-3226,3242,3243,3244,3245,-3142,-3012]]},{"type":"Polygon","id":29197,"arcs":[[3246,3247,-3071,-3060,-3242]]},{"type":"Polygon","id":29171,"arcs":[[-3248,3248,3249,3250,-3069,-3072]]},{"type":"Polygon","id":29005,"arcs":[[-3051,3251,3252,3253,-3109,-3047]]},{"type":"Polygon","id":29129,"arcs":[[-3251,3254,3255,3256,-3066,-3070]]},{"type":"Polygon","id":29147,"arcs":[[-3054,3257,3258,3259,3260,-3252,-3050]]},{"type":"Polygon","id":49049,"arcs":[[-3088,3261,3262,3263,-2895,-3022,-3185]]},{"type":"Polygon","id":29081,"arcs":[[-3257,3264,3265,3266,3267,-3063,-3067]]},{"type":"Polygon","id":39083,"arcs":[[3268,3269,3270,-3155,-2986,-2908,-3204]]},{"type":"Polygon","id":18075,"arcs":[[3271,3272,3273,3274,-3026,-3017,-3148]]},{"type":"Polygon","id":29227,"arcs":[[-3268,3275,-3258,-3053,-3064]]},{"type":"Polygon","id":18009,"arcs":[[-3275,3276,-3213,-3027]]},{"type":"Polygon","id":18067,"arcs":[[3277,3278,-3139,-3039,-2977,-3217]]},{"type":"Polygon","id":18157,"arcs":[[-3141,3279,3280,3281,3282,-3134,-3037]]},{"type":"Polygon","id":31127,"arcs":[[3283,3284,3285,3286,-3110,-3254]]},{"type":"Polygon","id":42075,"arcs":[[-3208,-3008,-3200,3287]]},{"type":"Polygon","id":39091,"arcs":[[-3092,3288,3289,3290,-3189]]},{"type":"Polygon","id":8087,"arcs":[[-2962,3291,3292,-2939]]},{"type":"Polygon","id":31067,"arcs":[[3293,3294,3295,3296,3297,-3179,-2928]]},{"type":"Polygon","id":31097,"arcs":[[-3287,3298,-3294,-3111]]},{"type":"Polygon","id":39159,"arcs":[[3299,3300,3301,-3289,-3091,-3159,3302]]},{"type":"Polygon","id":17183,"arcs":[[-3136,3303,3304,3305,3306,-2983,-2934]]},{"type":"Polygon","id":8049,"arcs":[[3307,3308,3309,3310,3311,-2949,-2955,-2975]]},{"type":"Polygon","id":39149,"arcs":[[-3291,3312,3313,3314,-3146,-3190]]},{"type":"Polygon","id":42125,"arcs":[[-3201,-3195,3315,3316,3317,3318,3319,-3224,-3083]]},{"type":"Polygon","id":18171,"arcs":[[-3283,3320,3321,-3304,-3135]]},{"type":"Polygon","id":34025,"arcs":[[3322,3323,3324,-3238,3325]]},{"type":"Polygon","id":39031,"arcs":[[-3207,3326,3327,3328,-3269,-3203]]},{"type":"Polygon","id":42091,"arcs":[[3329,3330,3331,-3197,-3107,-3236]]},{"type":"Polygon","id":6103,"arcs":[[3332,3333,3334,3335,-2722,-2811]]},{"type":"Polygon","id":6063,"arcs":[[-2808,3336,3337,3338,-3333,-2810]]},{"type":"Polygon","id":39041,"arcs":[[-3271,3339,3340,-3303,-3158,-3156]]},{"type":"Polygon","id":8125,"arcs":[[-3174,3341,3342,3343,3344,-2960,-3121]]},{"type":"Polygon","id":8121,"arcs":[[-3345,3345,3346,3347,3348,-3292,-2961]]},{"type":"Polygon","id":17125,"arcs":[[3349,3350,3351,3352,-3152,-3123]]},{"type":"Polygon","id":39067,"arcs":[[-3246,3353,3354,-3205,-3143]]},{"type":"Polygon","id":18023,"arcs":[[-3279,3355,3356,3357,3358,-3280,-3140]]},{"type":"Polygon","id":34021,"arcs":[[-3239,-3325,3359,-3233,-3104,-3114]]},{"type":"Polygon","id":18159,"arcs":[[-3216,3360,3361,-3356,-3278]]},{"type":"Polygon","id":54009,"arcs":[[-3320,3362,-3243,-3225]]},{"type":"Polygon","id":17019,"arcs":[[-3307,3363,3364,-3115,-2984]]},{"type":"Polygon","id":29211,"arcs":[[3365,3366,3367,-3255,-3250]]},{"type":"Polygon","id":29075,"arcs":[[-3267,3368,3369,3370,-3259,-3276]]},{"type":"Polygon","id":18095,"arcs":[[3371,3372,3373,3374,-3361,-3215]]},{"type":"Polygon","id":18035,"arcs":[[-3277,-3274,3375,3376,-3372,-3214]]},{"type":"Polygon","id":18045,"arcs":[[-3282,3377,3378,3379,-3321]]},{"type":"Polygon","id":39037,"arcs":[[-3315,3380,3381,3382,3383,3384,-3272,-3147]]},{"type":"Polygon","id":31181,"arcs":[[-3182,3385,3386,3387,3388,-3186,-3166]]},{"type":"Polygon","id":31061,"arcs":[[-3389,3389,3390,3391,-3187]]},{"type":"Polygon","id":31129,"arcs":[[-3177,3392,3393,3394,-3386,-3181]]},{"type":"Polygon","id":31057,"arcs":[[3395,3396,3397,-3342,-3173,-3171]]},{"type":"Polygon","id":31065,"arcs":[[-3192,3398,3399,3400,3401,-3161,-3169]]},{"type":"Polygon","id":31169,"arcs":[[3402,3403,-3393,-3176]]},{"type":"Polygon","id":31095,"arcs":[[-3180,-3298,3404,-3403]]},{"type":"Polygon","id":31145,"arcs":[[-3402,3405,3406,3407,-3162]]},{"type":"Polygon","id":31087,"arcs":[[-3163,-3408,3408,-3396,-3170]]},{"type":"Polygon","id":31083,"arcs":[[-3392,3409,3410,-3399,-3191]]},{"type":"Polygon","id":29001,"arcs":[[-3241,3411,3412,3413,-3366,-3249,-3247]]},{"type":"Polygon","id":42041,"arcs":[[3414,3415,3416,-3228,-3211]]},{"type":"Polygon","id":17107,"arcs":[[3417,3418,3419,3420,-3350,-3122,-3118]]},{"type":"Polygon","id":42009,"arcs":[[-3128,3421,3422,3423,-3149,-3130]]},{"type":"Polygon","id":42071,"arcs":[[3424,3425,3426,3427,-3209,-3288,-3199]]},{"type":"Polygon","id":18135,"arcs":[[-3385,3428,3429,-3376,-3273]]},{"type":"Polygon","id":29103,"arcs":[[-3231,3430,3431,3432,-3412,-3240]]},{"type":"Polygon","id":42055,"arcs":[[-3417,3433,3434,3435,3436,-3126,-3184,-3229]]},{"type":"Polygon","id":42111,"arcs":[[-3424,3437,3438,3439,-3193,-3150]]},{"type":"Polygon","id":17039,"arcs":[[3440,3441,-3418,-3117]]},{"type":"Polygon","id":17169,"arcs":[[-3153,-3353,3442,3443,3444,-3220,-3227]]},{"type":"Polygon","id":17147,"arcs":[[-3365,3445,3446,3447,-3441,-3116]]},{"type":"Polygon","id":39089,"arcs":[[-3329,3448,3449,3450,3451,-3340,-3270]]},{"type":"Polygon","id":39021,"arcs":[[-3302,3452,3453,3454,-3313,-3290]]},{"type":"Polygon","id":29079,"arcs":[[-3368,3455,3456,3457,-3265,-3256]]},{"type":"Polygon","id":8013,"arcs":[[-2942,3458,3459,3460,-3308,-2974]]},{"type":"Polygon","id":31133,"arcs":[[-3286,3461,3462,3463,-3295,-3299]]},{"type":"Polygon","id":31147,"arcs":[[3464,3465,3466,3467,-3462,-3285]]},{"type":"Polygon","id":29087,"arcs":[[-3261,3468,3469,-3465,-3284,-3253]]},{"type":"Polygon","id":29111,"arcs":[[-3222,3470,3471,3472,-3431,-3230]]},{"type":"MultiPolygon","id":42029,"arcs":[[[3473,3474]],[[3475,3476,3477,-3425,-3198,-3332]]]},{"type":"Polygon","id":42133,"arcs":[[-3428,3478,3479,3480,3481,-3415,-3210]]},{"type":"Polygon","id":8103,"arcs":[[3482,-3076,-2957,-2952]]},{"type":"Polygon","id":39059,"arcs":[[3483,3484,-3327,-3206,-3355,3485]]},{"type":"Polygon","id":18057,"arcs":[[3486,3487,3488,-3357,-3362,-3375]]},{"type":"Polygon","id":18107,"arcs":[[-3359,3489,3490,3491,3492,-3378,-3281]]},{"type":"Polygon","id":17001,"arcs":[[-3445,3493,3494,3495,-3471,-3221]]},{"type":"Polygon","id":39109,"arcs":[[-3455,3496,3497,-3381,-3314]]},{"type":"Polygon","id":54069,"arcs":[[-3319,3498,3499,-3244,-3363]]},{"type":"Polygon","id":34005,"arcs":[[-3324,3500,3501,3502,3503,3504,3505,-3234,-3360]]},{"type":"Polygon","id":18011,"arcs":[[-3489,3506,3507,-3490,-3358]]},{"type":"Polygon","id":39013,"arcs":[[-3245,-3500,3508,3509,3510,-3486,-3354]]},{"type":"MultiPolygon","id":34029,"arcs":[[[3511,-3501,-3323]]]},{"type":"Polygon","id":39119,"arcs":[[-3485,3512,3513,3514,-3449,-3328]]},{"type":"Polygon","id":42057,"arcs":[[-3437,3515,3516,-3422,-3127]]},{"type":"Polygon","id":17129,"arcs":[[-3421,3517,3518,-3351]]},{"type":"Polygon","id":6007,"arcs":[[3519,3520,3521,3522,-3334,-3339]]},{"type":"Polygon","id":18165,"arcs":[[-3380,3523,3524,3525,-3305,-3322]]},{"type":"Polygon","id":42051,"arcs":[[-3440,3526,3527,3528,3529,-3316,-3194]]},{"type":"Polygon","id":39049,"arcs":[[-3452,3530,3531,3532,-3300,-3341]]},{"type":"Polygon","id":42101,"arcs":[[-3506,3533,3534,-3330,-3235]]},{"type":"Polygon","id":29061,"arcs":[[-3266,-3458,3535,3536,3537,-3369]]},{"type":"Polygon","id":29003,"arcs":[[-3371,3538,3539,3540,-3469,-3260]]},{"type":"Polygon","id":32033,"arcs":[[-2897,3541,3542,3543,3544,-2968,-2336]]},{"type":"Polygon","id":17017,"arcs":[[-3352,-3519,3545,3546,3547,-3443]]},{"type":"Polygon","id":39097,"arcs":[[3548,3549,3550,3551,-3453,-3301,-3533]]},{"type":"Polygon","id":17009,"arcs":[[-3548,3552,3553,-3494,-3444]]},{"type":"Polygon","id":8045,"arcs":[[-2951,3554,3555,3556,3557,-3077,-3483]]},{"type":"Polygon","id":18065,"arcs":[[-3430,3558,3559,3560,3561,-3373,-3377]]},{"type":"Polygon","id":42001,"arcs":[[3562,3563,-3434,-3416,-3482]]},{"type":"Polygon","id":42045,"arcs":[[-3535,3564,3565,-3474,3566,-3476,-3331]]},{"type":"Polygon","id":17115,"arcs":[[-3448,3567,3568,3569,3570,-3419,-3442]]},{"type":"Polygon","id":8014,"arcs":[[3571,3572,-3459,-2941],[-2938]]},{"type":"Polygon","id":29121,"arcs":[[-3433,3573,3574,3575,3576,3577,-3413]]},{"type":"Polygon","id":39023,"arcs":[[-3552,3578,3579,-3497,-3454]]},{"type":"Polygon","id":29115,"arcs":[[-3578,3580,3581,-3456,-3367,-3414]]},{"type":"Polygon","id":29063,"arcs":[[-3538,3582,3583,3584,-3539,-3370]]},{"type":"Polygon","id":54051,"arcs":[[3585,3586,-3509,-3499,-3318,3587]]},{"type":"Polygon","id":42059,"arcs":[[-3530,3588,3589,-3588,-3317]]},{"type":"Polygon","id":49023,"arcs":[[-3264,3590,3591,-3542,-2896]]},{"type":"Polygon","id":18177,"arcs":[[-3384,3592,3593,3594,-3559,-3429]]},{"type":"Polygon","id":20023,"arcs":[[3595,3596,3597,-3343,-3398]]},{"type":"Polygon","id":20153,"arcs":[[-3407,3598,3599,3600,-3596,-3397,-3409]]},{"type":"Polygon","id":6045,"arcs":[[-2723,-3336,3601,3602,3603,3604,-2658]]},{"type":"Polygon","id":20089,"arcs":[[3605,3606,3607,3608,3609,-3387,-3395]]},{"type":"Polygon","id":20183,"arcs":[[-3610,3610,3611,3612,-3390,-3388]]},{"type":"Polygon","id":20157,"arcs":[[3613,3614,-3606,-3394,-3404]]},{"type":"Polygon","id":20201,"arcs":[[-3297,3615,3616,3617,3618,-3614,-3405]]},{"type":"Polygon","id":20039,"arcs":[[-3401,3619,3620,3621,-3599,-3406]]},{"type":"Polygon","id":32001,"arcs":[[-2972,3622,3623,3624,-2361,-3005]]},{"type":"Polygon","id":20137,"arcs":[[3625,3626,3627,-3620,-3400,-3411]]},{"type":"Polygon","id":20147,"arcs":[[-3613,3628,3629,-3626,-3410,-3391]]},{"type":"Polygon","id":20117,"arcs":[[-3464,3630,3631,3632,-3616,-3296]]},{"type":"Polygon","id":8001,"arcs":[[-3349,3633,3634,3635,-3572,-2940,-3293]]},{"type":"Polygon","id":20013,"arcs":[[3636,3637,3638,3639,-3467]]},{"type":"Polygon","id":20131,"arcs":[[-3468,-3640,3640,3641,-3631,-3463]]},{"type":"Polygon","id":20043,"arcs":[[-3470,-3541,3642,3643,-3637,-3466]]},{"type":"MultiPolygon","id":34007,"arcs":[[[3644,3645,3646,-3504]]]},{"type":"Polygon","id":17167,"arcs":[[-3571,3647,3648,3649,3650,-3546,-3518,-3420]]},{"type":"Polygon","id":29117,"arcs":[[3651,3652,3653,-3536,-3457,-3582]]},{"type":"Polygon","id":29205,"arcs":[[-3473,3654,3655,-3574,-3432]]},{"type":"Polygon","id":18121,"arcs":[[-3493,3656,3657,3658,-3524,-3379]]},{"type":"Polygon","id":39121,"arcs":[[-3511,3659,3660,3661,-3513,-3484]]},{"type":"Polygon","id":29127,"arcs":[[-3496,3662,3663,3664,-3655,-3472]]},{"type":"Polygon","id":18059,"arcs":[[-3562,3665,3666,3667,-3487,-3374]]},{"type":"Polygon","id":39045,"arcs":[[-3451,3668,3669,3670,-3531]]},{"type":"Polygon","id":8047,"arcs":[[3671,3672,-3309,-3461]]},{"type":"Polygon","id":39127,"arcs":[[3673,3674,3675,-3669,-3450,-3515]]},{"type":"Polygon","id":18097,"arcs":[[-3668,3676,3677,3678,3679,-3507,-3488]]},{"type":"Polygon","id":8037,"arcs":[[3680,3681,3682,-3555,-2950,-3312]]},{"type":"Polygon","id":8117,"arcs":[[3683,3684,3685,-3681,-3311]]},{"type":"Polygon","id":18063,"arcs":[[-3680,3686,3687,-3491,-3508]]},{"type":"Polygon","id":39113,"arcs":[[-3580,3688,3689,3690,3691,-3382,-3498]]},{"type":"Polygon","id":39135,"arcs":[[-3692,3692,3693,-3593,-3383]]},{"type":"Polygon","id":8059,"arcs":[[-3636,3694,3695,3696,3697,3698,3699,-3672,-3460,-3573]]},{"type":"Polygon","id":8031,"arcs":[[3700,-3695,-3635]]},{"type":"MultiPolygon","id":34015,"arcs":[[[3701,3702,3703,3704,-3646]]]},{"type":"Polygon","id":17045,"arcs":[[3705,3706,3707,3708,-3306,-3526]]},{"type":"Polygon","id":17041,"arcs":[[-3709,3709,3710,-3446,-3364]]},{"type":"Polygon","id":17137,"arcs":[[-3651,3711,3712,3713,3714,-3553,-3547]]},{"type":"Polygon","id":39111,"arcs":[[-3587,3715,3716,3717,-3660,-3510]]},{"type":"Polygon","id":18133,"arcs":[[-3688,3718,3719,3720,-3657,-3492]]},{"type":"Polygon","id":8019,"arcs":[[-3700,3721,-3684,-3310,-3673]]},{"type":"Polygon","id":39057,"arcs":[[-3551,3722,3723,3724,-3689,-3579]]},{"type":"Polygon","id":17149,"arcs":[[-3715,3725,3726,3727,3728,3729,-3663,-3495,-3554]]},{"type":"MultiPolygon","id":10003,"arcs":[[[3730,3731]],[[3732,3733]],[[3734,3735,3736,3737,-3477,-3567,-3475,-3566]]]},{"type":"Polygon","id":17021,"arcs":[[-3570,3738,3739,-3648]]},{"type":"Polygon","id":29021,"arcs":[[-3585,3740,3741,3742,-3643,-3540]]},{"type":"Polygon","id":49007,"arcs":[[-3087,-3080,3743,3744,-3262]]},{"type":"Polygon","id":49039,"arcs":[[-3745,3745,3746,3747,-3591,-3263]]},{"type":"Polygon","id":39129,"arcs":[[-3671,3748,3749,3750,-3549,-3532]]},{"type":"Polygon","id":6021,"arcs":[[-3523,3751,3752,-3602,-3335]]},{"type":"Polygon","id":17139,"arcs":[[-3711,3753,3754,-3568,-3447]]},{"type":"Polygon","id":18041,"arcs":[[3755,3756,3757,-3560,-3595]]},{"type":"Polygon","id":18139,"arcs":[[-3758,3758,3759,3760,-3666,-3561]]},{"type":"Polygon","id":17171,"arcs":[[3761,-3726,-3714]]},{"type":"Polygon","id":29025,"arcs":[[-3654,3762,3763,3764,-3583,-3537]]},{"type":"MultiPolygon","id":34033,"arcs":[[[3765,3766]],[[3767,3768,-3732,3769,-3734,3770,-3704]]]},{"type":"Polygon","id":6091,"arcs":[[-2807,-2367,3771,3772,-3337]]},{"type":"Polygon","id":39115,"arcs":[[-3662,3773,3774,-3674,-3514]]},{"type":"Polygon","id":29049,"arcs":[[-3765,3775,3776,3777,-3741,-3584]]},{"type":"Polygon","id":8005,"arcs":[[-3348,3778,3779,3780,-3696,-3701,-3634]]},{"type":"Polygon","id":32019,"arcs":[[3781,3782,3783,3784,3785,-2362,-3625]]},{"type":"MultiPolygon","id":34001,"arcs":[[[3786,3787,3788,-3702,-3645,-3503]]]},{"type":"Polygon","id":18161,"arcs":[[-3694,3789,3790,-3756,-3594]]},{"type":"Polygon","id":24043,"arcs":[[-3436,3791,3792,3793,3794,3795,3796,-3516]]},{"type":"Polygon","id":24001,"arcs":[[-3517,-3797,3797,3798,3799,3800,-3438,-3423]]},{"type":"Polygon","id":24023,"arcs":[[-3801,3801,3802,3803,-3527,-3439]]},{"type":"MultiPolygon","id":24015,"arcs":[[[-3738,3804,3805,3806,-3426,-3478]]]},{"type":"Polygon","id":54061,"arcs":[[-3529,3807,3808,3809,3810,-3589]]},{"type":"Polygon","id":54077,"arcs":[[-3804,3811,3812,3813,3814,-3808,-3528]]},{"type":"MultiPolygon","id":24025,"arcs":[[[-3427,-3807,3815,3816,-3479]]]},{"type":"Polygon","id":54103,"arcs":[[-3590,-3811,3817,3818,3819,3820,-3716,-3586]]},{"type":"MultiPolygon","id":24005,"arcs":[[[-3817,3821,3822,3823,3824,3825,-3480]]]},{"type":"Polygon","id":24013,"arcs":[[-3826,3826,3827,-3563,-3481]]},{"type":"Polygon","id":24021,"arcs":[[-3828,3828,3829,3830,-3792,-3435,-3564]]},{"type":"Polygon","id":39047,"arcs":[[-3751,3831,3832,3833,-3723,-3550]]},{"type":"Polygon","id":49015,"arcs":[[-3079,3834,3835,3836,-3746,-3744]]},{"type":"Polygon","id":29041,"arcs":[[-3577,3837,3838,3839,3840,-3652,-3581]]},{"type":"Polygon","id":18145,"arcs":[[-3761,3841,3842,3843,-3677,-3667]]},{"type":"Polygon","id":54065,"arcs":[[3844,3845,3846,-3798,-3796]]},{"type":"Polygon","id":29173,"arcs":[[-3730,3847,3848,3849,-3664]]},{"type":"Polygon","id":17029,"arcs":[[-3708,3850,3851,3852,-3754,-3710]]},{"type":"Polygon","id":29137,"arcs":[[-3665,-3850,3853,3854,-3575,-3656]]},{"type":"Polygon","id":39073,"arcs":[[3855,3856,3857,-3749,-3670,-3676]]},{"type":"Polygon","id":20029,"arcs":[[-3619,3858,3859,3860,-3607,-3615]]},{"type":"Polygon","id":20085,"arcs":[[3861,3862,3863,3864,-3641,-3639]]},{"type":"Polygon","id":20005,"arcs":[[-3743,3865,3866,3867,-3862,-3638,-3644]]},{"type":"Polygon","id":17173,"arcs":[[-3755,-3853,3868,3869,3870,3871,-3739,-3569]]},{"type":"Polygon","id":54057,"arcs":[[3872,3873,-3802,-3800]]},{"type":"Polygon","id":39167,"arcs":[[-3718,3874,3875,3876,3877,-3774,-3661]]},{"type":"Polygon","id":54049,"arcs":[[-3810,3878,3879,-3818]]},{"type":"Polygon","id":18081,"arcs":[[-3844,3880,3881,3882,-3678]]},{"type":"Polygon","id":6115,"arcs":[[-3773,3883,3884,3885,-3520,-3338]]},{"type":"Polygon","id":18109,"arcs":[[-3883,3886,3887,3888,-3719,-3687,-3679]]},{"type":"Polygon","id":32029,"arcs":[[-2363,-3786]]},{"type":"Polygon","id":54003,"arcs":[[-3795,3889,3890,-3845]]},{"type":"Polygon","id":29033,"arcs":[[-3841,3891,3892,3893,-3763,-3653]]},{"type":"Polygon","id":29175,"arcs":[[-3855,3894,3895,3896,-3838,-3576]]},{"type":"Polygon","id":18167,"arcs":[[3897,3898,3899,-3706,-3525,-3659]]},{"type":"Polygon","id":18021,"arcs":[[-3721,3900,3901,3902,-3898,-3658]]},{"type":"Polygon","id":54095,"arcs":[[3903,3904,3905,-3875,-3717,-3821]]},{"type":"Polygon","id":29163,"arcs":[[3906,3907,3908,-3848,-3729,3909]]},{"type":"Polygon","id":39017,"arcs":[[3910,3911,3912,-3790,-3693,-3691]]},{"type":"Polygon","id":39165,"arcs":[[-3725,3913,3914,3915,-3911,-3690]]},{"type":"Polygon","id":6033,"arcs":[[3916,3917,3918,3919,-3603,-3753]]},{"type":"Polygon","id":8063,"arcs":[[-3598,3920,3921,3922,3923,-3346,-3344]]},{"type":"MultiPolygon","id":34011,"arcs":[[[3924,-3767,3925,-3768,-3703,-3789,3926,3927]]]},{"type":"Polygon","id":20163,"arcs":[[3928,3929,3930,3931,-3629,-3612]]},{"type":"Polygon","id":39027,"arcs":[[3932,3933,-3914,-3724,-3834,3934]]},{"type":"Polygon","id":20181,"arcs":[[-3601,3935,3936,3937,-3921,-3597]]},{"type":"Polygon","id":20193,"arcs":[[-3622,3938,3939,3940,-3936,-3600]]},{"type":"Polygon","id":20141,"arcs":[[-3609,3941,3942,3943,3944,-3929,-3611]]},{"type":"Polygon","id":20179,"arcs":[[-3628,3945,3946,-3939,-3621]]},{"type":"Polygon","id":20027,"arcs":[[3947,3948,3949,3950,-3859,-3618]]},{"type":"Polygon","id":20123,"arcs":[[-3861,3951,3952,-3942,-3608]]},{"type":"Polygon","id":20065,"arcs":[[-3932,3953,3954,-3946,-3627,-3630]]},{"type":"Polygon","id":20161,"arcs":[[3955,3956,3957,-3948,-3617,-3633]]},{"type":"Polygon","id":8035,"arcs":[[3958,3959,3960,-3697,-3781]]},{"type":"Polygon","id":8039,"arcs":[[3961,3962,-3959,-3780]]},{"type":"Polygon","id":20149,"arcs":[[-3642,-3865,3963,3964,-3956,-3632]]},{"type":"Polygon","id":8073,"arcs":[[-3924,3965,3966,3967,3968,-3962,-3779,-3347]]},{"type":"Polygon","id":8093,"arcs":[[-3699,3969,3970,3971,3972,-3685,-3722]]},{"type":"Polygon","id":39009,"arcs":[[-3878,3973,3974,3975,-3856,-3675,-3775]]},{"type":"Polygon","id":49027,"arcs":[[-3748,3976,3977,3978,-3543,-3592]]},{"type":"Polygon","id":54027,"arcs":[[-3847,3979,3980,-3873,-3799]]},{"type":"Polygon","id":29165,"arcs":[[-3742,-3778,3981,3982,3983,-3866]]},{"type":"Polygon","id":18047,"arcs":[[-3791,-3913,3984,3985,3986,-3759,-3757]]},{"type":"Polygon","id":29177,"arcs":[[-3894,3987,3988,3989,-3776,-3764]]},{"type":"Polygon","id":17135,"arcs":[[-3740,-3872,3990,3991,3992,3993,-3649]]},{"type":"Polygon","id":17117,"arcs":[[-3994,3994,3995,3996,-3712,-3650]]},{"type":"Polygon","id":6057,"arcs":[[-2366,3997,-3884,-3772]]},{"type":"Polygon","id":17061,"arcs":[[-3713,-3997,3998,3999,-3727,-3762]]},{"type":"Polygon","id":39141,"arcs":[[-3858,4000,4001,4002,4003,-3832,-3750]]},{"type":"Polygon","id":54037,"arcs":[[4004,4005,-3890,-3794]]},{"type":"Polygon","id":49019,"arcs":[[-3558,4006,4007,-3835,-3078]]},{"type":"Polygon","id":17023,"arcs":[[-3900,4008,4009,4010,4011,-3851,-3707]]},{"type":"Polygon","id":54073,"arcs":[[4012,4013,-3876,-3906]]},{"type":"Polygon","id":18119,"arcs":[[-3889,4014,4015,-3901,-3720]]},{"type":"Polygon","id":54033,"arcs":[[4016,4017,4018,4019,4020,-3819,-3880]]},{"type":"Polygon","id":51069,"arcs":[[4021,4022,4023,4024,-3980,-3846,-3891],[4025]]},{"type":"Polygon","id":29047,"arcs":[[-3777,-3990,4026,4027,-3982]]},{"type":"Polygon","id":18031,"arcs":[[-3987,4028,4029,4030,-3842,-3760]]},{"type":"Polygon","id":54091,"arcs":[[4031,-4017,-3879,-3809,-3815]]},{"type":"Polygon","id":54017,"arcs":[[-4021,4032,4033,4034,-3904,-3820]]},{"type":"Polygon","id":20087,"arcs":[[4035,4036,4037,-3863,-3868]]},{"type":"Polygon","id":20103,"arcs":[[-3984,4038,4039,4040,-4036,-3867]]},{"type":"Polygon","id":6011,"arcs":[[-3522,4041,4042,-3917,-3752]]},{"type":"Polygon","id":29195,"arcs":[[-3840,4043,4044,4045,4046,-3892]]},{"type":"Polygon","id":54107,"arcs":[[-4014,4047,4048,4049,4050,-3974,-3877]]},{"type":"Polygon","id":17013,"arcs":[[-4000,4051,4052,4053,-3910,-3728]]},{"type":"Polygon","id":39163,"arcs":[[-3976,4054,4055,4056,-4001,-3857]]},{"type":"Polygon","id":54085,"arcs":[[-4035,4057,4058,4059,-4048,-4013,-3905]]},{"type":"MultiPolygon","id":24029,"arcs":[[[-3737,4060,4061,4062,-3805]]]},{"type":"Polygon","id":8065,"arcs":[[-3686,-3973,4063,4064,-3682]]},{"type":"Polygon","id":17035,"arcs":[[-4012,4065,4066,-3869,-3852]]},{"type":"Polygon","id":39071,"arcs":[[-4004,4067,4068,4069,-3935,-3833]]},{"type":"MultiPolygon","id":24510,"arcs":[[[4070,4071]],[[4072,4073,-3823]]]},{"type":"Polygon","id":24027,"arcs":[[-3825,4074,4075,4076,-3829,-3827]]},{"type":"Polygon","id":8077,"arcs":[[4077,4078,4079,4080,-4007,-3557]]},{"type":"Polygon","id":8097,"arcs":[[-4065,4081,4082,-4078,-3556,-3683]]},{"type":"Polygon","id":10001,"arcs":[[4083,4084,4085,-4061,-3736,4086]]},{"type":"Polygon","id":18105,"arcs":[[4087,4088,4089,4090,-4015,-3888]]},{"type":"Polygon","id":18005,"arcs":[[-4031,4091,4092,4093,-3881,-3843]]},{"type":"Polygon","id":29007,"arcs":[[-3849,-3909,4094,4095,4096,-3895,-3854]]},{"type":"Polygon","id":24031,"arcs":[[4097,4098,4099,4100,-3830,-4077]]},{"type":"Polygon","id":18013,"arcs":[[-4094,4101,-4088,-3887,-3882]]},{"type":"Polygon","id":29089,"arcs":[[4102,-4044,-3839,-3897,4103]]},{"type":"Polygon","id":54023,"arcs":[[4104,4105,4106,4107,-3812,-3803,-3874]]},{"type":"MultiPolygon","id":34009,"arcs":[[[4108,-3927,-3788]]]},{"type":"Polygon","id":51107,"arcs":[[-4101,4109,4110,4111,4112,-4005,-3793,-3831]]},{"type":"Polygon","id":6061,"arcs":[[-2365,4113,4114,4115,4116,4117,-3885,-3998]]},{"type":"Polygon","id":39061,"arcs":[[-3916,4118,4119,4120,4121,4122,-3912]]},{"type":"Polygon","id":18137,"arcs":[[4123,4124,4125,4126,4127,-4029,-3986]]},{"type":"Polygon","id":18029,"arcs":[[-3985,-4123,4128,4129,-4124]]},{"type":"Polygon","id":20143,"arcs":[[-3951,4130,4131,4132,-3952,-3860]]},{"type":"Polygon","id":6101,"arcs":[[-3886,-4118,4133,4134,-4042,-3521]]},{"type":"Polygon","id":54001,"arcs":[[4135,4136,4137,-4018,-4032,-3814]]},{"type":"Polygon","id":29107,"arcs":[[4138,4139,4140,-3988,-3893,-4047]]},{"type":"Polygon","id":54093,"arcs":[[4141,-4136,-3813,-4108]]},{"type":"Polygon","id":39025,"arcs":[[4142,4143,4144,-4119,-3915,-3934,4145]]},{"type":"Polygon","id":51043,"arcs":[[-4113,4146,4147,-4022,-4006]]},{"type":"Polygon","id":17083,"arcs":[[-3996,4148,4149,-4052,-3999]]},{"type":"MultiPolygon","id":24035,"arcs":[[[4150]],[[-4086,4151,4152,4153,-4062]]]},{"type":"Polygon","id":18153,"arcs":[[-3903,4154,4155,4156,-4009,-3899]]},{"type":"Polygon","id":8051,"arcs":[[-4083,4157,4158,4159,4160,4161,4162,-4079]]},{"type":"Polygon","id":39015,"arcs":[[4163,4164,4165,-4146,-3933,-4070]]},{"type":"Polygon","id":29019,"arcs":[[-4097,4166,4167,4168,4169,-4104,-3896]]},{"type":"Polygon","id":32510,"arcs":[[4170,-4114,-2364,-3785]]},{"type":"Polygon","id":54031,"arcs":[[-4025,4171,4172,4173,-4105,-3981]]},{"type":"MultiPolygon","id":24003,"arcs":[[[4174,4175,4176,-4075,-3824,-4074,4177,-4071,4178]]]},{"type":"Polygon","id":29095,"arcs":[[-3989,-4141,4179,4180,4181,4182,-4027]]},{"type":"Polygon","id":29113,"arcs":[[-4054,4183,4184,4185,-3907]]},{"type":"Polygon","id":20061,"arcs":[[4186,4187,4188,-3949,-3958]]},{"type":"Polygon","id":8029,"arcs":[[-4163,4189,-4080]]},{"type":"Polygon","id":20105,"arcs":[[-4133,4190,4191,4192,-3943,-3953]]},{"type":"Polygon","id":20177,"arcs":[[-4038,4193,4194,4195,-3964,-3864]]},{"type":"Polygon","id":17051,"arcs":[[-3871,4196,4197,4198,4199,4200,-3991]]},{"type":"Polygon","id":17049,"arcs":[[-4067,4201,4202,-4197,-3870]]},{"type":"Polygon","id":20197,"arcs":[[-4196,4203,4204,4205,-4187,-3957,-3965]]},{"type":"Polygon","id":39079,"arcs":[[4206,4207,4208,4209,-4002,-4057]]},{"type":"Polygon","id":39105,"arcs":[[4210,4211,-4055,-3975,-4051,4212]]},{"type":"Polygon","id":51840,"arcs":[[-4026]]},{"type":"Polygon","id":20209,"arcs":[[-3983,-4028,-4183,4213,-4039]]},{"type":"Polygon","id":39131,"arcs":[[4214,4215,-4068,-4003,-4210]]},{"type":"Polygon","id":18079,"arcs":[[4216,4217,4218,-4092,-4030,-4128]]},{"type":"Polygon","id":54105,"arcs":[[4219,4220,4221,-4049,-4060]]},{"type":"Polygon","id":17033,"arcs":[[-4157,4222,4223,4224,4225,-4010]]},{"type":"Polygon","id":17079,"arcs":[[-4226,4226,4227,-4202,-4066,-4011]]},{"type":"Polygon","id":18055,"arcs":[[-4016,-4091,4228,4229,4230,4231,-4155,-3902]]},{"type":"Polygon","id":54041,"arcs":[[4232,4233,4234,4235,-4033,-4020]]},{"type":"Polygon","id":32023,"arcs":[[-2969,-3545,4236,4237,4238,4239,4240,-3623,-2971]]},{"type":"Polygon","id":29139,"arcs":[[-3908,-4186,4241,4242,4243,4244,-4095]]},{"type":"Polygon","id":21015,"arcs":[[4245,4246,4247,4248,4249,-4129,-4122]]},{"type":"Polygon","id":24011,"arcs":[[4250,4251,4252,4253,-4152,-4085]]},{"type":"Polygon","id":20109,"arcs":[[4254,4255,4256,4257,-3937,-3941]]},{"type":"Polygon","id":20199,"arcs":[[-4258,4258,4259,4260,-3922,-3938]]},{"type":"Polygon","id":20051,"arcs":[[-3945,4261,4262,4263,4264,-3930]]},{"type":"Polygon","id":20063,"arcs":[[-3947,-3955,4265,4266,4267,4268,-4255,-3940]]},{"type":"Polygon","id":20041,"arcs":[[-4189,4269,4270,4271,-4131,-3950]]},{"type":"Polygon","id":20167,"arcs":[[-4193,4272,4273,4274,-4262,-3944]]},{"type":"Polygon","id":20195,"arcs":[[-3931,-4265,4275,-4266,-3954]]},{"type":"Polygon","id":24033,"arcs":[[-4177,4276,4277,4278,4279,4280,-4098,-4076]]},{"type":"Polygon","id":8119,"arcs":[[4281,4282,-3970,-3698,-3961]]},{"type":"Polygon","id":8041,"arcs":[[-3963,-3969,4283,4284,-4282,-3960]]},{"type":"Polygon","id":21037,"arcs":[[-4145,4285,4286,-4120]]},{"type":"Polygon","id":54083,"arcs":[[-4107,4287,4288,4289,4290,-4137,-4142]]},{"type":"Polygon","id":32005,"arcs":[[-3784,4291,4292,4293,-4115,-4171]]},{"type":"Polygon","id":54097,"arcs":[[-4138,-4291,4294,-4233,-4019]]},{"type":"Polygon","id":54021,"arcs":[[-4236,4295,4296,-4058,-4034]]},{"type":"Polygon","id":51171,"arcs":[[4297,4298,4299,-4172,-4024]]},{"type":"Polygon","id":21117,"arcs":[[-4287,4300,4301,-4246,-4121]]},{"type":"Polygon","id":54035,"arcs":[[-4222,4302,4303,4304,4305,-4213,-4050]]},{"type":"Polygon","id":32021,"arcs":[[-4241,4306,4307,-3782,-3624]]},{"type":"Polygon","id":18071,"arcs":[[-4219,4308,4309,4310,-4089,-4102,-4093]]},{"type":"Polygon","id":20045,"arcs":[[-4041,4311,4312,4313,-4194,-4037]]},{"type":"Polygon","id":6017,"arcs":[[-4294,4314,4315,4316,-4116]]},{"type":"Polygon","id":29027,"arcs":[[-4096,-4245,4317,4318,-4167]]},{"type":"Polygon","id":29053,"arcs":[[-4170,4319,4320,4321,-4045,-4103]]},{"type":"MultiPolygon","id":51059,"arcs":[[[4322,4323,4324,4325,4326,4327,-4110,-4100],[4328]],[[4329]]]},{"type":"Polygon","id":8015,"arcs":[[-3972,4330,4331,-4158,-4082,-4064]]},{"type":"Polygon","id":20091,"arcs":[[-4182,4332,4333,-4312,-4040,-4214]]},{"type":"Polygon","id":39001,"arcs":[[4334,4335,4336,-4164,-4069,-4216]]},{"type":"Polygon","id":49041,"arcs":[[-3837,4337,4338,4339,-3977,-3747]]},{"type":"Polygon","id":8017,"arcs":[[-4261,4340,4341,-3966,-3923]]},{"type":"Polygon","id":54013,"arcs":[[-4297,4342,4343,4344,-4220,-4059]]},{"type":"Polygon","id":51187,"arcs":[[4345,4346,4347,-4298,-4023,-4148]]},{"type":"Polygon","id":39053,"arcs":[[4348,4349,4350,-4207,-4056,-4212]]},{"type":"Polygon","id":18115,"arcs":[[4351,-4125,-4130,-4250]]},{"type":"Polygon","id":54053,"arcs":[[-4306,4352,4353,-4349,-4211]]},{"type":"Polygon","id":17005,"arcs":[[-4201,4354,4355,-3992]]},{"type":"Polygon","id":39145,"arcs":[[-4209,4356,4357,4358,-4335,-4215]]},{"type":"Polygon","id":51061,"arcs":[[4359,4360,4361,4362,-4346,-4147,-4112]]},{"type":"Polygon","id":17119,"arcs":[[-3995,-3993,-4356,4363,4364,4365,4366,4367,-4149]]},{"type":"Polygon","id":29219,"arcs":[[4368,4369,4370,-4242,-4185]]},{"type":"MultiPolygon","id":11001,"arcs":[[[4371,4372,-4099,-4281]]]},{"type":"Polygon","id":18093,"arcs":[[-4311,4373,4374,4375,-4229,-4090]]},{"type":"Polygon","id":29183,"arcs":[[-4368,4376,4377,-4369,-4184,-4053,-4150]]},{"type":"Polygon","id":10005,"arcs":[[4378,4379,4380,4381,4382,4383,-4251,-4084]]},{"type":"Polygon","id":20169,"arcs":[[-4272,4384,4385,-4191,-4132]]},{"type":"Polygon","id":54071,"arcs":[[-4174,4386,4387,4388,4389,-4288,-4106]]},{"type":"Polygon","id":29159,"arcs":[[-4322,4390,4391,4392,4393,-4139,-4046]]},{"type":"MultiPolygon","id":24041,"arcs":[[[-4254,4394,-4153]]]},{"type":"Polygon","id":51153,"arcs":[[-4328,4395,4396,-4360,-4111],[4397,4398]]},{"type":"Polygon","id":54087,"arcs":[[-4345,4399,4400,-4303,-4221]]},{"type":"Polygon","id":29101,"arcs":[[-4394,4401,4402,-4180,-4140]]},{"type":"Polygon","id":51013,"arcs":[[4403,-4325,4404,-4323,-4373,4405]]},{"type":"Polygon","id":6003,"arcs":[[4406,4407,4408,4409,-4315,-4293]]},{"type":"Polygon","id":18155,"arcs":[[-4249,4410,4411,4412,-4126,-4352]]},{"type":"Polygon","id":29135,"arcs":[[4413,4414,4415,-4320,-4169]]},{"type":"Polygon","id":6113,"arcs":[[-4135,4416,4417,4418,-3918,-4043]]},{"type":"Polygon","id":18077,"arcs":[[-4413,4419,4420,4421,4422,-4217,-4127]]},{"type":"Polygon","id":17025,"arcs":[[-4228,4423,4424,4425,-4198,-4203]]},{"type":"Polygon","id":18083,"arcs":[[4426,4427,4428,4429,4430,-4223,-4156,-4232]]},{"type":"Polygon","id":18101,"arcs":[[-4376,4431,4432,4433,-4230]]},{"type":"Polygon","id":18027,"arcs":[[4434,4435,-4427,-4231,-4434]]},{"type":"Polygon","id":54007,"arcs":[[-4235,4436,4437,4438,-4343,-4296]]},{"type":"Polygon","id":51610,"arcs":[[-4324,-4405]]},{"type":"Polygon","id":29189,"arcs":[[-4367,4439,4440,4441,4442,4443,-4377]]},{"type":"Polygon","id":21191,"arcs":[[4444,4445,-4301,-4286,-4144,4446]]},{"type":"Polygon","id":20127,"arcs":[[-4206,4447,4448,4449,-4270,-4188]]},{"type":"Polygon","id":20053,"arcs":[[-4386,4450,4451,4452,-4273,-4192]]},{"type":"Polygon","id":20139,"arcs":[[-4314,4453,4454,4455,-4204,-4195]]},{"type":"Polygon","id":51600,"arcs":[[-4329],[-4330]]},{"type":"Polygon","id":6055,"arcs":[[4456,4457,4458,4459,4460,-3919,-4419]]},{"type":"Polygon","id":51157,"arcs":[[4461,4462,4463,-4347,-4363]]},{"type":"Polygon","id":21077,"arcs":[[4464,4465,4466,-4411,-4248]]},{"type":"Polygon","id":6097,"arcs":[[-3920,-4461,4467,4468,4469,-3604]]},{"type":"Polygon","id":17101,"arcs":[[4470,4471,-4224,-4431]]},{"type":"Polygon","id":51165,"arcs":[[-4300,4472,4473,4474,4475,-4387,-4173],[4476]]},{"type":"Polygon","id":17159,"arcs":[[-4225,-4472,4477,4478,4479,-4424,-4227]]},{"type":"Polygon","id":39087,"arcs":[[4480,4481,4482,4483,-4357,-4208,-4351]]},{"type":"Polygon","id":29037,"arcs":[[-4403,4484,4485,4486,-4333,-4181]]},{"type":"Polygon","id":51510,"arcs":[[4487,-4326,-4404]]},{"type":"Polygon","id":51139,"arcs":[[-4464,4488,4489,-4473,-4299,-4348]]},{"type":"Polygon","id":18143,"arcs":[[-4423,4490,4491,-4309,-4218]]},{"type":"Polygon","id":21023,"arcs":[[-4166,4492,4493,4494,-4447,-4143]]},{"type":"Polygon","id":17121,"arcs":[[-4426,4495,4496,4497,4498,-4199]]},{"type":"Polygon","id":21081,"arcs":[[-4302,-4446,4499,4500,4501,-4465,-4247]]},{"type":"Polygon","id":51685,"arcs":[[4502,-4398]]},{"type":"Polygon","id":18175,"arcs":[[-4492,4503,4504,4505,4506,4507,-4374,-4310]]},{"type":"Polygon","id":51683,"arcs":[[-4503,-4399]]},{"type":"Polygon","id":29510,"arcs":[[-4440,-4366,4508]]},{"type":"Polygon","id":24009,"arcs":[[4509,-4277,-4176]]},{"type":"Polygon","id":21161,"arcs":[[-4337,4510,4511,4512,-4493,-4165]]},{"type":"Polygon","id":21041,"arcs":[[4513,4514,4515,-4420,-4412,-4467]]},{"type":"Polygon","id":21089,"arcs":[[-4484,4516,4517,4518,-4358]]},{"type":"Polygon","id":17027,"arcs":[[-4200,-4499,4519,4520,-4364,-4355]]},{"type":"Polygon","id":54075,"arcs":[[-4390,4521,4522,4523,4524,-4289]]},{"type":"Polygon","id":29051,"arcs":[[-4319,4525,4526,-4414,-4168]]},{"type":"Polygon","id":20111,"arcs":[[-4456,4527,4528,4529,-4448,-4205]]},{"type":"Polygon","id":20059,"arcs":[[4530,4531,4532,-4454,-4313]]},{"type":"Polygon","id":20121,"arcs":[[-4487,4533,4534,-4531,-4334]]},{"type":"Polygon","id":54101,"arcs":[[-4295,-4290,-4525,4535,4536,-4437,-4234]]},{"type":"MultiPolygon","id":6067,"arcs":[[[4537,4538,4539,4540,-4417,-4134,-4117,-4317]]]},{"type":"Polygon","id":21223,"arcs":[[-4516,4541,4542,4543,-4421]]},{"type":"Polygon","id":21187,"arcs":[[-4502,4544,4545,4546,-4514,-4466]]},{"type":"Polygon","id":21135,"arcs":[[4547,4548,4549,-4511,-4336,-4359,-4519]]},{"type":"Polygon","id":29073,"arcs":[[-4371,4550,4551,4552,4553,4554,-4243]]},{"type":"Polygon","id":6051,"arcs":[[-3783,-4308,4555,4556,4557,4558,4559,-4407,-4292]]},{"type":"Polygon","id":29071,"arcs":[[-4378,-4444,4560,4561,4562,-4551,-4370]]},{"type":"Polygon","id":29151,"arcs":[[-4244,-4555,4563,4564,-4526,-4318]]},{"type":"Polygon","id":6005,"arcs":[[-4410,4565,4566,-4538,-4316]]},{"type":"MultiPolygon","id":24019,"arcs":[[[4567,-4252,-4384,4568,4569]]]},{"type":"Polygon","id":20171,"arcs":[[-4269,4570,4571,4572,4573,-4256]]},{"type":"Polygon","id":20101,"arcs":[[4574,4575,-4571,-4268]]},{"type":"Polygon","id":20071,"arcs":[[4576,4577,4578,4579,-4341,-4260]]},{"type":"Polygon","id":20203,"arcs":[[-4574,4580,4581,-4577,-4259,-4257]]},{"type":"Polygon","id":51047,"arcs":[[4582,4583,4584,4585,-4462,-4362]]},{"type":"Polygon","id":20135,"arcs":[[-4276,-4264,4586,4587,4588,4589,-4575,-4267]]},{"type":"Polygon","id":29141,"arcs":[[-4416,4590,4591,4592,-4391,-4321]]},{"type":"Polygon","id":20009,"arcs":[[-4453,4593,4594,4595,4596,-4274]]},{"type":"Polygon","id":8043,"arcs":[[-4285,4597,4598,4599,-4331,-3971,-4283]]},{"type":"Polygon","id":20165,"arcs":[[-4275,-4597,4600,-4587,-4263]]},{"type":"MultiPolygon","id":24017,"arcs":[[[-4279,4601,4602,4603]]]},{"type":"Polygon","id":18117,"arcs":[[-4508,4604,4605,-4432,-4375]]},{"type":"Polygon","id":54079,"arcs":[[4606,4607,-4353,-4305,4608]]},{"type":"Polygon","id":32017,"arcs":[[-3979,4609,4610,4611,4612,4613,-4237,-3544]]},{"type":"Polygon","id":8085,"arcs":[[-4162,4614,4615,4616,-4081,-4190]]},{"type":"Polygon","id":54015,"arcs":[[4617,4618,-4400,-4344,-4439]]},{"type":"Polygon","id":17163,"arcs":[[-4521,4619,4620,4621,-4441,-4509,-4365]]},{"type":"Polygon","id":51113,"arcs":[[-4586,4622,4623,-4489,-4463]]},{"type":"Polygon","id":54039,"arcs":[[-4401,-4619,4624,4625,4626,4627,4628,-4609,-4304]]},{"type":"Polygon","id":8061,"arcs":[[-4580,4629,4630,4631,4632,-3967,-4342]]},{"type":"Polygon","id":20113,"arcs":[[4633,4634,4635,4636,-4451,-4385]]},{"type":"Polygon","id":20115,"arcs":[[-4450,4637,4638,4639,-4634,-4271]]},{"type":"Polygon","id":21201,"arcs":[[-4513,4640,4641,4642,-4494]]},{"type":"Polygon","id":17191,"arcs":[[-4480,4643,4644,4645,4646,-4496,-4425]]},{"type":"Polygon","id":18019,"arcs":[[-4544,4647,4648,4649,-4504,-4491,-4422]]},{"type":"Polygon","id":54011,"arcs":[[-4354,-4608,4650,4651,-4481,-4350]]},{"type":"Polygon","id":21103,"arcs":[[4652,4653,4654,-4542,-4515,-4547]]},{"type":"Polygon","id":51091,"arcs":[[4655,4656,-4522,-4389]]},{"type":"Polygon","id":51179,"arcs":[[4657,4658,4659,4660,4661,4662,-4583,-4361,-4397]]},{"type":"Polygon","id":21097,"arcs":[[-4643,4663,4664,4665,-4500,-4445,-4495]]},{"type":"Polygon","id":49001,"arcs":[[-4340,4666,4667,4668,-4610,-3978]]},{"type":"Polygon","id":17047,"arcs":[[4669,4670,-4644,-4479]]},{"type":"Polygon","id":17185,"arcs":[[-4478,-4471,-4430,4671,4672,-4670]]},{"type":"Polygon","id":29083,"arcs":[[-4393,4673,4674,4675,-4485,-4402]]},{"type":"Polygon","id":24045,"arcs":[[4676,4677,4678,-4569,-4383]]},{"type":"Polygon","id":54067,"arcs":[[-4537,4679,4680,-4625,-4618,-4438]]},{"type":"Polygon","id":18125,"arcs":[[4681,4682,4683,-4428,-4436]]},{"type":"MultiPolygon","id":6095,"arcs":[[[4684,-4459]],[[-4541,4685,-4457,-4418]]]},{"type":"Polygon","id":29015,"arcs":[[-4593,4686,4687,4688,-4674,-4392]]},{"type":"Polygon","id":18051,"arcs":[[4689,4690,4691,4692,-4672,-4429,-4684]]},{"type":"Polygon","id":18037,"arcs":[[-4606,4693,4694,4695,4696,-4682,-4435,-4433]]},{"type":"Polygon","id":21069,"arcs":[[4697,4698,4699,-4641,-4512,-4550]]},{"type":"Polygon","id":21185,"arcs":[[-4655,4700,4701,-4648,-4543]]},{"type":"Polygon","id":20017,"arcs":[[-4530,4702,4703,-4638,-4449]]},{"type":"Polygon","id":8101,"arcs":[[4704,4705,4706,4707,4708,-4598,-4284]]},{"type":"Polygon","id":8025,"arcs":[[-4633,4709,-4705,-3968]]},{"type":"Polygon","id":20159,"arcs":[[-4637,4710,4711,-4594,-4452]]},{"type":"Polygon","id":17133,"arcs":[[4712,4713,4714,-4442,-4622]]},{"type":"Polygon","id":17189,"arcs":[[-4498,4715,4716,4717,-4620,-4520]]},{"type":"MultiPolygon","id":24037,"arcs":[[[4718,-4603,4719]]]},{"type":"Polygon","id":6009,"arcs":[[4720,4721,4722,-4566,-4409]]},{"type":"Polygon","id":49031,"arcs":[[4723,4724,-4667,-4339]]},{"type":"Polygon","id":49055,"arcs":[[-3836,4725,4726,-4724,-4338]]},{"type":"Polygon","id":29099,"arcs":[[-4715,4727,4728,4729,-4561,-4443]]},{"type":"Polygon","id":21019,"arcs":[[4730,4731,-4517,-4483,4732]]},{"type":"Polygon","id":21043,"arcs":[[-4732,4733,4734,4735,-4548,-4518]]},{"type":"Polygon","id":49037,"arcs":[[-4617,4736,4737,4738,4739,4740,4741,4742,4743,-4726,-4008]]},{"type":"Polygon","id":21209,"arcs":[[4744,4745,4746,4747,-4545,-4501,-4666]]},{"type":"Polygon","id":51660,"arcs":[[-4477]]},{"type":"Polygon","id":51079,"arcs":[[4748,4749,-4474,-4490,-4624]]},{"type":"Polygon","id":51015,"arcs":[[4750,4751,4752,4753,-4656,-4388,-4476],[4754],[4755]]},{"type":"Polygon","id":17081,"arcs":[[-4647,4756,4757,4758,-4716,-4497]]},{"type":"Polygon","id":29013,"arcs":[[-4676,4759,4760,4761,-4534,-4486]]},{"type":"Polygon","id":32009,"arcs":[[4762,-4556,-4307,-4240]]},{"type":"Polygon","id":21181,"arcs":[[-4700,4763,4764,-4664,-4642]]},{"type":"Polygon","id":8109,"arcs":[[-4600,4765,4766,4767,4768,4769,4770,-4159,-4332]]},{"type":"MultiPolygon","id":24047,"arcs":[[[4771,4772]],[[-4380,4773]],[[4774,4775,4776,4777,-4677,-4382,4778]]]},{"type":"Polygon","id":6109,"arcs":[[-4560,4779,4780,4781,-4721,-4408]]},{"type":"Polygon","id":20031,"arcs":[[-4533,4782,4783,4784,-4528,-4455]]},{"type":"Polygon","id":29131,"arcs":[[-4527,-4565,4785,4786,4787,-4591,-4415]]},{"type":"Polygon","id":18025,"arcs":[[4788,4789,4790,-4694,-4605,-4507]]},{"type":"Polygon","id":18061,"arcs":[[4791,4792,4793,4794,-4789,-4506]]},{"type":"Polygon","id":54099,"arcs":[[-4652,4795,4796,4797,4798,-4733,-4482]]},{"type":"Polygon","id":18043,"arcs":[[-4650,4799,-4792,-4505]]},{"type":"Polygon","id":51099,"arcs":[[4800,4801,4802,4803,-4659,4804]]},{"type":"Polygon","id":21205,"arcs":[[-4736,4805,4806,4807,4808,-4698,-4549]]},{"type":"Polygon","id":51137,"arcs":[[4809,4810,4811,-4749,-4623,-4585]]},{"type":"Polygon","id":20003,"arcs":[[4812,4813,-4783,-4532]]},{"type":"Polygon","id":20107,"arcs":[[-4762,4814,4815,-4813,-4535]]},{"type":"Polygon","id":21111,"arcs":[[4816,4817,4818,4819,-4793,-4800,-4649,-4702]]},{"type":"Polygon","id":51177,"arcs":[[-4663,4820,-4661,4821,4822,4823,-4810,-4584]]},{"type":"Polygon","id":54043,"arcs":[[-4607,-4629,4824,4825,4826,-4796,-4651]]},{"type":"Polygon","id":21073,"arcs":[[-4546,-4748,4827,4828,4829,-4653]]},{"type":"Polygon","id":21017,"arcs":[[4830,4831,4832,-4745,-4665,-4765]]},{"type":"Polygon","id":21211,"arcs":[[4833,4834,-4817,-4701,-4654,-4830]]},{"type":"Polygon","id":20145,"arcs":[[-4596,4835,4836,4837,-4588,-4601]]},{"type":"Polygon","id":8091,"arcs":[[-4161,4838,4839,4840,-4615]]},{"type":"Polygon","id":51630,"arcs":[[-4821,-4662]]},{"type":"MultiPolygon","id":6041,"arcs":[[[4841,-4469]]]},{"type":"Polygon","id":21011,"arcs":[[-4809,4842,4843,-4764,-4699]]},{"type":"Polygon","id":6077,"arcs":[[-4567,-4723,4844,4845,4846,4847,-4539]]},{"type":"Polygon","id":29125,"arcs":[[-4554,4848,4849,-4786,-4564]]},{"type":"MultiPolygon","id":24039,"arcs":[[[4850,4851]],[[4852,4853,4854,4855]],[[4856,4857,4858]],[[4859,-4678,-4778,4860]]]},{"type":"Polygon","id":51003,"arcs":[[-4812,4861,4862,4863,4864,-4751,-4475,-4750],[4865]]},{"type":"MultiPolygon","id":51193,"arcs":[[[4866,4867,4868,-4801,4869]]]},{"type":"Polygon","id":29029,"arcs":[[-4788,4870,4871,4872,4873,-4687,-4592]]},{"type":"Polygon","id":21127,"arcs":[[-4799,4874,4875,4876,4877,-4734,-4731]]},{"type":"Polygon","id":51017,"arcs":[[-4657,-4754,4878,4879,4880,-4523]]},{"type":"Polygon","id":8099,"arcs":[[-4579,4881,4882,4883,4884,-4630]]},{"type":"Polygon","id":54025,"arcs":[[-4881,4885,4886,4887,4888,-4680,-4536,-4524]]},{"type":"Polygon","id":21063,"arcs":[[-4878,4889,-4806,-4735]]},{"type":"Polygon","id":8027,"arcs":[[-4709,4890,-4766,-4599]]},{"type":"Polygon","id":8011,"arcs":[[-4885,4891,4892,4893,-4631]]},{"type":"Polygon","id":8089,"arcs":[[-4894,4894,-4706,-4710,-4632]]},{"type":"Polygon","id":18123,"arcs":[[4895,4896,4897,4898,-4695,-4791]]},{"type":"Polygon","id":54019,"arcs":[[-4681,-4889,4899,4900,-4626]]},{"type":"Polygon","id":20093,"arcs":[[4901,4902,4903,-4581,-4573]]},{"type":"Polygon","id":20055,"arcs":[[-4576,-4590,4904,4905,4906,-4902,-4572]]},{"type":"Polygon","id":20075,"arcs":[[-4904,4907,-4882,-4578,-4582]]},{"type":"Polygon","id":17193,"arcs":[[-4673,-4693,4908,4909,4910,-4645,-4671]]},{"type":"Polygon","id":20185,"arcs":[[-4712,4911,4912,4913,-4836,-4595]]},{"type":"Polygon","id":20083,"arcs":[[-4838,4914,4915,4916,-4905,-4589]]},{"type":"Polygon","id":17065,"arcs":[[-4911,4917,4918,4919,-4757,-4646]]},{"type":"Polygon","id":51033,"arcs":[[-4804,4920,4921,4922,4923,-4822,-4660]]},{"type":"Polygon","id":18173,"arcs":[[-4697,4924,4925,4926,4927,-4690,-4683]]},{"type":"Polygon","id":18129,"arcs":[[4928,4929,4930,4931,-4909,-4692]]},{"type":"Polygon","id":54005,"arcs":[[4932,4933,4934,-4825,-4628]]},{"type":"Polygon","id":17157,"arcs":[[-4621,-4718,4935,4936,4937,4938,-4713]]},{"type":"Polygon","id":29185,"arcs":[[-4689,4939,4940,4941,4942,-4760,-4675]]},{"type":"Polygon","id":17145,"arcs":[[-4717,-4759,4943,4944,-4936]]},{"type":"Polygon","id":29055,"arcs":[[-4563,4945,4946,4947,4948,-4552]]},{"type":"Polygon","id":21067,"arcs":[[4949,4950,4951,4952,-4746,-4833]]},{"type":"Polygon","id":29221,"arcs":[[-4730,4953,4954,-4946,-4562]]},{"type":"Polygon","id":18147,"arcs":[[-4899,4955,4956,-4925,-4696]]},{"type":"Polygon","id":21163,"arcs":[[4957,4958,-4896,-4790,-4795]]},{"type":"Polygon","id":51790,"arcs":[[-4755]]},{"type":"Polygon","id":21239,"arcs":[[-4953,4959,4960,4961,-4828,-4747]]},{"type":"Polygon","id":21173,"arcs":[[4962,4963,4964,-4831,-4844]]},{"type":"Polygon","id":20079,"arcs":[[4965,4966,4967,-4635,-4640]]},{"type":"Polygon","id":20073,"arcs":[[-4529,-4785,4968,4969,4970,4971,-4703]]},{"type":"Polygon","id":20155,"arcs":[[-4636,-4968,4972,4973,4974,-4912,-4711]]},{"type":"Polygon","id":18163,"arcs":[[-4928,4975,-4929,-4691]]},{"type":"Polygon","id":29161,"arcs":[[-4949,4976,4977,4978,-4849,-4553]]},{"type":"Polygon","id":49017,"arcs":[[-4744,4979,4980,-4668,-4725,-4727]]},{"type":"Polygon","id":51057,"arcs":[[4981,4982,-4921,-4803,4983]]},{"type":"Polygon","id":8113,"arcs":[[-4841,4984,4985,-4737,-4616]]},{"type":"Polygon","id":51109,"arcs":[[-4824,4986,4987,4988,-4862,-4811]]},{"type":"Polygon","id":49021,"arcs":[[-4981,4989,4990,-4611,-4669]]},{"type":"Polygon","id":21215,"arcs":[[4991,4992,4993,-4818,-4835]]},{"type":"Polygon","id":8053,"arcs":[[-4771,4994,4995,4996,4997,-4839,-4160]]},{"type":"Polygon","id":21005,"arcs":[[-4962,4998,4999,5000,-4992,-4834,-4829]]},{"type":"Polygon","id":17055,"arcs":[[-4920,5001,5002,5003,-4944,-4758]]},{"type":"Polygon","id":51159,"arcs":[[5004,5005,5006,-4868]]},{"type":"Polygon","id":29186,"arcs":[[-4939,5007,5008,-4728,-4714]]},{"type":"Polygon","id":21029,"arcs":[[5009,5010,-4819,-4994]]},{"type":"Polygon","id":21175,"arcs":[[-4877,5011,5012,5013,5014,-4807,-4890]]},{"type":"Polygon","id":21049,"arcs":[[5015,5016,5017,-4950,-4832,-4965]]},{"type":"MultiPolygon","id":6013,"arcs":[[[-4847,5018,5019]]]},{"type":"Polygon","id":51820,"arcs":[[-4756]]},{"type":"Polygon","id":20015,"arcs":[[-4704,-4972,5020,5021,5022,-4966,-4639]]},{"type":"Polygon","id":20047,"arcs":[[-4914,5023,5024,5025,-4915,-4837]]},{"type":"Polygon","id":51163,"arcs":[[5026,5027,5028,5029,-4879,-4753,5030],[5031],[5032]]},{"type":"Polygon","id":29187,"arcs":[[-5009,5033,5034,5035,-4954,-4729]]},{"type":"Polygon","id":6099,"arcs":[[5036,5037,5038,-4845,-4722,-4782]]},{"type":"Polygon","id":29085,"arcs":[[-4874,5039,5040,-4940,-4688]]},{"type":"Polygon","id":51540,"arcs":[[-4866]]},{"type":"Polygon","id":29217,"arcs":[[-4943,5041,5042,5043,5044,-4815,-4761]]},{"type":"Polygon","id":21165,"arcs":[[-4808,-5015,5045,5046,-4963,-4843]]},{"type":"Polygon","id":51125,"arcs":[[5047,5048,5049,-5031,-4752,-4865]]},{"type":"Polygon","id":21027,"arcs":[[5050,5051,5052,5053,-4897,-4959]]},{"type":"Polygon","id":20207,"arcs":[[5054,5055,-4969,-4784]]},{"type":"Polygon","id":20001,"arcs":[[5056,5057,-5055,-4814]]},{"type":"Polygon","id":20011,"arcs":[[-5045,5058,5059,-5057,-4816]]},{"type":"MultiPolygon","id":51001,"arcs":[[[5060,-4854]],[[5061,-4858]],[[-4851,5062]],[[5063,5064,5065,5066,-4776,5067]],[[-4772,5068]]]},{"type":"Polygon","id":54045,"arcs":[[-4935,5069,5070,-4826]]},{"type":"Polygon","id":51133,"arcs":[[5071,-5005,-4867,5072]]},{"type":"Polygon","id":29169,"arcs":[[-4850,-4979,5073,5074,-4871,-4787]]},{"type":"Polygon","id":8055,"arcs":[[-4708,5075,5076,5077,-4767,-4891]]},{"type":"Polygon","id":51085,"arcs":[[-4924,5078,5079,5080,5081,-4987,-4823]]},{"type":"Polygon","id":51065,"arcs":[[5082,5083,-4863,-4989,5084]]},{"type":"Polygon","id":21093,"arcs":[[5085,5086,5087,5088,-5051,-4958,-4794,-4820,-5011]]},{"type":"Polygon","id":21113,"arcs":[[5089,5090,5091,-4960,-4952]]},{"type":"Polygon","id":21115,"arcs":[[5092,5093,5094,-5012,-4876]]},{"type":"Polygon","id":20069,"arcs":[[-4917,5095,5096,5097,-4906]]},{"type":"Polygon","id":21091,"arcs":[[-5054,5098,5099,-4956,-4898]]},{"type":"Polygon","id":54081,"arcs":[[-4627,-4901,5100,5101,5102,-4933]]},{"type":"Polygon","id":21179,"arcs":[[-5001,5103,5104,5105,-5086,-5010,-4993]]},{"type":"Polygon","id":54059,"arcs":[[5106,5107,5108,5109,5110,-4797,-4827,-5071]]},{"type":"Polygon","id":21101,"arcs":[[-4927,5111,5112,5113,5114,-4930,-4976]]},{"type":"Polygon","id":51097,"arcs":[[-4983,5115,5116,5117,5118,-4922]]},{"type":"Polygon","id":8111,"arcs":[[-4998,5119,5120,-4985,-4840]]},{"type":"Polygon","id":21167,"arcs":[[-5092,5121,5122,5123,-4999,-4961]]},{"type":"Polygon","id":8079,"arcs":[[5124,5125,-4995,-4770]]},{"type":"Polygon","id":21159,"arcs":[[-4798,-5111,5126,5127,-5093,-4875]]},{"type":"Polygon","id":51005,"arcs":[[-5030,5128,5129,5130,-4886,-4880],[5131]]},{"type":"Polygon","id":17077,"arcs":[[-5004,5132,5133,5134,-4937,-4945]]},{"type":"Polygon","id":21197,"arcs":[[-5047,5135,5136,5137,-5016,-4964]]},{"type":"Polygon","id":21059,"arcs":[[5138,5139,-5112,-4926,-4957,-5100]]},{"type":"Polygon","id":21151,"arcs":[[5140,5141,5142,5143,-5090,-4951,-5018]]},{"type":"Polygon","id":17059,"arcs":[[-4932,5144,5145,5146,-4918,-4910]]},{"type":"Polygon","id":21229,"arcs":[[-5124,5147,5148,-5104,-5000]]},{"type":"Polygon","id":20057,"arcs":[[-5026,5149,5150,5151,-5096,-4916]]},{"type":"Polygon","id":20173,"arcs":[[-5023,5152,5153,-4973,-4967]]},{"type":"Polygon","id":17165,"arcs":[[-5147,5154,5155,5156,-5002,-4919]]},{"type":"Polygon","id":51101,"arcs":[[-5119,5157,5158,-5079,-4923]]},{"type":"Polygon","id":29059,"arcs":[[-4873,5159,5160,5161,5162,-5040]]},{"type":"MultiPolygon","id":6001,"arcs":[[[-4846,-5039,5163,5164,-5019]]]},{"type":"Polygon","id":51075,"arcs":[[5165,5166,5167,-5085,-4988,-5082]]},{"type":"Polygon","id":29157,"arcs":[[-5135,5168,5169,5170,5171,-5034,-5008,-4938]]},{"type":"Polygon","id":29039,"arcs":[[5172,5173,5174,-5042,-4942]]},{"type":"Polygon","id":6043,"arcs":[[5175,5176,-4781]]},{"type":"Polygon","id":21225,"arcs":[[5177,5178,5179,-5145,-4931,-5115]]},{"type":"Polygon","id":29105,"arcs":[[-5075,5180,5181,5182,-5160,-4872]]},{"type":"Polygon","id":8033,"arcs":[[-5121,5183,-4738,-4986]]},{"type":"Polygon","id":21153,"arcs":[[-5095,5184,5185,5186,5187,-5013]]},{"type":"Polygon","id":54089,"arcs":[[5188,5189,-5101,-4900,-4888,5190]]},{"type":"Polygon","id":17199,"arcs":[[-5157,5191,5192,-5133,-5003]]},{"type":"Polygon","id":21237,"arcs":[[-5188,5193,5194,-5136,-5046,-5014]]},{"type":"Polygon","id":21065,"arcs":[[-5138,5195,5196,-5141,-5017]]},{"type":"MultiPolygon","id":51103,"arcs":[[[5197,-5006,-5072,5198]]]},{"type":"Polygon","id":8105,"arcs":[[-4769,5199,5200,5201,-5125]]},{"type":"MultiPolygon","id":6075,"arcs":[[[5202,5203]]]},{"type":"Polygon","id":29167,"arcs":[[-5041,-5163,5204,5205,-5173,-4941]]},{"type":"Polygon","id":21079,"arcs":[[-5144,5206,5207,5208,-5122,-5091]]},{"type":"Polygon","id":20151,"arcs":[[-4975,5209,5210,5211,-5024,-4913]]},{"type":"Polygon","id":51580,"arcs":[[-5132]]},{"type":"Polygon","id":51009,"arcs":[[5212,5213,5214,5215,-5027,-5050]]},{"type":"Polygon","id":8071,"arcs":[[-4893,5216,5217,5218,5219,-5076,-4707,-4895]]},{"type":"Polygon","id":51023,"arcs":[[5220,5221,5222,-5129,-5029]]},{"type":"Polygon","id":51678,"arcs":[[-5032]]},{"type":"Polygon","id":29065,"arcs":[[-4948,5223,5224,5225,5226,-4977]]},{"type":"Polygon","id":54109,"arcs":[[5227,5228,-5107,-5070,-4934,-5103]]},{"type":"Polygon","id":51029,"arcs":[[5229,5230,5231,-5048,-4864,-5084]]},{"type":"Polygon","id":6039,"arcs":[[-4559,5232,5233,-5176,-4780]]},{"type":"MultiPolygon","id":51119,"arcs":[[[5234,-5116,-4982,5235]]]},{"type":"Polygon","id":51530,"arcs":[[-5033]]},{"type":"Polygon","id":21071,"arcs":[[-5128,5236,5237,-5185,-5094]]},{"type":"Polygon","id":8003,"arcs":[[-5078,5238,5239,-5200,-4768]]},{"type":"Polygon","id":51049,"arcs":[[-5168,5240,5241,5242,-5230,-5083]]},{"type":"Polygon","id":21195,"arcs":[[5243,5244,5245,5246,5247,-5237,-5127,-5110]]},{"type":"Polygon","id":29093,"arcs":[[-5036,5248,5249,5250,-5224,-4947,-4955]]},{"type":"Polygon","id":20187,"arcs":[[5251,5252,5253,5254,-4883,-4908]]},{"type":"Polygon","id":21183,"arcs":[[-5053,5255,5256,5257,5258,-5139,-5099]]},{"type":"Polygon","id":20067,"arcs":[[5259,5260,-5252,-4903]]},{"type":"Polygon","id":20081,"arcs":[[-5098,5261,5262,5263,-5260,-4907]]},{"type":"Polygon","id":20097,"arcs":[[-5212,5264,5265,5266,-5150,-5025]]},{"type":"Polygon","id":20095,"arcs":[[-5154,5267,5268,5269,-5210,-4974]]},{"type":"Polygon","id":20205,"arcs":[[5270,5271,5272,-4970,-5056]]},{"type":"Polygon","id":20133,"arcs":[[-5060,5273,5274,5275,-5271,-5058]]},{"type":"Polygon","id":21123,"arcs":[[5276,5277,5278,5279,-5087,-5106]]},{"type":"Polygon","id":21155,"arcs":[[-5149,5280,5281,5282,-5277,-5105]]},{"type":"Polygon","id":54063,"arcs":[[-5131,5283,5284,-5191,-4887]]},{"type":"Polygon","id":21129,"arcs":[[-5195,5285,5286,5287,-5196,-5137]]},{"type":"Polygon","id":21021,"arcs":[[-5209,5288,5289,-5281,-5148,-5123]]},{"type":"Polygon","id":51087,"arcs":[[5290,5291,5292,5293,5294,5295,-5166,-5081]]},{"type":"Polygon","id":6081,"arcs":[[5296,5297,5298,5299,-5203]]},{"type":"Polygon","id":21025,"arcs":[[-5187,5300,5301,5302,-5286,-5194]]},{"type":"Polygon","id":51145,"arcs":[[5303,5304,-5241,-5167]]},{"type":"Polygon","id":21149,"arcs":[[-5259,5305,5306,5307,-5113,-5140]]},{"type":"Polygon","id":20037,"arcs":[[-5044,5308,5309,5310,5311,-5274,-5059]]},{"type":"Polygon","id":51045,"arcs":[[5312,5313,5314,-5284,-5130,-5223]]},{"type":"Polygon","id":8023,"arcs":[[-5220,5315,5316,5317,-5239,-5077]]},{"type":"Polygon","id":29011,"arcs":[[-5175,5318,5319,-5309,-5043]]},{"type":"Polygon","id":21233,"arcs":[[5320,5321,5322,-5178,-5114,-5308]]},{"type":"Polygon","id":29123,"arcs":[[-5172,5323,5324,-5249,-5035]]},{"type":"Polygon","id":8009,"arcs":[[-5255,5325,5326,5327,-5217,-4892,-4884]]},{"type":"Polygon","id":8083,"arcs":[[5328,5329,-4739,-5184]]},{"type":"Polygon","id":8067,"arcs":[[-4997,5330,5331,-5329,-5120]]},{"type":"Polygon","id":6047,"arcs":[[-5234,5332,5333,5334,-5037,-5177]]},{"type":"Polygon","id":21137,"arcs":[[5335,5336,5337,-5289,-5208]]},{"type":"Polygon","id":51127,"arcs":[[5338,5339,5340,-5291,-5080,-5159]]},{"type":"Polygon","id":21085,"arcs":[[-5089,5341,5342,5343,-5256,-5052]]},{"type":"Polygon","id":51019,"arcs":[[5344,5345,5346,5347,5348,-5221,-5028,-5216],[5349]]},{"type":"Polygon","id":49053,"arcs":[[5350,5351,-4612,-4991]]},{"type":"Polygon","id":20049,"arcs":[[-5273,5352,5353,5354,-5021,-4971]]},{"type":"Polygon","id":29179,"arcs":[[5355,5356,5357,-5225,-5251]]},{"type":"Polygon","id":29031,"arcs":[[5358,5359,5360,5361,5362,-5170]]},{"type":"Polygon","id":29215,"arcs":[[-4978,-5227,5363,5364,5365,5366,-5181,-5074]]},{"type":"Polygon","id":17069,"arcs":[[-5146,-5180,5367,5368,5369,-5155]]},{"type":"Polygon","id":17151,"arcs":[[-5370,5370,5371,5372,-5156]]},{"type":"Polygon","id":51760,"arcs":[[5373,-5295]]},{"type":"Polygon","id":17087,"arcs":[[-5373,5374,5375,5376,-5192]]},{"type":"Polygon","id":17181,"arcs":[[-5193,-5377,5377,5378,-5359,-5169,-5134]]},{"type":"MultiPolygon","id":51073,"arcs":[[[5379,5380,5381,-5117,-5235]]]},{"type":"Polygon","id":29017,"arcs":[[-5363,5382,5383,-5324,-5171]]},{"type":"Polygon","id":54055,"arcs":[[-5190,5384,5385,5386,5387,-5228,-5102]]},{"type":"Polygon","id":6019,"arcs":[[5388,5389,5390,5391,5392,-5333,-5233,-4558]]},{"type":"Polygon","id":29057,"arcs":[[-5206,5393,5394,5395,-5319,-5174]]},{"type":"Polygon","id":21109,"arcs":[[-5288,5396,5397,5398,5399,-5142,-5197]]},{"type":"Polygon","id":21107,"arcs":[[5400,5401,5402,-5321,-5307]]},{"type":"MultiPolygon","id":51041,"arcs":[[[-5374,-5294,5403,5404,5405,5406,5407,5408,5409,5410,-5304,-5296]]]},{"type":"Polygon","id":51011,"arcs":[[5411,5412,5413,-5213,-5049,-5232]]},{"type":"MultiPolygon","id":51131,"arcs":[[[5414,-5065]]]},{"type":"Polygon","id":21045,"arcs":[[-5338,5415,5416,5417,5418,-5282,-5290]]},{"type":"Polygon","id":54047,"arcs":[[-5388,5419,5420,-5108,-5229]]},{"type":"Polygon","id":21055,"arcs":[[-5323,5421,5422,5423,-5368,-5179]]},{"type":"Polygon","id":49025,"arcs":[[-4980,-4743,5424,5425,-5351,-4990]]},{"type":"Polygon","id":21189,"arcs":[[-5303,5426,5427,-5397,-5287]]},{"type":"Polygon","id":21203,"arcs":[[-5400,5428,5429,-5336,-5207,-5143]]},{"type":"Polygon","id":51027,"arcs":[[-5421,5430,5431,5432,-5244,-5109]]},{"type":"MultiPolygon","id":51115,"arcs":[[[-5381,5433]]]},{"type":"Polygon","id":21119,"arcs":[[-5186,-5238,-5248,5434,5435,-5301]]},{"type":"Polygon","id":51007,"arcs":[[-5411,5436,5437,5438,-5242,-5305]]},{"type":"Polygon","id":51036,"arcs":[[5439,5440,-5292,-5341]]},{"type":"Polygon","id":29225,"arcs":[[-5183,5441,5442,5443,5444,-5161]]},{"type":"Polygon","id":6085,"arcs":[[-5038,-5335,5445,5446,-5298,5447,-5164]]},{"type":"Polygon","id":21217,"arcs":[[-5283,-5419,5448,5449,-5278]]},{"type":"Polygon","id":29229,"arcs":[[-5367,5450,-5442,-5182]]},{"type":"Polygon","id":51071,"arcs":[[-5315,5451,5452,5453,-5385,-5189,-5285]]},{"type":"Polygon","id":20035,"arcs":[[-5355,5454,5455,5456,5457,-5022]]},{"type":"Polygon","id":20191,"arcs":[[-5458,5458,5459,5460,-5268,-5153]]},{"type":"Polygon","id":20119,"arcs":[[-5152,5461,5462,5463,-5262,-5097]]},{"type":"Polygon","id":20025,"arcs":[[-5267,5464,5465,5466,-5462,-5151]]},{"type":"Polygon","id":20007,"arcs":[[-5270,5467,5468,5469,5470,-5265,-5211]]},{"type":"Polygon","id":21087,"arcs":[[-5450,5471,5472,5473,-5279]]},{"type":"Polygon","id":51680,"arcs":[[-5215,5474,-5345]]},{"type":"Polygon","id":6027,"arcs":[[-4763,-4239,5475,5476,5477,5478,-5389,-4557]]},{"type":"MultiPolygon","id":51095,"arcs":[[[5479,5480,5481,5482,-5440,-5340,5483,5484,5485]]]},{"type":"Polygon","id":21099,"arcs":[[-5280,-5474,5486,5487,5488,-5342,-5088]]},{"type":"Polygon","id":21193,"arcs":[[-5436,5489,5490,5491,5492,-5427,-5302]]},{"type":"Polygon","id":51031,"arcs":[[-5414,5493,5494,5495,-5346,-5475,-5214]]},{"type":"Polygon","id":29077,"arcs":[[-5162,-5445,5496,5497,-5394,-5205]]},{"type":"Polygon","id":21139,"arcs":[[-5424,5498,5499,5500,5501,-5371,-5369]]},{"type":"Polygon","id":29203,"arcs":[[-5358,5502,5503,5504,-5364,-5226]]},{"type":"Polygon","id":8007,"arcs":[[-5126,-5202,5505,5506,5507,-5331,-4996]]},{"type":"Polygon","id":51161,"arcs":[[-5349,5508,5509,5510,-5313,-5222],[5511,5512]]},{"type":"Polygon","id":21177,"arcs":[[5513,5514,5515,5516,-5401,-5306,-5258]]},{"type":"Polygon","id":51147,"arcs":[[-5243,-5439,5517,5518,5519,-5412,-5231]]},{"type":"Polygon","id":8021,"arcs":[[-5201,-5240,-5318,5520,5521,-5506]]},{"type":"Polygon","id":21031,"arcs":[[5522,5523,-5514,-5257,-5344,5524]]},{"type":"Polygon","id":20129,"arcs":[[5525,5526,5527,-5326,-5254]]},{"type":"Polygon","id":20189,"arcs":[[-5264,5528,5529,-5526,-5253,-5261]]},{"type":"Polygon","id":20175,"arcs":[[-5464,5530,5531,-5529,-5263]]},{"type":"Polygon","id":20125,"arcs":[[-5272,-5276,5532,5533,5534,5535,-5353]]},{"type":"Polygon","id":20077,"arcs":[[5536,5537,-5468,-5269,-5461]]},{"type":"Polygon","id":20033,"arcs":[[5538,5539,-5465,-5266,-5471]]},{"type":"Polygon","id":20099,"arcs":[[-5312,5540,5541,5542,-5533,-5275]]},{"type":"Polygon","id":21033,"arcs":[[-5403,5543,5544,5545,-5422,-5322]]},{"type":"MultiPolygon","id":51199,"arcs":[[[5546,5547,5548,5549,-5481,5550,-5485]]]},{"type":"Polygon","id":29097,"arcs":[[-5396,5551,5552,5553,-5310,-5320]]},{"type":"Polygon","id":51121,"arcs":[[5554,5555,5556,5557,-5452,-5314,-5511]]},{"type":"Polygon","id":51515,"arcs":[[-5350]]},{"type":"Polygon","id":21051,"arcs":[[-5493,5558,5559,5560,5561,-5398,-5428]]},{"type":"Polygon","id":21199,"arcs":[[5562,5563,5564,-5416,-5337,-5430,5565]]},{"type":"Polygon","id":20021,"arcs":[[-5554,5566,5567,5568,-5541,-5311]]},{"type":"Polygon","id":21061,"arcs":[[-5489,5569,5570,-5525,-5343]]},{"type":"Polygon","id":51770,"arcs":[[5571,-5513]]},{"type":"Polygon","id":17127,"arcs":[[-5502,5572,5573,-5375,-5372]]},{"type":"Polygon","id":51185,"arcs":[[-5387,5574,5575,5576,-5431,-5420]]},{"type":"Polygon","id":17003,"arcs":[[5577,5578,5579,5580,-5360,-5379]]},{"type":"Polygon","id":21125,"arcs":[[-5562,5581,5582,5583,-5566,-5429,-5399]]},{"type":"Polygon","id":17153,"arcs":[[-5376,-5574,5584,5585,-5578,-5378]]},{"type":"Polygon","id":51775,"arcs":[[-5572,-5512]]},{"type":"Polygon","id":21131,"arcs":[[5586,5587,-5559,-5492]]},{"type":"Polygon","id":51670,"arcs":[[5588,-5405,5589]]},{"type":"Polygon","id":29223,"arcs":[[-5384,5590,5591,5592,-5356,-5250,-5325]]},{"type":"Polygon","id":51149,"arcs":[[5593,5594,5595,5596,5597,-5406,-5589]]},{"type":"Polygon","id":51830,"arcs":[[5598,-5486,-5551,-5480]]},{"type":"Polygon","id":21001,"arcs":[[-5418,5599,5600,5601,-5472,-5449]]},{"type":"Polygon","id":51051,"arcs":[[5602,5603,-5245,-5433]]},{"type":"Polygon","id":20019,"arcs":[[-5536,5604,5605,-5455,-5354]]},{"type":"Polygon","id":51021,"arcs":[[5606,5607,5608,-5575,-5386,-5454]]},{"type":"Polygon","id":51570,"arcs":[[5609,-5408]]},{"type":"Polygon","id":51135,"arcs":[[5610,5611,-5518,-5438,5612]]},{"type":"Polygon","id":29109,"arcs":[[-5498,5613,5614,5615,5616,-5552,-5395]]},{"type":"Polygon","id":6087,"arcs":[[5617,5618,5619,-5299,-5447]]},{"type":"Polygon","id":51053,"arcs":[[5620,-5597,5621,5622,5623,-5613,-5437,-5410]]},{"type":"Polygon","id":21133,"arcs":[[-5247,5624,5625,-5490,-5435]]},{"type":"Polygon","id":29201,"arcs":[[5626,5627,5628,-5361,-5581]]},{"type":"Polygon","id":51037,"arcs":[[5629,5630,5631,-5494,-5413,-5520]]},{"type":"Polygon","id":51155,"arcs":[[5632,-5556,5633,5634,5635,-5607,-5453,-5558]]},{"type":"Polygon","id":51730,"arcs":[[-5621,-5409,-5610,-5407,-5598]]},{"type":"Polygon","id":51181,"arcs":[[5636,5637,5638,-5595,5639]]},{"type":"Polygon","id":51067,"arcs":[[5640,5641,5642,5643,-5509,-5348]]},{"type":"Polygon","id":21007,"arcs":[[5644,5645,-5579,-5586,5646]]},{"type":"Polygon","id":21145,"arcs":[[-5501,5647,5648,5649,-5647,-5585,-5573]]},{"type":"Polygon","id":51700,"arcs":[[5650,5651,-5482,-5550]]},{"type":"Polygon","id":51195,"arcs":[[5652,5653,5654,5655,-5625,-5246,-5604],[5656]]},{"type":"Polygon","id":21227,"arcs":[[-5571,5657,5658,5659,5660,-5523]]},{"type":"Polygon","id":21207,"arcs":[[-5565,5661,5662,5663,-5600,-5417]]},{"type":"Polygon","id":21169,"arcs":[[-5602,5664,5665,5666,-5487,-5473]]},{"type":"Polygon","id":21143,"arcs":[[-5546,5667,5668,-5499,-5423]]},{"type":"MultiPolygon","id":51735,"arcs":[[[5669,5670,-5548,5671]]]},{"type":"Polygon","id":21009,"arcs":[[5672,5673,-5658,-5570,-5488,-5667]]},{"type":"Polygon","id":21047,"arcs":[[-5517,5674,5675,5676,5677,-5544,-5402]]},{"type":"Polygon","id":51750,"arcs":[[-5633,-5557]]},{"type":"Polygon","id":51093,"arcs":[[5678,5679,5680,5681,-5637,5682]]},{"type":"Polygon","id":51167,"arcs":[[5683,5684,5685,-5653,-5603,-5432,-5577]]},{"type":"Polygon","id":51143,"arcs":[[5686,5687,5688,5689,5690,5691,-5641,-5347,-5496]]},{"type":"Polygon","id":51063,"arcs":[[-5644,5692,5693,-5634,-5555,-5510]]},{"type":"Polygon","id":29207,"arcs":[[-5362,-5629,5694,5695,5696,-5591,-5383]]},{"type":"Polygon","id":51111,"arcs":[[-5612,5697,5698,-5630,-5519]]},{"type":"Polygon","id":51650,"arcs":[[-5651,-5549,-5671,5699]]},{"type":"Polygon","id":51183,"arcs":[[5700,5701,-5622,-5596,-5639]]},{"type":"Polygon","id":29035,"arcs":[[-5593,5702,5703,5704,-5503,-5357]]},{"type":"Polygon","id":29043,"arcs":[[-5444,5705,5706,5707,-5614,-5497]]},{"type":"Polygon","id":51197,"arcs":[[5708,5709,5710,-5608,-5636]]},{"type":"Polygon","id":21141,"arcs":[[5711,5712,5713,-5515,-5524,-5661]]},{"type":"Polygon","id":21219,"arcs":[[-5714,5714,5715,-5675,-5516]]},{"type":"Polygon","id":29067,"arcs":[[-5451,-5366,5716,5717,5718,-5706,-5443]]},{"type":"Polygon","id":21157,"arcs":[[-5669,5719,5720,5721,-5648,-5500]]},{"type":"Polygon","id":29133,"arcs":[[-5646,5722,5723,5724,5725,-5627,-5580]]},{"type":"Polygon","id":51083,"arcs":[[-5632,5726,5727,5728,5729,-5687,-5495]]},{"type":"Polygon","id":29091,"arcs":[[-5505,5730,5731,5732,-5717,-5365]]},{"type":"Polygon","id":29145,"arcs":[[-5617,5733,5734,5735,-5567,-5553]]},{"type":"Polygon","id":21121,"arcs":[[5736,5737,-5582,-5561]]},{"type":"Polygon","id":51025,"arcs":[[-5624,5738,5739,5740,5741,-5698,-5611]]},{"type":"Polygon","id":21095,"arcs":[[-5626,-5656,5742,5743,-5587,-5491]]},{"type":"Polygon","id":51173,"arcs":[[-5609,-5711,5744,5745,-5684,-5576]]},{"type":"Polygon","id":4017,"arcs":[[5746,5747,5748,5749,-4741]]},{"type":"Polygon","id":4005,"arcs":[[-5750,5750,5751,5752,-5425,-4742]]},{"type":"Polygon","id":21221,"arcs":[[5753,5754,-5720,-5668,-5545,-5678]]},{"type":"Polygon","id":40105,"arcs":[[-5543,5755,5756,5757,-5534]]},{"type":"Polygon","id":40113,"arcs":[[5758,5759,5760,5761,5762,-5456,-5606]]},{"type":"Polygon","id":40151,"arcs":[[-5470,5763,5764,5765,5766,-5539]]},{"type":"Polygon","id":40035,"arcs":[[-5569,5767,5768,5769,5770,-5756,-5542]]},{"type":"Polygon","id":40147,"arcs":[[-5758,5771,5772,-5759,-5605,-5535]]},{"type":"Polygon","id":40053,"arcs":[[5773,5774,5775,-5537,-5460]]},{"type":"Polygon","id":40003,"arcs":[[-5538,-5776,5776,5777,-5764,-5469]]},{"type":"Polygon","id":40071,"arcs":[[-5763,5778,5779,-5774,-5459,-5457]]},{"type":"Polygon","id":40115,"arcs":[[-5736,5780,5781,-5768,-5568]]},{"type":"Polygon","id":40059,"arcs":[[-5540,-5767,5782,5783,5784,-5466]]},{"type":"Polygon","id":35039,"arcs":[[-5522,5785,5786,5787,5788,5789,5790,-5507]]},{"type":"Polygon","id":35045,"arcs":[[-5791,5791,5792,5793,-5330,-5332,-5508]]},{"type":"Polygon","id":4001,"arcs":[[-5794,5794,5795,5796,5797,5798,-5747,-4740]]},{"type":"Polygon","id":35059,"arcs":[[5799,5800,5801,5802,5803,5804,-5218,-5328]]},{"type":"Polygon","id":40025,"arcs":[[-5528,5805,5806,5807,-5800,-5327]]},{"type":"Polygon","id":40139,"arcs":[[5808,5809,5810,5811,-5806,-5527,-5530,-5532]]},{"type":"Polygon","id":40007,"arcs":[[-5467,-5785,5812,5813,5814,-5809,-5531,-5463]]},{"type":"Polygon","id":51175,"arcs":[[5815,-5680,5816,5817,5818,5819,5820,-5701,-5638,-5682]]},{"type":"Polygon","id":21231,"arcs":[[5821,5822,5823,5824,-5662,-5564]]},{"type":"Polygon","id":35055,"arcs":[[5825,5826,-5786,-5521,-5317]]},{"type":"Polygon","id":35007,"arcs":[[-5805,5827,5828,-5826,-5316,-5219]]},{"type":"Polygon","id":29209,"arcs":[[5829,5830,5831,-5615,-5708]]},{"type":"Polygon","id":6069,"arcs":[[-5334,-5393,5832,-5618,-5446]]},{"type":"Polygon","id":21235,"arcs":[[-5738,5833,5834,5835,5836,-5583]]},{"type":"MultiPolygon","id":51710,"arcs":[[[5837,5838,5839]],[[5840,5841]]]},{"type":"Polygon","id":21147,"arcs":[[-5837,5842,5843,-5822,-5563,-5584]]},{"type":"Polygon","id":51720,"arcs":[[-5657]]},{"type":"Polygon","id":21013,"arcs":[[-5588,-5744,5844,5845,-5834,-5737,-5560]]},{"type":"Polygon","id":21039,"arcs":[[-5650,5846,5847,-5723,-5645]]},{"type":"Polygon","id":21083,"arcs":[[-5722,5848,5849,5850,5851,-5847,-5649]]},{"type":"Polygon","id":21057,"arcs":[[5852,5853,5854,-5665,-5601,-5664]]},{"type":"Polygon","id":21003,"arcs":[[-5674,5855,5856,5857,5858,-5659]]},{"type":"Polygon","id":29009,"arcs":[[-5832,5859,5860,5861,-5734,-5616]]},{"type":"MultiPolygon","id":51810,"arcs":[[[5862,5863,5864]],[[5865,5866,5867,5868,5869,5870,5871,-5841,5872]]]},{"type":"Polygon","id":51035,"arcs":[[5873,5874,5875,5876,5877,-5709,-5635,-5694]]},{"type":"Polygon","id":51191,"arcs":[[5878,5879,5880,5881,-5685,-5746,5882,5883,5884,5885]]},{"type":"Polygon","id":29023,"arcs":[[-5697,5886,5887,5888,-5703,-5592]]},{"type":"MultiPolygon","id":51740,"arcs":[[[-5839,5889,5890]],[[5891,5892,5893]]]},{"type":"Polygon","id":51800,"arcs":[[-5893,5894,5895,5896,-5817,-5679,5897]]},{"type":"Polygon","id":6053,"arcs":[[-5833,-5392,5898,5899,5900,-5619]]},{"type":"Polygon","id":51081,"arcs":[[-5702,-5821,5901,-5739,-5623],[5902]]},{"type":"Polygon","id":51105,"arcs":[[5903,5904,5905,-5845,-5743,-5655]]},{"type":"Polygon","id":51117,"arcs":[[-5742,5906,5907,5908,-5727,-5631,-5699]]},{"type":"Polygon","id":21053,"arcs":[[-5825,5909,5910,-5853,-5663]]},{"type":"Polygon","id":29149,"arcs":[[-5705,5911,5912,5913,5914,-5731,-5504]]},{"type":"Polygon","id":51169,"arcs":[[-5686,-5882,5915,5916,5917,-5904,-5654]]},{"type":"Polygon","id":21213,"arcs":[[5918,5919,-5712,-5660,-5859]]},{"type":"Polygon","id":51141,"arcs":[[5920,5921,5922,-5874,-5693,-5643]]},{"type":"Polygon","id":29143,"arcs":[[-5726,5923,5924,5925,5926,5927,5928,-5695,-5628]]},{"type":"Polygon","id":51550,"arcs":[[5929,-5890,-5838,5930,-5871,5931,5932,-5895,-5892]]},{"type":"Polygon","id":51089,"arcs":[[5933,5934,-5921,-5642,-5692],[5935]]},{"type":"Polygon","id":32003,"arcs":[[5936,5937,-5476,-4238,-4614]]},{"type":"Polygon","id":21171,"arcs":[[-5855,5938,5939,-5856,-5673,-5666]]},{"type":"Polygon","id":29181,"arcs":[[-5889,5940,5941,-5912,-5704]]},{"type":"Polygon","id":29213,"arcs":[[-5719,5942,5943,5944,5945,-5830,-5707]]},{"type":"Polygon","id":40153,"arcs":[[5946,5947,5948,-5783,-5766]]},{"type":"Polygon","id":51077,"arcs":[[-5878,5949,-5876,5950,5951,5952,5953,-5883,-5745,-5710]]},{"type":"Polygon","id":29153,"arcs":[[-5733,5954,5955,5956,-5943,-5718]]},{"type":"Polygon","id":21105,"arcs":[[-5852,5957,5958,5959,-5724,-5848]]},{"type":"Polygon","id":29119,"arcs":[[-5862,5960,5961,-5781,-5735]]},{"type":"Polygon","id":21035,"arcs":[[-5755,5962,5963,-5849,-5721]]},{"type":"Polygon","id":6107,"arcs":[[5964,5965,-5390,-5479]]},{"type":"Polygon","id":51595,"arcs":[[-5903]]},{"type":"Polygon","id":51690,"arcs":[[-5936]]},{"type":"Polygon","id":51620,"arcs":[[-5816,-5681]]},{"type":"Polygon","id":51640,"arcs":[[-5950,-5877]]},{"type":"Polygon","id":47161,"arcs":[[-5677,5966,5967,5968,5969,-5963,-5754]]},{"type":"Polygon","id":40041,"arcs":[[-5962,5970,5971,5972,5973,-5769,-5782]]},{"type":"Polygon","id":47147,"arcs":[[5974,5975,5976,-5715,-5713,-5920,5977]]},{"type":"Polygon","id":47165,"arcs":[[5978,5979,5980,5981,-5978,-5919,-5858]]},{"type":"MultiPolygon","id":21075,"arcs":[[[5982,-5926]],[[5983,5984,-5924,-5725,-5960]]]},{"type":"Polygon","id":47125,"arcs":[[-5977,5985,5986,5987,-5967,-5676,-5716]]},{"type":"Polygon","id":51590,"arcs":[[5988,-5689]]},{"type":"Polygon","id":47111,"arcs":[[5989,5990,5991,-5979,-5857,-5940,5992]]},{"type":"MultiPolygon","id":51520,"arcs":[[[-5879]],[[-5886,5993,-5880]]]},{"type":"Polygon","id":29069,"arcs":[[-5929,5994,5995,5996,5997,5998,-5887,-5696]]},{"type":"Polygon","id":47137,"arcs":[[5999,6000,6001,6002,-5910,-5824]]},{"type":"Polygon","id":47027,"arcs":[[6003,6004,-5993,-5939,-5854,-5911,-6003]]},{"type":"Polygon","id":47163,"arcs":[[6005,6006,6007,-5916,-5881,-5994,-5885,6008]]},{"type":"Polygon","id":47091,"arcs":[[-5954,6009,6010,6011,6012,-6009,-5884]]},{"type":"Polygon","id":47151,"arcs":[[6013,6014,6015,6016,-6000,-5823,-5844]]},{"type":"Polygon","id":47025,"arcs":[[6017,6018,6019,6020,-5835,-5846,-5906]]},{"type":"Polygon","id":40103,"arcs":[[6021,6022,6023,6024,-5779,-5762]]},{"type":"Polygon","id":47067,"arcs":[[-5918,6025,6026,-6018,-5905]]},{"type":"Polygon","id":40131,"arcs":[[6027,6028,6029,-5772,-5757,-5771]]},{"type":"Polygon","id":47013,"arcs":[[6030,6031,-6014,-5843,-5836,-6021]]},{"type":"Polygon","id":47073,"arcs":[[-6008,6032,6033,6034,6035,-6026,-5917]]},{"type":"Polygon","id":40047,"arcs":[[-5780,-6025,6036,6037,6038,-5777,-5775]]},{"type":"Polygon","id":40045,"arcs":[[-5949,6039,6040,6041,6042,-5813,-5784]]},{"type":"Polygon","id":37009,"arcs":[[6043,6044,6045,-6010,-5953]]},{"type":"Polygon","id":47049,"arcs":[[-6017,6046,6047,6048,6049,-6001]]},{"type":"Polygon","id":37005,"arcs":[[6050,6051,-6044,-5952]]},{"type":"Polygon","id":40117,"arcs":[[6052,6053,6054,-6022,-5761]]},{"type":"Polygon","id":37171,"arcs":[[-5923,6055,6056,6057,6058,-6051,-5951,-5875]]},{"type":"Polygon","id":37073,"arcs":[[6059,6060,6061,6062,6063,6064,-5818,-5897]]},{"type":"MultiPolygon","id":37053,"arcs":[[[6065,6066,-5932,-5870,6067]],[[-5866,6068,6069,6070]],[[-6072,5863,-6073,5867]]]},{"type":"Polygon","id":37169,"arcs":[[-5935,6073,6074,-6056,-5922]]},{"type":"Polygon","id":37029,"arcs":[[-5896,-5933,-6067,6075,6076,-6060]]},{"type":"Polygon","id":37185,"arcs":[[6077,6078,6079,6080,-5907,-5741]]},{"type":"Polygon","id":37131,"arcs":[[6081,6082,-6078,-5740,-5902,-5820,6083]]},{"type":"Polygon","id":37091,"arcs":[[-6065,6084,6085,-6084,-5819]]},{"type":"Polygon","id":37145,"arcs":[[6086,6087,6088,6089,-5729]]},{"type":"Polygon","id":37181,"arcs":[[-6081,6090,6091,-5908]]},{"type":"Polygon","id":37077,"arcs":[[6092,6093,6094,-6087,-5728,-5909,-6092]]},{"type":"Polygon","id":37157,"arcs":[[-5691,6095,6096,6097,-6074,-5934]]},{"type":"Polygon","id":37033,"arcs":[[-6090,6098,6099,-6096,-5690,-5989,-5688,-5730]]},{"type":"Polygon","id":47133,"arcs":[[-6050,6100,6101,-6004,-6002]]},{"type":"Polygon","id":47087,"arcs":[[-6102,6102,6103,-5990,-6005]]},{"type":"Polygon","id":37083,"arcs":[[6104,6105,6106,6107,-6079,-6083]]},{"type":"Polygon","id":40097,"arcs":[[-5974,6108,6109,-6028,-5770]]},{"type":"Polygon","id":47019,"arcs":[[6110,6111,6112,6113,-6006,-6013]]},{"type":"Polygon","id":37139,"arcs":[[6114,6115,-6061,-6077]]},{"type":"Polygon","id":47131,"arcs":[[-5959,6116,6117,6118,6119,-5984]]},{"type":"Polygon","id":40093,"arcs":[[-5778,-6039,6120,6121,6122,-5947,-5765]]},{"type":"Polygon","id":47183,"arcs":[[6123,6124,6125,-6117,-5958,-5851]]},{"type":"Polygon","id":47095,"arcs":[[6126,6127,-5927,-5983,-5925,-5985,-6120]]},{"type":"Polygon","id":48421,"arcs":[[6128,6129,-5807,-5812,6130]]},{"type":"Polygon","id":47079,"arcs":[[-5970,6131,6132,-6124,-5850,-5964]]},{"type":"Polygon","id":48195,"arcs":[[6133,6134,-6131,-5811,6135]]},{"type":"Polygon","id":48111,"arcs":[[-5808,-6130,6136,-5801]]},{"type":"Polygon","id":48357,"arcs":[[6137,6138,-6136,-5810,-5815]]},{"type":"Polygon","id":48295,"arcs":[[6139,6140,-6138,-5814,-6043]]},{"type":"Polygon","id":5007,"arcs":[[-5861,6141,6142,6143,6144,-5971,-5961]]},{"type":"Polygon","id":5049,"arcs":[[6145,6146,6147,-5955,-5732,-5915]]},{"type":"Polygon","id":5015,"arcs":[[-5831,-5946,6148,6149,6150,-6142,-5860]]},{"type":"Polygon","id":5135,"arcs":[[-5914,6151,6152,6153,6154,-6146]]},{"type":"Polygon","id":5121,"arcs":[[6155,6156,-6152,-5913,-5942,6157]]},{"type":"Polygon","id":5009,"arcs":[[6158,6159,6160,-6149,-5945]]},{"type":"Polygon","id":5089,"arcs":[[6161,6162,-6159,-5944,-5957]]},{"type":"Polygon","id":5005,"arcs":[[-6148,6163,6164,6165,-6162,-5956]]},{"type":"Polygon","id":5021,"arcs":[[-5888,-5999,6166,-6158,-5941]]},{"type":"Polygon","id":6031,"arcs":[[6167,6168,-5899,-5391,-5966]]},{"type":"Polygon","id":47169,"arcs":[[-5992,6169,6170,-5980]]},{"type":"Polygon","id":47021,"arcs":[[6171,6172,6173,-5986,-5976],[6174]]},{"type":"Polygon","id":47179,"arcs":[[-6114,6175,6176,-6033,-6007]]},{"type":"Polygon","id":37193,"arcs":[[-6059,6177,6178,6179,6180,6181,-6045,-6052]]},{"type":"Polygon","id":47173,"arcs":[[6182,6183,6184,-6031,-6020]]},{"type":"Polygon","id":47159,"arcs":[[-6104,6185,6186,6187,-6170,-5991]]},{"type":"Polygon","id":29155,"arcs":[[-6128,6188,6189,-5995,-5928]]},{"type":"Polygon","id":40143,"arcs":[[-6030,6190,6191,6192,-6053,-5760,-5773]]},{"type":"Polygon","id":47057,"arcs":[[-6027,-6036,6193,6194,6195,-6183,-6019]]},{"type":"Polygon","id":47037,"arcs":[[-5982,6196,6197,6198,-6172,-5975]]},{"type":"Polygon","id":47059,"arcs":[[6199,6200,6201,6202,-6034,-6177]]},{"type":"Polygon","id":37189,"arcs":[[-6182,6203,6204,-6011,-6046]]},{"type":"Polygon","id":37143,"arcs":[[6205,6206,-6062,-6116]]},{"type":"Polygon","id":47129,"arcs":[[-6016,6207,6208,6209,-6047]]},{"type":"Polygon","id":47083,"arcs":[[-5988,6210,6211,6212,-5968]]},{"type":"Polygon","id":47005,"arcs":[[-6213,6213,6214,6215,6216,-6132,-5969]]},{"type":"Polygon","id":47189,"arcs":[[-6171,-6188,6217,6218,6219,-6197,-5981]]},{"type":"MultiPolygon","id":37041,"arcs":[[[6220,-6063,-6207]]]},{"type":"Polygon","id":47063,"arcs":[[-6203,6221,6222,-6194,-6035]]},{"type":"MultiPolygon","id":47043,"arcs":[[[-6175]],[[-6174,6223,6224,6225,-6211,-5987]]]},{"type":"Polygon","id":5087,"arcs":[[6226,6227,6228,6229,6230,-6143,-6151]]},{"type":"Polygon","id":47141,"arcs":[[-6049,6231,6232,6233,-6186,-6103,-6101]]},{"type":"Polygon","id":47001,"arcs":[[-6185,6234,6235,-6208,-6015,-6032]]},{"type":"Polygon","id":37197,"arcs":[[6236,6237,6238,-6178,-6058]]},{"type":"Polygon","id":37011,"arcs":[[6239,6240,6241,6242,-6111,-6012,-6205]]},{"type":"Polygon","id":37069,"arcs":[[6243,6244,-6093,-6091,-6080]]},{"type":"Polygon","id":5055,"arcs":[[-5998,6245,6246,-6156,-6167]]},{"type":"Polygon","id":35033,"arcs":[[-5829,6247,6248,6249,-5787,-5827]]},{"type":"Polygon","id":37067,"arcs":[[6250,6251,6252,-6237,-6057,-6075]]},{"type":"Polygon","id":5065,"arcs":[[-6155,6253,6254,-6164,-6147]]},{"type":"Polygon","id":47171,"arcs":[[6255,6256,6257,-6200,-6176,-6113]]},{"type":"Polygon","id":5075,"arcs":[[-6247,6258,6259,6260,-6153,-6157]]},{"type":"Polygon","id":37081,"arcs":[[6261,6262,6263,-6251,-6098]]},{"type":"Polygon","id":37001,"arcs":[[6264,6265,6266,-6262,-6097,-6100]]},{"type":"Polygon","id":40119,"arcs":[[6267,6268,6269,-6023,-6055]]},{"type":"Polygon","id":47085,"arcs":[[-6226,6270,6271,-6214,-6212]]},{"type":"Polygon","id":37015,"arcs":[[6272,6273,6274,-6105,-6082,-6086]]},{"type":"Polygon","id":37135,"arcs":[[-6089,6275,6276,-6265,-6099]]},{"type":"Polygon","id":37063,"arcs":[[-6095,6277,6278,-6276,-6088]]},{"type":"Polygon","id":5143,"arcs":[[6279,6280,-6144,-6231]]},{"type":"MultiPolygon","id":37055,"arcs":[[[6281,6282,6283]],[[6284,6285]],[[-6070,6286]]]},{"type":"Polygon","id":47053,"arcs":[[6287,6288,6289,6290,-6118,-6126]]},{"type":"MultiPolygon","id":35043,"arcs":[[[6291,6292]],[[6293,6294,6295,6296,6297,-5792,-5790]]]},{"type":"Polygon","id":35021,"arcs":[[-5804,6298,6299,-6248,-5828]]},{"type":"Polygon","id":47045,"arcs":[[6300,6301,6302,-6189,-6127,-6119,-6291]]},{"type":"Polygon","id":37127,"arcs":[[-6108,6303,6304,6305,-6244]]},{"type":"Polygon","id":47089,"arcs":[[-6223,6306,6307,6308,-6195]]},{"type":"Polygon","id":47093,"arcs":[[-6309,6309,6310,6311,6312,-6235,-6184,-6196]]},{"type":"Polygon","id":47029,"arcs":[[6313,6314,6315,-6307,-6222,-6202]]},{"type":"Polygon","id":47035,"arcs":[[-6210,6316,6317,6318,6319,6320,6321,6322,-6232,-6048]]},{"type":"Polygon","id":40073,"arcs":[[6323,6324,6325,-6121,-6038]]},{"type":"Polygon","id":40083,"arcs":[[-6024,-6270,6326,6327,-6324,-6037]]},{"type":"Polygon","id":40011,"arcs":[[-6326,6328,6329,6330,6331,-6122]]},{"type":"Polygon","id":40043,"arcs":[[6332,6333,-6040,-5948,-6123,-6332]]},{"type":"Polygon","id":40037,"arcs":[[-6193,6334,6335,6336,-6268,-6054]]},{"type":"Polygon","id":40145,"arcs":[[-6110,6337,6338,6339,-6191,-6029]]},{"type":"Polygon","id":40021,"arcs":[[-5973,6340,6341,6342,-6338,-6109]]},{"type":"Polygon","id":40001,"arcs":[[-6145,-6281,6343,6344,-6341,-5972]]},{"type":"Polygon","id":37121,"arcs":[[-6243,6345,6346,-6256,-6112]]},{"type":"Polygon","id":37065,"arcs":[[6347,6348,6349,-6304,-6107]]},{"type":"Polygon","id":47017,"arcs":[[-6217,6350,6351,6352,-6288,-6125,-6133]]},{"type":"Polygon","id":47041,"arcs":[[6353,6354,6355,-6218,-6187,-6234]]},{"type":"Polygon","id":5137,"arcs":[[6356,6357,6358,6359,-6165,-6255]]},{"type":"Polygon","id":5101,"arcs":[[-6161,6360,6361,6362,-6227,-6150]]},{"type":"Polygon","id":37027,"arcs":[[-6181,6363,6364,6365,-6240,-6204]]},{"type":"Polygon","id":5129,"arcs":[[-6166,-6360,6366,6367,-6361,-6160,-6163]]},{"type":"Polygon","id":47149,"arcs":[[6368,6369,6370,6371,6372,-6198,-6220]]},{"type":"Polygon","id":37199,"arcs":[[6373,6374,6375,-6257,-6347]]},{"type":"MultiPolygon","id":47185,"arcs":[[[6376,-6321]],[[-6323,6377,6378,-6354,-6233]]]},{"type":"Polygon","id":37183,"arcs":[[-6245,6379,6380,6381,-6278,-6094]]},{"type":"Polygon","id":37117,"arcs":[[6382,6383,6384,-6348,-6106,-6275]]},{"type":"Polygon","id":37115,"arcs":[[-6258,-6376,6385,6386,-6314,-6201]]},{"type":"Polygon","id":37059,"arcs":[[6387,6388,6389,-6238,-6253]]},{"type":"Polygon","id":48393,"arcs":[[-6141,6390,6391,6392,6393,-6134,-6139]]},{"type":"Polygon","id":48211,"arcs":[[-6140,-6042,6394,6395,-6391]]},{"type":"Polygon","id":48233,"arcs":[[-6135,-6394,6396,6397]]},{"type":"Polygon","id":48205,"arcs":[[6398,6399,6400,-5802,-6137]]},{"type":"Polygon","id":37097,"arcs":[[-6239,-6390,6401,6402,6403,6404,6405,6406,-6179]]},{"type":"Polygon","id":48341,"arcs":[[-6398,6407,6408,6409,-6399,-6129]]},{"type":"Polygon","id":47187,"arcs":[[-6373,6410,6411,6412,-6224,-6173,-6199]]},{"type":"Polygon","id":37003,"arcs":[[6413,-6364,-6180,-6407]]},{"type":"Polygon","id":47145,"arcs":[[6414,6415,6416,6417,6418,-6317,-6209,-6236,-6313,6419]]},{"type":"Polygon","id":47155,"arcs":[[-6316,6420,6421,6422,-6310,-6308]]},{"type":"Polygon","id":37057,"arcs":[[-6264,6423,6424,6425,-6388,-6252]]},{"type":"Polygon","id":40129,"arcs":[[-6334,6426,6427,6428,-6395,-6041]]},{"type":"Polygon","id":35031,"arcs":[[-6298,6429,-5795,-5793]]},{"type":"Polygon","id":35049,"arcs":[[-6250,6430,6431,6432,-6295,6433,-6293,6434,-5788]]},{"type":"Polygon","id":5093,"arcs":[[6435,6436,6437,6438,6439,6440,6441,-5996,-6190,-6303]]},{"type":"Polygon","id":37023,"arcs":[[-6366,6442,6443,6444,6445,6446,-6241]]},{"type":"Polygon","id":47033,"arcs":[[6447,6448,6449,-6301,-6290]]},{"type":"Polygon","id":5031,"arcs":[[-6442,6450,6451,-6259,-6246,-5997]]},{"type":"Polygon","id":37177,"arcs":[[6452,6453,6454]]},{"type":"Polygon","id":47081,"arcs":[[-6413,6455,6456,6457,-6271,-6225]]},{"type":"Polygon","id":37187,"arcs":[[-6454,6458,6459,-6383,-6274,6460]]},{"type":"Polygon","id":35028,"arcs":[[-5789,-6435,-6292,-6434,-6294]]},{"type":"Polygon","id":47015,"arcs":[[6461,6462,-6369,-6219,-6356]]},{"type":"Polygon","id":37111,"arcs":[[6463,6464,-6374,-6346,-6242,-6447]]},{"type":"Polygon","id":47097,"arcs":[[-6450,6465,6466,-6436,-6302]]},{"type":"Polygon","id":40081,"arcs":[[-6337,6467,6468,6469,-6327,-6269]]},{"type":"Polygon","id":5063,"arcs":[[-6261,6470,6471,6472,-6357,-6254,-6154]]},{"type":"Polygon","id":37151,"arcs":[[-6267,6473,6474,6475,-6424,-6263]]},{"type":"MultiPolygon","id":47105,"arcs":[[[6476,6477]],[[-6415]],[[-6420,-6312,6478,6479,6480,-6416]]]},{"type":"Polygon","id":5067,"arcs":[[-6260,-6452,6481,6482,6483,6484,-6471]]},{"type":"Polygon","id":47009,"arcs":[[6485,6486,6487,-6479,-6311,-6423]]},{"type":"Polygon","id":37037,"arcs":[[-6279,-6382,6488,6489,6490,-6474,-6266,-6277]]},{"type":"Polygon","id":35047,"arcs":[[-6300,6491,6492,6493,-6431,-6249]]},{"type":"Polygon","id":37195,"arcs":[[6494,6495,6496,6497,-6305,-6350]]},{"type":"Polygon","id":37159,"arcs":[[-6426,6498,6499,-6402,-6389]]},{"type":"Polygon","id":40111,"arcs":[[-6192,-6340,6500,6501,6502,-6335]]},{"type":"Polygon","id":40101,"arcs":[[-6343,6503,6504,6505,-6501,-6339]]},{"type":"Polygon","id":47177,"arcs":[[-6379,6506,6507,6508,6509,-6462,-6355]]},{"type":"Polygon","id":47119,"arcs":[[6510,6511,6512,6513,-6456,-6412]]},{"type":"Polygon","id":47039,"arcs":[[6514,6515,6516,6517,-6351,-6216]]},{"type":"Polygon","id":47135,"arcs":[[-6458,6518,6519,-6515,-6215,-6272]]},{"type":"Polygon","id":37147,"arcs":[[-6385,6520,6521,6522,6523,6524,6525,-6495,-6349]]},{"type":"Polygon","id":37035,"arcs":[[-6406,6526,-6443,-6365,-6414]]},{"type":"Polygon","id":37021,"arcs":[[-6465,6527,6528,6529,-6386,-6375]]},{"type":"Polygon","id":47143,"arcs":[[6530,6531,6532,-6318,-6419]]},{"type":"Polygon","id":47175,"arcs":[[-6322,-6377,-6320,6533,6534,-6507,-6378]]},{"type":"Polygon","id":47077,"arcs":[[-6518,6535,6536,6537,-6352]]},{"type":"Polygon","id":47075,"arcs":[[6538,6539,6540,6541,-6466,-6449]]},{"type":"Polygon","id":37101,"arcs":[[-6498,6542,6543,6544,-6380,-6306]]},{"type":"Polygon","id":40039,"arcs":[[-6331,6545,6546,6547,-6427,-6333]]},{"type":"Polygon","id":6071,"arcs":[[6548,6549,6550,6551,6552,6553,-5477,-5938]]},{"type":"Polygon","id":6079,"arcs":[[-6169,6554,6555,6556,-5900]]},{"type":"Polygon","id":6029,"arcs":[[-6554,6557,6558,6559,-6555,-6168,-5965,-5478]]},{"type":"Polygon","id":47113,"arcs":[[-6353,-6538,6560,6561,-6539,-6448,-6289]]},{"type":"Polygon","id":5141,"arcs":[[-6359,6562,6563,6564,6565,-6367]]},{"type":"Polygon","id":37087,"arcs":[[-6530,6566,6567,6568,-6421,-6315,-6387]]},{"type":"Polygon","id":5047,"arcs":[[6569,6570,6571,-6229,6572]]},{"type":"Polygon","id":47007,"arcs":[[-6533,6573,6574,-6534,-6319]]},{"type":"Polygon","id":5071,"arcs":[[-6228,-6363,6575,6576,-6573]]},{"type":"Polygon","id":5033,"arcs":[[6577,6578,-6344,-6280,-6230,-6572]]},{"type":"Polygon","id":47121,"arcs":[[6579,6580,6581,-6531,-6418]]},{"type":"Polygon","id":35037,"arcs":[[-6401,6582,6583,6584,6585,6586,6587,-6492,-6299,-5803]]},{"type":"MultiPolygon","id":37013,"arcs":[[[6588,6589,6590,-6523]],[[-6460,6591,6592,-6521,-6384]]]},{"type":"Polygon","id":5115,"arcs":[[-6368,-6566,6593,6594,6595,-6576,-6362]]},{"type":"Polygon","id":40017,"arcs":[[6596,6597,6598,6599,6600,-6329,-6325]]},{"type":"Polygon","id":40109,"arcs":[[-6470,6601,6602,-6597,-6328]]},{"type":"Polygon","id":5023,"arcs":[[-6473,6603,6604,-6563,-6358]]},{"type":"Polygon","id":47117,"arcs":[[6605,6606,6607,-6511,-6411,-6372]]},{"type":"Polygon","id":5111,"arcs":[[-6441,6608,6609,-6482,-6451]]},{"type":"MultiPolygon","id":37095,"arcs":[[[-6283,6610]],[[-6453,6611,-6285,6612,-6592,-6459]]]},{"type":"Polygon","id":47031,"arcs":[[-6463,-6510,6613,6614,6615,6616,-6370]]},{"type":"Polygon","id":47003,"arcs":[[-6617,6617,6618,-6606,-6371]]},{"type":"Polygon","id":37173,"arcs":[[6619,6620,6621,-6486,-6422,-6569]]},{"type":"Polygon","id":47123,"arcs":[[-6488,6622,6623,6624,6625,-6478,6626,-6480]]},{"type":"Polygon","id":47101,"arcs":[[-6514,6627,6628,-6519,-6457]]},{"type":"Polygon","id":37079,"arcs":[[6629,6630,-6496,-6526]]},{"type":"MultiPolygon","id":47167,"arcs":[[[6631,6632,-6439]],[[-6542,6633,6634,-6437,-6467]]]},{"type":"Polygon","id":47107,"arcs":[[-6481,-6627,-6477,-6626,6635,6636,-6580,-6417]]},{"type":"Polygon","id":40135,"arcs":[[-6345,-6579,6637,6638,6639,-6504,-6342]]},{"type":"Polygon","id":40107,"arcs":[[-6503,6640,6641,6642,6643,-6468,-6336]]},{"type":"Polygon","id":37105,"arcs":[[6644,6645,-6490]]},{"type":"Polygon","id":48359,"arcs":[[-6410,6646,6647,-6583,-6400]]},{"type":"Polygon","id":48065,"arcs":[[-6393,6648,6649,6650,-6408,-6397]]},{"type":"Polygon","id":48179,"arcs":[[6651,6652,-6649,-6392]]},{"type":"Polygon","id":48483,"arcs":[[-6429,6653,6654,-6652,-6396]]},{"type":"Polygon","id":48375,"arcs":[[-6651,6655,-6647,-6409]]},{"type":"Polygon","id":37161,"arcs":[[6656,6657,6658,6659,6660,-6528,-6464,-6446]]},{"type":"Polygon","id":37191,"arcs":[[-6631,6661,6662,6663,-6543,-6497]]},{"type":"Polygon","id":47023,"arcs":[[6664,6665,6666,-6561,-6537]]},{"type":"Polygon","id":37085,"arcs":[[-6545,6667,6668,6669,-6645,-6489,-6381]]},{"type":"Polygon","id":37045,"arcs":[[6670,6671,6672,6673,-6657,-6445]]},{"type":"Polygon","id":37109,"arcs":[[-6405,6674,6675,-6671,-6444,-6527]]},{"type":"Polygon","id":47153,"arcs":[[6676,6677,6678,-6508,-6535,-6575]]},{"type":"Polygon","id":40091,"arcs":[[6679,6680,6681,-6641,-6502,-6506]]},{"type":"Polygon","id":40015,"arcs":[[-6601,6682,6683,6684,6685,-6546,-6330]]},{"type":"Polygon","id":5145,"arcs":[[-6485,6686,6687,6688,6689,-6604,-6472]]},{"type":"Polygon","id":47061,"arcs":[[6690,6691,-6614,-6509,-6679]]},{"type":"Polygon","id":4025,"arcs":[[6692,6693,6694,6695,-5752]]},{"type":"Polygon","id":37099,"arcs":[[-6568,6696,6697,6698,6699,-6620]]},{"type":"Polygon","id":37119,"arcs":[[6700,6701,6702,6703,6704,-6675,-6404]]},{"type":"Polygon","id":37125,"arcs":[[-6646,-6670,6705,6706,6707,6708,-6475,-6491]]},{"type":"Polygon","id":37123,"arcs":[[-6709,6709,6710,-6425,-6476]]},{"type":"Polygon","id":37025,"arcs":[[6711,6712,-6701,-6403,-6500]]},{"type":"Polygon","id":40009,"arcs":[[-6548,6713,6714,6715,6716,6717,-6654,-6428]]},{"type":"Polygon","id":37167,"arcs":[[-6711,6718,6719,-6712,-6499]]},{"type":"Polygon","id":37089,"arcs":[[-6661,6720,6721,6722,-6529]]},{"type":"Polygon","id":47181,"arcs":[[6723,6724,6725,-6516,-6520,-6629]]},{"type":"Polygon","id":40133,"arcs":[[6726,6727,6728,-6643]]},{"type":"Polygon","id":37075,"arcs":[[6729,6730,-6623,-6487,-6622]]},{"type":"Polygon","id":40149,"arcs":[[-6686,6731,-6714,-6547]]},{"type":"Polygon","id":40125,"arcs":[[-6644,-6729,6732,6733,6734,-6602,-6469]]},{"type":"Polygon","id":5029,"arcs":[[6735,6736,6737,-6594,-6565]]},{"type":"Polygon","id":47099,"arcs":[[-6513,6738,6739,-6724,-6628]]},{"type":"Polygon","id":40061,"arcs":[[6740,6741,6742,-6680,-6505,-6640]]},{"type":"Polygon","id":47065,"arcs":[[-6582,6743,6744,6745,6746,6747,-6677,-6574,-6532]]},{"type":"Polygon","id":47055,"arcs":[[-6608,6748,6749,6750,-6739,-6512]]},{"type":"Polygon","id":5131,"arcs":[[-6571,6751,6752,6753,-6638,-6578]]},{"type":"Polygon","id":5037,"arcs":[[6754,6755,6756,-6483,-6610]]},{"type":"Polygon","id":5147,"arcs":[[-6757,6757,6758,6759,-6687,-6484]]},{"type":"Polygon","id":5035,"arcs":[[-6440,-6633,6760,6761,6762,6763,6764,-6755,-6609]]},{"type":"Polygon","id":47069,"arcs":[[-6562,-6667,6765,6766,6767,6768,6769,-6540]]},{"type":"Polygon","id":37107,"arcs":[[6770,6771,6772,-6662,-6630,-6525]]},{"type":"Polygon","id":5083,"arcs":[[-6577,-6596,6773,6774,-6752,-6570]]},{"type":"Polygon","id":37175,"arcs":[[6775,6776,6777,-6697,-6567,-6723]]},{"type":"Polygon","id":47071,"arcs":[[-6726,6778,6779,6780,6781,-6665,-6536,-6517]]},{"type":"Polygon","id":37071,"arcs":[[-6705,6782,-6672,-6676]]},{"type":"MultiPolygon","id":37049,"arcs":[[[6783,6784,6785]],[[-6591,6786,6787,6788,-6771,-6524]]]},{"type":"Polygon","id":47127,"arcs":[[6789,6790,-6618,-6616]]},{"type":"Polygon","id":47157,"arcs":[[6791,6792,6793,-6761,-6632,-6438,-6635]]},{"type":"Polygon","id":37149,"arcs":[[6794,6795,-6721,-6660]]},{"type":"Polygon","id":47047,"arcs":[[-6770,6796,6797,-6792,-6634,-6541]]},{"type":"Polygon","id":47109,"arcs":[[-6782,6798,-6766,-6666]]},{"type":"Polygon","id":40079,"arcs":[[6799,6800,6801,6802,6803,-6741,-6639,-6754]]},{"type":"Polygon","id":40051,"arcs":[[6804,6805,6806,6807,-6683,-6600]]},{"type":"Polygon","id":40027,"arcs":[[-6735,6808,-6598,-6603]]},{"type":"Polygon","id":47103,"arcs":[[-6791,6809,6810,6811,-6749,-6607,-6619]]},{"type":"Polygon","id":5045,"arcs":[[-6605,-6690,6812,6813,6814,-6736,-6564]]},{"type":"Polygon","id":47051,"arcs":[[-6692,6815,6816,6817,-6810,-6790,-6615]]},{"type":"Polygon","id":47011,"arcs":[[6818,6819,6820,-6744,-6581,-6637]]},{"type":"Polygon","id":35006,"arcs":[[-6297,6821,6822,6823,6824,-5796,-6430]]},{"type":"Polygon","id":40087,"arcs":[[-6734,6825,6826,-6805,-6599,-6809]]},{"type":"Polygon","id":37113,"arcs":[[6827,6828,6829,-6730,-6621,-6700]]},{"type":"MultiPolygon","id":37137,"arcs":[[[-6787,-6590,6830]]]},{"type":"Polygon","id":47115,"arcs":[[-6748,6831,6832,-6816,-6691,-6678]]},{"type":"Polygon","id":37163,"arcs":[[-6664,6833,6834,6835,6836,-6668,-6544]]},{"type":"Polygon","id":5149,"arcs":[[-6738,6837,6838,6839,6840,-6774,-6595]]},{"type":"Polygon","id":40121,"arcs":[[-6743,6841,6842,6843,6844,6845,-6681]]},{"type":"Polygon","id":37039,"arcs":[[-6830,6846,6847,6848,6849,-6624,-6731]]},{"type":"Polygon","id":40063,"arcs":[[-6682,-6846,6850,6851,-6727,-6642]]},{"type":"Polygon","id":47139,"arcs":[[-6850,6852,6853,-6819,-6636,-6625]]},{"type":"Polygon","id":37051,"arcs":[[-6837,6854,6855,6856,-6706,-6669]]},{"type":"Polygon","id":37103,"arcs":[[6857,-6785,6858,6859,6860,-6772,-6789]]},{"type":"Polygon","id":35001,"arcs":[[-6433,6861,6862,-6822,-6296]]},{"type":"Polygon","id":35019,"arcs":[[-6588,6863,6864,6865,-6493]]},{"type":"Polygon","id":45045,"arcs":[[-6796,6866,6867,6868,6869,-6776,-6722]]},{"type":"Polygon","id":37007,"arcs":[[6870,6871,6872,6873,-6719]]},{"type":"Polygon","id":37093,"arcs":[[-6857,6874,6875,-6707]]},{"type":"Polygon","id":37179,"arcs":[[-6874,6876,6877,-6702,-6713,-6720]]},{"type":"Polygon","id":45083,"arcs":[[6878,6879,-6867,-6795,-6659,6880]]},{"type":"Polygon","id":37061,"arcs":[[-6773,-6861,6881,6882,-6834,-6663]]},{"type":"Polygon","id":48117,"arcs":[[6883,6884,6885,6886,-6584,-6648]]},{"type":"Polygon","id":45021,"arcs":[[6887,-6881,-6658,-6674,6888]]},{"type":"Polygon","id":48129,"arcs":[[6889,6890,6891,6892,-6653]]},{"type":"Polygon","id":48087,"arcs":[[-6718,6893,6894,6895,-6890,-6655]]},{"type":"Polygon","id":48381,"arcs":[[6896,6897,6898,-6884,-6656]]},{"type":"Polygon","id":37153,"arcs":[[-6708,6899,6900,-6871,-6710]]},{"type":"Polygon","id":48011,"arcs":[[-6893,6901,6902,-6897,-6650]]},{"type":"Polygon","id":45091,"arcs":[[6903,6904,6905,-6889,-6673,-6783,-6704]]},{"type":"Polygon","id":37043,"arcs":[[-6829,6906,6907,6908,-6847]]},{"type":"Polygon","id":5123,"arcs":[[-6765,6909,6910,-6758,-6756]]},{"type":"Polygon","id":40075,"arcs":[[-6685,6911,6912,6913,6914,-6715,-6732]]},{"type":"MultiPolygon","id":37031,"arcs":[[[6915,-6859,-6784,6916]]]},{"type":"Polygon","id":40055,"arcs":[[-6915,6917,6918,-6716]]},{"type":"MultiPolygon","id":6083,"arcs":[[[6919]],[[6920]],[[-6560,6921,6922,-6556]]]},{"type":"Polygon","id":5105,"arcs":[[6923,6924,6925,-6838,-6737,-6815]]},{"type":"Polygon","id":5127,"arcs":[[-6841,6926,6927,-6800,-6753,-6775]]},{"type":"Polygon","id":5117,"arcs":[[-6760,6928,6929,6930,-6688]]},{"type":"Polygon","id":45077,"arcs":[[-6870,6931,6932,-6777]]},{"type":"Polygon","id":5085,"arcs":[[-6931,6933,6934,6935,-6813,-6689]]},{"type":"Polygon","id":45057,"arcs":[[-6878,6936,6937,6938,6939,-6904,-6703]]},{"type":"Polygon","id":40077,"arcs":[[-6804,6940,-6842,-6742]]},{"type":"Polygon","id":45073,"arcs":[[6941,6942,6943,6944,6945,6946,-6698,-6778,-6933]]},{"type":"Polygon","id":35057,"arcs":[[-6866,6947,6948,6949,-6862,-6432,-6494]]},{"type":"Polygon","id":37165,"arcs":[[6950,6951,-6900,-6876]]},{"type":"Polygon","id":40057,"arcs":[[-6919,6952,6953,6954,-6894,-6717]]},{"type":"Polygon","id":5119,"arcs":[[-6936,6955,6956,6957,-6924,-6814]]},{"type":"Polygon","id":1077,"arcs":[[6958,6959,6960,-6779,-6725,-6740,-6751,6961]]},{"type":"Polygon","id":5095,"arcs":[[-6911,6962,6963,6964,-6929,-6759]]},{"type":"Polygon","id":13241,"arcs":[[6965,6966,-6907,-6828,-6699,-6947]]},{"type":"Polygon","id":1083,"arcs":[[-6812,6967,6968,6969,-6962,-6750]]},{"type":"Polygon","id":28003,"arcs":[[6970,6971,-6767,-6799,-6781,6972]]},{"type":"Polygon","id":28141,"arcs":[[6973,6974,6975,-6973,-6780,-6961,6976]]},{"type":"Polygon","id":28139,"arcs":[[6977,6978,6979,-6768,-6972]]},{"type":"Polygon","id":28033,"arcs":[[6980,6981,-6762,-6794,6982]]},{"type":"Polygon","id":28009,"arcs":[[6983,6984,-6797,-6769,-6980]]},{"type":"Polygon","id":28093,"arcs":[[6985,6986,6987,-6983,-6793,-6798,-6985]]},{"type":"Polygon","id":13281,"arcs":[[-6967,6988,6989,6990,-6908]]},{"type":"Polygon","id":1089,"arcs":[[-6818,6991,6992,6993,-6968,-6811]]},{"type":"Polygon","id":1071,"arcs":[[6994,6995,-6992,-6817,-6833,6996]]},{"type":"Polygon","id":13213,"arcs":[[6997,6998,6999,-6820,-6854,7000]]},{"type":"Polygon","id":13111,"arcs":[[-6849,7001,7002,7003,7004,-7001,-6853]]},{"type":"Polygon","id":13313,"arcs":[[7005,7006,7007,-6821,-7000]]},{"type":"Polygon","id":13047,"arcs":[[7008,-6745,-7008]]},{"type":"Polygon","id":13291,"arcs":[[-6909,-6991,7009,7010,-7002,-6848]]},{"type":"MultiPolygon","id":37133,"arcs":[[[-6916,7011,7012,-6882,-6860]]]},{"type":"Polygon","id":13083,"arcs":[[-6832,-6747,7013,7014,-6997]]},{"type":"Polygon","id":13295,"arcs":[[-7007,7015,7016,7017,7018,-7014,-6746,-7009]]},{"type":"Polygon","id":40123,"arcs":[[-6728,-6852,7019,7020,7021,7022,-6826,-6733]]},{"type":"Polygon","id":35061,"arcs":[[-6863,-6950,7023,-6823]]},{"type":"Polygon","id":37155,"arcs":[[7024,7025,7026,7027,7028,-6951,-6875,-6856]]},{"type":"Polygon","id":35009,"arcs":[[-6887,7029,7030,7031,-6585]]},{"type":"Polygon","id":45087,"arcs":[[-6906,7032,7033,7034,7035,-6879,-6888]]},{"type":"Polygon","id":5077,"arcs":[[-6764,7036,7037,-6963,-6910]]},{"type":"Polygon","id":1033,"arcs":[[7038,7039,-6977,-6960]]},{"type":"MultiPolygon","id":6111,"arcs":[[[7040]],[[7041,-6922,-6559,7042]]]},{"type":"Polygon","id":28143,"arcs":[[-6763,-6982,7043,7044,7045,7046,7047,-7037]]},{"type":"Polygon","id":1049,"arcs":[[-7019,7048,7049,7050,7051,-6995,-7015]]},{"type":"Polygon","id":37017,"arcs":[[7052,7053,-7025,-6855,-6836]]},{"type":"Polygon","id":40065,"arcs":[[7054,7055,7056,-6953,-6918,-6914]]},{"type":"Polygon","id":5125,"arcs":[[-6958,7057,7058,7059,-6925]]},{"type":"Polygon","id":40031,"arcs":[[-6684,-6808,7060,7061,7062,-6912]]},{"type":"Polygon","id":40049,"arcs":[[-7023,7063,7064,7065,-6806,-6827]]},{"type":"Polygon","id":13123,"arcs":[[7066,7067,7068,-6998,-7005]]},{"type":"Polygon","id":13137,"arcs":[[-6946,7069,7070,7071,7072,-6989,-6966]]},{"type":"MultiPolygon","id":6037,"arcs":[[[7073]],[[7074]],[[-6553,7075,7076,-7043,-6558]]]},{"type":"Polygon","id":45023,"arcs":[[-6940,7077,-7033,-6905]]},{"type":"Polygon","id":45007,"arcs":[[7078,7079,7080,-6942,-6932,-6869]]},{"type":"Polygon","id":45025,"arcs":[[7081,7082,-6937,-6877,-6873,7083]]},{"type":"Polygon","id":45069,"arcs":[[-7029,7084,7085,7086,-7084,-6872,-6901,-6952]]},{"type":"Polygon","id":1079,"arcs":[[-6970,7087,7088,7089,7090,-7039,-6959]]},{"type":"Polygon","id":13311,"arcs":[[7091,7092,-7010,-6990,-7073]]},{"type":"Polygon","id":45059,"arcs":[[-7036,7093,7094,7095,-6868,-6880]]},{"type":"Polygon","id":35011,"arcs":[[7096,7097,7098,-6864,-6587]]},{"type":"Polygon","id":28137,"arcs":[[-6988,7099,7100,-7044,-6981]]},{"type":"Polygon","id":5051,"arcs":[[-7060,7101,7102,-6839,-6926]]},{"type":"Polygon","id":40029,"arcs":[[-6845,7103,7104,-7020,-6851]]},{"type":"Polygon","id":28117,"arcs":[[-6976,7105,7106,7107,-6978,-6971]]},{"type":"Polygon","id":48437,"arcs":[[-6903,7108,7109,7110,7111,-6898]]},{"type":"Polygon","id":48045,"arcs":[[-6892,7112,7113,7114,-7109,-6902]]},{"type":"Polygon","id":48069,"arcs":[[-7112,7115,7116,7117,-6885,-6899]]},{"type":"Polygon","id":48191,"arcs":[[-6896,7118,7119,7120,-7113,-6891]]},{"type":"Polygon","id":48075,"arcs":[[-6955,7121,7122,-7119,-6895]]},{"type":"Polygon","id":5097,"arcs":[[-7103,7123,7124,7125,7126,-6927,-6840]]},{"type":"Polygon","id":48369,"arcs":[[-7118,7127,7128,-7030,-6886]]},{"type":"Polygon","id":13187,"arcs":[[-7093,7129,7130,-7003,-7011]]},{"type":"MultiPolygon","id":37141,"arcs":[[[7131,7132]],[[-7013,7133,7134,7135,7136,-7053,-6835,-6883]]]},{"type":"Polygon","id":5113,"arcs":[[7137,7138,7139,-6801,-6928,-7127]]},{"type":"Polygon","id":1103,"arcs":[[-6994,7140,7141,-7088,-6969]]},{"type":"Polygon","id":13257,"arcs":[[7142,7143,-7070,-6945]]},{"type":"Polygon","id":40137,"arcs":[[-7066,7144,7145,7146,-7061,-6807]]},{"type":"Polygon","id":40005,"arcs":[[7147,7148,7149,7150,-7104,-6844]]},{"type":"Polygon","id":40127,"arcs":[[-6803,7151,7152,-7148,-6843,-6941]]},{"type":"Polygon","id":5107,"arcs":[[-7048,7153,7154,7155,7156,-6964,-7038]]},{"type":"Polygon","id":40099,"arcs":[[-7022,7157,7158,-7064]]},{"type":"Polygon","id":40141,"arcs":[[-7063,7159,7160,7161,-7055,-6913]]},{"type":"Polygon","id":13129,"arcs":[[-7069,7162,7163,7164,-7016,-7006,-6999]]},{"type":"Polygon","id":45033,"arcs":[[7165,7166,7167,-7085,-7028]]},{"type":"Polygon","id":13085,"arcs":[[-7131,7168,7169,7170,7171,-7067,-7004]]},{"type":"Polygon","id":45055,"arcs":[[7172,7173,7174,7175,7176,-6938,-7083]]},{"type":"Polygon","id":35041,"arcs":[[-7032,7177,7178,7179,7180,-7097,-6586]]},{"type":"Polygon","id":28145,"arcs":[[-7108,7181,7182,7183,-6986,-6984,-6979]]},{"type":"Polygon","id":1095,"arcs":[[-7052,7184,7185,7186,-7141,-6993,-6996]]},{"type":"Polygon","id":13055,"arcs":[[7187,7188,-7049,-7018]]},{"type":"Polygon","id":13115,"arcs":[[-7165,7189,7190,7191,-7188,-7017]]},{"type":"Polygon","id":35053,"arcs":[[-6949,7192,7193,7194,-6824,-7024]]},{"type":"Polygon","id":35003,"arcs":[[-7195,7195,7196,7197,-5797,-6825]]},{"type":"Polygon","id":1059,"arcs":[[-7091,7198,7199,7200,-6974,-7040]]},{"type":"Polygon","id":48197,"arcs":[[-7057,7201,7202,7203,-7122,-6954]]},{"type":"Polygon","id":45039,"arcs":[[-6939,-7177,7204,7205,-7034,-7078]]},{"type":"Polygon","id":5001,"arcs":[[-6965,-7157,7206,7207,7208,-6934,-6930]]},{"type":"Polygon","id":13227,"arcs":[[-7172,7209,-7163,-7068]]},{"type":"Polygon","id":28071,"arcs":[[-7184,7210,7211,7212,7213,-7100,-6987]]},{"type":"Polygon","id":28107,"arcs":[[-7214,7214,7215,7216,-7045,-7101]]},{"type":"Polygon","id":13119,"arcs":[[7217,7218,7219,-7143,-6944]]},{"type":"Polygon","id":45031,"arcs":[[-7087,7220,7221,-7173,-7082]]},{"type":"Polygon","id":45071,"arcs":[[-7206,7222,7223,7224,7225,-7094,-7035]]},{"type":"Polygon","id":1019,"arcs":[[-7192,7226,7227,7228,7229,-7050,-7189]]},{"type":"Polygon","id":28027,"arcs":[[7230,7231,7232,-7154,-7047,7233]]},{"type":"Polygon","id":28119,"arcs":[[-7217,7234,-7234,-7046]]},{"type":"Polygon","id":13139,"arcs":[[-7072,7235,7236,7237,7238,-7169,-7130,-7092]]},{"type":"Polygon","id":28081,"arcs":[[7239,7240,7241,7242,-7182,-7107]]},{"type":"Polygon","id":40019,"arcs":[[-7159,7243,7244,7245,7246,-7145,-7065]]},{"type":"Polygon","id":40069,"arcs":[[-7021,-7105,-7151,7247,7248,-7244,-7158]]},{"type":"Polygon","id":40033,"arcs":[[-7147,7249,7250,7251,-7160,-7062]]},{"type":"Polygon","id":40089,"arcs":[[-7140,7252,7253,7254,7255,7256,-7152,-6802]]},{"type":"Polygon","id":5059,"arcs":[[-7059,7257,7258,7259,-7124,-7102]]},{"type":"Polygon","id":4007,"arcs":[[-5749,7260,7261,7262,-6693,-5751]]},{"type":"Polygon","id":13147,"arcs":[[-7081,7263,7264,-7218,-6943]]},{"type":"Polygon","id":5053,"arcs":[[-6957,7265,7266,7267,-7258,-7058]]},{"type":"Polygon","id":5069,"arcs":[[-6935,-7209,7268,7269,-7266,-6956]]},{"type":"Polygon","id":13011,"arcs":[[7270,7271,-7236,-7071,-7144,-7220]]},{"type":"Polygon","id":37047,"arcs":[[-7137,7272,7273,-7026,-7054]]},{"type":"Polygon","id":45001,"arcs":[[7274,7275,7276,-7079,-7096]]},{"type":"Polygon","id":28057,"arcs":[[-6975,-7201,7277,7278,-7240,-7106]]},{"type":"Polygon","id":48487,"arcs":[[-7162,7279,7280,7281,-7202,-7056]]},{"type":"Polygon","id":13015,"arcs":[[7282,7283,7284,-7190,-7164,7285]]},{"type":"Polygon","id":13057,"arcs":[[-7171,7286,7287,7288,-7286,-7210]]},{"type":"Polygon","id":45047,"arcs":[[-7226,7289,7290,7291,-7275,-7095]]},{"type":"MultiPolygon","id":37129,"arcs":[[[7292,7293]],[[7294,-7132,7295,7296,-7135]]]},{"type":"Polygon","id":28115,"arcs":[[-7243,7297,7298,-7211,-7183]]},{"type":"Polygon","id":45061,"arcs":[[7299,7300,-7174,-7222]]},{"type":"MultiPolygon","id":37019,"arcs":[[[7301,7302]],[[-7293,7303]],[[-7297,7304,7305,7306,7307,-7273,-7136]]]},{"type":"Polygon","id":5061,"arcs":[[7308,7309,7310,7311,-7138]]},{"type":"Polygon","id":5109,"arcs":[[7312,7313,7314,-7309,-7126]]},{"type":"Polygon","id":35027,"arcs":[[-7099,7315,7316,7317,-7193,-6948,-6865]]},{"type":"Polygon","id":5019,"arcs":[[-7260,7318,7319,7320,-7313,-7125]]},{"type":"Polygon","id":13117,"arcs":[[-7239,7321,7322,-7287,-7170]]},{"type":"Polygon","id":1093,"arcs":[[7323,7324,7325,7326,7327,-7278,-7200]]},{"type":"Polygon","id":4012,"arcs":[[-6695,7328,7329,7330,7331,-6550,7332]]},{"type":"Polygon","id":48345,"arcs":[[7333,7334,7335,-7114,-7121]]},{"type":"Polygon","id":48101,"arcs":[[-7123,-7204,7336,7337,-7334,-7120]]},{"type":"Polygon","id":1043,"arcs":[[-7187,7338,7339,7340,-7089,-7142]]},{"type":"Polygon","id":48153,"arcs":[[-7336,7341,7342,-7110,-7115]]},{"type":"Polygon","id":48189,"arcs":[[-7116,-7111,-7343,7343,7344]]},{"type":"Polygon","id":48279,"arcs":[[-7345,7345,7346,-7128,-7117]]},{"type":"Polygon","id":45041,"arcs":[[7347,7348,7349,7350,-7300,-7221,-7086,-7168]]},{"type":"Polygon","id":48017,"arcs":[[-7347,7351,-7178,-7031,-7129]]},{"type":"Polygon","id":1133,"arcs":[[-7090,-7341,7352,-7324,-7199]]},{"type":"MultiPolygon","id":45051,"arcs":[[[-7302,7353]],[[-7306,7354]],[[-7274,-7308,7355,7356,7357,-7166,-7027]]]},{"type":"Polygon","id":45067,"arcs":[[-7358,7358,7359,-7348,-7167]]},{"type":"Polygon","id":13157,"arcs":[[7360,7361,7362,-7237,-7272]]},{"type":"Polygon","id":40067,"arcs":[[-7247,7363,7364,7365,-7250,-7146]]},{"type":"Polygon","id":13105,"arcs":[[-7277,7366,7367,7368,7369,7370,-7264,-7080]]},{"type":"Polygon","id":13195,"arcs":[[-7371,7371,7372,-7361,-7271,-7219,-7265]]},{"type":"Polygon","id":45079,"arcs":[[7373,7374,7375,-7223,-7205,-7176]]},{"type":"Polygon","id":1009,"arcs":[[-7186,7376,7377,7378,7379,-7339]]},{"type":"Polygon","id":48155,"arcs":[[-7203,-7282,7380,7381,7382,-7337]]},{"type":"Polygon","id":48485,"arcs":[[-7252,7383,7384,-7280,-7161]]},{"type":"Polygon","id":1055,"arcs":[[-7230,7385,7386,-7377,-7185,-7051]]},{"type":"Polygon","id":45063,"arcs":[[7387,7388,7389,7390,-7224,-7376]]},{"type":"Polygon","id":28161,"arcs":[[7391,7392,7393,-7215,-7213]]},{"type":"Polygon","id":5133,"arcs":[[7394,-7253,-7139,-7312]]},{"type":"Polygon","id":45081,"arcs":[[-7391,7395,7396,-7290,-7225]]},{"type":"Polygon","id":13121,"arcs":[[-7323,7397,7398,7399,7400,7401,7402,7403,7404,-7288]]},{"type":"Polygon","id":40095,"arcs":[[7405,7406,7407,-7245,-7249]]},{"type":"Polygon","id":5079,"arcs":[[-7208,7408,7409,7410,-7269]]},{"type":"Polygon","id":45085,"arcs":[[-7351,7411,7412,-7374,-7175,-7301]]},{"type":"Polygon","id":13135,"arcs":[[7413,7414,7415,7416,-7398,-7322,-7238]]},{"type":"Polygon","id":28135,"arcs":[[-7394,7417,7418,7419,-7231,-7235,-7216]]},{"type":"Polygon","id":28013,"arcs":[[-7299,7420,7421,7422,-7392,-7212]]},{"type":"Polygon","id":40013,"arcs":[[7423,7424,7425,7426,-7406,-7248,-7150]]},{"type":"Polygon","id":40023,"arcs":[[-7257,7427,7428,-7424,-7149,-7153]]},{"type":"Polygon","id":5039,"arcs":[[-7268,7429,7430,7431,-7319,-7259]]},{"type":"Polygon","id":48077,"arcs":[[-7366,7432,7433,7434,-7384,-7251]]},{"type":"Polygon","id":13013,"arcs":[[7435,7436,-7414,-7363]]},{"type":"Polygon","id":28011,"arcs":[[7437,7438,7439,7440,-7155,-7233]]},{"type":"Polygon","id":5041,"arcs":[[-7441,7441,7442,-7409,-7207,-7156]]},{"type":"Polygon","id":13233,"arcs":[[-7285,7443,7444,7445,-7227,-7191]]},{"type":"Polygon","id":28095,"arcs":[[-7279,-7328,7446,7447,7448,7449,-7241]]},{"type":"Polygon","id":35005,"arcs":[[-7181,7450,7451,7452,-7316,-7098]]},{"type":"Polygon","id":13067,"arcs":[[-7405,7453,7454,-7283,-7289]]},{"type":"Polygon","id":6065,"arcs":[[7455,7456,7457,-6551,-7332]]},{"type":"Polygon","id":13223,"arcs":[[-7455,7458,7459,7460,-7444,-7284]]},{"type":"Polygon","id":45065,"arcs":[[-7292,7461,7462,7463,-7367,-7276]]},{"type":"Polygon","id":28017,"arcs":[[-7242,-7450,7464,7465,-7421,-7298]]},{"type":"Polygon","id":40085,"arcs":[[-7408,7466,7467,7468,-7364,-7246]]},{"type":"Polygon","id":5025,"arcs":[[-7411,7469,7470,7471,-7430,-7267,-7270]]},{"type":"Polygon","id":1075,"arcs":[[7472,7473,7474,-7447,-7327]]},{"type":"Polygon","id":13221,"arcs":[[-7370,7475,7476,7477,7478,7479,-7372]]},{"type":"Polygon","id":4013,"arcs":[[-7263,7480,7481,7482,-7329,-6694]]},{"type":"Polygon","id":13059,"arcs":[[-7480,7483,-7362,-7373]]},{"type":"Polygon","id":5057,"arcs":[[7484,7485,7486,7487,-7310,-7315]]},{"type":"Polygon","id":1127,"arcs":[[-7340,-7380,7488,7489,7490,-7325,-7353]]},{"type":"Polygon","id":13317,"arcs":[[7491,7492,7493,7494,-7476,-7369]]},{"type":"Polygon","id":48337,"arcs":[[-7469,7495,7496,7497,-7433,-7365]]},{"type":"Polygon","id":1115,"arcs":[[7498,7499,7500,7501,-7378,-7387]]},{"type":"Polygon","id":28133,"arcs":[[-7420,7502,7503,7504,-7438,-7232]]},{"type":"Polygon","id":13181,"arcs":[[-7464,7505,7506,-7492,-7368]]},{"type":"Polygon","id":45037,"arcs":[[7507,7508,7509,-7462,-7291,-7397]]},{"type":"Polygon","id":13089,"arcs":[[-7417,7510,7511,7512,-7399]]},{"type":"Polygon","id":1015,"arcs":[[7513,-7499,-7386,-7229,7514]]},{"type":"Polygon","id":13219,"arcs":[[-7479,7515,7516,7517,-7436,-7484]]},{"type":"Polygon","id":1029,"arcs":[[-7446,7518,7519,7520,7521,7522,-7515,-7228]]},{"type":"Polygon","id":48387,"arcs":[[-7256,7523,7524,7525,7526,7527,7528,-7428]]},{"type":"Polygon","id":5099,"arcs":[[-7321,7529,7530,7531,-7485,-7314]]},{"type":"Polygon","id":48181,"arcs":[[-7427,7532,7533,7534,7535,-7467,-7407]]},{"type":"Polygon","id":48097,"arcs":[[-7536,7536,7537,-7496,-7468]]},{"type":"Polygon","id":5081,"arcs":[[-7311,-7488,7538,7539,-7254,-7395]]},{"type":"Polygon","id":45027,"arcs":[[7540,7541,7542,7543,-7412,-7350]]},{"type":"MultiPolygon","id":6059,"arcs":[[[-6552,-7458,7544,7545,-7076]]]},{"type":"Polygon","id":48277,"arcs":[[-7529,7546,7547,-7425,-7429]]},{"type":"Polygon","id":13297,"arcs":[[-7518,7548,7549,7550,-7415,-7437]]},{"type":"Polygon","id":1057,"arcs":[[-7491,7551,7552,-7473,-7326]]},{"type":"Polygon","id":13143,"arcs":[[7553,-7519,-7445,-7461]]},{"type":"Polygon","id":28043,"arcs":[[-7423,7554,7555,7556,7557,-7418,-7393]]},{"type":"Polygon","id":45089,"arcs":[[-7360,7558,7559,-7541,-7349]]},{"type":"Polygon","id":48147,"arcs":[[-7548,7560,7561,7562,-7533,-7426]]},{"type":"Polygon","id":45017,"arcs":[[-7413,-7544,7563,-7388,-7375]]},{"type":"Polygon","id":45003,"arcs":[[7564,7565,7566,7567,-7508,-7396,-7390]]},{"type":"Polygon","id":1073,"arcs":[[-7502,7568,7569,7570,-7489,-7379]]},{"type":"Polygon","id":48269,"arcs":[[-7383,7571,7572,7573,-7338]]},{"type":"Polygon","id":48275,"arcs":[[7574,7575,-7572,-7382]]},{"type":"Polygon","id":48009,"arcs":[[-7435,7576,7577,7578,-7385]]},{"type":"Polygon","id":48125,"arcs":[[-7574,7579,7580,-7335]]},{"type":"Polygon","id":48107,"arcs":[[-7581,7581,7582,-7342]]},{"type":"Polygon","id":48023,"arcs":[[-7579,7583,-7575,-7381,-7281]]},{"type":"Polygon","id":48303,"arcs":[[-7583,7584,7585,-7344]]},{"type":"Polygon","id":48079,"arcs":[[7586,7587,7588,-7179,-7352]]},{"type":"Polygon","id":48219,"arcs":[[-7586,7589,-7587,-7346]]},{"type":"Polygon","id":5103,"arcs":[[-7432,7590,7591,7592,-7530,-7320]]},{"type":"Polygon","id":13211,"arcs":[[7593,7594,7595,7596,-7549,-7517]]},{"type":"Polygon","id":13045,"arcs":[[-7403,7597,7598,7599,-7520,-7554,-7460,7600]]},{"type":"Polygon","id":28083,"arcs":[[-7558,7601,7602,7603,-7503,-7419]]},{"type":"Polygon","id":28025,"arcs":[[-7449,7604,7605,7606,-7465]]},{"type":"Polygon","id":13097,"arcs":[[-7404,-7601,-7459,-7454]]},{"type":"Polygon","id":5013,"arcs":[[7607,7608,-7591,-7431,-7472]]},{"type":"Polygon","id":5043,"arcs":[[-7443,7609,7610,7611,-7470,-7410]]},{"type":"Polygon","id":13247,"arcs":[[7612,-7511,-7416,-7551,7613]]},{"type":"MultiPolygon","id":45043,"arcs":[[[7614,7615]],[[-7357,7616,7617,7618,-7559,-7359]]]},{"type":"Polygon","id":4011,"arcs":[[-7198,7619,7620,7621,7622,-5798]]},{"type":"Polygon","id":13133,"arcs":[[7623,7624,7625,-7594,-7516,-7478]]},{"type":"Polygon","id":28087,"arcs":[[-7475,7626,7627,7628,-7605,-7448]]},{"type":"Polygon","id":13217,"arcs":[[-7597,7629,7630,7631,-7614,-7550]]},{"type":"Polygon","id":28155,"arcs":[[-7607,7632,7633,7634,-7555,-7422,-7466]]},{"type":"Polygon","id":13265,"arcs":[[7635,7636,-7624,-7477,-7495]]},{"type":"Polygon","id":48037,"arcs":[[-7540,7637,7638,7639,-7524,-7255]]},{"type":"Polygon","id":45075,"arcs":[[-7543,7640,7641,7642,7643,7644,-7565,-7389,-7564]]},{"type":"Polygon","id":5011,"arcs":[[-7612,7645,7646,-7608,-7471]]},{"type":"Polygon","id":13073,"arcs":[[-7463,-7510,7647,7648,-7506]]},{"type":"Polygon","id":1121,"arcs":[[-7514,-7523,7649,7650,7651,-7500]]},{"type":"Polygon","id":28097,"arcs":[[-7635,7652,7653,7654,-7556]]},{"type":"Polygon","id":28015,"arcs":[[-7655,7655,7656,-7602,-7557]]},{"type":"Polygon","id":13189,"arcs":[[-7507,-7649,7657,7658,7659,-7493]]},{"type":"Polygon","id":4009,"arcs":[[-7623,7660,7661,7662,-7261,-5748,-5799]]},{"type":"Polygon","id":13063,"arcs":[[-7513,7663,7664,7665,-7400]]},{"type":"Polygon","id":13151,"arcs":[[-7613,-7632,7666,7667,-7664,-7512]]},{"type":"Polygon","id":5091,"arcs":[[7668,7669,7670,7671,-7638,-7539,-7487]]},{"type":"Polygon","id":13301,"arcs":[[7672,7673,7674,-7636,-7494,-7660]]},{"type":"Polygon","id":1125,"arcs":[[-7490,-7571,7675,7676,7677,7678,-7552]]},{"type":"Polygon","id":35025,"arcs":[[-7589,7679,7680,7681,7682,7683,7684,-7451,-7180]]},{"type":"Polygon","id":28105,"arcs":[[-7629,7685,7686,7687,-7633,-7606]]},{"type":"Polygon","id":5017,"arcs":[[-7440,7688,7689,7690,7691,7692,7693,-7610,-7442]]},{"type":"Polygon","id":13113,"arcs":[[7694,7695,-7401,-7666]]},{"type":"Polygon","id":1117,"arcs":[[-7652,7696,7697,7698,-7569,-7501]]},{"type":"Polygon","id":13245,"arcs":[[7699,7700,-7658,-7648,-7509,-7568]]},{"type":"Polygon","id":1107,"arcs":[[-7553,-7679,7701,7702,7703,-7627,-7474]]},{"type":"Polygon","id":28019,"arcs":[[-7688,7704,7705,-7653,-7634]]},{"type":"Polygon","id":28151,"arcs":[[-7505,7706,7707,7708,-7689,-7439]]},{"type":"Polygon","id":13159,"arcs":[[7709,7710,7711,7712,-7630,-7596]]},{"type":"Polygon","id":13077,"arcs":[[-7696,7713,7714,7715,7716,-7598,-7402]]},{"type":"Polygon","id":45015,"arcs":[[-7619,7717,7718,7719,7720,-7641,-7542,-7560]]},{"type":"MultiPolygon","id":6073,"arcs":[[[7721,7722,-7545,-7457]]]},{"type":"Polygon","id":1111,"arcs":[[-7600,7723,7724,7725,7726,7727,-7521]]},{"type":"Polygon","id":1027,"arcs":[[-7728,7728,7729,-7650,-7522]]},{"type":"Polygon","id":48119,"arcs":[[-7528,7730,7731,7732,-7561,-7547]]},{"type":"Polygon","id":45011,"arcs":[[7733,7734,7735,-7566,-7645]]},{"type":"Polygon","id":13237,"arcs":[[7736,7737,7738,-7710,-7595,-7626]]},{"type":"Polygon","id":35051,"arcs":[[-7318,7739,7740,7741,7742,-7196,-7194]]},{"type":"Polygon","id":5073,"arcs":[[-7532,7743,7744,7745,-7669,-7486]]},{"type":"Polygon","id":13141,"arcs":[[-7675,7746,7747,7748,-7737,-7625,-7637]]},{"type":"Polygon","id":4027,"arcs":[[-7483,7749,7750,7751,-7330]]},{"type":"Polygon","id":4021,"arcs":[[-7262,-7663,7752,-7481]]},{"type":"Polygon","id":48237,"arcs":[[-7498,7753,7754,7755,7756,-7577,-7434]]},{"type":"Polygon","id":5027,"arcs":[[-7593,7757,7758,7759,-7744,-7531]]},{"type":"Polygon","id":13035,"arcs":[[-7713,7760,7761,7762,-7667,-7631]]},{"type":"Polygon","id":45009,"arcs":[[7763,7764,-7734,-7644]]},{"type":"Polygon","id":6025,"arcs":[[-7752,7765,-7722,-7456,-7331]]},{"type":"Polygon","id":48497,"arcs":[[-7538,7766,7767,7768,-7754,-7497]]},{"type":"Polygon","id":48121,"arcs":[[7769,7770,7771,-7767,-7537,-7535]]},{"type":"Polygon","id":13149,"arcs":[[-7717,7772,-7724,-7599]]},{"type":"Polygon","id":48231,"arcs":[[7773,7774,7775,7776,7777,-7562,-7733,7778]]},{"type":"Polygon","id":48085,"arcs":[[-7563,-7778,7779,7780,-7770,-7534]]},{"type":"Polygon","id":48263,"arcs":[[7781,7782,7783,7784,-7580]]},{"type":"Polygon","id":48433,"arcs":[[7785,7786,7787,-7782,-7573]]},{"type":"Polygon","id":48449,"arcs":[[7788,7789,7790,-7526]]},{"type":"Polygon","id":48169,"arcs":[[-7785,7791,7792,7793,-7582]]},{"type":"Polygon","id":48447,"arcs":[[7794,7795,7796,7797,-7584]]},{"type":"Polygon","id":48503,"arcs":[[-7757,7798,7799,-7795,-7578]]},{"type":"Polygon","id":48207,"arcs":[[-7798,7800,7801,-7786,-7576]]},{"type":"Polygon","id":5003,"arcs":[[-7694,7802,7803,-7646,-7611]]},{"type":"Polygon","id":48305,"arcs":[[-7794,7804,7805,7806,-7585]]},{"type":"Polygon","id":35035,"arcs":[[-7453,7807,7808,7809,7810,7811,-7740,-7317]]},{"type":"Polygon","id":48501,"arcs":[[7812,7813,-7680,-7588]]},{"type":"Polygon","id":48445,"arcs":[[-7807,7814,7815,-7813,-7590]]},{"type":"Polygon","id":48159,"arcs":[[-7791,7816,7817,7818,-7731,-7527]]},{"type":"Polygon","id":5139,"arcs":[[-7609,-7647,-7804,7819,7820,-7758,-7592]]},{"type":"Polygon","id":48223,"arcs":[[-7819,7821,7822,-7779,-7732]]},{"type":"Polygon","id":48343,"arcs":[[-7640,7823,7824,7825,7826,-7789,-7525]]},{"type":"Polygon","id":28051,"arcs":[[-7657,7827,7828,7829,-7603]]},{"type":"Polygon","id":13255,"arcs":[[-7763,7830,7831,7832,-7714,-7695,-7665,-7668]]},{"type":"Polygon","id":45035,"arcs":[[-7721,7833,7834,-7642]]},{"type":"Polygon","id":28053,"arcs":[[-7604,-7830,7835,7836,-7707,-7504]]},{"type":"Polygon","id":13125,"arcs":[[7837,7838,-7747,-7674]]},{"type":"Polygon","id":13163,"arcs":[[7839,7840,7841,7842,-7838,-7673,-7659,-7701]]},{"type":"Polygon","id":48067,"arcs":[[-7672,7843,7844,-7824,-7639]]},{"type":"Polygon","id":13033,"arcs":[[-7567,-7736,7845,7846,7847,7848,-7840,-7700]]},{"type":"Polygon","id":28103,"arcs":[[-7704,7849,7850,7851,-7686,-7628]]},{"type":"Polygon","id":28159,"arcs":[[-7852,7852,7853,7854,-7705,-7687]]},{"type":"Polygon","id":28007,"arcs":[[-7855,7855,7856,-7828,-7656,-7654,-7706]]},{"type":"Polygon","id":1007,"arcs":[[7857,7858,7859,-7676,-7570,-7699]]},{"type":"Polygon","id":13303,"arcs":[[-7839,-7843,7860,7861,7862,-7748]]},{"type":"Polygon","id":13199,"arcs":[[-7833,7863,7864,7865,7866,7867,-7715]]},{"type":"Polygon","id":13285,"arcs":[[-7868,7868,7869,-7725,-7773,-7716]]},{"type":"Polygon","id":35017,"arcs":[[-7743,7870,7871,-7620,-7197]]},{"type":"Polygon","id":13231,"arcs":[[7872,7873,-7864,-7832]]},{"type":"Polygon","id":13171,"arcs":[[7874,7875,-7873,-7831,-7762]]},{"type":"Polygon","id":13207,"arcs":[[-7712,7876,7877,7878,7879,-7875,-7761]]},{"type":"Polygon","id":13009,"arcs":[[-7749,-7863,7880,7881,-7738]]},{"type":"Polygon","id":13169,"arcs":[[-7882,7882,7883,7884,-7877,-7711,-7739]]},{"type":"MultiPolygon","id":45029,"arcs":[[[7885,7886]],[[-7835,7887,7888,7889,7890,-7764,-7643]]]},{"type":"Polygon","id":45005,"arcs":[[-7765,7891,7892,-7846,-7735]]},{"type":"Polygon","id":1063,"arcs":[[7893,7894,7895,-7702,-7678]]},{"type":"Polygon","id":1017,"arcs":[[-7870,7896,7897,7898,-7726]]},{"type":"Polygon","id":1123,"arcs":[[-7899,7899,7900,7901,7902,-7729,-7727]]},{"type":"Polygon","id":1037,"arcs":[[-7903,7903,7904,-7697,-7651,-7730]]},{"type":"Polygon","id":28125,"arcs":[[-7837,7905,7906,-7708]]},{"type":"Polygon","id":48063,"arcs":[[-7827,7907,7908,-7817,-7790]]},{"type":"Polygon","id":1021,"arcs":[[-7905,7909,7910,7911,7912,-7858,-7698]]},{"type":"Polygon","id":35013,"arcs":[[7913,7914,7915,-7741,-7812]]},{"type":"Polygon","id":13251,"arcs":[[7916,7917,7918,7919,-7847,-7893]]},{"type":"Polygon","id":45049,"arcs":[[7920,7921,7922,-7917,-7892,-7891]]},{"type":"Polygon","id":28163,"arcs":[[7923,7924,7925,7926,-7906,-7836,-7829]]},{"type":"Polygon","id":22017,"arcs":[[7927,7928,7929,7930,7931,-7844,-7671,7932]]},{"type":"Polygon","id":22015,"arcs":[[7933,7934,7935,-7933,-7670,-7746]]},{"type":"Polygon","id":22119,"arcs":[[7936,-7934,-7745,-7760,7937]]},{"type":"Polygon","id":22027,"arcs":[[7938,7939,-7938,-7759,-7821,7940]]},{"type":"Polygon","id":22111,"arcs":[[7941,7942,-7941,-7820,7943]]},{"type":"Polygon","id":48499,"arcs":[[7944,7945,7946,7947,-7822,-7818,-7909]]},{"type":"Polygon","id":28055,"arcs":[[-7907,-7927,7948,7949,-7690,-7709]]},{"type":"Polygon","id":13319,"arcs":[[-7862,7950,7951,7952,-7883,-7881]]},{"type":"Polygon","id":22067,"arcs":[[-7693,7953,7954,7955,-7944,-7803]]},{"type":"Polygon","id":1065,"arcs":[[-7860,7956,7957,-7894,-7677]]},{"type":"Polygon","id":22123,"arcs":[[7958,7959,-7954,-7692]]},{"type":"Polygon","id":48363,"arcs":[[7960,7961,7962,7963,7964,-7799,-7756]]},{"type":"Polygon","id":22035,"arcs":[[7965,7966,7967,-7959,-7691,-7950]]},{"type":"Polygon","id":48367,"arcs":[[7968,7969,7970,-7961,-7755,-7769]]},{"type":"Polygon","id":13293,"arcs":[[-7876,-7880,7971,7972,7973,-7865,-7874]]},{"type":"Polygon","id":1119,"arcs":[[7974,7975,7976,7977,-7850,-7703,-7896]]},{"type":"Polygon","id":48439,"arcs":[[-7768,-7772,7978,7979,7980,-7969]]},{"type":"Polygon","id":48113,"arcs":[[-7781,7981,7982,7983,-7979,-7771]]},{"type":"Polygon","id":48397,"arcs":[[-7777,7984,-7982,-7780]]},{"type":"Polygon","id":48379,"arcs":[[-7948,7985,-7774,-7823]]},{"type":"Polygon","id":48415,"arcs":[[7986,7987,7988,-7792,-7784]]},{"type":"Polygon","id":35015,"arcs":[[-7685,7989,7990,7991,-7808,-7452]]},{"type":"Polygon","id":48151,"arcs":[[-7788,7992,7993,-7987,-7783]]},{"type":"Polygon","id":48033,"arcs":[[-7989,7994,7995,7996,-7805,-7793]]},{"type":"Polygon","id":48115,"arcs":[[-7997,7997,7998,-7815,-7806]]},{"type":"Polygon","id":48165,"arcs":[[-7816,-7999,7999,8000,-7681,-7814]]},{"type":"Polygon","id":48253,"arcs":[[-7802,8001,8002,8003,-7993,-7787]]},{"type":"Polygon","id":48417,"arcs":[[8004,8005,8006,-8002,-7801,-7797]]},{"type":"Polygon","id":48429,"arcs":[[-7965,8007,-8005,-7796,-7800]]},{"type":"Polygon","id":13165,"arcs":[[-7920,8008,8009,-7848]]},{"type":"Polygon","id":13021,"arcs":[[8010,8011,8012,-7878,-7885]]},{"type":"Polygon","id":28099,"arcs":[[8013,8014,8015,-7854]]},{"type":"Polygon","id":28079,"arcs":[[-8016,8016,8017,8018,-7856]]},{"type":"Polygon","id":28069,"arcs":[[-7978,8019,-8014,-7853,-7851]]},{"type":"Polygon","id":48459,"arcs":[[-7826,8020,8021,8022,8023,-7945,-7908]]},{"type":"Polygon","id":13289,"arcs":[[8024,8025,-8011,-7884,-7953]]},{"type":"Polygon","id":13263,"arcs":[[8026,8027,8028,8029,8030,-7866,-7974]]},{"type":"Polygon","id":48315,"arcs":[[-7932,8031,-8021,-7825,-7845]]},{"type":"Polygon","id":28089,"arcs":[[-8019,8032,8033,8034,-7924,-7857]]},{"type":"Polygon","id":1105,"arcs":[[-7913,8035,8036,-7957,-7859]]},{"type":"Polygon","id":13145,"arcs":[[-8031,8037,8038,-7897,-7869,-7867]]},{"type":"Polygon","id":13079,"arcs":[[-8013,8039,8040,8041,-7972,-7879]]},{"type":"Polygon","id":48257,"arcs":[[8042,8043,8044,-7983,-7985,-7776]]},{"type":"Polygon","id":13107,"arcs":[[-7849,-8010,8045,8046,8047,8048,8049,8050,-7841]]},{"type":"Polygon","id":48467,"arcs":[[-7986,-7947,8051,8052,-8043,-7775]]},{"type":"Polygon","id":13167,"arcs":[[-8051,8053,-7951,-7861,-7842]]},{"type":"Polygon","id":48203,"arcs":[[-7931,8054,8055,8056,-8022,-8032]]},{"type":"Polygon","id":35023,"arcs":[[8057,8058,8059,-7621,-7872]]},{"type":"Polygon","id":1051,"arcs":[[8060,8061,8062,-7910,-7904,-7902]]},{"type":"Polygon","id":22061,"arcs":[[8063,8064,8065,-7939,-7943]]},{"type":"MultiPolygon","id":45053,"arcs":[[[8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,-7922]]]},{"type":"Polygon","id":13269,"arcs":[[-8042,8076,8077,8078,8079,-8027,-7973]]},{"type":"Polygon","id":1081,"arcs":[[-8039,8080,8081,8082,-7900,-7898]]},{"type":"Polygon","id":1047,"arcs":[[8083,8084,8085,8086,-8036,-7912]]},{"type":"Polygon","id":22073,"arcs":[[8087,8088,8089,-8064,-7942,-7956]]},{"type":"Polygon","id":13175,"arcs":[[8090,8091,8092,-7952,-8054,8093]]},{"type":"Polygon","id":1001,"arcs":[[-8063,8094,8095,-8084,-7911]]},{"type":"MultiPolygon","id":45013,"arcs":[[[8096]],[[-8073,8097]],[[-8071,8098]],[[-8069,8099]],[[8100]],[[8101]],[[8102,-8067,-7921,-7890]]]},{"type":"Polygon","id":13225,"arcs":[[8103,-8077,-8041,8104]]},{"type":"Polygon","id":13153,"arcs":[[-8026,8105,8106,8107,8108,-8105,-8040,-8012]]},{"type":"Polygon","id":48423,"arcs":[[-8024,8109,8110,8111,8112,-8052,-7946]]},{"type":"Polygon","id":22083,"arcs":[[-7968,8113,8114,8115,-8088,-7955,-7960]]},{"type":"Polygon","id":48183,"arcs":[[-8057,8116,-8110,-8023]]},{"type":"Polygon","id":13031,"arcs":[[8117,8118,8119,8120,-8046,-8009,-7919]]},{"type":"Polygon","id":28123,"arcs":[[-8018,8121,8122,8123,-8033]]},{"type":"Polygon","id":28149,"arcs":[[8124,8125,8126,8127,8128,8129,-7966,-7949,-7926]]},{"type":"Polygon","id":13215,"arcs":[[-8030,8130,8131,-8081,-8038]]},{"type":"Polygon","id":35029,"arcs":[[-7916,8132,-8058,-7871,-7742]]},{"type":"Polygon","id":13103,"arcs":[[-8076,8133,8134,-8118,-7918,-7923]]},{"type":"Polygon","id":1087,"arcs":[[8135,8136,8137,-8061,-7901,-8083]]},{"type":"Polygon","id":28121,"arcs":[[-8124,8138,8139,8140,-8034]]},{"type":"Polygon","id":22013,"arcs":[[-8066,8141,8142,8143,8144,-7935,-7937,-7940]]},{"type":"Polygon","id":13023,"arcs":[[8145,8146,-8106,-8025,-8093]]},{"type":"Polygon","id":28075,"arcs":[[-7977,8147,8148,8149,-8020]]},{"type":"Polygon","id":28101,"arcs":[[-8150,8150,-8122,-8017,-8015]]},{"type":"Polygon","id":28049,"arcs":[[-8141,8151,8152,-8125,-7925,-8035]]},{"type":"MultiPolygon","id":22065,"arcs":[[[8153,-8128]],[[8154,8155,-8114,-7967,-8130]]]},{"type":"Polygon","id":13197,"arcs":[[8156,8157,8158,8159,8160,-8028,-8080]]},{"type":"Polygon","id":13043,"arcs":[[8161,8162,-8047,-8121]]},{"type":"Polygon","id":48221,"arcs":[[8163,8164,8165,-7962,-7971]]},{"type":"Polygon","id":48251,"arcs":[[8166,8167,8168,8169,-8164,-7970,-7981]]},{"type":"Polygon","id":48139,"arcs":[[-7984,-8045,8170,8171,8172,-8167,-7980]]},{"type":"Polygon","id":1091,"arcs":[[-7958,-8037,-8087,8173,8174,8175,-7975,-7895]]},{"type":"Polygon","id":13053,"arcs":[[-8161,8176,8177,-8131,-8029]]},{"type":"Polygon","id":48227,"arcs":[[8178,8179,8180,8181,-7996]]},{"type":"Polygon","id":48335,"arcs":[[8182,8183,8184,-8179,-7995,-7988]]},{"type":"Polygon","id":48353,"arcs":[[8185,8186,8187,-8183,-7994]]},{"type":"Polygon","id":48317,"arcs":[[-8182,8188,8189,8190,-8000,-7998]]},{"type":"Polygon","id":48003,"arcs":[[-8191,8191,8192,8193,-7682,-8001]]},{"type":"Polygon","id":13193,"arcs":[[-8104,-8109,8194,8195,8196,-8078]]},{"type":"Polygon","id":48441,"arcs":[[8197,8198,8199,-8186,-8004]]},{"type":"Polygon","id":48133,"arcs":[[-7964,8200,8201,8202,8203,-8006,-8008]]},{"type":"Polygon","id":48143,"arcs":[[-7963,-8166,8204,8205,8206,8207,-8201]]},{"type":"Polygon","id":48059,"arcs":[[-8204,8208,8209,-8198,-8003,-8007]]},{"type":"Polygon","id":4019,"arcs":[[-7662,8210,8211,8212,-7750,-7482,-7753]]},{"type":"Polygon","id":13283,"arcs":[[8213,8214,-8094,-8050]]},{"type":"Polygon","id":1113,"arcs":[[-8132,-8178,8215,8216,8217,-8136,-8082]]},{"type":"Polygon","id":1101,"arcs":[[-8138,8218,8219,8220,8221,-8095,-8062]]},{"type":"Polygon","id":22049,"arcs":[[-8090,8222,8223,-8142,-8065]]},{"type":"Polygon","id":13091,"arcs":[[8224,8225,8226,8227,-8146,-8092]]},{"type":"Polygon","id":13249,"arcs":[[-8197,8228,-8157,-8079]]},{"type":"Polygon","id":4003,"arcs":[[-7622,-8060,8229,8230,-8211,-7661]]},{"type":"Polygon","id":1085,"arcs":[[-8222,8231,8232,8233,-8085,-8096]]},{"type":"Polygon","id":48401,"arcs":[[8234,8235,8236,8237,-8111,-8117,-8056]]},{"type":"Polygon","id":22041,"arcs":[[-8156,8238,8239,8240,-8115]]},{"type":"Polygon","id":13235,"arcs":[[-8147,-8228,8241,8242,-8107]]},{"type":"Polygon","id":48365,"arcs":[[-7930,8243,8244,-8235,-8055]]},{"type":"Polygon","id":48213,"arcs":[[-8053,-8113,8245,8246,8247,8248,-8171,-8044]]},{"type":"Polygon","id":13209,"arcs":[[8249,8250,-8214,8251]]},{"type":"Polygon","id":13279,"arcs":[[-8049,8252,8253,8254,-8252]]},{"type":"Polygon","id":22031,"arcs":[[8255,8256,8257,8258,-8244,-7929]]},{"type":"Polygon","id":48349,"arcs":[[8259,8260,8261,-8172,-8249]]},{"type":"Polygon","id":48425,"arcs":[[-8170,8262,-8205,-8165]]},{"type":"Polygon","id":13267,"arcs":[[8263,8264,8265,8266,8267,-8253,-8048,-8163]]},{"type":"Polygon","id":1023,"arcs":[[8268,8269,8270,8271,-8148,-7976,-8176]]},{"type":"Polygon","id":13309,"arcs":[[-8251,8272,8273,-8225,-8091,-8215]]},{"type":"Polygon","id":1011,"arcs":[[-8218,8274,8275,-8219,-8137]]},{"type":"Polygon","id":13093,"arcs":[[-8243,8276,8277,8278,-8195,-8108]]},{"type":"Polygon","id":13109,"arcs":[[-8120,8279,8280,-8264,-8162]]},{"type":"Polygon","id":22021,"arcs":[[-8116,-8241,8281,8282,8283,-8223,-8089]]},{"type":"Polygon","id":1131,"arcs":[[-8086,-8234,8284,8285,8286,-8174]]},{"type":"Polygon","id":48217,"arcs":[[-8262,8287,8288,8289,-8168,-8173]]},{"type":"Polygon","id":48093,"arcs":[[8290,8291,8292,-8202,-8208]]},{"type":"Polygon","id":22107,"arcs":[[-8129,-8154,-8127,8293,8294,8295,8296,8297,-8239,-8155]]},{"type":"MultiPolygon","id":13029,"arcs":[[[8298,8299,8300,-8280,-8119,-8135]]]},{"type":"Polygon","id":22081,"arcs":[[-7936,-8145,8301,-8256,-7928]]},{"type":"MultiPolygon","id":13051,"arcs":[[[8302]],[[8303]],[[8304,-8299,-8134,-8075]]]},{"type":"Polygon","id":13307,"arcs":[[8305,8306,8307,8308,-8159]]},{"type":"Polygon","id":13259,"arcs":[[-8309,8309,8310,8311,-8216,-8177,-8160]]},{"type":"Polygon","id":13261,"arcs":[[-8279,8312,8313,8314,-8306,-8158,-8229,-8196]]},{"type":"Polygon","id":28023,"arcs":[[-8272,8315,8316,-8149]]},{"type":"Polygon","id":28021,"arcs":[[-8153,8317,8318,-8294,-8126]]},{"type":"Polygon","id":28061,"arcs":[[-8317,8319,8320,8321,-8151]]},{"type":"Polygon","id":28129,"arcs":[[-8322,8322,8323,8324,-8139,-8123]]},{"type":"Polygon","id":48035,"arcs":[[-8169,-8290,8325,8326,8327,-8206,-8263]]},{"type":"Polygon","id":13271,"arcs":[[8328,8329,8330,8331,-8226,-8274]]},{"type":"Polygon","id":22127,"arcs":[[-8224,-8284,8332,8333,8334,-8143]]},{"type":"Polygon","id":22069,"arcs":[[-8335,8335,8336,8337,8338,-8257,-8302,-8144]]},{"type":"Polygon","id":1005,"arcs":[[-8312,8339,8340,8341,8342,8343,-8275,-8217]]},{"type":"Polygon","id":48073,"arcs":[[-8238,8344,8345,8346,8347,-8246,-8112]]},{"type":"Polygon","id":13315,"arcs":[[-8227,-8332,8348,8349,8350,-8277,-8242]]},{"type":"MultiPolygon","id":13179,"arcs":[[[8351]],[[8352,8353,8354,-8265,-8281,-8301,8355]]]},{"type":"Polygon","id":48431,"arcs":[[-8185,8356,8357,8358,8359,-8180]]},{"type":"Polygon","id":48173,"arcs":[[-8360,8360,8361,-8189,-8181]]},{"type":"Polygon","id":48329,"arcs":[[-8362,8362,8363,-8192,-8190]]},{"type":"Polygon","id":48135,"arcs":[[-8364,8364,8365,8366,8367,-8193]]},{"type":"Polygon","id":48495,"arcs":[[-8368,8368,8369,-7683,-8194]]},{"type":"Polygon","id":48081,"arcs":[[-8188,8370,8371,-8357,-8184]]},{"type":"Polygon","id":48001,"arcs":[[8372,8373,8374,-8247,-8348]]},{"type":"Polygon","id":48083,"arcs":[[-8210,8375,8376,8377,8378,-8199]]},{"type":"Polygon","id":48399,"arcs":[[-8379,8379,8380,-8371,-8187,-8200]]},{"type":"Polygon","id":48049,"arcs":[[-8293,8381,8382,8383,-8376,-8209,-8203]]},{"type":"Polygon","id":1109,"arcs":[[-8344,8384,8385,8386,-8220,-8276]]},{"type":"Polygon","id":1041,"arcs":[[-8387,8387,8388,8389,-8232,-8221]]},{"type":"Polygon","id":28029,"arcs":[[8390,8391,8392,8393,-8318,-8152]]},{"type":"Polygon","id":28127,"arcs":[[-8325,8394,8395,8396,-8391,-8140]]},{"type":"Polygon","id":13081,"arcs":[[-8351,8397,8398,8399,-8313,-8278]]},{"type":"Polygon","id":48193,"arcs":[[8400,-8291,-8207,-8328,8401,8402]]},{"type":"Polygon","id":13183,"arcs":[[8403,8404,-8266,-8355]]},{"type":"Polygon","id":48161,"arcs":[[8405,8406,-8260,-8248,-8375]]},{"type":"Polygon","id":48109,"arcs":[[8407,8408,8409,-7809,-7992]]},{"type":"Polygon","id":48229,"arcs":[[8410,8411,8412,-7810,-8410]]},{"type":"Polygon","id":48141,"arcs":[[8413,-7914,-7811,-8413]]},{"type":"Polygon","id":48301,"arcs":[[8414,8415,-7990,-7684,-8370]]},{"type":"Polygon","id":48389,"arcs":[[8416,8417,8418,-8408,-7991,-8416]]},{"type":"Polygon","id":13239,"arcs":[[8419,8420,-8340,-8311]]},{"type":"Polygon","id":1025,"arcs":[[-8287,8421,8422,8423,-8269,-8175]]},{"type":"Polygon","id":48419,"arcs":[[8424,8425,8426,8427,-8236,-8245,-8259]]},{"type":"Polygon","id":22025,"arcs":[[-8298,8428,8429,8430,-8282,-8240]]},{"type":"Polygon","id":13161,"arcs":[[8431,8432,8433,-8329,-8273,-8250,-8255]]},{"type":"Polygon","id":13273,"arcs":[[8434,8435,8436,8437,-8307,-8315]]},{"type":"Polygon","id":13001,"arcs":[[-8268,8438,8439,8440,-8432,-8254]]},{"type":"Polygon","id":1013,"arcs":[[-8390,8441,8442,8443,-8285,-8233]]},{"type":"Polygon","id":13243,"arcs":[[-8308,-8438,8444,8445,-8420,-8310]]},{"type":"Polygon","id":22059,"arcs":[[-8431,8446,8447,8448,-8333,-8283]]},{"type":"Polygon","id":13177,"arcs":[[-8400,8449,8450,-8435,-8314]]},{"type":"Polygon","id":28153,"arcs":[[8451,8452,8453,-8320,-8316,-8271,8454]]},{"type":"Polygon","id":28063,"arcs":[[-8394,8455,8456,8457,-8295,-8319]]},{"type":"Polygon","id":48309,"arcs":[[8458,-8326,-8289,8459,8460,8461]]},{"type":"Polygon","id":13287,"arcs":[[8462,8463,8464,8465,-8398,-8350]]},{"type":"Polygon","id":13017,"arcs":[[-8331,8466,8467,-8463,-8349]]},{"type":"Polygon","id":13321,"arcs":[[-8399,-8466,8468,8469,8470,8471,-8450]]},{"type":"Polygon","id":48347,"arcs":[[-8428,8472,8473,-8345,-8237]]},{"type":"Polygon","id":22085,"arcs":[[-8339,8474,8475,8476,-8425,-8258]]},{"type":"Polygon","id":13305,"arcs":[[-8267,-8405,8477,8478,8479,8480,-8439]]},{"type":"Polygon","id":1099,"arcs":[[-8444,8481,8482,8483,-8422,-8286]]},{"type":"Polygon","id":28067,"arcs":[[8484,8485,8486,-8323,-8321,-8454]]},{"type":"Polygon","id":48293,"arcs":[[8487,-8460,-8288,-8261,-8407,8488,8489]]},{"type":"Polygon","id":13069,"arcs":[[8490,8491,8492,8493,8494,-8467,-8330,-8434]]},{"type":"Polygon","id":22043,"arcs":[[-8449,8495,-8336,-8334]]},{"type":"Polygon","id":28031,"arcs":[[-8487,8496,8497,8498,-8395,-8324]]},{"type":"Polygon","id":13061,"arcs":[[-8446,8499,8500,8501,-8341,-8421]]},{"type":"Polygon","id":1067,"arcs":[[-8502,8502,8503,8504,-8342]]},{"type":"Polygon","id":28065,"arcs":[[8505,8506,8507,-8396,-8499]]},{"type":"Polygon","id":13155,"arcs":[[-8495,8508,8509,-8464,-8468]]},{"type":"Polygon","id":22029,"arcs":[[-8297,8510,8511,8512,8513,8514,8515,-8429]]},{"type":"Polygon","id":28077,"arcs":[[8516,8517,8518,-8392,-8397,-8508]]},{"type":"Polygon","id":1035,"arcs":[[8519,8520,-8482,-8443]]},{"type":"Polygon","id":28001,"arcs":[[8521,8522,-8511,-8296,-8458]]},{"type":"Polygon","id":4023,"arcs":[[-8231,8523,-8212]]},{"type":"Polygon","id":48333,"arcs":[[8524,8525,-8382,-8292,-8401]]},{"type":"Polygon","id":28085,"arcs":[[8526,8527,8528,8529,-8456,-8393,-8519]]},{"type":"Polygon","id":13005,"arcs":[[8530,8531,-8491,-8433,-8441]]},{"type":"Polygon","id":48099,"arcs":[[8532,-8402,-8327,-8459,8533]]},{"type":"Polygon","id":48451,"arcs":[[-8381,8534,8535,8536,8537,-8358,-8372]]},{"type":"Polygon","id":1129,"arcs":[[-8424,8538,8539,8540,-8455,-8270]]},{"type":"MultiPolygon","id":13191,"arcs":[[[8541,8542]],[[8543,8544]],[[8545]],[[8546,8547,-8478,-8404,-8354]]]},{"type":"Polygon","id":48289,"arcs":[[8548,8549,8550,-8489,-8406,-8374]]},{"type":"Polygon","id":48461,"arcs":[[8551,8552,8553,-8365,-8363]]},{"type":"Polygon","id":48103,"arcs":[[-8554,8554,8555,8556,-8366]]},{"type":"Polygon","id":48405,"arcs":[[8557,8558,8559,-8473,-8427]]},{"type":"Polygon","id":48383,"arcs":[[-8359,-8538,8560,8561,-8552,-8361]]},{"type":"Polygon","id":48475,"arcs":[[-8415,-8369,-8367,-8557,8562,-8417]]},{"type":"Polygon","id":13095,"arcs":[[-8472,8563,8564,8565,-8436,-8451]]},{"type":"Polygon","id":13037,"arcs":[[-8437,-8566,8566,8567,-8500,-8445]]},{"type":"Polygon","id":1045,"arcs":[[-8505,8568,8569,8570,-8385,-8343]]},{"type":"Polygon","id":1031,"arcs":[[8571,8572,-8388,-8386,-8571]]},{"type":"Polygon","id":28037,"arcs":[[-8530,8573,8574,-8522,-8457]]},{"type":"Polygon","id":48403,"arcs":[[-8477,8575,8576,-8558,-8426]]},{"type":"Polygon","id":13277,"arcs":[[-8510,8577,8578,8579,-8469,-8465]]},{"type":"Polygon","id":48225,"arcs":[[8580,8581,8582,8583,-8549,-8373,-8347]]},{"type":"Polygon","id":48095,"arcs":[[-8378,8584,8585,-8535,-8380]]},{"type":"Polygon","id":13229,"arcs":[[-8481,8586,8587,-8531,-8440]]},{"type":"Polygon","id":1039,"arcs":[[-8573,8588,8589,8590,8591,-8520,-8442,-8389]]},{"type":"Polygon","id":48235,"arcs":[[8592,8593,-8561,-8537]]},{"type":"Polygon","id":48005,"arcs":[[-8560,8594,8595,8596,8597,-8581,-8346,-8474]]},{"type":"Polygon","id":13099,"arcs":[[-8568,8598,8599,8600,8601,-8503,-8501]]},{"type":"Polygon","id":48145,"arcs":[[8602,8603,-8461,-8488,8604]]},{"type":"Polygon","id":22079,"arcs":[[-8448,8605,8606,8607,8608,-8337,-8496]]},{"type":"Polygon","id":48307,"arcs":[[-8384,8609,8610,8611,-8585,-8377]]},{"type":"Polygon","id":48411,"arcs":[[-8526,8612,8613,8614,8615,-8610,-8383]]},{"type":"Polygon","id":13019,"arcs":[[-8494,8616,8617,8618,8619,-8578,-8509]]},{"type":"Polygon","id":13299,"arcs":[[-8588,8620,8621,8622,8623,8624,-8492,-8532]]},{"type":"Polygon","id":48281,"arcs":[[8625,8626,-8613,-8525,-8403,-8533]]},{"type":"MultiPolygon","id":13127,"arcs":[[[-8542,8627]],[[8628,-8544,8629,8630,8631,-8479,-8548]]]},{"type":"Polygon","id":13007,"arcs":[[-8565,8632,8633,8634,-8599,-8567]]},{"type":"Polygon","id":13205,"arcs":[[-8471,8635,8636,8637,8638,-8633,-8564]]},{"type":"Polygon","id":28041,"arcs":[[-8541,8639,8640,8641,-8452]]},{"type":"Polygon","id":28035,"arcs":[[8642,8643,8644,8645,-8497,-8486]]},{"type":"Polygon","id":28073,"arcs":[[-8498,-8646,8646,8647,-8506]]},{"type":"Polygon","id":28111,"arcs":[[-8453,-8642,8648,8649,-8643,-8485]]},{"type":"Polygon","id":28091,"arcs":[[-8648,8650,8651,8652,-8517,-8507]]},{"type":"Polygon","id":13003,"arcs":[[-8625,8653,8654,-8617,-8493]]},{"type":"Polygon","id":48455,"arcs":[[8655,8656,8657,-8582,-8598]]},{"type":"Polygon","id":48371,"arcs":[[-8556,8658,8659,8660,8661,-8418,-8563]]},{"type":"Polygon","id":13025,"arcs":[[-8632,8662,8663,-8621,-8587,-8480]]},{"type":"Polygon","id":28157,"arcs":[[-8575,8664,8665,8666,-8512,-8523]]},{"type":"Polygon","id":22115,"arcs":[[-8609,8667,8668,8669,-8475,-8338]]},{"type":"Polygon","id":48395,"arcs":[[8670,8671,8672,-8605,-8490,-8551]]},{"type":"Polygon","id":13075,"arcs":[[8673,8674,8675,-8579,-8620]]},{"type":"Polygon","id":28005,"arcs":[[-8529,8676,8677,8678,8679,-8665,-8574]]},{"type":"Polygon","id":28113,"arcs":[[8680,8681,8682,-8677,-8528]]},{"type":"Polygon","id":28147,"arcs":[[-8653,8683,-8681,-8527,-8518]]},{"type":"Polygon","id":22009,"arcs":[[-8430,-8516,8684,8685,8686,8687,-8606,-8447]]},{"type":"Polygon","id":13071,"arcs":[[-8580,-8676,8688,8689,-8636,-8470]]},{"type":"Polygon","id":48027,"arcs":[[-8604,8690,8691,8692,-8626,-8534,-8462]]},{"type":"MultiPolygon","id":1003,"arcs":[[[8693,8694]],[[-8484,8695,8696,8697,8698,8699,8700,-8539,-8423]]]},{"type":"Polygon","id":1069,"arcs":[[-8602,8701,8702,8703,-8569,-8504]]},{"type":"Polygon","id":1053,"arcs":[[-8592,8704,8705,8706,-8696,-8483,-8521]]},{"type":"Polygon","id":13201,"arcs":[[-8635,8707,8708,-8600]]},{"type":"Polygon","id":1061,"arcs":[[8709,8710,8711,-8589,-8572,-8570,-8704]]},{"type":"Polygon","id":48351,"arcs":[[8712,8713,8714,8715,-8576,-8476,-8670]]},{"type":"Polygon","id":13065,"arcs":[[-8624,8716,8717,8718,8719,-8654]]},{"type":"Polygon","id":13173,"arcs":[[-8720,8720,8721,-8618,-8655]]},{"type":"MultiPolygon","id":1097,"arcs":[[[-8699,8722]],[[8723,8724,8725,-8640,-8540,-8701]]]},{"type":"MultiPolygon","id":13039,"arcs":[[[8726]],[[8727,8728,8729,-8663,-8631]]]},{"type":"Polygon","id":48241,"arcs":[[8730,8731,8732,-8595,-8559,-8577,-8716]]},{"type":"Polygon","id":48373,"arcs":[[8733,8734,8735,8736,-8656,-8597]]},{"type":"Polygon","id":48331,"arcs":[[8737,8738,8739,-8691,-8603,-8673]]},{"type":"Polygon","id":48243,"arcs":[[8740,-8411,-8409,-8419,-8662,8741]]},{"type":"Polygon","id":48313,"arcs":[[8742,8743,8744,-8550,-8584]]},{"type":"Polygon","id":48327,"arcs":[[-8612,8745,8746,8747,-8586]]},{"type":"Polygon","id":48413,"arcs":[[-8748,8748,8749,-8593,-8536]]},{"type":"Polygon","id":48105,"arcs":[[-8553,-8562,-8594,-8750,8750,8751,8752,-8659,-8555]]},{"type":"Polygon","id":13087,"arcs":[[-8634,-8639,8753,8754,8755,-8708]]},{"type":"Polygon","id":13131,"arcs":[[8756,8757,8758,-8754,-8638]]},{"type":"MultiPolygon","id":13027,"arcs":[[[8759,8760]],[[8761,8762,8763,8764,-8689,-8675]]]},{"type":"Polygon","id":13275,"arcs":[[-8690,-8765,8765,8766,-8757,-8637]]},{"type":"Polygon","id":13253,"arcs":[[-8756,8767,8768,-8702,-8601,-8709]]},{"type":"Polygon","id":13049,"arcs":[[8769,8770,-8622,-8664,-8730]]},{"type":"Polygon","id":48457,"arcs":[[-8733,8771,-8734,-8596]]},{"type":"Polygon","id":48471,"arcs":[[8772,8773,8774,-8743,-8583,-8658]]},{"type":"MultiPolygon","id":22125,"arcs":[[[8775,8776,-8513,-8667,8777]],[[8778,-8685,-8515]]]},{"type":"Polygon","id":48053,"arcs":[[-8693,8779,8780,8781,8782,-8614,-8627]]},{"type":"Polygon","id":13185,"arcs":[[-8619,-8722,8783,8784,-8761,8785,-8762,-8674]]},{"type":"Polygon","id":22077,"arcs":[[-8514,-8777,8786,8787,8788,8789,-8686,-8779]]},{"type":"Polygon","id":28109,"arcs":[[-8645,8790,8791,8792,8793,-8651,-8647]]},{"type":"Polygon","id":22117,"arcs":[[-8794,8794,8795,-8682,-8684,-8652]]},{"type":"Polygon","id":22039,"arcs":[[-8688,8796,8797,8798,8799,-8607]]},{"type":"Polygon","id":12063,"arcs":[[-8769,8800,8801,8802,8803,8804,-8710,-8703]]},{"type":"Polygon","id":22105,"arcs":[[-8796,8805,8806,8807,8808,8809,-8678,-8683]]},{"type":"MultiPolygon","id":12033,"arcs":[[[-8695,8810]],[[8811,8812]],[[8813,-8697,-8707,8814]]]},{"type":"MultiPolygon","id":12113,"arcs":[[[8815,-8812,8816,8817]],[[8818,8819,-8815,-8706]]]},{"type":"Polygon","id":28039,"arcs":[[-8726,8820,8821,-8649,-8641]]},{"type":"Polygon","id":22091,"arcs":[[-8810,8822,8823,8824,-8679]]},{"type":"MultiPolygon","id":12091,"arcs":[[[-8818,8825]],[[8826,8827]],[[-8591,8828,8829,-8819,-8705]]]},{"type":"Polygon","id":22037,"arcs":[[-8825,8830,8831,-8778,-8666,-8680]]},{"type":"Polygon","id":12059,"arcs":[[-8805,8832,8833,-8711]]},{"type":"Polygon","id":12131,"arcs":[[-8712,-8834,8834,8835,8836,-8827,8837,-8829,-8590]]},{"type":"Polygon","id":48041,"arcs":[[8838,8839,8840,-8671,-8745]]},{"type":"Polygon","id":48319,"arcs":[[-8616,8841,8842,8843,-8746,-8611]]},{"type":"Polygon","id":48299,"arcs":[[-8783,8844,8845,-8842,-8615]]},{"type":"Polygon","id":28131,"arcs":[[-8822,8846,8847,-8791,-8644,-8650]]},{"type":"Polygon","id":48491,"arcs":[[8848,8849,8850,-8780,-8692,-8740]]},{"type":"Polygon","id":48407,"arcs":[[-8737,8851,8852,-8773,-8657]]},{"type":"Polygon","id":22003,"arcs":[[-8800,8853,8854,-8668,-8608]]},{"type":"Polygon","id":22011,"arcs":[[-8855,8855,8856,-8713,-8669]]},{"type":"Polygon","id":13101,"arcs":[[8857,8858,-8784,-8721,-8719]]},{"type":"Polygon","id":48185,"arcs":[[-8775,8859,8860,8861,-8839,-8744]]},{"type":"Polygon","id":22097,"arcs":[[-8790,8862,8863,8864,-8797,-8687]]},{"type":"Polygon","id":12133,"arcs":[[8865,-8835,-8833,-8804]]},{"type":"MultiPolygon","id":12089,"arcs":[[[-8729,8866,8867,8868,-8770]]]},{"type":"MultiPolygon","id":28059,"arcs":[[[-8725,8869,8870,-8847,-8821]]]},{"type":"Polygon","id":48051,"arcs":[[-8841,8871,8872,-8738,-8672]]},{"type":"Polygon","id":22033,"arcs":[[8873,8874,8875,8876,-8831,-8824]]},{"type":"Polygon","id":22103,"arcs":[[-8793,8877,8878,8879,8880,-8806,-8795]]},{"type":"Polygon","id":12039,"arcs":[[-8759,8881,8882,-8801,-8768,-8755]]},{"type":"Polygon","id":48267,"arcs":[[8883,8884,8885,8886,-8747,-8844]]},{"type":"Polygon","id":48435,"arcs":[[-8887,8887,8888,-8751,-8749]]},{"type":"Polygon","id":12073,"arcs":[[-8767,8889,8890,8891,-8882,-8758]]},{"type":"MultiPolygon","id":28047,"arcs":[[[-8871,8892,8893,-8848]]]},{"type":"Polygon","id":12065,"arcs":[[-8764,8894,8895,8896,8897,-8890,-8766]]},{"type":"Polygon","id":48043,"arcs":[[8898,-8742,-8661,8899,8900]]},{"type":"Polygon","id":22121,"arcs":[[8901,-8787,-8776,-8832,-8877]]},{"type":"Polygon","id":48443,"arcs":[[8902,8903,-8900,-8660,-8753]]},{"type":"Polygon","id":22063,"arcs":[[-8809,8904,8905,-8874,-8823]]},{"type":"Polygon","id":12079,"arcs":[[-8786,-8760,8906,8907,8908,8909,-8895,-8763]]},{"type":"Polygon","id":28045,"arcs":[[-8894,8910,-8878,-8792]]},{"type":"Polygon","id":12047,"arcs":[[-8859,8911,8912,-8907,-8785]]},{"type":"Polygon","id":48377,"arcs":[[-8899,8913,-8741]]},{"type":"Polygon","id":48339,"arcs":[[-8853,8914,8915,8916,-8860,-8774]]},{"type":"Polygon","id":48453,"arcs":[[8917,8918,8919,8920,-8781,-8851]]},{"type":"Polygon","id":12013,"arcs":[[8921,8922,8923,-8802]]},{"type":"Polygon","id":12077,"arcs":[[-8892,8924,8925,8926,-8922,-8883]]},{"type":"Polygon","id":12023,"arcs":[[-8718,8927,8928,8929,8930,8931,-8912,-8858]]},{"type":"MultiPolygon","id":12031,"arcs":[[[8932,8933]],[[8934,8935]],[[8936,8937,8938,-8868]]]},{"type":"Polygon","id":12003,"arcs":[[-8869,-8939,8939,8940,8941,-8928,-8717,-8623,-8771]]},{"type":"MultiPolygon","id":12005,"arcs":[[[8942,8943]],[[-8924,8944,8945,-8836,-8866,-8803]]]},{"type":"Polygon","id":48287,"arcs":[[8946,8947,8948,-8849,-8739,-8873]]},{"type":"Polygon","id":48199,"arcs":[[-8732,8949,8950,8951,-8735,-8772]]},{"type":"Polygon","id":48171,"arcs":[[-8846,8952,8953,8954,-8884,-8843]]},{"type":"Polygon","id":48031,"arcs":[[-8782,-8921,8955,8956,8957,-8953,-8845]]},{"type":"MultiPolygon","id":22099,"arcs":[[[8958,8959,8960]],[[8961,8962,-8863,-8789,8963]]]},{"type":"Polygon","id":22047,"arcs":[[-8902,-8876,8964,8965,8966,-8964,-8788]]},{"type":"Polygon","id":48291,"arcs":[[-8952,8967,8968,8969,-8915,-8852,-8736]]},{"type":"Polygon","id":22019,"arcs":[[8970,8971,8972,-8714,-8857]]},{"type":"Polygon","id":22053,"arcs":[[-8799,8973,8974,8975,-8971,-8856,-8854]]},{"type":"Polygon","id":22001,"arcs":[[-8865,8976,8977,-8974,-8798]]},{"type":"Polygon","id":12121,"arcs":[[-8932,8978,8979,-8908,-8913]]},{"type":"Polygon","id":48021,"arcs":[[8980,8981,-8918,-8850,-8949]]},{"type":"Polygon","id":48477,"arcs":[[-8862,8982,8983,8984,-8947,-8872,-8840]]},{"type":"Polygon","id":22055,"arcs":[[-8963,8985,8986,-8977,-8864]]},{"type":"Polygon","id":48209,"arcs":[[8987,8988,-8956,-8920,8989]]},{"type":"Polygon","id":22005,"arcs":[[-8906,8990,8991,8992,-8965,-8875]]},{"type":"Polygon","id":12123,"arcs":[[8993,8994,8995,-8896,-8910]]},{"type":"MultiPolygon","id":12129,"arcs":[[[-8898,8996,8997,-8925,-8891]]]},{"type":"Polygon","id":22095,"arcs":[[8998,8999,9000,-8991,-8905,-8808]]},{"type":"Polygon","id":48465,"arcs":[[-8889,9001,9002,9003,-8903,-8752]]},{"type":"Polygon","id":48137,"arcs":[[9004,9005,9006,9007,-9002,-8888,-8886]]},{"type":"Polygon","id":48265,"arcs":[[9008,9009,9010,-9005,-8885,-8955]]},{"type":"Polygon","id":12067,"arcs":[[-8980,9011,9012,-8994,-8909]]},{"type":"MultiPolygon","id":12109,"arcs":[[[9013,9014]],[[9015,9016,9017,9018,9019,-8933,9020]],[[-8935,9021]]]},{"type":"Polygon","id":48361,"arcs":[[-8973,9022,9023,-8950,-8731,-8715]]},{"type":"Polygon","id":48473,"arcs":[[9024,9025,9026,-8983,-8861,-8917]]},{"type":"Polygon","id":22089,"arcs":[[9027,-8999,9028]]},{"type":"MultiPolygon","id":22051,"arcs":[[[9029,9030]],[[9031,9032,9033,9034,-9029,-8807,-8881]]]},{"type":"Polygon","id":12045,"arcs":[[-8927,9035,9036,9037,9038,-8943,9039,-8945,-8923]]},{"type":"Polygon","id":22071,"arcs":[[9040,9041,9042,-9032,-8880]]},{"type":"Polygon","id":12019,"arcs":[[9043,9044,9045,-8940,-8938]]},{"type":"Polygon","id":48245,"arcs":[[-9024,9046,9047,9048,-8968,-8951]]},{"type":"MultiPolygon","id":48201,"arcs":[[[9049,9050]],[[-8970,9051,9052,9053,9054,9055,-9025,-8916]]]},{"type":"MultiPolygon","id":22087,"arcs":[[[-9057,-9058,-9059,-9060]],[[9060,9061,9062,9063,9064,9065,9066,-9042,9067]]]},{"type":"Polygon","id":22093,"arcs":[[9068,9069,-8992,-9001]]},{"type":"Polygon","id":48149,"arcs":[[9070,9071,9072,9073,9074,-8981,-8948,-8985]]},{"type":"Polygon","id":22113,"arcs":[[-8987,9075,9076,9077,-8975,-8978]]},{"type":"Polygon","id":12007,"arcs":[[-9046,9078,9079,9080,-8941]]},{"type":"Polygon","id":12125,"arcs":[[-9081,9081,-8929,-8942]]},{"type":"Polygon","id":48259,"arcs":[[-8958,9082,9083,9084,-9009,-8954]]},{"type":"MultiPolygon","id":22045,"arcs":[[[9085]],[[-8967,9086,-8960,9087,9088,-9076,-8986,-8962]]]},{"type":"Polygon","id":48015,"arcs":[[-9027,9089,9090,9091,-9071,-8984]]},{"type":"Polygon","id":22007,"arcs":[[-9070,9092,9093,9094,-8961,-9087,-8966,-8993]]},{"type":"Polygon","id":48385,"arcs":[[-9011,9095,9096,-9006]]},{"type":"Polygon","id":48055,"arcs":[[-8982,-9075,9097,9098,-8990,-8919]]},{"type":"Polygon","id":22023,"arcs":[[-8976,-9078,9099,-9047,-9023,-8972]]},{"type":"Polygon","id":48091,"arcs":[[9100,9101,-9083,-8957,-8989]]},{"type":"MultiPolygon","id":12037,"arcs":[[[9102]],[[-9038,9103]],[[-8998,9104,-9036,-8926]]]},{"type":"Polygon","id":48089,"arcs":[[9105,9106,9107,-9072,-9092]]},{"type":"MultiPolygon","id":22101,"arcs":[[[-9095,9108,9109,-9088,-8959]]]},{"type":"Polygon","id":12001,"arcs":[[-9080,9110,9111,9112,9113,-8930,-9082]]},{"type":"Polygon","id":12041,"arcs":[[-9114,9114,9115,-9012,-8979,-8931]]},{"type":"MultiPolygon","id":22057,"arcs":[[[9116,9117]],[[9118,9119,9120,-9030,9121,9122,9123,9124,9125,9126,9127,-9093,-9069,-9000,-9028,-9035,9128]]]},{"type":"Polygon","id":48019,"arcs":[[9129,-9096,-9010,-9085,9130,9131]]},{"type":"MultiPolygon","id":22075,"arcs":[[[9132]],[[-9059,9133]],[[9134,-9058]],[[9135,-9065]],[[9136,9137,9138,9139,-9033,-9043,-9067,9140]]]},{"type":"MultiPolygon","id":48071,"arcs":[[[-9050,9141]],[[-9049,9142,9143,9144,-9052,-8969]]]},{"type":"Polygon","id":48187,"arcs":[[9145,9146,9147,-9101,-8988,-9099]]},{"type":"MultiPolygon","id":12107,"arcs":[[[-9019,9148,9149,9150]],[[9151,9152,-9111,-9079,-9045]]]},{"type":"Polygon","id":48157,"arcs":[[9153,9154,-9090,-9026,-9056]]},{"type":"Polygon","id":48177,"arcs":[[9155,9156,9157,9158,-9146,-9098,-9074]]},{"type":"MultiPolygon","id":22109,"arcs":[[[9159,-9117]],[[9160,-9124]],[[9161,-9126]],[[9162]],[[9163,9164,9165,9166,9167,-9109,-9094,-9128,9168]]]},{"type":"Polygon","id":48029,"arcs":[[-9148,9169,9170,9171,-9131,-9084,-9102]]},{"type":"Polygon","id":48325,"arcs":[[9172,9173,9174,-9132,-9172]]},{"type":"MultiPolygon","id":12035,"arcs":[[[9175,9176,-9149,-9018]],[[-9016,9177]],[[9178,9179,9180,-9015]]]},{"type":"Polygon","id":48481,"arcs":[[-9155,9181,9182,9183,-9106,-9091]]},{"type":"Polygon","id":48285,"arcs":[[9184,9185,9186,-9156,-9073,-9108]]},{"type":"Polygon","id":48463,"arcs":[[-9175,9187,9188,-9007,-9097,-9130]]},{"type":"Polygon","id":48271,"arcs":[[-9189,9189,9190,-9003,-9008]]},{"type":"MultiPolygon","id":48167,"arcs":[[[9191]],[[9192,9193,-9054,9194]],[[9195,-9144]]]},{"type":"MultiPolygon","id":48039,"arcs":[[[-9194,9196,9197,-9182,-9154,-9055]]]},{"type":"MultiPolygon","id":12075,"arcs":[[[-9113,9198,9199,9200,9201,9202,-9115]]]},{"type":"Polygon","id":12083,"arcs":[[9203,9204,9205,9206,-9199,-9112,-9153]]},{"type":"Polygon","id":48493,"arcs":[[-9159,9207,9208,-9170,-9147]]},{"type":"MultiPolygon","id":12127,"arcs":[[[9209,9210]],[[9211,9212,9213,9214,9215,9216,-9150,-9177,9217]],[[9218,-9180]]]},{"type":"Polygon","id":48123,"arcs":[[9219,9220,-9157,-9187,9221]]},{"type":"Polygon","id":12069,"arcs":[[-9216,9222,9223,9224,9225,-9205,9226]]},{"type":"Polygon","id":48239,"arcs":[[9227,9228,9229,9230,9231,9232,9233,9234,-9185,-9107,-9184]]},{"type":"Polygon","id":48013,"arcs":[[9235,9236,-9173,-9171,-9209,9237,9238]]},{"type":"MultiPolygon","id":48321,"arcs":[[[9239,9240,-9228,-9183,-9198,9241]]]},{"type":"Polygon","id":48255,"arcs":[[9242,9243,-9238,-9208,-9158,-9221,9244]]},{"type":"MultiPolygon","id":48469,"arcs":[[[-9233,9245]],[[-9235,9246,9247,9248,9249,-9222,-9186]]]},{"type":"Polygon","id":48163,"arcs":[[-9237,9250,9251,9252,-9174]]},{"type":"Polygon","id":48507,"arcs":[[-9253,9253,9254,-9188]]},{"type":"Polygon","id":48323,"arcs":[[-9255,9255,9256,9257,-9190]]},{"type":"MultiPolygon","id":12017,"arcs":[[[9258,-9201]],[[-9200,-9207,9259,9260,9261]]]},{"type":"Polygon","id":12119,"arcs":[[-9226,9262,9263,9264,-9260,-9206]]},{"type":"Polygon","id":48175,"arcs":[[-9250,9265,9266,-9245,-9220]]},{"type":"Polygon","id":12117,"arcs":[[9267,-9223,-9215]]},{"type":"MultiPolygon","id":12009,"arcs":[[[9268,9269,9270,9271,-9214]],[[9272,-9210,9273,-9212]]]},{"type":"Polygon","id":48297,"arcs":[[9274,9275,9276,-9239,-9244,9277,9278]]},{"type":"Polygon","id":12095,"arcs":[[-9268,-9272,9279,-9224]]},{"type":"MultiPolygon","id":48057,"arcs":[[[9280,9281,9282]],[[9283,9284,9285]],[[-9241,9286,-9229]],[[9287,-9248,9288]],[[9289,-9231,9290]]]},{"type":"Polygon","id":48025,"arcs":[[-9267,9291,9292,-9278,-9243]]},{"type":"Polygon","id":12053,"arcs":[[-9265,9293,9294,-9261]]},{"type":"Polygon","id":48283,"arcs":[[9295,9296,9297,-9251]]},{"type":"Polygon","id":48311,"arcs":[[-9277,9298,-9296,-9236]]},{"type":"Polygon","id":48127,"arcs":[[-9252,-9298,9299,-9256,-9254]]},{"type":"Polygon","id":48391,"arcs":[[-9288,9300,9301,9302,9303,9304,-9292,-9266,-9249]]},{"type":"MultiPolygon","id":12101,"arcs":[[[9305,9306]],[[-9264,9307,9308,9309,9310,-9294]]]},{"type":"Polygon","id":12105,"arcs":[[9311,9312,9313,9314,-9308,-9263,-9225]]},{"type":"Polygon","id":12097,"arcs":[[-9271,9315,9316,-9312,-9280]]},{"type":"MultiPolygon","id":48007,"arcs":[[[9317,9318]],[[9319]],[[9320,9321,-9304]],[[9322,9323]],[[-9285,9324]],[[9325,-9302,9326,-9282,9327]]]},{"type":"Polygon","id":48479,"arcs":[[9328,9329,9330,9331,-9257,-9300,-9297]]},{"type":"Polygon","id":48409,"arcs":[[-9322,9332,-9323,9333,9334,9335,9336,9337,-9279,-9293,-9305]]},{"type":"MultiPolygon","id":12103,"arcs":[[[-9306,9338]],[[9339,9340,-9310]]]},{"type":"MultiPolygon","id":12057,"arcs":[[[-9315,9341,9342,-9340,-9309]]]},{"type":"Polygon","id":48131,"arcs":[[9343,9344,9345,-9329,-9299,-9276]]},{"type":"Polygon","id":48249,"arcs":[[-9338,9346,9347,9348,-9344,-9275]]},{"type":"MultiPolygon","id":48355,"arcs":[[[9349,9350]],[[9351]],[[-9318,9352]],[[-9335,9353]],[[9354,9355,-9347,-9337,9356]]]},{"type":"MultiPolygon","id":12061,"arcs":[[[9357,9358,-9316,-9270,9359]],[[9360,9361]]]},{"type":"Polygon","id":12055,"arcs":[[9362,9363,9364,9365,-9313]]},{"type":"Polygon","id":12049,"arcs":[[-9366,9366,9367,-9314]]},{"type":"MultiPolygon","id":12081,"arcs":[[[9368,9369]],[[-9368,9370,9371,9372,-9342]]]},{"type":"Polygon","id":12093,"arcs":[[-9359,9373,9374,9375,-9363,-9317]]},{"type":"MultiPolygon","id":48273,"arcs":[[[9376,9377,-9350,9378]],[[9379,9380,9381,-9348,-9356]]]},{"type":"MultiPolygon","id":12111,"arcs":[[[9382,9383]],[[9384,-9361]],[[9385,9386,9387,9388,-9374,-9358]]]},{"type":"MultiPolygon","id":12115,"arcs":[[[9389,9390]],[[-9372,9391,9392,9393,9394,9395]],[[-9369,9396]]]},{"type":"Polygon","id":48247,"arcs":[[9397,9398,9399,-9330,-9346]]},{"type":"Polygon","id":12027,"arcs":[[-9365,9400,-9392,-9371,-9367]]},{"type":"Polygon","id":48505,"arcs":[[-9400,9401,9402,-9331]]},{"type":"MultiPolygon","id":48261,"arcs":[[[9403,9404]],[[9405,9406,9407,9408]],[[9409,9410,9411,9412]],[[9413,9414,-9377,9415]],[[9416,9417,9418,9419,9420,-9381,9421]]]},{"type":"Polygon","id":48047,"arcs":[[-9349,-9382,-9421,9422,9423,-9398,-9345]]},{"type":"MultiPolygon","id":12085,"arcs":[[[9424,9425]],[[9426,9427,9428,9429,9430,-9375,-9389,9431]],[[9432,-9383]],[[9433,-9387]]]},{"type":"Polygon","id":12043,"arcs":[[9434,9435,-9364,-9376]]},{"type":"MultiPolygon","id":12015,"arcs":[[[9436,9437]],[[-9390,9438]],[[-9395,9439]],[[-9436,9440,9441,-9393,-9401]]]},{"type":"MultiPolygon","id":12099,"arcs":[[[-9425,9442]],[[9443,-9427]],[[9444,-9429]],[[9445,9446,9447,-9431]]]},{"type":"Polygon","id":12051,"arcs":[[9448,9449,9450,-9435,-9448]]},{"type":"MultiPolygon","id":12071,"arcs":[[[9451]],[[-9451,9452,9453,-9441]],[[-9438,9454]]]},{"type":"Polygon","id":48427,"arcs":[[-9424,9455,9456,-9402,-9399]]},{"type":"Polygon","id":48215,"arcs":[[-9420,9457,9458,9459,-9456,-9423]]},{"type":"MultiPolygon","id":48489,"arcs":[[[9460,9461]],[[-9404,9462]],[[9463,9464,9465,-9407,9466]],[[9467,9468,9469,9470,-9458,-9419,9471]]]},{"type":"MultiPolygon","id":12021,"arcs":[[[9472,9473]],[[9474,9475,9476,9477,-9453,-9450]]]},{"type":"MultiPolygon","id":48061,"arcs":[[[9478,-9459,-9471,9479]],[[-9461,9480]]]},{"type":"Polygon","id":12011,"arcs":[[9481,9482,-9475,-9449,-9447]]},{"type":"MultiPolygon","id":12086,"arcs":[[[9483,9484,9485,9486,9487,9488,-9476,-9483,9489]]]},{"type":"MultiPolygon","id":12087,"arcs":[[[-9487,9490]],[[-9485,9491]],[[9492]],[[9493,-9474]],[[-9489,9494,-9477]]]},{"type":"Polygon","id":4015,"arcs":[[-5753,-6696,-7333,-6549,-5937,-4613,-5352,-5426]]},{"type":"Polygon","id":12029,"arcs":[[-9116,-9203,9495,-8995,-9013]]},{"type":"Polygon","id":27077,"arcs":[[-123,-170,-106,9496]]},{"type":"Polygon","id":27031,"arcs":[[-192,9497]]},{"type":"Polygon","id":55031,"arcs":[[9498,-654,-647,-573,-462,-137,9499]]},{"type":"Polygon","id":55007,"arcs":[[9500,-652,-9499,9501]]},{"id":55003,"type":"MultiPolygon","arcs":[[[-542,-699,-648,-9501,9502]],[[9503]]]},{"id":26083,"type":"MultiPolygon","arcs":[[[9504,9505,9506]],[[9507]]]},{"id":26061,"type":"MultiPolygon","arcs":[[[-434,-572,-424,9508]],[[9509,-9506]]]},{"type":"Polygon","id":26103,"arcs":[[9510,9511,-694,-621,-567,-432,9512]]},{"type":"Polygon","id":26003,"arcs":[[-558,9513,-9511,9514,-473]]},{"type":"Polygon","id":26041,"arcs":[[-9514,-557,9515,-691,-9512]]},{"type":"Polygon","id":55075,"arcs":[[-693,9516,-855,-666,-683,-619]]},{"type":"Polygon","id":55029,"arcs":[[-1144,9517]]},{"id":26033,"type":"MultiPolygon","arcs":[[[9518,9519]],[[9520]],[[9521,9522,9523,-470,9524]]]},{"id":26097,"type":"MultiPolygon","arcs":[[[9525]],[[9526,-9522]],[[9527,-555,-471,-9524]]]},{"type":"Polygon","id":26047,"arcs":[[-749,9528,9529]]},{"id":26029,"type":"MultiPolygon","arcs":[[[-9529,-748,-928,-925,9530]],[[9531]]]},{"id":26089,"type":"MultiPolygon","arcs":[[[9532]],[[9533,-1088,9534]]]},{"type":"Polygon","id":26055,"arcs":[[-923,-1056,-1204,-1085,-9534,9535]]},{"type":"Polygon","id":26007,"arcs":[[9536,-1053,-929,-797]]},{"type":"Polygon","id":26011,"arcs":[[9537,-1413,-1374,-1214,-1212]]},{"type":"Polygon","id":26063,"arcs":[[-1552,-1530,9538]]},{"type":"Polygon","id":26147,"arcs":[[-1903,-1700,-1550,9539]]},{"type":"Polygon","id":26163,"arcs":[[9540,9541,-2106,-1904,-1901]]},{"id":26115,"type":"MultiPolygon","arcs":[[[-2482,9542]],[[9543,-2480]],[[9544,-2478,-2253,-2103,-9542]]]},{"type":"MultiPolygon","id":45019,"arcs":[[[9545,-7886,9546,-7888,-7834,-7720]],[[9547,-7615]],[[9548,-7718,-7618,9549]]]},{"type":"Polygon","id":15005,"arcs":[[9550,9551]]},{"type":"Polygon","id":15001,"arcs":[[9552]]},{"id":15007,"type":"MultiPolygon","arcs":[[[9553]],[[9554]]]},{"id":15009,"type":"MultiPolygon","arcs":[[[-9551,9555]],[[9556]],[[9557]],[[9558]]]},{"type":"Polygon","id":15003,"arcs":[[9559]]},{"type":"MultiPolygon","id":2016,"arcs":[[[9560]],[[9561]],[[9562]],[[9563]],[[9564]],[[9565]],[[9566]],[[9567]],[[9568]],[[9569]],[[9570]],[[9571]],[[9572]],[[9573]],[[9574]],[[9575]],[[9576]],[[9577]],[[9578]],[[9579]],[[9580]],[[9581]],[[9582]],[[9583]]]},{"type":"MultiPolygon","id":2013,"arcs":[[[9584]],[[9585]],[[9586]],[[9587]],[[9588]],[[9589]],[[9590]],[[9591]],[[9592]],[[9593]],[[9594]],[[9595]],[[9596,9597,9598,9599]]]},{"type":"MultiPolygon","id":2130,"arcs":[[[9600]],[[9601]]]},{"type":"Polygon","id":2060,"arcs":[[9602,9603]]},{"type":"MultiPolygon","id":2070,"arcs":[[[9604]],[[9605,9606]],[[9607,9608,9609,9610,9611,9612]]]},{"type":"MultiPolygon","id":2164,"arcs":[[[9613]],[[-9597,9614]],[[9615,9616,9617,-9599,9618,-9604,9619,-9612,9620]]]},{"type":"MultiPolygon","id":2150,"arcs":[[[9621]],[[9622]],[[9623]],[[9624]],[[9625]],[[9626]],[[9627]],[[9628]],[[9629]],[[9630]],[[9631,-9617,9632,9633]]]},{"type":"MultiPolygon","id":2110,"arcs":[[[9634,9635]],[[9636,9637]],[[9638,9639,9640,9641]],[[9642]],[[9643,9644,9645,9646,9647,9648]],[[9649,9650]]]},{"type":"MultiPolygon","id":2280,"arcs":[[[9651]],[[9652,9653]],[[9654]],[[9655]],[[9656]],[[9657]],[[9658]],[[9659]],[[9660,9661,9662,9663]]]},{"type":"MultiPolygon","id":2232,"arcs":[[[-9647,9664]],[[9665,9666,9667,9668]],[[9669]],[[-9664,9670,-9635,9671,-9645,9672]],[[-9639,9673,-9637,9674]],[[9675,9676,9677,9678,9679]],[[9680,9681]],[[-9641,9682]],[[9683,9684,9685,9686,9687]],[[9688,9689,9690,9691]]]},{"type":"MultiPolygon","id":2100,"arcs":[[[-9681,9692]],[[-9649,9693,-9650,9694,-9689,9695]],[[9696,-9687,9697,-9691]]]},{"type":"MultiPolygon","id":2220,"arcs":[[[9698]],[[9699,-9653,9700]],[[-9668,9701]],[[9702,-9666,9703,-9679,9704]]]},{"type":"MultiPolygon","id":2270,"arcs":[[[9705]],[[9706]],[[9707]],[[9708,9709,9710,9711]]]},{"type":"MultiPolygon","id":2050,"arcs":[[[9712]],[[9713]],[[9714]],[[9715]],[[9716,-9711,9717,9718,9719,-9621,-9611,9720,-9607,9721]]]},{"type":"Polygon","id":2170,"arcs":[[9722,9723,9724,9725,-9719,9726,9727,9728]]},{"type":"Polygon","id":2068,"arcs":[[9729,9730,-9728,9731]]},{"type":"MultiPolygon","id":2020,"arcs":[[[-9724,9732,9733,9734]]]},{"type":"MultiPolygon","id":2261,"arcs":[[[9735]],[[9736]],[[9737]],[[9738]],[[9739]],[[9740]],[[9741]],[[9742]],[[9743,9744]],[[9745]],[[9746]],[[9747,9748]],[[9749]],[[9750,9751]],[[9752]],[[9753,9754,-9733,-9723,9755,9756,9757,9758]]]},{"type":"MultiPolygon","id":2122,"arcs":[[[9759,-9634]],[[9760]],[[9761]],[[9762]],[[9763,-9748]],[[-9734,-9755,9764,-9751,9765,-9744,9766]],[[-9633,-9616,-9720,-9726,9767]]]},{"type":"MultiPolygon","id":2282,"arcs":[[[9768,9769,-9758,9770,-9685,9771]]]},{"type":"Polygon","id":2290,"arcs":[[9772,9773,9774,-9732,-9727,-9718,-9710,9775,9776,9777]]},{"type":"Polygon","id":2090,"arcs":[[9778,-9730,-9775]]},{"type":"Polygon","id":2240,"arcs":[[-9756,-9729,-9731,-9779,-9774,9779]]},{"type":"MultiPolygon","id":2185,"arcs":[[[9780]],[[9781,-9778,9782,9783]]]},{"type":"MultiPolygon","id":2188,"arcs":[[[-9777,9784,9785,-9783]]]},{"type":"MultiPolygon","id":2180,"arcs":[[[9786]],[[9787]],[[9788]],[[9789,-9785,-9776,-9709,9790]]]},{"id":2201,"type":"MultiPolygon","arcs":[[[9791]],[[9792]],[[9793]],[[9794]],[[9795]],[[9796]],[[9797]],[[9798]],[[9799]],[[9800]],[[9801]],[[9802]],[[9803]],[[9804]],[[9805]],[[-9662,9806]]]},{"type":"Polygon","id":72125,"arcs":[[9807,9808,9809,9810,9811,9812]]},{"type":"Polygon","id":72003,"arcs":[[9813,9814,9815,9816,9817]]},{"type":"Polygon","id":72097,"arcs":[[9818,9819,-9813,9820,9821,9822,9823]]},{"type":"Polygon","id":72065,"arcs":[[9824,9825,9826,9827,9828]]},{"type":"Polygon","id":72055,"arcs":[[9829,9830,9831,9832]]},{"type":"Polygon","id":72083,"arcs":[[9833,9834,-9819,9835,9836]]},{"type":"Polygon","id":72025,"arcs":[[9837,9838,9839,9840,9841,9842,9843]]},{"type":"Polygon","id":72045,"arcs":[[9844,9845,9846,9847,9848]]},{"type":"Polygon","id":72133,"arcs":[[9849,9850,9851,9852]]},{"type":"Polygon","id":72121,"arcs":[[-9833,9853,-9809,9854,9855]]},{"type":"Polygon","id":72027,"arcs":[[-9828,9856,9857,9858,9859]]},{"type":"Polygon","id":72033,"arcs":[[9860,9861,9862,9863]]},{"type":"Polygon","id":72001,"arcs":[[9864,9865,9866,9867,9868,9869]]},{"type":"Polygon","id":72111,"arcs":[[9870,9871,9872,-9866]]},{"type":"Polygon","id":72047,"arcs":[[9873,9874,9875,9876,9877,9878]]},{"type":"Polygon","id":72091,"arcs":[[9879,9880,9881,9882,9883,9884]]},{"type":"Polygon","id":72013,"arcs":[[9885,9886,9887,9888,-9825,9889]]},{"type":"Polygon","id":72145,"arcs":[[9890,9891,-9880,9892]]},{"type":"Polygon","id":72031,"arcs":[[9893,9894,9895,9896,9897,9898]]},{"type":"Polygon","id":72061,"arcs":[[9899,9900,9901,-9861,9902]]},{"type":"Polygon","id":72129,"arcs":[[9903,9904,9905,9906,9907,-9840,9908]]},{"type":"MultiPolygon","id":72075,"arcs":[[[9909,9910,-9853,9911,9912,9913,9914]]]},{"type":"Polygon","id":72063,"arcs":[[-9895,9915,-9909,-9839,9916]]},{"type":"Polygon","id":72073,"arcs":[[9917,-9914,9918,9919,9920]]},{"type":"Polygon","id":72143,"arcs":[[9921,9922,-9878,9923,-9891,9924]]},{"type":"Polygon","id":72011,"arcs":[[9925,-9836,-9824,9926,9927,-9815,9928]]},{"type":"Polygon","id":72081,"arcs":[[-9827,9929,-9869,9930,9931,-9834,9932,-9857]]},{"type":"Polygon","id":72015,"arcs":[[9933,9934,9935]]},{"type":"Polygon","id":72079,"arcs":[[-9854,-9832,9936,9937,-9810]]},{"type":"Polygon","id":72009,"arcs":[[9938,9939,9940,9941,9942]]},{"type":"Polygon","id":72099,"arcs":[[9943,9944,-9929,-9814,9945]]},{"type":"Polygon","id":72023,"arcs":[[9946,-9811,-9938,9947,-9822]]},{"type":"Polygon","id":72109,"arcs":[[9948,9949,9950,-9936,9951,9952,-9907]]},{"type":"Polygon","id":72101,"arcs":[[-9924,-9877,9953,9954,-9881,-9892]]},{"type":"Polygon","id":72117,"arcs":[[-9928,9955,-9816]]},{"type":"Polygon","id":72005,"arcs":[[-9946,-9818,9956,9957]]},{"type":"Polygon","id":72059,"arcs":[[-9873,9958,9959,-9867]]},{"type":"Polygon","id":72021,"arcs":[[-9902,9960,-9845,9961,9962,9963,-9862]]},{"type":"Polygon","id":72141,"arcs":[[9964,-9920,9965,-9870,-9930,-9826,-9889]]},{"type":"Polygon","id":72041,"arcs":[[-9842,9966,-9943,9967,-9847,9968]]},{"type":"Polygon","id":72123,"arcs":[[9969,9970,-9851,9971,-9940,9972]]},{"type":"Polygon","id":72131,"arcs":[[9973,-9858,-9933,-9837,-9926,-9945,9974]]},{"type":"Polygon","id":72035,"arcs":[[-9908,-9953,9975,-9973,-9939,-9967,-9841]]},{"type":"Polygon","id":72135,"arcs":[[-9963,9976,-9879,-9923,9977,9978]]},{"type":"Polygon","id":72115,"arcs":[[-9859,-9974,9979,9980]]},{"type":"Polygon","id":72054,"arcs":[[-9883,9981,-9887,9982]]},{"type":"Polygon","id":72105,"arcs":[[-9962,-9849,9983,-9874,-9977]]},{"type":"Polygon","id":72017,"arcs":[[-9884,-9983,-9886,9984]]},{"type":"Polygon","id":72127,"arcs":[[-9897,9985,-9844,9986,-9900,9987]]},{"type":"Polygon","id":72139,"arcs":[[-9896,-9917,-9838,-9986]]},{"type":"Polygon","id":72057,"arcs":[[-9952,-9935,9988,-9970,-9976]]},{"type":"Polygon","id":72153,"arcs":[[-9868,-9960,9989,-9830,-9856,9990,-9931]]},{"type":"Polygon","id":72043,"arcs":[[9991,9992,-9941,-9972,-9850,-9911,9993]]},{"type":"Polygon","id":72149,"arcs":[[-9994,-9910,9994]]},{"type":"Polygon","id":72039,"arcs":[[-9955,9995,-9921,-9965,-9888,-9982,-9882]]},{"type":"MultiPolygon","id":72113,"arcs":[[[-9913,9996,-9871,-9865,-9966,-9919]]]},{"type":"Polygon","id":72107,"arcs":[[9997,-9992,-9995,-9915,-9918,-9996,-9954,-9876]]},{"type":"Polygon","id":72067,"arcs":[[-9812,-9947,-9821]]},{"type":"Polygon","id":72071,"arcs":[[-9980,-9975,-9944,-9958,9998]]},{"type":"Polygon","id":72007,"arcs":[[-9843,-9969,-9846,-9961,-9901,-9987]]},{"type":"Polygon","id":72019,"arcs":[[-9848,-9968,-9942,-9993,-9998,-9875,-9984]]},{"type":"Polygon","id":72093,"arcs":[[-9932,-9991,-9855,-9808,-9820,-9835]]},{"type":"Polygon","id":72151,"arcs":[[9999,10000,10001,-9949,-9906,10002]]},{"type":"Polygon","id":72137,"arcs":[[-9863,-9964,-9979,10003,10004]]},{"type":"Polygon","id":78030,"arcs":[[10005]]},{"type":"Polygon","id":72089,"arcs":[[10006,10007,10008,10009]]},{"type":"Polygon","id":72087,"arcs":[[10010,10011,-9899,10012]]},{"type":"Polygon","id":72095,"arcs":[[10013,-9950,-10002]]},{"type":"Polygon","id":72119,"arcs":[[-10009,10014,10015,10016,10017,-10011,10018]]},{"type":"Polygon","id":72103,"arcs":[[10019,10020,10021,10022,-10016]]},{"type":"Polygon","id":72085,"arcs":[[-10023,10023,-10003,-9905,10024,10025,-10017]]},{"type":"Polygon","id":72029,"arcs":[[-10018,-10026,10026,-9894,-10012]]},{"type":"MultiPolygon","id":72053,"arcs":[[[10027,-10007,10028]]]},{"type":"Polygon","id":72077,"arcs":[[-10025,-9904,-9916,-10027]]},{"type":"MultiPolygon","id":72037,"arcs":[[[10029,-10020,-10015,-10008,-10028]]]},{"type":"Polygon","id":72069,"arcs":[[10030,-10000,-10024,-10022]]},{"type":"Polygon","id":72147,"arcs":[[10031]]},{"type":"Polygon","id":78010,"arcs":[[10032]]},{"type":"Polygon","id":72051,"arcs":[[-10004,-9978,-9922,10033]]}]},"states":{"type":"GeometryCollection","geometries":[{"type":"MultiPolygon","arcs":[[[83,78,81,-22,79,-113,235,236,-353,382,383,-519,563,494,535,536,538,483,484,670,671,672,673,674,581,582,669,-638,586,587,589,455,331,222,176,223,307,265,359,262,360,309,395,358,295,185,173,186,127,124,2,73]],[[116]],[[117]],[[118]],[[174]],[[260]],[[292]]],"id":53},{"type":"MultiPolygon","arcs":[[[108,-91,106,-131,210,-220,361,-369,496,497,498,654,655,656,741,742,743,676,677,804,805,634,628,629,630,735,712,713,714,509,-501,315,316,337,-230,190,-110,33,-20,34,18,41,97,86,44,48,27,8,51]]],"id":30},{"type":"MultiPolygon","arcs":[[[-338,-317,-316,500,-510,-715,-714,-713,-736,-631,1095,-1149,-1148,1566,-1708,-1707,2023,2114,2078,2079,1992,1993,1868,1554,1555,-1237,-1236,-1235,1065,-945,889,-688,504,517,518,-384,-383,352,-237,-236,112,-80,21,22,19,-34,109,-191,229]]],"id":16},{"type":"MultiPolygon","arcs":[[[30,62,66,55,52,-155,-154,198,-208,305,-337,391,-404,-529,532,533,606,607,612,613,610,611,512,564,602,603,604,614,-498,-497,368,-362,219,-211,130,-107,90,91,96,101,38]]],"id":38},{"type":"MultiPolygon","arcs":[[[9496,123,140,193,9497,192,135,136,461,572,573,-646,772,-778,876,877,1025,-1049,1113,-1137,-1162,-1161,-1165,1343,-1397,1476,1477,1478,1485,1486,1473,1474,1475,1469,1470,1491,1492,1498,1499,1488,1489,1490,1466,1467,1463,1464,1309,-1194,1154,-1019,-1018,892,-868,817,-724,681,-533,528,403,-392,336,-306,207,-199,153,154,-53,58,104]]],"id":27},{"type":"MultiPolygon","arcs":[[[895,578,1091,1255,1259,1365,1363,1364,1261,1108,1366,1353,1362,1355,1511,1512,-1273,864,865,866,795,548,348,791]],[[893]],[[894]]],"id":23},{"type":"MultiPolygon","arcs":[[[464,465,466,422,9508,434,9512,9514,473,9524,9526,9522,9527,555,9515,691,692,618,619,568,569,570]],[[9536,1049,1210,9537,1408,1534,9538,1552,9539,1899,9540,9544,-2478,2253,2254,2266,2267,2268,2263,2264,2269,2270,2272,2273,2176,2177,2178,2124,1960,1759,1660,1507,1351,1199,1086,9534,9535,923,9530,9529,749,798]],[[9506,9504,9509]],[[9507]],[[9518,9519]],[[9520]],[[9525]],[[9531]],[[9532]],[[-2482,9542]],[[9543,-2480]]],"id":26},{"type":"MultiPolygon","arcs":[[[-570,-569,-620,-619,-693,9516,855,1129,857,1130,1142,9517,1140,1262,1448,1597,1773,1932,1998,1999,2000,1930,1931,1923,1924,1918,1919,1938,1939,1751,1752,1753,1669,-1629,1538,-1477,1396,-1344,1164,1160,1161,1136,-1114,1048,-1026,-878,-877,777,-773,645,-574,-573,-462,-137,9499,9501,9502,542,-466,-465,-571]],[[9503]]],"id":55},{"type":"MultiPolygon","arcs":[[[637,-670,-583,-582,-675,-674,-673,-672,-671,-485,-484,-539,-537,-536,-495,-564,-518,-505,687,-890,944,-1066,1234,1235,1236,1237,1401,1402,1576,1577,1573,1574,1853,1945,1946,1864,1865,1585,1438,1271,955,754,601,640,-587]]],"id":41},{"type":"MultiPolygon","arcs":[[[-513,-612,-611,-614,-613,-608,-607,-534,-682,723,-818,867,-893,1017,1018,-1155,1193,-1310,-1465,1494,-1626,1633,-1731,1804,1805,1806,1807,1809,1810,1781,1782,1784,1644,1645,1654,1655,1525,1683,1682,1546,1547,1656,1657,-1617,1461,-1347,1222,1158,-1008,914,-656,-655,-499,-615,-605,-604,-603,-565]]],"id":46},{"type":"MultiPolygon","arcs":[[[-1513,1589,1721,1722,1754,1755,1756,1778,1779,-1727,1588,-1430,1243,1244,-1089,-971,874,875,-866,-865,1272]]],"id":33},{"type":"MultiPolygon","arcs":[[[973,-875,970,1088,-1245,-1244,1429,-1589,1726,1727,1709,1710,1711,-1519,1458,1268,-1179,1105,-978,975,976,969,983]]],"id":50},{"type":"MultiPolygon","arcs":[[[1178,-1269,-1459,1518,-1712,1858,-1972,-1971,2256,2257,-2523,-2522,2726,2723,3022,3074,3024,2725,2601,2744,2742,2743,2540,2541,2542,2297,2298,2064,2126,2127,2129,2130,2162,2163,2027,2028,2059,2060,2056,2057,2031,2032,2033,1803,1690,1687,1695,1698,1675,1544,1252,1539,1254,1249,994,1006,980,-976,977,-1106]],[[1799]],[[2756,3028]],[[3031,3099,3132,3101,3033,2758,3029,3096]],[[3098,3131]],[[3217]]],"id":36},{"type":"MultiPolygon","arcs":[[[-677,-744,-743,-742,-657,-915,1007,-1159,-1223,1346,-1462,1616,1617,-1834,2017,2018,-2515,2523,2524,2525,2112,2113,2107,2108,2109,2167,2168,2169,2592,-2317,1705,1706,1707,-1567,1147,1148,-1096,-630,-629,-635,-806,-805,-678]]],"id":56},{"type":"MultiPolygon","arcs":[[[-1475,-1474,-1487,-1486,-1479,-1478,-1539,1628,-1670,-1754,-1753,1994,-2069,2132,-2204,2286,2287,-2425,-2424,-2423,2690,-2741,2897,-2903,3094,3095,3055,3056,3058,3059,3070,3071,3068,3069,3065,3066,3062,3063,3052,3053,3049,3050,3046,3047,-2910,2856,-2805,2631,2632,-2516,2389,-2278,2181,-2165,2036,2037,-1806,-1805,1730,-1634,1625,-1495,-1464,-1468,-1467,-1491,-1490,-1489,-1500,-1499,-1493,-1492,-1471,-1470,-1476]]],"id":19},{"type":"MultiPolygon","arcs":[[[1833,-1618,-1658,-1657,-1548,-1547,-1683,-1684,-1526,-1656,-1655,-1646,-1645,-1785,-1783,-1782,-1811,-1810,-1808,-1807,-2038,-2037,2164,-2182,2277,-2390,2515,-2633,-2632,2804,-2857,2909,-3048,3108,-3254,3283,3464,3465,3466,3467,3462,3463,3295,3296,3404,3403,3393,3394,3386,3387,3389,3390,3409,3410,3399,3400,3405,3406,3408,3396,3397,-3342,3173,-3120,2946,2947,2798,2673,2674,2704,2705,-2524,2514,-2019,-2018]]],"id":31},{"type":"MultiPolygon","arcs":[[[1977,2092,1979,2089,2140,2151,2138,2147,2261,2260,2149,2221,2222,2223,2224,2225,2143,1986,1987,1988,2144,2145,2146,1969,1970,1971,-1859,-1711,-1710,-1728,-1780,-1779,-1757,-1756,-1755,-1723,1906,2093]],[[2604]],[[2700]]],"id":25},{"type":"MultiPolygon","arcs":[[[-1919,-1925,-1924,-1932,-1931,-2001,-2000,2087,2207,2208,2483,-2506,2748,-2801,2932,-3136,3303,3304,-3526,3705,-3900,4008,-4157,4222,-4431,-4430,4671,-4693,4908,-4932,5144,-5180,5367,5368,5370,-5502,5572,5584,5585,5578,5579,5580,-5360,-5359,-5169,5134,4937,4938,4713,4714,-4442,-4441,-4509,4365,4366,4367,4149,4052,4053,-3910,3728,3729,-3663,3495,-3471,3221,3222,-3095,2902,-2898,2740,-2691,2422,2423,2424,-2288,-2287,2203,-2133,2068,-1995,-1752,-1940,-1939,-1920]]],"id":17},{"type":"MultiPolygon","arcs":[[[-2057,-2061,-2060,-2029,-2028,-2164,-2163,-2131,-2130,-2128,-2127,-2065,-2299,-2298,-2543,2574,-2731,2789,-2889,-2888,-3105,3232,3233,-3506,3533,3564,3565,3474,3566,3476,3477,3425,3426,3478,3479,3480,3562,3563,3434,3435,3515,3516,3422,3437,3438,3526,3527,3528,3588,3589,-3588,3317,3318,3319,-3224,3083,-3010,2881,-2875,2647,-2639,2419,-2371,2173,2174,-2033,-2032,-2058]]],"id":42},{"type":"MultiPolygon","arcs":[[[-2145,-1989,-1988,2290,2291,-2430,2499,2500,2532,2534,2531,2535,2520,2521,2522,-2258,-2257,-1970,-2147,-2146]]],"id":9},{"type":"MultiPolygon","arcs":[[[2425,2294,2427,2526,-2500,2429,-2292,-2291,-1987,-2144,-2226,-2225]],[[2517]],[[2518,-2223]]],"id":44},{"type":"MultiPolygon","arcs":[[[-1578,2356,-2368,-2367,-2366,-2365,4113,4114,-4294,-4293,-4292,-3783,-4308,4555,-4763,-4239,5475,-5938,6548,6549,-7332,-7331,-7752,7765,7722,7545,7076,7041,6922,6556,5900,5619,5299,5203,5296,5447,5164,5019,4847,4539,4685,4457,4684,4459,4467,4841,4469,3604,2658,2346,-1865,-1947,-1946,-1854,-1575,-1574]],[[6919]],[[6920]],[[7040]],[[7073]],[[7074]]],"id":6},{"type":"MultiPolygon","arcs":[[[-1706,2316,-2593,-2170,-2169,-2959,-2958,3075,3076,-3558,4006,-4617,4736,4737,4738,4739,4740,4741,5424,5425,5351,-4612,-4611,-4610,3978,-3543,-3542,2896,-2335,2329,-1993,-2080,-2079,-2115,-2024]]],"id":49},{"type":"MultiPolygon","arcs":[[[-1402,-1238,-1556,-1555,-1869,-1994,-2330,2334,-2897,3541,3542,-3979,4609,4610,4611,4612,5936,5937,-5476,4238,4762,-4556,4307,3782,4291,4292,4293,-4115,-4114,2364,2365,2366,2367,-2357,-1577,-1403]]],"id":32},{"type":"MultiPolygon","arcs":[[[-2648,2874,-2882,3009,3010,-3226,3242,3243,-3500,3508,-3587,3715,3716,3874,3875,3876,3973,-4051,4212,4210,4348,4349,4480,4481,4482,4483,4357,4358,4335,4336,4164,4165,4142,4143,4144,4119,4120,4121,4122,3912,-3790,3693,-3593,3383,3384,-3272,3147,-3016,2994,-2771,-2770,2689,-2594,2511,-2444,-2268,-2267,-2255,-2254,2477,2478,2479,2480,2481,2482,2487,2641,2489,2642,2567,2608,2553,2416,2374,-2174,2370,-2420,2638]]],"id":39},{"type":"MultiPolygon","arcs":[[[-2264,-2269,2443,-2512,2593,-2690,2769,2770,-2995,3015,-3148,3271,-3385,-3384,3592,-3694,3789,-3913,-4123,4128,-4250,-4249,4410,4411,4419,4420,-4544,4647,4648,4799,4792,4793,4794,4789,4895,4896,4897,4955,4956,4925,4926,4975,4929,4930,4931,-4909,4692,-4672,4429,4430,-4223,4156,-4009,3899,-3706,3525,-3305,-3304,3135,-2933,2800,-2749,2505,-2484,-2209,2506,2508,2440,-2178,-2177,-2274,-2273,-2271,-2270,-2265]]],"id":18},{"type":"MultiPolygon","arcs":[[[-2743,2873,3093,3043,3136,3236,3325,3511,3501,3786,4108,3927,3924,3765,3925,3768,-3732,3769,-3734,3770,3704,3646,3504,3505,-3234,-3233,3104,2887,2888,-2790,2730,-2575,-2542,-2541,-2744]]],"id":34},{"type":"MultiPolygon","arcs":[[[-2525,-2706,-2705,-2675,-2674,-2799,-2948,-2947,3119,-3174,3341,3342,-3598,3920,3921,-4261,4340,-4580,-4579,4881,4882,-5255,5325,5326,5327,5217,5218,5315,5316,5520,5521,5506,5507,5331,5329,-4739,-4738,-4737,4616,-4007,3557,-3077,-3076,2957,2958,-2168,-2110,-2109,-2108,-2114,-2113,-2526]]],"id":8},{"type":"MultiPolygon","arcs":[[[-3529,-3528,-3804,-3803,-3802,-3800,-3799,-3798,-3796,-3795,-3794,4004,4005,3890,3845,3979,-4025,4171,4172,4386,4387,4388,4521,4522,-4881,4885,-5131,5283,5284,5188,5384,5385,5386,5419,5420,5108,5109,5110,4797,4798,-4733,-4482,-4481,-4350,-4349,-4211,-4213,4050,-3974,-3877,-3876,-3875,-3717,-3716,3586,-3509,3499,-3244,-3243,3225,-3011,-3084,3223,-3320,-3319,-3318,3587,-3590,-3589]]],"id":54},{"type":"MultiPolygon","arcs":[[[-3496,3662,-3730,-3729,3909,-4054,-4053,-4150,-4368,-4367,-4366,4508,4440,4441,-4715,-4714,-4939,-4938,-5135,5168,5358,5359,-5581,-5580,-5646,5722,5723,5724,5923,5924,5925,5926,-6128,6188,6189,5995,5996,5997,5998,5887,5940,5941,5912,5913,5914,5731,5954,5955,5956,5943,5944,5945,5830,5859,5860,5960,5961,-5781,5735,-5567,5553,-5310,-5309,5043,5044,-4815,4761,-4534,4486,-4333,4181,4182,4027,3982,3983,-3866,3742,-3643,3540,3469,-3465,-3284,3253,-3109,-3047,-3051,-3050,-3054,-3053,-3064,-3063,-3067,-3066,-3070,-3069,-3072,-3071,-3060,-3059,-3057,-3056,-3096,-3223,-3222,3470]]],"id":29},{"type":"MultiPolygon","arcs":[[[-3407,-3406,-3401,-3400,-3411,-3410,-3391,-3390,-3388,-3387,-3395,-3394,-3404,-3405,-3297,-3296,-3464,-3463,-3468,-3467,-3466,-3470,-3541,3642,-3743,3865,-3984,-3983,-4028,-4183,-4182,4332,-4487,4533,-4762,4814,-5045,-5044,5308,5309,-5554,5566,5567,5568,5541,5542,5533,5534,5604,5605,5455,5456,5458,5459,5536,5537,5468,5469,5538,5539,5465,5466,5462,5530,5531,5529,5526,5527,-5326,5254,-4883,-4882,4578,4579,-4341,4260,-3922,-3921,3597,-3343,-3398,-3397,-3409]]],"id":20},{"type":"MultiPolygon","arcs":[[[3730,3731]],[[3732,3733]],[[4084,4085,-4061,3736,3737,-3477,-3567,-3475,-3566,3734,4086,4378,4379,4380,4381,4382,4383,-4251]]],"id":10},{"type":"MultiPolygon","arcs":[[[-3480,-3479,-3427,-3426,-3478,-3738,-3737,4060,-4086,-4085,4250,-4384,-4383,-4382,4778,4774,4775,4776,4860,4859,4678,4569,4567,4252,4394,4153,4062,3805,3815,3821,4072,4177,4071,4178,4174,4509,4277,4601,4719,4718,4603,4279,4280,4098,4099,4100,3830,3792,3793,3794,3795,3797,3798,3799,3801,3802,3803,-3527,-3439,-3438,-3423,-3517,-3516,-3436,-3435,-3564,-3563,-3481]],[[4150]],[[4771,4772]],[[-4380,4773]],[[4850,4851]],[[4852,4853,4854,4855]],[[4856,4857,4858]]],"id":24},{"type":"MultiPolygon","arcs":[[[5598],[-4005,-3793,-3831,-4101,-4100,-4373,4405,4487,4326,4395,4657,4804,4869,5072,5198,5197,5006,4868,4801,4983,5235,5379,5433,5381,5117,5157,5338,5483,5546,5671,5669,5699,5651,5482,5440,5292,5403,5589,5593,5639,5682,5897,5893,5929,5890,5839,5930,5871,5841,5872,5865,5866,5867,5868,5869,5931,5932,5895,5896,5817,5818,5819,5901,5739,5740,5906,5907,5908,5727,5728,5729,5687,5988,5689,5690,5933,5934,5921,5922,5874,5950,5951,5952,5953,5883,5884,5993,5880,5915,5916,5917,5904,5905,-5845,-5743,5655,-5625,-5246,-5245,-5244,-5109,-5421,-5420,-5387,-5386,-5385,-5189,-5285,-5284,5130,-4886,4880,-4523,-4522,-4389,-4388,-4387,-4173,-4172,4024,-3980,-3846,-3891,-4006]],[[5060,-4854]],[[5061,-4858]],[[-4851,5062]],[[5065,5066,-4776,5067,5063,5414]],[[-4772,5068]],[[5862,5863,5864]]],"id":51},{"type":"MultiPolygon","arcs":[[[-4120,-4145,-4144,-4143,-4166,-4165,-4337,-4336,-4359,-4358,-4484,-4483,4732,-4799,-4798,-5111,-5110,5243,5244,5245,5624,-5656,5742,5844,5845,5834,5835,5842,5843,5822,5823,5909,5910,5853,5938,5939,5856,5857,5918,5919,5712,5714,5715,5675,5676,5753,5962,5963,5849,5850,5957,5958,5983,5984,-5924,-5725,-5724,-5723,5645,-5579,-5586,-5585,-5573,5501,-5371,-5369,-5368,5179,-5145,-4931,-4930,-4976,-4927,-4926,-4957,-4956,-4898,-4897,-4896,-4790,-4795,-4794,-4793,-4800,-4649,-4648,4543,-4421,-4420,-4412,-4411,4248,4249,-4129,-4122,-4121]],[[5982,-5926]]],"id":21},{"type":"MultiPolygon","arcs":[[[4371,4372,-4099,-4281]]],"id":11},{"type":"MultiPolygon","arcs":[[[-5794,5794,5795,5796,-7198,7619,7620,-8060,8229,8523,8212,7750,7751,7330,7331,-6550,-6549,-5937,-4613,-5352,-5426,-5425,-4742,-4741,-4740]]],"id":4},{"type":"MultiPolygon","arcs":[[[-5569,-5568,-5736,5780,-5962,5970,-6145,-6281,6343,-6579,6637,-6754,6799,6800,-7140,7252,7253,7254,7255,7427,7428,7424,7425,7426,7406,7466,7467,7468,7364,7365,7250,7251,7160,7161,7055,7056,6953,6954,-6894,6717,-6654,6428,-6395,6041,6042,5813,5814,5809,5810,5811,5806,5807,-5800,-5327,-5528,-5527,-5530,-5532,-5531,-5463,-5467,-5466,-5540,-5539,-5470,-5469,-5538,-5537,-5460,-5459,-5457,-5456,-5606,-5605,-5535,-5534,-5543,-5542]]],"id":40},{"type":"MultiPolygon","arcs":[[[-5316,-5219,-5218,-5328,5799,5800,5801,-6401,6582,6583,-6887,7029,7030,7177,7178,-7589,7679,7680,7681,7682,7683,7989,7990,7991,7808,7809,7810,7913,7914,8132,8058,8059,-7621,-7620,7197,-5797,-5796,-5795,5793,-5330,-5332,-5508,-5507,-5522,-5521,-5317]]],"id":35},{"type":"MultiPolygon","arcs":[[[-5715,-5713,-5920,-5919,-5858,-5857,-5940,-5939,-5854,-5911,-5910,-5824,-5823,-5844,-5843,-5836,-5835,-5846,-5906,-5905,-5918,-5917,-5916,-5881,-5994,-5885,-5884,-5954,6009,6010,6011,6110,6111,6255,6256,6257,6200,6313,6314,6420,6421,6485,6486,6622,6623,-6850,6852,6853,6819,6820,6744,6745,6746,6831,6832,6816,6817,6810,6811,6749,6750,6739,6724,6778,6779,6780,6798,6766,6767,6768,6796,6797,6792,6793,-6761,6632,-6439,-6438,-6437,-6436,6302,-6189,6127,-5927,-5983,-5925,-5985,-5984,-5959,-5958,-5851,-5850,-5964,-5963,-5754,-5677,-5676,-5716]]],"id":47},{"type":"MultiPolygon","arcs":[[[-5951,-5875,-5923,-5922,-5935,-5934,-5691,-5690,-5989,-5688,-5730,-5729,-5728,-5909,-5908,-5907,-5741,-5740,-5902,-5820,-5819,-5818,-5897,-5896,-5933,-5932,-5870,6067,6065,6075,6114,6205,6220,6063,6084,6272,6460,6454,6611,6285,6612,6592,6521,6588,6830,6787,6857,6785,6916,7011,7133,7294,7132,7295,7304,7305,7306,7307,7273,7026,7027,7028,6951,6900,6871,6872,6876,6877,6702,6703,6782,6672,6673,6657,6658,6794,6795,6721,6775,6776,6777,6697,6698,6827,6906,6907,6908,6847,6848,6849,-6624,-6623,-6487,-6486,-6422,-6421,-6315,-6314,-6201,-6258,-6257,-6256,-6112,-6111,-6012,-6011,-6010,-5953,-5952]],[[6070,-5866,6068,6286]],[[-6072,5863,-6073,5867]],[[6283,6281,6610]],[[7293,7303]],[[7301,7302]]],"id":37},{"type":"MultiPolygon","arcs":[[[-5808,-5807,-5812,-5811,-5810,-5815,-5814,-6043,-6042,6394,-6429,6653,-6718,6893,-6955,-6954,-7057,-7056,-7162,-7161,-7252,-7251,-7366,-7365,-7469,-7468,-7467,-7407,-7427,-7426,-7425,-7429,-7428,-7256,-7255,-7540,7637,-7672,7843,-7932,-7931,-7930,8243,-8259,8424,-8477,-8476,-8670,8712,8713,-8973,9022,9046,9047,9142,9195,9144,9052,9194,9192,9196,9241,9239,9286,9229,9290,9289,9231,9245,9233,9246,9288,9300,9326,9282,9280,9327,9325,9302,9320,9332,9323,9333,9353,9335,9356,9354,9379,9421,9416,9417,9471,9467,9468,9469,9479,9478,9459,9456,9402,9331,9257,9190,9003,8903,8900,8913,8411,8413,-7914,-7811,-7810,-7809,-7992,-7991,-7990,-7684,-7683,-7682,-7681,-7680,7588,-7179,-7178,-7031,-7030,6886,-6584,-6583,6400,-5802,-5801]],[[9050,9141]],[[9191]],[[9285,9283,9324]],[[9318,9352]],[[9319]],[[9413,9414,9377,9350,9378,9415]],[[9351]],[[9404,9462]],[[9463,9464,9465,9407,9408,9405,9466]],[[9409,9410,9411,9412]],[[9461,9480]]],"id":48},{"type":"MultiPolygon","arcs":[[[-5831,-5946,-5945,-5944,-5957,-5956,-5955,-5732,-5915,-5914,-5913,-5942,-5941,-5888,-5999,-5998,-5997,-5996,-6190,-6303,6435,6436,6437,6438,-6633,6760,6761,6762,7036,-7048,7153,7154,-7441,-7440,7688,7689,7690,7691,7692,7802,7819,7820,7758,7759,7744,7745,7669,7670,7671,-7638,7539,-7254,-7253,7139,-6801,-6800,6753,-6638,6578,-6344,6280,6144,-5971,-5961,-5861,-5860]]],"id":5},{"type":"MultiPolygon","arcs":[[[-6658,-6674,-6673,-6783,-6704,-6703,-6878,-6877,-6873,-6872,-6901,-6952,-7029,-7028,-7027,-7274,-7308,7355,7616,9549,9548,7718,9545,7886,9546,7888,8102,8067,8099,8069,8098,8071,8097,8073,8074,8075,7922,-7917,7892,-7846,7735,7566,7567,7508,7509,7462,7463,-7367,7276,7079,7080,6942,6943,6944,6945,6946,-6698,-6778,-6777,-6776,-6722,-6796,-6795,-6659]],[[-7302,7353]],[[-7306,7354]],[[7615,9547]],[[8096]],[[8100]],[[8101]]],"id":45},{"type":"MultiPolygon","arcs":[[[6960,-6779,-6725,-6740,-6751,-6750,-6812,-6811,-6818,-6817,-6833,6996,-7015,-7019,7048,-7189,-7192,7226,-7446,7518,7519,-7600,7723,7724,-7870,7896,-8039,8080,-8132,-8178,8215,-8312,8339,8340,-8502,8502,-8602,8701,8702,8709,8710,8711,8589,8590,8704,8705,8706,8696,8697,8722,8699,8723,8724,8725,-8640,8540,-8455,8270,8271,-8148,7976,7977,-7850,7703,-7627,7474,-7447,7327,-7278,7200,-6974,-6977]],[[8693,8694]]],"id":1},{"type":"MultiPolygon","arcs":[[[-6945,-6944,-6943,-7081,-7080,-7277,7366,-7464,-7463,-7510,-7509,-7568,-7567,-7736,7845,-7893,7916,-7923,-8076,-8075,8304,8299,8355,8352,8546,8628,8544,8629,8727,8728,8769,8770,8622,8716,8717,8857,8858,8784,8759,8785,8762,8763,8765,8766,8757,8758,8754,8767,8768,-8702,8601,-8503,8501,-8341,-8340,8311,-8216,8177,8131,-8081,8038,-7897,7869,-7725,-7724,7599,-7520,-7519,7445,-7227,7191,7188,-7049,7018,7014,-6997,-6832,-6747,-6746,-6745,-6821,-6820,-6854,-6853,-6849,-6848,-6909,-6908,-6907,-6828,-6699,-6947,-6946]],[[8302]],[[8303]],[[8351]],[[8542,8627]],[[8545]],[[8726]]],"id":13},{"type":"MultiPolygon","arcs":[[[-6767,-6799,-6781,-6780,-6961,6976,6973,-7201,7277,-7328,7446,-7475,7626,-7704,7849,-7978,-7977,8147,-8272,-8271,8454,-8541,8639,-8726,-8725,8869,8892,8910,-8878,8792,8793,8651,8683,8681,8682,8677,8678,8679,8665,8666,-8512,-8511,-8296,-8295,-8294,8126,8127,8128,8129,-7966,7949,-7690,-7689,7439,7440,-7155,-7154,7047,-7037,-6763,-6762,-6794,-6793,-6798,-6797,-6769,-6768]]],"id":28},{"type":"MultiPolygon","arcs":[[[7929,7930,7931,-7844,-7671,-7670,-7746,-7745,-7760,-7759,-7821,-7820,-7803,-7693,-7692,-7691,-7950,7965,-8130,-8129,-8128,-8127,8293,8294,8295,8510,8511,-8667,-8666,-8680,-8679,-8678,-8683,-8682,-8684,-8652,-8794,-8793,8877,8878,9040,9067,9060,9061,9062,9063,9135,9065,9140,9136,9137,9138,9139,9033,9128,9118,9119,9120,9030,9121,9122,9160,9124,9161,9126,9168,9163,9164,9165,9166,9167,9109,9088,9076,9099,-9047,-9023,8972,-8714,-8713,8669,8475,8476,-8425,8258,-8244]],[[9133,9134],[-9057],[-9060]],[[9085]],[[9117,9159]],[[9132]],[[9162]]],"id":22},{"type":"MultiPolygon","arcs":[[[-8759,-8758,-8767,-8766,-8764,-8763,-8786,-8760,-8785,-8859,-8858,-8718,-8717,-8623,-8771,-8770,-8729,8866,8936,9043,9151,9203,9226,9216,9150,9019,8933,9020,9177,9016,9175,9217,9272,9210,9273,9212,9268,9359,9385,9433,9387,9431,9443,9427,9444,9429,9445,9481,9489,9483,9491,9485,9490,9487,9494,9477,9453,9441,9393,9439,9395,9372,9342,9340,9310,9294,9261,9258,9201,9495,8995,8896,8996,9104,9036,9103,9038,8943,9039,8945,8836,8827,8837,8829,8819,8813,-8697,-8707,-8706,-8705,-8591,-8590,-8712,-8711,-8710,-8703,-8769,-8768,-8755]],[[-8695,8810]],[[8815,8812,8816,8825]],[[8935,9021]],[[9180,9013,9178,9218]],[[9102]],[[9306,9338]],[[9361,9384]],[[9369,9396]],[[9383,9432]],[[9390,9438]],[[9425,9442]],[[9436,9454]],[[9451]],[[9472,9493]],[[9492]]],"id":12},{"type":"MultiPolygon","arcs":[[[9551,9555]],[[9552]],[[9553]],[[9554]],[[9556]],[[9557]],[[9558]],[[9559]]],"id":15},{"type":"MultiPolygon","arcs":[[[9560]],[[9561]],[[9562]],[[9563]],[[9564]],[[9565]],[[9566]],[[9567]],[[9568]],[[9569]],[[9570]],[[9571]],[[9572]],[[9573]],[[9574]],[[9575]],[[9576]],[[9577]],[[9578]],[[9579]],[[9580]],[[9581]],[[9582]],[[9583]],[[9584]],[[9585]],[[9586]],[[9587]],[[9588]],[[9589]],[[9590]],[[9591]],[[9592]],[[9593]],[[9594]],[[9595]],[[9597,9618,9602,9619,9612,9607,9608,9609,9720,9605,9721,9716,9711,9790,9789,9785,9783,9781,9772,9779,9756,9770,9685,9697,9691,9695,9643,9672,9660,9806,9662,9670,9635,9671,9645,9664,9647,9693,9650,9694,9689,9696,9687,9683,9771,9768,9769,9758,9753,9764,9751,9765,9744,9766,9734,9724,9767,9759,9631,9617,9599,9614]],[[9600]],[[9601]],[[9604]],[[9613]],[[9621]],[[9622]],[[9623]],[[9624]],[[9625]],[[9626]],[[9627]],[[9628]],[[9629]],[[9630]],[[9641,9673,9637,9674,9639,9682]],[[9642]],[[9651]],[[9699,9653,9700]],[[9654]],[[9655]],[[9656]],[[9657]],[[9658]],[[9659]],[[9675,9676,9677,9704,9702,9666,9701,9668,9703,9679]],[[9669]],[[9681,9692]],[[9698]],[[9705]],[[9706]],[[9707]],[[9712]],[[9713]],[[9714]],[[9715]],[[9735]],[[9736]],[[9737]],[[9738]],[[9739]],[[9740]],[[9741]],[[9742]],[[9745]],[[9746]],[[9748,9763]],[[9749]],[[9752]],[[9760]],[[9761]],[[9762]],[[9780]],[[9786]],[[9787]],[[9788]],[[9791]],[[9792]],[[9793]],[[9794]],[[9795]],[[9796]],[[9797]],[[9798]],[[9799]],[[9800]],[[9801]],[[9802]],[[9803]],[[9804]],[[9805]]],"id":2},{"type":"MultiPolygon","arcs":[[[9947,9822,9926,9955,9816,9956,9998,9980,9859,9828,9889,9984,9884,9892,9924,10033,10004,9863,9902,9987,9897,10012,10018,10009,10028,10029,10020,10030,10000,10013,9950,9933,9988,9970,9851,9911,9996,9871,9958,9989,9830,9936]],[[10031]]],"id":72},{"type":"MultiPolygon","arcs":[[[10005]],[[10032]]],"id":78}]},"land":{"type":"MultiPolygon","arcs":[[[5598],[5868,6067,6065,6075,6114,6205,6220,6063,6084,6272,6460,6454,6611,6285,6612,6592,6521,6588,6830,6787,6857,6785,6916,7011,7133,7294,7132,7295,7304,7354,7306,7355,7616,9549,9548,7718,9545,7886,9546,7888,8102,8067,8099,8069,8098,8071,8097,8073,8304,8299,8355,8352,8546,8628,8544,8629,8727,8866,8936,9043,9151,9203,9226,9216,9150,9019,8933,9020,9177,9016,9175,9217,9272,9210,9273,9212,9268,9359,9385,9433,9387,9431,9443,9427,9444,9429,9445,9481,9489,9483,9491,9485,9490,9487,9494,9477,9453,9441,9393,9439,9395,9372,9342,9340,9310,9294,9261,9258,9201,9495,8995,8896,8996,9104,9036,9103,9038,8943,9039,8945,8836,8827,8837,8829,8819,8813,8697,8722,8699,8723,8869,8892,8910,8878,9040,9067,9060,9061,9062,9063,9135,9065,9140,9136,9137,9138,9139,9033,9128,9118,9119,9120,9030,9121,9122,9160,9124,9161,9126,9168,9163,9164,9165,9166,9167,9109,9088,9076,9099,9047,9142,9195,9144,9052,9194,9192,9196,9241,9239,9286,9229,9290,9289,9231,9245,9233,9246,9288,9300,9326,9282,9280,9327,9325,9302,9320,9332,9323,9333,9353,9335,9356,9354,9379,9421,9416,9417,9471,9467,9468,9469,9479,9478,9459,9456,9402,9331,9257,9190,9003,8903,8900,8913,8411,8413,7914,8132,8058,8229,8523,8212,7750,7765,7722,7545,7076,7041,6922,6556,5900,5619,5299,5203,5296,5447,5164,5019,4847,4539,4685,4457,4684,4459,4467,4841,4469,3604,2658,2346,1865,1585,1438,1271,955,754,601,640,587,589,455,331,222,176,223,307,265,359,262,360,309,395,358,295,185,173,186,127,124,2,73,83,78,81,22,34,18,41,97,86,44,48,27,8,51,108,91,96,101,38,30,62,66,55,58,104,9496,123,140,193,9497,192,135,9499,9501,9502,542,466,422,9508,434,9512,9514,473,9524,9526,9522,9527,555,9515,691,9516,855,1129,857,1130,1142,9517,1140,1262,1448,1597,1773,1932,1998,2087,2207,2506,2508,2440,2178,2124,1960,1759,1660,1507,1351,1199,1086,9534,9535,923,9530,9529,749,798,9536,1049,1210,9537,1408,1534,9538,1552,9539,1899,9540,9544,2478,9543,2480,9542,2482,2487,2641,2489,2642,2567,2608,2553,2416,2374,2174,2033,1803,1690,1687,1695,1698,1675,1544,1252,1539,1254,1249,994,1006,980,976,969,983,973,875,866,795,548,348,791,895,578,1091,1255,1259,1365,1363,1364,1261,1108,1366,1353,1362,1355,1511,1589,1721,1906,2093,1977,2092,1979,2089,2140,2151,2138,2147,2261,2260,2149,2221,2518,2223,2425,2294,2427,2526,2500,2532,2534,2531,2535,2520,2726,2723,3022,3074,3024,2725,2601,2744,2873,3093,3043,3136,3236,3325,3511,3501,3786,4108,3927,3924,3765,3925,3768,3730,3769,3732,3770,3704,3646,3504,3533,3564,3734,4086,4378,4773,4380,4778,4774,5067,5063,5414,5065,5066,4776,4860,4859,4678,4569,4567,4252,4394,4153,4062,3805,3815,3821,4072,4177,4071,4178,4174,4509,4277,4601,4719,4718,4603,4279,4371,4405,4487,4326,4395,4657,4804,4869,5072,5198,5197,5006,4868,4801,4983,5235,5379,5433,5381,5117,5157,5338,5483,5546,5671,5669,5699,5651,5482,5440,5292,5403,5589,5593,5639,5682,5897,5893,5929,5890,5839,5930,5871,5841,5872,6068,6286,6070,5866],[5864,5862],[-6072],[-6073]],[[116]],[[117]],[[118]],[[174]],[[260]],[[292]],[[893]],[[894]],[[9506,9504,9509]],[[9507]],[[9518,9519]],[[9520]],[[9525]],[[9531]],[[9532]],[[9503]],[[1799]],[[2756,3028]],[[3031,3099,3132,3101,3033,2758,3029,3096]],[[3098,3131]],[[3217]],[[2604]],[[2700]],[[2517]],[[6919]],[[6920]],[[7040]],[[7073]],[[7074]],[[4150]],[[4772,5068]],[[4851,5062]],[[4854,4855,4852,5060]],[[4858,4856,5061]],[[6283,6281,6610]],[[7293,7303]],[[7302,7353]],[[9050,9141]],[[9191]],[[9285,9283,9324]],[[9318,9352]],[[9319]],[[9413,9414,9377,9350,9378,9415]],[[9351]],[[9404,9462]],[[9463,9464,9465,9407,9408,9405,9466]],[[9409,9410,9411,9412]],[[9461,9480]],[[7615,9547]],[[8096]],[[8100]],[[8101]],[[8693,8810]],[[8302]],[[8303]],[[8351]],[[8542,8627]],[[8545]],[[8726]],[[-9060,-9057],[9133],[9134]],[[9085]],[[9117,9159]],[[9132]],[[9162]],[[8815,8812,8816,8825]],[[8935,9021]],[[9180,9013,9178,9218]],[[9102]],[[9306,9338]],[[9361,9384]],[[9369,9396]],[[9383,9432]],[[9390,9438]],[[9425,9442]],[[9436,9454]],[[9451]],[[9472,9493]],[[9492]],[[9551,9555]],[[9552]],[[9553]],[[9554]],[[9556]],[[9557]],[[9558]],[[9559]],[[9560]],[[9561]],[[9562]],[[9563]],[[9564]],[[9565]],[[9566]],[[9567]],[[9568]],[[9569]],[[9570]],[[9571]],[[9572]],[[9573]],[[9574]],[[9575]],[[9576]],[[9577]],[[9578]],[[9579]],[[9580]],[[9581]],[[9582]],[[9583]],[[9584]],[[9585]],[[9586]],[[9587]],[[9588]],[[9589]],[[9590]],[[9591]],[[9592]],[[9593]],[[9594]],[[9595]],[[9597,9618,9602,9619,9612,9607,9608,9609,9720,9605,9721,9716,9711,9790,9789,9785,9783,9781,9772,9779,9756,9770,9685,9697,9691,9695,9643,9672,9660,9806,9662,9670,9635,9671,9645,9664,9647,9693,9650,9694,9689,9696,9687,9683,9771,9768,9769,9758,9753,9764,9751,9765,9744,9766,9734,9724,9767,9759,9631,9617,9599,9614]],[[9600]],[[9601]],[[9604]],[[9613]],[[9621]],[[9622]],[[9623]],[[9624]],[[9625]],[[9626]],[[9627]],[[9628]],[[9629]],[[9630]],[[9641,9673,9637,9674,9639,9682]],[[9642]],[[9651]],[[9699,9653,9700]],[[9654]],[[9655]],[[9656]],[[9657]],[[9658]],[[9659]],[[9675,9676,9677,9704,9702,9666,9701,9668,9703,9679]],[[9669]],[[9681,9692]],[[9698]],[[9705]],[[9706]],[[9707]],[[9712]],[[9713]],[[9714]],[[9715]],[[9735]],[[9736]],[[9737]],[[9738]],[[9739]],[[9740]],[[9741]],[[9742]],[[9745]],[[9746]],[[9748,9763]],[[9749]],[[9752]],[[9760]],[[9761]],[[9762]],[[9780]],[[9786]],[[9787]],[[9788]],[[9791]],[[9792]],[[9793]],[[9794]],[[9795]],[[9796]],[[9797]],[[9798]],[[9799]],[[9800]],[[9801]],[[9802]],[[9803]],[[9804]],[[9805]],[[9947,9822,9926,9955,9816,9956,9998,9980,9859,9828,9889,9984,9884,9892,9924,10033,10004,9863,9902,9987,9897,10012,10018,10009,10028,10029,10020,10030,10000,10013,9950,9933,9988,9970,9851,9911,9996,9871,9958,9989,9830,9936]],[[10031]],[[10005]],[[10032]]]}},"arcs":[[[162416,583189],[235,-863],[96,-3199],[218,-1080],[-270,-1240]],[[162695,576807],[-442,-309],[-4397,83]],[[157856,576581],[-6,1800],[-436,605],[-476,3063],[168,1173],[2781,-89],[2529,56]],[[203483,583172],[-111,-3267],[363,0],[1,-4839],[604,-13]],[[204340,575053],[0,-6407],[-109,-3],[-2,-3885]],[[204229,564758],[-1073,300],[-477,661],[-51,-1946]],[[202628,563773],[-410,-2654],[-860,-2419],[-1043,-435],[-462,561]],[[199853,558826],[28,9804],[99,1617],[303,-7],[-114,3279],[301,528],[-35,7509],[73,1627]],[[200508,583183],[2975,-11]],[[181317,583162],[311,-3373],[317,707],[390,-2531],[-133,-1969],[788,-1235],[-38,-1636],[347,-663],[20,-2122]],[[183319,570340],[342,-1417],[-25,-1100],[609,-791]],[[184245,567032],[386,-2907],[-296,-416]],[[184335,563709],[-284,-666],[56,-2638],[-277,-1038],[59,-2315]],[[183889,557052],[-896,67]],[[182993,557119],[-467,-2]],[[182526,557117],[100,1561],[-233,2073],[31,1860],[-477,1550],[-122,1357],[-538,-515],[111,-1134],[-1262,-12],[41,-3203],[-354,-5]],[[179823,560649],[-1,1601],[-1073,-52],[-59,2655]],[[178690,564853],[-26,3920],[480,4],[-5,6467],[-109,1580],[659,10],[112,1730],[-222,1681],[-105,2947]],[[179474,583192],[1843,-30]],[[175797,583199],[0,-9287]],[[175797,573912],[-2052,-27],[-1,6456],[-689,-16]],[[173055,580325],[0,2843]],[[173055,583168],[2742,31]],[[199853,558826],[-98,-1296],[-681,144],[-597,-3335]],[[198477,554339],[-62,2205],[-374,544],[-689,-278]],[[197352,556810],[-1279,1157],[-333,1654]],[[195740,559621],[7,3507],[733,-36],[49,1308],[485,-270],[63,8718],[182,-420],[75,5957],[166,-2],[64,4792]],[[197564,583175],[2944,8]],[[221924,574709],[-1819,8]],[[220105,574717],[-103,3252],[0,5200]],[[220002,583169],[1830,2]],[[221832,583171],[2,-5231],[90,-3231]],[[178690,564853],[-400,43],[-118,-1893],[-229,-480],[-675,326],[-47,1381],[-616,5246],[-699,-1924],[-111,1019]],[[175795,568571],[2,5341]],[[175797,583199],[3677,-7]],[[220105,574717],[-364,-11]],[[219741,574706],[-362,-1],[-1,1625],[-1819,10],[0,-1619]],[[217559,574721],[-1091,11],[0,3239],[-126,10],[-2,5191]],[[216340,583172],[3662,-3]],[[186538,583158],[27,-9701]],[[186565,573457],[-1094,108],[-10,-3230],[-2142,5]],[[181317,583162],[5221,-4]],[[193947,567081],[-536,-46],[0,1653],[-331,-44],[0,1618],[-2172,10],[0,-1617],[-363,1]],[[190545,568656],[35,14501]],[[190580,583157],[3492,32]],[[194072,583189],[-44,-7981],[114,-2218],[-241,-2960],[46,-2949]],[[195740,559621],[-133,1040],[-935,56],[-433,-1362],[-302,349]],[[193937,559704],[10,7377]],[[194072,583189],[3492,-14]],[[206421,583169],[52,-6498],[182,-1619]],[[206655,575052],[-2315,1]],[[203483,583172],[2938,-3]],[[228231,583191],[207,-4516],[166,-1312],[-187,-2686]],[[228417,574677],[-2130,0]],[[226287,574677],[-64,8514]],[[226223,583191],[2008,0]],[[230526,583183],[49,-8486]],[[230575,574697],[-2158,-20]],[[228231,583191],[2295,-8]],[[223380,574697],[-1,-3219],[-639,-11]],[[222740,571467],[-816,5]],[[221924,571472],[0,3237]],[[221832,583171],[1466,10]],[[223298,583181],[0,-5246],[82,-3238]],[[226287,574677],[-1090,12]],[[225197,574689],[-1817,8]],[[223298,583181],[2925,10]],[[168030,583185],[-42,-19407]],[[167988,563778],[-338,-263]],[[167650,563515],[-25,344]],[[167625,563859],[88,1055],[-308,2219],[-250,148],[-800,-1281],[-586,-1451],[-103,1727],[-570,-649],[55,-1799]],[[165151,563828],[-497,4],[-264,1945],[-610,1930],[-82,1382],[-532,1416],[-331,3958]],[[162835,574463],[-140,2344]],[[162416,583189],[2209,-16],[3405,12]],[[171950,583192],[-373,-3049],[-182,-3367],[361,7],[-7,-9706],[182,-1632]],[[171931,565445],[-274,12],[-1,-4693],[-435,1680],[-361,-1132]],[[170860,561312],[-165,418],[-548,-890],[-372,2707],[-363,-947]],[[169412,562600],[-132,2358],[406,757],[-5,1210],[289,2381],[-187,3288],[317,4420],[-332,3951],[45,2218]],[[169813,583183],[2137,9]],[[173055,580325],[-26,-14911]],[[173029,565414],[-1098,31]],[[171950,583192],[1105,-24]],[[169412,562600],[-45,-983],[-485,620],[-109,1069],[-446,-598],[-339,1070]],[[168030,583185],[1783,-2]],[[188725,567028],[0,1623]],[[188725,568651],[374,0],[10,14481]],[[189109,583132],[1471,25]],[[190545,568656],[-199,-1611],[-1621,-17]],[[212324,583169],[-3,-5174],[149,-1639]],[[212470,576356],[-3237,14]],[[209233,576370],[-1,6810]],[[209232,583180],[3092,-11]],[[214880,583162],[-1,-3570]],[[214879,579592],[-364,-1],[-2,-1615],[-225,0],[0,-3239]],[[214288,574737],[-1816,1]],[[212472,574738],[-2,1618]],[[212324,583169],[2556,-7]],[[186538,583158],[2571,-26]],[[188725,568651],[-718,-1],[2,2422],[-362,805],[-543,29],[-82,1076],[-457,475]],[[217559,574721],[0,-1621]],[[217559,573100],[-2179,20],[-1,4853],[-499,6],[-1,1613]],[[214880,583162],[1460,10]],[[233488,574623],[-724,-26]],[[232764,574597],[-2189,100]],[[230526,583183],[3019,-20]],[[233545,583163],[240,-2188],[403,729],[4,-3863],[-704,-3],[0,-3215]],[[209233,576370],[4,-4555]],[[209237,571815],[-1620,-3],[0,1622],[-361,4],[0,1612],[-601,2]],[[206421,583169],[2811,11]],[[175795,568571],[0,-4402]],[[175795,564169],[-503,1656],[-279,-929],[19,-2373]],[[175032,562523],[-509,-3],[4,1886],[-1500,-263]],[[173027,564143],[2,1271]],[[217559,573100],[127,-1619],[-3,-6492],[125,-2],[-3,-3239]],[[217805,561748],[-2509,-19]],[[215296,561729],[1,3269],[-141,0],[0,6485],[-143,10],[1,3259],[-726,-15]],[[156776,574866],[145,-2337],[-336,700],[191,1637]],[[156017,576188],[369,-1160],[-55,-1922],[-274,764],[-40,2318]],[[156711,577873],[437,-1001],[-571,-1183],[-175,1059],[309,1125]],[[239768,576252],[-26,-7172],[45,-6527]],[[239787,562553],[-1934,131],[-2,-977],[-1789,-11]],[[236062,561696],[-28,9709]],[[236034,571405],[-5,6210]],[[236029,577615],[339,174],[234,-1133],[1049,-347],[153,-2131],[908,561],[5,841],[718,948],[333,-276]],[[157403,572219],[-141,1501],[247,575],[362,-1247],[-15,3533]],[[162835,574463],[-341,252],[-585,-931],[-105,-3299],[196,-417]],[[162000,570068],[-3852,30]],[[158148,570098],[-745,2121]],[[212472,574738],[0,-3235],[160,6],[-1,-4641]],[[212631,566868],[-1041,215],[-260,-1783],[-494,-877],[-372,2569],[-383,-709],[-219,-2110],[-619,322]],[[209243,564495],[-6,7320]],[[219741,574706],[109,-3229],[1,-6504],[110,0],[-1,-3243]],[[219960,561730],[-1079,-3]],[[218881,561727],[-1076,21]],[[243362,568345],[29,-12216],[-17,-11281]],[[243374,544848],[-834,-2841],[-305,-2384]],[[242235,539623],[-250,56]],[[241985,539679],[-25,1880],[-2117,44]],[[239843,541603],[15,4838]],[[239858,546441],[-15,12916],[-56,3196]],[[239768,576252],[1003,-1645],[260,60],[-216,-1482],[572,-281],[382,-4206],[280,489],[20,1987],[576,81],[136,-1748],[581,-1162]],[[209243,564495],[-257,1115],[-593,-179],[-307,1362],[-1057,19],[-145,560],[-288,-1582],[-558,-1]],[[206038,565789],[-93,497],[-752,103],[-964,-1631]],[[165151,563828],[-359,-3363],[-515,-331],[-140,-2995],[-194,-1515],[49,-2367],[561,-1042],[-26,-1385]],[[164527,550830],[-822,-17],[-769,1527],[-382,1476],[-339,201],[-528,3049]],[[161687,557066],[130,2031],[-145,1372]],[[161672,560469],[136,875],[-308,1331],[76,2649],[386,643],[303,1649],[-265,2452]],[[215296,561729],[-1431,3],[-1,-1673]],[[213864,560059],[-714,1225]],[[213150,561284],[-16,1451],[265,1805],[-308,1453],[-460,875]],[[232764,574597],[24,-6811]],[[232788,567786],[-2527,20]],[[230261,567806],[-1798,-6]],[[228463,567800],[13,368]],[[228476,568168],[71,2440],[-130,4069]],[[221924,571472],[-985,7],[-4,-6507],[100,-3249]],[[221035,561723],[-716,0]],[[220319,561723],[-359,7]],[[223962,564053],[0,0]],[[225197,574689],[73,-6488]],[[225270,568201],[-362,-8],[-2,-3234],[-287,1],[0,-1975]],[[224619,562985],[-263,25],[-571,2718],[-293,-1216],[-752,3113],[0,3842]],[[228476,568168],[-2123,27]],[[226353,568195],[-1083,6]],[[236062,561696],[6,-7465]],[[236068,554231],[0,-615],[-707,-31]],[[235361,553585],[-1430,49]],[[233931,553634],[-30,8560],[-224,1564],[126,1180],[-985,11]],[[232818,564949],[-30,2837]],[[233488,574623],[363,-5],[2,-3239],[2181,26]],[[188725,567028],[1,-2703]],[[188726,564325],[-1602,-42],[-179,1901],[-363,820],[-2337,28]],[[158090,569229],[27,-389]],[[158117,568840],[-233,-1009],[277,-1641],[-369,861],[-55,2155],[353,23]],[[157569,571941],[242,-1775],[-417,-309],[-219,-1057],[350,-341],[185,-3596],[45,1501],[415,-1154],[-3,-2382],[-641,2318],[-19,2344],[-435,1258],[298,3297],[199,-104]],[[156635,565779],[-61,-3686],[-1563,-8],[-1,265],[-3066,-4]],[[151944,562346],[-337,5363],[261,4074],[686,-1863],[395,-423],[749,-1863],[763,57],[868,-996],[776,702],[530,-1618]],[[224619,562985],[0,-1281]],[[224619,561704],[-2150,10]],[[222469,561714],[-1434,9]],[[193937,559704],[-803,-421],[-50,-3213],[-1029,-2364]],[[192055,553706],[-1186,-7]],[[190869,553699],[-361,553],[1,1468],[-266,4],[-518,1364],[205,1866],[-1205,-6]],[[188725,558948],[1,5377]],[[161672,560469],[-3555,-37]],[[158117,560432],[249,3191],[302,1598],[-409,1180],[-142,2439]],[[158090,569229],[58,869]],[[179823,560649],[58,-3498],[649,4],[-91,-2233],[239,252],[-155,-1950],[417,-649],[44,-4054]],[[180984,548521],[-292,-236],[-171,1187],[-552,1163],[-685,298]],[[179284,550933],[-477,836],[-38,1569],[-836,1676],[-964,-135]],[[176969,554879],[-353,1336],[183,799],[-97,1863],[-282,1074],[-625,4218]],[[245498,568091],[24,-13480]],[[245522,554611],[-1265,-6316],[-883,-3447]],[[243362,568345],[243,-1594],[423,-163],[-23,-1208],[886,751],[607,1960]],[[226353,568195],[59,-3242],[-1,-6490]],[[226411,558463],[-285,2]],[[226126,558465],[-1436,0]],[[224690,558465],[-71,3239]],[[228463,567800],[349,-5610],[345,-3679]],[[229157,558511],[-1604,-50]],[[227553,558461],[-1142,2]],[[230261,567806],[50,-3919]],[[230311,563887],[2,-2161],[360,-5],[3,-1615],[1434,5],[0,1629],[356,6],[-1,1625]],[[232465,563371],[355,-35]],[[232820,563336],[78,-8072]],[[232898,555264],[-1430,-21]],[[231468,555243],[-2183,14]],[[229285,555257],[-128,3254]],[[232818,564949],[2,-1613]],[[232465,563371],[-1,530],[-2153,-14]],[[209243,564495],[-2,-11146]],[[209241,553349],[-241,-807],[-804,9]],[[208196,552551],[-259,2],[1,3249],[-225,-6],[0,1620],[-1072,7],[1,1621],[-715,4],[0,1623]],[[205927,560671],[111,1441],[0,3677]],[[167625,563859],[-339,-5],[-302,-1380],[0,-1619],[-240,-1347],[-120,-2159],[-533,-1577],[-2,-1607],[-954,-85],[-359,-2172],[-6,-1862]],[[164770,550046],[-243,784]],[[213150,561284],[-1,-2790],[-1274,11],[2,-6437]],[[211877,552068],[-1582,13]],[[210295,552081],[-1054,15]],[[209241,552096],[0,1253]],[[156465,557234],[-1439,16],[0,-1664]],[[155026,555586],[-1512,9],[-856,299]],[[152658,555894],[-216,4014],[-498,2438]],[[156635,565779],[272,1293],[567,-4577],[-189,-394],[-250,-3034],[-106,2479],[-246,-3231],[-218,-1081]],[[188725,558948],[-718,-7],[0,-1612],[-713,3],[0,-1972],[-347,194]],[[186947,555554],[-644,-185],[-425,1863],[-410,507],[-656,-490],[-280,1680],[5,2406],[-202,2374]],[[205927,560671],[-357,-7],[-2,-4859],[-120,-3],[1,-6473]],[[205449,549329],[-1188,-10],[0,-1637],[-355,-3],[0,1642],[-353,-3]],[[203553,549318],[-233,0],[-1,3235],[-355,-6],[104,3250],[0,6318],[-271,1],[-169,1657]],[[176969,554879],[-257,-1008],[472,-1408],[61,-942],[526,-680],[549,-2997],[262,-2458],[252,-687]],[[178834,544699],[-3821,29]],[[175013,544728],[0,1637]],[[175013,546365],[0,7285]],[[175013,553650],[19,8873]],[[182526,557117],[-825,-27],[-59,-2279],[224,-1574],[136,-3906],[-311,-809],[-707,-1]],[[173027,564143],[7,-11380]],[[173034,552763],[0,-1987]],[[173034,550776],[-2182,21]],[[170852,550797],[8,10515]],[[233931,553634],[40,-4845]],[[233971,548789],[-1065,-20]],[[232906,548769],[-8,6495]],[[175013,553650],[-714,17],[-121,-799],[-1144,-105]],[[203553,549318],[1,-5970]],[[203554,543348],[0,-266]],[[203554,543082],[-1766,-14],[-2,268],[-3263,-151]],[[198523,543185],[-142,488],[173,2153],[-209,2561],[-11,4245],[143,1707]],[[167650,563515],[-17,-12698]],[[167633,550817],[-9,-6519],[-1076,22],[-2,-3262]],[[166546,541058],[-233,-1080]],[[166313,539978],[-188,856],[-294,-1494],[-691,-305]],[[165140,539035],[-275,2021]],[[164865,541056],[127,1140],[-311,5066],[89,2784]],[[170852,550797],[-379,1]],[[170473,550798],[-2840,19]],[[186947,555554],[7,-6012],[711,-1191],[-2,-4004],[368,-12]],[[188031,544335],[35,-1328],[411,-1480]],[[188477,541527],[-392,-450],[14,-3149],[-430,-3]],[[187669,537925],[-672,2],[-784,-2757]],[[186213,535170],[46,3441],[-325,1748],[-347,-22],[-1,2529],[-723,-49],[-4,6432],[-731,40],[-1,5728],[-238,2035]],[[157723,558952],[153,-2102],[-264,243],[111,1859]],[[157679,553459],[-209,2]],[[157470,553461],[-20,-1]],[[157450,553460],[-465,11]],[[156985,553471],[3,2162],[-620,2]],[[156368,555635],[296,1874],[455,872],[193,2437],[440,2119],[103,-3144],[-199,149],[-132,-3408],[312,-1093],[-157,-1982]],[[239858,546441],[-2005,75]],[[237853,546516],[-4,4597],[-696,1379],[-254,2407],[-570,-1212],[-261,544]],[[218881,561727],[0,-3233],[-241,6],[-5,-6449]],[[218635,552051],[-211,-1],[0,-3173],[-602,-11]],[[217822,548866],[-252,2539],[-561,-512]],[[217009,550893],[-256,567],[-258,3108],[38,1844],[-853,-555],[-222,-664],[-1091,1452]],[[214367,556645],[-155,784],[-3,3079],[-345,-449]],[[224690,558465],[0,-1585]],[[224690,556880],[-2133,9]],[[222557,556889],[-88,4825]],[[222557,556889],[-1,-4848]],[[222556,552041],[-598,-4]],[[221958,552037],[-1539,4]],[[220419,552041],[1,6448],[-101,3234]],[[220419,552041],[-222,0]],[[220197,552041],[-1562,10]],[[214367,556645],[0,-4588],[169,0],[0,-5915]],[[214536,546142],[-1061,-2],[0,-539],[-1412,-13]],[[212063,545588],[-1,6480],[-185,0]],[[197352,556810],[-7,-4998],[-769,-161],[-357,-670],[-49,-3205],[357,-5],[-62,-6487]],[[196465,541284],[-1055,22]],[[195410,541306],[-1057,8],[-1,-1068]],[[194352,540246],[-993,3]],[[193359,540249],[-235,2015],[207,1753],[-4,5387],[-1033,1609],[0,1620],[-239,1073]],[[208196,552551],[219,-2029],[101,-3785],[-297,-2572],[-534,-806]],[[207685,543359],[-1181,12],[-117,1073],[-356,1],[2,1079],[-357,1],[0,3802],[-227,2]],[[157999,553531],[-252,-1157],[151,3089],[101,-1932]],[[161687,557066],[-282,-524],[-596,-2845],[-98,-1165],[461,-3837],[-227,-1130]],[[160945,547565],[-1159,1606],[-393,-641],[-440,1039],[-133,1180],[-534,2],[-232,1165]],[[158054,551916],[259,527],[-269,4234],[225,530],[-270,1061],[118,2164]],[[190869,553699],[0,-1066],[-356,2],[-14,-4901],[354,-2],[-21,-5066]],[[190832,542666],[-725,2921],[-441,463],[-27,1539],[-216,-1426],[-1062,-215],[0,-1611],[-330,-2]],[[227553,558461],[-3,-6470],[62,-1591]],[[227612,550400],[-709,17]],[[226903,550417],[-711,10]],[[226192,550427],[-71,1593],[5,6445]],[[226192,550427],[-1412,-1]],[[224780,550426],[-88,1602]],[[224692,552028],[-2,4852]],[[229285,555257],[53,-4884]],[[229338,550373],[-1726,27]],[[156465,557234],[-97,-1599]],[[156985,553471],[-2,-836]],[[156983,552635],[-348,-1456],[-55,-1447],[-358,-1953]],[[156222,547779],[-353,-249]],[[155869,547530],[-800,-41],[-43,8097]],[[182993,557119],[1,-7838],[455,9],[-1,-6466]],[[183448,542824],[-493,-547],[0,-1076],[-524,-538],[2,-1074],[-447,50]],[[181986,539639],[-1407,-5]],[[180579,539634],[-732,-499]],[[179847,539135],[-221,1916]],[[179626,541051],[351,195],[-48,4029],[320,548],[-90,1380],[-636,2137],[-239,1593]],[[186213,535170],[-690,-2887]],[[185523,532283],[-1334,17]],[[184189,532300],[-5,8737],[-215,-420],[-521,2207]],[[198523,543185],[180,-1781]],[[198703,541404],[-2238,-120]],[[164865,541056],[-1495,17],[1,1610],[-349,24],[-1,1604],[-1091,-12],[-177,1484],[-533,1821],[-275,-39]],[[224692,552028],[-2136,13]],[[217009,550893],[-2,-451],[-1411,-2],[0,-4839]],[[215596,545601],[-928,-4]],[[214668,545597],[-132,545]],[[155869,547530],[121,-1651],[-6,-3777]],[[155984,542102],[-587,-23]],[[155397,542079],[-2025,38]],[[153372,542117],[-109,2053],[252,-203],[623,1196],[-914,1191],[-230,4847],[-241,1362],[-95,3331]],[[232906,548769],[-1437,4]],[[231469,548773],[-1,6470]],[[231469,548773],[-356,-11]],[[231113,548762],[-1799,-4]],[[229314,548758],[24,1615]],[[179626,541051],[-762,2278],[-30,1370]],[[237853,546516],[-1,-4237]],[[237852,542279],[-1579,50],[42,-9604],[-40,-224]],[[236275,532501],[-230,1008],[-307,-540],[-331,855]],[[235407,533824],[-217,373]],[[235190,534197],[-133,485],[-22,7620]],[[235035,542302],[354,-12],[-28,11295]],[[310206,521388],[-674,-757]],[[309532,520631],[-1071,-1126],[-11,14937],[-1066,257]],[[307384,534699],[-8,3291],[-2505,26]],[[304871,538016],[-841,2]],[[304030,538018],[72,2263],[2153,14229],[505,-617],[6,-3382],[393,-1252],[815,1288],[76,747],[564,5],[41,1253],[358,12],[783,-2953],[455,-2410],[25,-20921],[-70,-4892]],[[193359,540249],[-621,1062],[-849,-749]],[[191889,540562],[-515,-597],[-542,2701]],[[175013,546365],[-1409,188],[-569,1764]],[[173035,548317],[-1,2459]],[[235035,542302],[-1048,14]],[[233987,542316],[-16,6473]],[[160945,547565],[-213,-3054],[-186,-929],[190,-1670]],[[160736,541912],[-847,12],[-205,-1040],[-1032,653]],[[158652,541537],[-352,1508],[-447,420],[-411,2054],[-166,2243]],[[157276,547762],[314,1630],[141,2452],[323,72]],[[157679,553459],[-93,-2778],[-243,609],[127,2171]],[[157450,553460],[-258,-1217],[-95,-3180],[-196,1414],[82,2158]],[[209241,552096],[0,-12822]],[[209241,539274],[-860,0],[-178,809],[-527,0]],[[207676,540083],[9,3276]],[[212063,545588],[-553,-13],[-2,-6517]],[[211508,539058],[-1052,-1]],[[210456,539057],[-1,6518],[-160,-2],[0,6508]],[[210456,539057],[-534,-4],[0,-1653],[-681,3]],[[209241,537403],[0,1871]],[[221958,552037],[-1,-6447],[97,4],[-9,-6501]],[[222045,539093],[-1299,22]],[[220746,539115],[-461,8]],[[220285,539123],[17,6481],[-110,4],[5,6433]],[[224780,550426],[0,-4857],[79,2],[1,-6489]],[[224860,539082],[-1666,-10]],[[223194,539072],[-1149,21]],[[220285,539123],[-1617,19]],[[218668,539142],[-334,973],[-96,2185],[-334,3330]],[[217904,545630],[152,619],[-234,2617]],[[217904,545630],[-2308,-29]],[[170473,550798],[4,-6433],[-150,-2316],[-550,-960]],[[169777,541089],[-3231,-31]],[[173035,548317],[0,-10900]],[[173035,537417],[-1,-2156]],[[173034,535261],[-434,-110],[-90,788]],[[172510,535939],[-70,1545],[-616,2886],[-768,-191],[-281,-1215]],[[170775,538964],[-895,-1263],[-119,595]],[[169761,538296],[16,2793]],[[226903,550417],[68,-4869],[-1,-6486]],[[226970,539062],[-981,13]],[[225989,539075],[-1129,7]],[[229314,548758],[6,-2653],[212,-1370],[-110,-2549],[11,-3116]],[[229433,539070],[-1343,-23]],[[228090,539047],[-1120,15]],[[158652,541537],[-2669,25],[1,540]],[[156222,547779],[372,1367],[-166,-1817],[271,11],[248,1910],[329,-1488]],[[207676,540083],[-351,-1345]],[[207325,538738],[-350,-3],[-351,-1338],[-710,7],[-585,557],[-127,1620],[-225,-2],[-117,3244],[-599,530],[-707,-5]],[[233987,542316],[-2,-1623]],[[233985,540693],[-2816,3]],[[231169,540696],[-56,8066]],[[231169,540696],[6,-1622],[-302,3]],[[230873,539077],[-1399,-8]],[[229474,539069],[-41,1]],[[175013,544728],[0,-5709],[-352,23]],[[174661,539042],[-461,-3],[-274,-1605],[-891,-17]],[[165140,539035],[21,-10945]],[[165161,528090],[-2024,0],[-2594,63]],[[160543,528153],[2,6416]],[[160545,534569],[358,11],[-157,2684],[251,3313],[-261,1335]],[[191889,540562],[-24,-9124]],[[191865,531438],[0,-676]],[[191865,530762],[-1399,152]],[[190466,530914],[-776,9]],[[189690,530923],[-179,1516],[195,2305],[-474,570],[-329,2182],[-426,4031]],[[239843,541603],[18,-6465]],[[239861,535138],[3,-4862]],[[239864,530276],[-1053,-77]],[[238811,530199],[4,1716],[-1019,-55]],[[237796,531860],[-43,6341],[94,109],[5,3969]],[[251183,535146],[2,-1610]],[[251185,533536],[-1045,-6],[0,3216],[-1045,-7],[1,1617],[-346,11],[-67,3223]],[[248683,541590],[281,994],[1035,453],[493,1189],[335,1615],[517,690]],[[251344,546531],[2,-4942],[190,-1609],[-348,14],[-5,-4848]],[[214668,545597],[2,-4902]],[[214670,540695],[0,-1615]],[[214670,539080],[-2316,-18]],[[212354,539062],[-846,-4]],[[218668,539142],[261,-751],[-62,-3094]],[[218867,535297],[-369,-882],[-548,257],[-360,-2040]],[[217590,532632],[0,1615],[-699,1],[0,4816],[-1165,16],[-2,1619],[-1054,-4]],[[253820,544308],[0,-2727],[148,-1606],[-346,-14],[-2,-4817]],[[253620,535144],[-1569,10]],[[252051,535154],[2,8036],[354,0],[-2,1614],[282,9]],[[252687,544813],[-46,-3488],[634,3347],[545,-364]],[[179847,539135],[-2885,-2989],[-517,-3856],[-988,1959]],[[175457,534249],[-555,1774]],[[174902,536023],[-221,561],[-20,2458]],[[207325,538738],[0,-2428],[-482,-1],[56,-6431]],[[206899,529878],[-149,-3],[0,-6509],[-119,1]],[[206631,523367],[-3371,30]],[[203260,523397],[1,6486],[107,4],[-6,6446],[97,2],[-1,6474],[96,273]],[[203260,523397],[-118,-6],[-3,-8127],[-123,-27],[0,-3172]],[[203016,512065],[-1361,-4],[-1,3223],[108,-21],[0,5981],[-511,207],[99,2748],[-172,715]],[[201178,524914],[0,4963],[-190,-48],[-58,4865],[-349,2],[-59,1616],[-1571,-11]],[[198951,536301],[-119,265]],[[198832,536566],[-129,4838]],[[184189,532300],[0,-815],[-687,-6],[16,-3297],[-667,-1968]],[[182851,526214],[-255,180],[-219,1599],[-324,48],[141,1391],[-197,1673],[207,1276],[-352,4420],[134,2838]],[[235190,534197],[-1182,4]],[[234008,534201],[-23,6492]],[[237796,531860],[-40,-1612]],[[237756,530248],[-1573,9],[92,2244]],[[155397,542079],[36,-7597]],[[155433,534482],[-1025,26],[-5,-1764]],[[154403,532744],[-414,-941],[-400,1402],[-173,-854],[164,5827],[40,-3886],[155,66],[162,3197],[-179,1201],[336,1944],[-445,-236],[-277,1653]],[[160545,534569],[-1999,-62]],[[158546,534507],[-2722,-5]],[[155824,534502],[-391,-20]],[[189690,530923],[-791,-90],[-193,-3456],[-681,-3144]],[[188025,524233],[-1,4020],[-345,10],[-10,9662]],[[241985,539679],[-1,-4579]],[[241984,535100],[-2123,38]],[[251185,533536],[-1,-4393]],[[251184,529143],[-281,767],[-2333,3002],[1,-218]],[[248571,532694],[-534,910],[-308,3219],[-519,1035]],[[247210,537858],[1092,2058],[381,1674]],[[198832,536566],[-2,-1875],[-408,1],[-282,-2448],[-811,5],[-234,-521],[0,-1926],[-1045,-3]],[[196050,529799],[2,2685],[-229,1641],[-122,3955],[-232,24],[-59,3202]],[[261640,541399],[0,-9498]],[[261640,531901],[-1747,-14]],[[259893,531887],[0,4842]],[[259893,536729],[1,3447]],[[259894,540176],[1066,-173],[680,1396]],[[196050,529799],[-402,-5]],[[195648,529794],[-1369,1],[-5,-1634]],[[194274,528161],[-523,16],[-137,3240]],[[193614,531417],[700,2],[38,8827]],[[193614,531417],[-1749,21]],[[169761,538296],[-37,88]],[[169724,538384],[-624,62],[-453,-1720],[-56,-1736],[-390,-2246],[-741,-1822]],[[167460,530922],[-633,1584],[-9,4567],[-505,2905]],[[167460,530922],[206,-1169],[-54,-2423]],[[167612,527330],[-389,-1248],[-851,-271]],[[166372,525811],[-389,134],[-274,-1277],[-552,-389]],[[165157,524279],[4,3811]],[[234008,534201],[28,-4881]],[[234036,529320],[-1740,13]],[[232296,529333],[-1379,22]],[[230917,529355],[-44,9722]],[[217590,532632],[-397,-2553],[-436,-1342],[-920,-1191],[-478,1151],[-416,-370]],[[214943,528327],[2,2829]],[[214945,531156],[-136,1457],[-12,6465],[-127,2]],[[172510,535939],[1,-949],[-532,-522],[0,-4866],[-168,2],[-1,-2312]],[[171810,527292],[-342,20]],[[171468,527312],[-25,6322],[-176,-17],[-173,2491],[-351,-8],[32,2864]],[[209241,537403],[-2,-4854]],[[209239,532549],[2,-6235]],[[209241,526314],[2,-1180]],[[209243,525134],[-251,2],[0,1618],[-714,26],[2,1575],[-351,-6],[1,1522],[-1031,7]],[[180579,539634],[-28,-2628],[-263,-4539],[-67,-3326],[-131,-1223],[266,-995],[5,-2349],[-248,-34],[-188,-1419],[189,-1950],[-181,-2073]],[[179933,519098],[-282,-1615],[-344,765],[-14,-1409],[527,-2617],[-251,-1839]],[[179569,512383],[-3571,-26],[-469,-1641]],[[175529,510716],[-390,424],[-163,2563],[-956,-4]],[[174020,513699],[363,4439],[257,2020],[-236,2561],[-686,1931]],[[173718,524650],[258,2609]],[[173976,527259],[447,45],[75,2435],[241,1362],[664,-891],[157,1127],[336,203],[-439,2709]],[[182851,526214],[3,-24]],[[182854,526190],[-34,-1070],[-471,-700],[-670,-2752]],[[181679,521668],[-945,-3980],[-193,-399],[-349,1947],[-259,-138]],[[220746,539115],[-2,-6512],[106,-6]],[[220850,532597],[-5,-6355]],[[220845,526242],[-1760,43]],[[219085,526285],[-327,3734],[197,1955],[-88,3323]],[[223194,539072],[-1,-6466]],[[223193,532606],[-2343,-9]],[[174902,536023],[1,-2307],[-958,-325],[31,-6132]],[[173718,524650],[-339,2599]],[[173379,527249],[-121,1925],[103,1310],[-372,3279],[45,1498]],[[212354,539062],[9,-6488]],[[212363,532574],[-197,-15]],[[212166,532559],[-2927,-10]],[[225989,539075],[-2,-6478]],[[225987,532597],[-2698,1]],[[223289,532598],[-96,8]],[[214945,531156],[-1392,13],[0,1436],[-1190,-31]],[[230917,529355],[-1,-1621]],[[230916,527734],[-866,4]],[[230050,527738],[45,1765],[-114,3994],[-380,2927],[-127,2645]],[[228090,539047],[-2,-6458]],[[228088,532589],[-2023,4]],[[226065,532593],[-78,4]],[[230050,527738],[35,-1611]],[[230085,526127],[-1851,-1]],[[228234,526126],[-88,1154],[-58,5309]],[[171468,527312],[-1044,34]],[[170424,527346],[-54,1]],[[170370,527347],[16,3854],[-349,1],[1,1631],[-349,-7],[35,5558]],[[170370,527347],[-2758,-17]],[[248571,532694],[0,-5697],[-321,-1]],[[248250,526996],[-719,-11]],[[247531,526985],[-4,3230],[-342,-15],[1,1609],[-352,7],[6,6373]],[[246840,538189],[370,-331]],[[304871,538016],[-24,-11134],[233,-2084],[-240,-2015],[-258,-235],[344,-2134],[-221,-1594],[445,-9901],[739,1165]],[[305889,510084],[248,-6545]],[[306137,503539],[-330,592],[-241,-1132]],[[305566,502999],[-450,139],[79,-2295],[-907,627]],[[304288,501470],[-183,1242],[-102,3479],[-276,-237],[62,1778],[-139,3375],[-376,-344],[-347,651],[-372,9720]],[[302555,521134],[466,1248],[-87,1100],[431,1782],[-152,2424],[219,2372],[-153,837],[286,2948],[372,1242],[93,2931]],[[307384,534699],[-16,-13241],[-374,-415],[-14,-2791],[297,275],[227,-5337],[-292,-285],[68,-1531],[-1391,-1290]],[[188025,524233],[-403,-668]],[[187622,523565],[-350,1102],[-489,-286],[-234,-1731]],[[186549,522650],[-588,1548],[-293,6521],[-197,-56]],[[185471,530663],[52,1620]],[[259893,531887],[-1,-5145]],[[259892,526742],[-133,-900],[-413,823],[-697,-828],[-157,-2486],[-258,-540]],[[258234,522811],[-83,2591],[0,4874],[-349,11]],[[257802,530287],[0,3250],[698,-25],[0,3238],[1393,-21]],[[198951,536301],[351,-3236],[408,-2428],[-126,-2499]],[[199584,528138],[-455,7],[0,-1079],[-344,0],[-232,-1614],[-462,6],[-62,-7075],[-689,-1094],[-914,67]],[[196426,517356],[-551,2735]],[[195875,520091],[-174,1329],[10,5161],[-63,3213]],[[201178,524914],[-660,1614],[-693,2],[0,1610],[-241,-2]],[[173379,527249],[-1569,43]],[[219085,526285],[-4142,17]],[[214943,526302],[0,2025]],[[253620,535144],[-3,-3220]],[[253617,531924],[2,-6051]],[[253619,525873],[-836,1000],[-325,853],[-417,-133]],[[252041,527593],[-695,1110]],[[251346,528703],[-162,440]],[[251183,535146],[868,8]],[[241984,535100],[-2,-4839]],[[241982,530261],[-158,-2624],[-996,-2261],[-371,-3070]],[[240457,522306],[-838,12]],[[239619,522318],[-4,4660],[246,5],[3,3293]],[[309532,520631],[304,-6938],[-325,-225]],[[309511,513468],[-690,-627],[93,-2259],[-353,-313],[61,-1593],[-355,-304],[157,-4050],[-1023,-1482]],[[307401,502840],[-7,-12]],[[307394,502828],[-61,339],[-964,-1078],[-232,1450]],[[160543,528153],[-247,-4],[11,-4865],[240,-1077]],[[160547,522207],[-794,-346],[-319,-1061]],[[159434,520800],[-911,-1888]],[[158523,518912],[10,9425]],[[158533,528337],[13,6170]],[[158533,528337],[-318,-1796],[-455,496],[-600,-1309],[-131,-1178]],[[157029,524550],[-330,4340],[-600,1895],[-259,-236]],[[155840,530549],[-3,55]],[[155837,530604],[-13,3898]],[[155837,530604],[-182,-462],[-495,2189],[-757,413]],[[235407,533824],[27,-10700]],[[235434,523124],[-1382,-10]],[[234052,523114],[-16,6206]],[[237756,530248],[0,-3231],[116,-10],[14,-2987]],[[237886,524020],[-1641,-1],[225,-871]],[[236470,523148],[-1036,-24]],[[251026,525384],[-2774,33]],[[248252,525417],[-2,1579]],[[251346,528703],[-2,-1704],[-318,1],[0,-1616]],[[155418,529962],[8,-6731]],[[155426,523231],[-1689,62]],[[153737,523293],[-68,3038],[184,1181],[-261,4092],[308,-881],[393,424],[492,-351],[260,901],[373,-1735]],[[214943,526302],[-5,-2]],[[214938,526300],[-2623,9]],[[212315,526309],[-151,2]],[[212164,526311],[2,6248]],[[228234,526126],[-2092,12]],[[226142,526138],[-81,1]],[[226061,526139],[4,6454]],[[223289,532598],[-7,-6387]],[[223282,526211],[-1985,21]],[[221297,526232],[-452,10]],[[226061,526139],[-1995,51]],[[224066,526190],[-784,21]],[[212164,526311],[-2923,3]],[[185471,530663],[-559,-802],[0,-1628],[-448,-1027],[40,-1092],[-451,-1375]],[[184053,524739],[-388,162],[-477,-1896],[-334,3185]],[[255011,527072],[0,-1623],[-222,0],[-1,-3275],[-416,-8]],[[254372,522166],[-588,1082]],[[253784,523248],[-214,794],[49,1831]],[[253617,531924],[1399,-8],[-5,-4844]],[[238811,530199],[-2,-3213],[-238,7],[11,-4605]],[[238582,522388],[9,-3269]],[[238591,519119],[-694,16]],[[237897,519135],[-11,4885]],[[194274,528161],[-17,-1569],[-232,-20],[-118,-1642],[-36,-4874],[-1029,-1612],[-3,-3239],[-365,3],[-2,-3289]],[[192472,511919],[-459,14],[21,11395],[-199,2],[30,7432]],[[190466,530914],[-30,-11209],[-346,-1209],[4,-3243],[-336,0],[-17,-6512]],[[189741,508741],[-31,-6239]],[[189710,502502],[17,-3577]],[[189727,498925],[-492,1903],[19,851],[-442,2414]],[[188812,504093],[12,11150],[65,-2],[-3,5425],[-517,3],[-342,1882],[-405,1014]],[[192472,511919],[741,-88]],[[193213,511831],[-2,-3076]],[[193211,508755],[-2525,-183],[-945,169]],[[186549,522650],[-757,-106],[-627,-2188]],[[185165,520356],[-202,2286],[-910,2097]],[[157029,524550],[64,-2278]],[[157093,522272],[-464,-110]],[[156629,522162],[-285,1060],[-918,9]],[[155418,529962],[422,587]],[[239619,522318],[-1037,70]],[[242662,530268],[50,-9639]],[[242712,520629],[-343,-3]],[[242369,520626],[1,1598],[-1043,58],[-2,-1613],[-996,39]],[[240329,520708],[128,1598]],[[241982,530261],[680,7]],[[245796,530213],[-1,-3233],[691,9]],[[246486,526989],[-5,-6392]],[[246481,520597],[-2400,-12]],[[244081,520585],[-31,9671]],[[244050,530256],[1746,-43]],[[244081,520585],[-1369,44]],[[242662,530268],[1388,-12]],[[209243,525134],[13,-12456]],[[209256,512678],[-50,-4012]],[[209206,508666],[-2733,56]],[[206473,508722],[2,6547],[142,-1],[14,8099]],[[195875,520091],[-795,-463],[-177,-2269],[-459,3],[-573,-1890],[-130,-1893],[-228,1],[-2,-1752],[-298,3]],[[232296,529333],[33,-6469]],[[232329,522864],[-1381,-3]],[[230948,522861],[-32,4873]],[[234052,523114],[0,-270]],[[234052,522844],[-1723,20]],[[252041,527593],[20,-5421],[699,-8]],[[252760,522164],[-8,-6431]],[[252752,515733],[-697,33]],[[252055,515766],[-690,-1],[7,1610],[-343,-7]],[[251029,517368],[-3,8016]],[[158523,518912],[-1067,1089],[-329,767],[-34,1504]],[[165157,524279],[-366,-438]],[[164791,523841],[-599,-1642],[-746,-545],[-477,786]],[[162969,522440],[-731,-1784]],[[162238,520656],[-782,-457],[-46,928],[-635,568]],[[160775,521695],[-228,512]],[[203016,512065],[45,-3465]],[[203061,508600],[-4592,140]],[[198469,508740],[-941,-34]],[[197528,508706],[338,4066],[-1593,0],[48,4005],[105,579]],[[230948,522861],[3,-3246]],[[230951,519615],[-1624,13]],[[229327,519628],[-6,1157],[513,1813],[251,3529]],[[253784,523248],[-5,-1258],[-1019,174]],[[170424,527346],[13,-2609]],[[170437,524737],[-402,-3204],[0,-4053],[-225,-813],[-643,34],[2,-1373],[-752,-187],[118,-2761],[304,1],[77,-3741]],[[168916,508640],[-1798,-1]],[[167118,508639],[50,1621],[3,8063],[-287,1],[0,1597],[-520,15],[8,5875]],[[174020,513699],[-270,-3512]],[[173750,510187],[-1345,33]],[[172405,510220],[-1,1583],[-585,-10],[-295,3221],[-170,-22],[-112,3314],[-288,3247],[112,3192],[-629,-8]],[[255706,527059],[117,-1614],[-5,-6481],[175,-7]],[[255993,518957],[-480,-4770],[-502,-3587]],[[255011,510600],[-348,1797],[263,2653],[-666,243],[263,2751],[-117,1109],[148,2102],[-182,911]],[[255011,527072],[695,-13]],[[248252,525417],[-2,-6367]],[[248250,519050],[5,-3226]],[[248255,515824],[-1774,-76]],[[246481,515748],[0,4849]],[[246486,526989],[1045,-4]],[[214938,526300],[2,-8790]],[[214940,517510],[-1,-8088]],[[214939,509422],[-2668,29]],[[212271,509451],[0,3226]],[[212271,512677],[44,13632]],[[219085,526285],[419,-1613],[147,-2780],[-338,-2103]],[[219313,519789],[-136,-1298],[382,-972]],[[219559,517519],[-3144,-9]],[[216415,517510],[-1475,0]],[[212271,512677],[-3015,1]],[[221297,526232],[2,-6469]],[[221299,519763],[-1986,26]],[[185165,520356],[-3,-2745],[506,-651],[135,-1729],[3,-4866],[343,-1],[-2,-1637],[399,-13],[67,-3225],[282,-799],[791,-49],[1,-1346],[860,8]],[[188547,503303],[-98,-3225],[-306,273]],[[188143,500351],[-567,-771],[-129,1023],[-637,-764],[-534,835],[-279,-2222],[-237,583],[-858,91],[-97,-2023]],[[184805,497103],[-525,1387],[-10,1397],[-347,4611],[-317,913],[-262,-704],[-322,1502],[12,3599],[-287,1010],[-383,2792],[-233,2701],[-86,3614],[-272,361],[-94,1382]],[[224066,526190],[-2,-6467]],[[224064,519723],[-2738,40]],[[221326,519763],[-27,0]],[[226142,526138],[-2,-6467]],[[226140,519671],[-5,-6480]],[[226135,513191],[-2051,62]],[[224084,513253],[-13,1]],[[224071,513254],[-7,6469]],[[229327,519628],[390,-3087],[628,-1746]],[[230345,514795],[-1456,5],[-40,-559],[-610,15]],[[228239,514256],[-2,4850]],[[228237,519106],[-3,7020]],[[228237,519106],[-408,549],[-1689,16]],[[167118,508639],[-1414,-27]],[[165704,508612],[-332,4],[2,1360]],[[165374,509976],[84,1859],[-343,39],[3,1607],[-347,27],[20,10333]],[[251029,517368],[-1054,46]],[[249975,517414],[-11,1641],[-1714,-5]],[[172405,510220],[-826,-23],[-2,-1617],[-596,-11],[-301,1241],[-304,-1199],[-379,943],[-317,-1615]],[[169680,507939],[-764,701]],[[188812,504093],[-265,-790]],[[237897,519135],[-1085,-11]],[[236812,519124],[-342,4024]],[[165374,509976],[-1965,16]],[[163409,509992],[-22,268]],[[163387,510260],[-112,2405],[145,4765],[366,768],[-140,1600],[-677,2642]],[[206473,508722],[-141,2]],[[206332,508724],[-2606,-128]],[[203726,508596],[-665,4]],[[264518,520374],[-131,-4],[15,-7955]],[[264402,512415],[-335,1]],[[264067,512416],[-1024,58]],[[263043,512474],[5,1629]],[[263048,514103],[0,9277]],[[263048,523380],[752,-2509],[718,-497]],[[155426,523231],[0,-1322],[-345,8],[171,-1358],[345,-538],[-450,-2153],[-11,-1076]],[[155136,516792],[5,-4050],[-895,-4],[-2,-2602],[170,-4]],[[154414,510132],[-4,-597]],[[154410,509535],[-766,17]],[[153644,509552],[190,6726],[-97,7015]],[[156629,522162],[0,-1646],[515,-2132],[2,-1597]],[[157146,516787],[-2,-1894],[-345,-270]],[[156799,514623],[-745,2159],[-918,10]],[[236812,519124],[284,-2537]],[[237096,516587],[-222,-1933],[-373,-651]],[[236501,514003],[-342,795],[-1058,-11]],[[235101,514787],[1,1613],[-1027,-8]],[[234075,516392],[-23,6452]],[[232329,522864],[30,-6472]],[[232359,516392],[-1029,-8]],[[231330,516384],[-347,13],[-32,3218]],[[234075,516392],[-344,3]],[[233731,516395],[-1372,-3]],[[163387,510260],[-630,17],[17,875],[-376,1201],[-462,445],[26,1607],[414,1539],[111,2268],[-249,2444]],[[239619,522318],[0,-3213],[334,-17],[7,-2705]],[[239960,516383],[-1367,55]],[[238593,516438],[-2,2681]],[[240329,520708],[7,-1269],[308,-146],[354,-2358],[-275,-2708]],[[240723,514227],[-762,14]],[[239961,514241],[-1,2142]],[[242369,520626],[-5,-8010]],[[242364,512616],[-1676,1]],[[240688,512617],[35,1610]],[[159434,520800],[0,-1906],[283,-1586]],[[159717,517308],[-2286,-7],[-285,-514]],[[160775,521695],[1,-3312],[-117,6],[3,-4865],[-601,-6]],[[160061,513518],[4,2151],[-348,1639]],[[163409,509992],[121,-3800],[223,-798]],[[163753,505394],[-3865,76]],[[159888,505470],[68,1165]],[[159956,506635],[-194,2310],[404,1009],[-239,2615],[134,949]],[[184805,497103],[4,-2716],[-506,66]],[[184303,494453],[-906,-18]],[[183397,494435],[-56,1597],[-348,2544],[-106,-614],[-845,1225],[-633,3399],[-141,1577],[-365,-188],[51,2181],[-180,-233],[-402,-2430],[54,-904],[-490,-1772],[-717,3192],[21,1139]],[[179240,505148],[217,1309],[9,5101],[103,825]],[[309697,499439],[-326,8145],[343,308],[-203,5576]],[[310206,521388],[551,-1388],[510,-516],[-213,-1646],[200,-1812],[-163,-2048],[408,-2915],[145,1140],[349,-533],[352,-3817],[161,-2744],[-592,-2997],[-880,-140],[-164,-1985],[-252,636],[-149,-1354],[-202,2089],[-181,-786],[-141,-3116],[-248,1983]],[[304288,501470],[-305,-405],[-9,-1933],[-241,38]],[[303733,499170],[-304,-527]],[[303429,498643],[-117,2061],[-640,1069],[-291,3137],[-430,-1181],[-152,5251],[122,81],[-151,4818]],[[301770,513879],[26,2283],[518,-340],[-235,2392],[476,2920]],[[266792,512570],[-1372,-94]],[[265420,512476],[-1018,-61]],[[264518,520374],[261,-2226],[563,-388],[377,-1460],[555,-1119],[218,172],[319,-1624],[-19,-1159]],[[244081,520585],[-3,-6434]],[[244078,514151],[-2,-1590],[-344,25]],[[243732,512586],[-1368,30]],[[246481,515748],[-686,32],[0,-1630]],[[245795,514150],[-1717,1]],[[197528,508706],[-1036,14]],[[196492,508720],[-3281,35]],[[221326,519763],[-4,-6470]],[[221322,513293],[-1536,17]],[[219786,513310],[-157,1349],[118,1153],[-188,1707]],[[224071,513254],[-2371,30]],[[221700,513284],[-378,9]],[[228239,514256],[0,-2714]],[[228239,511542],[-746,-4]],[[227493,511538],[-1359,32]],[[226134,511570],[1,1621]],[[231330,516384],[37,-4380]],[[231367,512004],[-502,1311],[-471,407]],[[230394,513722],[-49,1073]],[[238593,516438],[-6,-3148]],[[238587,513290],[-26,17]],[[238561,513307],[-163,843],[-522,100],[-780,2337]],[[249975,517414],[-3,-6480]],[[249972,510934],[-1722,19]],[[248250,510953],[5,4871]],[[219786,513310],[-178,-2703],[123,-1548],[-311,141],[-36,-2390]],[[219384,506810],[-387,-2542],[-371,1156],[-114,-973]],[[218512,504451],[-583,56],[-208,-833],[-377,333]],[[217344,504007],[2,4598],[-1015,-5],[84,8910]],[[217344,504007],[-269,-1031],[-620,-1015],[-211,-1236],[-503,175],[-264,-1034],[-539,-244]],[[214938,499622],[1,9800]],[[252055,515766],[-5,-3234],[108,-1633]],[[252158,510899],[-950,14],[2,-1662]],[[251210,509251],[-676,9]],[[250534,509260],[0,1663],[-562,11]],[[159956,506635],[-1844,-55],[-388,967],[-169,1540],[-533,2059],[129,2389],[-301,15]],[[156850,513550],[-51,1073]],[[156850,513550],[-529,-702],[118,-1992],[-202,-742]],[[156237,510114],[-1823,18]],[[238561,513307],[-382,-977],[-278,-2081],[-23,-1944]],[[237878,508305],[-684,14]],[[237194,508319],[-680,14]],[[236514,508333],[-13,5670]],[[239961,514241],[-4,-3219]],[[239957,511022],[-577,12],[2,-1654]],[[239382,509380],[-216,1966],[-579,1944]],[[235101,514787],[15,-8082]],[[235116,506705],[-1366,-13]],[[233750,506692],[5,4860]],[[233755,511552],[-24,4843]],[[233755,511552],[-2201,-4]],[[231554,511548],[-187,456]],[[248250,510953],[-429,7],[1,-1618],[-327,3]],[[247495,509345],[-1695,-50]],[[245800,509295],[-5,4855]],[[252752,515733],[340,-44],[-9,-3220],[342,-70],[182,-3244],[999,-1069]],[[254606,508086],[-385,-2584],[-242,-2788]],[[253979,502714],[-8,-2]],[[253971,502712],[-10,-1]],[[253961,502711],[-693,40]],[[253268,502751],[-16,3219],[-671,53]],[[252581,506023],[16,4858],[-439,18]],[[303429,498643],[-266,-4622],[-406,-3327]],[[302757,490694],[-370,577],[-32,2011],[-647,-2106],[393,-1790],[-189,-2753]],[[301912,486633],[-573,-442]],[[301339,486191],[-59,9209]],[[301280,495400],[-86,9640],[-121,9366]],[[301073,514406],[217,752],[480,-1279]],[[230394,513722],[3,-5427]],[[230397,508295],[-1200,-11]],[[229197,508284],[-4,3228],[-954,30]],[[236514,508333],[-685,5],[-1,-1628]],[[235828,506710],[-712,-5]],[[301280,495400],[-90,-874],[-585,120],[-254,-2830],[-201,2230]],[[300150,494046],[-446,795],[-524,2812]],[[299180,497653],[520,1849],[112,1481],[-264,3053],[383,3038],[-19,1892]],[[299912,508966],[388,4730],[214,623],[386,-1122],[173,1209]],[[240688,512617],[-96,-2433],[64,-4038]],[[240656,506146],[-96,-2136]],[[240560,504010],[-561,445],[-37,2206]],[[239962,506661],[96,22],[-1,4337],[-100,2]],[[245800,509295],[3,-3237]],[[245803,506058],[-2029,-24]],[[243774,506034],[-42,6552]],[[159888,505470],[-166,-669],[69,-1969]],[[159791,502832],[-1153,206],[-233,1075],[-632,10],[-781,719],[-578,-1960],[-382,1173]],[[156032,504055],[-99,1558],[389,2206],[-85,2295]],[[175529,510716],[154,-825],[-339,-5246],[150,-1455],[0,-3804]],[[175494,499386],[-398,-1021]],[[175096,498365],[-633,867],[-4,2312],[-267,893],[-1,3275],[-764,34]],[[173427,505746],[187,1739],[-43,1634],[179,1068]],[[231554,511548],[662,-3748],[173,-272]],[[232389,507528],[-309,-829],[-4,-1607],[-1678,18]],[[230398,505110],[-1,3185]],[[307819,495119],[63,-2040],[-255,1148],[192,892]],[[308823,498239],[322,-1211],[-422,-2790],[-256,1683],[356,2318]],[[309697,499439],[-194,-3152],[-121,2655],[-613,1158],[154,-1190],[-465,-1335],[31,1761],[-402,-1705],[118,-3275],[-828,3345],[180,1912],[-237,2131],[81,1096]],[[221700,513284],[0,-6479]],[[221700,506805],[-278,1]],[[221422,506806],[-2038,4]],[[224084,513253],[3,-6455]],[[224087,506798],[-1658,3]],[[222429,506801],[-729,4]],[[239382,509380],[135,-2743]],[[239517,506637],[-427,-1841]],[[239090,504796],[-535,226]],[[238555,505022],[9,1659],[-688,3],[2,1621]],[[226134,511570],[12,-9714]],[[226146,501856],[-2029,51]],[[224117,501907],[-30,4891]],[[179240,505148],[-396,-1629],[-366,938],[-230,-2311],[-308,-656],[141,-3507],[-184,-1567]],[[177897,496416],[-298,-1464],[-331,-476],[-1622,25],[-30,-1653],[-276,66]],[[175340,492914],[0,3220],[164,2],[-10,3250]],[[212271,509451],[-19,-8102],[-1680,-4]],[[210572,501345],[-701,13],[-660,-630]],[[209211,500728],[-5,7938]],[[242364,512616],[56,-6547]],[[242420,506069],[-1764,77]],[[243774,506034],[0,-3209]],[[243774,502825],[-1350,15]],[[242424,502840],[-4,3229]],[[262700,510887],[28,-4814]],[[262728,506073],[-1239,26],[-114,-877]],[[261375,505222],[-304,884]],[[261071,506106],[219,4693],[-69,1784]],[[261221,512583],[458,-40],[0,-1634],[1021,-22]],[[264067,512416],[-14,-6399]],[[264053,506017],[-1325,56]],[[262700,510887],[342,-32],[1,1619]],[[265420,512476],[-20,-6430]],[[265400,506046],[-1347,-29]],[[227493,511538],[8,-6472]],[[227501,505066],[-3,-4842]],[[227498,500224],[-1006,10]],[[226492,500234],[-8,1613],[-338,9]],[[229197,508284],[-6,-3209]],[[229191,505075],[-1690,-9]],[[233750,506692],[-653,-11],[0,-2565]],[[233097,504116],[-708,3412]],[[239962,506661],[-445,-24]],[[250534,509260],[0,-6477]],[[250534,502783],[-1730,67]],[[248804,502850],[-1313,5]],[[247491,502855],[4,6490]],[[252581,506023],[-688,19],[2,1616],[-685,-6],[0,1599]],[[173427,505746],[-386,-1718],[-295,-3771],[-220,-1145],[9,-3403]],[[172535,495709],[-741,0],[0,1608],[-293,1056],[-1060,-21],[-726,-3487]],[[169715,494865],[-738,-17],[245,2193],[-29,1555],[314,2473],[-553,1433],[613,1574],[-28,2092],[141,1771]],[[156032,504055],[-16,-547]],[[156016,503508],[-1263,17]],[[154753,503525],[-341,333],[-2,5677]],[[165704,508612],[55,-3188],[-11,-9611]],[[165748,495813],[-675,-6],[-2,1544],[-342,912],[-1014,-18],[0,2353]],[[163715,500598],[38,4796]],[[154753,503525],[15,-5367],[-344,3],[15,-1349],[-284,-294],[116,-1140]],[[154271,495378],[-947,-137]],[[153324,495241],[89,2631],[44,7615],[170,1570],[17,2495]],[[214938,499622],[-2,-11]],[[214936,499611],[-312,-1407],[-473,240],[-223,-2776],[-71,-2959],[-2965,11]],[[210892,492720],[-2,2155],[-337,-10],[19,6480]],[[247491,502855],[1,-4850]],[[247492,498005],[-1354,-31],[0,1610],[-337,6],[2,1611]],[[245803,501201],[0,4857]],[[253268,502751],[-8,-1765]],[[253260,500986],[-1004,106]],[[252256,501092],[3,1635],[-1725,56]],[[296979,508865],[60,-3256],[-127,-960]],[[296912,504649],[-471,87],[-134,-1751],[-359,-1100]],[[295948,501885],[-849,1672]],[[295099,503557],[103,5409]],[[295202,508966],[1777,-101]],[[299180,497653],[-205,-1076]],[[298975,496577],[-266,1735],[213,1023],[-144,949],[183,1194],[-188,667],[204,1295],[-286,977]],[[298691,504417],[181,1999],[-64,2448]],[[298808,508864],[1104,102]],[[295099,503557],[-145,-2596],[-226,-367]],[[294728,500594],[-75,974],[149,3512],[-119,603],[97,3232]],[[294780,508915],[422,51]],[[294728,500594],[65,-315]],[[294793,500279],[-930,-2003],[-662,-178]],[[293201,498098],[-213,5177],[-115,5361]],[[292873,508636],[1907,279]],[[298691,504417],[-203,-1307],[-284,945],[-413,-3860],[-312,779]],[[297479,500974],[-299,925],[174,1659],[-442,1091]],[[296979,508865],[1829,-1]],[[196492,508720],[81,-2399],[-1,-6524],[53,-2],[-1,-6560],[65,0]],[[196689,493235],[-1,-1658]],[[196688,491577],[-673,4],[0,-1650],[-344,-3],[9,-1602],[-503,-6],[3,-1644],[-615,-55]],[[194565,486621],[-361,2183],[-278,574],[-277,-717],[-66,-1425],[-340,-839],[-199,2910],[-376,-148],[-166,1089]],[[192502,490248],[0,2320],[-271,2957],[-405,2563],[50,1662],[-272,1203],[-814,-4],[0,1553],[-1080,0]],[[290927,508616],[234,-783],[324,-14557],[-26,-1329]],[[291459,491947],[-889,-543]],[[290570,491404],[-581,-367],[-299,866]],[[289690,491903],[-769,2248]],[[288921,494151],[-1154,3457]],[[287767,497608],[260,2084],[1343,6200],[870,2516],[687,208]],[[198469,508740],[221,-3932],[453,-2058],[152,401],[684,-2630]],[[199979,500521],[185,-1796],[287,-398],[153,-2196],[-4,-2948]],[[200600,493183],[-3911,52]],[[206332,508724],[28,-15346]],[[206360,493378],[-1,-12616]],[[206359,480762],[-2612,-65]],[[203747,480697],[21,19901]],[[203768,500598],[-42,7998]],[[203768,500598],[-1168,-135],[-2621,58]],[[293201,498098],[-645,-418],[133,-5012],[-525,-325]],[[292164,492343],[-705,-396]],[[290927,508616],[1946,20]],[[209211,500728],[4,-7271]],[[209215,493457],[-2855,-79]],[[169715,494865],[13,-4022]],[[169728,490843],[-1638,144],[-4,-1633],[-2342,-17]],[[165744,489337],[4,6476]],[[237194,508319],[5,-4866]],[[237199,503453],[-679,10],[-2,-1632],[-677,-5],[-1,1625]],[[235840,503451],[-12,3259]],[[238555,505022],[-264,-1738],[-417,-1265]],[[237874,502019],[-336,1430],[-339,4]],[[230398,505110],[0,-3258]],[[230398,501852],[-1,-1634]],[[230397,500218],[-1208,4]],[[229189,500222],[2,4853]],[[233097,504116],[341,-1014]],[[233438,503102],[0,-2922],[-654,12]],[[232784,500192],[-25,1634],[-1362,10]],[[231397,501836],[-999,16]],[[240560,504010],[201,-612]],[[240761,503398],[-169,-3191],[-690,-567],[2,-757]],[[239904,498883],[-675,2],[1,1341]],[[239230,500226],[-140,4570]],[[221422,506806],[-9,-6503]],[[221413,500303],[-2368,-14]],[[219045,500289],[-317,677],[77,2216],[-293,1269]],[[222429,506801],[32,-13075]],[[222461,493726],[-769,-45]],[[221692,493681],[-243,467]],[[221449,494148],[-36,6155]],[[224117,501907],[15,-8147]],[[224132,493760],[-628,-3]],[[223504,493757],[-1043,-31]],[[235840,503451],[-367,-8],[16,-4852]],[[235489,498591],[-437,8]],[[235052,498599],[-236,773]],[[234816,499372],[-1378,3730]],[[183397,494435],[-268,4],[1,-3240],[-116,1],[10,-3445],[227,-984],[-560,-2336],[-480,-1252],[-144,-1113]],[[182067,482070],[-654,3911],[-113,-749],[-564,1717],[-8,881],[-657,321],[-39,-922],[-426,1523],[-370,1],[1,1213],[-439,-1021]],[[178798,488945],[-55,216]],[[178743,489161],[-155,1982],[61,1849],[-397,879],[-33,1743],[-322,802]],[[242424,502840],[-1,-2696],[-504,27]],[[241919,500171],[-648,507],[-510,2720]],[[266980,506081],[138,-2704],[-131,-3752]],[[266987,499625],[-1582,-51]],[[265405,499574],[-5,6472]],[[265400,506046],[1580,35]],[[262728,506073],[-10,-6460]],[[262718,499613],[-1347,22]],[[261371,499635],[4,5587]],[[264053,506017],[3,-6476]],[[264056,499541],[-1338,72]],[[245803,501201],[-678,11]],[[245125,501212],[-1013,-14]],[[244112,501198],[-337,8]],[[243775,501206],[-1,1619]],[[265405,499574],[-1349,-33]],[[175096,498365],[-133,-2277],[-31,-3180],[-260,7]],[[174672,492915],[-1240,22]],[[173432,492937],[-217,1683],[-680,1089]],[[163715,500598],[-1230,-21],[0,-1606],[-450,-3],[0,-1608],[-331,10]],[[161704,497370],[-2048,35]],[[159656,497405],[135,5427]],[[239230,500226],[-677,-7]],[[238553,500219],[-1077,-8]],[[237476,500211],[398,1808]],[[229189,500222],[-676,-12]],[[228513,500210],[-1015,14]],[[297479,500974],[-166,-1452]],[[297313,499522],[-157,-1497],[-296,998],[-160,-1509],[-420,994]],[[296280,498508],[-67,1872],[-265,1505]],[[159656,497405],[120,-2500]],[[159776,494905],[-1468,-90],[-166,-674],[-532,205],[-411,1118],[-499,-542],[-5,-1095],[-722,-4],[-54,1557]],[[155919,495380],[-124,1127],[44,2998],[-133,924],[521,1787],[-211,1292]],[[219045,500289],[-134,-1711],[524,-288],[58,-1572],[780,-877],[539,-1240],[-128,-868]],[[220684,493733],[-1196,-11],[0,-483]],[[219488,493239],[-1893,-6]],[[217595,493233],[-335,-5],[35,9715],[49,1064]],[[260032,504518],[-8,-4869]],[[260024,499649],[-1161,99]],[[258863,499748],[-12,3454],[458,1388]],[[259309,504590],[723,-72]],[[298975,496577],[-544,-513],[-20,-3063]],[[298411,493001],[-914,898]],[[297497,493899],[402,4107],[-586,1516]],[[307394,502828],[-140,-1574],[180,-625],[-64,-1886],[-523,-588],[177,-1428],[-225,-1984]],[[306799,494743],[-257,114],[-412,2029],[-390,-679]],[[305740,496207],[-272,275]],[[305468,496482],[309,2125],[8,3413],[-219,979]],[[189727,498925],[6,-9134]],[[189733,489791],[-389,-951],[-593,-175]],[[188751,488665],[-448,-740],[-1162,821]],[[187141,488746],[-1,809],[-499,8],[1,1608]],[[186642,491171],[338,-6],[2,1607],[490,821],[16,2404],[169,1559],[484,17],[2,2778]],[[217595,493233],[-48,-3229]],[[217547,490004],[-2628,-7]],[[214919,489997],[17,9614]],[[296280,498508],[-410,-5407]],[[295870,493101],[-68,2574],[-938,-658]],[[294864,495017],[48,3057],[-119,2205]],[[155919,495380],[-1648,-2]],[[305468,496482],[-133,-1505],[-266,329],[-18,-2929],[-277,308]],[[304774,492685],[-7,9]],[[304767,492694],[-269,530],[-119,-1120],[-300,314]],[[304079,492418],[-196,1520],[-150,5232]],[[237476,500211],[-51,-1567]],[[237425,498644],[-1936,-53]],[[241919,500171],[207,-1615]],[[242126,498556],[-525,16],[0,-1617],[-335,5],[-2,-3232]],[[241264,493728],[-356,11]],[[240908,493739],[-1010,21]],[[239898,493760],[6,5123]],[[234816,499372],[-1,-4020],[-673,-9],[-3,-1613]],[[234139,493730],[-986,18]],[[233153,493748],[-365,-6]],[[232788,493742],[-4,6450]],[[250534,502783],[-2,-8150]],[[250532,494633],[-1040,40]],[[249492,494673],[-353,36]],[[249139,494709],[-5,4906],[-328,5],[-2,3230]],[[249139,494709],[-495,34]],[[248644,494743],[-1142,-13]],[[247502,494730],[-10,3275]],[[253979,502714],[-8,-2]],[[253961,502711],[-152,-2103],[333,-531],[464,2017]],[[254606,502094],[-10,-5905]],[[254596,496189],[-339,9],[-1,-1624],[-432,11]],[[253824,494585],[-416,18]],[[253408,494603],[5,6419],[-153,-36]],[[243775,501206],[-1056,-193],[-152,-3332]],[[242567,497681],[-441,875]],[[252256,501092],[-364,1],[-9,-6465]],[[251883,494628],[-409,-12]],[[251474,494616],[-942,17]],[[255685,502676],[-302,-3068],[-168,-3412]],[[255215,496196],[-619,-7]],[[254606,502094],[73,608]],[[254679,502702],[1006,-26]],[[192502,490248],[5,-10113]],[[192507,480135],[-16,-1620],[-799,3],[0,-1616],[-653,8],[-1,-1049]],[[191038,475861],[-655,-1],[0,1502],[-643,-3]],[[189740,477359],[-2,3452]],[[189738,480811],[-5,8980]],[[226492,500234],[-1,-6499]],[[226491,493735],[-1332,23]],[[225159,493758],[-1027,2]],[[231397,501836],[40,-8077]],[[231437,493759],[-1042,2]],[[230395,493761],[2,6457]],[[232788,493742],[-1310,15]],[[231478,493757],[-41,2]],[[210892,492720],[-1677,4]],[[209215,492724],[0,733]],[[244112,501198],[-2,-6506],[-219,-855],[206,-1950],[-69,-1317]],[[244028,490570],[-834,3122]],[[243194,493692],[-278,3080],[-349,909]],[[245125,501212],[38,-9631]],[[245163,491581],[-433,-274],[-42,-1497],[-286,-3]],[[244402,489807],[-374,763]],[[247502,494730],[0,-1740]],[[247502,492990],[-1654,56],[-188,-1630]],[[245660,491416],[-497,165]],[[253408,494603],[-589,40]],[[252819,494643],[-936,-15]],[[186642,491171],[-1501,14],[-1,-1611]],[[185140,489574],[-834,9],[-3,4870]],[[203747,480697],[-170,-9]],[[203577,480688],[-2877,-40],[0,148]],[[200700,480796],[-50,12388],[-50,-1]],[[165744,489337],[-329,0],[-5,-4859],[-337,5]],[[165073,484483],[-1002,8],[0,1610],[-336,-4],[-1,1617],[-1029,-13],[0,1607],[-664,63],[-2,3220],[-321,78],[-14,4701]],[[221449,494148],[180,-1781],[-748,47],[-197,1319]],[[294864,495017],[-214,-1346],[-132,-2762],[162,-4374]],[[294680,486535],[-165,-91]],[[294515,486444],[-1724,-1102]],[[292791,485342],[28,959],[-465,275],[-343,2131],[225,833],[-72,2803]],[[238553,500219],[-2,-6473]],[[238551,493746],[-677,-1]],[[237874,493745],[1,808],[-680,-7]],[[237195,494546],[220,1969],[10,2129]],[[239898,493760],[-12,0]],[[239886,493760],[-1005,-6]],[[238881,493754],[-330,-8]],[[228513,500210],[-4,-6464]],[[228509,493746],[-670,-19]],[[227839,493727],[-1336,7]],[[226503,493734],[-12,1]],[[230395,493761],[0,-2]],[[230395,493759],[-1217,-19]],[[229178,493740],[-669,6]],[[260024,499649],[-9,-6493]],[[260015,493156],[-615,53]],[[259400,493209],[-964,216]],[[258436,493425],[364,3555],[63,2768]],[[261371,499635],[-2,-6462]],[[261369,493173],[-639,-4]],[[260730,493169],[-715,-13]],[[260024,499649],[1347,-14]],[[264056,499541],[8,-6453]],[[264064,493088],[-669,-1]],[[263395,493087],[-679,15]],[[262716,493102],[2,6511]],[[262716,493102],[-656,54]],[[262060,493156],[-691,17]],[[266987,499625],[-62,-3376],[-470,-1067],[-157,-2039]],[[266298,493143],[-886,-33]],[[265412,493110],[-7,6464]],[[265412,493110],[-786,0]],[[264626,493110],[-562,-22]],[[175340,492914],[-169,-3],[-24,-6409]],[[175147,486502],[-645,6]],[[174502,486508],[-557,-1]],[[173945,486507],[0,3240],[392,-16],[114,1594],[219,-12],[2,1602]],[[214919,489997],[-32,-5323],[-335,-146]],[[214552,484528],[-104,-244],[-1766,9]],[[212682,484293],[343,3116],[-3812,-38]],[[209213,487371],[2,5353]],[[297497,493899],[-208,-1404],[-408,589],[-262,-2738],[-163,303]],[[296456,490649],[-487,788],[-99,1664]],[[235052,498599],[862,-2185],[273,-1379]],[[236187,495035],[13,-2914]],[[236200,492121],[-1368,-13]],[[234832,492108],[-669,3],[-24,1619]],[[304079,492418],[-79,-2770]],[[304000,489648],[-229,-1287],[-556,2439],[-134,-954],[-324,848]],[[237195,494546],[-163,-1485],[-845,1974]],[[243194,493692],[-616,1],[0,-1603]],[[242578,492090],[-667,8],[-1,1620],[-646,10]],[[173432,492937],[-215,-1207],[111,-1864],[-135,-2003]],[[173193,487863],[-118,-729],[-2,-2988]],[[173073,484146],[-1,-31286]],[[173072,452860],[-3259,-51]],[[169813,452809],[-49,5195],[-6,11887],[-34,1],[4,20951]],[[300150,494046],[150,-5519],[-565,-418],[90,-2385]],[[299825,485724],[28,-1263],[-360,-306],[-213,-2182]],[[299280,481973],[-251,-348],[-88,1239],[-239,-1544]],[[298702,481320],[-1098,1335]],[[297604,482655],[73,1781],[273,1403]],[[297950,485839],[461,7162]],[[165073,484483],[-1,-1675]],[[165072,482808],[-3997,131]],[[161075,482939],[-1865,-3]],[[159210,482936],[76,4514],[297,1024],[283,3754],[-90,2677]],[[286590,490299],[-326,1891],[242,1614],[1261,3804]],[[288921,494151],[-278,-2135],[171,-536],[-163,-1981],[-600,-1657],[-229,97],[184,-3632]],[[288006,484307],[-698,337],[-439,-516]],[[286869,484128],[-30,11]],[[286839,484139],[-17,6]],[[286822,484145],[-93,2653],[-183,296],[473,1067],[-221,1528],[192,1727],[-400,-1117]],[[306799,494743],[-208,-3179],[83,-579],[-394,-2172],[-422,632],[40,936]],[[305898,490381],[198,676],[-157,2940],[-190,25],[-9,2185]],[[178743,489161],[-409,649],[-98,1866],[-373,-2892],[-524,-709],[-419,-3554],[-517,-1774],[-405,-259]],[[175998,482488],[-851,4014]],[[305898,490381],[-88,1149],[-333,-4456],[-153,1112],[-294,-802],[27,3032],[-191,-1420]],[[304866,488996],[63,1227],[-293,336]],[[304636,490559],[138,2126]],[[255215,496196],[9,-3137],[-283,-948],[-252,-4019]],[[254689,488092],[-861,-10]],[[253828,488082],[-4,6503]],[[296456,490649],[-138,-1260]],[[296318,489389],[-526,-1475],[60,-1044]],[[295852,486870],[-725,198],[35,-1311],[-435,-257]],[[294727,485500],[-47,1035]],[[159210,482936],[-357,-1082],[-3,-2173]],[[158850,479681],[-1697,-61],[-2,2000],[-1023,-131],[-80,4508],[-585,9],[-506,917],[-252,1689],[-579,464],[-273,-1479],[-649,-39]],[[153204,487558],[120,7683]],[[301339,486191],[74,-4638]],[[301413,481553],[-561,-30]],[[300852,481523],[-271,609],[-756,3592]],[[237874,493745],[1,-6477]],[[237875,487268],[-1336,-3]],[[236539,487265],[-339,-1]],[[236200,487264],[0,4857]],[[248644,494743],[4,-1204],[-356,-1774],[167,-1778],[17,-2211],[271,-1702],[222,-2659]],[[248969,483415],[-1467,-1]],[[247502,483414],[0,1682]],[[247502,485096],[0,7894]],[[249492,494673],[0,-4905]],[[249492,489768],[-4,-6323]],[[249488,483445],[-519,-30]],[[251474,494616],[2,-4829]],[[251476,489787],[-787,-8]],[[250689,489779],[-1197,-11]],[[252819,494643],[-1,-5695]],[[252818,488948],[2,-842],[-1343,42]],[[251477,488148],[-1,1639]],[[253828,488082],[-336,-5]],[[253492,488077],[2,862],[-676,9]],[[185140,489574],[-8,-6495]],[[185132,483079],[-4,-1541],[-325,-82],[-2,-1616],[-333,6],[-31,-3058],[-167,-6]],[[184270,476782],[-988,-2],[0,1537],[-763,6],[72,2286],[-253,1758],[-271,-297]],[[297950,485839],[-1609,2939],[-23,611]],[[289857,482936],[-1180,-3639],[-620,942]],[[288057,480239],[-51,4068]],[[289690,491903],[167,-8967]],[[222306,488875],[139,-1400],[-276,-1472],[-157,-2285],[239,-8],[216,-2924]],[[222467,480786],[-656,1]],[[221811,480787],[-251,2],[-1,4521],[-205,287],[-400,-1289],[-686,-69],[-402,533]],[[219866,484772],[-299,60]],[[219567,484832],[-76,2417],[-3,5990]],[[221692,493681],[38,-1693],[582,-1977],[-6,-1136]],[[231478,493757],[-2,-6466]],[[231476,487291],[-1083,9]],[[230393,487300],[2,6459]],[[233153,493748],[0,-6481]],[[233153,487267],[-1643,21]],[[231510,487288],[-34,3]],[[225159,493758],[1,-4820]],[[225160,488938],[-1327,-45]],[[223833,488893],[-332,-2]],[[223501,488891],[3,4866]],[[239886,493760],[1,-6483]],[[239887,487277],[-12,1]],[[239875,487278],[-994,-7]],[[238881,487271],[0,6483]],[[240908,493739],[-30,-6461]],[[240878,487278],[-991,-1]],[[230393,487300],[-1213,-24]],[[229180,487276],[-2,6464]],[[238881,487271],[-674,1]],[[238207,487272],[-332,-4]],[[223501,488891],[-1195,-16]],[[226503,493734],[-5,-6430]],[[226498,487304],[-323,15]],[[226175,487319],[-997,6]],[[225178,487325],[-18,1613]],[[242578,492090],[0,-4838]],[[242578,487252],[-1029,-242]],[[241549,487010],[-671,268]],[[234832,492108],[2,-4840]],[[234834,487268],[-1653,0]],[[233181,487268],[-28,-1]],[[229180,487276],[-670,-7]],[[228510,487269],[-670,12]],[[227840,487281],[-1,6446]],[[227840,487281],[-667,8]],[[227173,487289],[-675,15]],[[244402,489807],[393,-2555]],[[244795,487252],[-1245,-4]],[[243550,487248],[-972,4]],[[209213,487371],[2,-6521]],[[209215,480850],[-2355,-66]],[[206860,480784],[-501,-22]],[[259400,493209],[11,-6543]],[[259411,486666],[-1095,71]],[[258316,486737],[-227,4106],[347,2582]],[[304000,489648],[314,-1030]],[[304314,488618],[155,528]],[[304469,489146],[-41,-1012]],[[304428,488134],[-42,-1968],[-144,1438],[-555,-1234],[-307,-2322],[164,-2049],[-435,-546]],[[303109,481453],[-386,1325],[-161,2029],[-306,-177],[3,1606],[-347,397]],[[219567,484832],[-690,962],[-260,-1068],[-280,234],[-415,1974],[-376,205]],[[217546,487139],[1,2865]],[[200700,480796],[-1181,19]],[[199519,480815],[-168,0]],[[199351,480815],[0,2700],[-338,-12],[1,1632],[-671,1],[0,1587],[-983,519],[1,1056],[-333,2],[5,1650],[-345,1627]],[[304469,489146],[96,424],[146,-4223],[-211,-753],[-72,3540]],[[304747,485718],[-31,9]],[[304716,485727],[-143,4023],[63,809]],[[304866,488996],[-144,-864],[186,-1284],[-161,-1130]],[[304767,492694],[-187,-2521],[-266,-1555]],[[260730,493169],[6,-6502]],[[260736,486667],[-1325,-1]],[[262060,493156],[-6,-6526]],[[262054,486630],[-1318,37]],[[263395,493087],[5,-6428]],[[263400,486659],[-1346,-29]],[[264626,493110],[-1,-3070]],[[264625,490040],[-2,-3183]],[[264623,486857],[-1223,-198]],[[247502,485096],[-1666,-110]],[[245836,484986],[-8,6441],[-168,-11]],[[173945,486507],[-391,-271],[-361,1627]],[[292791,485342],[-439,-294],[152,-6650]],[[292504,478398],[55,-2188]],[[292559,476210],[-1099,-481],[-496,1079]],[[290964,476808],[-432,1001],[257,2732],[-219,10863]],[[236200,487264],[-1352,5]],[[234848,487269],[-14,-1]],[[178798,488945],[-51,-1480]],[[178747,487465],[-147,-2107],[26,-2295],[-140,-364],[-9,-7525]],[[178477,475174],[-2,-5281],[149,-48]],[[178624,469845],[-11,-2675]],[[178613,467170],[-1161,-3],[34,3026],[-977,385],[-398,937],[-84,-1083],[-654,1956],[-184,1187]],[[175189,473575],[801,17],[8,8896]],[[290964,476808],[48,-2085],[-179,-2358]],[[290833,472365],[-10,-3429]],[[290823,468936],[-322,652],[-79,-1361],[-540,1549],[-309,-528]],[[289573,469248],[-20,3211],[418,3255],[-260,631],[239,1293],[-93,5298]],[[245836,484986],[-965,56]],[[244871,485042],[-76,2210]],[[199351,480815],[0,-541],[-2070,-233],[-331,808],[-664,542],[-332,1359],[-995,270],[0,1479],[-394,2122]],[[187141,488746],[-18,-3230],[156,228],[838,-2596]],[[188117,483148],[-2489,-4]],[[185628,483144],[-496,-65]],[[169813,452809],[-3140,-58]],[[166673,452751],[-101,8]],[[166572,452759],[-14,14051],[-1606,-148],[6,8084],[115,22],[-1,8040]],[[199519,480815],[49,-534],[44,-12867],[-117,0],[4,-6462],[53,0]],[[199552,460952],[1,-3214]],[[199553,457738],[-4238,36]],[[195315,457774],[-81,8002],[-208,644],[-622,4048],[-507,1247],[-388,4711],[-175,3679],[-827,30]],[[265345,488432],[-13,-4365],[594,-1607]],[[265926,482460],[2,-2061]],[[265928,480399],[-330,807],[-651,39],[-327,828]],[[264620,482073],[3,4784]],[[264625,490040],[337,2],[2,-1583],[381,-27]],[[217546,487139],[-458,-846],[2,-7567]],[[217090,478726],[-2459,15]],[[214631,478741],[-79,1614],[0,4173]],[[184270,476782],[-1,-3236]],[[184269,473546],[-657,2],[18,-6492],[161,-1617],[-161,-936]],[[183630,464503],[-371,1135],[-285,-315]],[[182974,465323],[1,3350],[164,1],[-2,6526],[-838,4]],[[182299,475204],[-1840,-8]],[[180459,475196],[-55,2307],[-389,209],[74,2718],[-486,2042],[-30,3598],[-454,235],[-372,1160]],[[189738,480811],[-430,716],[-125,1526],[-435,7]],[[188748,483060],[3,5605]],[[251477,488148],[-1,-4871]],[[251476,483277],[-337,-10]],[[251139,483267],[-664,187]],[[250475,483454],[214,6325]],[[250475,483454],[-987,-9]],[[297604,482655],[-139,-532],[-150,-6297]],[[297315,475826],[-695,-198],[-380,611]],[[296240,476239],[-135,842]],[[296105,477081],[40,1310],[261,-315],[91,2133],[-178,490],[251,3496],[-332,632],[104,1630],[-255,1002],[-235,-589]],[[158850,479681],[187,-615],[253,-2715],[-331,-3405],[-528,-206],[-4,-1355]],[[158427,471385],[-329,3],[-438,-1061],[-659,-2952],[-995,-473],[-215,-851]],[[155791,466051],[-605,-122],[-747,708],[-3,820]],[[154436,467457],[-267,105]],[[154169,467562],[-22,3823],[330,1722],[-6,3184],[-170,-24],[1,3264],[-310,1555],[0,1720],[-955,38]],[[153037,482844],[167,4714]],[[253492,488077],[4,-6487]],[[253496,481590],[-667,11]],[[252829,481601],[-2,1625],[-1351,51]],[[225178,487325],[13,-6560]],[[225191,480765],[-1074,13]],[[224117,480778],[-247,-3]],[[223870,480775],[-37,8118]],[[223870,480775],[-1403,11]],[[188748,483060],[-631,88]],[[254689,488092],[84,-3796],[-251,-2704]],[[254522,481592],[-692,-13]],[[253830,481579],[-334,11]],[[174502,486508],[0,-3222],[108,-1],[1,-3245],[-110,-10],[5,-3146]],[[174506,476884],[-750,3480],[-170,2161],[-513,1621]],[[219866,484772],[49,-6023]],[[219915,478749],[-2825,-23]],[[180459,475196],[-612,-24]],[[179847,475172],[-1370,2]],[[296105,477081],[-1078,261]],[[295027,477342],[17,4427],[-151,1361],[-345,332],[179,2038]],[[212682,484293],[-532,-1540],[1,-2394]],[[212151,480359],[-2937,18]],[[209214,480377],[1,473]],[[231510,487288],[-2,-6495]],[[231508,480793],[-1114,5]],[[230394,480798],[-1,6502]],[[233181,487268],[-7,-6468]],[[233174,480800],[-1131,-9]],[[232043,480791],[-535,2]],[[239875,487278],[4,-6493]],[[239879,480785],[-1250,-4]],[[238629,480781],[-422,3]],[[238207,480784],[0,6488]],[[241549,487010],[0,-6211]],[[241549,480799],[-290,-4]],[[241259,480795],[-1313,-10]],[[239946,480785],[-67,0]],[[244871,485042],[-34,-2082],[143,-2160]],[[244980,480800],[-1096,2]],[[243884,480802],[-334,1]],[[243550,480803],[0,6445]],[[226175,487319],[6,-6546]],[[226181,480773],[-417,-14]],[[225764,480759],[-573,6]],[[227173,487289],[6,-6502]],[[227179,480787],[-998,-14]],[[243550,480803],[-972,-1]],[[242578,480802],[-1029,-3]],[[234848,487269],[-4,-6463]],[[234844,480806],[-164,-7]],[[234680,480799],[-1319,-4]],[[233361,480795],[-187,5]],[[238207,480784],[-899,-1]],[[237308,480783],[-771,10]],[[236537,480793],[2,6472]],[[230394,480798],[-407,0]],[[229987,480798],[-908,-8]],[[229079,480790],[-570,-5]],[[228509,480785],[1,6484]],[[236537,480793],[-543,5]],[[235994,480798],[-1150,8]],[[228509,480785],[-758,1]],[[227751,480786],[-572,1]],[[264620,482073],[-6,-1618],[-556,-298]],[[264058,480157],[-662,0]],[[263396,480157],[4,6502]],[[259411,486666],[-4,-6482]],[[259407,480184],[-1174,91]],[[258233,480275],[-220,3394],[303,3068]],[[263396,480157],[-664,2]],[[262732,480159],[-666,1]],[[262066,480160],[-12,6470]],[[303109,481453],[-237,-3362],[-309,-545],[-343,-4752],[-437,1187]],[[301783,473981],[56,1697],[-493,2897],[67,2978]],[[262066,480160],[-1330,39]],[[260736,480199],[0,6468]],[[260736,480199],[0,-3239]],[[260736,476960],[-635,-23]],[[260101,476937],[-693,9],[-1,3238]],[[295027,477342],[-54,-6909]],[[294973,470433],[-1008,-45]],[[293965,470388],[167,2590],[-54,4202]],[[294078,477180],[-94,3357],[378,3144],[153,2763]],[[175189,473575],[-333,1506],[-129,1913],[-221,-110]],[[294078,477180],[-671,-974],[-134,2686],[-769,-494]],[[221811,480787],[-2,-9342]],[[221809,471445],[-1850,12]],[[219959,471457],[-44,7292]],[[300852,481523],[10,-3417],[-211,-1323]],[[300651,476783],[-895,3174],[-123,-380],[-353,2396]],[[266573,485031],[2,-1115],[972,142]],[[267547,484058],[-7,-6487]],[[267540,477571],[-652,-90],[7,-1620],[-304,-225]],[[266591,475636],[-654,-33]],[[265937,475603],[-9,4796]],[[265926,482460],[509,2703],[138,-132]],[[247502,483414],[4,-1618]],[[247506,481796],[-1005,-19],[9,-2420]],[[246510,479357],[-1496,-1]],[[245014,479356],[-34,1444]],[[286839,484139],[-17,6]],[[288057,480239],[-163,246],[-201,-2952],[7,-3155]],[[287700,474378],[-304,518]],[[287396,474896],[-580,1633],[-156,-691],[-618,-120]],[[286042,475718],[-350,485],[-33,3060]],[[285659,479263],[575,1959],[489,118],[146,2788]],[[214631,478741],[5,-4840],[73,-2431]],[[214709,471470],[-1977,12]],[[212732,471482],[-581,13]],[[212151,471495],[0,8864]],[[269259,474627],[-1374,-276]],[[267885,474351],[-11,2435],[-334,785]],[[267547,484058],[1423,278]],[[268970,484336],[189,-4720],[100,-4989]],[[178613,467170],[-2,-14381]],[[178611,452789],[-3086,40],[-2428,19]],[[173097,452848],[-25,12]],[[251139,483267],[-6,-6482]],[[251133,476785],[-1982,150]],[[249151,476935],[333,1630],[6,3333],[-358,175],[-163,1342]],[[249151,476935],[-329,-1618]],[[248822,475317],[-991,-773]],[[247831,474544],[7,7270],[-332,-18]],[[252829,481601],[-49,-6494]],[[252780,475107],[-329,24]],[[252451,475131],[-1317,31]],[[251134,475162],[-1,1623]],[[189740,477359],[2,-5504]],[[189742,471855],[-1522,-1]],[[188220,471854],[5,4869],[-654,11],[0,1562],[-614,10],[-169,1088],[-1161,0],[1,3750]],[[188220,471854],[-1319,43]],[[186901,471897],[-1652,-8],[-264,-1314]],[[184985,470575],[-184,-1640],[-531,-4],[-1,4615]],[[161075,482939],[-46,-16197],[1299,-28],[11,-13964]],[[162339,452750],[-1582,69]],[[160757,452819],[-2347,191]],[[158410,453010],[17,18375]],[[166572,452759],[-1780,9]],[[164792,452768],[-2453,-18]],[[289573,469248],[-100,-158]],[[289473,469090],[-527,-153],[-20,1299],[-279,-24],[-23,1969],[-519,2369],[-405,-172]],[[300651,476783],[-32,-196]],[[300619,476587],[-404,-4938]],[[300215,471649],[-352,1116],[-342,-274],[-74,1832],[-524,-694],[-159,1712],[-267,-361]],[[298497,474980],[-226,2507],[101,2206],[330,1627]],[[154169,467562],[-316,-270],[-199,-1663],[-396,-276],[-61,3941],[-268,1346],[-619,4]],[[152310,470644],[269,5888],[458,6312]],[[298497,474980],[-81,-1100]],[[298416,473880],[-391,59],[61,931],[-822,-385]],[[297264,474485],[51,1341]],[[301783,473981],[-163,-963]],[[301620,473018],[-513,-14],[127,1049],[-615,2534]],[[265937,475603],[-658,-19],[7,-1630]],[[265286,473954],[-1222,-81]],[[264064,473873],[-6,6284]],[[247831,474544],[-656,678]],[[247175,475222],[-660,-542]],[[246515,474680],[-5,4677]],[[254522,481592],[-329,-5331],[50,-1204]],[[254243,475057],[-476,2]],[[253767,475059],[63,6520]],[[253767,475059],[-987,48]],[[238629,480781],[-1,-4544]],[[238628,476237],[-1318,-2]],[[237310,476235],[-2,4548]],[[237308,469765],[-1314,6]],[[235994,469771],[-1,6459]],[[235993,476230],[1,4568]],[[237310,476235],[-2,-6470]],[[234682,476230],[-1321,3]],[[233361,476233],[0,4562]],[[234680,480799],[2,-4569]],[[235993,476230],[-1311,0]],[[239946,476238],[-1318,-1]],[[239946,480785],[0,-4547]],[[233361,476233],[-1320,44]],[[232041,476277],[2,4514]],[[209214,480377],[4,-8812]],[[209218,471565],[2,-7313]],[[209220,464252],[-1680,-40]],[[207540,464212],[-659,-10]],[[206881,464202],[-21,16582]],[[241256,475444],[-1310,0]],[[239946,475444],[0,794]],[[241259,480795],[-3,-5351]],[[232041,476277],[-1932,42]],[[230109,476319],[87,2489],[-209,1990]],[[242578,480802],[-3,-5356]],[[242575,475446],[-1319,-2]],[[245014,479356],[3,-1361],[406,-1716],[-330,-3304]],[[245093,472975],[-1193,27]],[[243900,473002],[-16,7800]],[[243900,473002],[-1326,21]],[[242574,473023],[1,2423]],[[230109,476319],[223,-746],[59,-2539]],[[230391,473034],[-980,6]],[[229411,473040],[-330,1]],[[229081,473041],[-2,7749]],[[206881,464202],[-1098,-59],[7,-3246]],[[205790,460897],[-134,-6],[-121,-2625],[-665,267],[162,2347],[-1442,51]],[[203590,460931],[-6,-1]],[[203584,460930],[-7,19758]],[[224117,480778],[91,-2393],[1571,-3238]],[[225779,475147],[90,-531]],[[225869,474616],[-47,-3529],[-166,-2602]],[[225656,468485],[-436,812]],[[225220,469297],[-525,2161]],[[224695,471458],[-1032,3040],[-78,1581],[-470,1324],[-243,2027],[-405,1356]],[[229081,473041],[-659,-11]],[[228422,473030],[0,1617],[-664,-11]],[[227758,474636],[-7,6150]],[[227758,474636],[-664,-12]],[[227094,474624],[-1225,-8]],[[225779,475147],[-15,5612]],[[203584,460930],[-1530,-51],[-2502,73]],[[224695,471458],[-2109,-11]],[[222586,471447],[-777,-2]],[[212151,471495],[-1401,0]],[[210750,471495],[-1532,70]],[[260101,476937],[-2,-1635]],[[260099,475302],[-327,13],[3,-1619],[-1017,-10]],[[258758,473686],[-525,6589]],[[262732,480159],[25,-6464]],[[262757,473695],[-1325,-1]],[[261432,473694],[1,3265],[-697,1]],[[195315,457774],[-2814,131]],[[192501,457905],[-1359,126],[-5,3184],[-131,-1],[32,14647]],[[264064,473873],[0,-195]],[[264064,473678],[-1307,17]],[[246515,474680],[-1111,-3346],[-255,-72]],[[245149,471262],[-56,1713]],[[286042,475718],[-35,-4144],[115,-2964],[261,69],[229,-1456]],[[286612,467223],[26,-2749]],[[286638,464474],[-1117,-2]],[[285521,464472],[-187,1944],[55,5513]],[[285389,471929],[-24,5903]],[[285365,477832],[294,1431]],[[293965,470388],[-115,-2941]],[[293850,467447],[-369,-82]],[[293481,467365],[-266,2462],[-523,831]],[[292692,470658],[-14,506]],[[292678,471164],[-119,5046]],[[217090,478726],[0,-7283]],[[217090,471443],[-2381,27]],[[219959,471457],[-2869,-14]],[[281818,478275],[-5,-4317]],[[281813,473958],[-1305,-81]],[[280508,473877],[0,4510]],[[280508,478387],[1310,-112]],[[280508,473877],[4,-838]],[[280512,473039],[-752,7],[-414,-1124]],[[279346,471922],[-518,1157],[12,3307],[719,1122],[949,879]],[[283548,476627],[9,-4499]],[[283557,472128],[-318,-2],[8,-1702],[-272,15]],[[282975,470439],[-429,32],[9,795],[-498,-12]],[[282057,471254],[10,2715],[-254,-11]],[[281818,478275],[657,-444],[527,-1886],[546,682]],[[285389,471929],[-697,-202]],[[284692,471727],[-474,498],[-661,-97]],[[283548,476627],[635,252],[429,-526],[753,1479]],[[267885,474351],[36,-4847]],[[267921,469504],[-333,-95]],[[267588,469409],[-976,-154]],[[266612,469255],[-21,6381]],[[192501,457905],[15,-12907]],[[192516,444998],[-2779,44]],[[189737,445042],[-3,7852]],[[189734,452894],[0,9524]],[[189734,462418],[8,9437]],[[296240,476239],[-137,-2649],[-357,111],[-31,-3520],[241,-60],[-25,-3493]],[[295931,466628],[-259,35]],[[295672,466663],[-674,89]],[[294998,466752],[-25,3681]],[[251134,475162],[-13,-6522]],[[251121,468640],[-991,-44]],[[250130,468596],[-1308,231]],[[248822,468827],[0,6490]],[[261432,473694],[8,-6496]],[[261440,467198],[-657,-32]],[[260783,467166],[-660,1]],[[260123,467167],[-24,8135]],[[292678,471164],[-1239,47],[-606,1154]],[[301620,473018],[189,655],[301,-1389],[-295,-3187]],[[301815,469097],[-594,-238],[-94,-984],[-503,-1185]],[[300624,466690],[-506,1532],[-67,1969],[164,1458]],[[287396,474896],[215,-2007],[56,-5300]],[[287667,467589],[-1055,-366]],[[297264,474485],[21,-2797],[-310,-2918],[270,-2371]],[[297245,466399],[-1314,229]],[[232041,476277],[7,-6487]],[[232048,469790],[-1892,-6]],[[230156,469784],[78,2629],[157,621]],[[233361,476233],[0,-6428]],[[233361,469805],[-1313,-15]],[[239946,475444],[-2,-5679]],[[239944,469765],[-1320,14]],[[238624,469779],[4,6458]],[[238624,469779],[-1316,-14]],[[235994,469771],[-1312,30]],[[234682,469801],[0,6429]],[[234682,469801],[-1321,4]],[[266612,469255],[-658,-171],[8,-1637]],[[265962,467447],[-657,-46]],[[265305,467401],[-19,6553]],[[242574,473023],[-1,-3272]],[[242573,469751],[-1317,2]],[[241256,469753],[0,5691]],[[241256,469753],[-1312,12]],[[248822,468827],[0,-811]],[[248822,468016],[-1639,-18]],[[247183,467998],[-8,7224]],[[247183,467998],[1,-5693]],[[247184,462305],[-597,23]],[[246587,462328],[-172,2279],[-542,826]],[[245873,465433],[-469,1435],[-255,4394]],[[300624,466690],[-29,-122]],[[300595,466568],[-107,-727],[-1684,269]],[[298804,466110],[-84,15]],[[298720,466125],[-215,4313],[-157,17],[68,3425]],[[260123,467167],[-1187,-13]],[[258936,467154],[-50,4105],[-128,2427]],[[182299,475204],[2,-6521],[-141,-1591],[-469,14]],[[181691,467106],[-326,810],[-824,10],[-55,776],[-638,0]],[[179848,468702],[-1,6470]],[[179848,468702],[-62,-3749]],[[179786,464953],[-567,397],[-336,2247],[112,1245],[-371,1003]],[[252451,475131],[-15,-6573]],[[252436,468558],[-656,-5]],[[251780,468553],[-659,87]],[[182974,465323],[-239,-239],[-274,-2259],[-767,3]],[[181694,462828],[-3,4278]],[[253767,475059],[-17,-6494]],[[253750,468565],[-659,-23]],[[253091,468542],[-655,16]],[[254243,475057],[184,-6512]],[[254427,468545],[-677,20]],[[289473,469090],[-133,-2371]],[[289340,466719],[-1655,-378]],[[287685,466341],[-18,1248]],[[298720,466125],[-986,173]],[[297734,466298],[-489,101]],[[228422,473030],[1,-5277]],[[228423,467753],[-412,1263],[-492,-321]],[[227519,468695],[-420,22]],[[227099,468717],[-5,5907]],[[227099,468717],[-647,152],[-239,-1688],[-226,-92],[-331,1396]],[[265305,467401],[-657,-77]],[[264648,467324],[-572,-17]],[[264076,467307],[-12,6371]],[[282057,471254],[-126,-2331]],[[281931,468923],[-1419,92]],[[280512,469015],[0,4024]],[[262757,473695],[0,-6487]],[[262757,467208],[-661,6]],[[262096,467214],[-656,-16]],[[264076,467307],[-666,-109]],[[263410,467198],[-653,10]],[[184985,470575],[7,-701],[463,1104],[182,-1173],[55,-3295],[326,-1617],[-112,-2668]],[[185906,462225],[-218,4],[1,-1622],[-435,0],[0,-1621],[-966,-26]],[[184288,458960],[-6,4851],[-652,692]],[[279029,472686],[285,-725],[-124,-1250],[-161,1975]],[[280512,469015],[1,-6165]],[[280513,462850],[-1172,-1823],[-491,1851]],[[278850,462878],[-210,586]],[[278640,463464],[245,2248],[543,1800],[-163,3147],[81,1263]],[[230156,469784],[-257,-2657],[18,-1097],[319,-1425],[30,-1300]],[[230266,463305],[144,-1321]],[[230410,461984],[-513,643]],[[229897,462627],[-186,2345],[-301,1002]],[[229410,465974],[1,7066]],[[229410,465974],[-586,1070]],[[228824,467044],[-401,709]],[[243900,473002],[-5,-8148]],[[243895,464854],[-1322,-36]],[[242573,464818],[0,4933]],[[245873,465433],[-1,-548],[-656,3]],[[245216,464888],[-1321,-34]],[[292692,470658],[24,-1087],[-500,-1877]],[[292216,467694],[-534,-438],[-538,1053]],[[291144,468309],[-321,627]],[[284692,471727],[-24,-4635]],[[284668,467092],[-949,-54],[-149,-3443]],[[283570,463595],[-344,17]],[[283226,463612],[9,1731],[-312,32],[52,5064]],[[186901,471897],[-242,-2320],[147,-3747],[355,398],[146,-1874],[116,-3739]],[[187423,460615],[-60,-2973],[-639,533]],[[186724,458175],[-179,1227],[-382,-494],[85,2410],[-342,907]],[[189734,462418],[-524,-640],[35,1742],[-1063,341],[13,-3257]],[[188195,460604],[-772,11]],[[285521,464472],[224,-1370],[-308,-59]],[[285437,463043],[-555,-96]],[[284882,462947],[2,2099],[-216,2046]],[[210915,461007],[1,-6454],[118,-1622]],[[211034,452931],[-1814,-34]],[[209220,452897],[0,11355]],[[210750,471495],[65,-4017],[1,-6472],[99,1]],[[214922,454659],[-168,-1623]],[[214754,453036],[-1702,-73]],[[213052,452963],[-57,-9]],[[212995,452954],[-125,1631],[-19,6469],[-66,0]],[[212785,461054],[0,6429],[-53,3999]],[[214709,471470],[45,-10349],[76,-3],[-3,-6452],[95,-7]],[[212785,461054],[-1870,-47]],[[225220,469297],[14,-2262]],[[225234,467035],[-777,346],[-863,1234],[-165,870],[-849,-1646]],[[222580,467839],[6,3608]],[[222580,467839],[-780,-1614],[-391,246]],[[221409,466471],[-1271,1433],[-179,712]],[[219959,468616],[0,2841]],[[219959,468616],[86,-14153]],[[220045,454463],[-279,6]],[[219766,454469],[-1612,38]],[[218154,454507],[-1617,75]],[[216537,454582],[-1615,77]],[[158410,453010],[-2620,-73]],[[155790,452937],[1,13114]],[[283226,463612],[-473,56],[-176,-2030]],[[282577,461638],[-328,866],[-551,59]],[[281698,462563],[229,2736],[4,3624]],[[294998,466752],[-244,-4393]],[[294754,462359],[-1202,-851]],[[293552,461508],[61,2653],[237,3286]],[[293481,467365],[-1033,-911]],[[292448,466454],[-257,-291],[25,1531]],[[154436,467457],[-322,-2815],[-164,-2463],[-328,-78],[-48,-2548],[372,-119],[282,-2181],[-185,-1760],[100,-2713]],[[154143,452780],[-1087,57]],[[153056,452837],[-394,1953],[-208,4302],[105,4473],[-70,1598],[-265,1357],[-113,2029],[199,2095]],[[179786,464953],[673,-952],[683,-1921],[360,584]],[[181502,462664],[-185,-222],[-7,-1813],[-600,5],[9,-7878]],[[180719,452756],[-2108,33]],[[232048,469790],[-2,-6489]],[[232046,463301],[-1780,4]],[[234682,469801],[-2,-6506]],[[234680,463295],[-1319,28]],[[233361,463323],[0,6482]],[[233361,463323],[-985,-8]],[[232376,463315],[-330,-14]],[[235994,469771],[0,-4896]],[[235994,464875],[0,-1606]],[[235994,463269],[-1314,26]],[[238624,469779],[-2,-6531]],[[238622,463248],[-1316,8]],[[237306,463256],[0,1612]],[[237306,464868],[2,4897]],[[237306,464868],[-1312,7]],[[239944,469765],[-5,-6533]],[[239939,463232],[-1317,16]],[[241256,469753],[-1,-4930]],[[241255,464823],[1,-1611]],[[241256,463212],[-1317,20]],[[242573,464818],[-1318,5]],[[291144,468309],[49,-3777],[-226,-2027]],[[290967,462505],[-369,-97],[-984,-2871],[-607,-823]],[[289007,458714],[112,1788],[-67,1882],[190,1044],[98,3291]],[[225234,467035],[13,-6036]],[[225247,460999],[-1,-6480]],[[225246,454519],[-1283,-6]],[[223963,454513],[-1286,-11]],[[222677,454502],[-33,1]],[[222644,454503],[-31,12930],[-33,406]],[[268694,465642],[-316,-1304],[-142,-3078]],[[268236,461260],[-593,-70]],[[267643,461190],[-55,8219]],[[267921,469504],[681,71],[92,-3933]],[[267643,461190],[-1306,-224]],[[266337,460966],[-314,-74]],[[266023,460892],[-61,6555]],[[301815,469097],[129,-3012],[504,-1290],[-172,-916],[-656,-1010],[-20,-1436],[-247,-531]],[[301353,460902],[-115,245]],[[301238,461147],[-90,2975],[-550,962],[-3,1484]],[[227519,468695],[-1,-7665]],[[227518,461030],[-973,-16]],[[226545,461014],[-1298,-15]],[[228824,467044],[-4,-7638]],[[228820,459406],[-975,10]],[[227845,459416],[1,1618],[-328,-4]],[[281698,462563],[-753,1]],[[280945,462564],[-432,286]],[[250130,468596],[8,-6418]],[[250138,462178],[-98,3]],[[250040,462181],[-1216,98]],[[248824,462279],[-2,5737]],[[181694,462828],[-192,-164]],[[251780,468553],[1,-6528]],[[251781,462025],[-456,56]],[[251325,462081],[-1187,97]],[[221409,466471],[43,-12005]],[[221452,454466],[-68,2]],[[221384,454468],[-1339,-5]],[[253091,468542],[1,-4306]],[[253092,464236],[4,-2163]],[[253096,462073],[-1122,-20]],[[251974,462053],[-193,-28]],[[254427,468545],[185,-1078],[-127,-2165]],[[254485,465302],[-1064,31],[0,-1088],[-329,-9]],[[292448,466454],[-171,-3336],[-36,-2653]],[[292241,460465],[-527,-991]],[[291714,459474],[-489,1292],[-258,1739]],[[293552,461508],[-1311,-1043]],[[248824,462279],[-246,1]],[[248578,462280],[-1394,25]],[[222644,454503],[-1192,-37]],[[287015,460503],[-343,-50]],[[286672,460453],[-34,4021]],[[287685,466341],[71,-5738]],[[287756,460603],[-741,-100]],[[155790,452937],[-801,-56]],[[154989,452881],[-846,-101]],[[266023,460892],[-1299,-123]],[[264724,460769],[-27,1]],[[264697,460770],[-49,6554]],[[264697,460770],[-1281,-49]],[[263416,460721],[-6,6477]],[[263416,460721],[-329,-8]],[[263087,460713],[-984,-2]],[[262103,460711],[-7,6503]],[[262103,460711],[-633,-31]],[[261470,460680],[-681,31]],[[260789,460711],[-6,6455]],[[260789,460711],[-616,-17]],[[260173,460694],[-1419,-23]],[[258754,460671],[182,6483]],[[284882,462947],[17,-1461],[-606,385]],[[284293,461871],[-102,1734],[-621,-10]],[[229897,462627],[-253,6],[-13,-4592]],[[229631,458041],[-267,-255]],[[229364,457786],[-544,3],[0,1617]],[[295672,466663],[201,-1870],[-69,-1579]],[[295804,463214],[-69,-4534]],[[295735,458680],[-148,-5074]],[[295587,453606],[-1209,182]],[[294378,453788],[-26,1]],[[294352,453789],[-31,693],[433,7877]],[[289007,458714],[-9,-2219]],[[288998,456495],[-609,11],[-4,989],[-572,204],[-57,2904]],[[297645,459261],[-169,1430],[-916,-277],[9,883],[-474,582],[-291,1335]],[[297734,466298],[148,-1092],[-43,-2781],[-194,-3164]],[[301238,461147],[-70,-968]],[[301168,460179],[-67,-42]],[[301101,460137],[28,-397]],[[301129,459740],[-2,-4]],[[301127,459736],[-256,-726]],[[300871,459010],[-22,-491]],[[300849,458519],[-74,-391]],[[300775,458128],[-385,553],[-40,-2082],[-373,-817]],[[299977,455782],[-294,712],[-11,1200],[281,1310],[-388,368],[185,1163],[57,2437],[-390,-235],[39,1514],[-540,410],[-112,1449]],[[299977,455782],[-56,-2597]],[[299921,453185],[-840,-170]],[[299081,453015],[-844,386]],[[298237,453401],[-93,26]],[[298144,453427],[2,2449],[-359,413],[119,1140]],[[297906,457429],[27,1227],[-288,605]],[[184288,458960],[0,-6129]],[[184288,452831],[-2898,-84]],[[181390,452747],[-671,9]],[[246587,462328],[-37,-555],[502,-1806]],[[247052,459967],[-532,14],[-3,-1630],[-647,10]],[[245870,458361],[-646,9]],[[245224,458370],[-8,6518]],[[254485,465302],[3,-3266]],[[254488,462036],[-1092,46]],[[253396,462082],[-300,-9]],[[245224,458370],[-650,14]],[[244574,458384],[-651,-1]],[[243923,458383],[-28,6471]],[[237306,463256],[111,-1603],[2,-4877]],[[237419,456776],[-650,-3]],[[236769,456773],[-649,-14]],[[236120,456759],[0,4918],[-126,1592]],[[243923,458383],[-652,50]],[[243271,458433],[-651,-34]],[[242620,458399],[-47,6419]],[[242620,458399],[-652,5]],[[241968,458404],[-654,-10]],[[241314,458394],[-58,4818]],[[286672,460453],[9,-2065],[-460,404],[-3,-1031],[-340,350]],[[285878,458111],[-226,20]],[[285652,458131],[-201,28],[-14,4884]],[[209220,452897],[0,-5655]],[[209220,447242],[0,-2490]],[[209220,444752],[-1672,14],[-2,1638]],[[207546,446404],[-6,17808]],[[207546,446404],[-1740,69]],[[205806,446473],[-16,14424]],[[189734,452894],[-1285,-40]],[[188449,452854],[-244,1758],[-87,2140],[178,1265],[-101,2587]],[[284293,461871],[21,-3935],[375,114]],[[284689,458050],[-2,-5188]],[[284687,452862],[-1795,-1]],[[282892,452861],[-390,-47]],[[282502,452814],[75,8824]],[[278850,462878],[-1,-10016]],[[278849,452862],[-1529,-46]],[[277320,452816],[-423,27],[0,5035]],[[276897,457878],[602,1757],[633,2570],[508,1259]],[[232376,463315],[-1,-1601],[202,-12],[-4,-4901]],[[232573,456801],[-1911,66]],[[230662,456867],[1,1146]],[[230663,458013],[-154,1202],[39,2677],[-138,92]],[[234680,463295],[161,-1606],[-5,-4921]],[[234836,456768],[-648,13]],[[234188,456781],[-647,11]],[[233541,456792],[3,4901],[-183,1630]],[[233541,456792],[-968,9]],[[236120,456759],[-644,5]],[[235476,456764],[-640,4]],[[238622,463248],[103,-1619],[-1,-4867]],[[238724,456762],[-656,0]],[[238068,456762],[-649,14]],[[239939,463232],[70,-6471]],[[240009,456761],[-640,-7]],[[239369,456754],[-645,8]],[[241314,458394],[-654,-6],[2,-1612]],[[240662,456776],[-653,-15]],[[297906,457429],[-486,-1106],[-24,858],[-523,-375],[-118,1160],[-154,-1681],[-621,1035],[76,1737],[-321,-377]],[[285652,458131],[-963,-81]],[[280945,462564],[4,-9702]],[[280949,452862],[-1704,-49]],[[279245,452813],[-396,49]],[[230663,458013],[-1032,28]],[[282502,452814],[-1272,48]],[[281230,452862],[-281,0]],[[291714,459474],[-261,-2859],[238,-599]],[[291691,456016],[-916,-2846]],[[290775,453170],[-1003,-3057]],[[289772,450113],[-329,184],[-290,2565]],[[289153,452862],[-165,773],[10,2860]],[[248578,462280],[18,-5760]],[[248596,456520],[-1109,-47]],[[247487,456473],[-210,622],[-225,2872]],[[294352,453789],[-85,-1334],[-514,519],[-607,1358]],[[293146,454332],[53,903]],[[293199,455235],[352,2851],[1,3422]],[[249239,456572],[-643,-52]],[[250040,462181],[14,-5552]],[[250054,456629],[-815,-57]],[[251325,462081],[1,-6380]],[[251326,455701],[-650,-39],[2,1006],[-624,-39]],[[186724,458175],[47,-5356]],[[186771,452819],[-155,1]],[[186616,452820],[-2328,11]],[[253396,462082],[-8,-6345]],[[253388,455737],[-108,0]],[[253280,455737],[-976,-13]],[[252304,455724],[-325,0]],[[251979,455724],[-5,6329]],[[251979,455724],[-653,-23]],[[254614,455702],[-1226,35]],[[254488,462036],[-82,-3532],[208,-2802]],[[293199,455235],[-367,801],[-92,-1372],[-647,330],[-402,1022]],[[301127,459736],[69,-1616]],[[301196,458120],[-253,-1012],[-168,1020]],[[300849,458519],[22,491]],[[301101,460137],[28,-397]],[[301353,460902],[-185,-723]],[[227845,459416],[-2,-4858]],[[227843,454558],[-1298,-23]],[[226545,454535],[0,6479]],[[212995,452954],[-1853,-34]],[[211142,452920],[-108,11]],[[226545,454535],[3,-3228]],[[226548,451307],[-1288,-26]],[[225260,451281],[-14,3238]],[[266372,454458],[-653,-58]],[[265719,454400],[-998,-202]],[[264721,454198],[3,6571]],[[266337,460966],[35,-6508]],[[203590,460931],[14,-19329],[-709,2],[8,-7373]],[[202903,434231],[-1501,67]],[[201402,434298],[-1280,5]],[[200122,434303],[-1672,-17]],[[198450,434286],[-31,12241],[1170,-39],[16,8015],[-52,3235]],[[205806,446473],[3,-12257]],[[205809,434216],[-2546,-6]],[[203263,434210],[-360,21]],[[188449,452854],[-1678,-35]],[[264721,454198],[-644,35]],[[264077,454233],[-965,-59]],[[263112,454174],[-25,6539]],[[263112,454174],[-326,40]],[[262786,454214],[-1301,-17]],[[261485,454197],[-15,6483]],[[260173,460694],[4,-6538]],[[260177,454156],[-1281,40]],[[258896,454196],[-2,3199],[-392,-3]],[[258502,457392],[252,3279]],[[261485,454197],[-1308,-41]],[[289153,452862],[-334,-22]],[[288819,452840],[-1736,22]],[[287083,452862],[-29,3458],[98,835],[-137,3348]],[[287083,452862],[-115,0]],[[286968,452862],[-1145,0]],[[285823,452862],[55,5249]],[[247487,456473],[432,-1435],[25,-1576]],[[247944,453462],[-2075,28]],[[245869,453490],[1,4871]],[[229364,457786],[-3,-3239]],[[229361,454547],[-545,3]],[[228816,454550],[-973,8]],[[301793,457791],[116,-446]],[[301909,457345],[-116,446]],[[301196,458120],[304,-647]],[[301500,457473],[18,-1676],[-433,-1151]],[[301085,454646],[-839,-2061]],[[300246,452585],[-325,600]],[[298144,453427],[-1041,74]],[[297103,453501],[-1391,88]],[[295712,453589],[-125,17]],[[301909,457345],[403,-2845],[-196,-1500],[475,-1515],[5,-2152]],[[302596,449333],[-234,-1188]],[[302362,448145],[-280,-205],[-97,-1526],[-241,-453]],[[301744,445961],[-218,3011],[-291,-217],[146,1519],[-214,1939],[-82,2433]],[[301500,457473],[293,318]],[[243271,458433],[-1,-8140]],[[243270,450293],[-1301,18]],[[241969,450311],[-1,8093]],[[244574,458384],[-7,-6498]],[[244567,451886],[-1,-1627]],[[244566,450259],[-1296,34]],[[241969,450311],[-1303,-7]],[[240666,450304],[-4,6472]],[[245869,453490],[0,-1629]],[[245869,451861],[-1302,25]],[[285823,452862],[-1027,0]],[[284796,452862],[-109,0]],[[230662,456867],[249,-1941],[-15,-1181]],[[230896,453745],[-107,-598],[-679,14]],[[230110,453161],[-2,1378],[-747,8]],[[198450,434286],[-3153,-25]],[[195297,434261],[-2649,-56]],[[192648,434205],[-132,0]],[[192516,434205],[0,10793]],[[277320,452816],[-6,-2743]],[[277314,450073],[-2528,-13]],[[274786,450060],[0,2383]],[[274786,452443],[526,1090],[1585,4345]],[[258896,454196],[-10,-5792]],[[258886,448404],[-830,-14]],[[258056,448390],[-838,12]],[[257218,448402],[580,2540],[358,3964],[346,2486]],[[232573,456801],[-5,-6485]],[[232568,450316],[-1299,60]],[[231269,450376],[19,2011],[-392,1358]],[[240666,450304],[-1298,5]],[[239368,450309],[1,6445]],[[235476,456764],[0,-6454]],[[235476,450310],[-324,-7]],[[235152,450303],[-969,19]],[[234183,450322],[5,6459]],[[234183,450322],[-1294,1]],[[232889,450323],[-321,-7]],[[238068,456762],[1,-6440]],[[238069,450322],[-327,1]],[[237742,450323],[-971,-4]],[[236771,450319],[-2,6454]],[[236771,450319],[-324,-4]],[[236447,450315],[-971,-5]],[[239368,450309],[-323,7]],[[239045,450316],[-976,6]],[[251326,455701],[-4,-4851]],[[251322,450850],[-1168,-69],[-750,255]],[[249404,451036],[-159,537]],[[249245,451573],[-6,4999]],[[249245,451573],[-1296,-31]],[[247949,451542],[-5,1920]],[[293146,454332],[-66,-9101]],[[293080,445231],[-482,-137],[-384,934],[-288,-777]],[[291926,445251],[-77,1002],[-501,1869],[338,2426],[-911,2622]],[[254614,455702],[218,-1447],[203,-4307],[236,-2529]],[[255271,447419],[-5,-4485]],[[255266,442934],[-738,65],[-9,1649],[-322,-35],[-7,1623],[-327,775]],[[253863,447011],[319,581],[-17,5162],[-953,-145]],[[253212,452609],[68,3128]],[[252304,455724],[-36,-8081]],[[252268,447643],[-1,-1640]],[[252267,446003],[-939,-57]],[[251328,445946],[-6,4904]],[[253212,452609],[3,-4871]],[[253215,447738],[-947,-95]],[[216537,454582],[2,-6501]],[[216539,448081],[-1559,-13]],[[214980,448068],[-230,-4],[4,4972]],[[301744,445961],[-236,-1675],[-533,-779]],[[300975,443507],[-36,3034],[-176,276]],[[300763,446817],[-87,708]],[[300676,447525],[-253,1172]],[[300423,448697],[-177,3888]],[[218154,454507],[9,-6476]],[[218163,448031],[-1570,53]],[[216593,448084],[-54,-3]],[[230110,453161],[-1,-5099]],[[230109,448062],[-977,14]],[[229132,448076],[-318,4]],[[228814,448080],[2,6470]],[[227843,454558],[1,-6473]],[[227844,448085],[-1288,-18]],[[226556,448067],[-8,3240]],[[228814,448080],[-648,1]],[[228166,448081],[-322,4]],[[219766,454469],[6,-6448]],[[219772,448021],[-1243,-2]],[[218529,448019],[-366,12]],[[225260,451281],[0,-3234]],[[225260,448047],[-1272,-16]],[[223988,448031],[-19,0]],[[223969,448031],[-6,6482]],[[221384,454468],[0,-6438]],[[221384,448030],[-1572,-10]],[[219812,448020],[-40,1]],[[222677,454502],[3,-6462]],[[222680,448040],[-1296,-10]],[[223969,448031],[-1262,5]],[[222707,448036],[-27,4]],[[265719,454400],[30,-6681]],[[265749,447719],[-327,-66]],[[265422,447653],[-1337,-250]],[[264085,447403],[-8,6830]],[[294378,453788],[-86,-7125]],[[294292,446663],[-33,-2600]],[[294259,444063],[-1125,-724],[-133,-918]],[[293001,442421],[79,2810]],[[302989,445850],[-269,-1329],[-502,-405],[144,4029]],[[302596,449333],[321,-1188],[408,-370],[764,1511],[-341,4569],[401,-2137],[107,-3240],[-210,-1768],[-1057,-860]],[[262786,454214],[4,-5818]],[[262790,448396],[-1035,-6]],[[261755,448390],[-266,4]],[[261489,448394],[-4,5803]],[[264085,447403],[-109,-15]],[[263976,447388],[-1133,-180]],[[262843,447208],[-53,1188]],[[261489,448394],[-1024,-14]],[[260465,448380],[-349,0]],[[260116,448380],[69,740],[-8,5036]],[[260116,448380],[-774,26]],[[259342,448406],[-456,-2]],[[295712,453589],[-58,-1345],[397,121],[-173,-3103],[-189,-154],[94,-2953]],[[295783,446155],[-481,-2335],[-431,-844]],[[294871,442976],[-365,419],[-214,3268]],[[231269,450376],[205,-1282],[-160,-2131]],[[231314,446963],[-897,12]],[[230417,446975],[1,1083],[-309,4]],[[297103,453501],[5,-4180],[88,63],[182,-3932]],[[297378,445452],[-156,-333]],[[297222,445119],[-108,1174],[-581,-359],[-107,-908]],[[296426,445026],[-541,-412],[-102,1541]],[[298237,453401],[8,-1300],[-328,-15],[-2,-2290],[170,-1515],[-230,-737]],[[297855,447544],[-477,-2092]],[[247949,451542],[-252,-2717]],[[247697,448825],[-205,-1009]],[[247492,447816],[-439,832],[-670,-720],[-514,681]],[[245869,448609],[0,3252]],[[299081,453015],[27,-5279]],[[299108,447736],[6,-1575]],[[299114,446161],[-459,-103],[-560,583],[-240,903]],[[300423,448697],[-95,-430]],[[300328,448267],[-110,207]],[[300218,448474],[-189,-592],[-921,-146]],[[291926,445251],[-301,-1609],[-771,-202],[-6,-1282]],[[290848,442158],[-634,1016],[-245,2281]],[[289969,445455],[47,2798],[-244,1860]],[[160757,452819],[3,-15155]],[[160760,437664],[-2931,-16]],[[157829,437648],[51,2567],[-254,887],[-643,-3073],[-237,34],[-240,-1728],[155,-2199],[-334,193],[-289,1393],[-274,-63],[-470,1938]],[[155294,437597],[-187,3493],[-519,272]],[[154588,441362],[111,941],[-260,2964],[145,1892],[-111,2512],[386,1397],[130,1813]],[[214980,448068],[2,-6472]],[[214982,441596],[-197,8],[0,-3231]],[[214785,438373],[-1546,1]],[[213239,438374],[-74,4047]],[[213165,442421],[1,5662],[-117,1089],[3,3791]],[[213165,442421],[-2040,-25]],[[211125,442396],[-4,4869]],[[211121,447265],[21,5655]],[[188449,452854],[0,-2741],[227,-3238],[-47,-2736],[-188,-2015]],[[188441,442124],[-433,106],[-167,-982],[-444,939]],[[187397,442187],[-88,2092],[-181,-89],[-194,3078],[-2,3038],[-316,2514]],[[211121,447265],[-1901,-23]],[[189737,445042],[-2,-6107]],[[189735,438935],[-608,-2002]],[[189127,436933],[120,1272],[-305,2684],[-250,88]],[[188692,440977],[-251,1147]],[[286968,452862],[88,-6472]],[[287056,446390],[-234,-101],[-57,-1949]],[[286765,444340],[-1655,895]],[[285110,445235],[-170,122]],[[284940,445357],[-144,7505]],[[284940,445357],[-238,-844],[-1781,-169]],[[282921,444344],[-29,8517]],[[187397,442187],[-204,138],[-194,-1813],[-583,5],[-712,-4840]],[[185704,435677],[-852,-1424],[-3463,-6]],[[181389,434247],[1,18500]],[[173097,434253],[-1,-6650],[-636,-11],[-150,-2165]],[[172310,425427],[-25,2929],[-932,15],[0,3231],[-3183,-36],[0,1954],[-1457,-9]],[[166713,433511],[-56,0],[16,19240]],[[173097,452848],[0,-18595]],[[181389,434247],[-14,-16438]],[[181375,417809],[-3390,104],[-1591,99]],[[176394,418012],[-463,-9],[-437,10035],[-1,6208],[-1194,10]],[[174299,434256],[-1202,-3]],[[281230,452862],[9,-7105]],[[281239,445757],[-601,-298]],[[280638,445459],[-179,515],[-1317,-111]],[[279142,445863],[103,6950]],[[282921,444344],[4,-1186]],[[282925,443158],[-1089,-71]],[[281836,443087],[-171,13],[-426,2657]],[[154588,441362],[-303,-18],[-3,1572],[-819,-17]],[[153463,442899],[-268,5083],[-262,812],[123,4043]],[[289969,445455],[-804,-6748]],[[289165,438707],[-411,-130]],[[288754,438577],[180,478],[-59,7138]],[[288875,446193],[-56,6647]],[[288875,446193],[-721,12]],[[288154,446205],[-1098,185]],[[279142,445863],[-1549,12]],[[277593,445875],[-281,-12]],[[277312,445863],[2,4210]],[[164792,452768],[-2,-15096]],[[164790,437672],[-3709,-1]],[[161081,437671],[-321,-7]],[[166713,433511],[-10,-8230],[-71,-9],[-1,-9667],[318,15]],[[166949,415620],[46,-3526],[105,-405],[-51,-2898]],[[167049,408791],[-263,-206]],[[166786,408585],[-506,-709],[-437,-1337],[-205,182],[103,-3534],[-151,-1502]],[[165590,401685],[-468,-1589],[-344,2]],[[164778,400098],[-9,2800]],[[164769,402898],[11,2457]],[[164780,405355],[7,5109]],[[164787,410464],[3,27208]],[[253863,447011],[-4,808],[-643,-83]],[[253216,447736],[-1,2]],[[274786,450060],[0,-6514]],[[274786,443546],[-1348,42]],[[273438,443588],[-1,3973]],[[273437,447561],[3,2574]],[[273440,450135],[1346,2308]],[[245869,448609],[-4,-3244]],[[245865,445365],[-1300,23]],[[244565,445388],[1,4871]],[[249404,451036],[-5,-5898]],[[249399,445138],[-644,-16]],[[248755,445122],[-901,10]],[[247854,445132],[-157,3693]],[[226556,448067],[1,-4023]],[[226557,444044],[-752,-845],[-533,-1]],[[225272,443198],[-12,4849]],[[251328,445946],[-635,7],[1,-814]],[[250694,445139],[-1295,-1]],[[232889,450323],[0,-4862],[165,-1791]],[[233054,443670],[-1388,16]],[[231666,443686],[-257,439],[-95,2838]],[[243270,450293],[6,-6523]],[[243276,443770],[-325,-13]],[[242951,443757],[-980,-19]],[[241971,443738],[-2,6573]],[[237742,450323],[69,-6544]],[[237811,443779],[-1256,-154]],[[236555,443625],[-108,1818],[0,4872]],[[234183,450322],[1,-4860],[144,-1819]],[[234328,443643],[-318,10]],[[234010,443653],[-956,17]],[[235152,450303],[2,-4798],[122,-1872]],[[235276,443633],[-948,10]],[[241971,443738],[-319,-4]],[[241652,443734],[-960,-13]],[[240692,443721],[-26,6583]],[[239045,450316],[54,-6614]],[[239099,443702],[0,-314]],[[239099,443388],[-1288,391]],[[240692,443721],[-320,-6]],[[240372,443715],[-1273,-13]],[[236555,443625],[-1279,8]],[[244565,445388],[-5,-3262]],[[244560,442126],[-322,13]],[[244238,442139],[-104,1623],[-858,8]],[[273437,447561],[-275,-15],[3,-1356],[-539,-11],[-3,-1321],[-265,-4]],[[272358,444854],[-272,1148]],[[272086,446002],[570,2451],[784,1682]],[[277312,445863],[-602,-34],[-476,-2458]],[[276234,443371],[-1448,-19]],[[274786,443352],[0,194]],[[247854,445132],[-28,-825],[-657,-1554],[-5,-2417]],[[247164,440336],[-1778,119]],[[245386,440455],[0,4]],[[245386,440459],[89,1581],[707,640]],[[246182,442680],[363,172],[871,2340],[76,2624]],[[300676,447525],[-94,-1308],[-254,2050]],[[246182,442680],[7,2674],[-324,11]],[[300218,448474],[-108,-2110]],[[300110,446364],[-154,-894],[-847,-110]],[[299109,445360],[5,801]],[[260465,448380],[14,-4389]],[[260479,443991],[3,-1610]],[[260482,442381],[-1131,-19]],[[259351,442362],[0,805]],[[259351,443167],[-9,5239]],[[259351,443167],[-1136,-48],[2,-810]],[[258217,442309],[-163,-2]],[[258054,442307],[104,4029],[-102,2054]],[[258054,442307],[-490,-569],[-231,-2173],[-408,-905]],[[256925,438660],[-7,8808]],[[256918,447468],[300,934]],[[262847,444117],[-1085,-68]],[[261762,444049],[-7,4341]],[[262843,447208],[4,-3091]],[[261762,444049],[-1283,-58]],[[229132,448076],[0,-5330]],[[229132,442746],[-759,-1482],[-211,136]],[[228162,441400],[4,6681]],[[228162,441400],[-318,228]],[[227844,441628],[-642,-1180]],[[227202,440448],[0,1150],[-293,1]],[[226909,441599],[0,2457],[-352,-12]],[[230417,446975],[2,-2973],[320,-2435]],[[230739,441567],[-395,2]],[[230344,441569],[-276,747],[-936,373]],[[229132,442689],[0,57]],[[218529,448019],[-5,-6445]],[[218524,441574],[-1550,26]],[[216974,441600],[-383,10]],[[216591,441610],[2,6474]],[[216591,441610],[-1609,-14]],[[225272,443198],[0,-1617]],[[225272,441581],[-1263,5]],[[224009,441586],[-19,-2]],[[223990,441584],[-2,6447]],[[222707,448036],[24,-6451]],[[222731,441585],[-12,-6462]],[[222719,435123],[-608,-9]],[[222111,435114],[-2224,2]],[[219887,435116],[-75,6454]],[[219812,441570],[0,6450]],[[219812,441570],[-1288,4]],[[223990,441584],[-1259,1]],[[267414,445851],[-697,-80]],[[266717,445771],[-430,-33],[-394,-2264],[-479,-1510]],[[265414,441964],[1,1361]],[[265415,443325],[7,4328]],[[265749,447719],[781,160]],[[266530,447879],[6,1]],[[266536,447880],[30,6]],[[266566,447886],[16,1]],[[266582,447887],[26,6]],[[266608,447893],[806,-2042]],[[255266,442934],[-3,-3134]],[[255263,439800],[-1357,-110],[6,-1614],[-648,-79]],[[253264,437997],[-23,4867]],[[253241,442864],[-25,4872]],[[267414,445851],[546,-1926],[381,1256],[294,-1579],[-868,-836]],[[267767,442766],[-50,-4]],[[267717,442762],[-15,-1]],[[267702,442761],[-769,5],[-213,794]],[[266720,443560],[-3,2211]],[[253241,442864],[-956,-107]],[[252285,442757],[-18,3246]],[[265415,443325],[-1279,-38]],[[264136,443287],[-108,529],[-52,3572]],[[273438,443588],[0,-2864]],[[273438,440724],[-1081,8]],[[272357,440732],[1,4122]],[[299109,445360],[-23,-3357],[-140,-1619]],[[298946,440384],[-436,-420],[-482,288],[-416,-839],[-291,2723]],[[297321,442136],[350,235],[-50,1822],[-299,-180],[-100,1106]],[[256110,445861],[10,-7107]],[[256120,438754],[-157,-435]],[[255963,438319],[-386,-1051],[-314,72]],[[255263,437340],[0,2460]],[[255271,447419],[248,-1016],[591,-542]],[[256925,438660],[-559,918],[-246,-824]],[[256110,445861],[808,1607]],[[264136,443287],[1,-1079]],[[264137,442208],[-1288,-28]],[[262849,442180],[-2,1937]],[[211125,442396],[-24,-802]],[[211101,441594],[-1879,-25]],[[209222,441569],[-2,3183]],[[231666,443686],[163,-2163]],[[231829,441523],[-1090,44]],[[300704,446133],[-85,-2792],[-210,504],[295,2288]],[[300975,443507],[-208,-748],[-4,4058]],[[294871,442976],[348,-1153],[336,-2034],[-121,-1229]],[[295434,438560],[-200,-1187],[-705,-2090],[-626,-1184]],[[293903,434099],[-195,2024],[683,2086],[-173,2860]],[[294218,441069],[41,2994]],[[209222,441569],[-4,-7295]],[[209218,434274],[-2479,-59]],[[206739,434215],[-930,1]],[[300110,446364],[27,-3367],[-179,-1832],[-1042,-1243],[30,462]],[[288154,446205],[-316,-4003]],[[287838,442202],[-487,-795],[-761,-134]],[[286590,441273],[175,3067]],[[297027,438995],[-21,79]],[[297006,439074],[21,-79]],[[297321,442136],[207,-2885],[-531,-113]],[[296997,439138],[-298,3270],[-256,-279],[-17,2897]],[[296997,439138],[9,-64]],[[297027,438995],[-1112,59],[-473,-1600],[-8,1106]],[[288754,438577],[-264,-1321]],[[288490,437256],[-133,485],[-104,2828],[-415,1633]],[[293001,442421],[-13,-2191]],[[292988,440230],[-683,-3303]],[[292305,436927],[-373,1055]],[[291932,437982],[-934,2866]],[[290998,440848],[-150,1310]],[[252285,442757],[26,-6500]],[[252311,436257],[-960,-39],[-2,-3314]],[[251349,432904],[-323,-34]],[[251026,432870],[0,3328],[-319,-13]],[[250707,436185],[-5,3837]],[[250702,440022],[-8,5117]],[[272357,440732],[-1,0]],[[272356,440732],[-569,48],[73,-1359],[-321,-13]],[[271539,439408],[-538,-39]],[[271001,439369],[3,1406],[-263,14],[8,2859]],[[270749,443648],[623,-330],[714,2684]],[[280638,445459],[-3,-3673],[463,-4],[46,-3242]],[[281144,438540],[-1140,433],[-177,-967]],[[279827,438006],[-70,1137],[-624,1848],[-379,-397]],[[278754,440594],[88,2092],[292,-301],[8,3478]],[[278754,440594],[-317,-166]],[[278437,440428],[5,1839],[-538,104],[-216,-927]],[[277688,441444],[-95,4431]],[[277688,441444],[-1,-946],[-351,-263],[-253,-2768]],[[277083,437467],[-849,-19]],[[276234,437448],[0,5923]],[[269692,442196],[16,-2669]],[[269708,439527],[-1391,120]],[[268317,439647],[-18,2604],[-150,11]],[[268149,442262],[561,621],[551,-1528],[431,841]],[[266720,443560],[-15,-4584]],[[266705,438976],[-3,-1623]],[[266702,437353],[-1282,19]],[[265420,437372],[-6,4592]],[[281836,443087],[1,-1968],[-292,-2832]],[[281545,438287],[-401,253]],[[290998,440848],[-384,-1437],[-427,-3445]],[[290187,435966],[-461,1078],[82,1910],[-643,-247]],[[245386,440459],[-830,46],[4,1621]],[[285110,445235],[175,-3415],[441,-1906],[405,-534]],[[286131,439380],[-539,-2233]],[[285592,437147],[-256,304]],[[285336,437451],[-455,-615]],[[284881,436836],[-228,-951],[-463,-356]],[[284190,435529],[-1068,5402],[-197,2227]],[[286590,441273],[-78,-1278]],[[286512,439995],[-381,-615]],[[250702,440022],[-480,-174],[-57,-1257],[-306,11],[0,-1588]],[[249859,437014],[-479,1]],[[249380,437015],[-1,1587],[-610,11]],[[248769,438613],[-14,6509]],[[248769,438613],[-31,-1592],[-323,7]],[[248415,437028],[-1263,36]],[[247152,437064],[12,3272]],[[192516,434205],[-2782,5],[1,4725]],[[262849,442180],[1,-2881]],[[262850,439299],[-1083,-133]],[[261767,439166],[-5,4883]],[[261767,439166],[-322,-1]],[[261445,439165],[-639,38],[-320,532]],[[260486,439735],[-4,2646]],[[226909,441599],[-5,-1596],[-968,-298],[-620,-536],[-31,2413]],[[225285,441582],[-13,-1]],[[293006,440243],[-18,-18]],[[292988,440225],[0,5]],[[294218,441069],[-1212,-826]],[[302428,442673],[372,-1939],[-773,-265],[113,1842],[288,362]],[[271001,439369],[-263,6],[-6,-1405],[-273,-2],[-271,-1168],[-5,-1369]],[[270183,435431],[-459,42]],[[269724,435473],[-16,4054]],[[269692,442196],[936,1652],[121,-200]],[[244238,442139],[-5,-4867]],[[244233,437272],[-641,8]],[[243592,437280],[-640,14]],[[242952,437294],[-1,6463]],[[239099,443388],[2,-6149]],[[239101,437239],[-640,12]],[[238461,437251],[-646,14]],[[237815,437265],[-4,6514]],[[242952,437294],[-653,-17]],[[242299,437277],[-643,-14]],[[241656,437263],[-4,6471]],[[237815,437265],[-627,-98]],[[237188,437167],[-633,7]],[[236555,437174],[0,6451]],[[241656,437263],[-640,-12]],[[241016,437251],[-639,-8]],[[240377,437243],[-5,6472]],[[240377,437243],[-639,-2]],[[239738,437241],[-637,-2]],[[234010,443653],[-2,-6441]],[[234008,437212],[-637,14]],[[233371,437226],[-1383,-2]],[[231988,437224],[-119,577]],[[231869,437801],[88,2412],[-128,1310]],[[235276,443633],[0,-6442]],[[235276,437191],[-632,8]],[[234644,437199],[-636,13]],[[236555,437174],[-638,8]],[[235917,437182],[-641,9]],[[274786,443352],[1,-6623]],[[274787,436729],[-1339,17]],[[273448,436746],[-10,3978]],[[267767,442766],[-50,-4]],[[267702,442761],[447,-499]],[[268317,439647],[3,-645]],[[268320,439002],[-1615,-26]],[[276234,437448],[-271,-1901]],[[275963,435547],[-140,820],[-1037,200]],[[274786,436567],[1,162]],[[265420,437372],[-967,-36]],[[264453,437336],[-1,4876],[-315,-4]],[[259351,442362],[15,-4890],[-65,-5]],[[259301,437467],[-1086,-27]],[[258215,437440],[2,4869]],[[284190,435529],[0,-456]],[[284190,435073],[-1015,-1515],[-180,1961],[-470,731],[-132,1393],[-289,-76],[-14,1365],[-389,-1859]],[[281701,437073],[-156,1214]],[[155294,437597],[-138,-2079],[140,-717],[-207,-2139],[-386,313],[219,-3715],[-7,-13593]],[[154915,415667],[-1334,-12]],[[153581,415655],[-243,1899],[-703,2916],[-128,3411],[386,4769],[132,-280],[309,6364],[-133,874],[262,7291]],[[253264,437997],[-21,-1628]],[[253243,436369],[-932,-112]],[[229132,442689],[-7,-7583]],[[229125,435106],[-7,1]],[[229118,435107],[-1274,15]],[[227844,435122],[0,6506]],[[230344,441569],[400,-3784]],[[230744,437785],[23,-2700]],[[230767,435085],[-405,-538]],[[230362,434547],[0,541],[-1237,18]],[[260486,439735],[-89,-4617]],[[260397,435118],[-729,-71]],[[259668,435047],[-363,781],[-4,1639]],[[213239,438374],[-30,-4080]],[[213209,434294],[-90,-2]],[[213119,434292],[-2032,-1]],[[211087,434291],[14,7303]],[[278437,440428],[-17,-5242]],[[278420,435186],[-185,-772],[-669,-628],[-401,1395],[-70,2246]],[[277095,437427],[-12,40]],[[188692,440977],[-211,-2505],[-449,-762],[-413,553],[-140,-1427]],[[187479,436836],[-928,258],[-847,-1417]],[[258215,437440],[-1290,17]],[[256925,437457],[0,1203]],[[288490,437256],[-135,-732]],[[288355,436524],[-329,-580],[98,-1544],[-739,-1772]],[[287385,432628],[-586,684]],[[286799,433312],[-59,3514],[-251,1237],[23,1932]],[[264453,437336],[-316,-6]],[[264137,437330],[-325,1637],[-962,-17]],[[262850,438950],[0,349]],[[245386,440455],[-115,-1740],[343,-1568],[114,-1545]],[[245728,435602],[-1175,25]],[[244553,435627],[2,1614],[-322,31]],[[216974,441600],[-2,-6469],[57,-810]],[[217029,434321],[-2234,-1]],[[214795,434320],[-10,4053]],[[219887,435116],[2,-6448]],[[219889,428668],[-1545,-2]],[[218344,428666],[-1309,-44]],[[217035,428622],[-6,5699]],[[304069,440803],[121,-1847],[-424,-198],[303,2045]],[[227844,435122],[-1276,-6]],[[226568,435116],[-7,2365]],[[226561,437481],[641,2967]],[[211087,434291],[-534,-10]],[[210553,434281],[-1335,-7]],[[226561,437481],[-533,-2004],[-732,-3606]],[[225296,431871],[-13,3241]],[[225283,435112],[2,6470]],[[225283,435112],[-1211,5]],[[224072,435117],[-74,0]],[[223998,435117],[11,6469]],[[223998,435117],[-1279,6]],[[231869,437801],[-1125,-16]],[[189127,436933],[-680,-1516],[-235,-1306],[316,-2476],[-193,-1469],[-257,341]],[[188078,430507],[-271,1155]],[[187807,431662],[-215,1796],[-113,3378]],[[279827,438006],[-264,-1318],[-1,-4190]],[[279562,432498],[-1143,100]],[[278419,432598],[1,2588]],[[157829,437648],[145,-436],[-428,-4819],[-421,-4013],[145,-2151],[-835,-2813],[-186,-2443]],[[156249,420973],[222,-711],[144,-5038]],[[156615,415224],[-1701,-20],[1,463]],[[293900,433789],[-376,-1707]],[[293524,432082],[-325,588]],[[293199,432670],[123,2992],[-28,2071],[-288,2510]],[[293903,434099],[-3,-310]],[[291932,437982],[-383,-2133]],[[291549,435849],[-417,-3054],[-322,-187]],[[290810,432608],[-554,3399]],[[290256,436007],[-69,-41]],[[272356,440732],[-5,-6697]],[[272351,434035],[-74,-1524],[-634,143]],[[271643,432654],[-114,1382]],[[271529,434036],[10,5372]],[[273448,436746],[0,-2713],[-243,-5]],[[273205,434028],[-854,7]],[[247152,437064],[-4,-1625]],[[247148,435439],[-964,89]],[[246184,435528],[-456,35]],[[245728,435563],[0,39]],[[250707,436185],[-548,-7],[-300,836]],[[293219,434221],[-863,2533]],[[292356,436754],[-51,173]],[[292988,440225],[220,-3323],[11,-2681]],[[286799,433312],[-277,-2753],[-204,-490]],[[286318,430069],[-412,1992]],[[285906,432061],[44,1187],[-292,2181],[-66,1718]],[[255263,437340],[2,-2899]],[[255265,434441],[-1688,-234]],[[253577,434207],[-321,-57]],[[253256,434150],[-13,2219]],[[261445,439165],[-77,-4819]],[[261368,434346],[-859,-55]],[[260509,434291],[-112,827]],[[294555,427007],[-1,231]],[[294554,427238],[1,-231]],[[294554,427873],[-111,3759]],[[294443,431632],[-93,1193],[769,-305],[174,1129],[1072,-46],[376,297],[903,2986],[-441,-2840],[-371,-1388],[292,-372],[379,1927],[532,898],[205,-1022],[552,1761],[82,-626],[-1554,-3633],[-192,472],[-405,-1606],[-231,346],[-428,-1335],[-389,98],[-351,-945],[-238,353],[-532,-1101]],[[269724,435473],[-278,-7],[9,-1349]],[[269455,434117],[-813,50]],[[268642,434167],[-292,19]],[[268350,434186],[-30,4816]],[[256925,437457],[-1,-4840]],[[256924,432617],[-156,-1386],[-315,-5],[3,-1882]],[[256456,429344],[-470,-1]],[[255986,429343],[-23,8976]],[[271529,434036],[-1228,60]],[[270301,434096],[-118,1335]],[[262850,438950],[1,-4900]],[[262851,434050],[1,-1243]],[[262852,432807],[-756,-88]],[[262096,432719],[-729,-14]],[[261367,432705],[1,1641]],[[268350,434186],[-789,-60]],[[267561,434126],[-857,-29]],[[266704,434097],[-2,3256]],[[281701,437073],[-194,-835],[74,-2824],[-363,-706],[-462,-3037],[47,-401]],[[280803,429270],[26,-145]],[[280829,429125],[-1257,-6]],[[279572,429119],[-10,3379]],[[192648,434205],[0,-3425]],[[192648,430780],[-727,406],[-315,-879],[-787,-888],[-261,131],[-420,-1293]],[[190138,428257],[-340,-1865],[-343,-531],[-618,1479],[-69,1144],[-267,-1699],[-177,190]],[[188324,426975],[-246,3532]],[[284190,435073],[-613,-3674]],[[283577,431399],[-884,-2183]],[[282693,429216],[-399,260],[-333,-970],[-479,889]],[[281482,429395],[-679,-125]],[[290256,436007],[-428,-2349]],[[289828,433658],[-466,-1942],[-519,-917]],[[288843,430799],[-280,2543],[218,671],[-426,2511]],[[264137,437330],[-1,-3255],[-160,-7]],[[263976,434068],[-1125,-18]],[[249380,437015],[-1,-3256]],[[249379,433759],[-966,18]],[[248413,433777],[2,3251]],[[214795,434320],[-2,-28]],[[214793,434292],[-1584,2]],[[255986,429343],[-721,8]],[[255265,429351],[0,5090]],[[292587,430897],[-395,1441]],[[292192,432338],[-104,1881],[-539,1630]],[[292356,436754],[-165,-2165],[367,-970],[29,-2722]],[[231988,437224],[4,-1983]],[[231992,435241],[-431,236],[-484,-1310],[-310,918]],[[164787,410464],[-407,-275]],[[164380,410189],[102,1082],[4,3235],[-257,1375],[-23,1352],[-367,544],[-472,2488],[-708,1250],[-456,-2311],[-371,1201],[1,3540],[-743,-22]],[[161090,423923],[22,8573],[-31,5175]],[[161090,423923],[-473,4]],[[160617,423927],[-1428,-350],[-830,-1031],[-549,334],[-407,-1138],[-271,690],[-883,-1459]],[[285336,437451],[-167,-4196],[366,398],[371,-1592]],[[286318,430069],[-895,-2187]],[[285423,427882],[-525,-888],[-165,332]],[[284733,427326],[26,188]],[[284759,427514],[265,1448],[124,3090]],[[285148,432052],[-223,1660],[-44,3124]],[[259668,435047],[-2,-814]],[[259666,434233],[-619,-57],[-1,-1611]],[[259046,432565],[-835,5]],[[258211,432570],[4,4870]],[[226568,435116],[1,-6481]],[[226569,428635],[-1261,-3]],[[225308,428632],[-12,-1]],[[225296,428631],[0,3240]],[[258211,432570],[-314,20]],[[257897,432590],[-973,27]],[[277095,437427],[-6,-9328]],[[277089,428099],[-1270,89]],[[275819,428188],[-27,3364]],[[275792,431552],[-19,2705],[190,1290]],[[278419,432598],[1,-2521],[-655,-4576]],[[277765,425501],[-675,2580]],[[277090,428081],[-1,18]],[[266704,434097],[-266,-3234]],[[266438,430863],[-1015,32]],[[265423,430895],[-1,1872]],[[265422,432767],[-2,4605]],[[265422,432767],[-638,-293],[0,-813],[-644,-37]],[[264140,431624],[-164,2444]],[[243592,437280],[-7,-4878]],[[243585,432402],[-1284,-21]],[[242301,432381],[-2,4896]],[[244553,435627],[-3,-4867],[-104,1]],[[244446,430761],[-862,16]],[[243584,430777],[1,1625]],[[242301,432381],[-1282,-16]],[[241019,432365],[-3,4886]],[[238461,437251],[3,-4896]],[[238464,432355],[-1277,-24]],[[237187,432331],[1,4836]],[[239738,437241],[4,-4883]],[[239742,432358],[-1278,-3]],[[241019,432365],[-1277,-7]],[[233371,437226],[-2,-4810]],[[233369,432416],[-1193,2]],[[232176,432418],[-184,2823]],[[234644,437199],[-3,-4800]],[[234641,432399],[-1272,17]],[[235917,437182],[-1,-4806]],[[235916,432376],[-1275,23]],[[237187,432331],[-1271,45]],[[187807,431662],[-565,-723],[-182,1854],[-717,-2763]],[[186343,430030],[-639,5647]],[[248413,433777],[-2,-4886]],[[248411,428891],[-1277,44]],[[247134,428935],[14,6504]],[[285148,432052],[-398,108],[-1152,-1499]],[[283598,430661],[-21,738]],[[251026,432870],[-1183,-88]],[[249843,432782],[68,968],[-532,9]],[[292970,430541],[-431,-269]],[[292539,430272],[48,625]],[[293219,434221],[-249,-3680]],[[274786,436567],[0,-4189]],[[274786,432378],[-1580,39]],[[273206,432417],[-1,1611]],[[288843,430799],[-376,-510]],[[288467,430289],[-415,-966]],[[288052,429323],[-667,3305]],[[275792,431552],[-1004,-69]],[[274788,431483],[-2,895]],[[253256,434150],[34,-7011],[-625,-15]],[[252665,427124],[-321,-16],[-27,2627],[-962,-80]],[[251355,429655],[-6,3249]],[[290810,432608],[-339,-2310]],[[290471,430298],[-220,-1439],[-616,-2210]],[[289635,426649],[-20,311]],[[289615,426960],[68,3155],[341,1723],[-196,1820]],[[292192,432338],[-162,209],[-116,-3153]],[[291914,429394],[-248,-1212]],[[291666,428182],[-265,1561],[-471,-723]],[[290930,429020],[-459,1278]],[[186343,430030],[156,-1074],[97,-4631]],[[186596,424325],[-109,-154],[38,-2825],[149,-2528],[-96,-2970]],[[186578,415848],[-452,-2000],[-1271,-19],[-3480,53]],[[181375,413882],[0,3927]],[[245728,435563],[-37,-2695],[-356,-1885],[-62,-2388]],[[245273,428595],[-827,2166]],[[246184,435528],[-12,-8061]],[[246172,427467],[-319,63]],[[245853,427530],[-783,-25]],[[245070,427505],[203,1090]],[[247134,428935],[-3,-1615]],[[247131,427320],[-959,147]],[[270301,434096],[8,-6024]],[[270309,428072],[-263,-12],[2,-1850]],[[270048,426210],[-326,-246]],[[269722,425964],[-6,3196],[-215,1864],[-46,3093]],[[232176,432418],[-58,-2196]],[[232118,430222],[-1754,3]],[[230364,430225],[-2,4322]],[[227844,435122],[-1,-6485]],[[227843,428637],[-1271,-2]],[[226572,428635],[-3,0]],[[225296,428631],[-1222,11]],[[224074,428642],[-2,6475]],[[222111,435114],[24,-6994]],[[222135,428120],[-630,262]],[[221505,428382],[-943,281]],[[220562,428663],[-673,5]],[[224074,428642],[-9,-170]],[[224065,428472],[-506,-689],[-761,186]],[[222798,427969],[-663,151]],[[229118,435107],[-7,-6481]],[[229111,428626],[-1268,11]],[[230364,430225],[0,-4857]],[[230364,425368],[-1251,11]],[[229113,425379],[-2,3247]],[[260509,434291],[15,-6500]],[[260524,427791],[-631,-27]],[[259893,427764],[-208,-13],[-19,6482]],[[255265,429351],[-2,-4574]],[[255263,424777],[-1139,-99]],[[254124,424678],[-508,40],[-39,9489]],[[261367,432705],[2,-4891],[-317,-15]],[[261052,427799],[-528,-8]],[[206643,416247],[0,0]],[[210532,425375],[-1578,17],[-6,-9744]],[[208948,415648],[-2259,-10]],[[206689,415638],[-255,-1]],[[206434,415637],[-7,4869]],[[206427,420506],[-4,1627],[310,-3],[6,12085]],[[210553,434281],[-21,-8906]],[[217035,428622],[-272,6]],[[216763,428628],[-1967,-10]],[[214796,428618],[0,968]],[[214796,429586],[-3,4706]],[[201978,423907],[55,-1917],[16,-7759]],[[202049,414231],[-1129,-110]],[[200920,414121],[-15,3215]],[[200905,417336],[-2,2480],[-1118,-27]],[[199785,419789],[29,5936],[320,1082],[-12,7496]],[[201402,434298],[27,-1461],[436,-669],[158,-1783],[-185,-3986],[140,-2492]],[[204199,424684],[-292,-2571],[-164,468],[-589,-930],[-98,692],[-520,-163],[-107,1114],[-339,-604],[-112,1217]],[[203263,434210],[16,-1192],[530,-3756],[390,-4578]],[[199785,419789],[-1878,-31],[-2612,19]],[[195295,419777],[7,8022]],[[195302,427799],[-5,6462]],[[213086,423793],[-320,0]],[[212766,423793],[-1909,-38]],[[210857,423755],[-6,1618],[-319,2]],[[213119,434292],[6,-4709]],[[213125,429583],[-39,-5790]],[[214796,429586],[-1671,-3]],[[195302,427799],[-314,562],[-119,3255],[-531,-10],[-250,-2209],[-269,1600],[-807,-1146],[-299,856]],[[192713,430707],[-65,73]],[[176394,418012],[111,-5116],[-100,-2197],[49,-2636],[-263,-2402],[2,-5633]],[[176193,400028],[-1934,-7]],[[174259,400021],[29,16934],[-17,16297],[28,1004]],[[174259,400021],[-2037,35],[-1236,-1303]],[[170986,398753],[154,2224],[-118,2607],[482,3074],[266,297],[87,1839],[-89,2169],[75,3206],[-204,1482]],[[171639,415651],[671,9776]],[[206427,420506],[-1666,-25]],[[204761,420481],[-562,4203]],[[259893,427764],[3,-1603]],[[259896,426161],[-839,-54]],[[259057,426107],[-11,6458]],[[268642,434167],[-7,-5295]],[[268635,428872],[-365,-115]],[[268270,428757],[-705,-40]],[[267565,428717],[-4,5409]],[[254124,424678],[8,-1609]],[[254132,423069],[-1470,-13]],[[252662,423056],[3,4068]],[[269722,425964],[-798,-95]],[[268924,425869],[-10,2969],[-279,34]],[[267565,428717],[-860,-299]],[[266705,428418],[-211,275],[-56,2170]],[[271643,432654],[-7,-4584]],[[271636,428070],[-1327,2]],[[264140,431624],[-158,-802],[1,-2439]],[[263983,428383],[-165,-1]],[[263818,428382],[0,807],[-964,-2]],[[262854,429187],[-2,3620]],[[273206,432417],[-2,-3235]],[[273204,429182],[-418,-81],[-224,-1339]],[[272562,427762],[-923,-317]],[[271639,427445],[-3,625]],[[249843,432782],[-231,-3232]],[[249612,429550],[-356,-3635],[-528,-731]],[[248728,425184],[-3,2059],[-322,39],[8,1609]],[[289615,426960],[-382,-1335]],[[289233,425625],[-268,2542],[-150,-335],[-348,2457]],[[171639,415651],[-2673,-45],[-2017,14]],[[288052,429323],[-372,-1084]],[[287680,428239],[-781,-2648],[-748,-726]],[[286151,424865],[-265,1102]],[[285886,425967],[-463,1915]],[[274788,431483],[-1,-3963]],[[274787,427520],[-415,-1045]],[[274372,426475],[-540,315]],[[273832,426790],[-154,2375],[-474,17]],[[251355,429655],[-154,-1644],[-415,-1270],[-378,-47]],[[250408,426694],[-162,394],[-9,2476],[-625,-14]],[[262854,429187],[-1,-2904]],[[262853,426283],[-741,-73]],[[262112,426210],[-16,6509]],[[265423,430895],[0,-3262]],[[265423,427633],[-634,-30],[-321,799],[-485,-19]],[[188324,426975],[-114,-600]],[[188210,426375],[-465,-892],[-618,-2134],[-142,896],[-389,80]],[[293524,432082],[-12,-1259],[-325,-351]],[[293187,430472],[-27,1524]],[[293160,431996],[39,674]],[[262112,426210],[-370,-19]],[[261742,426191],[-685,-5]],[[261057,426186],[-5,1613]],[[294555,427007],[-1,231]],[[294554,427873],[-875,-1167]],[[293679,426706],[-79,470]],[[293600,427176],[63,322]],[[293663,427498],[119,2121],[-126,536]],[[293656,430155],[90,1668],[410,856],[287,-1047]],[[257897,432590],[-1,-3261]],[[257896,429329],[-463,33],[-65,-3266]],[[257368,426096],[-903,15]],[[256465,426111],[-9,3233]],[[259057,426107],[-583,-24]],[[258474,426083],[2,2440],[-422,-1],[-158,807]],[[279572,429119],[-482,-6116]],[[279090,423003],[-351,-510],[-158,820],[-661,807],[-155,1381]],[[292539,430272],[83,-964]],[[292622,429308],[-118,-888]],[[292504,428420],[-590,974]],[[233369,432416],[31,-5977]],[[233400,426439],[-1091,87]],[[232309,426526],[-329,3028],[138,668]],[[234641,432399],[38,-6061]],[[234679,426338],[-801,62]],[[233878,426400],[-478,39]],[[235916,432376],[-1,-6117]],[[235915,426259],[-448,10]],[[235467,426269],[-788,69]],[[243584,430777],[5,-4004]],[[243589,426773],[-630,137]],[[242959,426910],[-660,-98]],[[242299,426812],[2,5569]],[[242299,426812],[-476,-61]],[[241823,426751],[-800,-120]],[[241023,426631],[-4,5734]],[[237187,432331],[-2,-6016]],[[237185,426315],[-604,-36]],[[236581,426279],[-666,-20]],[[238464,432355],[-1,-5921]],[[238463,426434],[-606,-50]],[[237857,426384],[-672,-69]],[[239742,432358],[1,-5855]],[[239743,426503],[-772,-67]],[[238971,426436],[-508,-2]],[[241023,426631],[-213,-27]],[[240810,426604],[-1067,-101]],[[284759,427514],[-273,767],[-697,262]],[[283789,428543],[-185,151],[-6,1967]],[[293187,430472],[-271,-1807],[244,3331]],[[195295,419777],[-1,-10466]],[[195294,409311],[0,-3031]],[[195294,406280],[-155,-665],[-2556,-5]],[[192583,405610],[0,136]],[[192583,405746],[-38,1805],[122,2542],[304,1922],[-230,5]],[[192741,412020],[-28,18687]],[[275819,428188],[-81,-1216],[-510,-2450]],[[275228,424522],[-441,-3]],[[274787,424519],[0,3001]],[[282497,422684],[-451,361],[271,1886],[-71,940],[431,2360],[16,985]],[[283789,428543],[-584,-2081],[-708,-3778]],[[192741,412020],[-2481,120]],[[190260,412140],[-95,1613]],[[190165,413753],[-27,14504]],[[266705,428418],[4,-3381]],[[266709,425037],[-283,-22]],[[266426,425015],[-1003,645]],[[265423,425660],[0,1973]],[[292970,430541],[-211,-2553],[-210,-377],[73,1697]],[[245070,427505],[-470,-581],[-146,-1017],[115,-2813],[-151,-420]],[[244418,422674],[-829,4099]],[[293679,426706],[-79,470]],[[293412,427054],[2,252]],[[293414,427306],[-2,-252]],[[293663,427498],[-315,245]],[[293348,427743],[-288,1614]],[[293060,429357],[139,1000],[457,-202]],[[290930,429020],[33,-2516],[-174,-1500],[76,-1477]],[[290865,423527],[-301,-1441],[-241,-93]],[[290323,421993],[-332,1496],[-16,2220],[-340,940]],[[289233,425625],[-418,-2204]],[[288815,423421],[-127,534]],[[288688,423955],[-1008,4284]],[[232309,426526],[155,-1144]],[[232464,425382],[-995,-11]],[[231469,425371],[-1105,-3]],[[291666,428182],[-6,-1402]],[[291660,426780],[-177,-791],[187,-1218],[-446,-2171]],[[291224,422600],[-359,927]],[[252662,423056],[2,-2182]],[[252664,420874],[-322,-1]],[[252342,420873],[-1598,8]],[[250744,420881],[-320,804]],[[250424,421685],[-16,5009]],[[214796,428618],[0,-4795]],[[214796,423823],[-1710,-30]],[[250424,421685],[-946,-94]],[[249478,421591],[-311,-18],[-6,2161],[-580,13]],[[248581,423747],[147,1437]],[[282497,422684],[136,-2142]],[[282633,420542],[-450,-3764]],[[282183,416778],[-753,1928]],[[281430,418706],[-282,1104],[-60,1367]],[[281088,421177],[343,3265],[-239,3445],[290,1508]],[[281088,421177],[-85,-1012],[-408,1094],[-38,-1089],[-480,1549]],[[280077,421719],[157,812],[68,2529],[527,4065]],[[293412,427054],[2,252]],[[293348,427743],[-53,-1237],[-451,497],[216,2354]],[[256465,426111],[5,-1623]],[[256470,424488],[-1207,26]],[[255263,424514],[0,263]],[[292504,428420],[-134,-1704]],[[292370,426716],[-710,64]],[[258474,426083],[-5,-2412]],[[258469,423671],[-888,4]],[[257581,423675],[-2,2417],[-211,4]],[[273832,426790],[-165,-802],[-57,-2450]],[[273610,423538],[-915,163]],[[272695,423701],[15,2450],[-148,1611]],[[263818,428382],[2,-6071],[59,-80]],[[263879,422231],[-1,-5]],[[263878,422226],[-1029,-27]],[[262849,422199],[4,4084]],[[280077,421719],[-106,-1565]],[[279971,420154],[-653,120],[-455,660]],[[278863,420934],[227,2069]],[[248581,423747],[-329,-1227],[-73,-1406],[-363,-2059]],[[247816,419055],[-702,92],[4,1629]],[[247118,420776],[13,6544]],[[268924,425869],[-64,-3813],[-274,83]],[[268586,422139],[-515,160],[-254,1408]],[[267817,423707],[174,1059],[2,2876],[277,1115]],[[267817,423707],[-635,189]],[[267182,423896],[2,1175],[-475,-34]],[[220562,428663],[2,-4872],[-317,6],[0,-1626]],[[220247,422171],[-287,-23]],[[219960,422148],[-1562,-11]],[[218398,422137],[-52,0]],[[218346,422137],[-2,6529]],[[225308,428632],[0,-6478]],[[225308,422154],[-1241,1]],[[224067,422155],[-2,6317]],[[221505,428382],[2,-6212]],[[221507,422170],[-1260,1]],[[218346,422137],[-1522,21]],[[216824,422158],[-54,-2]],[[216770,422156],[-7,6472]],[[216770,422156],[-1974,-24]],[[214796,422132],[0,1691]],[[227843,428637],[0,-6482]],[[227843,422155],[-1261,3]],[[226582,422158],[-8,0]],[[226574,422158],[-2,6477]],[[229113,425379],[-7,-3236]],[[229106,422143],[-1263,12]],[[226574,422158],[-1253,-4]],[[225321,422154],[-13,0]],[[284733,427326],[-651,-856],[-995,-3407],[-367,-2036]],[[282720,421027],[-87,-485]],[[190165,413753],[-530,20],[-2,800],[-457,2165],[60,2009],[-250,2239],[-310,-13],[-357,1411],[-183,1614],[74,2377]],[[224067,422155],[-8,0]],[[224059,422155],[-1261,5]],[[222798,422160],[0,5809]],[[265423,425660],[-341,-1034]],[[265082,424626],[-938,-41],[1,-1904],[-266,-450]],[[222798,422160],[-1257,8]],[[221541,422168],[-34,2]],[[278863,420934],[-360,-3257],[-302,-1293]],[[278201,416384],[-562,1959],[-401,-1171],[-297,844],[-366,-24]],[[276575,417992],[19,1315]],[[276594,419307],[179,811],[290,5227],[-200,1083],[227,1653]],[[288688,423955],[-466,-3821]],[[288222,420134],[-493,-1945]],[[287729,418189],[-773,3320]],[[286956,421509],[-805,3356]],[[276594,419307],[-123,1028],[-749,1490],[-494,2697]],[[271639,427445],[-58,-3551],[-110,18]],[[271471,423912],[-1324,214]],[[270147,424126],[-99,2084]],[[272695,423701],[-15,-2421],[-175,-1661]],[[272505,419619],[-793,133]],[[271712,419752],[19,2733],[-268,50],[8,1377]],[[285886,425967],[-397,-1498],[304,-5190]],[[285793,419279],[-424,-1382]],[[285369,417897],[-35,1119],[-345,857]],[[284989,419873],[-161,1873]],[[284828,421746],[-318,1085],[208,1376],[-107,1918],[122,1201]],[[261057,426186],[8,-3497]],[[261065,422689],[-375,7]],[[260690,422696],[-790,-21]],[[259900,422675],[0,531]],[[259900,423206],[-4,2955]],[[292731,427718],[-75,-1793],[-401,-1051],[179,2726],[297,118]],[[245853,427530],[-15,-6605]],[[245838,420925],[-7,-1698]],[[245831,419227],[-1653,137]],[[244178,419364],[23,898]],[[244201,420262],[217,2412]],[[274787,424519],[3,-1462]],[[274790,423057],[-309,-64]],[[274481,422993],[90,1246],[-199,2236]],[[247118,420776],[-1280,149]],[[284828,421746],[-989,-927],[-267,651],[-693,-2143]],[[282879,419327],[-159,1700]],[[244201,420262],[-1264,158]],[[242937,420420],[3,812]],[[242940,421232],[19,5678]],[[290323,421993],[609,-3619]],[[290932,418374],[-696,-1839]],[[290236,416535],[-114,1664]],[[290122,418199],[-1307,5222]],[[292370,426716],[-184,-1987],[143,-699]],[[292329,424030],[-474,-3179],[-254,-505]],[[291601,420346],[-383,1322],[6,932]],[[242940,421232],[-1109,36]],[[241831,421268],[-6,814]],[[241825,422082],[-2,4669]],[[274481,422993],[82,-1389],[-230,-2518]],[[274333,419086],[-58,-528]],[[274275,418558],[-502,43]],[[273773,418601],[49,4904],[-212,33]],[[241825,422082],[-931,-57]],[[240894,422025],[22,2916],[-106,1663]],[[240894,422025],[-478,-13]],[[240416,422012],[1,804],[-1425,-54]],[[238992,422762],[-21,3674]],[[233878,426400],[61,-5896]],[[233939,420504],[-1043,57]],[[232896,420561],[-164,920],[-268,3901]],[[238992,422762],[-1,-2172]],[[238991,420590],[-1104,-45]],[[237887,420545],[-30,5839]],[[235467,426269],[94,-3438]],[[235561,422831],[-21,-4851]],[[235540,417980],[-1218,74]],[[234322,418054],[-79,2429],[-304,21]],[[190260,412140],[-1086,14]],[[189174,412154],[-1094,-4]],[[188080,412150],[-519,2499],[-397,-2608],[-337,-472],[102,2059],[-351,2220]],[[237887,420545],[-2,-2439]],[[237885,418106],[-1262,69]],[[236623,418175],[8,4609]],[[236631,422784],[-50,3495]],[[270147,424126],[-32,-4045]],[[270115,420081],[-784,127],[-762,580]],[[268569,420788],[17,1351]],[[262849,422199],[1,-795]],[[262850,421404],[-1157,-63]],[[261693,421341],[-3,1349]],[[261690,422690],[52,3501]],[[236631,422784],[-1070,47]],[[261690,422690],[-625,-1]],[[259900,423206],[-1060,-73],[0,-542]],[[258840,422591],[-371,1080]],[[257581,423675],[-3,-4054]],[[257578,419621],[-1106,10]],[[256472,419631],[2,2822]],[[256474,422453],[-4,2035]],[[232896,420561],[7,-54]],[[232903,420507],[-1276,-7]],[[231627,420500],[-157,10]],[[231470,420510],[-1,4861]],[[286956,421509],[-435,-1129],[-728,-1101]],[[266426,425015],[-87,-5114]],[[266339,419901],[-1291,821]],[[265048,420722],[34,3904]],[[210857,423755],[-19,-8095],[-652,-3]],[[210186,415657],[-1238,-9]],[[230364,425368],[0,-4856]],[[230364,420512],[0,-4861]],[[230364,415651],[-953,8]],[[229411,415659],[-308,1]],[[229103,415660],[3,6483]],[[231470,420510],[-1106,2]],[[267401,418295],[-101,-658]],[[267300,417637],[-828,70]],[[266472,417707],[25,2122],[-158,72]],[[267182,423896],[1,-3714],[212,-4],[6,-1883]],[[255263,424514],[-13,-6127]],[[255250,418387],[-5,-4935]],[[255245,413452],[-1128,-58]],[[254117,413394],[15,9675]],[[204761,420481],[44,-3996],[-107,-2111]],[[204698,414374],[-40,-1498]],[[204658,412876],[-515,-984],[-138,-1866]],[[204005,410026],[-269,-196],[-186,2235],[-440,1923],[-526,246]],[[202584,414234],[-535,-3]],[[265048,420722],[-23,-1667]],[[265025,419055],[-1141,245]],[[263884,419300],[-6,2926]],[[276575,417992],[2,-1689],[-338,-983]],[[276239,415320],[-807,668],[-645,-1055]],[[274787,414933],[1,1005]],[[274788,415938],[-1,2668]],[[274787,418606],[3,4451]],[[256474,422453],[-391,-1025],[-571,-2641],[86,-782]],[[255598,418005],[-348,382]],[[292681,417933],[-413,-100],[-60,940],[-392,67],[-407,-1736]],[[291409,417104],[-97,1100]],[[291312,418204],[289,2142]],[[292329,424030],[617,-741],[71,-1974],[-164,-3757],[-172,375]],[[271712,419752],[-260,-1288]],[[271452,418464],[-1312,274]],[[270140,418738],[-25,1343]],[[290122,418199],[-264,-1711],[-318,871],[49,-1505],[-196,-651]],[[289393,415203],[-235,1649]],[[289158,416852],[-265,414],[-399,2752],[-272,116]],[[160617,423927],[81,-1784],[341,-681],[-60,-1870],[-214,-1153]],[[160765,418439],[-392,-946],[-168,-2180],[-363,-1739],[-738,-95],[-16,-1615]],[[159088,411864],[-2484,9]],[[156604,411873],[11,3351]],[[164380,410189],[-1412,-44],[-74,-532],[-534,1856],[-382,-2585]],[[161978,408884],[-186,-741]],[[161792,408143],[-928,5114],[-32,2656],[121,1726],[-188,800]],[[268569,420788],[-30,-2813]],[[268539,417975],[-1138,320]],[[214796,422132],[-1,-6444]],[[214795,415688],[5,-7987]],[[214800,407701],[-2098,-115]],[[212702,407586],[-2,8093],[66,8114]],[[212702,407586],[-980,-40]],[[211722,407546],[-1539,11]],[[210183,407557],[1,3232]],[[210184,410789],[2,4868]],[[249478,421591],[4,-3680]],[[249482,417911],[-1008,385],[-87,-648]],[[248387,417648],[-390,-862],[-421,-126],[-193,1284]],[[247383,417944],[433,1111]],[[273773,418601],[-955,197]],[[272818,418798],[-313,821]],[[258840,422591],[0,-2941]],[[258840,419650],[1,-653]],[[258841,418997],[-1263,-40]],[[257578,418957],[0,664]],[[291312,418204],[-380,170]],[[259900,422675],[0,-2968]],[[259900,419707],[-1060,-57]],[[274787,418606],[-454,480]],[[254117,413394],[-1461,-14]],[[252656,413380],[8,7494]],[[240416,422012],[-1,-5687]],[[240415,416325],[-1409,-78]],[[239006,416247],[-15,4343]],[[236623,418175],[-5,-1894]],[[236618,416281],[-1077,80]],[[235541,416361],[-1,1619]],[[260690,422696],[8,-5628]],[[260698,417068],[-1,-2446]],[[260697,414622],[-797,-41]],[[259900,414581],[0,5126]],[[261693,421341],[13,-4279]],[[261706,417062],[-1008,6]],[[256472,419631],[5,-4875]],[[256477,414756],[-917,-10]],[[255560,414746],[38,3259]],[[263884,419300],[17,-5165]],[[263901,414135],[-164,-22]],[[263737,414113],[-912,-28]],[[262825,414085],[5,1641]],[[262830,415726],[20,5678]],[[225321,422154],[-1,-6473]],[[225320,415681],[-642,-7]],[[224678,415674],[-618,2]],[[224060,415676],[-1,6479]],[[224060,415676],[-950,-1]],[[223110,415675],[-312,-4]],[[222798,415671],[0,6489]],[[226582,422158],[-2,-6488]],[[226580,415670],[-306,0]],[[226274,415670],[-954,11]],[[216824,422158],[-6,-6476]],[[216818,415682],[-239,-3]],[[216579,415679],[-1784,9]],[[221541,422168],[6,-6503]],[[221547,415665],[-1531,-4]],[[220016,415661],[-44,2]],[[219972,415663],[-12,6485]],[[227843,422155],[-2,-6487]],[[227841,415668],[-1261,2]],[[229103,415660],[-1262,8]],[[219972,415663],[-1520,8]],[[218452,415671],[-55,3]],[[218397,415674],[1,6463]],[[218397,415674],[-1579,8]],[[222798,415671],[-1243,-6]],[[221555,415665],[-8,0]],[[241831,421268],[8,-4944]],[[241839,416324],[-1400,2]],[[240439,416326],[-24,-1]],[[284989,419873],[-135,-1158],[-365,-437],[-280,-1344]],[[284209,416934],[-135,-749],[-607,-656],[-188,-940]],[[283279,414589],[-400,4738]],[[250744,420881],[10,-4341]],[[250754,416540],[4,-2437],[-207,-17]],[[250551,414086],[-740,300],[-264,801]],[[249547,415187],[-65,2724]],[[281430,418706],[-459,-6339],[-226,-1900]],[[280745,410467],[-1192,5]],[[279553,410472],[143,1891],[-17,4331],[292,3460]],[[287729,418189],[-193,-524],[-134,-4476],[-402,-2749]],[[287000,410440],[-272,4]],[[286728,410444],[-19,0]],[[286709,410444],[-635,4131],[-197,2070],[-508,1252]],[[262830,415726],[-1089,-10]],[[261741,415716],[-35,1346]],[[242937,420420],[-5,-5730]],[[242932,414690],[-935,53]],[[241997,414743],[-158,1581]],[[283279,414589],[33,-4170]],[[283312,410419],[-28,0]],[[283284,410419],[-1756,39]],[[281528,410458],[270,1945],[385,4375]],[[279553,410472],[-342,-1]],[[279211,410471],[-1285,-23]],[[277926,410448],[-70,2460],[345,3476]],[[252342,420873],[-474,-4214]],[[251868,416659],[-1114,-119]],[[247383,417944],[-442,-2538]],[[246941,415406],[-262,-107],[-245,2263],[-607,14]],[[245827,417576],[4,1651]],[[252656,413380],[-31,-1625]],[[252625,411755],[-759,5]],[[251866,411760],[2,4899]],[[270140,418738],[-33,-4033],[-98,-689]],[[270009,414016],[-637,319]],[[269372,414335],[-891,173]],[[268481,414508],[58,3467]],[[266472,417707],[-35,-1886]],[[266437,415821],[-1449,559]],[[264988,416380],[37,2675]],[[239006,416247],[0,-1218]],[[239006,415029],[-1115,-150]],[[237891,414879],[-6,3227]],[[206434,415637],[-263,-1610]],[[206171,414027],[-698,-17]],[[205473,414010],[-2,411],[-773,-47]],[[231627,420500],[-1,-4856]],[[231626,415644],[-637,4]],[[230989,415648],[-625,3]],[[232903,420507],[433,-2548],[-67,-1277],[314,-1050]],[[233583,415632],[-88,0]],[[233495,415632],[-1249,8]],[[232246,415640],[-620,4]],[[234322,418054],[138,-4323]],[[234460,413731],[-255,-671],[-622,2572]],[[244178,419364],[30,-3036],[165,-1716]],[[244373,414612],[-1128,55]],[[243245,414667],[-313,23]],[[288510,412605],[38,23]],[[288548,412628],[-38,-23]],[[289158,416852],[-454,-2263],[-196,-1985]],[[288508,412604],[-541,-2144]],[[287967,410460],[-967,-20]],[[286709,410444],[-918,-3]],[[285791,410441],[-606,-7]],[[285185,410434],[-592,-13]],[[284593,410421],[124,2546],[-179,2926],[-329,1041]],[[200905,417336],[-779,-15],[-6,-3272],[-314,51],[0,-1664],[-1412,-62],[0,-2430],[-1717,-17],[1,-808],[-1384,192]],[[272795,414724],[-423,-10],[-218,-1046],[-319,59],[-5,-1092],[-317,67]],[[271513,412702],[-96,1662],[35,4100]],[[272818,418798],[-23,-4074]],[[259900,414581],[-209,-306]],[[259691,414275],[-842,-20]],[[258849,414255],[-8,4742]],[[257578,418957],[2,-4762]],[[257580,414195],[0,-1080]],[[257580,413115],[-876,34]],[[256704,413149],[-228,11],[1,1596]],[[245827,417576],[-8,-4829]],[[245819,412747],[1,-1636],[-1253,28]],[[244567,411139],[-193,1581],[-1,1892]],[[264988,416380],[-41,-2986]],[[264947,413394],[-298,807],[-748,-66]],[[274788,415938],[-600,317]],[[274188,416255],[87,2303]],[[291409,417104],[453,-5672],[-67,-3974]],[[291795,407458],[-8,-68]],[[291787,407390],[-674,1374],[-215,1839]],[[290898,410603],[-464,1138],[-81,1797],[-341,1920]],[[290012,415458],[-13,48]],[[289999,415506],[237,1029]],[[258849,414255],[-241,-38]],[[258608,414217],[-1028,-22]],[[274188,416255],[-53,-2244],[-194,-1196]],[[273941,412815],[-1155,356]],[[272786,413171],[9,1553]],[[292681,417933],[179,-418],[-159,-5398],[-46,2228],[-255,-3465],[103,-763],[-505,-2575],[-203,-84]],[[271513,412702],[-9,-1621]],[[271504,411081],[-1056,287]],[[270448,411368],[-261,927],[22,1647],[-200,74]],[[281528,410458],[-678,3]],[[280850,410461],[-105,6]],[[249547,415187],[-334,-14],[-10,-1089],[-815,-275]],[[248388,413809],[-1,3839]],[[161792,408143],[-202,-1301],[-433,-149],[-283,-3312],[-608,-862]],[[160266,402519],[-794,178]],[[159472,402697],[52,1461]],[[159524,404158],[105,2864],[-396,-48],[-8,2485],[153,592],[-290,1813]],[[255560,414746],[183,-1655],[-78,-4759]],[[255665,408332],[-417,-11]],[[255248,408321],[-3,5131]],[[277926,410448],[-234,-9]],[[277692,410439],[-800,-6]],[[276892,410433],[-426,0]],[[276466,410433],[-22,3774],[-205,1113]],[[268481,414508],[-116,-2693]],[[268365,411815],[-1169,326]],[[267196,412141],[-43,3579],[147,1917]],[[289999,415506],[-235,-1942],[-206,-350]],[[289558,413214],[-165,1989]],[[237891,414879],[8,-3256]],[[237899,411623],[-1244,79]],[[236655,411702],[-37,4579]],[[235541,416361],[7,-4088]],[[235548,412273],[-762,19]],[[234786,412292],[-326,1439]],[[181375,413882],[-2,-6764]],[[181373,407118],[-6,-16111]],[[181367,391007],[-2649,0]],[[178718,391007],[-2525,9021]],[[248388,413809],[0,-545]],[[248388,413264],[-1641,72]],[[246747,413336],[194,2070]],[[267196,412141],[-24,-2179]],[[267172,409962],[-1117,399]],[[266055,410361],[17,1044]],[[266072,411405],[162,-81],[203,4497]],[[246747,413336],[32,-696]],[[246779,412640],[-960,107]],[[200920,414121],[-228,4],[0,-10295]],[[200692,403830],[-884,2]],[[199808,403832],[-4513,9]],[[195295,403841],[-1,2439]],[[261741,415716],[-54,-4023]],[[261687,411693],[-224,-17]],[[261463,411676],[-823,-18]],[[260640,411658],[57,2964]],[[284593,410421],[-604,-5]],[[283989,410416],[-677,3]],[[289558,413214],[-576,-1173]],[[288982,412041],[-434,587]],[[288510,412605],[-2,-1]],[[251866,411760],[-181,-2587]],[[251685,409173],[-598,20]],[[251087,409193],[-316,20],[-8,2709],[-211,269]],[[250552,412191],[-1,1895]],[[206689,415638],[-255,-1612]],[[206434,414026],[-263,1]],[[241997,414743],[-31,-6459]],[[241966,408284],[-4,0]],[[241962,408284],[-1090,93]],[[240872,408377],[8,1624],[-470,45]],[[240410,410046],[29,6280]],[[266072,411405],[-502,925],[-631,518]],[[264939,412848],[8,546]],[[240410,410046],[-1140,66]],[[239270,410112],[-273,4],[9,4913]],[[236655,411702],[-1,-802]],[[236654,410900],[-1104,25]],[[235550,410925],[-2,1348]],[[274786,410447],[-874,-18]],[[273912,410429],[29,2386]],[[274787,414933],[-1,-4486]],[[276466,410433],[-1406,8]],[[275060,410441],[-274,6]],[[188080,412150],[153,-1356],[-371,-848],[15,-4365],[-94,-1440],[-489,-25],[-259,-1247]],[[187035,402869],[-501,282],[-67,4177],[-5094,-210]],[[262825,414085],[-5,-3544]],[[262820,410541],[-613,-223]],[[262207,410318],[-419,17],[-101,1358]],[[216579,415679],[-7,-8084]],[[216572,407595],[-1772,-3]],[[214800,407592],[0,109]],[[218452,415671],[-5,-8082]],[[218447,407589],[-1806,6]],[[216641,407595],[-69,0]],[[156604,411873],[136,-4011]],[[156740,407862],[1,-963],[-483,-513],[-37,-1772],[224,-3190],[-238,-1152],[-36,-1899],[296,-1404],[110,-1803],[361,-938]],[[156938,394228],[-728,40],[-164,-807],[-645,-63],[-455,-695]],[[154946,392703],[-541,2802],[109,2093],[-387,5926],[151,3427],[-35,2229],[-193,3368],[-469,3107]],[[226274,415670],[0,-6485]],[[226274,409185],[0,-1616]],[[226274,407569],[-1548,10]],[[224726,407579],[-50,3]],[[224676,407582],[2,8092]],[[224676,407582],[-1503,7]],[[223173,407589],[-60,1]],[[223113,407590],[-3,8085]],[[227841,415668],[2,-6478]],[[227843,409190],[-1569,-5]],[[229411,415659],[-2,-8099]],[[229409,407560],[-425,-1]],[[228984,407559],[-1141,12]],[[227843,407571],[0,1619]],[[220016,415661],[-7,-8093]],[[220009,407568],[-1504,21]],[[218505,407589],[-58,0]],[[170986,398753],[-248,-368]],[[170738,398385],[-2476,19]],[[168262,398404],[-1,696],[-1014,5147],[112,6217],[-310,-1673]],[[221555,415665],[-8,-8086]],[[221547,407579],[-1486,-3]],[[220061,407576],[-52,-8]],[[223113,407590],[-1493,-13]],[[221620,407577],[-73,2]],[[230989,415648],[1,-8092]],[[230990,407556],[-955,2]],[[230035,407558],[-626,2]],[[210184,410789],[-3282,6]],[[206902,410795],[415,544],[-67,968],[390,100],[54,1353],[-366,-17],[-164,-1868],[-731,-133]],[[206433,411742],[1,2284]],[[233495,415632],[0,-6462]],[[233495,409170],[-625,0]],[[232870,409170],[-626,1]],[[232244,409171],[2,6469]],[[232244,409171],[-1,-1611],[-687,-6]],[[231556,407554],[-566,2]],[[234786,412292],[-21,-1747],[-200,349],[-276,-2272]],[[234289,408622],[-168,541],[-626,7]],[[290898,410603],[-392,-2265]],[[290506,408338],[-409,2276],[-302,2865]],[[289795,413479],[217,1979]],[[250552,412191],[-498,-1356],[-386,-1884],[4,-2170]],[[249672,406781],[-468,-24]],[[249204,406757],[-626,-23]],[[248578,406734],[-164,3648],[-26,2882]],[[239270,410112],[-32,-1636]],[[239238,408476],[-1337,-79]],[[237901,408397],[-2,3226]],[[243245,414667],[-18,-5394]],[[243227,409273],[-942,82],[-5,-1094],[-314,23]],[[256704,413149],[-10,-4875]],[[256694,408274],[-518,44]],[[256176,408318],[-511,14]],[[272786,413171],[-213,31],[-15,-3018],[100,-1891]],[[272658,408293],[-850,-351]],[[271808,407942],[-304,3139]],[[244567,411139],[169,-1392]],[[244736,409747],[-1144,48],[2,-537]],[[243594,409258],[-367,15]],[[260640,411658],[-101,-1641]],[[260539,410017],[-888,-24]],[[259651,409993],[40,4282]],[[269372,414335],[-25,-1734],[207,-78],[64,-3315]],[[269618,409208],[-318,122],[-21,-1093],[-338,107],[-318,-1007]],[[268623,407337],[-310,141],[52,4337]],[[205473,414010],[-1,-3087]],[[205472,410923],[-407,494],[-407,1459]],[[270448,411368],[146,-862],[-65,-3237]],[[270529,407269],[-311,106]],[[270218,407375],[-615,749],[15,1084]],[[259651,409993],[-1,-1095]],[[259650,408898],[-829,-88]],[[258821,408810],[-213,-26]],[[258608,408784],[0,5433]],[[202584,414234],[137,-2937],[562,-2151],[-209,-2932],[145,-2132]],[[203219,404082],[-612,-330]],[[202607,403752],[-1915,78]],[[204005,410026],[367,-1169],[-102,-1326]],[[204270,407531],[-525,-3718],[-329,268]],[[203416,404081],[-197,1]],[[258608,408784],[-389,-585],[-532,8]],[[257687,408207],[-86,542],[-21,4366]],[[264939,412848],[-109,-227],[-59,-4847]],[[264771,407774],[-700,215]],[[264071,407989],[-317,29]],[[263754,408018],[-17,6095]],[[263754,408018],[1,-415],[-936,-22]],[[262819,407581],[1,2960]],[[206433,411742],[-1,-3288]],[[206432,408454],[13,-902]],[[206445,407552],[-516,-5958],[-264,-2165]],[[205665,399429],[-5,0]],[[205660,399429],[-187,-2],[-3,8128]],[[205470,407555],[2,3368]],[[206902,410795],[-81,-2163],[-166,813],[-223,-991]],[[290506,408338],[-301,-1739]],[[290205,406599],[-214,1001]],[[289991,407600],[-385,1833],[-352,446],[-281,1742]],[[288973,411621],[822,1858]],[[255248,408321],[1,-2424]],[[255249,405897],[-1195,78]],[[254054,405975],[-16,3810]],[[254038,409785],[79,3609]],[[254038,409785],[-271,-622],[-1138,-19]],[[252629,409144],[-4,2611]],[[248578,406734],[-634,-33]],[[247944,406701],[-412,-2]],[[247532,406699],[3,2165],[-202,556],[5,1619],[-635,684]],[[246703,411723],[76,917]],[[273912,410429],[-309,-2118]],[[273603,408311],[-264,-1244]],[[273339,407067],[6,599],[-687,627]],[[257687,408207],[-84,-2441]],[[257603,405766],[-705,60]],[[256898,405826],[-210,8],[6,2440]],[[205470,407555],[-1200,-24]],[[266055,410361],[-47,-3102]],[[266008,407259],[-855,352]],[[265153,407611],[-382,163]],[[246703,411723],[-131,-1726],[182,-3269]],[[246754,406728],[-91,-2345]],[[246663,404383],[-901,73]],[[245762,404456],[-253,772],[-419,2922]],[[245090,408150],[-354,1597]],[[288652,406259],[12,7]],[[288664,406266],[-12,-7]],[[288613,408309],[-8,431]],[[288605,408740],[8,-431]],[[288982,412041],[-534,-3559],[147,-1016],[-73,-1880],[204,-1805]],[[288726,403781],[-376,-1332],[-304,88]],[[288046,402537],[-18,1506]],[[288028,404043],[-61,6417]],[[251087,409193],[0,-5735],[-318,51]],[[250769,403509],[-1090,4],[-7,3268]],[[235550,410925],[3,-4036]],[[235553,406889],[-1398,54]],[[234155,406943],[134,1679]],[[192583,405746],[-2934,11],[-153,2686],[-322,1688]],[[189174,410131],[0,2023]],[[189174,410131],[2,-4419],[-151,2],[5,-8099]],[[189030,397615],[-1545,13],[-446,230]],[[187039,397858],[-4,5011]],[[268623,407337],[-26,-1604]],[[268597,405733],[-717,219],[40,495],[-788,179]],[[267132,406626],[40,3336]],[[159524,404158],[-693,579],[2,-532],[-1674,-53]],[[157159,404152],[10,3693],[-429,17]],[[252629,409144],[5,-3807]],[[252634,405337],[-317,9],[-373,2453],[-254,17],[-5,1357]],[[262207,410318],[-5,-3507]],[[262202,406811],[-729,-13]],[[261473,406798],[-10,4878]],[[261473,406798],[1,-1346]],[[261474,405452],[-925,-9]],[[260549,405443],[-10,4574]],[[247532,406699],[-778,29]],[[237901,408397],[-2,-1616]],[[237899,406781],[-1253,49]],[[236646,406830],[8,4070]],[[289029,404123],[-16,44]],[[289013,404167],[16,-44]],[[289991,407600],[-61,-2065],[-434,1890],[-494,-3194]],[[289002,404231],[-350,2028]],[[288664,406266],[-51,2043]],[[288605,408740],[368,2881]],[[164780,405355],[-1400,-14],[-152,1284],[-273,169],[-234,-1182],[-772,-1245]],[[161949,404367],[29,4517]],[[271808,407942],[-352,-103],[16,-1873],[-379,-570]],[[271093,405396],[-587,184],[23,1689]],[[236646,406830],[-5,-1350]],[[236641,405480],[-1087,27]],[[235554,405507],[-1,1382]],[[210183,407557],[-20,1]],[[210163,407558],[-2636,-8]],[[207527,407550],[-1082,2]],[[168262,398404],[-491,-23],[-238,-2422],[2,-1713],[314,16],[-14,-8144],[-697,1]],[[167138,386119],[-481,2256]],[[166657,388375],[-56,3727],[-158,-52],[-40,4122],[307,670],[-3,1728],[-666,42]],[[166041,398612],[-32,2040],[-419,1033]],[[165590,401685],[652,1616],[544,5284]],[[291787,407390],[22,-3591],[-686,-1401]],[[291123,402398],[-572,643]],[[290551,403041],[14,1878],[-360,1680]],[[262819,407581],[-2,-849]],[[262817,406732],[-615,79]],[[283284,410419],[-281,-1862],[-298,-5500]],[[282705,403057],[-115,-74]],[[282590,402983],[-298,3217]],[[282292,406200],[-167,1078],[132,1025],[-513,247]],[[281744,408550],[-440,1436],[-237,-1383],[-192,274]],[[280875,408877],[-25,1584]],[[280875,408877],[-278,-307],[-96,-1936]],[[280501,406634],[-526,344]],[[279975,406978],[-386,1375],[-475,-3170],[-283,769]],[[278831,405952],[380,4519]],[[278831,405952],[-568,-2833]],[[278263,403119],[-600,-2268]],[[277663,400851],[29,9588]],[[288028,404043],[-186,-69]],[[287842,403974],[-578,294],[198,3146],[-296,-282]],[[287166,407132],[-438,3312]],[[276892,410433],[-365,-5307]],[[276527,405126],[-123,314]],[[276404,405440],[-598,2940],[-675,502]],[[275131,408882],[-71,1559]],[[277663,400851],[0,-206]],[[277663,400645],[-557,1423],[-342,-760]],[[276764,401308],[-239,1284]],[[276525,402592],[2,2534]],[[287166,407132],[-74,-2014],[-419,-1266],[83,1879],[-379,-1384]],[[286377,404347],[-194,1933],[-292,889],[-100,3272]],[[275131,408882],[-285,-1379],[11,-1744]],[[274857,405759],[-140,-754]],[[274717,405005],[-207,396]],[[274510,405401],[-283,562],[-368,2260],[-256,88]],[[286377,404347],[69,-1032],[-251,-2455],[-293,639]],[[285902,401499],[0,2434],[-506,6],[2,-1757],[256,-747]],[[285654,401435],[-221,-443]],[[285433,400992],[-513,2543]],[[284920,403535],[-27,1753],[292,5146]],[[284920,403535],[-797,69]],[[284123,403604],[171,2562],[-558,2377],[253,1873]],[[284123,403604],[-2,-9]],[[284121,403595],[-805,-2420]],[[283316,401175],[-301,1528],[-310,354]],[[267132,406626],[-296,-2586]],[[266836,404040],[-607,25]],[[266229,404065],[40,3088],[-261,106]],[[192583,405610],[37,-824],[-294,-4892],[-129,-5401],[227,-2018],[156,-4769]],[[192580,387706],[-3568,0],[0,190]],[[189012,387896],[18,9719]],[[240872,408377],[-43,-5375]],[[240829,403002],[-231,408],[-164,-2184]],[[240434,401226],[-712,2930]],[[239722,404156],[-345,981],[-139,3339]],[[260549,405443],[-153,-1911]],[[260396,403532],[-746,-50]],[[259650,403482],[0,5416]],[[281744,408550],[-325,-480],[-251,-3772]],[[281168,404298],[-330,1392]],[[280838,405690],[-337,944]],[[245090,408150],[-786,-2743],[61,-2460]],[[244365,402947],[-779,381]],[[243586,403328],[8,5930]],[[254054,405975],[-143,-1905]],[[253911,404070],[-1278,-83]],[[252633,403987],[1,1350]],[[243586,403328],[-1650,161]],[[241936,403489],[26,4795]],[[270218,407375],[-23,-1679],[-315,122],[-26,-1651]],[[269854,404167],[-626,216],[-9,-490],[-644,-25]],[[268575,403868],[22,1865]],[[227843,407571],[-4,-4859]],[[227839,402712],[-1559,8]],[[226280,402720],[-6,4849]],[[232870,409170],[-17,-4354]],[[232853,404816],[-54,-3776]],[[232799,401040],[-1242,6]],[[231557,401046],[-1,6508]],[[234155,406943],[373,-2131]],[[234528,404812],[-590,7]],[[233938,404819],[-1085,-3]],[[252633,403987],[0,-2969]],[[252633,401018],[-934,22]],[[251699,401040],[-931,31]],[[250768,401071],[1,2438]],[[279975,406978],[-539,-3797],[-360,-1741]],[[279076,401440],[-431,1393],[-382,286]],[[273339,407067],[-230,-1523]],[[273109,405544],[-695,-2159]],[[272414,403385],[-195,1248],[-314,-1223],[-55,-1445],[-293,114],[-131,-1044]],[[271426,401035],[10,998],[-367,904],[24,2459]],[[276404,405440],[-240,-950],[-479,-156]],[[275685,404334],[-828,1425]],[[259650,403482],[-372,-60]],[[259278,403422],[-462,-46]],[[258816,403376],[5,5434]],[[161949,404367],[-300,-279],[-424,-2782],[0,-3647]],[[161225,397659],[-377,-706]],[[160848,396953],[-364,-450],[-89,-981],[-129,6997]],[[258816,403376],[-362,-36]],[[258454,403340],[-695,148]],[[257759,403488],[-4,2281],[-152,-3]],[[282292,406200],[-394,-2353],[-185,-1907]],[[281713,401940],[-545,2358]],[[239722,404156],[-202,524],[-148,-1562],[-299,-404],[-194,-1443],[-195,1194]],[[238684,402465],[-29,-1189],[-453,359],[-301,-766]],[[237901,400869],[-2,5912]],[[241936,403489],[-12,-1886]],[[241924,401603],[-322,43]],[[241602,401646],[-773,1356]],[[256176,408318],[-109,-1613],[-6,-4868]],[[256061,401837],[-1014,8]],[[255047,401845],[202,1648],[0,2404]],[[256898,405826],[-7,-2441],[-310,7],[-2,-3249]],[[256579,400143],[-519,70]],[[256060,400213],[1,1624]],[[274510,405401],[-752,-2906]],[[273758,402495],[-136,1718],[-196,-664]],[[273426,403549],[-49,2099],[-268,-104]],[[246360,401187],[-1283,58],[-7,-1638],[-209,11]],[[244861,399618],[-414,49]],[[244447,399667],[-82,3280]],[[245762,404456],[468,-1904],[130,-1365]],[[264071,407989],[93,-711],[-59,-4822]],[[264105,402456],[-1299,241]],[[262806,402697],[11,4035]],[[265153,407611],[-83,-5848]],[[265070,401763],[-704,293]],[[264366,402056],[-261,400]],[[157159,404152],[-103,-1292],[316,-1811],[516,-796],[-42,-2231],[424,-2417]],[[158270,395605],[-153,-1117]],[[158117,394488],[-193,-2961],[-454,-703]],[[157470,390824],[-532,3404]],[[214800,407592],[8,-8099]],[[214808,399493],[2,-1603]],[[214810,397890],[-3111,-176]],[[211699,397714],[23,9832]],[[289145,403438],[-116,685]],[[289013,404167],[-11,64]],[[290551,403041],[-150,-2723]],[[290401,400318],[-713,1073],[-543,2047]],[[223173,407589],[-8,-8099]],[[223165,399490],[-1516,-10]],[[221649,399480],[-38,0]],[[221611,399480],[9,8097]],[[265463,401619],[-346,126]],[[265117,401745],[-47,18]],[[266229,404065],[-541,-2162],[-225,-284]],[[216641,407595],[-7,-8065]],[[216634,399530],[-241,-6]],[[216393,399524],[-1585,-31]],[[218505,407589],[-3,-8092]],[[218502,399497],[-253,0]],[[218249,399497],[-1615,33]],[[224726,407579],[-8,-6473]],[[224718,401106],[0,-1622]],[[224718,399484],[-1525,8]],[[223193,399492],[-28,-2]],[[220061,407576],[-8,-8104]],[[220053,399472],[-1551,25]],[[228984,407559],[-7,-6447]],[[228977,401112],[-5,-1634]],[[228972,399478],[-1137,-7]],[[227835,399471],[4,3241]],[[226280,402720],[-2,-1625]],[[226278,401095],[-1560,11]],[[221611,399480],[-1512,-4]],[[220099,399476],[-46,-4]],[[230035,407558],[-404,-3030],[469,-4113],[472,-186]],[[230572,400229],[-5,-2410],[-307,8]],[[230260,397827],[0,542],[-975,290],[5,2435],[-313,18]],[[207527,407550],[-7,-8123]],[[207520,399427],[-1032,5]],[[206488,399432],[-823,-3]],[[210163,407558],[-15,-13022],[-936,36]],[[209212,394572],[12,4830],[-1704,25]],[[231557,401046],[-18,-1625]],[[231539,399421],[-119,1200],[-442,280],[-406,-672]],[[211699,397714],[-28,-7915]],[[211671,389799],[1,-1621],[-925,-166]],[[210747,388012],[-1530,110]],[[209217,388122],[-5,6450]],[[205660,399429],[4,-8052]],[[205664,391377],[-1785,-67]],[[203879,391310],[176,2110],[-338,2530],[-236,-27],[-218,2136]],[[203263,398059],[20,4732],[133,1290]],[[271426,401035],[-87,-662]],[[271339,400373],[-1426,434]],[[269913,400807],[-59,3360]],[[187039,397858],[-587,-3354],[17,-2560],[-254,-957],[-384,92],[-188,-2027]],[[185643,389052],[-4276,11]],[[181367,389063],[0,1944]],[[280838,405690],[20,-2093],[-220,-1797],[43,-1668],[-291,-1468]],[[280390,398664],[-1091,2060],[-223,716]],[[235554,405507],[-2,-5521]],[[235552,399986],[-482,732]],[[235070,400718],[-348,1876],[57,1415],[-251,803]],[[262806,402697],[-687,37]],[[262119,402734],[-424,20],[-218,-745]],[[261477,402009],[-3,3443]],[[237901,400869],[-183,146],[-783,-1330]],[[236935,399685],[-299,1185]],[[236636,400870],[5,4610]],[[250768,401071],[-307,-8],[0,-3525]],[[250461,397538],[-935,2],[-151,-541]],[[249375,396999],[-163,-3]],[[249212,396996],[-8,9761]],[[249212,396996],[-1247,20]],[[247965,397016],[-5,4876]],[[247960,401892],[-16,4809]],[[164769,402898],[-1779,-16],[-230,-509],[-693,-3276],[-169,-1785],[-673,347]],[[247960,401892],[-463,-687],[1,-945],[-744,197],[-63,-1254]],[[246691,399203],[-28,5180]],[[268575,403868],[-39,-2983]],[[268536,400885],[-64,-728]],[[268472,400157],[-1582,535]],[[266890,400692],[-54,3348]],[[282590,402983],[-306,-3505]],[[282284,399478],[-571,2462]],[[195295,403841],[-25,-16135]],[[195270,387706],[-2690,0]],[[255047,401845],[-69,-1899]],[[254978,399946],[-895,325]],[[254083,400271],[-161,-18]],[[253922,400253],[-11,3817]],[[273426,403549],[-646,-1538]],[[272780,402011],[-366,1374]],[[257759,403488],[-152,-218],[7,-3170]],[[257614,400100],[-1035,43]],[[275685,404334],[85,-2807]],[[275770,401527],[-169,-2412]],[[275601,399115],[-203,-164]],[[275398,398951],[-825,1176]],[[274573,400127],[195,794],[-216,1514],[165,2570]],[[281713,401940],[-331,-4250]],[[281382,397690],[-453,-530]],[[280929,397160],[-54,1697],[-336,-1327],[-249,539]],[[280290,398069],[100,595]],[[281262,400644],[0,0]],[[236636,400870],[-257,453],[-437,-2067],[-406,-130]],[[235536,399126],[16,860]],[[261477,402009],[-400,-1352]],[[261077,400657],[-346,-1150],[-342,-60]],[[260389,399447],[7,4085]],[[276525,402592],[-354,-958],[-401,-107]],[[274573,400127],[-368,-1329]],[[274205,398798],[-236,255]],[[273969,399053],[-281,3044],[70,398]],[[233938,404819],[-18,-6983]],[[233920,397836],[-872,234]],[[233048,398070],[-272,169],[23,2801]],[[235070,400718],[-349,73],[-25,-3936]],[[234696,396855],[-411,-173]],[[234285,396682],[-361,-327],[-4,1481]],[[159472,402697],[-103,-2316],[298,-2193],[10,-2578]],[[159677,395610],[-1407,-5]],[[240434,401226],[-265,-1912],[27,-1098]],[[240196,398216],[-322,-2538]],[[239874,395678],[-1243,272]],[[238631,395950],[53,6515]],[[272780,402011],[-162,-1543]],[[272618,400468],[-357,-942],[-433,-2022]],[[271828,397504],[-465,1316]],[[271363,398820],[-24,1553]],[[246691,399203],[104,-2425],[318,-371]],[[247113,396407],[-269,-1766],[-327,1148]],[[246517,395789],[-157,5398]],[[269913,400807],[-106,33],[-45,-3311]],[[269762,397529],[-314,139]],[[269448,397668],[30,1911],[-311,801],[-631,505]],[[273969,399053],[-615,-1858]],[[273354,397195],[-359,391]],[[272995,397586],[-242,75],[-135,2807]],[[288046,402537],[11,-941]],[[288057,401596],[-639,-5]],[[287418,401591],[-372,-2533],[-163,577],[-139,-1618],[-138,1746],[461,4161],[775,50]],[[203263,398059],[-1079,33]],[[202184,398092],[232,2579],[24,2142],[167,939]],[[253922,400253],[-982,-52]],[[252940,400201],[-307,817]],[[266890,400692],[-89,-2650]],[[266801,398042],[-801,-647]],[[266000,397395],[-555,16],[18,4208]],[[285892,400880],[-123,-37]],[[285769,400843],[123,37]],[[285902,401499],[-150,-622]],[[285752,400877],[-98,558]],[[285433,400992],[-397,-2058]],[[285036,398934],[-134,519]],[[284902,399453],[-167,-26],[-614,4168]],[[199808,403832],[102,-2046]],[[199910,401786],[-297,-715]],[[199613,401071],[-737,-3251],[-271,663],[-333,-353],[-440,-2814],[-665,-1481],[1,-3000]],[[197168,390835],[-2,-3129],[-1896,0]],[[202184,398092],[-58,-1116]],[[202126,396976],[-415,809],[-150,-1175],[-542,1041],[-197,1576],[-600,-3],[-312,2562]],[[289289,396094],[-480,-883],[-190,-1250],[-469,-135]],[[288150,393826],[-70,5853]],[[288080,399679],[-23,1917]],[[288726,403781],[311,-1993],[21,-3696],[231,-1998]],[[258454,403340],[32,-5426],[144,9]],[[258630,397923],[2,-1078]],[[258632,396845],[-1016,27]],[[257616,396872],[-2,3228]],[[260389,399447],[-315,-33],[2,-1129]],[[260076,398285],[-172,-510],[-611,176]],[[259293,397951],[-15,5471]],[[244447,399667],[-616,99],[-11,-1652]],[[243820,398114],[-1328,96]],[[242492,398210],[16,3270],[-584,123]],[[284902,399453],[-317,-3074]],[[284585,396379],[-327,-587]],[[284258,395792],[-575,2284]],[[283683,398076],[-376,336],[-185,1328],[194,1435]],[[259293,397951],[-663,-28]],[[241246,396474],[-791,165],[-259,1577]],[[241602,401646],[-356,-5172]],[[279076,401440],[-306,-3713],[122,-2044],[-246,-2142]],[[278646,393541],[-601,2684]],[[278045,396225],[-22,131]],[[278023,396356],[164,2028],[-157,243],[174,1961],[-541,57]],[[291123,402398],[69,-688],[-433,-4686],[-217,-1125],[-299,-2],[197,2821],[-39,1600]],[[283683,398076],[-584,-3905]],[[283099,394171],[-333,1775]],[[282766,395946],[-855,1322]],[[281911,397268],[373,2210]],[[164778,400098],[2,-986]],[[164780,399112],[3,-842]],[[164783,398270],[-389,10],[-272,-829],[-495,65],[-431,-2100],[-546,1773],[-795,-2035],[-254,-3501]],[[161601,391653],[-949,430]],[[160652,392083],[46,3550],[150,1320]],[[264366,402056],[-167,-4639]],[[264199,397417],[-520,1367]],[[263679,398784],[-327,-385]],[[263352,398399],[-336,1360],[-212,-781]],[[262804,398978],[2,3719]],[[262119,402734],[-185,-6687]],[[261934,396047],[-10,-343]],[[261924,395704],[-187,-294]],[[261737,395410],[-674,-16]],[[261063,395394],[14,5263]],[[262804,398978],[-161,-1387]],[[262643,397591],[-709,-1544]],[[227835,399471],[-2,-3242]],[[227833,396229],[-1550,10]],[[226283,396239],[-5,4856]],[[160652,392083],[-329,7]],[[160323,392090],[-249,593],[-93,1588],[-304,1339]],[[276764,401308],[-43,-2135]],[[276721,399173],[-197,-2652],[-527,-488]],[[275997,396033],[78,1671],[-474,1411]],[[238631,395950],[-2,-269]],[[238629,395681],[-940,177],[-5,-540],[-774,156]],[[236910,395474],[25,4211]],[[278023,396356],[-421,199],[-771,1157],[-110,1461]],[[264942,392757],[-495,1044]],[[264447,393801],[-4,882]],[[264443,394683],[-244,2734]],[[265117,401745],[-175,-8988]],[[281911,397268],[-117,-635]],[[281794,396633],[-412,1057]],[[247965,397016],[-355,-13],[-6,-1413]],[[247604,395590],[-491,817]],[[286601,396689],[-270,-2437],[180,3428],[90,-991]],[[288080,399679],[-243,-644],[-318,-3542]],[[287519,395493],[-452,120]],[[287067,395613],[-237,-814],[-18,1650],[166,2199],[440,2943]],[[256060,400213],[0,-4915]],[[256060,395298],[-786,-99]],[[255274,395199],[-296,4747]],[[202126,396976],[391,-1635],[384,-265],[-241,-1240],[-125,-2429],[202,-1122],[71,-1957],[299,-2060]],[[203107,386268],[-2100,54],[-1,-5187]],[[201006,381135],[-1581,2]],[[199425,381137],[-185,2880]],[[199240,384017],[375,1],[-2,6826]],[[199613,390844],[0,10227]],[[266000,397395],[-90,-7129]],[[265910,390266],[-554,2429]],[[265356,392695],[-414,62]],[[242492,398210],[-119,-2235],[31,-2530],[-220,-3074]],[[242184,390371],[-394,741],[-90,1046]],[[241700,392158],[-288,3406]],[[241412,395564],[-166,910]],[[166041,398612],[-587,525],[-674,-25]],[[280290,398069],[-483,-2836],[-192,-318],[-231,-2314]],[[279384,392601],[-347,1621],[-177,-1640]],[[278860,392582],[-214,959]],[[286072,395357],[-240,-2629],[72,-1052]],[[285904,391676],[-438,652]],[[285466,392328],[40,2580],[-96,1946],[-374,2080]],[[285752,400877],[17,-34]],[[285892,400880],[302,-2195],[-274,-289],[359,-1162],[-228,-562],[21,-1315]],[[236910,395474],[-14,-1566]],[[236896,393908],[-1362,262]],[[235534,394170],[2,3666]],[[235536,397836],[0,1290]],[[246517,395789],[-458,-1049],[-357,-129]],[[245702,394611],[-426,36],[-426,2232]],[[244850,396879],[11,2739]],[[230260,397827],[-2,-3238]],[[230258,394589],[-1082,7]],[[229176,394596],[-204,1767],[0,3115]],[[199613,390844],[-2445,-9]],[[226283,396239],[-1,-1624]],[[226282,394615],[-1550,-6]],[[224732,394609],[-14,4875]],[[233048,398070],[-1,-3479]],[[233047,394591],[-1242,3]],[[231805,394594],[-1,4257],[-265,570]],[[251699,401040],[-2,-5670],[314,56]],[[252011,395426],[-4,-1645]],[[252007,393781],[-1233,-55],[-1,-1620]],[[250773,392106],[-323,106]],[[250450,392212],[11,5326]],[[252940,400201],[-3,-4846]],[[252937,395355],[-926,71]],[[231805,394594],[2,-2436]],[[231807,392158],[-1134,-2]],[[230673,392156],[-105,1611],[-310,822]],[[269448,397668],[-55,-3547],[-336,-2]],[[269057,394119],[-207,86]],[[268850,394205],[-308,108],[-130,1734]],[[268412,396047],[60,4110]],[[270916,394753],[20,1087],[-281,1701],[-269,-1233]],[[270386,396308],[9,757],[-633,464]],[[271363,398820],[-98,-3219],[-349,-848]],[[235536,397836],[-739,279],[-101,-1260]],[[268412,396047],[-1128,226],[-164,1036]],[[267120,397309],[-319,733]],[[261063,395394],[-665,-1816]],[[260398,393578],[-311,-148]],[[260087,393430],[-11,4855]],[[272995,397586],[-322,-2153]],[[272673,395433],[-626,50]],[[272047,395483],[-219,2021]],[[255274,395199],[-23,-931]],[[255251,394268],[-1050,-44]],[[254201,394224],[-107,0]],[[254094,394224],[-11,6047]],[[254094,394224],[-870,-49]],[[253224,394175],[-287,84],[0,1096]],[[257616,396872],[-2,-1631]],[[257614,395241],[-618,-10]],[[256996,395231],[-541,-4]],[[256455,395227],[-395,71]],[[275398,398951],[-49,-2704],[-193,-1561],[-17,-2748]],[[275139,391938],[-179,224]],[[274960,392162],[-177,2250],[-237,820]],[[274546,395232],[-309,1940],[-32,1626]],[[178718,391007],[0,-11658],[-2489,-10],[-9,-22498]],[[176220,356841],[9,-15661]],[[176229,341180],[-3543,18062]],[[172686,359242],[1,19187],[-1464,8790]],[[171223,387219],[-1407,8282],[-1,1512],[923,1372]],[[244850,396879],[-2,-2772],[-420,28],[-8,-2523]],[[244420,391612],[-356,-627],[-262,515]],[[243802,391500],[-19,-8]],[[243783,391492],[37,6622]],[[263352,398399],[22,-5066]],[[263374,393333],[-124,-465]],[[263250,392868],[-377,1491]],[[262873,394359],[-210,811]],[[262663,395170],[-20,2421]],[[288150,393826],[43,-3599]],[[288193,390227],[-151,927],[-491,-152]],[[287551,391002],[-166,1427],[180,785]],[[287565,393214],[-46,2279]],[[218249,399497],[-19,-8070]],[[218230,391427],[-862,14]],[[217368,391441],[-992,-7]],[[216376,391434],[17,8090]],[[216376,391434],[-231,-10]],[[216145,391424],[-1332,-41]],[[214813,391383],[-3,6507]],[[223193,399492],[-14,-8122]],[[223179,391370],[-1512,-4]],[[221667,391366],[-36,-1]],[[221631,391365],[18,8115]],[[220099,399476],[-16,-8097]],[[220083,391379],[-260,16]],[[219823,391395],[-1228,35]],[[218595,391430],[-365,-3]],[[229176,394596],[-104,-1078],[-9,-3776]],[[229063,389742],[-1230,0]],[[227833,389742],[0,6487]],[[224732,394609],[-3,-3237]],[[224729,391372],[-1523,-3]],[[223206,391369],[-27,1]],[[221631,391365],[-1548,14]],[[285466,392328],[-31,-1556]],[[285435,390772],[-7,-2277]],[[285428,388495],[-134,1401],[-606,811],[-230,-838],[-81,1376]],[[284377,391245],[169,2220]],[[284546,393465],[298,1554],[-259,1360]],[[206488,399432],[13,-4858],[-121,-1294],[371,-47],[-10,-2736]],[[206741,390497],[-830,-44],[-247,924]],[[209217,388122],[-2473,-51]],[[206744,388071],[-3,2426]],[[264443,394683],[-524,-1279]],[[263919,393404],[-110,900],[24,2587],[-154,1893]],[[278045,396225],[-294,-513],[-232,-1659],[80,-1120],[-325,-2167]],[[277274,390766],[-416,1407],[-243,-3512],[-463,-1712],[-244,275],[-358,-1592]],[[275550,385632],[171,2537],[-267,3167]],[[275454,391336],[428,948],[115,3749]],[[166657,388375],[-700,3239]],[[165957,391614],[-901,4159]],[[165056,395773],[-269,1240],[-4,1257]],[[275454,391336],[-315,602]],[[274546,395232],[-268,-471],[-788,-2997]],[[273490,391764],[-200,1393],[150,995],[-86,3043]],[[280929,397160],[39,-1198],[-240,-2109]],[[280728,393853],[-452,-1704],[-259,-2493]],[[280017,389656],[-633,2945]],[[263919,393404],[-308,-258]],[[263611,393146],[-237,187]],[[272047,395483],[-122,-4567],[68,-1110]],[[271993,389806],[-308,-1084],[-178,1340]],[[271507,390062],[-213,1013]],[[271294,391075],[-378,3678]],[[171223,387219],[-1840,-10800],[-214,47]],[[169169,376466],[-2031,9653]],[[260087,393430],[-260,-1360]],[[259827,392070],[-266,626],[-811,-79]],[[258750,392617],[-17,4231],[-101,-3]],[[234285,396682],[0,-4534]],[[234285,392148],[-1238,4]],[[233047,392152],[0,2439]],[[165056,395773],[67,-1276],[-536,-3017]],[[164587,391480],[-681,-2963],[-866,-753],[-371,963],[-735,-860]],[[161934,387867],[-256,3852],[-77,-66]],[[243783,391492],[-601,-672],[-237,-1353]],[[242945,389467],[-301,-676],[-460,1580]],[[241412,395564],[-331,-4506],[-621,73]],[[240460,391131],[-613,169]],[[239847,391300],[27,4378]],[[284258,395792],[-146,-764]],[[284112,395028],[62,-329]],[[284174,394699],[109,-600]],[[284283,394099],[166,-998]],[[284449,393101],[22,-1315],[-319,-1468],[-235,541]],[[283917,390859],[-818,3312]],[[283747,394572],[0,0]],[[283737,394153],[0,0]],[[203879,391310],[232,-1351],[-62,-2148],[-284,-1101]],[[203765,386710],[-658,-442]],[[235534,394170],[-3,-2032]],[[235531,392138],[-1246,10]],[[267120,397309],[10,-7398]],[[267130,389911],[-689,1521],[-363,-1183]],[[266078,390249],[-168,17]],[[189012,387896],[-1284,-153]],[[187728,387743],[-2094,147]],[[185634,387890],[9,1162]],[[214813,391383],[1,-1533]],[[214814,389850],[-3143,-51]],[[273490,391764],[-131,-932]],[[273359,390832],[-145,-1040]],[[273214,389792],[-209,606],[-29,1581],[-303,3454]],[[281794,396633],[-352,-2134]],[[281442,394499],[-181,-1569],[-249,-398]],[[281012,392532],[-284,1321]],[[270386,396308],[-126,-2313],[-210,-922],[124,-3420],[-112,-240]],[[270062,389413],[-201,-167]],[[269861,389246],[-208,46],[20,1692],[-328,119],[-31,1671],[-276,128],[19,1217]],[[262663,395170],[-751,42],[12,492]],[[271294,391075],[-509,-438],[-303,-920],[26,-2483]],[[270508,387234],[-446,2179]],[[250450,392212],[-956,22]],[[249494,392234],[-119,4765]],[[268850,394205],[-252,-4691],[-210,-490]],[[268388,389024],[-201,3414],[-398,-532]],[[267789,391906],[-350,-1992],[-309,-3]],[[282766,395946],[-168,-2055],[513,-5136]],[[283111,388755],[-288,-2729]],[[282823,386026],[-280,58],[-558,5269]],[[281985,391353],[-543,3146]],[[249494,392234],[6,-1626],[-311,-13]],[[249189,390595],[-1322,102]],[[247867,390697],[42,2084]],[[247909,392781],[135,617]],[[248044,393398],[7,862],[-447,1330]],[[245702,394611],[-17,-6020]],[[245685,388591],[-299,1158],[-435,348],[-393,1320]],[[244558,391417],[-138,195]],[[284546,393465],[-223,1827]],[[284323,395292],[-65,500]],[[258750,392617],[-93,-1410]],[[258657,391207],[-1043,-27]],[[257614,391180],[0,4061]],[[248044,393398],[-494,1527],[-406,-1104],[-259,-2536],[-553,-982]],[[246332,390303],[-514,-1949],[-133,237]],[[289289,396094],[351,-2735],[270,-53],[-16,-3323],[132,-3184]],[[290026,386799],[-57,0]],[[289969,386799],[-44,0]],[[289925,386799],[-712,13]],[[289213,386812],[-982,152],[-22,1873]],[[288209,388837],[-16,1390]],[[227833,389742],[-1540,10]],[[226293,389752],[-11,4863]],[[278860,392582],[-466,-5289]],[[278394,387293],[-254,-1223]],[[278140,386070],[-449,839],[-166,1725],[-310,767]],[[277215,389401],[59,1365]],[[239847,391300],[-20,-3033]],[[239827,388267],[-622,98],[-4,-541],[-615,114]],[[238586,387938],[4,815]],[[238590,388753],[39,6928]],[[287565,393214],[-230,-1317],[167,-933],[-195,-1782],[-402,1980],[-480,1174],[215,1899],[256,-1835],[-68,1744],[239,1469]],[[283917,390859],[-162,-3064]],[[283755,387795],[-414,1424],[-230,-464]],[[283312,392780],[-46,162]],[[283266,392942],[46,-162]],[[273214,389792],[-307,-1570]],[[272907,388222],[-755,415],[-159,1169]],[[238590,388753],[-1541,207]],[[237049,388960],[-152,26],[-1,4922]],[[284458,394060],[-175,39]],[[284174,394699],[-62,329]],[[284323,395292],[135,-1232]],[[165957,391614],[-110,-1812],[215,-2118],[-268,-3201]],[[165794,384483],[-317,1674],[-351,-1063],[-391,1451]],[[164735,386545],[-148,1347]],[[164587,387892],[0,3588]],[[262873,394359],[-58,-1366],[-578,-417]],[[262237,392576],[-496,-1309]],[[261741,391267],[-4,4143]],[[241700,392158],[-279,-5796]],[[241421,386362],[-363,56]],[[241058,386418],[-603,3090],[5,1623]],[[160323,392090],[-78,-1064],[334,-1450],[-117,-1634],[135,-802],[-46,-2000],[-216,-906]],[[160335,384234],[-267,44],[0,3907],[-682,143],[-456,-373]],[[158930,387955],[-516,6080],[-297,453]],[[261741,391267],[-366,838]],[[261375,392105],[-331,-490],[65,-2302]],[[261109,389313],[-394,370]],[[260715,389683],[-4,1350],[-312,1081],[-1,1464]],[[253224,394175],[-108,-3960],[133,-657]],[[253249,389558],[-1250,127]],[[251999,389685],[8,4096]],[[256455,395227],[-410,-1812],[-93,-2130],[103,-2736]],[[256055,388549],[-614,-233]],[[255441,388316],[-373,-1489],[-409,-714]],[[254659,386113],[-35,904],[308,955],[-17,1003]],[[254915,388975],[434,3215],[-98,2078]],[[257614,391180],[2,-2983]],[[257616,388197],[-674,-392]],[[256942,387805],[54,7426]],[[256942,387805],[-413,172]],[[256529,387977],[-474,572]],[[274960,392162],[-143,-1744],[-396,-2215]],[[274421,388203],[-376,575],[-266,-940]],[[273779,387838],[-420,2994]],[[247909,392781],[-238,-998],[-192,-2324],[176,-1160]],[[247655,388299],[-25,-169]],[[247630,388130],[-212,-2528]],[[247418,385602],[-176,2126],[-511,9],[-410,-651]],[[246321,387086],[11,3217]],[[264517,389238],[-755,-736]],[[263762,388502],[-151,4644]],[[264447,393801],[70,-4563]],[[230673,392156],[-3,-4046]],[[230670,388110],[-1299,14]],[[229371,388124],[-306,-1],[-2,1619]],[[226293,389752],[2,-1623]],[[226295,388129],[-1550,-16]],[[224745,388113],[-16,3259]],[[233047,392152],[-21,-5676]],[[233026,386476],[-1232,4]],[[231794,386480],[13,5678]],[[158930,387955],[-63,-1644],[170,-2032],[-401,3],[-18,-2538],[-216,-435]],[[158402,381309],[-24,5]],[[158378,381314],[-291,-21]],[[158087,381293],[-4,44]],[[158083,381337],[141,478],[-107,2272],[-521,4539],[-126,2198]],[[281985,391353],[-669,-3258],[-157,216]],[[281159,388311],[-296,1764]],[[280863,390075],[149,2457]],[[263250,392868],[-350,-1062]],[[262900,391806],[-413,-1089]],[[262487,390717],[-250,1859]],[[158083,381337],[-236,-852],[-152,859]],[[157695,381344],[-539,907],[-435,1971],[-295,-309]],[[156426,383913],[-354,2862],[-569,2151],[-557,3777]],[[254915,388975],[-726,36]],[[254189,389011],[12,5213]],[[280017,389656],[-138,-1763],[572,-1648]],[[280451,386245],[-493,-2674]],[[279958,383571],[-240,-1325]],[[279718,382246],[-1324,5047]],[[279335,387008],[0,0]],[[254189,389011],[-119,3]],[[254070,389014],[-537,-21]],[[253533,388993],[-284,565]],[[269861,389246],[-95,-2475],[-512,-708]],[[269254,386063],[-253,186]],[[269001,386249],[-194,1564]],[[268807,387813],[-419,1211]],[[237049,388960],[-5,-2241]],[[237044,386719],[-1524,569]],[[235520,387288],[11,4850]],[[284458,394060],[-9,-959]],[[280863,390075],[-319,-2825]],[[280544,387250],[-93,-1005]],[[260715,389683],[-623,-25],[-152,-811]],[[259940,388847],[-105,263],[-8,2960]],[[265356,392695],[-244,-3245]],[[265112,389450],[-475,-738]],[[264637,388712],[-120,526]],[[251999,389685],[-2,-2446]],[[251997,387239],[-1241,-18]],[[250756,387221],[2,542]],[[250758,387763],[15,4343]],[[263762,388502],[-226,-927]],[[263536,387575],[-64,-376]],[[263472,387199],[-541,2721],[-31,1886]],[[283312,392780],[-46,162]],[[259940,388847],[-405,-1354],[-3,-1307]],[[259532,386186],[-107,-9]],[[259425,386177],[-618,89]],[[258807,386266],[-150,4]],[[258657,386270],[0,4937]],[[247867,390697],[-212,-2398]],[[285904,391676],[33,-3345],[377,-2749],[-110,-1238],[-607,2727],[-162,3701]],[[266078,390249],[8,-2072]],[[266086,388177],[-605,-1280],[-198,664]],[[265283,387561],[-171,1889]],[[262487,390717],[-393,-1208]],[[262094,389509],[-260,-210]],[[261834,389299],[-459,2806]],[[268807,387813],[-424,-2455]],[[268383,385358],[-426,367],[-546,2055]],[[267411,387780],[397,3340],[-19,786]],[[250758,387763],[-585,210],[-360,-847],[-369,59],[-249,-997]],[[249195,386188],[-6,4407]],[[277215,389401],[-117,-2971],[-334,-2301],[41,-775]],[[276805,383354],[-350,-1567],[-111,-2181]],[[276344,379606],[-848,-339],[-274,1262],[9,2076]],[[275231,382605],[22,2224],[297,803]],[[242945,389467],[-266,-2385],[-345,60],[127,-1459],[-203,-1038]],[[242258,384645],[-596,108],[14,1563],[-255,46]],[[231794,386480],[-24,-4900]],[[231770,381580],[-1109,51]],[[230661,381631],[9,6479]],[[234285,392148],[-26,-6490]],[[234259,385658],[-1233,6]],[[233026,385664],[0,812]],[[235520,387288],[0,-1653]],[[235520,385635],[-1261,23]],[[275231,382605],[-213,771]],[[275018,383376],[-482,1700],[-115,3127]],[[161934,387867],[6,-3923]],[[161940,383944],[-1041,-1302],[-209,591],[-282,-2812]],[[160408,380421],[-311,-432],[76,1800]],[[160173,381789],[162,2445]],[[261834,389299],[-406,-1731]],[[261428,387568],[-332,584]],[[261096,388152],[13,1161]],[[263472,387199],[-446,-2245]],[[263026,384954],[-363,80]],[[262663,385034],[-258,1506],[-110,2136],[-201,833]],[[267411,387780],[-197,-1448],[23,-1522],[-313,-464]],[[266924,384346],[-311,1158]],[[266613,385504],[-354,897],[-173,1776]],[[244558,391417],[4,-9114]],[[244562,382303],[-467,23],[2,-1088]],[[244097,381238],[-267,18]],[[243830,381256],[-41,2513]],[[243789,383769],[13,7731]],[[169169,376466],[1658,-8029]],[[170827,368437],[-2624,-35]],[[168203,368402],[-689,2284]],[[167514,370686],[-267,2691],[-422,166]],[[166825,373543],[188,2774],[-291,1077],[-121,2597],[-313,215],[-474,1907],[-20,2370]],[[246321,387086],[-122,-4888]],[[246199,382198],[-880,-1]],[[245319,382197],[-757,106]],[[243789,383769],[-1534,68]],[[242255,383837],[3,808]],[[164587,387892],[-719,-833],[-260,131],[-515,-1390],[-61,-1061],[-1010,-2142]],[[162022,382597],[-82,1347]],[[286908,384389],[-189,473],[-264,2364],[218,1227],[-54,1255],[301,245],[335,-1095],[296,2144]],[[288209,388837],[-340,-1484],[-14,-1069]],[[287855,386284],[-365,-3226],[-582,1331]],[[218595,391430],[0,-8114]],[[218595,383316],[-1157,7]],[[217438,383323],[-63,-1]],[[217375,383322],[-7,8119]],[[219823,391395],[8,-8115]],[[219831,383280],[-1236,36]],[[216145,391424],[-2,-8128]],[[216143,383296],[-1329,-14]],[[214814,383282],[1,119]],[[214815,383401],[-1,6449]],[[217375,383322],[-1161,-24]],[[216214,383298],[-71,-2]],[[282823,386026],[45,-781]],[[282868,385245],[-236,-134]],[[282632,385111],[-191,602],[-899,-1518]],[[281542,384195],[7,1474],[-390,2642]],[[221667,391366],[1,-6464]],[[221668,384902],[2,-1624]],[[221670,383278],[-1791,1]],[[219879,383279],[-48,1]],[[241058,386418],[-180,-1533],[-17,-2355]],[[240861,382530],[-192,-604],[-545,141],[-327,1182]],[[239797,383249],[30,5018]],[[224745,388113],[2,-4860]],[[224747,383253],[-1206,6]],[[223541,383259],[-334,2],[0,1622]],[[223207,384883],[-1,6486]],[[206744,388071],[3,-4865],[-303,-6]],[[206444,383200],[-2083,132]],[[204361,383332],[-596,3378]],[[223207,384883],[-1539,19]],[[285428,388495],[2,-844]],[[285430,387651],[-211,221],[-263,-2217]],[[284956,385655],[81,-2290],[-234,435],[-329,2868],[-459,-1568],[-187,2279],[549,3866]],[[258657,386270],[-1,-536],[-1038,13]],[[257618,385747],[-2,2450]],[[270898,384460],[-214,-1051],[-154,1960]],[[270530,385369],[-22,1865]],[[271507,390062],[-150,-656],[68,-2319],[-484,-1260],[-43,-1367]],[[181367,389063],[0,-7899]],[[181367,381164],[-7,-10123]],[[181360,371041],[5,-11252]],[[181365,359789],[1,-2928]],[[181366,356861],[-1984,13],[0,179],[-2726,-7],[-436,-205]],[[199240,384017],[-2,564],[-1384,-10],[128,-1422],[415,-674],[-79,-1242]],[[198318,381233],[-2999,13]],[[195319,381246],[-49,6460]],[[273779,387838],[177,-532],[-261,-1184],[-892,-2813]],[[272803,383309],[-146,3877],[250,1036]],[[249195,386188],[4,-3707]],[[249199,382481],[-545,27]],[[248654,382508],[-40,1620],[-343,20],[-641,3982]],[[281542,384195],[-437,-1435],[-99,693]],[[281006,383453],[-396,1781],[-66,2016]],[[272803,383309],[-1,-6]],[[272802,383303],[-272,-1509],[-143,-3969]],[[272387,377825],[-212,338]],[[272175,378163],[-165,2328],[-356,2012],[-528,-202]],[[271126,382301],[46,1977],[-274,182]],[[214815,383401],[-1945,-34]],[[212870,383367],[-1831,-27]],[[211039,383340],[-284,-8]],[[210755,383332],[-8,4680]],[[227833,389742],[0,-8111]],[[227833,381631],[-920,3]],[[226913,381634],[-612,-2]],[[226301,381632],[-6,6497]],[[229371,388124],[-58,-8132]],[[229313,379992],[-869,38]],[[228444,380030],[-1,1619],[-610,-18]],[[265283,387561],[-139,-987]],[[265144,386574],[-341,378]],[[264803,386952],[-166,1760]],[[253533,388993],[-9,-5827]],[[253524,383166],[-612,-14]],[[252912,383152],[-924,24]],[[251988,383176],[9,4063]],[[261096,388152],[-572,-2670]],[[260524,385482],[-286,-2089],[-141,377]],[[260097,383770],[-46,2157],[-519,259]],[[270530,385369],[-363,-644],[-243,-2058]],[[269924,382667],[-670,3396]],[[262663,385034],[-353,-388]],[[262310,384646],[-796,416]],[[261514,385062],[-86,2506]],[[278140,386070],[-341,-3642],[-207,-671]],[[277592,381757],[-787,1597]],[[283755,387795],[-68,-3120]],[[283687,384675],[-6,-1713]],[[283681,382962],[-121,26]],[[283560,382988],[-214,707]],[[283346,383695],[-232,459]],[[283114,384154],[-246,1091]],[[264803,386952],[-255,-1635]],[[264548,385317],[-418,-1608],[-274,-41]],[[263856,383668],[-44,1681],[-276,2226]],[[185634,387890],[508,-3311],[-58,-2001],[-242,-1389]],[[185842,381189],[-97,-49]],[[185745,381140],[-4378,24]],[[254070,389014],[36,-2007],[-137,-3775]],[[253969,383232],[-445,-66]],[[254659,386113],[-464,-2725],[-218,-212]],[[253977,383176],[-8,56]],[[238586,387938],[-30,-5629]],[[238556,382309],[-1468,73]],[[237088,382382],[-70,9],[26,4328]],[[289213,386812],[95,-1817],[-160,-1191],[-692,-216]],[[288456,383588],[-506,-230]],[[287950,383358],[-283,-697],[-32,1164],[220,2459]],[[275018,383376],[-768,-3503],[-473,452]],[[273777,380325],[-279,2236],[-256,-553],[-440,1295]],[[256529,387977],[-2,-5250]],[[256527,382727],[-679,252]],[[255848,382979],[3,2497],[-256,-92],[-154,2932]],[[158378,381314],[145,-1463],[-436,1442]],[[160173,381789],[-408,-2224],[-354,-188],[-351,1519],[-215,-1697],[-284,501],[-159,1609]],[[239797,383249],[34,-3689]],[[239831,379560],[-1221,173]],[[238610,379733],[-54,2576]],[[255848,382979],[-1,-825],[-418,-676]],[[255429,381478],[-616,57]],[[254813,381535],[-309,1119],[-517,33]],[[253987,382687],[-10,489]],[[257618,385747],[6,-2452]],[[257624,383295],[-312,-1078]],[[257312,382217],[-630,-29]],[[256682,382188],[-155,539]],[[266613,385504],[-146,-2036],[-362,-1580]],[[266105,381888],[-246,1826],[-347,209]],[[265512,383923],[-368,2651]],[[261514,385062],[-514,-1352]],[[261000,383710],[-476,1772]],[[230661,381631],[-3,-1635],[-459,10]],[[230199,380006],[-886,-14]],[[209217,388122],[-12,-6997]],[[209205,381125],[-8,-7666]],[[209197,373459],[-808,1540]],[[208389,374999],[-823,1547],[-1023,-358],[-101,636]],[[206442,376824],[2,6376]],[[210755,383332],[-22,-1723],[-306,-19],[0,-1082],[-595,-9],[-627,626]],[[226301,381632],[-1535,-19]],[[224766,381613],[-19,1640]],[[248654,382508],[-383,34],[0,-1619],[-476,-883]],[[247795,380040],[-127,736]],[[247668,380776],[-303,1893],[53,2933]],[[250756,387221],[-8,-4861]],[[250748,382360],[-1241,120]],[[249507,382480],[-308,1]],[[286032,384373],[445,-3369],[-10,-1655],[-344,2010],[-710,2346],[-112,-1069],[-345,3019]],[[285430,387651],[602,-3278]],[[164735,386545],[-435,-1184],[-950,-7857],[-381,-2238]],[[162969,375266],[-759,4580]],[[162210,379846],[-188,2751]],[[187728,387743],[-228,-1435],[16,-5094]],[[187516,381214],[-1674,-25]],[[192580,387706],[28,-2493],[350,-3273],[-106,-715]],[[192852,381225],[-4142,-33],[-1194,22]],[[247668,380776],[-455,-1591]],[[247213,379185],[-466,-722],[-158,1359]],[[246589,379822],[-390,2376]],[[268978,383007],[-530,-69]],[[268448,382938],[-65,2420]],[[269001,386249],[-23,-3242]],[[268448,382938],[-363,-1281]],[[268085,381657],[-378,306],[-289,1389],[-223,-1373]],[[267195,381979],[-271,2367]],[[195319,381246],[2,-5060]],[[195321,376186],[-5,-7382]],[[195316,368804],[-5,-9040]],[[195311,359764],[-2663,-21]],[[192648,359743],[-2089,98]],[[190559,359841],[-1844,-33]],[[188715,359808],[653,1884],[604,385],[346,3276],[287,901],[-33,1955],[278,1645]],[[190850,369854],[446,2473],[227,3836],[527,218],[571,4057],[231,787]],[[263856,383668],[113,-1403]],[[263969,382265],[-621,-1696]],[[263348,380569],[-281,1464]],[[263067,382033],[-41,2921]],[[281006,383453],[-231,-1615]],[[280775,381838],[-817,1733]],[[279718,382246],[-89,-2345],[-162,-619]],[[279467,379282],[-168,-1839],[-296,-1250],[-422,176]],[[278581,376369],[-906,3632]],[[277675,380001],[127,1436],[-210,320]],[[278910,381984],[0,0]],[[279286,380244],[0,0]],[[251988,383176],[-7,-2447]],[[251981,380729],[-1184,-9]],[[250797,380720],[-49,1640]],[[237088,382382],[-23,-3302]],[[237065,379080],[-1548,436]],[[235517,379516],[3,6119]],[[172686,359242],[-1859,9195]],[[265512,383923],[-362,-1946]],[[265150,381977],[-326,1245],[-276,2095]],[[204361,383332],[336,-2213],[254,-3271],[311,-1387]],[[205262,376461],[44,-2691]],[[205306,373770],[-1619,-57]],[[203687,373713],[-1526,-10],[-2,1613],[-297,15]],[[201862,375331],[0,677],[-568,1791],[-287,-219]],[[201007,377580],[-1,3555]],[[289490,378911],[-53,-33]],[[289437,378878],[53,33]],[[290026,386799],[-57,0]],[[289865,385833],[-126,-2837],[-305,-808],[-323,-3508]],[[289111,378680],[-677,-383]],[[288434,378297],[-6,31]],[[288428,378328],[-108,835],[337,901],[-201,3524]],[[289925,386799],[-60,-966]],[[166825,373543],[-110,722]],[[166715,374265],[-628,2326],[-333,-1722],[-421,-936],[-390,89],[-379,1183],[-853,-3609]],[[163711,371596],[-742,3670]],[[233026,385664],[-30,-6554]],[[232996,379110],[-1226,36]],[[231770,379146],[0,2434]],[[242255,383837],[29,-5135]],[[242284,378702],[-616,90]],[[241668,378792],[-305,21],[-346,3550],[-156,167]],[[258807,386266],[-62,-3639],[-147,-849]],[[258598,381778],[-366,-1124]],[[258232,380654],[2,1593],[-308,13],[2,1096],[-304,-61]],[[259425,386177],[1,-1624],[368,-2835]],[[259794,381718],[-135,-3194]],[[259659,378524],[-139,-131]],[[259520,378393],[-502,215],[-245,852],[-175,2318]],[[269924,382667],[-59,-1572],[261,-1816],[-318,-1928]],[[269808,377351],[-304,-1660]],[[269504,375691],[-230,1692]],[[269274,377383],[-144,2308],[-237,1272],[85,2044]],[[260097,383770],[-303,-2052]],[[284512,383384],[-92,-1944]],[[284420,381440],[-8,-28]],[[284412,381412],[-144,-223]],[[284268,381189],[-437,1843],[-150,-70]],[[283687,384675],[250,-96],[535,1274],[40,-2469]],[[267195,381979],[-57,-1464]],[[267138,380515],[-472,-1482]],[[266666,379033],[-181,318]],[[266485,379351],[-380,2537]],[[282632,385111],[-701,-4528]],[[281931,380583],[-408,649],[-297,-355]],[[281226,380877],[-451,961]],[[234259,385658],[-34,-6559]],[[234225,379099],[-1229,11]],[[235517,379516],[0,-429]],[[235517,379087],[-1292,12]],[[261000,383710],[174,-405],[-53,-2163]],[[261121,381142],[-14,-544]],[[261107,380598],[-354,-821],[-436,243],[-628,-1649]],[[259689,378371],[-30,153]],[[283114,384154],[232,-459]],[[283560,382988],[-758,-4755]],[[282802,378233],[-126,314]],[[282676,378547],[-383,1648],[-362,388]],[[271126,382301],[-263,-1063],[-13,-2367]],[[270850,378871],[-720,-941]],[[270130,377930],[-322,-579]],[[263067,382033],[-389,-1466]],[[262678,380567],[-442,233]],[[262236,380800],[74,3846]],[[265150,381977],[-286,-1440]],[[264864,380537],[-573,-892]],[[264291,379645],[-263,849],[-59,1771]],[[262236,380800],[-219,-1714]],[[262017,379086],[-896,2056]],[[223541,383259],[-1,-4854],[-304,-3]],[[223236,378402],[-914,10],[-2,1608],[-609,4]],[[221711,380024],[-41,3254]],[[199425,381137],[158,-1617],[-159,-1773]],[[199424,377747],[-472,-1109]],[[198952,376638],[-30,887],[-420,1383],[23,1649],[-207,676]],[[157695,381344],[162,-971],[-42,-3300],[180,-855],[-251,-1183],[-370,1729],[-114,-334],[-478,2413],[-375,-283],[165,2871],[317,-1456],[-463,3938]],[[266485,379351],[-223,-718],[-503,-258]],[[265759,378375],[-341,2566],[-268,1036]],[[162210,379846],[3,-6324],[-189,423],[-597,-1236],[-738,-3960]],[[160689,368749],[-239,1114],[0,5132]],[[160450,374995],[-70,4169]],[[160380,379164],[28,1257]],[[243830,381256],[-6,-1909],[-732,4],[-351,-755]],[[242741,378596],[-457,106]],[[287272,377541],[-21,-6]],[[287251,377535],[21,6]],[[287356,378030],[36,-498]],[[287392,377532],[-31,2]],[[287361,377534],[-41,379]],[[287320,377913],[36,117]],[[287320,377913],[-5,-375]],[[287315,377538],[-19,-1]],[[287296,377537],[24,376]],[[287781,379692],[-1,1870],[-264,-795],[434,2591]],[[288428,378328],[-760,-1369],[113,2733]],[[281226,380877],[-275,-2360]],[[280951,378517],[-515,-3905]],[[280436,374612],[-425,-1182]],[[280011,373430],[-544,5852]],[[280484,379686],[0,0]],[[285766,378696],[-155,-920]],[[285611,377776],[-363,656],[-314,2281],[-163,-800]],[[284771,379913],[-351,1527]],[[284512,383384],[528,-1941],[635,-277],[253,-1943],[-162,-527]],[[241668,378792],[-8,-3016]],[[241660,375776],[-363,-1064],[-225,1684],[-655,61]],[[240417,376457],[-605,127]],[[239812,376584],[19,2976]],[[269274,377383],[-231,160],[-89,-1393]],[[268954,376150],[-910,2229],[-138,-652]],[[267906,377727],[-93,802]],[[267813,378529],[371,1948],[-99,1180]],[[277675,380001],[-469,-3995]],[[277206,376006],[-657,396],[-135,1145],[-337,-44]],[[276077,377503],[267,2103]],[[214814,383282],[7,-9752]],[[214821,373530],[2,-1754]],[[214823,371776],[-1967,-12]],[[212856,371764],[14,11603]],[[276077,377503],[-296,-1430],[-373,-3414]],[[275408,372659],[-430,-144],[-592,889]],[[274386,373404],[-399,2556]],[[273987,375960],[102,2168],[-312,2197]],[[267813,378529],[-479,66],[-196,1920]],[[206442,376824],[-331,1927],[-323,-2224],[-84,710],[-442,-776]],[[212856,371764],[-914,-4]],[[211942,371760],[-915,4]],[[211027,371764],[12,11576]],[[211027,371764],[-1822,7],[-8,1688]],[[258232,380654],[-83,-1403]],[[258149,379251],[-55,-2224],[-404,-1554]],[[257690,375473],[31,1003],[-293,275],[-178,1615]],[[257250,378366],[113,-4],[-51,3855]],[[273987,375960],[-386,-927]],[[273601,375033],[-357,1056],[-619,250],[-238,1486]],[[217438,383323],[-2,-8108],[40,-1726]],[[217476,373489],[-1219,0]],[[216257,373489],[-44,1698],[1,8111]],[[219879,383279],[0,-4862]],[[219879,378417],[-1218,27],[32,-4956]],[[218693,373488],[-1217,1]],[[216257,373489],[-1436,41]],[[253987,382687],[206,-1257],[-505,-5062]],[[253688,376368],[-787,325]],[[252901,376693],[11,6459]],[[224766,381613],[1,-6483]],[[224767,375130],[-1507,15]],[[223260,375145],[-24,3257]],[[221711,380024],[-1,-3245]],[[221710,376779],[-1831,18]],[[219879,376797],[0,1620]],[[252901,376693],[0,-15]],[[252901,376678],[-925,-16]],[[251976,376662],[5,4067]],[[284268,381189],[-150,-1310],[278,-2137]],[[284396,377742],[-309,-256],[-1,-1106]],[[284086,376380],[-456,-1903]],[[283630,374477],[-165,-177],[-222,1929],[-441,2004]],[[256682,382188],[-153,-1592],[-545,-3576],[-1,-876]],[[255983,376144],[-94,369]],[[255889,376513],[-415,787]],[[255474,377300],[-45,4178]],[[254813,381535],[-36,-5041]],[[254777,376494],[-629,72]],[[254148,376566],[55,-1760],[-337,-146]],[[253866,374660],[-178,1708]],[[272175,378163],[-318,-1098],[158,-2552]],[[272015,374513],[-260,-47]],[[271755,374466],[-295,397],[-169,2097],[-573,1280],[132,631]],[[249507,382480],[-6,-4914]],[[249501,377566],[-221,-2833]],[[249280,374733],[-473,1904],[-262,-566]],[[248545,376071],[-165,1642],[-585,2327]],[[238610,379733],[-22,-2901],[-171,-1635]],[[238417,375197],[-154,26]],[[238263,375223],[-509,95],[7,1074],[-717,163]],[[237044,376555],[21,2525]],[[250797,380720],[-133,-3247]],[[250664,377473],[-1163,93]],[[245319,382197],[-11,-8639]],[[245308,373558],[-149,-796]],[[245159,372762],[-438,52],[5,1621],[-613,35]],[[244113,374470],[-16,6768]],[[264291,379645],[-143,-3261]],[[264148,376384],[-273,-833]],[[263875,375551],[-122,1731],[-504,1186]],[[263249,378468],[99,2101]],[[246589,379822],[-14,-6361]],[[246575,373461],[-1267,97]],[[257250,378366],[-461,-1267]],[[256789,377099],[-280,-2533],[-526,1578]],[[259520,378393],[-23,-3366],[-403,-372]],[[259094,374655],[-945,4596]],[[263249,378468],[-138,-2640]],[[263111,375828],[-141,-279],[-100,2292]],[[262870,377841],[-192,2726]],[[265759,378375],[-26,-1496]],[[265733,376879],[-550,230]],[[265183,377109],[-319,3428]],[[228444,380030],[1,-3258]],[[228445,376772],[-1532,-4]],[[226913,376768],[0,4866]],[[231770,379146],[-5,-5694]],[[231765,373452],[0,-2431]],[[231765,371021],[-1573,60]],[[230192,371081],[7,8925]],[[226913,376768],[10,-3302],[-304,-23]],[[226619,373443],[-1830,-23]],[[224789,373420],[-22,1710]],[[255474,377300],[-169,-642],[-244,1256],[-44,-2643],[-240,1223]],[[244113,374470],[-771,42],[-10,-3582]],[[243332,370930],[-613,68]],[[242719,370998],[22,7598]],[[190850,369854],[-4778,-86],[-898,126]],[[185174,369894],[-16,4889],[309,-24],[-29,1599],[336,1],[-29,4781]],[[285474,374122],[-189,-777]],[[285285,373345],[-143,1233],[-392,-213],[-211,1145],[-143,2232]],[[284412,381412],[24,-1012],[357,-713],[24,-1757],[347,-1481],[310,-2327]],[[198952,376638],[-341,-2419]],[[198611,374219],[-360,1511],[-614,-664],[-130,1368],[-1561,19],[-625,-267]],[[282676,378547],[-305,-5181]],[[282371,373366],[-288,724],[-132,1442],[-320,1092]],[[281631,376624],[-680,1893]],[[185174,369894],[-606,4],[0,-813]],[[184568,369085],[-379,-469],[-603,142],[1,869],[-616,2],[-2,1663],[-315,-252],[-1294,1]],[[262017,379086],[-183,-1209]],[[261834,377877],[-645,-597],[-256,976]],[[260933,378256],[174,2342]],[[201007,377580],[-383,-320],[-20,-4903],[46,-4702]],[[200650,367655],[-984,-5]],[[199666,367650],[-1,4037]],[[199665,371687],[0,2392],[-241,3668]],[[262870,377841],[-381,-296],[-271,-1166]],[[262218,376379],[-342,112]],[[261876,376491],[-42,1386]],[[251976,376662],[-1,-808]],[[251975,375854],[-1238,-26]],[[250737,375828],[-73,1645]],[[285611,377776],[352,-2379]],[[285963,375397],[-300,-592]],[[285663,374805],[-240,292],[-546,3122],[-106,1694]],[[248545,376071],[-481,-3792]],[[248064,372279],[-249,-32],[-722,3897],[380,1913],[-260,1128]],[[260933,378256],[-419,-2942],[-266,-430]],[[260248,374884],[-559,3487]],[[267906,377727],[-44,-1950]],[[267862,375777],[-303,91],[-437,-1813],[23,-1008]],[[267145,373047],[-650,2775]],[[266495,375822],[171,3211]],[[265183,377109],[-100,-1734]],[[265083,375375],[-218,284]],[[264865,375659],[-717,725]],[[160450,374995],[-1124,-1843],[-235,1488],[-259,115],[-483,1734]],[[158349,376489],[-209,1239],[349,1655],[315,-572],[373,669],[783,-708],[357,1506],[63,-1114]],[[230192,371081],[-1,-2432]],[[230191,368649],[-1748,-15]],[[228443,368634],[2,8138]],[[223260,375145],[0,-1718]],[[223260,373427],[-1521,35]],[[221739,373462],[-29,3317]],[[278540,374733],[-257,-157],[-226,-2495],[-255,-814]],[[277802,371267],[-172,-1565]],[[277630,369702],[-515,2396],[26,1889]],[[277141,373987],[65,2019]],[[278581,376369],[-41,-1636]],[[277790,374553],[0,0]],[[278042,373830],[0,0]],[[248064,372279],[-101,-554]],[[247963,371725],[-1081,39]],[[246882,371764],[-315,-16],[8,1713]],[[163711,371596],[-1656,-4356],[43,-1065],[-726,-3846]],[[161372,362329],[-155,872],[-328,-611],[-162,2473],[145,499],[-185,3195]],[[160687,368757],[2,-8]],[[239812,376584],[-308,31],[-13,-1890]],[[239491,374725],[-1074,472]],[[237044,376555],[-21,-4864]],[[237023,371691],[-1517,258]],[[235506,371949],[0,363]],[[235506,372312],[11,6775]],[[266495,375822],[-378,-674]],[[266117,375148],[-384,1731]],[[280011,373430],[-196,-1764],[-242,62],[-67,-1661]],[[279506,370067],[-122,-195]],[[279384,369872],[-552,4226],[-292,635]],[[259094,374655],[-345,-3823]],[[258749,370832],[-373,-504],[-265,1039],[-246,-1075]],[[257865,370292],[-128,1808]],[[257737,372100],[-47,3373]],[[232996,379110],[-19,-5688]],[[232977,373422],[-1212,30]],[[234225,379099],[-28,-5680]],[[234197,373419],[-1220,3]],[[235506,372312],[-1309,27]],[[234197,372339],[0,1080]],[[287392,377532],[-31,2]],[[287315,377538],[-19,-1]],[[287272,377541],[-21,-6]],[[288876,376511],[119,-271],[-517,-3407],[-55,-2435],[-470,-1282]],[[287953,369116],[-126,1005]],[[287827,370121],[-283,133],[408,3844]],[[287952,374098],[291,1243],[191,2956]],[[289111,378680],[-235,-2169]],[[289490,378911],[-53,-33]],[[271755,374466],[-438,-678],[176,-948],[-282,-760]],[[271211,372080],[-347,405],[-184,-776],[-249,1134],[-83,2840],[-218,2247]],[[286401,372837],[-192,2274],[-246,286]],[[285766,378696],[289,-8],[647,-2450],[-301,-3401]],[[242719,370998],[-614,38]],[[242105,371036],[2,817],[-459,1220],[12,2703]],[[208389,374999],[-290,-1426],[-260,-3093],[-562,-3167],[-508,-171],[-617,-1904]],[[206152,365238],[46,2010],[-135,4023],[-310,766],[-525,-1497]],[[205228,370540],[78,3230]],[[283630,374477],[147,-1396],[514,-1037],[-44,-593]],[[284247,371451],[-292,-1687]],[[283955,369764],[-489,1286],[-105,1394],[-525,504]],[[282836,372948],[-465,418]],[[281362,373717],[-225,-1081]],[[281137,372636],[-621,1278],[-80,698]],[[281631,376624],[-269,-2907]],[[260248,374884],[159,-1473]],[[260407,373411],[-544,-3500],[-48,-1933]],[[259815,367978],[-430,176]],[[259385,368154],[-185,2176],[-451,502]],[[263875,375551],[-250,-1449]],[[263625,374102],[-126,-754],[-407,1614]],[[263092,374962],[19,866]],[[268954,376150],[-162,-516],[84,-2448]],[[268876,373186],[-340,667],[-495,-734]],[[268041,373119],[-179,2658]],[[219879,376797],[30,-8169]],[[219909,368628],[-1216,-7]],[[218693,368621],[0,4867]],[[257737,372100],[-515,1415]],[[257222,373515],[-85,1916],[-348,1668]],[[273601,375033],[187,-2461],[-193,531],[-410,-2364]],[[273185,370739],[-292,-249],[-64,-1204]],[[272829,369286],[-281,1662],[-394,3474],[-139,91]],[[261876,376491],[-287,-707],[-405,-2399]],[[261184,373385],[-333,-3287]],[[260851,370098],[-285,-40],[141,1605],[-300,1748]],[[271211,372080],[-148,-2078]],[[271063,370002],[-199,-676]],[[270864,369326],[-114,472]],[[270750,369798],[-437,240],[-582,3546]],[[269731,373584],[-227,2107]],[[255889,376513],[81,-2236],[-378,-1770]],[[255592,372507],[-241,-672]],[[255351,371835],[-666,-172]],[[254685,371663],[-57,1803],[-480,3100]],[[285285,373345],[270,-2335]],[[285555,371010],[-138,-2862]],[[285417,368148],[-256,2601]],[[285161,370749],[-819,3092],[-256,2539]],[[199665,371687],[-1364,1]],[[198301,371688],[8,1041],[302,1490]],[[263092,374962],[-79,-1906]],[[263013,373056],[-780,-638]],[[262233,372418],[68,3271],[-83,690]],[[201862,375331],[-47,-8024]],[[201815,367307],[-1165,-221],[0,569]],[[269731,373584],[-340,-1357],[-300,302]],[[269091,372529],[-215,657]],[[277141,373987],[-397,706],[-568,-2859]],[[276176,371834],[-345,-947],[-213,581]],[[275618,371468],[-210,1191]],[[276253,374852],[0,0]],[[250737,375828],[-7,-4868]],[[250730,370960],[-827,-8],[-198,-520]],[[249705,370432],[27,2111],[-434,1361],[-18,829]],[[266117,375148],[-215,-2029]],[[265902,373119],[-39,-3]],[[265863,373116],[-510,789],[-270,1470]],[[257222,373515],[17,-1184],[-616,-2106]],[[256623,370225],[-1031,2282]],[[264865,375659],[-28,-5333]],[[264837,370326],[-303,-811]],[[264534,369515],[-414,300]],[[264120,369815],[-495,4287]],[[253866,374660],[-365,-2527],[72,-1661]],[[253573,370472],[-674,471]],[[252899,370943],[2,5735]],[[262233,372418],[-14,-886]],[[262219,371532],[-865,378],[-170,1475]],[[221739,373462],[9,-4974]],[[221748,368488],[-1535,133]],[[220213,368621],[-304,7]],[[228443,368634],[-1823,-25]],[[226620,368609],[-1,4834]],[[252899,370943],[-103,7]],[[252796,370950],[-826,-12]],[[251970,370938],[5,4916]],[[285161,370749],[-468,-116]],[[284693,370633],[-446,818]],[[240417,376457],[5,-7664]],[[240422,368793],[-608,45],[-4,-1332]],[[239810,367506],[-304,42]],[[239506,367548],[-15,7177]],[[160687,368757],[-1095,46],[-337,-405]],[[159255,368398],[-342,754],[-149,3107],[-463,2405],[48,1825]],[[282836,372948],[-67,-2693]],[[282769,370255],[-815,2166],[-30,-1006],[-320,603]],[[281604,372018],[-242,1699]],[[249705,370432],[0,-110]],[[249705,370322],[-946,616]],[[248759,370938],[-796,-36]],[[247963,370902],[0,823]],[[238263,375223],[34,-4780]],[[238297,370443],[-1279,164]],[[237018,370607],[5,1084]],[[166715,374265],[-766,-4052],[-187,-2677],[-313,4],[-791,-4319]],[[164658,363221],[-269,1013],[-380,3366],[-298,3996]],[[254685,371663],[-553,-2946]],[[254132,368717],[-235,1246],[-123,-776]],[[253774,369187],[-201,1285]],[[242105,371036],[-9,-2450]],[[242096,368586],[-1209,159]],[[240887,368745],[-465,48]],[[198301,371688],[-2633,-144],[-352,-2740]],[[268041,373119],[135,-3677],[-93,-603]],[[268083,368839],[-64,309]],[[268019,369148],[-398,2375],[-439,725]],[[267182,372248],[-37,799]],[[273842,367755],[-4,20]],[[273838,367775],[-653,2964]],[[274386,373404],[-544,-5649]],[[251970,370938],[-927,-51]],[[251043,370887],[-313,73]],[[267182,372248],[-389,563],[-373,-1145]],[[266420,371666],[-518,1453]],[[265863,373116],[-284,-991],[-227,-2237]],[[265352,369888],[-515,438]],[[286401,371346],[-510,730],[-228,2729]],[[286401,372837],[0,-1491]],[[203687,373713],[-2,-6471]],[[203685,367242],[-1780,53]],[[201905,367295],[-90,12]],[[158120,372966],[-303,-2]],[[157817,372964],[-33,1342],[287,553],[49,-1893]],[[239506,367548],[-1222,189]],[[238284,367737],[13,2706]],[[264120,369815],[-276,-991]],[[263844,368824],[-589,2769]],[[263255,371593],[-242,1463]],[[224789,373420],[0,-4870]],[[224789,368550],[-1528,-11]],[[223261,368539],[-1,4888]],[[279384,369872],[-416,-2087]],[[278968,367785],[-186,-655]],[[278782,367130],[-282,1313]],[[278500,368443],[-442,1075],[-256,1749]],[[211942,371760],[-29,-11974]],[[211913,359786],[-2568,-76]],[[209345,359710],[-3196,-17]],[[206149,359693],[3,5545]],[[277630,369702],[-234,-1503],[-213,615],[-430,-1508],[-95,-1769]],[[276658,365537],[-630,2108]],[[276028,367645],[291,2275],[-143,1914]],[[245159,372762],[-6,-2032]],[[245153,370730],[-438,88],[-4,-1634],[287,-71],[-2,-1601]],[[244996,367512],[-1211,139]],[[243785,367651],[-302,26],[0,3251],[-151,2]],[[272829,369286],[-248,-1600]],[[272581,367686],[-815,1322],[-628,339],[-75,655]],[[281137,372636],[-25,-1023],[-602,-5508]],[[280510,366105],[-361,1085]],[[280149,367190],[-643,2877]],[[167514,370686],[-807,-4323],[-51,-2728],[-160,-1065],[-478,-109],[48,-890],[-436,-1627],[-318,-2892],[-1552,-1283],[-242,1461],[-239,3370]],[[163279,360600],[183,975],[522,1047],[674,599]],[[285850,370354],[-295,656]],[[285474,374122],[422,-2950],[651,-1010],[-346,-835],[-351,1027]],[[269091,372529],[-167,-3366],[109,-687],[-352,-3383]],[[268681,365093],[-160,2647],[-438,1099]],[[205228,370540],[-718,-4117]],[[204510,366423],[-823,2],[-2,817]],[[281604,372018],[-166,-3772]],[[281438,368246],[-287,-1612]],[[281151,366634],[-415,-1159],[-226,630]],[[270750,369798],[-954,-4451]],[[269796,365347],[-678,-1793]],[[269118,363554],[-32,-123]],[[269086,363431],[-466,1404]],[[268620,364835],[61,258]],[[246882,371764],[-41,-6070]],[[246841,365694],[-3,-838],[-515,-29]],[[246323,364827],[-104,1910],[11,4270],[-1077,-277]],[[216257,373489],[3,-6477]],[[216260,367012],[-85,2]],[[216175,367014],[-1352,13]],[[214823,367027],[0,4749]],[[257865,370292],[-200,-147],[146,-3005]],[[257811,367140],[-547,-1925],[-253,-1483]],[[257011,363732],[-559,3794]],[[256452,367526],[171,2699]],[[217476,373489],[0,-6490]],[[217476,366999],[-1216,13]],[[218693,368621],[0,-1623]],[[218693,366998],[-1157,2]],[[217536,367000],[-60,-1]],[[223261,368539],[4,-1604]],[[223265,366935],[-1481,-59]],[[221784,366876],[-36,1612]],[[226620,368609],[1,-1637]],[[226621,366972],[-1512,-41]],[[225109,366931],[-321,1],[1,1618]],[[232977,373422],[0,-6492]],[[232977,366930],[-1214,49]],[[231763,366979],[2,4042]],[[234197,372339],[-1,-5412]],[[234196,366927],[-1206,3]],[[232990,366930],[-13,0]],[[260851,370098],[153,-1651]],[[261004,368447],[-327,81]],[[260677,368528],[-207,-892]],[[260470,367636],[-655,342]],[[262219,371532],[-27,-1601]],[[262192,369931],[-96,-2448]],[[262096,367483],[-272,950],[-279,-894],[-214,1026],[-327,-118]],[[275618,371468],[-300,-1181],[80,-1043],[-490,-1589]],[[274908,367655],[-100,1092],[-720,-2035],[-246,1043]],[[266420,371666],[-159,-2460]],[[266261,369206],[-144,586],[-553,-949],[-155,569]],[[265409,369412],[-57,476]],[[263255,371593],[-527,-1619]],[[262728,369974],[-536,-43]],[[283955,369764],[143,-837]],[[284098,368927],[-199,-2026]],[[283899,366901],[-182,64]],[[283717,366965],[-298,1138]],[[283419,368103],[99,1639],[-146,1185],[-444,-783]],[[282928,370144],[-159,111]],[[158120,372966],[96,-2155],[271,-373],[409,-1981]],[[158896,368457],[-209,-645],[106,-2701]],[[158793,365111],[-4,-1305],[-464,-533],[77,-1486]],[[158402,361787],[-315,1659],[12,3042],[-319,2975],[37,3501]],[[268019,369148],[-408,283],[-84,-2105]],[[267527,367326],[-252,703],[-463,-1951],[-186,747],[-277,-815]],[[266349,366010],[-88,3196]],[[282769,370255],[-560,-2685]],[[282209,367570],[-433,1403],[-338,-727]],[[256452,367526],[-546,-454]],[[255906,367072],[-159,651],[-61,2673]],[[255686,370396],[-335,1439]],[[235506,371949],[0,-5388]],[[235506,366561],[0,-480]],[[235506,366081],[-1273,28]],[[234233,366109],[-37,818]],[[276028,367645],[-525,-1521]],[[275503,366124],[-183,484],[-294,-965]],[[275026,365643],[-118,2012]],[[206149,359693],[-183,-2]],[[205966,359691],[-1387,13]],[[204579,359704],[-147,937],[143,4467],[-65,1315]],[[237018,370607],[-20,-4323]],[[236998,366284],[-1492,277]],[[255686,370396],[-1221,-4086]],[[254465,366310],[33,525]],[[254498,366835],[-360,564],[-6,1318]],[[247963,370902],[2,-5312],[-199,54]],[[247766,365644],[-925,50]],[[214823,367027],[-2,-7366]],[[214821,359661],[-2674,122]],[[212147,359783],[-234,3]],[[198301,371688],[-141,-897],[-30,-2361],[-478,-2240],[-241,-2267],[2,-1425],[-247,-2726]],[[197166,359772],[-1855,-8]],[[199666,367650],[1,-7869]],[[199667,359781],[-2501,-9]],[[163279,360600],[-1048,-5634]],[[162231,354966],[-622,1773],[-205,2320]],[[161404,359059],[-32,3270]],[[263844,368824],[-156,-2928]],[[263688,365896],[-150,509],[-457,-2190]],[[263081,364215],[-5,2272],[-355,1234],[7,2253]],[[284693,370633],[402,-619],[175,-1718]],[[285270,368296],[-384,-510],[-28,-974]],[[284858,366812],[-760,2115]],[[259385,368154],[-66,-2032],[-241,-91]],[[259078,366031],[-869,-274]],[[258209,365757],[-398,1383]],[[278500,368443],[-229,-637],[32,-1405]],[[278303,366401],[-518,-5580]],[[277785,360821],[-108,-927],[-313,672]],[[277364,360566],[-363,2794],[-342,619]],[[276659,363979],[-1,1558]],[[277509,366213],[0,0]],[[184568,369085],[5,-9297]],[[184573,359788],[-3208,1]],[[231763,366979],[-8,-1627]],[[231755,365352],[-1561,65]],[[230194,365417],[-3,3232]],[[246323,364827],[-123,-4109]],[[246200,360718],[-515,61],[-148,783]],[[245537,361562],[-46,1372],[-349,1595],[-44,2975],[-102,8]],[[249705,370322],[275,-3107],[-171,-1185]],[[249809,366030],[-12,-1569]],[[249797,364461],[-367,-343],[-403,-1991]],[[249027,362127],[-283,3]],[[248744,362130],[15,8808]],[[243785,367651],[-25,-6959]],[[243760,360692],[-1207,135]],[[242553,360827],[-453,65]],[[242100,360892],[-4,7694]],[[253774,369187],[-63,-597],[-543,-371],[-221,-906]],[[252947,367313],[-159,351]],[[252788,367664],[8,3286]],[[252788,367664],[-169,-666],[-98,-2357],[240,-2056],[-183,-1538]],[[252578,361047],[0,1701],[-613,3308]],[[251965,366056],[5,4882]],[[283419,368103],[-491,2041]],[[251965,366056],[-547,-27],[-62,-614]],[[251356,365415],[-322,507]],[[251034,365922],[9,4965]],[[251034,365922],[-568,98]],[[250466,366020],[-657,10]],[[285850,370354],[308,-1053]],[[286158,369301],[-18,-1123]],[[286140,368178],[152,-3489],[-321,-311],[-554,3770]],[[248744,362130],[-259,19],[1,-1355],[-424,-247]],[[248062,360547],[-312,844],[16,4253]],[[273838,367775],[29,-1537],[-368,-993]],[[273499,365245],[-679,-1092]],[[272820,364153],[-382,1915]],[[272438,366068],[143,1618]],[[168203,368402],[-33,-2228],[201,-312],[167,-3441],[606,-1526],[212,-3239],[-22,-2583]],[[169334,355073],[-1717,-81],[0,-1561],[-890,26],[-3,-1596],[-459,20],[-299,-1621]],[[165966,350260],[-246,-1295],[-814,-376],[-3,-4046],[-991,-5107]],[[163912,339436],[-930,3751],[58,1792],[-142,1162]],[[162898,346141],[230,1144],[-1,2966],[-896,4715]],[[238284,367737],[-14,-2706]],[[238270,365031],[-1188,150]],[[237082,365181],[-84,1103]],[[265409,369412],[279,-3140]],[[265688,366272],[-442,-1825]],[[265246,364447],[-535,1286]],[[264711,365733],[-177,3782]],[[255906,367072],[-251,-1810],[146,-2558]],[[255801,362704],[-529,-953],[-438,810]],[[254834,362561],[-346,1709],[-23,2040]],[[283717,366965],[-7,-1437]],[[283710,365528],[-51,69]],[[283659,365597],[-117,-1255]],[[283542,364342],[-75,-143]],[[283467,364199],[-36,-77]],[[283431,364122],[-87,-195]],[[283344,363927],[-565,790]],[[282779,364717],[-265,33],[-366,1829],[61,991]],[[280149,367190],[-243,-2778]],[[279906,364412],[-397,-808]],[[279509,363604],[-259,695],[-282,3486]],[[287953,369116],[-346,-3596],[-150,-3564],[-151,2651],[266,5440],[255,74]],[[263081,364215],[-502,-2274]],[[262579,361941],[-398,1304]],[[262181,363245],[-37,1321],[-302,1001]],[[261842,365567],[254,1916]],[[272438,366068],[-555,-2441],[-498,580]],[[271385,364207],[-316,930],[-383,3657],[178,532]],[[254498,366835],[-802,-2924],[-19,-786]],[[253677,363125],[-271,-608]],[[253406,362517],[-71,2346],[-388,2450]],[[188715,359808],[-3143,-14]],[[185572,359794],[-999,-6]],[[266349,366010],[57,-1413]],[[266406,364597],[-349,1838],[-369,-163]],[[264711,365733],[-224,-683],[-203,-2441]],[[264284,362609],[-596,3287]],[[271385,364207],[-448,-1772]],[[270937,362435],[-326,-1378],[-364,-501]],[[270247,360556],[-283,4288],[-168,503]],[[286158,369301],[207,217],[310,-1576],[-73,-2371],[-462,2607]],[[268620,364835],[-243,-49],[-502,-1356]],[[267875,363430],[-354,1381],[6,2515]],[[282779,364717],[-405,-1350]],[[282374,363367],[-1213,1928]],[[281161,365295],[-10,1339]],[[284858,366812],[77,-164]],[[284935,366648],[-7,-2001],[-380,948],[-673,137],[24,1169]],[[240887,368745],[2,-7717]],[[240889,361028],[-605,68]],[[240284,361096],[-453,336]],[[239831,361432],[-21,6074]],[[161404,359059],[-763,408],[-257,-1537]],[[160384,357930],[-486,2766],[-658,1780],[-447,2635]],[[158896,368457],[359,-59]],[[261842,365567],[-522,-2203]],[[261320,363364],[-643,5164]],[[242100,360892],[-1211,136]],[[275026,365643],[-484,-1303]],[[274542,364340],[-690,-1813]],[[273852,362527],[-445,2381],[92,337]],[[230194,365417],[-2,-5660]],[[230192,359757],[-625,5]],[[229567,359762],[-1109,1]],[[228458,359763],[-15,8871]],[[228458,359763],[-876,-6]],[[227582,359757],[-948,0]],[[226634,359757],[-13,7215]],[[220213,368621],[49,-8799]],[[220262,359822],[-1515,-39]],[[218747,359783],[-1,7214],[-53,1]],[[221784,366876],[6,-7102]],[[221790,359774],[-1286,38]],[[220504,359812],[-242,10]],[[225109,366931],[7,-7184]],[[225116,359747],[-550,11]],[[224566,359758],[-1269,13]],[[223297,359771],[-32,7164]],[[261320,363364],[-485,-1545]],[[260835,361819],[-445,1352]],[[260390,363171],[-31,2226],[111,2239]],[[278782,367130],[-479,-729]],[[176229,341180],[677,-3534]],[[176906,337646],[-237,-294],[-2130,-5],[-3164,15]],[[171375,337362],[-1036,-166]],[[170339,337196],[73,1515],[-403,8050],[80,567],[-421,2802],[-73,2164],[-261,2779]],[[285316,364880],[167,-151]],[[285483,364729],[247,-950]],[[285730,363779],[-49,-868]],[[285681,362911],[-94,911],[-633,480],[-19,2346]],[[285270,368296],[233,-1658]],[[285503,366638],[-153,-1181]],[[285350,365457],[-34,-577]],[[260390,363171],[-161,-224]],[[260229,362947],[-452,-403],[-418,351]],[[259359,362895],[21,898],[-302,2238]],[[267875,363430],[-170,-1501],[19,-1797],[-189,-331]],[[267535,359801],[-167,368]],[[267368,360169],[-60,2883],[-338,936],[-80,1342],[-349,-222],[-82,-932]],[[266459,364176],[-53,421]],[[279509,363604],[-224,-3409]],[[279285,360195],[-519,777]],[[278766,360972],[-292,-176],[-159,1424],[-530,-1399]],[[239831,361432],[-1513,176]],[[238318,361608],[-48,3423]],[[253406,362517],[-128,-3093]],[[253278,359424],[-345,1548],[-333,-767]],[[252600,360205],[-233,1071]],[[252367,361276],[211,-229]],[[245537,361562],[-556,-177],[-16,-3766]],[[244965,357619],[-1212,98]],[[243753,357717],[7,2975]],[[201905,367295],[0,-3259],[563,-4371]],[[202468,359665],[-2633,116]],[[199835,359781],[-168,0]],[[276659,363979],[-321,-1647],[-128,663],[-334,-926]],[[275876,362069],[-139,-176]],[[275737,361893],[-37,2240],[-197,1991]],[[276171,365518],[-31,-844]],[[276140,364674],[211,-935],[217,1689],[-397,90]],[[257011,363732],[-117,-2665]],[[256894,361067],[-313,-151]],[[256581,360916],[-547,-372],[-28,566]],[[256006,361110],[-205,1594]],[[281161,365295],[-22,-3278]],[[281139,362017],[-569,-758]],[[280570,361259],[-694,2327],[30,826]],[[204579,359704],[-803,-10]],[[203776,359694],[-1308,-29]],[[258404,362945],[-624,205],[-143,-3375]],[[257637,359775],[-743,1292]],[[258209,365757],[195,-2812]],[[216175,367014],[3,-7320]],[[216178,359694],[-1317,-41]],[[214861,359653],[-40,8]],[[217536,367000],[3,-7258]],[[217539,359742],[-1361,-48]],[[218747,359783],[-871,-31]],[[217876,359752],[-337,-10]],[[232990,366930],[-4,-7162]],[[232986,359768],[-736,0]],[[232250,359768],[-495,-4]],[[231755,359764],[0,5588]],[[226634,359757],[-862,-11]],[[225772,359746],[-656,1]],[[223297,359771],[-1270,0]],[[222027,359771],[-237,3]],[[234233,366109],[4,-6336]],[[234237,359773],[-931,-5]],[[233306,359768],[-320,0]],[[254834,362561],[-147,-2743]],[[254687,359818],[-400,-772]],[[254287,359046],[-460,3989],[-150,90]],[[285503,366638],[154,-1165],[635,-2093],[-66,-1011]],[[286226,362369],[53,-611]],[[286279,361758],[-115,-210]],[[286164,361548],[-434,2231]],[[285483,364729],[-133,728]],[[237082,365181],[-19,-4504]],[[237063,360677],[-1557,161]],[[235506,360838],[0,5243]],[[275737,361893],[-473,-1711],[-546,-687]],[[274718,359495],[-101,1954]],[[274617,361449],[153,1098]],[[274770,362547],[-228,1793]],[[266459,364176],[-121,-2911],[119,-2629]],[[266457,358636],[-224,321]],[[266233,358957],[-784,1845]],[[265449,360802],[-274,2103],[71,1542]],[[264091,359038],[-613,-1732]],[[263478,357306],[-281,2110],[-435,319]],[[262762,359735],[-183,2206]],[[264284,362609],[-193,-3571]],[[235506,360838],[0,-1077]],[[235506,359761],[-1085,11]],[[234421,359772],[-184,1]],[[259359,362895],[-159,-1977]],[[259200,360918],[-469,373],[-327,1654]],[[276140,364674],[31,844]],[[252367,361276],[-1008,2721]],[[251359,363997],[-3,1418]],[[272820,364153],[-287,-1784],[161,-863],[-535,-1063],[70,-474]],[[272229,359969],[-685,-1435],[-271,477]],[[271273,359011],[-336,3424]],[[250466,366020],[-48,-4181],[273,-849]],[[250691,360990],[93,-1565]],[[250784,359425],[-347,1557],[-155,-1006]],[[250282,359976],[-177,540],[-308,3945]],[[265449,360802],[-249,-1448],[-375,-410]],[[264825,358944],[-564,-170]],[[264261,358774],[-170,264]],[[251359,363997],[-14,-27]],[[251345,363970],[-427,-1200],[-227,-1780]],[[267368,360169],[-217,-969],[-641,-1367]],[[266510,357833],[-53,803]],[[283884,365227],[-225,370]],[[283710,365528],[174,-301]],[[248062,360547],[-410,-2218]],[[247652,358329],[-1170,83]],[[246482,358412],[-282,2306]],[[283884,365227],[441,265],[239,-1371]],[[284564,364121],[-405,-2255]],[[284159,361866],[-678,-2215]],[[283481,359651],[-2,3311]],[[283479,362962],[63,1380]],[[285316,364880],[0,0]],[[262181,363245],[-452,-3530],[-71,-1326]],[[261658,358389],[-614,241]],[[261044,358630],[-209,3189]],[[270247,360556],[-500,-1317]],[[269747,359239],[-387,950],[-242,3365]],[[231755,359764],[-101,-4]],[[231654,359760],[-1462,-3]],[[273852,362527],[-162,-1380]],[[273690,361147],[-561,-945],[-310,462],[-429,-1769]],[[272390,358895],[-161,1074]],[[283467,364199],[-36,-77]],[[282112,359573],[-317,632]],[[281795,360205],[-220,-115],[-436,1927]],[[282374,363367],[-290,-906],[28,-2888]],[[238318,361608],[-4,-1905]],[[238314,359703],[-2,-1358]],[[238312,358345],[-1259,165]],[[237053,358510],[10,2167]],[[160384,357930],[-174,-102]],[[160210,357828],[-281,264],[-163,-998]],[[159766,357094],[-380,2272],[-465,-406],[-519,2827]],[[283344,363927],[135,-965]],[[283481,359651],[-614,-2144]],[[282867,357507],[-109,310]],[[282758,357817],[-299,1492],[-347,264]],[[269086,363431],[-450,-1507],[10,-1311],[-407,-1312]],[[268239,359301],[-193,765],[-584,-1129],[73,864]],[[250282,359976],[-572,-2623]],[[249710,357353],[-478,-187]],[[249232,357166],[9,1268],[-273,2899],[59,794]],[[280570,361259],[-138,-3504]],[[280432,357755],[-433,-3598]],[[279999,354157],[-48,2703],[-666,3335]],[[274770,362547],[-153,-1098]],[[274718,359495],[-251,-985]],[[274467,358510],[-297,-981]],[[274170,357529],[-480,3618]],[[285497,362381],[-63,-1488],[-424,-1183]],[[285010,359710],[-289,-963]],[[284721,358747],[-34,2055],[-528,1064]],[[284564,364121],[581,-507],[352,-1233]],[[277364,360566],[-130,-3464]],[[277234,357102],[-337,-1259],[-663,787],[-116,-677]],[[276118,355953],[-70,868],[-471,579]],[[275577,357400],[360,2852],[-61,1817]],[[251671,358926],[-486,-648],[-308,443]],[[250877,358721],[-93,704]],[[251345,363970],[326,-5044]],[[252600,360205],[-4,-1497]],[[252596,358708],[-916,77]],[[251680,358785],[-9,141]],[[286164,361548],[133,-1959]],[[286297,359589],[-664,2556],[48,766]],[[269747,359239],[82,-1210],[-301,-551]],[[269528,357478],[-635,41],[-381,-1463]],[[268512,356056],[-298,1723]],[[268214,357779],[25,1522]],[[268976,359021],[0,0]],[[259200,360918],[-148,-2365]],[[259052,358553],[-666,-2940]],[[258386,355613],[14,579],[-508,429],[-79,979]],[[257813,357600],[-176,2175]],[[262762,359735],[-638,-2584]],[[262124,357151],[-422,-77]],[[261702,357074],[-44,1315]],[[261044,358630],[-402,-2235]],[[260642,356395],[-399,432]],[[260243,356827],[-14,6120]],[[254287,359046],[-782,-1740]],[[253505,357306],[-227,2118]],[[286374,362810],[-59,-946]],[[286315,361864],[-36,-106]],[[286226,362369],[148,441]],[[260243,356827],[-662,-2212]],[[259581,354615],[-529,3938]],[[256006,361110],[-211,-8003]],[[255795,353107],[-851,-64]],[[254944,353043],[-147,-18]],[[254797,353025],[95,6136],[-205,657]],[[285916,358061],[-1039,-4907]],[[284877,353154],[-34,77]],[[284843,353231],[-42,1109]],[[284801,354340],[305,3818],[-96,1552]],[[285497,362381],[59,-1872],[467,-1558],[-107,-890]],[[271273,359011],[-157,-551]],[[271116,358460],[-308,-1198],[-364,-180],[-73,-1054],[-635,-1658]],[[269736,354370],[-208,3108]],[[278766,360972],[-356,-9725]],[[278410,351247],[-345,-5]],[[278065,351242],[106,761],[-263,1161],[-285,-492],[86,-1440]],[[277709,351232],[-112,-1]],[[277597,351231],[-569,23]],[[277028,351254],[206,5848]],[[275577,357400],[-419,-1373],[-218,-1669]],[[274940,354358],[-473,4152]],[[249232,357166],[-26,-4320],[-719,34]],[[248487,352880],[-528,25]],[[247959,352905],[-9,1582],[-298,3842]],[[281795,360205],[-66,-4559]],[[281729,355646],[-596,560],[-701,1549]],[[286315,361864],[307,-509],[-325,-1766]],[[284721,358747],[-1328,-4408]],[[283393,354339],[-167,251],[88,2640],[-447,277]],[[246482,358412],[44,-2142]],[[246526,356270],[-1264,228]],[[245262,356498],[-302,38],[5,1083]],[[240284,361096],[-17,-4867]],[[240267,356229],[-1101,142]],[[239166,356371],[-105,9],[12,3261],[-759,62]],[[274170,357529],[-841,-1353]],[[273329,356176],[-156,-695],[-455,-110]],[[272718,355371],[-328,3524]],[[257813,357600],[-222,-728],[-201,-3628]],[[257390,353244],[-830,-106]],[[256560,353138],[21,7778]],[[256560,353138],[-150,-14]],[[256410,353124],[-615,-17]],[[242553,360827],[-66,-4877]],[[242487,355950],[-1818,220]],[[240669,356170],[-402,59]],[[253505,357306],[130,-2237]],[[253635,355069],[-1044,65]],[[252591,355134],[5,3574]],[[250877,358721],[-61,-2945]],[[250816,355776],[-215,-1257],[64,-1203]],[[250665,353316],[-203,-1647],[-216,1258]],[[250246,352927],[-536,4426]],[[279999,354157],[-151,-413],[-88,-2490]],[[279760,351254],[-173,-6]],[[279587,351248],[-953,1]],[[278634,351249],[-224,-2]],[[243753,357717],[-40,-7254]],[[243713,350463],[-1248,-11]],[[242465,350452],[22,5498]],[[237053,358510],[-17,-3424]],[[237036,355086],[-1532,348]],[[235504,355434],[2,4327]],[[266233,358957],[17,-975],[-599,-2206],[-221,-1817]],[[265430,353959],[-521,3091],[-84,1894]],[[282758,357817],[6,-3369],[-310,-3129]],[[282454,351319],[-369,-15]],[[282085,351304],[-408,-9]],[[281677,351295],[52,4351]],[[268214,357779],[-540,-707],[-177,-2081],[-906,-1449]],[[266591,353542],[-141,2662],[60,1629]],[[272718,355371],[-733,-1028],[-226,-1288]],[[271759,353055],[-261,2814],[-382,2591]],[[192648,359743],[0,-24859],[484,-3],[-46,-2692],[-3,-12919],[-57,-4901],[47,-1624],[-31,-12942],[-90,-9],[0,-3908]],[[192952,295886],[-304,169]],[[192648,296055],[0,7876],[-2089,0],[0,4902]],[[190559,308833],[0,51008]],[[190559,308833],[-267,68],[-549,2096],[-586,1353],[-625,-722],[-215,1094]],[[188317,312722],[9,6149],[-629,15],[-1,3314],[-1550,-155],[-4,3263],[-296,21],[4,2067],[-380,-317],[-149,1052],[-899,1045],[-616,2800],[-445,402]],[[183361,332378],[1,5119],[67,1656],[-124,2774],[364,945],[70,1118],[518,1618],[615,865],[469,2332],[-89,1927],[91,1456],[24,3833],[237,2875],[-32,898]],[[254797,353025],[-1049,764]],[[253748,353789],[-113,1280]],[[233306,359768],[-67,-1052],[0,-6427]],[[233239,352289],[-1054,-2]],[[232185,352287],[0,6411],[65,1070]],[[231654,359760],[-1,-10708]],[[231653,349052],[-2,-4885],[-743,13]],[[230908,344180],[41,1148],[-279,231],[-356,1845],[-191,-673],[-230,2345],[-237,377],[-143,2237],[-300,-1766],[-371,678]],[[228842,350602],[273,1700],[-394,-68]],[[228721,352234],[-27,1705],[357,-35],[129,1255],[379,564],[8,4039]],[[224566,359758],[31,-9970]],[[224597,349788],[-211,-1343],[-481,1079],[-172,1064],[-325,12]],[[223408,350600],[-47,1718],[-453,3424],[-433,680]],[[222475,356422],[-448,3349]],[[234421,359772],[22,-6122]],[[234443,353650],[-18,-2995]],[[234425,350655],[-897,9]],[[233528,350664],[-2,1625],[-287,0]],[[232185,352287],[-7,-3237]],[[232178,349050],[-525,2]],[[227582,359757],[-1,-7541]],[[227581,352216],[-1789,-1]],[[225792,352215],[-20,7531]],[[225792,352215],[0,-2429]],[[225792,349786],[-1195,2]],[[228721,352234],[-1137,-18]],[[227584,352216],[-3,0]],[[235504,355434],[2,-1836]],[[235506,353598],[-1063,52]],[[222475,356422],[0,-4178],[-865,-44]],[[221610,352200],[-1107,8]],[[220503,352208],[1,7604]],[[203776,359694],[98,-2074],[-26,-3169],[117,-4650],[-91,-2221],[-240,-894],[560,-1233],[337,-2424],[573,-1622]],[[205104,341407],[-115,-752],[-408,114]],[[204581,340769],[2,439],[-987,-6],[48,-1327],[-534,2]],[[203110,339877],[-6,660]],[[203104,340537],[2,655],[-1777,-47],[0,4050],[-2059,61]],[[199270,345256],[16,10890],[480,2044],[69,1591]],[[199270,345256],[-7,-4087]],[[199263,341169],[-3954,39]],[[195309,341208],[2,18556]],[[195309,341208],[0,-19411]],[[195309,321797],[-2,-7083]],[[195307,314714],[-2,-14912]],[[195305,299802],[-837,-14],[-16,-899],[-396,-1421]],[[194056,297468],[-882,-3136],[-222,1554]],[[212147,359783],[-1,-9303]],[[212146,350480],[-110,1],[3,-8288]],[[212039,342193],[-1,-5881]],[[212038,336312],[-930,12]],[[211108,336324],[28,6447],[-1196,-11],[1,1644],[-599,9],[0,810]],[[209342,345223],[3,14487]],[[214861,359653],[-13,-9170]],[[214848,350483],[-361,-4]],[[214487,350479],[-2341,1]],[[217876,359752],[-23,-9286]],[[217853,350466],[-365,-7]],[[217488,350459],[-1502,5]],[[215986,350464],[-1138,19]],[[220503,352208],[-3,-1741]],[[220500,350467],[-1510,-7]],[[218990,350460],[-1137,6]],[[284801,354340],[42,-1109]],[[284877,353154],[-51,-1711]],[[284826,351443],[-1,-152]],[[284825,351291],[-691,42]],[[284134,351333],[-370,-25]],[[283764,351308],[-248,1789],[-323,550],[200,692]],[[263478,357306],[2,-788],[-559,-4123]],[[262921,352395],[-20,2]],[[262901,352397],[-528,227]],[[262373,352624],[-249,4527]],[[205966,359691],[58,-1481],[-86,-3571],[-387,-996],[-23,-2199],[164,-1117],[-61,-4280]],[[205631,346047],[-183,-448],[-37,-1983],[-307,-2209]],[[209342,345223],[-1191,14]],[[208151,345237],[-1196,-14],[2,802],[-1326,22]],[[239166,356371],[-30,-5933]],[[239136,350438],[-751,14]],[[238385,350452],[30,5979],[-103,1914]],[[162898,346141],[-230,-1190],[-457,1973],[-260,-927],[-61,1184],[-572,3411],[-184,-60],[-18,1981],[-418,1414],[45,778],[-533,3123]],[[265430,353959],[-148,-1854]],[[265282,352105],[-222,46]],[[265060,352151],[-603,36]],[[264457,352187],[-224,1543],[-135,2569],[163,2475]],[[286694,356681],[-124,-214]],[[286570,356467],[-12,177]],[[286558,356644],[136,37]],[[286870,358326],[-79,-1656]],[[286791,356670],[-328,768],[3,1657],[404,-769]],[[264457,352187],[-96,-3]],[[264361,352184],[-1440,211]],[[266591,353542],[-596,-1194]],[[265995,352348],[-713,-243]],[[251680,358785],[-2,-3230]],[[251678,355555],[-862,221]],[[252591,355134],[-10,-4640]],[[252581,350494],[-77,9]],[[252504,350503],[-835,21]],[[251669,350524],[9,5031]],[[261702,357074],[-224,-4258]],[[261478,352816],[-392,-139]],[[261086,352677],[-444,3718]],[[259581,354615],[11,-1748]],[[259592,352867],[-645,209]],[[258947,353076],[-577,205]],[[258370,353281],[16,2332]],[[238385,350452],[-786,-3]],[[237599,350449],[-586,0]],[[237013,350449],[23,4637]],[[287471,351575],[127,-160]],[[287598,351415],[-118,-3]],[[287480,351412],[-9,163]],[[287748,351417],[-69,0]],[[287679,351417],[-139,3116],[-110,-3119]],[[287430,351414],[-90,0]],[[287340,351414],[-61,1]],[[287279,351415],[-242,-1]],[[287037,351414],[1,2143],[150,497],[-378,1440],[-61,1238]],[[286749,356732],[42,-62]],[[286870,358326],[530,-178],[348,-6731]],[[274940,354358],[-364,-883],[-48,-1925]],[[274528,351550],[-629,24]],[[273899,351574],[-213,1696]],[[273686,353270],[-50,396]],[[273636,353666],[-307,2510]],[[270321,353192],[0,0]],[[270321,353192],[-338,-939]],[[269983,352253],[-141,0]],[[269842,352253],[-106,2117]],[[271759,353055],[-114,-500]],[[271645,352555],[-501,44]],[[271144,352599],[-890,-363]],[[270254,352236],[67,956]],[[247959,352905],[-202,-2472]],[[247757,350433],[-990,13]],[[246767,350446],[-44,3366],[-197,2458]],[[286570,356467],[-316,-132]],[[286254,356335],[304,309]],[[286305,356801],[-99,491]],[[286206,357292],[36,564]],[[286242,357856],[63,-1055]],[[286206,357292],[-103,-958],[-95,-4919]],[[286008,351415],[-140,0]],[[285868,351415],[-1042,28]],[[285916,358061],[-22,-1249],[348,1044]],[[163912,339436],[276,-2209]],[[164188,337227],[-3150,123]],[[161038,337350],[-326,1746],[-77,1736],[-231,787],[-396,3160],[-504,2054],[-221,5106],[442,1738],[41,3417]],[[283764,351308],[-1310,11]],[[283158,354580],[0,0]],[[268512,356056],[-491,-2311],[-105,-1527]],[[267916,352218],[-1356,66]],[[266560,352284],[-565,64]],[[281677,351295],[-774,-7]],[[280903,351288],[-371,-27]],[[280532,351261],[-772,-7]],[[262373,352624],[-838,203]],[[261535,352827],[-57,-11]],[[245262,356498],[-28,-6068]],[[245234,350430],[-783,-12]],[[244451,350418],[-118,11]],[[244333,350429],[-620,34]],[[269842,352253],[-878,-29]],[[268964,352224],[-617,-6]],[[268347,352218],[-431,0]],[[258370,353281],[-422,-314]],[[257948,352967],[-558,277]],[[276118,355953],[-148,-276],[114,-4413]],[[276084,351264],[-1077,151]],[[275007,351415],[-479,135]],[[250246,352927],[-253,-2472]],[[249993,350455],[-185,-21]],[[249808,350434],[-152,5]],[[249656,350439],[-17,-3004]],[[249639,347435],[-129,1228],[-367,440],[-80,-746],[-583,46]],[[248480,348403],[7,4477]],[[286305,356801],[-51,-466]],[[286694,356681],[55,51]],[[287037,351414],[-532,-2]],[[286505,351412],[-497,3]],[[277028,351254],[-871,10]],[[276157,351264],[-73,0]],[[276536,353676],[0,0]],[[181366,356861],[18,-12097],[-305,-3168],[-223,-193],[-382,2417],[-725,-8],[-349,-1053],[144,-4363],[76,-6299],[227,-3470],[73,-3058],[-217,-1125],[37,-1876]],[[179740,322568],[-2834,15078]],[[261086,352677],[-980,63]],[[260106,352740],[-514,127]],[[246767,350446],[-581,-1]],[[246186,350445],[-952,-15]],[[240669,356170],[-21,-5741]],[[240648,350429],[-227,4]],[[240421,350433],[-1233,7]],[[239188,350440],[-52,-2]],[[223408,350600],[13,-6429]],[[223421,344171],[-1189,52]],[[222232,344223],[-595,-4],[-27,7981]],[[273636,353666],[50,-396]],[[273899,351574],[-178,49]],[[273721,351623],[-1258,240]],[[272463,351863],[-903,251]],[[271560,352114],[85,441]],[[242465,350452],[-84,-5]],[[242381,350447],[-1056,0]],[[241325,350447],[-677,-18]],[[251669,350524],[-28,4]],[[251641,350528],[-22,-4]],[[251619,350524],[-191,1382],[-763,1410]],[[237013,350449],[-1507,12]],[[235506,350461],[0,3137]],[[253748,353789],[47,-3359]],[[253795,350430],[-1214,64]],[[170339,337196],[-4266,59]],[[166073,337255],[29,8918],[143,-17],[5,2473],[-284,1631]],[[254944,353043],[136,-5034]],[[255080,348009],[-639,-725],[-444,466]],[[253997,347750],[-26,130]],[[253971,347880],[-176,2550]],[[235506,350461],[153,-6282]],[[235659,344179],[-652,-11]],[[235007,344168],[-597,9]],[[234410,344177],[15,6478]],[[257413,348713],[-200,-1048],[-241,622]],[[256972,348287],[-208,-250],[-369,1607]],[[256395,349644],[15,3480]],[[257948,352967],[-373,-4226],[-162,-28]],[[258947,353076],[-67,-2837]],[[258880,350239],[-152,-2605]],[[258728,347634],[-470,-222],[-397,-1685]],[[257861,345727],[-448,2986]],[[249808,350434],[-152,5]],[[251619,350524],[-1425,9]],[[250194,350533],[-201,-78]],[[256395,349644],[-463,-2486]],[[255932,347158],[-632,238]],[[255300,347396],[-220,613]],[[278065,351242],[-356,-10]],[[260035,350463],[-39,-1633]],[[259996,348830],[-420,265]],[[259576,349095],[-528,341],[-168,803]],[[260106,352740],[-71,-2277]],[[270254,352236],[-271,17]],[[248480,348403],[6,-7255]],[[248486,341148],[-919,-51]],[[247567,341097],[-247,-14]],[[247320,341083],[522,3829]],[[247842,344912],[352,1894],[-43,1810],[-211,1819],[-183,-2]],[[262901,352397],[149,-1465]],[[263050,350932],[-592,1050],[-298,-536],[-194,-2702]],[[261966,348744],[-457,2311]],[[261509,351055],[26,1772]],[[261509,351055],[-433,-573],[-153,-1811]],[[260923,348671],[-583,2219],[-305,-427]],[[270706,350628],[-572,-2009],[-308,-74]],[[269826,348545],[-389,914],[-672,-257]],[[268765,349202],[199,3022]],[[271144,352599],[-438,-1971]],[[271560,352114],[-142,-3667]],[[271418,348447],[-528,-1942]],[[270890,346505],[-41,-398]],[[270849,346107],[-351,1894],[300,1976],[-92,651]],[[264361,352184],[5,-1438],[-252,-901],[56,-3381],[-120,-1264]],[[264050,345200],[-190,-992]],[[263860,344208],[-474,1990],[-250,1870]],[[263136,348068],[117,455],[-203,2409]],[[266560,352284],[206,-1169],[31,-2258]],[[266797,348857],[-174,-720],[-607,-561]],[[266016,347576],[-183,13],[-202,1689],[-279,-295]],[[265352,348983],[-292,3168]],[[228842,350602],[-62,-3232],[299,0],[0,-1618]],[[229079,345752],[-602,-1],[-1,-1623],[-593,-2]],[[227883,344126],[-297,100]],[[227586,344226],[-2,7990]],[[268347,352218],[-502,-560],[-752,-3146]],[[267093,348512],[-296,345]],[[233528,350664],[-299,-2],[-13,-8097]],[[233216,342565],[-366,1],[-131,1627],[-400,1]],[[232319,344194],[-149,-1],[8,4857]],[[265352,348983],[-275,-2785]],[[265077,346198],[-193,-791],[-429,316],[-38,-1253],[-367,730]],[[268765,349202],[-61,-397]],[[268704,348805],[-665,-1447],[-393,-1683]],[[267646,345675],[-224,1918],[-258,-1047]],[[267164,346546],[-71,1966]],[[227586,344226],[-599,4]],[[226987,344230],[-1193,4]],[[225794,344234],[-2,5552]],[[222232,344223],[4,-2818]],[[222236,341405],[-226,-158],[-275,-2614],[-163,-423],[-440,843],[-101,2155],[-521,-2269]],[[220510,338939],[0,3261]],[[220510,342200],[-10,8267]],[[272463,351863],[277,-3899]],[[272740,347964],[-622,-2325]],[[272118,345639],[-700,2808]],[[263136,348068],[-494,-1684],[-81,-2309]],[[262561,344075],[-537,-331]],[[262024,343744],[-54,115]],[[261970,343859],[103,956],[-107,3929]],[[273721,351623],[-182,-2986]],[[273539,348637],[-167,-515],[-189,1242],[-443,-1400]],[[230908,344180],[-83,5]],[[230825,344185],[-901,-43]],[[229924,344142],[-551,-16],[0,1626],[-294,0]],[[275007,351415],[-33,-5380]],[[274974,346035],[-1,-378]],[[274973,345657],[-247,764],[-926,-861]],[[273800,345560],[12,1685],[-273,1392]],[[285868,351415],[140,-748]],[[286008,350667],[106,-2464]],[[286114,348203],[-296,-486]],[[285818,347717],[-335,-961]],[[285483,346756],[-266,1180],[-452,775]],[[284765,348711],[60,2580]],[[287518,346134],[-187,1417]],[[287331,347551],[-272,272],[-554,3589]],[[287279,351415],[112,-2597],[320,-2365],[229,-3945],[-422,3626]],[[287748,351417],[261,-5943]],[[288009,345474],[-7,-9]],[[288002,345465],[-124,1107],[-199,4845]],[[287598,351415],[-258,-1]],[[287430,351414],[50,-2]],[[276157,351264],[-22,-5309]],[[276135,345955],[-1161,80]],[[287331,347551],[294,-3319],[-296,418],[-595,3434]],[[286734,348084],[-726,2583]],[[282085,351304],[5,-705]],[[282090,350599],[-40,-2322],[-263,-3338]],[[281787,344939],[-837,1177]],[[280950,346116],[82,751],[-129,4421]],[[284010,345760],[-232,-1458]],[[283778,344302],[-264,840],[-153,2057],[-292,-389],[-26,2141],[-250,1168],[-703,480]],[[284134,351333],[123,-1349],[-247,-4224]],[[284765,348711],[428,-836],[170,-2171]],[[285363,345704],[-1353,56]],[[279587,351248],[-16,-5692]],[[279571,345556],[-415,60]],[[279156,345616],[-565,57]],[[278591,345673],[43,5576]],[[280950,346116],[-322,-1897],[-207,206]],[[280421,344425],[-40,5196],[151,1640]],[[280421,344425],[-138,-2848]],[[280283,341577],[-564,913]],[[279719,342490],[-155,442],[7,2624]],[[277597,351231],[-60,-5439]],[[277537,345792],[-1,-134]],[[277536,345658],[-1401,297]],[[278591,345673],[-288,31]],[[278303,345704],[-766,88]],[[261970,343859],[-836,1715],[-211,1218]],[[260923,346792],[0,1879]],[[260923,346792],[-350,-1704],[-444,507]],[[260129,345595],[-185,949],[52,2286]],[[283778,344302],[137,-1341],[-235,-398]],[[283680,342563],[-211,-1306]],[[283469,341257],[-343,603],[-21,991],[-459,1163]],[[282646,344014],[-526,-168],[-333,1093]],[[234410,344177],[-298,-4],[1,-1623],[-250,5]],[[233863,342555],[-647,10]],[[270849,346107],[-412,-3020]],[[270437,343087],[-395,999]],[[270042,344086],[-95,1420],[-234,365]],[[269713,345871],[113,2674]],[[286734,348084],[37,-1380],[441,-2721],[-295,-509],[-337,1726]],[[286580,345200],[-247,782],[-219,2221]],[[251641,350528],[29,-1722],[-373,-22],[-27,-3471]],[[251270,345313],[-542,-338]],[[250728,344975],[-915,150]],[[249813,345125],[342,3659],[39,1749]],[[225794,344234],[-297,0]],[[225497,344234],[-1188,0]],[[224309,344234],[-888,-63]],[[252504,350503],[-37,-6507]],[[252467,343996],[-452,-1664]],[[252015,342332],[-416,1162],[-329,1819]],[[249813,345125],[-408,-510]],[[249405,344615],[-185,1255],[449,35],[-218,1039],[188,491]],[[215988,342195],[-1503,-2]],[[214485,342193],[2,8286]],[[215986,350464],[2,-8269]],[[253971,347880],[-287,-9],[29,-1852],[-361,-2613]],[[253352,343406],[3,475],[-888,115]],[[217487,342236],[0,-43]],[[217487,342193],[-1499,2]],[[217488,350459],[-1,-8223]],[[214485,342193],[-2446,0]],[[218990,350460],[-2,-8244]],[[218988,342216],[-1501,20]],[[220510,342200],[-1504,15]],[[219006,342215],[-18,1]],[[237599,350449],[-66,-2391],[209,-1187]],[[237742,346871],[-201,-1331]],[[237541,345540],[-237,-554],[-1005,172],[-161,-2143],[-448,53]],[[235690,343068],[-31,1111]],[[244333,350429],[-14,-3019],[-310,36],[0,-1628],[-350,62]],[[243659,345880],[-1297,147]],[[242362,346027],[19,4420]],[[239188,350440],[-10,-7019]],[[239178,343421],[-500,72]],[[238678,343493],[-199,23],[-297,3291],[-440,64]],[[244451,350418],[275,-1428],[138,-3024]],[[244864,345966],[-252,-503],[-21,-6336]],[[244591,339127],[-295,862],[-689,91]],[[243607,340080],[78,1093],[-26,4707]],[[246125,346133],[-9,-2184]],[[246116,343949],[-923,327],[-329,1690]],[[246186,350445],[92,-4019],[-153,-293]],[[240421,350433],[-86,-131],[-16,-7014]],[[240319,343288],[-151,20]],[[240168,343308],[-990,113]],[[241325,350447],[-50,-4301],[214,-303],[163,-1656],[2,-1854]],[[241654,342333],[-1188,137],[-147,818]],[[242362,346027],[-107,-2387]],[[242255,343640],[-6,-1372],[-298,32],[-8,-1620],[-297,34]],[[241646,340714],[8,1619]],[[247842,344912],[-364,-14],[3,1094],[-1356,141]],[[166073,337255],[-1825,-23]],[[164248,337232],[-60,-5]],[[259576,349095],[-440,-2424]],[[259136,346671],[-408,963]],[[256972,348287],[-236,-4733],[-157,-1543]],[[256579,342011],[-357,79]],[[256222,342090],[89,2409],[-69,2509],[-310,150]],[[256334,346649],[0,0]],[[269713,345871],[-270,-1826],[-440,-1091]],[[269003,342954],[-147,935],[39,5067],[-191,-151]],[[273800,345560],[-24,-3359]],[[273776,342201],[-410,-186]],[[273366,342015],[-834,-920]],[[272532,341095],[-604,2256]],[[271928,343351],[190,2288]],[[266016,347576],[-182,-3348]],[[265834,344228],[-583,405]],[[265251,344633],[-174,1565]],[[260129,345595],[-76,-1982]],[[260053,343613],[-159,-705],[-545,-143]],[[259349,342765],[-213,3906]],[[249405,344615],[100,-1065],[-238,-810],[-78,-1541]],[[249189,341199],[-703,-51]],[[232319,344194],[0,-4874],[-162,-839]],[[232157,338481],[-593,18]],[[231564,338499],[9,4067],[-746,8],[-2,1611]],[[267164,346546],[-203,141],[-387,-2271]],[[266574,344416],[-254,92],[-305,-1844]],[[266015,342664],[-181,1564]],[[257861,345727],[219,-2691]],[[258080,343036],[-288,-2463]],[[257792,340573],[-469,1261],[-395,312],[-275,-1179],[-74,1044]],[[269003,342954],[-22,-1048]],[[268981,341906],[-95,482],[-414,-1435],[-99,-1242],[-215,431]],[[268158,340142],[-746,4389]],[[267412,344531],[234,1144]],[[271928,343351],[-738,-111]],[[271190,343240],[-274,1942],[-26,1323]],[[286580,345200],[260,-2060],[-166,-57],[-563,1793],[417,-1963],[-516,-159]],[[286012,342754],[-231,471],[37,4492]],[[263860,344208],[277,-2132]],[[264137,342076],[-291,-1174],[-653,-1442]],[[263193,339460],[-112,1610],[-520,3005]],[[255300,347396],[-148,-2919]],[[255152,344477],[-646,1244],[-421,-30]],[[254085,345691],[-88,2059]],[[254085,345691],[76,-2249],[-252,-3271],[243,-246],[-104,-1723]],[[254048,338202],[-22,-470]],[[254026,337732],[-577,561]],[[253449,338293],[-110,15],[13,5098]],[[259349,342765],[126,-2327]],[[259475,340438],[-385,-123]],[[259090,340315],[-438,450],[-572,2271]],[[286012,342754],[225,-326],[-290,-1136],[-496,1123],[-83,1530],[115,2811]],[[267412,344531],[-191,-1782]],[[267221,342749],[-165,989],[-482,678]],[[256222,342090],[-60,-1685]],[[256162,340405],[-922,637]],[[255240,341042],[-88,3435]],[[238678,343493],[80,-2934],[-203,-1599],[13,-2198]],[[238568,336762],[-493,95]],[[238075,336857],[-599,-165]],[[237476,336692],[-145,21]],[[237331,336713],[53,6146],[157,2681]],[[262024,343744],[-408,-706],[-50,-2262]],[[261566,340776],[-126,977],[-555,938],[-378,-1246]],[[260507,341445],[-454,2168]],[[265251,344633],[-424,-2186],[97,-598],[-378,-805],[-214,-1552]],[[264332,339492],[-195,2584]],[[274973,345657],[38,-1938],[-162,-1684]],[[274849,342035],[-546,77]],[[274303,342112],[-527,89]],[[271190,343240],[205,-849],[-197,-1933]],[[271198,340458],[-379,-47]],[[270819,340411],[-107,-893]],[[270712,339518],[-146,571],[-129,2998]],[[281787,344939],[-692,-7162]],[[281095,337777],[-139,1398],[-673,2402]],[[247320,341083],[-34,-575],[-1288,60]],[[245998,340568],[118,3381]],[[208151,345237],[293,-4777],[-163,-1892],[63,-1472]],[[208344,337096],[-1781,-187],[-951,1847],[-1038,6]],[[204574,338762],[7,2007]],[[276135,345955],[-22,-4593]],[[276113,341362],[-980,-697]],[[275133,340665],[-284,1370]],[[243607,340080],[-388,-1384]],[[243219,338696],[-295,1224],[-438,79],[156,1793],[-387,1848]],[[270042,344086],[-542,-1569]],[[269500,342517],[-247,-1769]],[[269253,340748],[-294,-190],[22,1348]],[[245998,340568],[-64,-1621],[-438,78]],[[245496,339025],[-463,92]],[[245033,339117],[-442,10]],[[277536,345658],[-27,-6362]],[[277509,339296],[-1406,390]],[[276103,339686],[10,1676]],[[278303,345704],[22,-6834]],[[278325,338870],[33,-603],[-850,-17]],[[277508,338250],[1,1046]],[[229924,344142],[0,-4067]],[[229924,340075],[-1446,9]],[[228478,340084],[-594,801],[-1,3241]],[[255240,341042],[-479,-1636],[-28,-1244]],[[254733,338162],[-378,-650],[-307,690]],[[285363,345704],[-90,-1721],[200,-3015],[-54,-1229]],[[285419,339739],[-161,-1091]],[[285258,338648],[-207,365],[-191,-1125],[-97,1431],[-186,-784],[-144,1521],[-394,-14],[-22,1228],[-337,1293]],[[279156,345616],[-183,-6997]],[[278973,338619],[-648,251]],[[279719,342490],[139,-1155],[-370,-2640],[-207,11]],[[279281,338706],[-308,-87]],[[237331,336713],[-1477,-32]],[[235854,336681],[-164,6387]],[[288818,335050],[63,-1480],[-197,-6894],[-610,-638]],[[288074,326038],[-5,98]],[[288069,326136],[643,1433],[149,5776],[-43,1705]],[[287690,334443],[-349,562]],[[287341,335005],[74,4091],[488,662],[174,-763],[41,-4813],[-337,-752],[-91,1013]],[[288009,345474],[568,-6868],[-469,3338],[-106,3521]],[[252015,342332],[-40,-5058]],[[251975,337274],[-584,118]],[[251391,337392],[-538,1205],[-221,2559]],[[250632,341156],[96,3819]],[[203103,338170],[0,311]],[[203103,338481],[0,-311]],[[203104,340537],[-422,-116],[-2,-2838],[423,-967]],[[203103,336616],[9,-10066]],[[203112,326550],[-2650,81]],[[200462,326631],[-120,1601],[-197,-3]],[[200145,328229],[5,12911],[-887,29]],[[211108,336324],[-13,-6367],[-717,-154]],[[210378,329803],[-244,605],[-702,7065],[-124,-377],[-964,0]],[[250632,341156],[-254,-2107],[-174,-102]],[[250204,338947],[-181,1223],[-661,-786]],[[249362,339384],[-173,1815]],[[282646,344014],[-362,-5323]],[[282284,338691],[-1014,-2548]],[[281270,336143],[-175,1634]],[[267221,342749],[-212,-3525]],[[267009,339224],[-457,519],[-553,2138]],[[265999,341881],[16,783]],[[265999,341881],[52,-1239],[-389,-1579]],[[265662,339063],[-165,-857],[-257,652],[-539,-385],[-75,-937]],[[264626,337536],[-271,1710]],[[264355,339246],[-23,246]],[[268158,340142],[-176,-2869]],[[267982,337273],[-326,-26],[-492,-1366]],[[267164,335881],[-155,3343]],[[263193,339460],[-282,-1554]],[[262911,337906],[-375,-1179]],[[262536,336727],[-941,73]],[[261595,336800],[1,26]],[[261596,336826],[-53,386]],[[261543,337212],[10,105]],[[261553,337317],[156,2178],[-143,1281]],[[226987,344230],[5,-8168]],[[226992,336062],[-1485,-16]],[[225507,336046],[-10,8188]],[[228478,340084],[-1,-4053]],[[228477,336031],[-1485,31]],[[225507,336046],[-296,-2],[0,-3229]],[[225211,332815],[-863,2]],[[224348,332817],[-25,4855]],[[224323,337672],[-14,6562]],[[224323,337672],[-2072,-4]],[[222251,337668],[-15,3737]],[[231564,338499],[-444,4],[-1,-4058]],[[231119,334445],[-1192,-1]],[[229927,334444],[-3,5631]],[[233863,342555],[-208,-1974],[146,-1821],[-99,-1072]],[[233702,337688],[-1043,-410],[-29,1220],[-323,-8]],[[232307,338490],[-150,-9]],[[235007,344168],[-29,-9732]],[[234978,334436],[-891,6]],[[234087,334442],[1,3236],[-386,10]],[[235854,336681],[57,-2246]],[[235911,334435],[-933,1]],[[270712,339518],[-422,-1622]],[[270290,337896],[-183,3519],[-607,1102]],[[283469,341257],[168,-1848],[-22,-1610]],[[283615,337799],[-112,244],[-755,-2883]],[[282748,335160],[-250,2798],[-214,733]],[[253449,338293],[-4,-540]],[[253445,337753],[-1088,149],[-103,-659]],[[252254,337243],[-279,31]],[[260507,341445],[21,-2479],[-127,-944]],[[260401,338022],[-564,157]],[[259837,338179],[-362,2259]],[[243219,338696],[35,-3025]],[[243254,335671],[-1124,135]],[[242130,335806],[-497,70],[6,1353]],[[241639,337229],[7,3485]],[[240168,343308],[-18,-7270]],[[240150,336038],[-594,77]],[[239556,336115],[-989,105],[1,542]],[[272532,341095],[-16,-3720]],[[272516,337375],[-83,-532]],[[272433,336843],[-535,176],[-700,3439]],[[241639,337229],[-595,40],[-2,-1348],[-498,75]],[[240544,335996],[-394,42]],[[259090,340315],[-150,-4665]],[[258940,335650],[-106,-1338]],[[258834,334312],[-300,531],[-141,-774],[-313,1294],[-345,-47]],[[257735,335316],[-130,450]],[[257605,335766],[203,1496],[-16,3311]],[[270290,337896],[-396,-2234]],[[269894,335662],[-202,1971],[-170,144]],[[269522,337777],[-269,2971]],[[261596,336826],[-53,386]],[[261553,337317],[-455,475],[-475,-445]],[[260623,337347],[-222,675]],[[281095,337777],[-585,-2047],[-679,-3519]],[[279831,332211],[-571,1186]],[[279260,333397],[-227,516],[248,4793]],[[285258,338648],[-235,-2968]],[[285023,335680],[-392,-874],[-524,1391]],[[284107,336197],[-492,1602]],[[269522,337777],[-293,-274],[-813,-2186],[-219,-148]],[[268197,335169],[-215,2104]],[[275133,340665],[83,-1450],[-296,-1327],[32,-1469]],[[274952,336419],[-480,1873],[-210,138]],[[274262,338430],[41,3682]],[[219006,342215],[1,-8138]],[[219007,334077],[-1521,-4]],[[217486,334073],[0,114]],[[217486,334187],[1,8006]],[[220510,338939],[0,-4866]],[[220510,334073],[-1503,4]],[[217486,334187],[-1496,-22]],[[215990,334165],[-2,8030]],[[214485,342193],[1,-7963]],[[214486,334230],[-2449,-96]],[[212037,334134],[1,2178]],[[274262,338430],[-178,-3319],[96,-3116]],[[274180,331995],[-135,-25]],[[274045,331970],[-450,-338]],[[273595,331632],[-36,1117]],[[273559,332749],[96,1381],[-522,2938]],[[273133,337068],[300,3340],[-67,1607]],[[215990,334165],[0,-72]],[[215990,334093],[-1504,-3]],[[214486,334090],[0,140]],[[257605,335766],[-267,-59]],[[257338,335707],[-1207,2676]],[[256131,338383],[31,2022]],[[273133,337068],[-79,883],[-538,-576]],[[263585,335028],[0,0]],[[263585,335028],[-124,-483]],[[263461,334545],[-99,4]],[[263362,334549],[-9,1250],[-281,765]],[[263072,336564],[-161,1342]],[[264355,339246],[-770,-4218]],[[267164,335881],[3,-378]],[[267167,335503],[-680,-2474],[-459,115]],[[266028,333144],[-109,2607],[-257,3312]],[[276103,339686],[-56,-7726]],[[276047,331960],[-323,-23]],[[275724,331937],[-70,1389],[-359,2653],[-343,440]],[[222251,337668],[32,-5648]],[[222283,332020],[-589,1],[-1,-1624],[-1183,13]],[[220510,330410],[0,3663]],[[200145,328229],[-3228,29],[-3,-6474],[-1605,13]],[[204574,338762],[16,-15441]],[[204590,323321],[-1474,-29]],[[203116,323292],[-4,3258]],[[203103,336616],[208,1297],[-208,257]],[[203103,338481],[7,1396]],[[249362,339384],[-276,30],[116,-1381],[-336,-1405],[-365,-377],[270,-1925],[-281,-846],[135,-918]],[[248625,332562],[-364,175],[-4,-2806]],[[248257,329931],[-36,-136]],[[248221,329795],[-36,1333],[-212,-483]],[[247973,330645],[-400,67]],[[247573,330712],[0,4866]],[[247573,335578],[-6,5519]],[[272433,336843],[-475,-3705]],[[271958,333138],[-10,-82]],[[271948,333056],[-430,281]],[[271518,333337],[-367,-86]],[[271151,333251],[-126,2692],[-326,1639],[222,1421],[-102,1408]],[[251391,337392],[-290,-2345],[-136,397]],[[250965,335444],[-553,1154],[-247,1169]],[[250165,337767],[39,1180]],[[247573,335578],[-2091,161]],[[245482,335739],[14,3286]],[[286926,335501],[-145,-1821],[-233,206],[79,1506],[-351,140]],[[286276,335532],[78,4358]],[[286354,339890],[552,1171],[303,-80],[50,-5635],[-333,155]],[[256131,338383],[-53,-2344],[-292,-1221]],[[255786,334818],[-336,-820],[-354,712],[-199,-818]],[[254897,333892],[-239,1016],[75,3254]],[[286276,335532],[-676,144]],[[285600,335676],[-577,4]],[[285419,339739],[847,1101],[88,-950]],[[259837,338179],[-278,-1956],[-1,-1387]],[[259558,334836],[-289,-247],[-329,1061]],[[271151,333251],[-416,-936],[-546,61]],[[270189,332376],[-338,1183],[43,2103]],[[250165,337767],[-126,96],[-281,-4504]],[[249758,333359],[-308,1169],[-406,124],[-419,-2090]],[[229927,334444],[-12,-3282]],[[229915,331162],[-1439,23]],[[228476,331185],[1,4846]],[[245033,339117],[-93,-1439],[-340,-1930],[-44,-3401],[-591,75]],[[243965,332422],[-591,69]],[[243374,332491],[12,3307],[-132,-127]],[[277508,338250],[-37,-6115]],[[277471,332135],[-595,-66]],[[276876,332069],[-829,-109]],[[263633,333862],[1,202]],[[263634,334064],[-1,-202]],[[264626,337536],[88,-2616],[-150,-1007]],[[264564,333913],[-285,823],[-464,205],[-191,-773]],[[263624,334168],[-163,377]],[[245482,335739],[-5,-4945]],[[245477,330794],[-2,-1650]],[[245475,329144],[-590,62],[-3,1641],[-263,-125]],[[244619,330722],[-662,63],[8,1637]],[[266028,333144],[-304,-143],[-504,-1879]],[[265220,331122],[-22,60]],[[265198,331182],[-124,1693],[-214,-288],[-296,1326]],[[279260,333397],[-157,-1140]],[[279103,332257],[-411,1984],[-648,-2053]],[[278044,332188],[-573,-53]],[[210378,329803],[0,-2772],[-614,433],[-745,-2269]],[[209019,325195],[-2,1367],[-3248,13],[2,-3244]],[[205771,323331],[-1181,-10]],[[282748,335160],[-108,-470]],[[282640,334690],[-343,-1480]],[[282297,333210],[-672,236]],[[281625,333446],[-169,332],[-186,2365]],[[275724,331937],[-313,-26]],[[275411,331911],[-1231,84]],[[232307,338490],[0,-2432],[148,-22],[1,-3216]],[[232456,332820],[-305,-2],[-149,-3257],[-294,2]],[[231708,329563],[-296,1],[-1,3262],[-292,-4],[0,1623]],[[234087,334442],[-14,-2089],[230,-1262]],[[234303,331091],[-538,-3687],[-283,600]],[[233482,328004],[-2,4815],[-1024,1]],[[260623,337347],[23,-3296],[103,-1581]],[[260749,332470],[-138,-25]],[[260611,332445],[-752,-140]],[[259859,332305],[-301,2531]],[[257338,335707],[-156,-2905],[-342,-2491]],[[256840,330311],[-446,714],[-239,-413]],[[256155,330612],[-245,215]],[[255910,330827],[24,1814],[-148,2177]],[[254026,337732],[-164,-1606],[-17,-2092],[167,-1717],[-90,-1887]],[[253922,330430],[-46,-579]],[[253876,329851],[-478,-217],[-127,793]],[[253271,330427],[-4,1966],[146,1494],[32,3866]],[[254897,333892],[-166,-2346]],[[254731,331546],[-712,-437],[-97,-679]],[[284107,336197],[0,-1817],[235,-1425]],[[284342,332955],[-25,-150]],[[284317,332805],[-216,-594],[-40,-1864]],[[284061,330347],[-198,-1249],[-361,-217]],[[283502,328881],[-237,1613]],[[283265,330494],[-76,1698],[-549,2498]],[[273559,332749],[-1601,389]],[[270189,332376],[-269,-1122]],[[269920,331254],[-1335,-829]],[[268585,330425],[-153,882],[95,1792],[-330,2070]],[[263072,336564],[-195,-3682],[-172,-20],[-175,-2136],[-273,-559]],[[262257,330167],[-331,918]],[[261926,331085],[77,2096],[533,3546]],[[261595,336800],[-473,-3689]],[[261122,333111],[-373,-641]],[[253271,330427],[-332,-80]],[[252939,330347],[-8,1375],[-394,358],[-302,1418]],[[252235,333498],[19,3745]],[[250965,335444],[-26,-4865]],[[250939,330579],[-294,-638]],[[250645,329941],[-808,110]],[[249837,330051],[-79,3308]],[[281625,333446],[-251,-3123],[4,-1253],[-421,-1195]],[[280957,327875],[-522,-413],[-138,954]],[[280297,328416],[-332,3370],[-134,425]],[[224348,332817],[-1,-1627]],[[224347,331190],[-2064,19]],[[222283,331209],[0,811]],[[179740,322568],[3,-2451],[444,-2895],[104,-2181],[266,-2705],[564,-2760]],[[181121,309576],[-326,-2417],[-494,-1592]],[[180301,305567],[-2460,-124],[1,-805],[-4499,-64],[2,-553],[-829,-8],[-928,528],[-315,-3026]],[[171273,301515],[-312,1400]],[[170961,302915],[145,1407],[238,4959],[-64,9968]],[[171280,319249],[98,4],[-3,18109]],[[164248,337232],[-2,-3234],[299,-22],[0,-1605],[245,-1640],[325,-34],[4,-1632],[193,12],[4,-1613],[397,-45],[3,-1615],[314,79],[-22,-1691],[246,-211],[0,-3300]],[[166254,320681],[-755,1376],[-937,2624],[-283,-1410],[-421,-725],[100,-1702],[-442,1647],[-538,-410]],[[162978,322081],[-4,3223],[-296,221],[-393,1772],[197,1535],[-165,1791],[-326,508],[-445,3199],[-341,589],[-167,2431]],[[171280,319249],[-3410,-90],[36,-551]],[[167906,318608],[-268,446],[-749,38],[-88,1203],[-462,376]],[[166339,320671],[-85,10]],[[252235,333498],[-176,-1853],[-459,-1133]],[[251600,330512],[-661,67]],[[242130,335806],[-34,-6487]],[[242096,329319],[-637,87]],[[241459,329406],[2,1622],[-1031,138]],[[240430,331166],[104,1602],[10,3228]],[[268585,330425],[-242,-1949],[-248,-495]],[[268095,327981],[-738,4146]],[[267357,332127],[82,739],[-272,2637]],[[238036,329532],[-271,1020],[-8,-2176],[-298,111],[-9,-1668],[-302,-291]],[[237148,326528],[-150,20],[21,4291]],[[237019,330839],[145,2398],[-141,1639],[249,-28],[204,1844]],[[238075,336857],[-39,-7325]],[[261926,331085],[-253,-1942]],[[261673,329143],[-493,2571],[-58,1397]],[[239556,336115],[-10,-2440],[-148,23],[-7,-2427],[-201,24],[-9,-2652]],[[239181,328643],[-295,241],[-93,1575],[-757,-927]],[[237019,330839],[-164,-1084],[-525,-533],[-176,1676],[-128,-957]],[[236026,329941],[-115,4494]],[[263362,334549],[-670,-5485]],[[262692,329064],[-240,-1163]],[[262452,327901],[-195,2266]],[[212037,334134],[-3,-8177]],[[212034,325957],[0,-4264]],[[212034,321693],[-669,4],[-3,-1666],[-294,7],[-2,-1618],[-293,8],[-1,-1623],[-586,17],[-90,-1635]],[[210096,315187],[-586,7]],[[209510,315194],[-502,3],[-1,3242]],[[209007,318439],[12,6756]],[[284317,332805],[371,-2175],[955,-1729],[26,-1207]],[[285669,327694],[-54,-768],[-593,-356],[-140,697]],[[284882,327267],[-821,3080]],[[285600,335676],[126,-1603],[273,-883]],[[285999,333190],[-398,-1100],[175,-2296],[-1124,1767],[-310,1394]],[[240430,331166],[-12,-5402],[-114,-40]],[[240304,325724],[-549,-591],[-186,1872],[-331,1452]],[[239238,328457],[-57,186]],[[226992,336062],[7,-6491]],[[226999,329571],[0,-750]],[[226999,328821],[0,-20]],[[226999,328801],[-475,-44],[-290,767],[-418,56]],[[225816,329580],[-586,-9],[-19,3244]],[[228476,331185],[-1,-1622]],[[228475,329563],[-1476,8]],[[243374,332491],[-161,-3273],[-723,82]],[[242490,329300],[-394,19]],[[257735,335316],[-73,-4275],[185,-1700]],[[257847,329341],[-411,-2086],[-227,201]],[[257209,327456],[-369,2855]],[[247573,330712],[-600,59]],[[246973,330771],[-1496,23]],[[288074,326038],[-5,98]],[[286926,335501],[415,-496]],[[287690,334443],[20,-1176],[-419,-3066],[-333,-1393],[-288,214],[-380,1513],[-221,-1048],[-325,2540],[265,-142],[-10,1305]],[[259859,332305],[-102,-4380]],[[259757,327925],[-680,1377],[-289,-545]],[[258788,328757],[10,1470]],[[258798,330227],[36,4085]],[[258798,330227],[-518,-1709],[-228,634]],[[258052,329152],[-205,189]],[[267357,332127],[-461,-864],[33,-2553]],[[266929,328710],[-948,-958]],[[265981,327752],[263,2891],[-1024,479]],[[265198,331182],[-169,-1111],[-21,-2086]],[[265008,327985],[-272,-947],[-243,467],[-219,-1110]],[[264274,326395],[-566,1466]],[[263708,327861],[264,836],[-23,1267],[-316,3898]],[[263634,334064],[-10,104]],[[255910,330827],[-429,244],[-354,-1106]],[[255127,329965],[-396,1581]],[[283265,330494],[-572,-1459],[-346,397]],[[282347,329432],[-50,3778]],[[248221,329795],[-59,-96]],[[248162,329699],[-189,946]],[[249837,330051],[-443,-509]],[[249394,329542],[-1137,389]],[[263708,327861],[-580,-827]],[[263128,327034],[-436,2030]],[[236026,329941],[-3,-305]],[[236023,329636],[-176,-1476],[-443,-195],[-252,1214],[-191,-612]],[[234961,328567],[-77,885],[-581,1639]],[[231708,329563],[0,-1619]],[[231708,327944],[-1283,3]],[[230425,327947],[0,3299],[-260,-1413],[-247,174]],[[229918,330007],[-3,1155]],[[279103,332257],[-595,-3991]],[[278508,328266],[-251,856],[-213,3066]],[[214486,334090],[-13,-8131]],[[214473,325959],[-2439,-2]],[[217486,334073],[-2,-8135]],[[217484,325938],[-1494,19]],[[215990,325957],[0,8136]],[[219007,334077],[3,-8124]],[[219010,325953],[-1526,-15]],[[220510,330410],[0,-4461]],[[220510,325949],[-1500,4]],[[215990,325957],[-1517,2]],[[271518,333337],[-29,-4139],[-182,-3291]],[[271307,325907],[-296,68]],[[271011,325975],[-264,59]],[[270747,326034],[1,1307],[-511,2796],[-304,-278]],[[269933,329859],[-13,1395]],[[282347,329432],[-80,-3573]],[[282267,325859],[-165,-563],[-420,838],[-332,-61]],[[281350,326073],[-393,1802]],[[252939,330347],[-6,-701]],[[252933,329646],[-671,-91],[-323,-2399],[-173,1]],[[251766,327157],[-166,3355]],[[280297,328416],[-211,-1294]],[[280086,327122],[-581,256],[-754,-1251]],[[278751,326127],[-353,1413],[110,726]],[[271948,333056],[227,-2696]],[[272175,330360],[382,-2968],[-24,-1802]],[[272533,325590],[-107,26]],[[272426,325616],[-1119,291]],[[273595,331632],[-24,-1621]],[[273571,330011],[-1396,349]],[[261673,329143],[-449,-3852]],[[261224,325291],[-188,2237],[-289,964]],[[260747,328492],[203,1622],[-339,2331]],[[233482,328004],[-312,225]],[[233170,328229],[-399,-1548],[-1070,-1312]],[[231701,325369],[7,2575]],[[225816,329580],[10,-9734]],[[225826,319846],[-1469,0]],[[224357,319846],[-4,4514]],[[224353,324360],[-6,6830]],[[244619,330722],[-212,-1147],[105,-2460],[-222,-2902]],[[244290,324213],[-331,36],[-3,-1237],[-368,690],[-239,-589]],[[243349,323113],[-585,855],[-297,-184]],[[242467,323784],[23,5516]],[[260747,328492],[-421,-561],[-85,-1376],[-371,151]],[[259870,326706],[-113,1219]],[[188317,312722],[-290,-1597],[-148,-4378],[654,-3],[-47,-2818]],[[188486,303926],[-642,1],[-1224,899],[-311,-3086],[-1307,2188],[-1640,-13]],[[183362,303915],[1,5933]],[[183363,309848],[-2,22530]],[[268095,327981],[-175,-2988],[-203,-1445],[134,-484]],[[267851,323064],[-277,-502]],[[267574,322562],[-1,-3]],[[267573,322559],[-644,6151]],[[274045,331970],[332,-4441],[324,-1103]],[[274701,326426],[-806,-3868]],[[273895,322558],[-185,1400]],[[273710,323958],[-377,-575],[22,1922]],[[273355,325305],[216,4706]],[[278751,326127],[-5,-339]],[[278746,325788],[-367,681],[-294,-912],[-345,-2208]],[[277740,323349],[-312,426],[-120,1819]],[[277308,325594],[-233,1635],[-199,4840]],[[277308,325594],[-662,368],[-623,-751]],[[276023,325211],[-58,1791],[126,2469],[-367,2466]],[[275411,331911],[-586,-5937]],[[274825,325974],[-124,452]],[[222283,331209],[10,-6488]],[[222293,324721],[-136,-42]],[[222157,324679],[-1040,43],[-1,-1615],[-294,3]],[[220822,323110],[-312,21]],[[220510,323131],[0,2818]],[[276023,325211],[-562,988]],[[275461,326199],[-228,-566],[-408,341]],[[269933,329859],[-238,-2104],[-19,-1656]],[[269676,326099],[-619,-853]],[[269057,325246],[-122,2960],[-350,2219]],[[255127,329965],[-89,-7353]],[[255038,322612],[-1051,46]],[[253987,322658],[9,5393],[-120,1800]],[[230425,327947],[0,-3245],[-136,1],[-1,-3821]],[[230288,320882],[-666,-982],[-127,784]],[[229495,320684],[-3,9492],[426,-169]],[[265981,327752],[-64,-577]],[[265917,327175],[-396,127],[-315,-710],[-198,1393]],[[224353,324360],[-360,353],[-1700,8]],[[229495,320684],[-432,1200]],[[229063,321884],[-239,-1061],[-352,454]],[[228472,321277],[3,8286]],[[241459,329406],[-204,-4750]],[[241255,324656],[-448,-779],[-907,103]],[[239900,323980],[404,1744]],[[256155,330612],[-49,-8076]],[[256106,322536],[-1068,76]],[[234961,328567],[-4,-2253],[-314,-6],[0,-2676]],[[234643,323632],[-1174,5]],[[233469,323637],[0,1894],[-295,3],[-4,2695]],[[262452,327901],[-222,-2978],[129,-2605]],[[262359,322318],[-796,-49]],[[261563,322269],[-276,-32]],[[261287,322237],[-305,-6]],[[260982,322231],[247,1083],[-5,1977]],[[257209,327456],[-20,-5059]],[[257189,322397],[-1046,132]],[[256143,322529],[-37,7]],[[237148,326528],[-7,-1359],[-305,-767]],[[236836,324402],[-229,-382],[-21,-2058],[-606,-644]],[[235980,321318],[43,8318]],[[246973,330771],[-2,-5539]],[[246971,325232],[-1504,74]],[[245467,325306],[8,3838]],[[245467,325306],[-8,-2743],[-290,31]],[[245169,322594],[-399,-325],[-210,-1346]],[[244560,320923],[13,2577],[-283,713]],[[248162,329699],[-213,-2387],[219,-627],[19,-1534],[-292,-393],[-116,-1726],[-268,-566]],[[247511,322466],[186,-1296],[-172,-1231]],[[247525,319939],[-289,-501]],[[247236,319438],[-2,1325]],[[247234,320763],[22,4543],[-285,-74]],[[251766,327157],[-13,-4699]],[[251753,322458],[-101,0]],[[251652,322458],[-542,-5]],[[251110,322453],[-504,-8]],[[250606,322445],[39,7496]],[[283502,328881],[-231,-2073]],[[283271,326808],[-356,-2934],[-358,-1180]],[[282557,322694],[-108,2560],[-182,605]],[[239238,328457],[-4,-1942],[-493,49],[-203,-1310],[-493,-195],[5,-2145]],[[238050,322914],[-1029,136],[-185,1352]],[[269057,325246],[-524,-1428]],[[268533,323818],[-371,-223]],[[268162,323595],[-311,-531]],[[253987,322658],[-600,-193]],[[253387,322465],[-454,-3]],[[252933,322462],[-49,3]],[[252884,322465],[49,7181]],[[273355,325305],[-822,285]],[[285469,320638],[-203,-947],[-926,-817]],[[284340,318874],[-64,5013]],[[284276,323887],[204,503],[398,-2748],[591,-1004]],[[284882,327267],[-235,-2199],[118,-896]],[[284765,324172],[-259,864],[-282,-1162]],[[284224,323874],[-953,2934]],[[258788,328757],[-158,-3842]],[[258630,324915],[-206,2014],[-376,1416],[4,807]],[[249394,329542],[-31,-7083]],[[249363,322459],[-223,-9]],[[249140,322450],[-1629,16]],[[270747,326034],[-688,163]],[[270059,326197],[-383,-98]],[[250606,322445],[-430,-12]],[[250176,322433],[-813,26]],[[252884,322465],[-1131,-7]],[[235980,321318],[-18,-3816]],[[235962,317502],[-20,-4124]],[[235942,313378],[-1326,-11]],[[234616,313367],[-1,3239],[-339,-2]],[[234276,316604],[0,3243],[170,1608],[197,17],[0,2160]],[[226999,328801],[9,-8951]],[[227008,319850],[-1,-3235]],[[227007,316615],[-1173,1]],[[225834,316616],[-8,3230]],[[228472,321277],[-554,610],[-74,2246],[-845,4688]],[[258630,324915],[-1,-2532]],[[258629,322383],[-1296,15]],[[257333,322398],[-144,-1]],[[242467,323784],[-5,-1009]],[[242462,322775],[-297,42],[-5,-1618],[-877,478]],[[241283,321677],[-149,871],[121,2108]],[[259870,326706],[26,-4377]],[[259896,322329],[-1243,53]],[[258653,322382],[-24,1]],[[263128,327034],[11,-1304],[-212,-3408]],[[262927,322322],[-101,-5]],[[262826,322317],[-467,1]],[[200462,326631],[360,-4880]],[[200822,321751],[-378,16],[-5,-7061]],[[200439,314706],[-1450,-15]],[[198989,314691],[-3682,23]],[[229063,321884],[-6,-2046]],[[229057,319838],[-2049,12]],[[267573,322559],[-1043,-136]],[[266530,322423],[-489,3117],[-223,-90]],[[265818,325450],[99,1725]],[[285669,327694],[310,747],[30,-1790],[-452,-993],[295,-348],[-138,-1386],[-575,-2026],[-396,1479],[22,795]],[[260982,322231],[-365,30]],[[260617,322261],[-721,68]],[[281350,326073],[46,-5342],[-149,-3077],[243,-283]],[[281490,317371],[-394,-3133]],[[281096,314238],[-204,2185],[-465,3448]],[[280427,319871],[-419,2517],[-71,1883],[149,2851]],[[239900,323980],[-689,-4023],[1,-1633]],[[239212,318324],[-296,-554]],[[238916,317770],[-881,35]],[[238035,317805],[15,5109]],[[233469,323637],[-441,-557],[-20,-6469]],[[233008,316611],[1,-1619],[-439,-6]],[[232570,314986],[-586,-6],[0,1618],[-585,2]],[[231399,316600],[1,1621]],[[231400,318221],[8,5252],[293,1896]],[[265818,325450],[-331,-347],[-413,-2793]],[[265074,322310],[-349,6]],[[264725,322316],[-533,16]],[[264192,322332],[82,4063]],[[231400,318221],[-877,0]],[[230523,318221],[1,2621],[-236,40]],[[264192,322332],[-835,-3]],[[263357,322329],[-430,-7]],[[280427,319871],[-1132,-401]],[[279295,319470],[-372,2213]],[[278923,321683],[-155,1648],[-22,2457]],[[284224,323874],[52,13]],[[284340,318874],[-211,-331]],[[284129,318543],[-198,2128],[-360,239],[-380,1072],[-481,71]],[[282710,322053],[-153,641]],[[203116,323292],[0,-1615],[261,3],[1,-1550],[-729,1]],[[202649,320131],[-58,615],[-705,55],[-101,-674],[-844,4],[-119,1620]],[[209007,318439],[-587,-6],[1,-1615],[-293,-11],[-4,-1618],[-1242,-7],[0,-4791]],[[206882,310391],[-1173,-5]],[[205709,310386],[1,4846],[61,-6],[0,8105]],[[270059,326197],[-28,-6432],[221,-1212]],[[270252,318553],[-254,-3695],[-212,-1916]],[[269786,312942],[-390,2634],[-91,3609]],[[269305,319185],[-142,3644],[-154,855],[-476,134]],[[276023,325211],[227,-1074],[186,599],[147,-1357],[71,-2680],[-218,-1751]],[[276436,318948],[-6,0]],[[276430,318948],[-1089,137]],[[275341,319085],[120,7114]],[[278923,321683],[-437,-2238],[-436,97]],[[278050,319542],[-14,1963],[-296,1844]],[[275341,319085],[-679,65]],[[274662,319150],[-651,42],[43,2132],[-159,1234]],[[271464,320921],[-199,-1405],[-198,-4517]],[[271067,314999],[-604,2049],[-211,1505]],[[271011,325975],[333,-4681],[120,-373]],[[282710,322053],[66,-1014],[-81,-3693]],[[282695,317346],[-1205,25]],[[214473,325959],[-4,-8114]],[[214469,317845],[-993,-9]],[[213476,317836],[-1442,8]],[[212034,317844],[0,3849]],[[272173,319555],[-709,1366]],[[272426,325616],[-120,-2205],[-216,-216],[83,-3640]],[[219010,325953],[-5,-8102]],[[219005,317851],[-1127,10]],[[217878,317861],[-405,0]],[[217473,317861],[11,8077]],[[220510,323131],[0,-5304]],[[220510,317827],[-1157,20]],[[219353,317847],[-348,4]],[[215990,325957],[-18,-8107]],[[215972,317850],[-1028,9]],[[214944,317859],[-475,-14]],[[277740,323349],[-316,-946],[31,-1527],[-351,-1962]],[[277104,318914],[-668,34]],[[217473,317861],[-1061,-15]],[[216412,317846],[-440,4]],[[273710,323958],[112,-2797],[-91,-1952]],[[273731,319209],[-1617,16]],[[272114,319225],[59,330]],[[266530,322423],[-186,-14]],[[266344,322409],[-1079,-93]],[[265265,322316],[-191,-6]],[[247234,320763],[-1924,142],[-2,-829]],[[245308,320076],[-139,2518]],[[224357,319846],[-575,10],[0,-4860]],[[223782,314996],[-488,-1],[-284,812]],[[223010,315807],[139,1188],[-267,11],[14,2697],[-285,-467]],[[222611,319236],[-167,661],[-84,3111],[-203,1671]],[[284158,318178],[-29,365]],[[285469,320638],[29,1355],[695,560],[-107,-1080],[521,321],[-484,-2667],[-165,-1717],[-182,-43],[-131,1683],[-204,-1777],[-551,161],[-575,-953],[-157,1697]],[[222611,319236],[-441,-169],[-51,-1640],[-679,-8]],[[221440,317419],[-149,818],[-33,3269],[-436,-2],[0,1606]],[[164640,304627],[231,-1774],[-418,-879],[-323,2121],[510,532]],[[165055,305327],[975,-1439],[-461,-705],[-359,133],[-155,2011]],[[166339,320671],[-2,-7969],[-90,-1807]],[[166247,310895],[-249,759],[-867,-158],[-358,994],[-804,202],[-490,-415],[-116,1396],[-373,1054],[124,2397],[-24,2470],[-171,1150],[59,1337]],[[241283,321677],[-583,-794],[39,-1064]],[[240739,319819],[-931,87],[-3,-1605]],[[239805,318301],[-593,23]],[[238035,317805],[-613,-1484]],[[237422,316321],[-246,501],[-833,92],[-381,588]],[[244560,320923],[-21,-4593],[-199,26],[194,-1935]],[[244534,314421],[-604,81],[-3,-1622],[-230,23]],[[243697,312903],[96,2891],[-159,661],[20,4597],[-307,36],[2,2025]],[[269305,319185],[-840,-2740],[-145,-912]],[[268320,315533],[-168,2206],[10,5856]],[[243697,312903],[-75,13]],[[243622,312916],[-905,124]],[[242717,313040],[1,2459],[-234,29],[98,2072],[19,5167],[-139,8]],[[274662,319150],[434,-3776]],[[275096,315374],[-397,-1018],[74,-878],[-605,-586],[-6,1089],[-378,-1530]],[[273784,312451],[4,1591]],[[273788,314042],[49,2842],[-106,2325]],[[234276,316604],[-1268,7]],[[268320,315533],[-415,-2629]],[[267905,312904],[-174,218]],[[267731,313122],[-145,796]],[[267586,313918],[-653,2805]],[[266933,316723],[-40,540]],[[266893,317263],[305,3008],[323,1133],[53,1158]],[[205709,310386],[-1,-1615],[-1701,0]],[[204007,308771],[-1371,-6],[-3,3352]],[[202633,312117],[-147,1516],[16,6496],[147,2]],[[278050,319542],[43,-1241],[-360,-2635]],[[277733,315666],[-629,3248]],[[221440,317419],[0,-4033],[-492,-32]],[[220948,313354],[-223,1273],[-207,-260]],[[220518,314367],[-8,3460]],[[242717,313040],[-496,64]],[[242221,313104],[-106,14]],[[242115,313118],[4,1627],[-290,31],[-264,1666],[-303,323],[6,1346],[-291,52],[9,1623],[-247,33]],[[256004,318054],[-462,770]],[[255542,318824],[-243,556],[-714,-1852],[-404,1290],[-162,1543],[-347,180]],[[253672,320541],[-285,1924]],[[256143,322529],[-11,-3407],[-128,-1068]],[[245308,320076],[-7,-2464],[141,-1660]],[[245442,315952],[-8,-3255],[151,-27],[-6,-2479],[-150,6]],[[245429,310197],[-104,135],[-578,3570],[-213,519]],[[266893,317263],[-555,642],[-280,1347]],[[266058,319252],[-12,1037],[298,2120]],[[257333,322398],[-17,-8213]],[[257316,314185],[-332,544],[-546,1974]],[[256438,316703],[-434,1351]],[[252925,317997],[-983,23]],[[251942,318020],[-95,1898],[-197,-2],[2,2542]],[[252933,322462],[-8,-4465]],[[253555,314761],[-46,-2207]],[[253509,312554],[-482,7]],[[253027,312561],[-4,5160],[-98,276]],[[253672,320541],[-117,-5780]],[[251942,318020],[-46,-2985]],[[251896,315035],[-985,33]],[[250911,315068],[2,4040],[197,809],[0,2536]],[[249142,318305],[-519,9],[-331,-1193],[-264,918],[-214,-624]],[[247814,317415],[-5,2532],[-284,-8]],[[249140,322450],[2,-4145]],[[250911,315068],[-438,-279]],[[250473,314789],[-146,-6],[-2,4868],[-149,0],[0,2782]],[[250473,314789],[0,-1631]],[[250473,313158],[-643,1090],[-534,2]],[[249296,314250],[-2,2448],[-152,1607]],[[266058,319252],[-82,-421]],[[265976,318831],[-275,-139]],[[265701,318692],[-106,2240],[-330,1384]],[[258653,322382],[-138,-6674],[90,-613]],[[258605,315095],[-29,-1678],[-447,-518],[-145,1195]],[[257984,314094],[-428,804],[-240,-713]],[[260678,319947],[-562,-4378],[-610,-2702],[-150,-75]],[[259356,312792],[-223,839],[-30,1452],[-498,12]],[[260617,322261],[61,-2314]],[[263365,319855],[101,-594],[-208,-1794],[7,-2679]],[[263265,314788],[-172,734],[-550,214]],[[262543,315736],[264,4518],[19,2063]],[[263357,322329],[8,-2474]],[[264725,322316],[-135,-685],[239,-2781],[-180,-2852]],[[264649,315998],[-86,-842]],[[264563,315156],[-22,278]],[[264541,315434],[-329,3527],[-293,880],[-554,14]],[[262543,315736],[-381,-217]],[[262162,315519],[-1,1814],[-262,889]],[[261899,318222],[232,964],[228,3132]],[[261899,318222],[-334,1613],[-2,2434]],[[265701,318692],[-212,-1318]],[[265489,317374],[-231,350],[-271,-1838],[-338,112]],[[284158,318178],[119,-1090],[-640,-3358],[-489,-1594]],[[283148,312136],[-159,657],[-294,4553]],[[261287,322237],[-239,-2820],[0,-1352],[-233,-2520]],[[260815,315545],[-137,4402]],[[262162,315519],[-52,-657]],[[262110,314862],[-107,4]],[[262003,314866],[-1169,24]],[[260834,314890],[-19,655]],[[230523,318221],[0,-1629],[-295,-3],[-4,-3251]],[[230224,313338],[-874,13]],[[229350,313351],[0,1623],[-292,811]],[[229058,315785],[-1,4053]],[[202633,312117],[-979,1704],[-317,895],[-898,-10]],[[279295,319470],[266,-2708],[-183,-3842]],[[279378,312920],[-224,-635],[-333,-2784]],[[278821,309501],[-4,25]],[[278817,309526],[-1052,5966]],[[277765,315492],[-32,174]],[[212034,317844],[-4,-8091]],[[212030,309753],[0,-189]],[[212030,309564],[-1939,9],[5,5614]],[[272114,319225],[155,-4645]],[[272269,314580],[-1,-1447]],[[272268,313133],[-327,-920],[-286,1649]],[[271655,313862],[-588,1137]],[[247236,319438],[-214,563],[88,-2170],[-319,-435],[282,-923],[-325,-596]],[[246748,315877],[-1306,75]],[[255542,318824],[29,-627],[-316,-3711]],[[255255,314486],[-1700,275]],[[166087,290611],[275,-965],[-300,-17],[25,982]],[[167726,304767],[-743,1874],[-183,2255],[-553,1999]],[[167906,318608],[691,-9433],[-104,-2110],[-328,6],[-439,-2304]],[[247814,317415],[-121,-2323],[126,-841]],[[247819,314251],[0,-805]],[[247819,313446],[-294,-29],[6,-1584],[-272,-12]],[[247259,311821],[-473,1880]],[[246786,313701],[-38,2176]],[[260834,314890],[37,-1200]],[[260871,313690],[-340,-2929],[-579,-3107]],[[259952,307654],[-731,15]],[[259221,307669],[-12,4226],[147,897]],[[281096,314238],[217,-1644],[-222,-1224]],[[281091,311370],[-528,-425],[-618,1726],[-567,249]],[[223010,315807],[-168,-930],[-208,-3035],[76,-1641]],[[222710,310201],[-463,2267],[-59,-1528],[-214,361]],[[221974,311301],[-293,391],[-320,-718],[-413,2380]],[[242115,313118],[-438,43],[-4,-817],[-514,69],[-222,-772]],[[240937,311641],[-46,1096],[-301,569]],[[240590,313306],[-41,1615],[-479,873],[29,2514],[-294,-7]],[[225834,316616],[-145,-4],[-1,-3243]],[[225688,313369],[-284,3],[-145,-1082],[-582,6],[-438,-808]],[[224239,311488],[-1,1890],[-456,-2],[0,1620]],[[229058,315785],[-744,-261],[154,-2163],[-579,4]],[[227889,313365],[-586,3]],[[227303,313368],[-1,3244],[-295,3]],[[264541,315434],[-415,-1027]],[[264126,314407],[-860,-257]],[[263266,314150],[-1,638]],[[266933,316723],[-339,-3833]],[[266594,312890],[-433,-921]],[[266161,311969],[-142,1338]],[[266019,313307],[139,814],[-135,1989],[115,1469],[-162,1252]],[[168718,285870],[613,-3553],[-361,242],[-252,3311]],[[168676,294217],[663,-1336],[118,-1996],[-366,420],[-148,2046],[-267,866]],[[170961,302915],[-533,9],[-383,-3729]],[[170045,299195],[-299,468],[-189,-1226],[-341,667],[55,1824],[-185,2348],[-237,1372],[-532,-107],[-201,-603],[-390,829]],[[273788,314042],[-1519,538]],[[269786,312942],[-1189,-5125]],[[268597,307817],[-93,1502]],[[268504,309319],[-251,3128],[-348,457]],[[276707,313833],[-152,-754],[-450,18],[-676,-2348]],[[275429,310749],[-117,2669],[-216,1956]],[[276430,318948],[164,-2140],[207,-808],[-94,-2167]],[[277765,315492],[-510,-6014]],[[277255,309478],[-68,131]],[[277187,309609],[-190,3521],[-290,703]],[[256438,316703],[-14,-6930]],[[256424,309773],[0,-271]],[[256424,309502],[-1169,98]],[[255255,309600],[0,4886]],[[266019,313307],[-494,36]],[[265525,313343],[-95,2291],[59,1740]],[[271655,313862],[-387,-3129],[-316,-1220],[-138,-1800]],[[270814,307713],[-619,2359],[-220,1485]],[[269975,311557],[-189,1385]],[[209510,315194],[8,-9722]],[[209518,305472],[-585,10],[-2,-1637],[-1754,86],[0,1634],[-298,10]],[[206879,305575],[3,4816]],[[249296,314250],[-147,-1]],[[249149,314249],[-1330,2]],[[240590,313306],[-340,47],[-91,-2177],[-1279,143]],[[238880,311319],[36,6451]],[[231399,316600],[1,-3246],[-148,-1629],[-731,-2]],[[230521,311723],[-297,19],[0,1596]],[[253027,312561],[-593,31]],[[252434,312592],[1,818],[-542,-5]],[[251893,313405],[3,1630]],[[216412,317846],[0,-8101]],[[216412,309745],[-260,3]],[[216152,309748],[-1207,11]],[[214945,309759],[-1,8100]],[[217878,317861],[-3,-8108]],[[217875,309753],[-265,-6]],[[217610,309747],[-1198,-2]],[[214945,309759],[-258,1]],[[214687,309760],[-1212,-2]],[[213475,309758],[1,8078]],[[219353,317847],[-5,-8079]],[[219348,309768],[-278,9]],[[219070,309777],[-1195,-24]],[[220518,314367],[0,-4631]],[[220518,309736],[-1170,32]],[[238880,311319],[-3,-1068]],[[238877,310251],[-196,25]],[[238681,310276],[-1273,171]],[[237408,310447],[14,5874]],[[213475,309758],[-250,-3]],[[213225,309755],[-1195,-2]],[[265525,313343],[-379,-1617]],[[265146,311726],[-589,2243],[6,1187]],[[282602,309349],[-10,64]],[[282592,309413],[10,-64]],[[283148,312136],[-617,-2746]],[[282531,309390],[-232,1786],[-388,-117],[-188,-952]],[[281723,310107],[-370,469]],[[281353,310576],[-262,794]],[[237408,310447],[-890,102],[31,-3035]],[[236549,307514],[-631,-50]],[[235918,307464],[24,5914]],[[257984,314094],[-89,-4492]],[[257895,309602],[-1471,171]],[[267586,313918],[-206,-1092],[-615,-311]],[[266765,312515],[-171,375]],[[227303,313368],[-1,-4055]],[[227302,309313],[-1606,11]],[[225696,309324],[-8,4045]],[[232570,314986],[1,-1620],[-301,-10],[1,-6508]],[[232271,306848],[-593,2]],[[231678,306850],[-1158,9]],[[230520,306859],[1,4864]],[[234616,313367],[-304,7],[0,-4907],[-291,4],[-15,-1618]],[[234006,306853],[-1735,-5]],[[246786,313701],[-19,-2055],[-497,-862],[38,-1147],[-293,-1723],[-253,397],[310,-1737],[-363,-408]],[[245709,306166],[2,-23]],[[245711,306143],[-453,4]],[[245258,306147],[92,411],[79,3639]],[[229350,313351],[-148,-2],[-1,-3219],[-146,-6]],[[229055,310124],[-301,798],[-865,13],[0,2430]],[[224239,311488],[147,-1345],[-2,-3288]],[[224384,306855],[-433,-385],[-521,1416]],[[223430,307886],[-657,27],[-63,2288]],[[263266,314150],[3,-2538]],[[263269,311612],[-982,-375]],[[262287,311237],[-273,215],[96,3410]],[[278817,309526],[-155,-873]],[[278662,308653],[-702,873],[-466,-1310]],[[277494,308216],[-239,1262]],[[265146,311726],[62,-1577]],[[265208,310149],[-838,20]],[[264370,310169],[1,856]],[[264371,311025],[-245,3382]],[[275429,310749],[0,-39]],[[275429,310710],[-371,-1301],[-162,-2338]],[[274896,307071],[-379,-1287]],[[274517,305784],[-288,-570],[-418,2122],[121,1598]],[[273932,308934],[155,2002],[-303,1515]],[[212030,309564],[-9,-8889]],[[212021,300675],[-14,-4738]],[[212007,295937],[-1275,-7]],[[210732,295930],[1,1617],[-581,-18],[4,3037],[-348,-1],[0,4886],[-290,21]],[[251893,313405],[-148,-263],[-98,-2422]],[[251647,310720],[-1176,275]],[[250471,310995],[2,2163]],[[259221,307669],[-551,-1894]],[[258670,305775],[-415,2982]],[[258255,308757],[-360,845]],[[262003,314866],[-203,-2819],[-429,-1225],[-147,-1565],[-209,5]],[[261015,309262],[-144,4428]],[[262287,311237],[-115,-5511]],[[262172,305726],[-1045,-291]],[[261127,305435],[-112,3827]],[[204007,308771],[-2,-8088],[-357,6],[0,-3269],[-895,189],[3,-3357]],[[202756,294252],[-283,-80],[-3451,20]],[[199022,294192],[-9,14575],[-24,5924]],[[199022,294192],[-801,21],[0,-5147]],[[198221,289066],[-2916,137]],[[195305,289203],[0,10599]],[[255255,309600],[-293,46]],[[254962,309646],[-1501,262]],[[253461,309908],[48,2646]],[[221974,311301],[-1,-5776]],[[221973,305525],[-843,203],[-612,2378]],[[220518,308106],[0,1630]],[[273932,308934],[-751,-1022],[-232,-721],[-385,1197]],[[272564,308388],[-296,4745]],[[245258,306147],[-220,-1242],[178,-1808],[-327,48],[-478,1054]],[[244411,304199],[-66,1223]],[[244345,305422],[-235,2561],[-507,303],[19,4630]],[[264371,311025],[-903,8],[-199,579]],[[250471,310995],[4,-4064]],[[250475,306931],[-737,17]],[[249738,306948],[1,538],[-590,29]],[[249149,307515],[0,6734]],[[249149,307515],[-1,-540],[-585,14]],[[248563,306989],[-568,-79]],[[247995,306910],[2,1972],[-166,660],[-12,3904]],[[267731,313122],[-172,-4100]],[[267559,309022],[-165,-649],[-348,480],[-159,-755]],[[266887,308098],[-122,4417]],[[277187,309609],[-200,-184],[-957,-3893]],[[276030,305532],[-239,1408],[128,659],[-179,3127],[-311,-16]],[[272564,308388],[-61,-777]],[[272503,307611],[-371,-2255]],[[272132,305356],[-182,81],[-533,1971],[-394,-960]],[[271023,306448],[-209,1265]],[[261127,305435],[65,-2173]],[[261192,303262],[-366,-422]],[[260826,302840],[-582,504]],[[260244,303344],[-292,4310]],[[247116,305288],[0,-1624]],[[247116,303664],[-574,36]],[[246542,303700],[-8,2441],[-825,25]],[[247259,311821],[2,-3022],[-144,17],[-1,-3528]],[[247995,306910],[-1,-1622],[-878,0]],[[266161,311969],[-151,-1209],[137,-1334]],[[266147,309426],[-550,-3122]],[[265597,306304],[-143,-537],[-540,1289]],[[264914,307056],[377,2074],[-83,1019]],[[252434,312592],[-3,-7005]],[[252431,305587],[-491,-270]],[[251940,305317],[-293,8]],[[251647,305325],[0,5395]],[[229055,310124],[0,-2981]],[[229055,307143],[-103,-1894]],[[228952,305249],[-1645,5]],[[227307,305254],[-5,4059]],[[230520,306859],[-129,-799],[-366,1]],[[230025,306061],[-237,1077],[-733,5]],[[225696,309324],[4,-2727]],[[225700,306597],[-88,-540],[-543,799],[-165,-1383]],[[224904,305473],[-175,-372],[-345,1754]],[[235918,307464],[-20,-4633]],[[235898,302831],[-24,-5642]],[[235874,297189],[-725,1210]],[[235149,298399],[-87,1119],[-235,-358],[-301,2195],[-518,1395]],[[234008,302750],[-2,4103]],[[240937,311641],[-27,-4926]],[[240910,306715],[-579,118]],[[240331,306833],[-389,75],[-24,1424],[-898,816],[-143,1103]],[[192648,296055],[0,-2067],[-470,-22],[-762,-1597],[-16,-3435]],[[191400,288934],[-518,-982],[-412,-2923],[-458,4942],[-259,4020]],[[189753,293991],[-316,3938],[-198,-1382],[-452,2730],[42,1283],[-343,3366]],[[268504,309319],[-576,-1452],[-270,224]],[[267658,308091],[-99,931]],[[242221,313104],[-71,-8013]],[[242150,305091],[-288,-51]],[[241862,305040],[-455,1583],[-497,92]],[[244345,305422],[-785,1743],[-49,-1485],[-582,-11],[0,-545]],[[242929,305124],[-779,-33]],[[266887,308098],[-133,-492]],[[266754,307606],[-217,1203],[-390,617]],[[281353,310576],[-256,-2617],[-334,-212],[-135,-1225],[-339,132],[-50,-1712],[-247,-2039]],[[279992,302903],[-1171,6598]],[[269975,311557],[-244,-1241],[240,-2298],[-54,-2070],[-167,-825]],[[269750,305123],[-567,148],[-179,-1082]],[[269004,304189],[-407,3628]],[[253461,309908],[-84,-4366]],[[253377,305542],[-946,45]],[[223430,307886],[-2,-7047]],[[223428,300839],[-1456,0]],[[221972,300839],[1,4686]],[[263252,305383],[-219,25]],[[263033,305408],[-515,59]],[[262518,305467],[-346,259]],[[263269,311612],[-17,-6229]],[[264370,310169],[-2,-2777]],[[264368,307392],[-267,-204],[-179,-1893]],[[263922,305295],[-670,88]],[[271023,306448],[-385,-3231]],[[270638,303217],[-108,-157]],[[270530,303060],[5,560],[-727,-210],[-58,1713]],[[281981,302597],[-3,82]],[[281978,302679],[3,-82]],[[282531,309390],[61,23]],[[282602,309349],[-405,-2626],[-165,-1819],[-109,2614]],[[281923,307518],[-200,2589]],[[251647,305325],[-876,-15]],[[250771,305310],[-294,-4],[-2,1625]],[[276030,305532],[200,-730]],[[276230,304802],[-500,-1758],[-394,2382],[-444,601],[4,1044]],[[280269,301329],[-18,102]],[[280251,301431],[18,-102]],[[281981,302597],[-3,82]],[[281923,307518],[8,-4064],[-186,-1609],[-387,485],[-737,-284],[-373,-588]],[[280248,301458],[-33,175]],[[280215,301633],[-11,68]],[[280204,301701],[-212,1202]],[[237408,310447],[27,-3044],[293,-50],[-7,-3258]],[[237721,304095],[-23,-4861],[-351,60]],[[237347,299294],[-4,1]],[[237343,299295],[-252,2448],[-133,5740],[-409,31]],[[238681,310276],[-66,-2358],[143,-158],[46,-2922],[169,-1709]],[[238973,303129],[-231,-2]],[[238742,303127],[-202,-247],[-819,1215]],[[206879,305575],[2,-12857],[-37,-4823],[-1146,-120]],[[205698,287775],[-6,3219],[-1134,-5],[-3,1595],[-1724,6]],[[202831,292590],[-75,1662]],[[240331,306833],[-20,-6442]],[[240311,300391],[-587,-611]],[[239724,299780],[-512,1234],[-239,2115]],[[264914,307056],[-97,-2181]],[[264817,304875],[-449,1092],[0,1425]],[[254962,309646],[-4,-5674]],[[254958,303972],[1,-1619]],[[254959,302353],[-880,87]],[[254079,302440],[-98,2461],[-614,116]],[[253367,305017],[10,525]],[[183362,303915],[0,-11574]],[[183362,292341],[-1739,3],[0,1619],[-864,-19],[-2,-8075],[-686,-61]],[[180071,285808],[-439,260],[-94,887],[82,3389],[-151,600],[21,1938],[272,564]],[[179762,293446],[283,2148],[77,2692],[-106,4262],[275,1900],[10,1119]],[[181121,309576],[282,-790],[1200,-587],[253,1502],[507,147]],[[219070,309777],[-4,-8906]],[[219066,300871],[-1455,-38]],[[217611,300833],[-1,8914]],[[220518,308106],[-138,101],[-4,-7330]],[[220376,300877],[-1310,-6]],[[258255,308757],[-186,-142],[-223,-2439],[-292,-747],[-162,-1946],[-429,-1122],[-130,-1067]],[[256833,301294],[-358,590],[-165,1921]],[[256310,303805],[109,-16],[5,5713]],[[217611,300833],[-1456,-59]],[[216155,300774],[-3,8974]],[[216155,300774],[-1454,-108]],[[214701,300666],[-14,9094]],[[214701,300666],[-1476,9]],[[213225,300675],[0,9080]],[[277494,308216],[-65,-784],[217,-4447],[468,-2796]],[[278114,300189],[-479,-435],[-840,1115],[-215,921]],[[276580,301790],[-276,1145]],[[276304,302935],[225,772],[-299,1095]],[[213225,300675],[-1204,0]],[[256310,303805],[-1352,167]],[[280269,301329],[-18,102]],[[280248,301458],[-33,175]],[[280204,301701],[21,-472],[-685,-2075],[-529,-3190]],[[279011,295964],[-269,-5],[-253,2494]],[[278489,298453],[-185,3127],[-229,1783],[245,1597],[342,3693]],[[278489,298453],[-265,205],[-88,1173]],[[278136,299831],[-22,358]],[[266754,307606],[118,-2920]],[[266872,304686],[-494,-1390]],[[266378,303296],[-72,1226],[-571,652],[-138,1130]],[[227307,305254],[-2,-3185]],[[227305,302069],[-352,1623],[-506,-2569],[-303,758]],[[226144,301881],[91,1860],[-382,233],[-153,2623]],[[269004,304189],[84,-1082]],[[269088,303107],[-225,528]],[[268863,303635],[-374,-244]],[[268489,303391],[-548,1345]],[[267941,304736],[-283,3355]],[[267941,304736],[-418,57],[-368,-882]],[[267155,303911],[-283,775]],[[274517,305784],[-85,-1864],[134,-4154],[-61,-615]],[[274505,299151],[-581,662],[-511,1884]],[[273413,301697],[-135,2326],[-372,1680],[-227,41],[-176,1867]],[[258670,305775],[-61,-2960]],[[258609,302815],[-230,-1971],[-471,-600],[9,-685]],[[257917,299559],[-515,1404],[-542,-471]],[[256860,300492],[-27,802]],[[221972,300839],[4,-1864]],[[221976,298975],[-230,1202],[-391,509],[-834,191]],[[220521,300877],[-145,0]],[[224904,305473],[0,-4595]],[[224904,300878],[-1476,-39]],[[260244,303344],[-448,-474],[-461,-1877]],[[259335,300993],[-374,2732],[-352,-910]],[[273413,301697],[-85,-3219]],[[273328,298478],[-403,-1011]],[[272925,297467],[-503,1412],[-567,2766]],[[271855,301645],[277,3711]],[[249738,306948],[6,-5485]],[[249744,301463],[-729,-2],[-437,570]],[[248578,302031],[-15,4958]],[[237343,299295],[-645,694],[-800,2842]],[[271855,301645],[-224,-1170]],[[271631,300475],[-514,966],[-162,2030],[-317,-254]],[[264817,304875],[-499,-1732]],[[264318,303143],[-198,104],[-7,-5871]],[[264113,297376],[-299,18],[-3,-1823]],[[263811,295571],[-420,-901]],[[263391,294670],[-672,167]],[[262719,294837],[116,1164]],[[262835,296001],[415,1553],[228,1602]],[[263478,299156],[298,1538],[245,2560],[-99,2041]],[[230025,306061],[101,-881],[-211,-1085],[101,-2120]],[[230016,301975],[-185,351],[-328,-1483],[-268,388],[-184,1849]],[[229051,303080],[-99,2169]],[[244411,304199],[-353,-700],[-26,-3601]],[[244032,299898],[-1165,156]],[[242867,300054],[62,5070]],[[276304,302935],[-783,-2654],[-394,-673],[-382,-2307]],[[274745,297301],[-240,1850]],[[265597,306304],[-143,-2281],[195,-1399]],[[265649,302624],[-510,-2675]],[[265139,299949],[-116,-620]],[[265023,299329],[-659,3102],[-46,712]],[[248578,302031],[0,-1381],[-586,-270],[-1,-1631]],[[247991,298749],[-443,543],[316,1088],[-750,39]],[[247114,300419],[2,3245]],[[250771,305310],[3,-4877],[-150,-1369]],[[250624,299064],[-878,-312]],[[249746,298752],[-2,2711]],[[231678,306850],[150,-591],[1,-3197],[270,-1476],[225,-5]],[[232324,301581],[-241,-630]],[[232083,300951],[-248,889],[-428,-565],[-250,-1798],[-558,-651]],[[230599,298826],[-126,948],[-567,1262],[110,939]],[[234008,302750],[-177,481],[-257,-1569]],[[233574,301662],[-669,199],[-133,969],[-448,-1249]],[[241862,305040],[-376,-47],[-11,-1571],[394,-3308]],[[241869,300114],[-693,134]],[[241176,300248],[-865,143]],[[226144,301881],[-2,-7872]],[[226142,294009],[-1232,-5]],[[224910,294004],[-6,6874]],[[266378,303296],[-305,-1111]],[[266073,302185],[-424,439]],[[246542,303700],[-6,-6913],[-291,-2],[0,-1617]],[[246245,295168],[-1257,-5]],[[244988,295163],[-45,602]],[[244943,295765],[269,600],[-237,1264],[283,816],[-40,1454],[303,-381],[-185,3715],[560,1251],[-185,1659]],[[244943,295765],[-41,-824],[-579,867]],[[244323,295808],[8,4035],[-299,55]],[[262518,305467],[-156,-2441],[-200,-874]],[[262162,302152],[-936,-50]],[[261226,302102],[-34,1160]],[[253367,305017],[-116,-5835]],[[253251,299182],[-739,-1765]],[[252512,297417],[39,554],[-611,7],[-2,2435]],[[251938,300413],[2,4904]],[[210732,295930],[-588,-12],[-2,-3234],[-124,-7],[0,-8009],[-134,-3]],[[209884,284665],[-2862,-34],[-27,-8244]],[[206995,276387],[-1400,-33],[4,8252],[101,1],[-2,3168]],[[263478,299156],[-127,1131],[-280,34]],[[263071,300321],[-38,5087]],[[179762,293446],[-4058,-182]],[[175704,293264],[-2642,-4],[-586,89],[-363,1122],[-385,245]],[[171728,294716],[266,2869],[-339,972],[-382,2958]],[[263071,300321],[-494,-473]],[[262577,299848],[-380,581]],[[262197,300429],[-35,1723]],[[270530,303060],[-303,-447],[112,-1813],[-159,-1241],[160,-3138]],[[270340,296421],[-326,1802]],[[270014,298223],[-319,2645],[-607,2239]],[[251938,300413],[-589,25],[0,-1082],[-287,-277]],[[251062,299079],[-438,-15]],[[229051,303080],[-28,-98]],[[229023,302982],[-419,-2885],[-33,-1358],[-271,1490],[50,1869],[-343,-239],[-176,-1290],[-249,389],[-61,1401]],[[227521,302359],[-216,-290]],[[242867,300054],[0,-1627]],[[242867,298427],[-989,64]],[[241878,298491],[-9,1623]],[[254079,302440],[15,-7371]],[[254094,295069],[-915,185]],[[253179,295254],[72,3928]],[[268489,303391],[-191,-580],[-387,-2962],[106,-885]],[[268017,298964],[-130,-738]],[[267887,298226],[-343,97],[-450,1172]],[[267094,299495],[12,1605]],[[267106,301100],[49,2811]],[[189753,293991],[-1506,-3],[-6,-4849],[-1376,-19],[-350,1601],[-4,-14590]],[[186511,276131],[-3149,-34]],[[183362,276097],[0,16244]],[[267106,301100],[-728,2196]],[[238742,303127],[-74,-8950]],[[238668,294177],[-668,109]],[[238000,294286],[-287,2380]],[[237713,296666],[-388,1100],[22,1528]],[[256860,300492],[-290,-2959],[-339,-792],[-245,-1878]],[[255986,294863],[-143,1385],[-293,274]],[[255550,296522],[0,1620],[-291,56],[-9,3268],[-291,887]],[[268863,303635],[139,-2859],[323,-3557]],[[269325,297219],[-471,-580]],[[268854,296639],[-87,-161]],[[268767,296478],[-371,1044],[-216,-422],[-163,1864]],[[227521,302359],[-8,-8970]],[[227513,293389],[-1201,1]],[[226312,293390],[-170,619]],[[259335,300993],[56,-1317],[-281,-1721]],[[259110,297955],[-211,-1709],[70,-886],[-507,-2768]],[[258462,292592],[1,2075],[-386,811]],[[258077,295478],[-160,4081]],[[247114,300419],[-4,-8972]],[[247110,291447],[-285,-6],[1,-1091],[-449,-9]],[[246377,290341],[-133,6],[1,4821]],[[270014,298223],[-538,-798]],[[269476,297425],[-151,-206]],[[271631,300475],[-1005,-5255]],[[270626,295220],[-44,239]],[[270582,295459],[-242,962]],[[265023,299329],[-257,-2573],[-190,586]],[[264576,297342],[-271,23]],[[264305,297365],[-192,11]],[[260085,295669],[3,546],[-557,17],[-159,1640],[-262,83]],[[260826,302840],[-296,-1219],[-6,-4236],[-439,-1716]],[[267094,299495],[-351,-1180]],[[266743,298315],[-277,2223]],[[266466,300538],[-393,1647]],[[261226,302102],[134,-4629]],[[261360,297473],[95,-3169]],[[261455,294304],[-945,242]],[[260510,294546],[-581,51]],[[259929,294597],[156,1072]],[[235149,298399],[-2,-6962]],[[235147,291437],[-173,647]],[[234974,292084],[-222,645],[-660,-166]],[[234092,292563],[-504,-210]],[[233588,292353],[-6,48]],[[233582,292401],[-8,9261]],[[239724,299780],[-34,-6034]],[[239690,293746],[-694,-159]],[[238996,293587],[-328,590]],[[230599,298826],[-15,-6106]],[[230584,292720],[-1253,143]],[[229331,292863],[-305,203]],[[229026,293066],[-3,9916]],[[229026,293066],[-1224,262]],[[227802,293328],[-289,61]],[[237713,296666],[-606,-1072]],[[237107,295594],[-319,701],[-638,-835],[-276,1729]],[[276580,301790],[-335,-2180],[7,-1182],[-302,-3863]],[[275950,294565],[-336,-991]],[[275614,293574],[-478,40],[-285,2097]],[[274851,295711],[-106,1590]],[[171728,294716],[-240,-2195]],[[171488,292521],[-527,2874],[-608,2125],[-308,1675]],[[233582,292401],[-515,1393],[-746,743],[-270,-627]],[[232051,293910],[32,7041]],[[266466,300538],[-488,-4111]],[[265978,296427],[-652,2740]],[[265326,299167],[-187,782]],[[255550,296522],[-579,144],[-98,-1640],[-485,58]],[[254388,295084],[-294,-15]],[[262197,300429],[-36,-1812],[-801,-1144]],[[249746,298752],[0,-823]],[[249746,297929],[-780,-17]],[[248966,297912],[-952,5]],[[248014,297917],[-23,832]],[[278136,299831],[-261,-1729],[-65,-2062],[-295,-1491],[-382,-3556]],[[277133,290993],[-221,469],[-599,3177],[-363,-74]],[[232051,293910],[-2,-967]],[[232049,292943],[-1216,-1078]],[[230833,291865],[-249,855]],[[274851,295711],[-156,130],[-298,-1759],[-415,2479],[-367,86],[-287,1831]],[[272925,297467],[-517,-3023]],[[272408,294444],[-1070,-5441]],[[271338,289003],[-265,919]],[[271073,289922],[-257,2317],[43,1727],[-233,1254]],[[258077,295478],[-440,-1479],[-434,-2505],[-547,-1592]],[[256656,289902],[-109,8]],[[256547,289910],[-268,1112],[-471,3450],[178,391]],[[220521,300877],[16,-8165]],[[220537,292712],[-1467,9]],[[219070,292721],[-4,8150]],[[221976,298975],[5,-6234]],[[221981,292741],[-1444,-29]],[[224910,294004],[2,-1314]],[[224912,292690],[-1486,25]],[[223426,292715],[2,8124]],[[219070,292721],[-1454,-13]],[[217616,292708],[-5,8125]],[[217616,292708],[-1442,-46]],[[216174,292662],[-19,8112]],[[223426,292715],[-1445,26]],[[216174,292662],[-1446,-96]],[[214728,292566],[-27,8100]],[[213225,300675],[57,-8129]],[[213282,292546],[-1287,-1]],[[211995,292545],[12,3392]],[[214728,292566],[-1446,-20]],[[241176,300248],[-11,-1320],[-519,-4119],[192,-1475],[382,-1185]],[[241220,292149],[-1146,189]],[[240074,292338],[-392,56],[8,1352]],[[266743,298315],[382,-3066],[-30,-933]],[[267095,294316],[-707,-914]],[[266388,293402],[-414,1708]],[[265974,295110],[4,1317]],[[262719,294837],[-459,-1602]],[[262260,293235],[-776,49]],[[261484,293284],[-29,1020]],[[262577,299848],[-12,-3860],[270,13]],[[248014,297917],[76,-4060],[-205,-781],[1,-1556]],[[247886,291520],[-437,-568]],[[247449,290952],[-227,-1244],[-112,1739]],[[252512,297417],[69,-2402],[-507,-278]],[[252074,294737],[0,1098],[-968,-57]],[[251106,295778],[-44,3301]],[[241878,298491],[54,-3824],[-182,-2391],[74,-1398]],[[241824,290878],[-231,-522],[-373,1793]],[[244323,295808],[-11,-3254]],[[244312,292554],[-1484,173]],[[242828,292727],[39,5700]],[[264965,295106],[-389,2236]],[[265326,299167],[-46,-1733],[-315,-2328]],[[278269,287761],[-76,264]],[[278193,288025],[76,-264]],[[279011,295964],[-403,-3615],[-92,-2363],[-262,1132],[231,-2620],[-212,-590],[-375,806]],[[277898,288714],[-123,574]],[[277775,289288],[-642,1705]],[[195305,289203],[0,-8030]],[[195305,281173],[-1,-6539]],[[195304,274634],[-185,-3]],[[195119,274631],[-313,2178],[42,3573],[-197,582],[-595,5810],[0,10694]],[[267887,298226],[124,-662],[-175,-1445],[3,-2071]],[[267839,294048],[-421,-2127]],[[267418,291921],[-323,2395]],[[253179,295254],[-83,-4573]],[[253096,290681],[-1016,-27]],[[252080,290654],[-6,4083]],[[265974,295110],[21,-727],[-419,-925],[-105,-1288]],[[265471,292170],[-170,1414]],[[265301,293584],[-336,1522]],[[251106,295778],[-195,-538]],[[250911,295240],[-465,-211],[-350,-1146]],[[250096,293883],[-350,16],[0,4030]],[[268767,296478],[-480,-2908]],[[268287,293570],[-448,478]],[[237107,295594],[0,-5231]],[[237107,290363],[-340,756],[-196,-1322],[-639,965],[-521,-444]],[[235411,290318],[-264,1119]],[[275614,293574],[-88,-2689],[-301,-778]],[[275225,290107],[-353,382],[-40,1051],[-800,-2860]],[[274032,288680],[-22,-73]],[[274010,288607],[-398,2353],[-785,2546]],[[272827,293506],[-419,938]],[[242828,292727],[23,-1854],[-369,-1417],[-65,-1108]],[[242417,288348],[-241,1667],[-352,863]],[[270582,295459],[-741,-3543]],[[269841,291916],[-395,3623],[30,1886]],[[259929,294597],[-147,0],[-211,-3807],[-383,40],[-157,-3573]],[[259031,287257],[-882,-27]],[[258149,287230],[-35,1333],[210,2008],[198,283],[-60,1738]],[[250096,293883],[-202,-504],[0,-2742]],[[249894,290637],[-533,-8]],[[249361,290629],[-5,2179],[-385,256],[-5,4848]],[[249361,290629],[-291,-1323]],[[249070,289306],[-1184,2214]],[[269841,291916],[-165,-788]],[[269676,291128],[-84,-5]],[[269592,291123],[-424,846],[-314,4670]],[[195119,274631],[-3726,22]],[[191393,274653],[0,1609]],[[191393,276262],[7,12672]],[[264305,297365],[79,-1214],[-282,-4274]],[[264102,291877],[-95,1]],[[264007,291878],[19,2058],[-215,1635]],[[265301,293584],[-113,-1286],[-385,-1433]],[[264803,290865],[-134,697],[-567,315]],[[238000,294286],[54,-4237],[-202,-2132],[-208,86],[128,-2330]],[[237772,285673],[-29,1]],[[237743,285674],[-636,-3]],[[237107,285671],[0,4692]],[[269592,291123],[-134,-693]],[[269458,290430],[-356,976],[-547,-1372]],[[268555,290034],[-268,3536]],[[256547,289910],[-603,-2119],[-101,-2362],[-288,-52]],[[255555,285377],[-818,63]],[[254737,285440],[-325,195],[-15,2538]],[[254397,288173],[-9,6911]],[[211995,292545],[-22,-7994]],[[211973,284551],[0,-8132]],[[211973,276419],[1,-8101]],[[211974,268318],[0,-1611],[-730,-3]],[[211244,266704],[-1105,-3]],[[210139,266701],[0,9724],[-254,-1],[-1,8241]],[[252080,290654],[-402,-8]],[[251678,290646],[-765,-8]],[[250913,290638],[-2,4602]],[[244988,295163],[-59,-1673],[289,735],[-25,-3356],[150,-2943],[-317,-598],[225,-984],[-128,-819]],[[245123,285525],[1,-136]],[[245124,285389],[-272,19]],[[244852,285408],[-481,19]],[[244371,285427],[-67,-3]],[[244304,285424],[8,7130]],[[264007,291878],[-125,-1789],[-179,18]],[[263703,290107],[-245,1867],[-67,2696]],[[258149,287230],[-74,-1530]],[[258075,285700],[-258,915],[-757,36],[1,-408]],[[257061,286243],[-402,2157],[-3,1502]],[[271073,289922],[-669,-320],[-229,1237],[-260,-547]],[[269915,290292],[-239,836]],[[254397,288173],[-931,-2936]],[[253466,285237],[-470,-87]],[[252996,285150],[100,5531]],[[250913,290638],[-58,-1637],[-291,-9],[-3,-1642],[-289,-10]],[[250272,287340],[5,3291],[-383,6]],[[246377,290341],[40,-3234]],[[246417,287107],[-592,20],[0,-1670]],[[245825,285457],[-702,68]],[[266388,293402],[-34,-4888]],[[266354,288514],[-753,-748]],[[265601,287766],[-17,903]],[[265584,288669],[-113,3501]],[[263703,290107],[-14,-676]],[[263689,289431],[-975,45],[-28,-605]],[[262686,288871],[-213,626]],[[262473,289497],[-213,3738]],[[277775,289288],[-200,-1209],[-345,-447],[-431,-3536]],[[276799,284096],[-357,-1958],[-73,1501]],[[276369,283639],[-170,-184],[-119,1854],[-263,407]],[[275817,285716],[-479,2445],[-113,1946]],[[175704,293264],[8,-6544],[-64,-13],[-10,-8500]],[[175638,278207],[-2839,-1563],[17,2580],[-321,834],[-130,1949],[82,972],[-206,4489],[-531,4208],[-222,845]],[[261484,293284],[160,-5559]],[[261644,287725],[10,-399]],[[261654,287326],[-1004,-14]],[[260650,287312],[-168,-13]],[[260482,287299],[28,7247]],[[260482,287299],[-991,-305]],[[259491,286994],[-460,263]],[[233588,292353],[-6,-56]],[[233582,292297],[-853,-556],[-398,-900],[-290,-1445]],[[232041,289396],[8,3547]],[[272827,293506],[-15,-5200],[98,-785]],[[272910,287521],[-478,-195],[-495,933],[-201,-1171]],[[271736,287088],[-363,872],[-35,1043]],[[267418,291921],[45,-835],[-297,-952],[-55,-1334]],[[267111,288800],[-431,-34]],[[266680,288766],[-326,-252]],[[202831,292590],[15,-6293]],[[202846,286297],[-1525,-4281],[1,-812],[-1146,19],[-2,-3253]],[[200174,277970],[-860,-3]],[[199314,277967],[-359,449],[44,2766],[-165,3253],[-162,392],[-103,4258],[-348,-19]],[[238996,293587],[-215,-3465],[-109,32],[-25,-4497]],[[238647,285657],[-84,2]],[[238563,285659],[-791,14]],[[268555,290034],[21,-284]],[[268576,289750],[-391,-1857],[-455,-1077]],[[267730,286816],[-127,1308],[-492,676]],[[183362,276097],[1,-8677]],[[183363,267420],[-4124,8474],[12,2286],[251,1896]],[[179502,280076],[536,716],[179,2808],[-146,2208]],[[191393,276262],[-1966,-34],[0,-193],[-2916,96]],[[226312,293390],[-10,-8052]],[[226302,285338],[-375,38]],[[225927,285376],[-1032,85]],[[224895,285461],[17,7229]],[[240074,292338],[-28,-6700]],[[240046,285638],[-697,10]],[[239349,285648],[-702,9]],[[265584,288669],[-611,417]],[[264973,289086],[-229,4]],[[264744,289090],[59,1775]],[[274010,288607],[-793,-2801]],[[273217,285806],[-307,1715]],[[179502,280076],[-3864,-1869]],[[227802,293328],[-42,-8197]],[[227760,285131],[-407,73]],[[227353,285204],[-1051,134]],[[229331,292863],[-27,-7781]],[[229304,285082],[-524,-54]],[[228780,285028],[-1020,103]],[[262473,289497],[-829,-1772]],[[232039,284934],[-231,5],[-115,-1983],[146,-673]],[[231839,282283],[-397,23]],[[231442,282306],[-615,60]],[[230827,282366],[1,2607]],[[230828,284973],[5,6892]],[[232041,289396],[-2,-4462]],[[230828,284973],[-612,12]],[[230216,284985],[-912,97]],[[219070,292721],[-6,-8097]],[[219064,284624],[-380,9]],[[218684,284633],[-1066,127]],[[217618,284760],[-2,7948]],[[220537,292712],[6,-8141]],[[220543,284571],[-433,-2]],[[220110,284569],[-1046,55]],[[234974,292084],[-30,-7088]],[[234944,284996],[-291,1575],[-562,-613]],[[234091,285958],[1,6605]],[[217618,284760],[-377,-125]],[[217241,284635],[-1069,-47]],[[216172,284588],[2,8074]],[[223426,292715],[8,-8204]],[[223434,284511],[-404,3]],[[223030,284514],[-1045,0]],[[221985,284514],[-4,8227]],[[224895,285461],[-2,-1035],[-413,37]],[[224480,284463],[-1046,48]],[[221985,284514],[-394,-1]],[[221591,284513],[-1048,58]],[[244304,285424],[-1696,42]],[[242608,285466],[-191,2882]],[[216172,284588],[-373,14]],[[215799,284602],[-1072,-38]],[[214727,284564],[1,8002]],[[206995,276387],[10,-9680]],[[207005,266707],[-196,-1]],[[206809,266706],[-3008,34]],[[203801,266740],[-1057,-20]],[[202744,266720],[2,17811],[100,1766]],[[213282,292546],[0,-8000]],[[213282,284546],[-1309,5]],[[214727,284564],[-369,-15]],[[214358,284549],[-1076,-3]],[[234091,285958],[-73,-393]],[[234018,285565],[-60,-961],[-377,13]],[[233581,284617],[1,7680]],[[242608,285466],[-1828,114]],[[240780,285580],[-734,58]],[[233581,284617],[-993,-40]],[[232588,284577],[-549,357]],[[235411,290318],[-5,-7247]],[[235406,283071],[-145,-7]],[[235261,283064],[-39,472]],[[235222,283536],[-278,1460]],[[249070,289306],[-206,-1882],[-208,-3399],[-189,-953]],[[248467,283072],[-1109,2439]],[[247358,285511],[-151,1938],[245,381],[-3,3122]],[[264744,289090],[-346,-258]],[[264398,288832],[-567,369],[-126,-463]],[[263705,288738],[-16,693]],[[275817,285716],[197,-1749],[-222,-2037],[-677,747]],[[275115,282677],[4,3611],[-520,96],[-567,2296]],[[247358,285511],[-237,-30],[-2,-1592],[-572,-18]],[[246547,283871],[-9,3240],[-121,-4]],[[269458,290430],[-641,-2764]],[[268817,287666],[-241,2084]],[[269915,290292],[98,-679],[-163,-3128],[52,-2327],[-122,-1900]],[[269780,282258],[-329,-1370]],[[269451,280888],[-242,1119]],[[269209,282007],[-81,3665],[-311,1994]],[[237107,285671],[0,-2571]],[[237107,283100],[-1701,-29]],[[271736,287088],[202,-924]],[[271938,286164],[-630,-2538]],[[271308,283626],[-251,828],[-618,-686],[-182,-1941]],[[270257,281827],[-477,431]],[[252996,285150],[-21,-1157]],[[252975,283993],[-1295,-57]],[[251680,283936],[-2,6710]],[[251680,283936],[-283,10]],[[251397,283946],[-1128,95]],[[250269,284041],[3,3299]],[[250269,284041],[-1132,-32],[-12,-840]],[[249125,283169],[-658,-97]],[[257061,286243],[15,-3977],[-399,14]],[[256677,282280],[-836,-104],[-284,802]],[[255557,282978],[-2,2399]],[[269209,282007],[-689,-992],[-95,756],[-402,-936]],[[268023,280835],[-353,3484]],[[267670,284319],[60,2497]],[[263705,288738],[-84,-3972]],[[263621,284766],[55,-1653]],[[263676,283113],[-539,-691]],[[263137,282422],[-449,518]],[[262688,282940],[-2,5931]],[[262688,282940],[-898,-37]],[[261790,282903],[-136,4423]],[[199314,277967],[-878,-18],[0,-1622],[-852,-5],[-2,-8136],[36,-4019]],[[197618,264167],[-857,-7],[-37,4023],[3,8134],[-307,3],[2,1613],[-576,1],[-4,3233],[-537,6]],[[264398,288832],[-62,-3685]],[[264336,285147],[-715,-381]],[[264973,289086],[-7,-4742],[-221,-293]],[[264745,284051],[2,1069],[-411,27]],[[265601,287766],[265,-1984],[29,-1347]],[[265895,284435],[-506,-1945]],[[265389,282490],[-646,23]],[[264743,282513],[2,1538]],[[267670,284319],[-205,1160],[-587,-1540]],[[266878,283939],[-198,4827]],[[266878,283939],[-137,-520]],[[266741,283419],[-297,-993]],[[266444,282426],[-403,800],[-146,1209]],[[275274,275950],[263,628]],[[275537,276578],[-263,-628]],[[275115,282677],[-128,-2423],[77,-2306]],[[275064,277948],[21,-1800],[-453,1074]],[[274632,277222],[-397,2101],[-304,486]],[[273931,279809],[-206,2389],[-508,3608]],[[273217,285806],[-382,-1361],[-117,-2128],[-399,-1751]],[[272319,280566],[-381,5598]],[[254737,285440],[-323,-2639],[122,-3923],[141,-1191],[-210,-1224]],[[254467,276463],[-114,140]],[[254353,276603],[-184,1820],[-373,-689],[-63,3380],[-367,2777],[100,1346]],[[261790,282903],[136,-2309]],[[261926,280594],[-1276,-335]],[[260650,280259],[0,7053]],[[260650,280259],[-289,-578],[3,-1890]],[[260364,277791],[-286,-278],[4,-1615],[-249,-23]],[[259833,275875],[-16,4870],[-320,8]],[[259497,280753],[-6,6241]],[[259497,280753],[-1026,-28]],[[258471,280725],[-230,1151],[-166,3824]],[[246547,283871],[-291,-1615],[175,-342],[-73,-2890]],[[246358,279024],[-674,12],[3,3264],[138,3157]],[[235222,283536],[-1204,-38]],[[234018,283498],[0,2067]],[[258471,280725],[-105,-859]],[[258366,279866],[-840,-31],[-2,-820],[-562,46]],[[256962,279061],[-281,-17],[0,1226]],[[256681,280270],[-4,2010]],[[202744,266720],[-672,-15],[-49,-2500],[301,-1531]],[[202324,262674],[-2142,-6]],[[200182,262668],[-8,15302]],[[272319,280566],[44,-2784]],[[272363,277782],[-442,-1977]],[[271921,275805],[-817,2976]],[[271104,278781],[-65,753],[269,4092]],[[273931,279809],[-121,-807]],[[273810,279002],[-90,-725],[-314,2440],[-742,-3663]],[[272664,277054],[-301,728]],[[248467,283072],[-232,-2682],[-637,-1400],[-479,-1603]],[[247119,277387],[-290,-1241]],[[246829,276146],[-463,2071]],[[246366,278217],[-8,807]],[[238701,271113],[-400,6]],[[238301,271119],[-149,1513],[-322,445],[-466,-2739],[-255,8]],[[237109,270346],[-2,3654]],[[237107,274000],[0,5599]],[[237107,279599],[0,3501]],[[237743,285674],[-72,-1364],[156,-1652],[-2,-3964],[475,-5513],[401,-2068]],[[238563,285659],[193,-3036],[29,-8285],[191,-5]],[[238976,274333],[-155,-3244]],[[238821,271089],[-120,24]],[[239516,277586],[89,-2415],[-250,-840],[-379,2]],[[239349,285648],[4,-5606],[141,-2],[22,-2454]],[[240778,280837],[-287,-14],[-145,-3235]],[[240346,277588],[-830,-2]],[[240780,285580],[-2,-4743]],[[242619,280157],[-575,-2639],[-400,30]],[[241644,277548],[0,1623],[-290,937],[-576,729]],[[242608,285466],[11,-5309]],[[234018,283498],[-3,-6187]],[[234015,277311],[-896,740],[-334,1437]],[[232785,279488],[-114,619]],[[232671,280107],[-83,4470]],[[246366,278217],[-29,-987],[-362,175],[-2,-2477],[-252,41],[-35,2444],[-221,12]],[[245465,277425],[-297,1279],[258,1421],[-227,255],[-6,1864],[185,934],[-62,1883],[-223,-1603],[31,1931]],[[268023,280835],[-29,-952]],[[267994,279883],[-750,-2311]],[[267244,277572],[-503,5847]],[[244371,285427],[-163,-2146],[-308,-2022],[-90,-2138]],[[243810,279121],[-368,-2106],[-401,-900]],[[243041,276115],[-25,3010],[-397,1032]],[[255557,282978],[-143,-817],[-4,-3254],[-143,-3],[2,-3233]],[[255269,275671],[-569,-21],[-233,813]],[[244852,285408],[-216,-2699],[-7,-2067],[-283,-3111]],[[244346,277531],[-420,5],[-116,1585]],[[225927,285376],[-30,-8276]],[[225897,277100],[-4,-879]],[[225893,276221],[-1134,27]],[[224759,276248],[-281,40]],[[224478,276288],[2,8175]],[[245465,277425],[-76,-261]],[[245389,277164],[-175,-453],[-903,-2]],[[244311,276709],[35,822]],[[227353,285204],[-17,-8167]],[[227336,277037],[-186,1]],[[227150,277038],[-1253,62]],[[264743,282513],[-219,-2967]],[[264524,279546],[-235,1090]],[[264289,280636],[-264,581],[-349,1896]],[[254353,276603],[-498,-1835],[-40,-1058],[323,-1231]],[[254138,272479],[-1368,-36]],[[252770,272443],[91,5017]],[[252861,277460],[114,6533]],[[228780,285028],[-17,-8118]],[[228763,276910],[-136,16]],[[228627,276926],[-1291,111]],[[230216,284985],[-7,-3142]],[[230209,281843],[-30,-4995]],[[230179,276848],[-1416,62]],[[230827,282366],[0,-512],[-618,-11]],[[232671,280107],[-599,940],[-233,1236]],[[218684,284633],[-14,-8156]],[[218670,276477],[-1431,44]],[[217239,276521],[2,8114]],[[210139,266701],[-717,-2]],[[209422,266699],[-123,-1]],[[209299,266698],[-2294,9]],[[220110,284569],[-7,-8139]],[[220103,276430],[-1433,47]],[[217239,276521],[0,-68]],[[217239,276453],[-1432,22]],[[215807,276475],[-8,8127]],[[215807,276475],[-1432,-37]],[[214375,276438],[-17,8111]],[[214375,276438],[-24,-1]],[[214351,276437],[-2378,-18]],[[221591,284513],[0,-8235]],[[221591,276278],[-47,0]],[[221544,276278],[-1441,152]],[[223030,284514],[0,-8234]],[[223030,276280],[-52,1]],[[222978,276281],[-1387,-3]],[[224478,276288],[-1448,-8]],[[271104,278781],[-447,-785]],[[270657,277996],[-226,1046],[-174,2785]],[[266444,282426],[-235,-3362]],[[266209,279064],[-288,518]],[[265921,279582],[-345,931],[-187,1977]],[[251397,283946],[0,-6508]],[[251397,277438],[-1123,-10]],[[250274,277428],[-5,6613]],[[250274,277428],[-14,-1]],[[250260,277427],[-1136,17],[0,1059]],[[249124,278503],[1,4666]],[[252861,277460],[-1464,-22]],[[235261,283064],[11,-1602]],[[235272,281462],[1,-2617]],[[235273,278845],[-795,-2144]],[[234478,276701],[-463,610]],[[267244,277572],[-756,-2455]],[[266488,275117],[-124,3123],[-155,824]],[[264289,280636],[-142,-523],[-197,-2955],[-99,3]],[[263851,277161],[-538,-506]],[[263313,276655],[-159,-302]],[[263154,276353],[0,1215]],[[263154,277568],[-17,4854]],[[237107,279599],[-279,901],[-87,-871],[-299,1006],[-286,-1036],[-342,12],[-542,1851]],[[249124,278503],[-151,-880]],[[248973,277623],[-205,-33],[-579,-3455]],[[248189,274135],[-495,8],[0,1630],[-575,8],[0,1606]],[[256681,280270],[-69,-2497],[-191,-1960],[-869,-125],[4,-3256],[-143,-8]],[[255413,272424],[-143,-6],[-1,3253]],[[263154,277568],[-1077,449]],[[262077,278017],[-151,2577]],[[265921,279582],[1,-27]],[[265922,279555],[-184,34],[-659,-3026]],[[265079,276563],[-284,2687],[-271,296]],[[231442,282306],[2,-8953]],[[231444,273353],[-1048,20]],[[230396,273373],[-217,3475]],[[270657,277996],[-80,-1270]],[[270577,276726],[-329,-340],[-291,-3112],[55,-642]],[[270012,272632],[0,-5]],[[270012,272627],[-338,-490],[-153,1146]],[[269521,273283],[74,1607],[-301,1073],[-437,275]],[[268857,276238],[507,2501],[87,2149]],[[232785,279488],[1,-3857],[404,-2322]],[[233190,273309],[-1746,44]],[[268857,276238],[-59,1856],[-542,1928],[-262,-139]],[[237107,274000],[-847,-1143],[-402,1182]],[[235858,274039],[-245,1]],[[235613,274040],[-341,532],[1,4273]],[[197618,264167],[24,-1497]],[[197642,262670],[0,-8384],[-2345,-23]],[[195297,254263],[7,20371]],[[259833,275875],[19,-769],[-399,-590]],[[259453,274516],[-479,386],[-118,1013],[-485,-1586]],[[258371,274329],[-5,5537]],[[241644,277548],[-1,-1627]],[[241643,275921],[-578,17],[3,-798],[-433,-2]],[[240635,275138],[-285,12],[-4,2438]],[[273810,279002],[98,-1654]],[[273908,277348],[8,-2098]],[[273916,275250],[-11,-827]],[[273905,274423],[15,-90]],[[273920,274333],[-20,-184]],[[273900,274149],[-60,-391]],[[273840,273758],[-438,-2518],[192,-2128]],[[273594,269112],[-42,-1026],[-431,800]],[[273121,268886],[-76,2024]],[[273045,270910],[44,2084],[-425,4060]],[[265079,276563],[-41,-439]],[[265038,276124],[-259,143],[-399,-2643]],[[264380,273624],[-384,780]],[[263996,274404],[-145,2757]],[[262077,278017],[223,-1817]],[[262300,276200],[-162,-699],[-765,-80],[10,-1075],[-289,-21]],[[261094,274325],[-155,1623],[-575,1843]],[[256962,279061],[29,-2256],[255,-3763]],[[257246,273042],[-260,-2156],[4,-3297]],[[256990,267589],[-755,-7],[-207,1771],[-614,2276]],[[255414,271629],[-1,795]],[[243041,276115],[-251,-2320],[-86,-1940]],[[242704,271855],[-773,7]],[[241931,271862],[-288,2425],[0,1634]],[[268650,272453],[-454,-2107]],[[268196,270346],[-296,-907],[-412,5134]],[[267488,274573],[-244,2999]],[[268857,276238],[-273,-3364],[66,-421]],[[258371,274329],[-238,-1220]],[[258133,273109],[-632,1134],[-255,-1201]],[[274213,271739],[154,-1026],[-395,-1964],[241,2990]],[[273840,273758],[261,-1595],[-185,-2613],[-322,-438]],[[273920,274333],[-20,-184]],[[273916,275250],[-11,-827]],[[274414,275981],[264,-152],[280,-1526],[-294,-988],[-167,-1800],[-139,1960],[56,2506]],[[274160,276707],[170,-315],[46,-4156],[-277,1436],[-122,1905],[183,1130]],[[274632,277222],[33,-1172],[-536,816],[-157,-985],[-64,1467]],[[265516,275418],[-478,706]],[[265922,279555],[-53,-2958],[-353,-1179]],[[266488,275117],[0,-942]],[[266488,274175],[-328,-2107]],[[266160,272068],[-649,45]],[[265511,272113],[5,3305]],[[234478,276701],[5,-3100]],[[234483,273601],[0,-4336]],[[234483,269265],[-1322,-44]],[[233161,269221],[-81,1801],[110,2287]],[[244311,276709],[-53,-2457]],[[244258,274252],[-441,-8],[-351,-1304],[-29,-1626],[-344,-1796]],[[243093,269518],[-234,270],[-155,2067]],[[235613,274040],[-174,-434],[-956,-5]],[[271921,275805],[37,-1771],[275,-2846]],[[272233,271188],[-961,-1642]],[[271272,269546],[-98,1565],[-427,591]],[[270747,271702],[140,2717],[-310,2307]],[[250260,277427],[-1,-6571]],[[250259,270856],[-1135,-30]],[[249124,270826],[0,2438],[-151,4359]],[[246829,276146],[-140,-526],[-67,-2601],[-183,266],[-98,-2397]],[[246341,270888],[-113,-1301],[-411,-1386],[-316,625]],[[245501,268826],[-1,115]],[[245500,268941],[-62,69]],[[245438,269010],[-314,191],[117,1425]],[[245241,270626],[337,223],[252,2168],[-256,410],[68,1607],[-306,123],[53,2007]],[[263154,276353],[-211,-1786],[-562,-838]],[[262381,273729],[-81,2471]],[[200182,262668],[-2540,2]],[[273045,270910],[-142,209],[-547,-2636]],[[272356,268483],[-123,2705]],[[261094,274325],[1,-3262]],[[261095,271063],[-1174,-45],[-179,787]],[[259742,271805],[-289,2711]],[[249124,270826],[0,-3253]],[[249124,267573],[-1393,50]],[[247731,267623],[-42,2293],[500,4219]],[[240635,275138],[6,-4081],[-110,-1625]],[[240531,269432],[-348,18]],[[240183,269450],[-690,9]],[[239493,269459],[-75,1633],[-597,-3]],[[267488,274573],[-96,548],[-482,-3351]],[[266910,271770],[-422,2405]],[[252770,272443],[-27,-1508]],[[252743,270935],[-1345,-64]],[[251398,270871],[-1,6567]],[[251398,270871],[-1139,-15]],[[247731,267623],[-1360,-27]],[[246371,267596],[-30,3292]],[[245500,268941],[-62,69]],[[245241,270626],[-1027,-144]],[[244214,270482],[-102,1787],[146,1983]],[[263996,274404],[-106,-4613]],[[263890,269791],[-3,-598]],[[263887,269193],[-267,9],[-340,1831]],[[263280,271033],[-27,-1]],[[263253,271032],[60,5623]],[[270747,271702],[-157,186]],[[270590,271888],[-578,744]],[[227150,277038],[6,-4410]],[[227156,272628],[-469,-47],[-452,-1538]],[[226235,271043],[-342,5178]],[[228627,276926],[3,-5287]],[[228630,271639],[-1087,-1714]],[[227543,269925],[-107,-742],[-280,1303]],[[227156,270486],[0,2142]],[[230396,273373],[193,-555]],[[230589,272818],[-1430,-4744]],[[229159,268074],[-124,-407],[-405,3972]],[[255414,271629],[-142,-188],[4,-2272],[-284,-8],[3,-2362],[-125,-263]],[[254870,266536],[-1130,-22]],[[253740,266514],[-126,1159],[208,568],[68,3761],[248,477]],[[263253,271032],[-736,-37]],[[262517,270995],[98,588],[-330,1225],[96,921]],[[217239,276453],[-26,-8132]],[[217213,268321],[-224,-2]],[[216989,268319],[-1200,8]],[[215789,268327],[18,8148]],[[218670,276477],[-12,-8190]],[[218658,268287],[-436,22]],[[218222,268309],[-1009,12]],[[220103,276430],[-15,-8194]],[[220088,268236],[-232,-5]],[[219856,268231],[-1198,56]],[[215789,268327],[-226,-12]],[[215563,268315],[-1212,-2]],[[214351,268313],[0,8124]],[[214351,268313],[-211,4]],[[214140,268317],[-1427,-23]],[[212713,268294],[-739,24]],[[265511,272113],[-316,-756],[-183,-1476]],[[265012,269881],[-430,1092]],[[264582,270973],[-206,1237],[4,1414]],[[221544,276278],[-6,-8069]],[[221538,268209],[-230,16]],[[221308,268225],[-1220,11]],[[224759,276248],[2,-3983],[-213,-702]],[[224548,271563],[-1040,-3414]],[[223508,268149],[-541,30]],[[222967,268179],[11,8102]],[[226235,271043],[225,-2720]],[[226460,268323],[-392,-1294]],[[226068,267029],[-565,-1868]],[[225503,265161],[-119,1166],[-213,-723],[-623,5959]],[[222967,268179],[-215,-7]],[[222752,268172],[-1214,37]],[[191393,274653],[-1,-12960]],[[191392,261693],[-1985,-98],[1,-3800],[-565,-10],[0,-1774]],[[188843,256011],[-5480,11409]],[[269521,273283],[-686,-1045]],[[268835,272238],[-185,215]],[[262517,270995],[-386,-1847],[16,-1278]],[[262147,267870],[-361,-23],[-202,1603],[-424,-23]],[[261160,269427],[-65,1636]],[[259742,271805],[-223,-444],[6,-3715]],[[259525,267646],[5,-1553],[-546,-20]],[[258984,266073],[-309,-26],[-5,1611],[-285,-16]],[[258385,267642],[-7,3608],[-245,1859]],[[241931,271862],[-1,-2446]],[[241930,269416],[-1399,16]],[[268196,270346],[-120,-1131]],[[268076,269215],[-774,-4371]],[[267302,264844],[-222,1407],[-144,2419]],[[266936,268670],[128,1355],[-154,1745]],[[264582,270973],[-5,-1326],[-687,144]],[[195297,254263],[-3928,9]],[[191369,254272],[23,7421]],[[258385,267642],[-117,-1603]],[[258268,266039],[-1141,-46]],[[257127,265993],[-137,1596]],[[235858,274039],[-247,-3595],[-55,-4246],[247,15]],[[235803,266213],[164,-2415]],[[235967,263798],[-1350,24]],[[234617,263822],[-133,12],[-1,5431]],[[244214,270482],[8,-2104],[-240,-3867]],[[243982,264511],[-59,1623],[-511,-1824],[-304,1856]],[[243108,266166],[-15,3352]],[[266936,268670],[-756,230]],[[266180,268900],[-20,3168]],[[237109,270346],[75,-4024]],[[237184,266322],[-1381,-109]],[[233161,269221],[87,-951]],[[233248,268270],[-1739,-1463]],[[231509,266807],[-7,123]],[[231502,266930],[-161,2702],[-752,3186]],[[269315,266119],[-168,-187]],[[269147,265932],[-152,1040],[-160,5266]],[[269521,273283],[-206,-7164]],[[270012,272627],[143,-2843],[-121,-4705]],[[270034,265079],[-575,985]],[[269459,266064],[-144,55]],[[238301,271119],[214,-818],[-11,-1664],[522,-3202]],[[239026,265435],[-240,-346],[-1,-1273]],[[238785,263816],[-1220,-19]],[[237565,263797],[-381,2525]],[[231502,266930],[-1230,-4027]],[[230272,262903],[-620,348]],[[229652,263251],[-493,4823]],[[227156,270486],[-696,-2163]],[[270590,271888],[127,-3674],[608,-625]],[[271325,267589],[-175,-615]],[[271150,266974],[-403,-4200]],[[270747,262774],[-221,704]],[[270526,263478],[-177,1370],[-315,231]],[[253740,266514],[-294,-3348],[252,-2067]],[[253698,261099],[-1047,-27]],[[252651,261072],[-26,3649]],[[252625,264721],[118,6214]],[[269147,265932],[-285,-745]],[[268862,265187],[-233,1642],[-442,1367],[-111,1019]],[[261160,269427],[-51,-2452],[-440,-328],[-199,-2179]],[[260470,264468],[-371,2],[3,1617],[-263,0],[-27,1492],[-287,67]],[[266180,268900],[-4,-1685]],[[266176,267215],[-979,52]],[[265197,267267],[-185,2614]],[[271272,269546],[173,-1186]],[[271445,268360],[-120,-771]],[[243108,266166],[-323,-822]],[[242785,265344],[-856,1]],[[241929,265345],[1,4071]],[[257127,265993],[-143,-9],[6,-2440]],[[256990,263544],[-1655,-26]],[[255335,263518],[-332,-39],[-133,3057]],[[229652,263251],[-593,-1975]],[[229059,261276],[-293,2872],[-669,-2188]],[[228097,261960],[2,1607],[-452,1891],[172,816],[-273,611],[-3,3040]],[[225503,265161],[144,-1411],[-855,-2936]],[[224792,260814],[-81,737],[-490,-429]],[[224221,261122],[-713,7027]],[[245501,268826],[-126,-1816],[-314,-1032],[-166,-1704]],[[244895,264274],[-272,-484],[78,-1751]],[[244701,262039],[-172,-288]],[[244529,261751],[-462,332]],[[244067,262083],[-85,2428]],[[272356,268483],[444,-3810]],[[272800,264673],[248,-709],[-50,-2336],[-442,1524]],[[272556,263152],[-244,2510],[-518,507],[-349,2191]],[[239493,269459],[179,-3271],[-323,2],[-2,-1288],[-321,533]],[[273103,263918],[241,-619],[-261,-1765],[-124,1737],[144,647]],[[273429,267956],[229,-1122],[-211,-969],[-18,2091]],[[273121,268886],[209,-711],[80,-2196],[219,-966],[-158,-954],[-438,1417],[-233,-803]],[[263887,269193],[-34,-3123]],[[263853,266070],[-27,-877],[-408,18]],[[263418,265211],[-156,2]],[[263262,265213],[18,5820]],[[263262,265213],[-700,78]],[[262562,265291],[-449,1252]],[[262113,266543],[34,1327]],[[265197,267267],[107,-2251]],[[265304,265016],[-1157,120],[0,-795]],[[264147,264341],[-294,1729]],[[252625,264721],[-414,-683],[-803,-568]],[[251408,263470],[-10,7401]],[[246371,267596],[-50,-4880]],[[246321,262716],[-774,1409],[-652,149]],[[251408,263470],[-92,-39]],[[251316,263431],[-1040,-418]],[[250276,263013],[-17,7843]],[[250276,263013],[-235,-98]],[[250041,262915],[-702,-302]],[[249339,262613],[-25,4964],[-190,-4]],[[228097,261960],[-913,-2937]],[[227184,259023],[-236,2293],[-215,-717]],[[226733,260599],[-665,6430]],[[268862,265187],[-531,-2011]],[[268331,263176],[-444,-557]],[[267887,262619],[-507,1247]],[[267380,263866],[-78,978]],[[241929,265345],[-139,-2434]],[[241790,262911],[-715,10],[-2,-1631],[-985,-12]],[[240088,261278],[65,2738],[214,1719],[-184,3715]],[[240088,261278],[187,-1589],[292,-494],[230,-1479]],[[240797,257716],[-541,-2781],[-190,-401]],[[240066,254534],[-710,332]],[[239356,254866],[-1,3235],[-281,-4],[-4,3280],[-287,5],[2,2434]],[[262113,266543],[-202,-2490],[-1,-1443]],[[261910,262610],[38,-331]],[[261948,262279],[-248,-1122],[-556,79],[-1,-1623]],[[261143,259613],[-925,-27]],[[260218,259586],[239,3100],[13,1782]],[[234617,263822],[-104,-1184],[69,-2704],[234,-2043]],[[234816,257891],[-383,-1879]],[[234433,256012],[-270,786],[-111,1768],[-373,551]],[[233679,259117],[-6,1203],[-351,1944],[-118,1559],[44,4447]],[[267380,263866],[-842,-12]],[[266538,263854],[-369,127]],[[266169,263981],[7,3234]],[[273082,261032],[-133,-2579],[-38,2026],[171,553]],[[272823,261759],[40,-1068],[-396,-433]],[[272467,260258],[-390,846]],[[272077,261104],[-418,1229],[-343,2022],[41,1842],[-207,777]],[[272556,263152],[267,-1393]],[[218222,268309],[-10,-7270]],[[218212,261039],[-112,-2491],[-1121,-108]],[[216979,258440],[2,1756]],[[216981,260196],[8,8123]],[[216981,260196],[-1417,9]],[[215564,260205],[-1,8110]],[[215564,260205],[-1425,-1]],[[214139,260204],[1,8113]],[[214139,260204],[-87,1]],[[214052,260205],[-1251,8]],[[212801,260213],[-88,1]],[[212713,260214],[0,8080]],[[212713,260214],[-1473,-6]],[[211240,260208],[4,6496]],[[219856,268231],[-2,-7250]],[[219854,260981],[-1642,58]],[[233679,259117],[-1054,-950],[-245,-706]],[[232380,257461],[15,2779],[-147,-649]],[[232248,259591],[-249,2567],[-298,600],[38,1654],[-230,2395]],[[222752,268172],[-19,-11396]],[[222733,256776],[-311,-1069],[-354,1218],[-198,-944],[-249,1262]],[[221621,257243],[-334,1575]],[[221287,258818],[21,9407]],[[221287,258818],[-1085,65]],[[220202,258883],[-344,21],[-4,2077]],[[224221,261122],[-256,-235],[-55,-1439],[-589,-2354]],[[223321,257094],[-276,-435]],[[223045,256659],[-312,117]],[[260218,259586],[-114,-1]],[[260104,259585],[-994,-4]],[[259110,259581],[-7,3223],[-142,-8],[23,3277]],[[259110,259581],[-134,-3309]],[[258976,256272],[-231,289],[-10,1358],[-329,-1423],[-4,1398],[-276,-34]],[[258126,257860],[-1,2419],[142,7],[1,5753]],[[247731,267623],[274,-3564],[25,-1966]],[[248030,262093],[-341,-655]],[[247689,261438],[-106,-329],[-1263,-26]],[[246320,261083],[1,1633]],[[249339,262613],[-284,-111]],[[249055,262502],[-612,-242]],[[248443,262260],[-413,-167]],[[266169,263981],[-1,-930],[-528,-13]],[[265640,263038],[-382,826]],[[265258,263864],[46,1152]],[[225327,255832],[-535,4982]],[[226733,260599],[-1151,-3886]],[[225582,256713],[-255,-881]],[[272077,261104],[-207,-2290],[-271,-706]],[[271599,258108],[-852,4666]],[[232248,259591],[-1251,-3816]],[[230997,255775],[-725,7128]],[[209299,266698],[-217,-16660]],[[209082,250038],[-2270,-8220]],[[206812,241818],[27,3208],[-30,21680]],[[206812,241818],[-175,-639]],[[206637,241179],[-655,3287],[-500,980],[-452,2433],[-137,1784],[-467,1523],[-266,2269],[-357,1834]],[[203803,255289],[-2,11451]],[[203803,255289],[-617,1714],[-455,4718],[-407,953]],[[211240,260208],[-788,7]],[[210452,260215],[-226,1786],[-294,419],[-121,2210],[-126,-359],[-263,2428]],[[210452,260215],[260,-434],[176,-3774],[536,33],[186,-1031],[512,-16]],[[212122,254993],[-1599,-11260]],[[210523,243733],[-1441,6305]],[[262562,265291],[-9,-2748],[-135,18]],[[262418,262561],[-508,49]],[[255335,263518],[-42,-2446],[-143,-14],[4,-2675],[-155,-741],[132,-1478],[-365,-603],[-167,-1944]],[[254599,253617],[-506,-1946]],[[254093,251671],[-64,1221],[230,2448],[-147,-275],[95,2172],[-484,2051],[-25,1811]],[[237565,263797],[235,-2648],[-112,-2156]],[[237688,258993],[-417,-312]],[[237271,258681],[-296,953],[-858,613]],[[236117,260247],[-150,3551]],[[244067,262083],[-416,-314],[-36,-1776],[-276,-171],[-1,-3573],[-157,-1570],[80,-1640]],[[243261,253039],[-257,529],[-179,-1295],[-48,1872]],[[242777,254145],[8,11199]],[[269459,266064],[0,-2383],[-247,6],[-4,-2375]],[[269208,261312],[-295,-709]],[[268913,260603],[-583,-23],[1,2596]],[[264147,264341],[212,-841],[-100,-3841]],[[264259,259659],[-425,-13]],[[263834,259646],[-269,0]],[[263565,259646],[-156,2806],[9,2759]],[[270526,263478],[-236,-1000],[1,-5622]],[[270291,256856],[-262,1104]],[[270029,257960],[-821,3352]],[[258126,257860],[-564,-26]],[[257562,257834],[-384,25],[-188,2000],[3,2240]],[[256993,262099],[-3,1445]],[[263565,259646],[-754,-28]],[[262811,259618],[-348,-21],[-45,2964]],[[242777,254145],[-218,179]],[[242559,254324],[-306,2653]],[[242253,256977],[-194,277],[-241,2435],[-28,3222]],[[265258,263864],[-181,-812],[-39,-2866]],[[265038,260186],[-69,-498],[-710,-29]],[[252692,256193],[-1093,-40]],[[251599,256153],[-283,-4]],[[251316,256149],[0,7282]],[[252651,261072],[41,-4879]],[[246320,261083],[-2,-1627]],[[246318,259456],[-1160,-18]],[[245158,259438],[-408,1159],[-49,1442]],[[227703,254041],[-519,4982]],[[229059,261276],[365,-3473]],[[229424,257803],[-1329,-4514]],[[228095,253289],[-182,-662],[-210,1414]],[[266538,263854],[73,-1664]],[[266611,262190],[-131,-3052]],[[266480,259138],[-414,-483]],[[266066,258655],[-411,1022],[-15,3361]],[[267887,262619],[-7,-2007]],[[267880,260612],[-912,139],[0,1414],[-357,25]],[[266066,258655],[-13,-4420]],[[266053,254235],[-962,81]],[[265091,254316],[4,2023]],[[265095,256339],[-57,3847]],[[236117,260247],[244,-1197],[-44,-6786]],[[236317,252264],[-312,1643],[-176,1815],[-633,882],[-380,1287]],[[239356,254866],[-430,-7],[-147,-1627],[-239,7],[-65,-1705]],[[238475,251534],[-134,-174]],[[238341,251360],[-233,2339],[-88,3955],[-332,1339]],[[271599,258108],[109,-1595]],[[271708,256513],[-299,-2289]],[[271409,254224],[-861,805]],[[270548,255029],[-29,1448],[-228,379]],[[256993,262099],[-405,-645],[-234,-1413],[-90,-2315],[-724,-4798]],[[255540,252928],[-525,-297]],[[255015,252631],[-416,986]],[[251316,256149],[-565,12]],[[250751,256161],[-705,0]],[[250046,256161],[-5,6754]],[[229993,252192],[-569,5611]],[[230997,255775],[-230,-1046]],[[230767,254729],[-774,-2537]],[[268913,260603],[84,-3784]],[[268997,256819],[-88,-1964]],[[268909,254855],[-525,11],[-61,691],[-839,350]],[[267484,255907],[-15,965]],[[267469,256872],[411,3740]],[[242253,256977],[-1211,-1625],[-245,2364]],[[250046,256161],[-147,0]],[[249899,256161],[-375,-8]],[[249524,256153],[-46,1960],[-425,1319],[2,3070]],[[262811,259618],[-6,-2208]],[[262805,257410],[-584,-282],[-45,580]],[[262176,257708],[-228,4571]],[[262176,257708],[-117,-3881]],[[262059,253827],[-919,118]],[[261140,253945],[3,5668]],[[249524,256153],[-188,3]],[[249336,256156],[-474,-1],[2,-814],[-377,8]],[[248487,255349],[-44,6911]],[[267469,256872],[-538,69]],[[266931,256941],[-451,2197]],[[244529,261751],[-61,-2123],[-260,460],[230,-1495],[-276,-598],[18,-3120],[-205,749],[175,-2365],[-388,-521],[182,-1099]],[[243944,251639],[-102,-1383],[173,-932],[-203,-1255]],[[243812,248069],[-72,-542]],[[243740,247527],[12,448]],[[243752,247975],[-183,929]],[[243569,248904],[130,2676],[-438,1459]],[[248487,255349],[-226,-1014]],[[248261,254335],[-568,266]],[[247693,254601],[-4,6837]],[[257562,257834],[96,-2877],[-99,-437],[7,-2857]],[[257566,251663],[-178,1282],[-1848,-17]],[[245158,259438],[-12,-4903]],[[245146,254535],[-217,449],[-648,-954],[-50,-1687],[-287,-704]],[[191369,254272],[-1713,-9],[-813,1748]],[[225327,255832],[-811,-3460]],[[224516,252372],[-178,743],[-193,2531],[-444,142],[-380,1306]],[[247693,254601],[-46,0]],[[247647,254601],[-803,-13]],[[246844,254588],[-236,-7]],[[246608,254581],[0,4882],[-290,-7]],[[270029,257960],[-328,-1872],[-203,-243]],[[269498,255845],[-501,974]],[[226341,249372],[-759,7341]],[[227703,254041],[-1362,-4669]],[[220202,258883],[-12,-9166]],[[220190,249717],[-1597,-25]],[[218593,249692],[-13,8143],[-1601,87]],[[216979,257922],[0,518]],[[254093,251671],[-73,-562]],[[254020,251109],[-140,-343],[-854,-8],[-285,-550]],[[252741,250208],[-49,5985]],[[272538,253809],[-20,-18]],[[272518,253791],[20,18]],[[272206,254211],[-81,132]],[[272125,254343],[81,-132]],[[272895,258076],[-221,-2948],[-140,1838],[361,1110]],[[272467,260258],[359,-497],[69,-955],[-372,-536],[-14,-3438],[142,-739],[-530,301]],[[272121,254394],[-413,2119]],[[232380,257461],[233,-3411],[-191,-918],[-110,-3298]],[[232312,249834],[-586,-39],[-742,-2204]],[[230984,247591],[-247,5282],[30,1856]],[[215564,260205],[-1,-10639]],[[215563,249566],[-1463,119]],[[214100,249685],[-48,10520]],[[214100,249685],[-245,17]],[[213855,249702],[-113,1973],[-687,2490],[-254,-616]],[[212801,253549],[0,6664]],[[237271,258681],[4,-1924],[-170,-1044],[14,-5133]],[[237119,250580],[-253,-651]],[[236866,249929],[-549,2335]],[[216979,257922],[-19,-8364]],[[216960,249558],[-1397,8]],[[212801,253549],[-158,-489],[-521,1933]],[[265095,256339],[-399,-65]],[[264696,256274],[-805,-62]],[[263891,256212],[-57,3434]],[[263891,256212],[-578,-53]],[[263313,256159],[-423,45],[-85,1206]],[[261140,253945],[-191,-1283],[-485,461],[-142,-1409]],[[260322,251714],[-225,22]],[[260097,251736],[7,7849]],[[260097,251736],[-1119,-78]],[[258978,251658],[-2,4614]],[[246608,254581],[-1059,-7],[-229,-519]],[[245320,254055],[-174,480]],[[238341,251360],[-865,-338]],[[237476,251022],[-357,-442]],[[266931,256941],[-267,-2338]],[[266664,254603],[-217,-427]],[[266447,254176],[-394,59]],[[234433,256012],[126,-727]],[[234559,255285],[-1328,-6124]],[[233231,249161],[-511,-2377]],[[232720,246784],[-160,1025],[32,1831],[-280,194]],[[221621,257243],[-5,-7538]],[[221616,249705],[-1426,12]],[[270548,255029],[135,-1216],[-559,-1966],[-260,400]],[[269864,252247],[-282,1361],[-84,2237]],[[258978,251658],[17,-3689]],[[258995,247969],[-561,3]],[[258434,247972],[-835,6]],[[257599,247978],[-33,3685]],[[218593,249692],[-762,-76]],[[217831,249616],[-871,-58]],[[236866,249929],[-913,-1226]],[[235953,248703],[-290,477]],[[235663,249180],[-783,1632]],[[234880,250812],[-187,3541],[-134,932]],[[263313,256159],[-12,-3258]],[[263301,252901],[-768,-61],[-14,-3408]],[[262519,249432],[-296,56]],[[262223,249488],[-201,1665],[37,2674]],[[229346,250050],[-672,-2226]],[[228674,247824],[-579,5465]],[[229993,252192],[-647,-2142]],[[242559,254324],[-409,-314],[69,-6632],[-201,52]],[[242018,247430],[-298,679],[-277,-1715],[-308,-248]],[[241135,246146],[-630,-114]],[[240505,246032],[-16,6744],[-423,1758]],[[223045,256659],[-5,-9677]],[[223040,246982],[-1093,-8]],[[221947,246974],[-331,2],[0,2729]],[[224516,252372],[109,-2637],[234,-1105]],[[224859,248630],[-17,-2012]],[[224842,246618],[-1447,-2]],[[223395,246616],[-355,366]],[[267484,255907],[289,-2605],[-29,-1803]],[[267744,251499],[-329,-679],[-91,-2266]],[[267324,248554],[-270,36]],[[267054,248590],[-114,4038],[-276,1975]],[[269864,252247],[216,-987],[1,-1603],[213,-1378]],[[270294,248279],[-791,54],[-15,-4066],[756,-202],[-181,-4018]],[[270063,240047],[-569,247]],[[269494,240294],[-47,4436],[-166,-9],[13,2674],[-283,1030],[-221,3070]],[[268790,251495],[-78,1759],[195,-13],[2,1614]],[[226341,249372],[-11,-642]],[[226330,248730],[-1471,-100]],[[272538,253809],[99,-1698],[-281,-1545],[-109,1279],[124,2060],[147,-114]],[[272121,254394],[4,-51]],[[272206,254211],[155,-844],[-204,-1997],[71,-2599],[-325,802]],[[271903,249573],[-591,1665]],[[271312,251238],[97,2986]],[[264696,256274],[-167,-1562],[-391,-949],[-69,-1201],[-328,-1573],[-68,-1447]],[[263673,249542],[-96,10]],[[263577,249552],[15,3292],[-291,57]],[[265091,254316],[-12,-4797]],[[265079,249519],[-315,11]],[[264764,249530],[-724,19]],[[264040,249549],[-367,-7]],[[252741,250208],[18,-2160]],[[252759,248048],[-1139,-6]],[[251620,248042],[-21,8111]],[[250751,256161],[23,-9759]],[[250774,246402],[-565,1]],[[250209,246403],[-23,1869]],[[250186,248272],[3,6263],[-288,-6],[-2,1632]],[[250186,248272],[-850,-145]],[[249336,248127],[0,8029]],[[251620,248042],[-141,-1624]],[[251479,246418],[-705,-16]],[[249336,248127],[-206,-4]],[[249130,248123],[-300,-5]],[[248830,248118],[0,1358],[-237,-5],[-309,1880],[-23,2984]],[[268790,251495],[-833,10]],[[267957,251505],[-213,-6]],[[234880,250812],[-269,-1952],[-727,-4046]],[[233884,244814],[-145,1530],[-209,-880]],[[233530,245464],[-193,-34],[-106,3731]],[[213855,249702],[556,-1561],[548,-265],[329,-1469],[180,-3867],[116,-913]],[[215584,241627],[-1029,49],[-1,-1090],[-570,24],[-1,-5858],[-623,-15],[0,-4294]],[[213360,230443],[-2433,11418]],[[210927,241861],[-404,1872]],[[271312,251238],[-472,-2258]],[[270840,248980],[-349,502],[-197,-1203]],[[245320,254055],[101,-733],[-2,-5262]],[[245419,248060],[-324,3]],[[245095,248063],[-1283,6]],[[240505,246032],[-431,-221]],[[240074,245811],[-1233,93],[-383,-266]],[[238458,245638],[138,2981],[-121,2915]],[[230984,247591],[-297,-1133],[-306,-3132],[-308,-919]],[[230073,242407],[-149,660]],[[229924,243067],[-83,1791],[-230,1423],[-92,2593],[-173,1176]],[[267054,248590],[-504,85]],[[266550,248675],[-277,857]],[[266273,249532],[181,2385],[-7,2259]],[[246844,254588],[2,-6513]],[[246846,248075],[-54,0]],[[246792,248075],[-721,-7]],[[246071,248068],[-652,-8]],[[247647,254601],[2,-6509]],[[247649,248092],[-244,-5]],[[247405,248087],[-559,-12]],[[248830,248118],[-1181,-26]],[[243569,248904],[-73,-473]],[[243496,248431],[-155,-910],[-26,-2269]],[[243315,245252],[-1108,10]],[[242207,245262],[-189,2168]],[[266273,249532],[3,-821],[-452,71]],[[265824,248782],[-746,72],[1,665]],[[228674,247824],[-526,-1799],[-158,-2555]],[[227990,243470],[-862,2197],[-567,667]],[[226561,246334],[-231,2396]],[[255286,234666],[0,83]],[[255286,234749],[0,-83]],[[255015,252631],[47,-4598]],[[255062,248033],[-100,-2449],[293,-2294],[342,-1258],[-72,-3552]],[[255525,238480],[118,-709],[-472,-3244],[-776,-835],[-364,139],[619,1003],[-446,2269],[13,2457],[-100,3216],[-226,557]],[[253891,243333],[-3,422]],[[253888,243755],[51,358]],[[253939,244113],[171,4894],[-90,2102]],[[262223,249488],[73,-1396]],[[262296,248092],[-1354,-66]],[[260942,248026],[7,3775],[-627,-87]],[[257599,247978],[-272,46]],[[257327,248024],[-1052,38]],[[256275,248062],[-1213,-29]],[[263577,249552],[-524,-184]],[[263053,249368],[-534,64]],[[260942,248026],[-27,-3]],[[260915,248023],[-1496,-68]],[[259419,247955],[-424,14]],[[238458,245638],[-203,-3554],[-301,-2556],[116,-1802],[-122,-774]],[[237948,236952],[-68,-1096],[158,-1846]],[[238038,234010],[-535,-30]],[[237503,233980],[99,13118],[-126,3924]],[[269494,240294],[-114,46]],[[269380,240340],[-346,136]],[[269034,240476],[-18,2136],[-493,492],[-222,1907],[-346,638]],[[267955,245649],[2,5856]],[[267955,245649],[-134,-371]],[[267821,245278],[-66,1821],[-380,53],[-51,1402]],[[253891,243333],[-3,422]],[[253939,244113],[-283,-5326],[-10,-2294],[-805,176]],[[252841,236669],[-46,6488]],[[252795,243157],[-36,4891]],[[272307,246842],[-203,-3711],[-81,2743],[284,968]],[[271903,249573],[306,-2479],[-160,-4072],[-292,-203]],[[271757,242819],[-831,2065]],[[270926,244884],[0,3896],[-86,200]],[[237503,233980],[-603,-18]],[[236900,233962],[96,1937],[-93,1644],[125,1714]],[[237028,239257],[58,2122],[-200,796],[-363,6259],[-570,269]],[[235663,249180],[-268,-876],[313,-9030]],[[235708,239274],[21,-669],[-542,-19]],[[235187,238586],[-329,78]],[[234858,238664],[55,883],[-383,657],[-240,1921],[-169,-356],[-46,2247],[-191,798]],[[229924,243067],[-953,-3232]],[[228971,239835],[-534,-1858]],[[228437,237977],[-325,5187],[-122,306]],[[209922,237142],[-279,-5],[-3006,4042]],[[210927,241861],[-1005,-4719]],[[232720,246784],[-683,-1233]],[[232037,245551],[-850,-767]],[[231187,244784],[-203,2807]],[[221947,246974],[2,-4278]],[[221949,242696],[-1762,-9]],[[220187,242687],[3,7030]],[[220187,242687],[-2353,-79]],[[217834,242608],[-3,7008]],[[217834,242608],[0,-7788]],[[217834,234820],[-2222,6]],[[215612,234826],[279,1284],[-230,1215],[264,2566],[-18,1121],[-323,615]],[[264040,249549],[-12,-7240]],[[264028,242309],[-1345,402]],[[262683,242711],[300,3247],[70,3410]],[[264764,249530],[114,-3091],[-22,-4394]],[[264856,242045],[-554,175]],[[264302,242220],[-274,89]],[[267013,241274],[-88,36]],[[266925,241310],[88,-36]],[[266550,248675],[98,-2368],[249,-1172],[-274,-445],[-99,-1220],[356,-2142]],[[266880,241328],[-709,260]],[[266171,241588],[-368,135]],[[265803,241723],[21,7059]],[[265803,241723],[-735,253]],[[265068,241976],[-212,69]],[[262683,242711],[-3,0]],[[262680,242711],[-384,5381]],[[270926,244884],[-366,-1369],[-37,-1853],[123,-1708],[-124,-3746]],[[270522,236208],[-335,-63],[-107,1022],[-17,2880]],[[237028,239257],[-1320,17]],[[233530,245464],[-90,-6608]],[[233440,238856],[-665,83],[-646,2257]],[[232129,241196],[-92,4355]],[[244740,241602],[-76,124]],[[244664,241726],[-138,1864],[-596,-162],[213,1885],[-298,-208],[-105,2422]],[[245095,248063],[-355,-6461]],[[243752,247975],[-256,456]],[[226561,246334],[-375,-2254],[-241,-2997]],[[225945,241083],[-211,-3685]],[[225734,237398],[-625,1109]],[[225109,238507],[-245,3502],[174,1353],[-6,1658],[-190,1598]],[[267821,245278],[-326,-1351],[-1,-2847]],[[267494,241080],[-481,194]],[[266925,241310],[-45,18]],[[244664,241726],[-233,-2740],[-196,-267]],[[244235,238719],[-602,4]],[[243633,238723],[-154,6]],[[243479,238729],[63,3798],[-227,2725]],[[250209,246403],[-2,-4882]],[[250207,241521],[-565,13],[0,-2448],[-406,-1072]],[[249236,238014],[-349,2359],[-75,1498]],[[248812,241871],[318,6252]],[[248812,241871],[-426,-22],[-727,870]],[[247659,242719],[-254,5368]],[[242207,245262],[113,-1503],[-109,-3719],[-662,-627],[-123,-1005]],[[241426,238408],[-387,13]],[[241039,238421],[5,124]],[[241044,238545],[92,1719],[-1,5882]],[[262680,242711],[-189,-1959]],[[262491,240752],[-657,30],[-10,-812],[-591,47]],[[261233,240017],[-142,12]],[[261091,240029],[7,4056],[-466,837]],[[260632,244922],[283,3101]],[[247659,242719],[36,-9077]],[[247695,233642],[-97,120]],[[247598,233762],[-55,1170],[-290,-154]],[[247253,234778],[-284,1434],[-176,2314],[-1,3038]],[[246792,241564],[0,6511]],[[255286,234749],[0,-83]],[[256954,236440],[0,-65]],[[256954,236375],[0,65]],[[256231,239600],[17,-2078],[-262,-1641],[-543,-651],[107,1726],[233,527],[-258,997]],[[256275,248062],[-333,-1385],[-81,-3537],[370,-3540]],[[257287,236666],[-333,-291]],[[256954,236440],[334,329]],[[257288,236769],[-1,-103]],[[257327,248024],[-37,-10998]],[[257290,237026],[-1052,-1037],[665,1910],[-226,962],[-136,-1053],[-250,2450],[-60,-658]],[[252795,243157],[-1316,0]],[[251479,243157],[0,3261]],[[246792,241564],[-958,-11]],[[245834,241553],[168,1301]],[[246002,242854],[-21,4096],[90,1118]],[[257288,236769],[-1,-103]],[[258411,236876],[-1,-356]],[[258410,236520],[1,356]],[[258434,247972],[-17,-10056]],[[258417,237916],[-166,1066],[-410,-2043],[-551,87]],[[246002,242854],[-1125,-261],[-120,-1037]],[[244757,241556],[-17,46]],[[260632,244922],[-55,-1606],[-562,869],[-66,-1634]],[[259949,242551],[-537,37],[7,5367]],[[259949,242551],[-196,-1238],[99,-2458],[-315,-2141]],[[259537,236714],[-10,-2239]],[[259527,234475],[-1117,2045]],[[258411,236876],[815,-134],[-426,1780],[-383,-606]],[[231187,244784],[-45,-4378],[221,-3088],[-139,-1696]],[[231224,235622],[12,735],[-415,181]],[[230821,236538],[-164,3014],[-358,1437],[-319,391],[93,1027]],[[223395,246616],[2,-7872]],[[223397,238744],[-947,25]],[[222450,238769],[-502,-4],[1,3931]],[[225109,238507],[-674,262]],[[224435,238769],[-1038,-25]],[[251479,243157],[0,-1085]],[[251479,242072],[-989,-2],[-283,-549]],[[228437,237977],[-499,-1007]],[[227938,236970],[-97,304]],[[227841,237274],[-634,1522],[-437,-1264],[-263,726],[-303,2901],[-259,-76]],[[234858,238664],[-878,-2779]],[[233980,235885],[-396,1125],[-144,1846]],[[241044,238545],[-396,9],[-9,-944],[-990,-260]],[[239649,237350],[2,3243],[421,10],[2,5208]],[[239649,237350],[0,-383]],[[239649,236967],[-708,-9],[1,1629],[-283,7],[1,-1638],[-712,-4]],[[269034,240476],[-293,113]],[[268741,240589],[-1247,491]],[[232129,241196],[72,-7161]],[[232201,234035],[-806,-384]],[[231395,233651],[-171,1971]],[[243479,238729],[216,-1917],[-535,412],[-328,-898]],[[242832,236326],[-172,207],[-256,-1507]],[[242404,235026],[-95,2567],[-194,809],[-689,6]],[[261091,240029],[-143,0],[-5,-2436],[-1018,73],[-388,-952]],[[271757,242819],[498,-308],[-34,-3431],[-155,926],[-295,-108]],[[271771,239898],[-322,204],[-925,-5549]],[[270524,234553],[-2,1655]],[[252841,236669],[-233,-1277],[-178,1269],[-576,-701],[-371,1452]],[[251483,237412],[-4,4660]],[[230821,236538],[-951,-1549]],[[229870,234989],[-279,410],[-620,4436]],[[245834,241553],[-209,-1460],[-15,-2062],[278,-2141]],[[245888,235890],[-360,-438]],[[245528,235452],[-338,30]],[[245190,235482],[-278,638],[125,2785],[-183,-37],[-97,2688]],[[249236,238014],[202,-4320],[262,-906]],[[249700,232788],[-283,-441]],[[249417,232347],[-471,-66],[-254,868],[-304,-895],[-309,780]],[[248079,233034],[-384,608]],[[264302,242220],[-267,-2073],[-54,-1702],[-693,-1752]],[[263288,236693],[-375,1330],[-2,1097],[-281,268],[-139,1364]],[[222450,238769],[7,-3969]],[[222457,234800],[-1262,75]],[[221195,234875],[-1008,-8]],[[220187,234867],[0,7820]],[[220187,234867],[-1628,-37]],[[218559,234830],[-725,-10]],[[265068,241976],[85,-2795],[-178,-1],[-97,-4623]],[[264878,234557],[-479,557],[-1297,-63]],[[263102,235051],[186,1642]],[[251483,237412],[-1133,-2305],[-141,1297]],[[250209,236404],[-2,5117]],[[266171,241588],[21,-1291],[-370,-1384],[42,-1368],[-274,-2432]],[[265590,235113],[-266,-1103],[-213,-2776]],[[265111,231234],[-234,66]],[[264877,231300],[1,3257]],[[209945,215738],[-23,21404]],[[213360,230443],[686,-3231]],[[214046,227212],[-191,-2194],[-355,428],[-421,-724],[-394,-4187],[-190,-3082],[-26,-2697],[-288,-495],[-452,-3923],[-784,1354],[-338,2103],[-458,443],[-204,1500]],[[245190,235482],[-472,-16],[-483,3253]],[[215612,234826],[-8,-9436]],[[215604,225390],[-988,209],[-570,1613]],[[247253,234778],[-437,-1708],[-207,515]],[[246609,233585],[-184,-840],[-537,3145]],[[267013,241274],[105,-135],[78,-2865],[203,-1639]],[[267399,236635],[-213,-2318]],[[267186,234317],[-334,-5]],[[266852,234312],[-283,815],[-979,-14]],[[250209,236404],[34,-1300],[-543,-2316]],[[268741,240589],[-104,-714],[226,-2819],[-101,-1192],[-315,-129]],[[268447,235735],[-586,1763],[-462,-863]],[[209945,215738],[-500,620],[-308,933],[-500,3116],[-209,111],[-482,2314],[-466,5014],[-27,4955],[-481,3934],[-34,2230],[-301,2214]],[[233980,235885],[192,-3310]],[[234172,232575],[-466,-2513],[-754,2534],[-380,-1252],[-368,-203]],[[232204,231141],[-3,2894]],[[227841,237274],[-343,-3902],[-438,-2645]],[[227060,230727],[-170,-807]],[[226890,229920],[-1288,6177]],[[225602,236097],[132,1301]],[[262491,240752],[-511,-7567]],[[261980,233185],[-764,19]],[[261216,233204],[17,6813]],[[263102,235051],[119,-3212],[349,-2173]],[[263570,229666],[-1288,56],[-50,-792]],[[262232,228930],[-307,1351],[55,2904]],[[269380,240340],[4,-8336]],[[269384,232004],[-309,-3002],[110,-639]],[[269185,228363],[-359,-2063]],[[268826,226300],[-394,1902]],[[268432,228202],[15,7533]],[[272248,234158],[-9,-2721],[-434,369]],[[271805,231806],[-186,99],[91,1895],[-113,886],[151,2028],[471,-633],[29,-1923]],[[272388,234172],[-135,-13]],[[272253,234159],[-2,2673],[137,-2660]],[[271771,239898],[387,-695],[23,-1979],[-488,-403],[1,-1428],[-265,-959],[92,-1411]],[[271521,233023],[-998,-79]],[[270523,232944],[1,1609]],[[270523,232944],[0,-816]],[[270523,232128],[-259,0]],[[270264,232128],[-880,-124]],[[261213,230026],[7,-1939]],[[261220,228087],[-832,3622],[181,87],[318,-1693],[326,-77]],[[261216,233204],[-3,-3056]],[[261213,230148],[-257,-46],[-113,1656],[-199,-122],[-385,1289],[-7,-1143],[-725,2693]],[[229870,234989],[-428,-2537]],[[229442,232452],[-641,-2031]],[[228801,230421],[-159,3871],[-704,2678]],[[236900,233962],[5,-1513]],[[236905,232449],[-444,185],[-186,-1246],[-287,179]],[[235988,231567],[-421,-17],[-380,7036]],[[224435,238769],[11,-6719]],[[224446,232050],[-926,-12]],[[223520,232038],[-1061,-74],[-2,2836]],[[225602,236097],[-347,-5926]],[[225255,230171],[-325,-1871]],[[224930,228300],[-484,3750]],[[245308,223866],[-799,1570],[36,944],[-274,2264]],[[244271,228644],[604,288]],[[244875,228932],[202,-2332],[250,-831],[-19,-1903]],[[244558,230559],[-644,-478],[-352,1660],[-259,-1458],[-366,543]],[[242937,230826],[125,1509],[-230,3991]],[[243633,238723],[170,-1018],[53,-2472],[406,-1497],[39,-2366],[257,-811]],[[245528,235452],[-237,-4826]],[[245291,230626],[-330,-691]],[[244961,229935],[-403,624]],[[235988,231567],[8,-4161]],[[235996,227406],[-1499,-98]],[[234497,227308],[-325,5267]],[[239649,236967],[279,-441],[96,-4141],[287,-11],[13,-1374],[-300,-818]],[[240024,230182],[-369,259],[-1651,-18]],[[238004,230423],[34,3587]],[[241039,238421],[19,-7240]],[[241058,231181],[-312,-1023]],[[240746,230158],[-722,24]],[[242404,235026],[-397,-2819]],[[242007,232207],[-408,-1798],[-383,1123],[-158,-351]],[[268432,228202],[-222,-844]],[[268210,227358],[-526,3595],[-439,645],[-59,2719]],[[228801,230421],[-811,-4931]],[[227990,225490],[-930,5237]],[[231395,233651],[-274,-1643],[130,-1238]],[[231251,230770],[-412,483],[-917,-965]],[[229922,230288],[-70,1867],[-410,297]],[[242937,230826],[-38,-675]],[[242899,230151],[-457,1472],[-435,584]],[[226432,226825],[-346,-1971]],[[226086,224854],[-87,1790],[-744,3527]],[[226890,229920],[-511,-2621],[53,-474]],[[246609,233585],[-25,-1023]],[[246584,232562],[-762,-995],[-135,-867]],[[245687,230700],[-396,-74]],[[266852,234312],[-10,-6935],[145,-1216]],[[266987,226161],[-200,-2815]],[[266787,223346],[-399,936],[-283,2980],[-405,1944],[-589,2028]],[[264877,231300],[-794,-652],[8,-1736],[-255,55]],[[263836,228967],[-266,699]],[[247598,233762],[-477,-3687],[-248,-295],[-10,-2337]],[[246863,227443],[-319,-38]],[[246544,227405],[-91,2728],[131,2429]],[[218559,234830],[2,-12368]],[[218561,222462],[3,-3802],[-131,-3064],[-136,-247]],[[218297,215349],[-585,2296],[-155,1737],[-559,1473],[-109,1937],[-428,2705],[-230,-538],[-627,431]],[[221195,234875],[-8,-4031]],[[221187,230844],[-585,152],[-126,-5326],[-4,-3216]],[[220472,222454],[-273,-4]],[[220199,222450],[-1638,12]],[[223520,232038],[7,-6644]],[[223527,225394],[-721,2114],[-1182,236]],[[221624,227744],[-253,18],[4,3078],[-188,4]],[[268210,227358],[-114,-1168]],[[268096,226190],[-1109,-29]],[[272842,223332],[13,0]],[[272855,223332],[-13,0]],[[272837,223331],[-14,0]],[[272823,223331],[-64,-213]],[[272759,223118],[-215,-625],[-556,-55]],[[271988,222438],[-4,2545]],[[271984,224983],[-177,2427],[99,1442],[-322,1680],[221,1274]],[[272248,234158],[350,-6433],[-19,-1080],[258,-3314]],[[272388,234172],[216,-5656],[-351,5643]],[[238004,230423],[-371,-3473]],[[237633,226950],[-14,2086],[-480,949],[-234,2464]],[[232204,231141],[-439,1365],[374,-6984]],[[232139,225522],[-574,-1123]],[[231565,224399],[-195,1520],[-119,4851]],[[247737,223729],[-329,25],[-91,1326],[-454,2363]],[[247598,233762],[-8,-4806],[113,-2060],[203,-840],[-169,-2327]],[[248125,213950],[70,748]],[[248195,214698],[-70,-748]],[[248079,233034],[-93,-5082],[222,493],[142,-926]],[[248350,227519],[-169,-1242],[4,-1676],[243,-2463],[7,-2736]],[[248435,219402],[-412,1680],[32,1884],[-166,601]],[[247889,223567],[-152,162]],[[262232,228930],[-64,-3572]],[[262168,225358],[-1,-31]],[[262167,225327],[-471,-1559]],[[261696,223768],[-262,-97],[31,2044],[-245,2372]],[[261213,230026],[0,122]],[[249417,232347],[-289,-1734],[-364,-1099]],[[248764,229514],[-363,-245],[-63,-811],[283,-1441]],[[248621,227017],[-271,502]],[[271521,233023],[-209,-1367],[211,19],[-61,-1459],[280,-1434],[17,-2306]],[[271759,226476],[-575,-57],[-356,-1658],[-304,-535]],[[270524,224226],[-1,7902]],[[237633,226950],[-208,-1155],[251,-2061]],[[237676,223734],[-488,-232],[-947,-2204]],[[236241,221298],[-10,6069],[-235,39]],[[234522,223522],[-12,-43]],[[234510,223479],[12,43]],[[234497,227308],[188,-999],[-40,-2779]],[[234645,223530],[-248,563],[-164,2138],[-76,-1074],[333,-1692],[-99,-2415]],[[234391,221050],[-400,-947],[-152,1096]],[[233839,221199],[-128,697],[-451,-247]],[[233260,221649],[-1121,3873]],[[249700,222967],[-38,168]],[[249749,222685],[-49,282]],[[249760,222644],[-11,41]],[[249662,223135],[98,-491]],[[249979,228312],[58,-697]],[[250037,227615],[219,-583],[-251,-836],[181,-671]],[[250186,225525],[-338,382],[72,-1088]],[[249920,224819],[-579,0],[296,-1820]],[[249637,222999],[-31,137]],[[249606,223136],[-17,-12]],[[249589,223124],[-855,2531],[-113,1362]],[[248764,229514],[179,-1316],[187,486],[63,-1578],[278,-40],[74,2257],[373,1266],[61,-2277]],[[246544,227405],[-360,599],[-279,-303]],[[245905,227701],[-207,1351],[-11,1648]],[[229922,230288],[146,-1541]],[[230068,228747],[-848,-6121]],[[229220,222626],[-748,-86]],[[228472,222540],[-488,2913]],[[227984,225453],[6,37]],[[242899,230151],[-21,-3786]],[[242878,226365],[-34,-728],[-509,-1742],[180,-15],[-21,-1563],[-530,-1558],[-885,887]],[[241079,221646],[5,8528],[-338,-16]],[[270524,224226],[-18,-8]],[[270506,224218],[-216,2191],[-389,132],[-406,1491]],[[269495,228032],[311,620],[458,3476]],[[269495,228032],[-310,331]],[[224930,228300],[-647,-3578]],[[224283,224722],[-370,-473]],[[223913,224249],[-386,1145]],[[243094,222650],[507,-1498],[-373,-1379],[-504,1635],[370,1242]],[[244961,229935],[-86,-1003]],[[244271,228644],[-426,-209],[-645,-3853]],[[243200,224582],[80,1698],[-402,85]],[[231565,224399],[21,-2330],[-178,-21]],[[231408,222048],[-241,599]],[[231167,222647],[-226,617],[-208,2751],[-251,273],[-414,2459]],[[245905,227701],[-338,-3549]],[[245567,224152],[-211,-1644]],[[245356,222508],[-48,1358]],[[221624,227744],[-8,-5222]],[[221616,222522],[-1144,-68]],[[227984,225453],[-780,-2864],[-98,356]],[[227106,222945],[-308,894],[-366,2986]],[[241079,221646],[-915,2301],[-643,1244],[-860,-33],[-722,-624],[-263,-800]],[[226086,224854],[-252,-1275],[-616,-1665]],[[225218,221914],[-189,1266],[72,1337],[-818,205]],[[261985,223666],[46,-1027],[-348,842],[302,185]],[[262167,225327],[153,-1173],[-624,-386]],[[263836,228967],[267,-1311],[-501,150],[-1029,-3275],[-405,827]],[[231167,222647],[-369,-2223],[-113,-1977],[-813,-2987]],[[229872,215460],[-51,299]],[[229821,215759],[273,1332],[-648,4505],[-226,1030]],[[245356,222508],[-369,-725]],[[244987,221783],[-279,-1858],[-257,1227],[-396,-629],[-7,2090],[-205,-83],[-21,2141],[-622,-89]],[[270506,224218],[-1,-4598]],[[270505,219620],[-384,-936],[-50,1175],[-543,18]],[[269528,219877],[-418,-93],[-2,1071],[-275,503]],[[268833,221358],[-7,4942]],[[268833,221358],[-783,496]],[[268050,221854],[-36,3076],[82,1260]],[[247232,214624],[0,134]],[[247232,214758],[0,-134]],[[248242,218852],[-13,-1968]],[[248229,216884],[-88,-464]],[[248141,216420],[54,-1722]],[[248125,213950],[-368,-1497],[-123,993]],[[247634,213446],[-257,3161],[-145,-1653]],[[247232,214954],[0,260]],[[247232,215214],[0,104]],[[247232,215318],[15,317]],[[247247,215635],[12,85]],[[247259,215720],[56,1625],[-668,4636],[-413,1833],[-106,1451],[-208,-1074],[-353,-39]],[[247889,223567],[32,-2069],[-180,-981],[501,-1665]],[[222150,222529],[-534,-7]],[[223913,224249],[-73,-520]],[[223840,223729],[-339,-2416],[-158,1140],[-1193,76]],[[249172,217874],[111,-1305],[-398,134],[287,1171]],[[249760,222644],[-11,41]],[[249749,222685],[-49,282]],[[249637,222999],[-31,137]],[[249371,222960],[-15,-479]],[[249356,222481],[-255,-314],[203,-1847],[362,-1191],[-111,-778],[530,-230],[375,-1687],[141,832],[308,-3041],[-51,-1666],[-255,-1182],[-171,580],[-447,-2431],[421,3794],[-137,1556],[-368,-602],[-134,2620],[-304,1183],[-511,-72],[-60,606]],[[248892,218611],[-160,572]],[[248732,219183],[-297,219]],[[249589,223124],[-218,-164]],[[234522,223522],[-12,-43]],[[236241,221298],[-46,-111]],[[236195,221187],[-276,33]],[[235919,221220],[-211,270],[-540,-841],[124,4279],[-301,699],[-199,-2304],[-147,207]],[[227106,222945],[-578,-5085]],[[226528,217860],[-680,52],[-139,1116]],[[225709,219028],[23,815],[-514,2071]],[[271988,222438],[9,-2348],[241,-1825]],[[272238,218265],[-390,-928]],[[271848,217337],[-291,1591],[-5,2836],[246,455],[-91,1669],[277,1095]],[[271759,226476],[138,-1240],[-266,-1803],[-119,-4401],[73,-1266]],[[271585,217766],[-204,-12],[-96,2167],[-186,605],[-594,-906]],[[233260,221649],[-107,-2626],[-243,-14],[-79,-1781],[-212,-962],[-275,621],[-264,-1151]],[[232080,215736],[-403,3185],[-269,3127]],[[228472,222540],[-171,-903],[-100,-3633]],[[228201,218004],[-1039,-5114]],[[227162,212890],[-322,2084]],[[226840,214974],[-363,2442],[51,444]],[[247232,214624],[0,134]],[[247232,214954],[0,260]],[[247232,215318],[15,317]],[[244928,217715],[211,-933],[-106,-1819],[-306,1568],[201,1184]],[[246756,215343],[-83,-581]],[[246673,214762],[-79,239]],[[246594,215001],[-200,-1714]],[[246394,213287],[-354,100]],[[246040,213387],[-298,518],[375,1326],[-331,809],[-84,1095],[-260,-2776],[-234,825],[15,1953],[-359,1999],[123,2647]],[[247259,215720],[-524,941],[21,-1318]],[[225709,219028],[-760,-6052]],[[224949,212976],[-1107,2537]],[[223842,215513],[-2,8216]],[[223842,215513],[-1,-2983]],[[223841,212530],[-1697,17]],[[222144,212547],[6,9982]],[[272759,223118],[386,-4324]],[[273145,218794],[-132,-297],[16,-2699],[-744,-89],[-47,2556]],[[272837,223331],[-14,0]],[[272855,223332],[309,-4536]],[[273164,218796],[-14,-2]],[[273150,218794],[-308,4538]],[[232080,215736],[-73,-613]],[[232007,215123],[-254,-1543],[-959,-3417]],[[230794,210163],[-922,5297]],[[229821,215759],[-781,-3735]],[[229040,212024],[-105,759]],[[228935,212783],[-734,5221]],[[222144,212547],[-1943,-93]],[[220201,212454],[-2,9996]],[[220201,212454],[-1549,-38]],[[218652,212416],[-301,1679],[-54,1254]],[[235183,217122],[-168,-987],[-898,-3581],[739,3848],[327,720]],[[234707,216436],[-104,255],[-319,-2118]],[[234284,214573],[-492,4941],[47,1685]],[[234391,221050],[302,-995],[-118,-527],[193,-1648],[-61,-1444]],[[236195,221187],[-1085,-2978],[545,2519],[264,492]],[[234284,214573],[-259,-342],[-244,-3554],[-457,-2356],[-295,-717]],[[233029,207604],[-168,76],[-313,2527],[-238,32],[-6,1604],[-193,733],[-104,2547]],[[269528,219877],[10,-5016],[-370,-17],[1,-3162]],[[269169,211682],[-610,-874]],[[268559,210808],[-4,-28]],[[268555,210780],[11,1182],[-229,1768],[-631,424],[-130,2752]],[[267576,216906],[349,3016],[125,1932]],[[271585,217766],[74,-1764]],[[271659,216002],[-47,-5892],[-823,-7]],[[270789,210103],[-996,7]],[[269793,210110],[-470,1716],[-154,-144]],[[226840,214974],[-1288,-6318]],[[225552,208656],[-603,4320]],[[274192,206959],[-19,0]],[[274173,206959],[19,0]],[[274038,206958],[-133,1]],[[273905,206959],[-39,-1]],[[273866,206958],[-329,-17],[-54,-3299]],[[273483,203642],[-228,3744],[-313,-577],[-517,1780]],[[272425,208589],[33,1991],[-410,2090],[-148,1729]],[[271900,214399],[73,2024],[-125,914]],[[273145,218794],[71,-1438],[822,-10398]],[[273164,218796],[-14,-2]],[[228017,208314],[-310,1141],[-438,-2084]],[[227269,207371],[-501,3616],[394,1903]],[[228935,212783],[-918,-4469]],[[272425,208589],[-133,-1746]],[[272292,206843],[-680,-114],[4,-8037]],[[271616,198692],[-837,-36]],[[270779,198656],[10,11447]],[[271659,216002],[241,-1603]],[[230794,210163],[-40,-5356]],[[230754,204807],[-187,-17]],[[230567,204790],[-105,612]],[[230462,205402],[-406,-39]],[[230056,205363],[-228,274]],[[229828,205637],[-8,-8]],[[229820,205629],[-3,30]],[[229817,205659],[-203,3107],[-295,2552],[-279,706]],[[225150,203636],[-1,663],[-1297,-17]],[[223852,204282],[-11,8248]],[[225552,208656],[257,-1776]],[[225809,206880],[-659,-3244]],[[231527,203108],[199,1337],[-526,-947],[-444,705]],[[230756,204203],[-2,604]],[[233029,207604],[-515,-1809],[-269,336],[-408,-941],[-74,-1320],[716,1769],[-1754,-5264],[802,2733]],[[226700,204665],[-382,957],[-249,-542]],[[226069,205080],[-260,1800]],[[227269,207371],[-569,-2706]],[[229828,205637],[-8,-8]],[[229817,205659],[1,-375]],[[229818,205284],[-753,-2126],[109,-1486]],[[229174,201672],[-68,-398],[-684,1260]],[[228422,202534],[4,4145],[-121,1446],[-288,189]],[[223852,204282],[-1657,-123]],[[222195,204159],[-37,-4]],[[222158,204155],[-14,8392]],[[222158,204155],[-1965,141]],[[220193,204296],[8,8158]],[[220193,204296],[2,-8383]],[[220195,195913],[-276,-20]],[[219919,195893],[-227,1634],[-299,5632],[-269,1346],[-138,3110],[-290,2182],[-44,2619]],[[268559,210808],[-4,-28]],[[269793,210110],[391,-3170],[-256,-2281]],[[269928,204659],[-433,507],[-598,-8]],[[268897,205158],[-149,697],[-6,3293],[-183,1660]],[[270779,198656],[-274,-620]],[[270505,198036],[2,3100]],[[270507,201136],[2,765],[-428,978],[-153,1780]],[[228422,202534],[-599,-3073]],[[227823,199461],[-497,1216],[-65,1282],[-333,364],[-228,2342]],[[273483,203642],[-949,-51],[-367,555],[125,2697]],[[273866,206958],[152,-4434],[384,-6703],[460,-6126],[-21,-546]],[[274841,189149],[-1029,-223]],[[273812,188926],[17,9773]],[[273829,198699],[-61,3006],[-285,1937]],[[274038,206958],[411,-2425],[-276,2426]],[[274192,206959],[437,-3793],[144,-2447],[-167,-836],[-12,3070],[-288,-3646],[-72,101],[-11,3804],[-174,605],[153,1506],[-297,1636]],[[226408,193289],[-980,20]],[[225428,193309],[-277,-3]],[[225151,193306],[-1,10330]],[[226069,205080],[-235,-508],[782,-8929],[-25,-122]],[[226591,195521],[-240,-1164],[57,-1068]],[[273829,198699],[-2213,-7]],[[229435,196419],[-34,-86]],[[229401,196333],[30,1031]],[[229431,197364],[4,-945]],[[229989,197536],[539,1175],[-1215,-4810]],[[229313,193901],[29,366]],[[229342,194267],[112,1477],[225,126],[310,1666]],[[230756,204203],[-189,587]],[[229467,200563],[-293,1109]],[[229818,205284],[138,-1955],[593,-2862],[-702,-2229],[-380,2325]],[[230125,204169],[-69,1194]],[[230462,205402],[-19,-1857],[-318,624]],[[227823,199461],[-461,-4166]],[[227362,195295],[-76,-648],[-695,874]],[[270507,201136],[-552,1],[0,-812],[-1166,-25]],[[268789,200300],[108,4858]],[[223852,204282],[-6,-10982]],[[223846,193300],[-1632,-504],[-15,3243]],[[222199,196039],[-4,8120]],[[225151,193306],[-1305,-6]],[[222199,196039],[-2004,-126]],[[229467,200563],[-207,-609],[193,-1783]],[[229453,198171],[-927,-863],[294,-1303]],[[228820,196005],[-625,-2605]],[[228195,193400],[-52,239]],[[228143,193639],[-159,1152],[-622,504]],[[268308,195427],[-9,-1]],[[268299,195426],[9,1]],[[270505,198036],[-139,-2611]],[[270366,195425],[-1519,30]],[[268847,195455],[-374,-12]],[[268473,195443],[316,4857]],[[271616,198692],[0,-1636],[277,2],[94,-2170],[192,-1069],[303,-12],[-262,-960],[585,-3548],[246,-3712]],[[273051,185587],[-1173,64]],[[271878,185651],[-1368,-4]],[[270510,185647],[-6,9777],[-138,1]],[[273812,188926],[-11,-3355]],[[273801,185571],[-750,16]],[[228692,189439],[14,358]],[[228706,189797],[-14,-358]],[[229222,193536],[-326,-2723],[39,1456],[287,1267]],[[228195,193400],[229,-264],[-76,-1379]],[[228348,191757],[-205,1882]],[[228490,190446],[-134,1236]],[[228356,191682],[443,2663],[-6,-1493],[-303,-2406]],[[229313,193901],[29,366]],[[229311,195731],[-328,-1202],[-163,1476]],[[229453,198171],[-22,-807]],[[229401,196333],[-90,-602]],[[223846,193300],[12,-13096]],[[223858,180204],[2,-1602],[-436,26]],[[223424,178628],[-1056,71],[-103,856],[-232,-1007]],[[222033,178548],[-140,1380],[71,2611],[-322,2959],[-327,370],[-463,2628],[-155,3393],[-154,197],[-278,2896],[-346,911]],[[228348,191757],[8,-75]],[[228490,190446],[-3,-28]],[[228487,190418],[-15,-156]],[[228472,190262],[-134,-1330],[-231,1091],[-605,-773]],[[227502,189250],[-411,475],[-458,1287],[12,1136]],[[226645,192148],[-237,1141]],[[268308,195427],[-9,-1]],[[268847,195455],[7,-2886]],[[268854,192569],[-198,-1538],[342,-1333],[-115,-2958],[-287,863],[-300,2065],[148,2365],[29,3410]],[[270510,185647],[-1388,-19]],[[269122,185628],[467,3254],[-294,1838],[49,-1786],[-175,308],[19,1797],[-334,1530]],[[225428,193309],[8,-14809]],[[225436,178500],[-811,48]],[[224625,178548],[2,1455],[-769,201]],[[226645,192148],[-378,-2055],[-22,-4642]],[[226245,185451],[-328,-1],[5,-6978]],[[225922,178472],[-486,28]],[[228250,184343],[-70,94]],[[228180,184437],[70,-94]],[[228402,187096],[249,1940],[-343,-3972],[94,2032]],[[228692,189439],[14,358]],[[228487,190418],[-15,-156]],[[227948,186969],[214,-388],[-199,-2527]],[[227963,184054],[-1437,-47],[-281,1444]],[[227502,189250],[289,8],[157,-2289]],[[275241,183986],[-902,23]],[[274339,184009],[-271,6],[-3,1571],[-264,-15]],[[274841,189149],[341,-3282],[59,-1881]],[[275339,183990],[-31,-2]],[[275308,183988],[31,2]],[[273051,185587],[-176,-2846],[396,-2050],[334,-3158]],[[273605,177533],[-628,-16],[1,-1638],[-277,-12],[2,-1650],[-824,23]],[[271879,174240],[-2,5715]],[[271877,179955],[1,5696]],[[271877,179955],[-1371,-46]],[[270506,179909],[4,5738]],[[268884,180868],[-11,1]],[[268873,180869],[11,-1]],[[270506,179909],[-2,-2429]],[[270504,177480],[-549,22],[3,3302],[-874,53]],[[269084,180857],[-345,1646],[240,735],[143,2390]],[[274339,184009],[6,-6561]],[[274345,177448],[1,-1562],[-580,-3038]],[[273766,172848],[42,3613],[-203,1072]],[[227900,178787],[-36,1]],[[227864,178788],[9,1767],[307,3882]],[[228250,184343],[-350,-5556]],[[227963,184054],[-251,-4476],[-258,-851],[114,2438],[-407,-1627],[-336,1830],[200,-2389],[-320,-88]],[[226705,178891],[-582,-1386]],[[226123,177505],[-201,967]],[[275676,178509],[-28,1]],[[275648,178510],[28,-1]],[[275339,183990],[-31,-2]],[[275241,183986],[343,-5477]],[[275584,178509],[-145,-584]],[[275439,177925],[-1,-410]],[[275438,177515],[-1093,-67]],[[269628,172609],[-7,-1]],[[269621,172608],[7,1]],[[270504,177480],[-3,-3269]],[[270501,174211],[-551,15],[0,-505]],[[269950,173721],[0,-130]],[[269950,173591],[-1,-996],[-273,12]],[[269676,172607],[-254,2093],[-338,6157]],[[268884,180868],[-11,1]],[[224625,178548],[159,-3916],[135,9],[-13,-5058]],[[224906,169583],[-1481,40]],[[223425,169623],[-1,9005]],[[271879,174240],[-1378,-29]],[[223425,169623],[-158,-2061],[-442,-1922]],[[222825,165640],[-275,5054],[-494,3303],[54,2885],[-77,1666]],[[227998,166170],[-12,1]],[[227986,166171],[12,-1]],[[228016,167092],[52,-919]],[[228068,166173],[-55,-3]],[[228013,166170],[-73,1392]],[[227940,167562],[76,-470]],[[228016,167092],[-141,1393]],[[227875,168485],[-65,3026]],[[227810,171511],[31,176]],[[227841,171687],[175,-4595]],[[227841,171687],[-58,4800],[50,1667]],[[227833,178154],[31,634]],[[227900,178787],[-81,-3293],[22,-3807]],[[227619,175770],[-62,-1844],[-237,-795]],[[227320,173131],[22,-2788],[212,-1258],[78,-2922]],[[227632,166163],[-1163,-34],[-267,256]],[[226202,166385],[-78,3149]],[[226124,169534],[-1,7971]],[[226705,178891],[359,-136],[285,-872],[340,625],[-70,-2738]],[[226124,169534],[-934,41]],[[225190,169575],[-284,8]],[[276009,173063],[-4,0]],[[276005,173063],[4,0]],[[275994,173067],[-63,2]],[[275931,173069],[-9,1]],[[275922,173070],[-37,2]],[[275885,173072],[-22,0]],[[275863,173072],[-26,-266],[-2071,42]],[[275438,177515],[375,-1551],[181,-2897]],[[275676,178509],[-28,1]],[[275584,178509],[-145,-584]],[[273766,172848],[-167,-3535],[-1729,10]],[[271870,169323],[9,4917]],[[269903,169694],[11,1]],[[269914,169695],[-11,-1]],[[269628,172609],[-7,-1]],[[269950,173591],[197,-1158],[100,-2595],[-427,921],[-144,1848]],[[271870,169323],[-1374,15]],[[270496,169338],[-105,2644],[304,1032],[-368,5],[-94,-804],[-283,1506]],[[276009,173063],[-4,0]],[[275994,173067],[-63,2]],[[275922,173070],[-37,2]],[[275863,173072],[173,-517],[58,-7156],[-69,-4426]],[[276025,160973],[-424,252],[-1823,-64]],[[273778,161161],[-12,11687]],[[273778,161161],[4,-1336]],[[273782,159825],[-1083,-118],[-9,4915],[-814,-69]],[[271876,164553],[-6,4770]],[[270224,168130],[277,-3879],[-101,-152],[-176,4031]],[[271876,164553],[5,-1690],[-271,-29],[4,-1926],[-522,238]],[[271092,161146],[-65,2473],[-474,1226],[-124,2786],[67,1707]],[[269914,169695],[-11,-1]],[[225190,169575],[-741,-9780]],[[224449,159795],[-248,-323],[-357,2360],[-856,1102],[53,932],[-216,1774]],[[226202,166385],[-130,-3036],[396,-281],[0,-1592]],[[226468,161476],[1,-5174]],[[226469,156302],[-922,-316],[-540,1945],[-164,1243],[-394,621]],[[228231,162657],[-36,0]],[[228195,162657],[36,0]],[[227998,166170],[-12,1]],[[228159,164435],[-24,128]],[[228135,164563],[-189,860]],[[227946,165423],[67,747]],[[228068,166173],[91,-1738]],[[227684,164583],[-2,-1372]],[[227682,163211],[-57,-570]],[[227625,162641],[156,-4]],[[227781,162637],[-161,-1601],[-220,-468],[-932,908]],[[227632,166163],[52,-1580]],[[272238,151333],[13,1]],[[272251,151334],[-13,-1]],[[273782,159825],[19,-5213]],[[273801,154612],[0,-3237]],[[273801,151375],[-1312,-39]],[[272489,151336],[-461,1867],[-228,-193],[-395,1935],[-191,1815],[-122,4386]],[[228287,156177],[-113,-1804],[-350,-1094],[6,-1267],[-410,862],[-516,2812],[-435,616]],[[227781,162637],[266,-4006],[-45,-1341],[285,-1113]],[[228231,162657],[-36,0]],[[276025,160973],[-123,-6439]],[[275902,154534],[-491,-344],[-1072,2],[-538,420]],[[275887,153137],[-181,-2634],[-305,-2457],[-117,-2921],[81,-1855],[-329,-2502]],[[275036,140768],[-16,1]],[[275020,140769],[-149,-433]],[[274871,140336],[3,-77]],[[274874,140259],[-199,601],[-388,-1467],[-445,273]],[[273842,139666],[-42,3489],[1,8220]],[[275902,154534],[-15,-1397]],[[274871,140336],[3,-77]],[[275036,140768],[-16,1]],[[275491,142866],[-401,-4416],[-362,-2015],[523,3741],[240,2690]],[[272251,151334],[-13,-1]],[[273842,139666],[-118,-685],[-512,-438],[-244,1965],[102,2256],[184,-1642],[296,-971],[166,920],[-246,1771],[-349,147],[-259,2833],[-188,3419],[234,600],[-210,869],[-82,-1357],[-127,1983]],[[267576,216906],[-181,85],[-177,1931],[-468,2014],[37,2410]],[[233545,583163],[470,-1],[0,7179],[546,-267],[367,-1411],[396,-7637],[-21,-1976],[287,-1125],[439,-310]],[[245498,568091],[407,1054],[402,-2818],[1697,311],[722,-2325],[297,673],[566,-549],[-1155,-3041],[-1287,-1848],[-816,-1938],[-809,-2999]],[[244050,541402],[0,-11146]],[[242235,539623],[262,1549],[296,-1142],[509,151],[748,1221]],[[245788,538230],[8,-8017]],[[244050,541402],[832,1558],[406,334],[672,1956],[310,-1206],[-364,-2639],[91,-1053],[-209,-2122]],[[245788,538230],[630,1480],[422,-1521]],[[246668,543604],[119,-491],[-601,-1771],[482,2262]],[[254360,554779],[387,-1343],[-682,-275],[51,-770],[-806,-2719]],[[253310,549672],[-198,1604],[-596,-3]],[[252516,551273],[245,1548],[576,1487],[1023,471]],[[252129,567028],[638,1076],[-743,-3451],[-872,-1785],[142,-551],[-582,-1037],[-166,1628],[1583,4120]],[[251344,546531],[128,1308],[718,2354],[11,-1815],[317,-391],[169,-3174]],[[253310,549672],[-511,-4125],[-63,2159],[-507,612],[-28,1852],[315,1103]],[[256405,536544],[2,-6252]],[[256407,530292],[-349,-1],[-5,-3236],[-347,4]],[[253820,544308],[634,-392],[509,-1456],[171,-1720],[674,-4188],[597,-8]],[[257802,530287],[-1395,5]],[[256405,536544],[266,725],[573,-1785],[182,768],[315,-1250],[489,2627],[901,2228],[763,319]],[[258234,522811],[-689,-1998],[491,3712],[-698,206],[-250,-2796],[-467,641],[-361,-1503],[-267,-2116]],[[255011,510600],[-35,-2168],[-370,-346]],[[254679,502702],[345,2967],[570,1287],[473,4864],[330,490],[143,1897],[235,8],[-572,-6085],[-44,-1741],[-319,-1642],[-155,-2071]],[[266291,525882],[-781,768]],[[265510,526650],[490,1336],[-121,1234],[374,-217],[304,-1926],[-266,-1195]],[[264534,537282],[192,-120],[-169,-2149],[-263,1388],[240,881]],[[264771,527002],[-281,51]],[[264490,527053],[-48,-2]],[[264442,527051],[-19,1612],[-346,2],[-1,1612],[-2087,1],[-2,1628],[-347,-5]],[[261640,541399],[788,243],[-207,-1485],[-13,-3741],[568,-815],[557,744],[103,-1308],[702,1641],[226,-1324],[215,-3356],[-110,-1628],[279,286],[140,-1587],[477,-2057],[-594,-10]],[[263518,523913],[579,-848],[-387,-678],[-192,1526]],[[264771,527002],[-281,51]],[[264442,527051],[-1182,1275],[-230,-2015],[-35,-1966],[-708,3124],[-1172,1763],[-254,-167],[-380,-2335],[-589,12]],[[263048,514103],[-754,-310],[-259,1734]],[[262035,515527],[484,1048],[-316,239],[-233,2466],[498,2961],[580,1139]],[[261221,512583],[62,1279],[458,1590],[294,75]],[[260809,522685],[124,-2642],[-358,-488],[234,3130]],[[259619,509895],[-266,698],[189,945],[77,-1643]],[[260516,504529],[-484,-11]],[[259309,504590],[9,2169],[372,1309],[375,-215],[514,4334],[145,-2358],[-222,-3319],[14,-1981]],[[260516,504529],[127,-152],[342,4122],[-150,-4480],[236,2087]],[[266792,512570],[208,-2837],[-312,125],[-6,-2477],[298,-1300]],[[266298,493143],[-35,-2126],[-276,-1072],[-460,40],[-182,-1553]],[[266573,485031],[572,4601],[580,621],[347,1131],[524,-1430],[297,-2969],[77,-2649]],[[269259,474627],[236,-3607],[-157,-1605],[-122,-4884],[-353,81],[-169,1030]],[[268236,461260],[-80,-1234],[-498,-1329],[-248,-2669],[-87,-2522]],[[267323,453506],[-275,1114],[-676,-162]],[[266582,447887],[26,6]],[[266536,447880],[30,6]],[[267323,453506],[-736,-4607],[-57,-1020]],[[276369,283639],[51,-2897],[155,-81],[-317,-2464],[-721,-1619]],[[275274,275950],[-210,1998]],[[278269,287761],[-76,264]],[[276907,282488],[-285,-1501],[-132,340],[309,2769]],[[277898,288714],[355,-1067],[-412,-2026],[-412,-58],[-522,-3075]],[[61944,65038],[-273,273]],[[61671,65311],[273,-273]],[[64908,48284],[736,-2763],[362,-390],[489,-1482],[554,-3197],[-25,-2085],[243,13],[56,-1738],[491,-2284],[-473,-3219],[-430,-1374],[-451,-185],[-606,-2496],[-404,-3858],[-627,2124],[-104,1502],[90,4218],[-292,5439],[-197,1716],[344,2264],[318,3335],[-188,1775],[-21,2013],[135,672]],[[55029,84760],[231,-812],[-50,-4138],[-316,-1725],[-532,857],[-340,1190],[-70,1625],[168,1567],[390,1358],[519,78]],[[53118,80468],[25,-1793],[-233,-683],[-126,-1603],[-76,1953],[410,2126]],[[61944,65038],[565,-356],[-456,-1899],[-525,1010],[-689,11],[161,2281],[671,-774]],[[61752,60573],[246,-293],[244,-1960],[-83,-860],[-350,-533],[-259,3326],[202,320]],[[62904,54516],[45,-1246],[-351,-600],[8,966],[298,880]],[[62814,62495],[341,-2479],[437,901],[263,-353],[322,-1915],[311,-601],[36,-1558],[-162,-1020],[-712,-1318],[-390,413],[-55,3220],[-458,617],[-171,1326],[59,2294],[179,473]],[[58972,75139],[408,-3431],[-18,-1219],[214,21],[315,-3032],[-403,-785],[-272,1418],[-579,-705],[-494,5220],[436,170],[393,2343]],[[996992,632383],[818,-1163],[91,-906],[715,-2639],[-620,1211],[-351,1709],[-879,1733],[226,55]],[[949,635992],[100,-1643],[-281,619],[181,1024]],[[7984,636500],[-24,-2275],[-306,-73],[-67,2101],[397,247]],[[8254,636861],[430,-729],[-176,-972],[-344,387],[90,1314]],[[8791,637399],[78,-1228],[-422,750],[344,478]],[[2943,637533],[354,-28],[111,-1138],[763,-730],[-473,-573],[-84,-1947],[-423,-823],[-299,1293],[442,1084],[-738,1715],[347,1147]],[[5406,633633],[-183,-598],[-330,1038],[-855,-380],[1117,1264],[254,737],[16,1940],[428,-501],[-229,-1193],[22,-1774],[-240,-533]],[[996377,638802],[311,-784],[-244,-853],[-67,1637]],[[7152,639094],[-123,-3160],[552,52],[-112,-1993],[-620,-692],[-248,-1116],[-150,1715],[-276,-2445],[-148,1181],[344,1636],[-141,1180],[574,-355],[-294,2578],[642,1419]],[[999633,639522],[334,-975],[-327,-1865],[-356,430],[-110,1602],[459,808]],[[8394,641129],[361,-843],[-150,-1151],[-356,-113],[145,2107]],[[993962,641501],[134,-1164],[-300,-1592],[3,-1344],[-561,-90],[-111,-1517],[-310,1266],[482,1562],[297,122],[366,2757]],[[15680,641866],[-88,-643],[552,-599],[499,441],[599,-277],[-1373,-851],[-663,468],[-396,-613],[-511,1117],[345,752],[243,-726],[793,931]],[[18717,646240],[353,-1060],[-311,-985],[-542,-451],[86,1790],[414,706]],[[13936,646817],[445,-1871],[-208,-1713],[-379,-563],[294,-1046],[-845,-838],[-954,-1616],[-415,665],[-938,-680],[1038,1800],[664,138],[757,1388],[293,1606],[-347,796],[247,1637],[348,297]],[[983194,648582],[-58,-2898],[-305,735],[-724,157],[687,1802],[400,204]],[[23638,652034],[279,-453],[-114,-1345],[-515,-1145],[-82,1788],[432,1155]],[[26147,655623],[247,-1330],[-168,-813],[-713,1495],[634,648]],[[980647,657671],[764,-147],[436,-2390],[463,-235],[-708,-1136],[-317,775],[-432,-1614],[-470,872],[165,1668],[-516,-336],[77,1140],[-541,-71],[552,1546],[527,-72]],[[28034,654543],[907,4624],[-95,1472],[528,2185],[746,67],[-272,830],[82,1804],[501,2015],[614,648],[608,-970],[-157,-2372],[-1193,-2675],[-518,-3466],[-1751,-4162]],[[36357,673363],[-391,-2467],[-196,1415],[587,1052]],[[34797,676523],[213,-3286],[495,2734],[387,-122],[70,-1818],[-314,-391],[-519,-2697],[581,1301],[181,-1596],[-674,-868],[-156,-1539],[-278,590],[46,-1876],[-401,265],[-1841,-3579],[-467,-1377],[-651,1241],[1053,2460],[1096,1206],[-225,1759],[468,337],[-151,1493],[937,464],[-873,524],[-342,2033],[352,1704],[1013,1038]],[[26198,724966],[754,-263],[-288,-1192],[-466,1455]],[[25147,736552],[-441,-1991],[-390,1137],[831,854]],[[39420,678834],[125,-1114],[-549,-30],[-134,746],[558,398]],[[36825,680387],[730,-1661],[-578,-1781],[-479,150],[-104,2381],[431,911]],[[38082,681762],[-168,-1483],[356,-62],[-385,-1861],[-335,2175],[180,1214],[352,17]],[[45571,685391],[687,-1487],[-645,-37],[-42,1524]],[[46951,694607],[167,-1890],[-230,-1028],[-300,1739],[363,1179]],[[42854,695877],[634,14],[265,-1568],[337,-4089],[371,437],[216,-1478],[-489,52],[-123,932],[-254,-1722],[-453,-779],[-609,441],[-827,-359],[-642,-1585],[-62,-1249],[-802,-1375],[-569,492],[-277,2147],[71,1348],[583,1047],[406,3984],[356,1064],[528,-514],[981,2494],[359,266]],[[48298,698203],[503,-1314],[-281,-971],[-459,2013],[237,272]],[[54720,699114],[33,-1697],[-429,-1611],[396,3308]],[[53768,699716],[-56,-3065],[-690,-2054],[14,3270],[393,-758],[86,2465],[253,142]],[[52386,701641],[20,-2213],[-523,1390],[503,823]],[[51367,702388],[93,-1872],[271,219],[341,-2313],[-185,-1094],[-922,1412],[40,2470],[362,1178]],[[52632,703466],[225,-1137],[-484,351],[259,786]],[[56429,729876],[0,-164]],[[56429,729712],[0,-1271]],[[56429,728441],[-377,-902],[0,-1576],[-687,44],[0,-1691],[-885,0],[-1,-1609],[-854,-47],[-11,-3154],[263,-16],[12,-6313],[-175,-1752],[845,0],[1,-4664]],[[54560,706761],[-222,3583],[-465,487],[-226,-1331],[-227,543],[-129,-1791],[-940,-1953],[-503,-2559],[-202,1961],[-157,-2246],[-320,-160],[-389,1335],[-213,-1550],[-894,-1527],[-527,87],[101,2154],[312,2133],[-635,501],[-314,-1612],[37,-2336],[-533,-3433],[-423,296],[235,-2134],[-319,-953],[-327,1503],[-197,-2494],[-615,575],[-125,3742],[-386,953],[-194,-965],[303,-1471],[137,-4091],[-323,1731],[-87,-1650],[-582,-104],[-227,2389],[-557,961],[-45,-1927],[534,-1473],[-912,-2585],[204,4150],[-79,1484],[293,977],[935,318],[218,2402],[378,1261],[397,-106],[-126,1804],[846,4218],[1241,3632],[1202,1198],[763,131],[637,709],[-431,-1918],[671,-3199],[315,-565],[-272,3532],[664,-283],[156,-1434],[616,-516],[79,1328],[-803,1925],[-146,1183],[589,5125],[1474,4921],[1402,2353],[1202,3896]],[[131840,702692],[477,-1813],[-260,-3591],[-338,3444],[121,1960]],[[133474,712615],[473,-2306],[365,-3908],[-109,-3956],[-237,-2723],[-412,-1256],[-725,1926],[512,3110],[-666,-3077],[-840,2748],[551,2915],[-269,716],[-18,1677],[520,1253],[-148,1905],[1003,976]],[[60956,762087],[580,2152],[206,3039]],[[61742,767278],[1862,118],[0,-5313],[-2648,4]],[[51409,765657],[-524,-4199],[-534,-542],[51,2808],[1007,1933]],[[50361,766039],[-742,-1613]],[[49619,764426],[-84,1634],[826,-21]],[[55885,766355],[509,-1408],[386,-3700]],[[56780,761247],[191,-1494],[-550,-1757],[-436,893],[-942,6038],[-709,1488],[71,1756],[-303,-417],[-191,-2035],[-311,-514],[-282,1932],[-661,238],[-84,2398],[-286,617],[-1293,-3499]],[[50994,766891],[-531,-524]],[[50463,766367],[-1,3048],[448,4],[154,1512],[-6,3289],[476,13],[-1,1619],[475,67],[154,1547],[1,3270],[485,-4],[6,3225],[637,43],[12,3203],[445,89],[15,3067],[182,1579],[477,25],[0,3224],[493,-11],[186,1563],[8,3225],[507,4],[5,1610],[467,16],[198,3194],[2956,4],[8,-1469],[510,-22],[-8,1633],[498,0],[-2,1661],[984,-7],[4,-1637],[3362,-86]],[[64598,804865],[7,-22905],[-456,-39],[-2,-1619],[-951,22],[-2,-1609],[-471,19],[-265,-3261],[-958,50],[-3,-1622],[-474,33],[8,-3299],[225,-22],[8,-3864]],[[61264,766749],[-1094,-1968],[-1643,-2597],[-488,694],[-101,1404],[-594,1396],[200,3649],[-345,-1592],[-443,-553],[-70,-2804],[-801,1977]],[[61034,724293],[684,-546],[-930,-219],[246,765]],[[56429,729876],[0,-164]],[[71633,804882],[114,-1587],[2,-6528],[-372,-12],[-8,-6508],[-349,-18],[4,-6266],[-358,2],[-1,-1645],[-479,-10],[4,-3277],[-474,-9],[9,-1643],[-817,-49],[13,-3241],[-942,-28],[7,-3279],[147,-19],[0,-6355],[154,-1634],[923,0]],[[69210,762776],[6,-3471],[-451,-1843],[-737,-1056],[-775,-256],[-137,-1018],[-764,-799],[5,-5901],[-324,-916],[-690,-542],[-206,-2415],[-364,-3],[217,-1278],[-364,-813],[-335,533],[-168,-1391],[-665,236],[-689,-3490],[-376,-3218],[1106,-40]],[[63499,735095],[-533,-3229],[-498,991],[-282,-2643],[-166,1250],[-876,-3730],[-513,1840],[-92,-1738],[-418,-1466],[296,-1221],[-476,-272],[-290,1208],[-838,-1435],[-237,-1294],[834,518],[-97,-1512],[-772,886],[46,-1061],[-586,328],[-1006,-4054],[729,1416],[657,-1055],[-889,-5668],[-359,2476],[4,-2388],[-570,564],[-201,-1661],[-1170,-914],[-208,-1647],[-122,1992],[-210,-168],[97,-2311],[-193,-2336]],[[56429,728441],[767,-812],[-200,4018],[209,1634],[849,4197],[641,1528],[416,1983],[586,1663],[449,-1863],[-120,2913],[-249,-206],[-33,2059],[290,6723],[197,1491],[339,172],[-417,2930],[210,2814],[593,2402]],[[61742,767278],[-122,1251],[-356,-1780]],[[64598,804865],[4289,-12],[2746,29]],[[65699,709070],[-504,743],[538,1338],[-34,-2081]],[[70400,724037],[-204,-1087],[-507,-19],[711,1106]],[[68717,724702],[-248,-2013],[-521,-1695],[195,2304],[574,1404]],[[69851,724354],[-436,-1711],[-363,958],[373,1308],[426,-555]],[[72264,735888],[652,-276],[179,-1133],[-749,-602],[-369,-1913],[-211,2137],[498,1787]],[[71587,750055],[468,-1112],[219,-1969],[-713,1537],[26,1544]],[[72120,750653],[753,-1609],[143,801],[402,-896],[-318,-1580],[497,-23],[268,1873],[865,-1804],[-646,-1899],[256,-25],[-10,-2224],[878,340],[-525,-3652],[-487,209],[-630,1356],[-203,-636],[516,-1216],[-217,-2411],[-308,-183],[-530,1368],[-252,-544],[428,-942],[-369,-902],[-532,226],[-638,-2935],[-448,348],[322,-1679],[-993,-4198],[-692,-436],[210,1779],[607,2267],[-322,-122],[145,1970],[-434,-1663],[-185,436],[446,2279],[-692,794],[-670,-678],[121,-1421],[343,1135],[574,213],[-521,-3914],[-672,1507],[-36,3723],[-598,1836],[84,2427],[258,1668],[756,2433],[973,103],[65,-1861],[626,-4463],[-146,2063],[79,2795],[-205,1554],[707,-247],[-927,1791],[6,1470],[589,1559],[420,-1165],[70,-2442],[173,2477],[785,-907],[-89,1984],[525,-1432],[-620,2635],[25,690]],[[72294,752633],[298,-243],[385,-2001],[-773,1279],[-524,168],[436,1600],[178,-803]],[[74768,758553],[203,-1495],[404,602],[-151,-1955],[514,1173],[-65,-2164],[-262,-1096],[-683,1715],[168,-2076],[-474,81],[-333,-1022],[-38,2484],[-168,-2623],[-420,-227],[-2,-1319],[-1062,2147],[-116,1830],[591,-260],[-304,1148],[155,946],[718,-477],[-71,2281],[415,1422],[495,-330],[342,-2521],[144,1736]],[[73815,761335],[865,1186],[-377,-3031],[-415,471],[-73,1374]],[[72144,766667],[-256,-165],[-280,-2562],[-647,-1820],[-614,-90],[-174,-2212],[-343,-44],[105,-2404],[-386,-649],[215,-848],[-603,-2221],[-48,-1387],[-356,1779],[54,-1574],[-326,275],[-477,-1769],[-794,237],[-111,-2260],[-819,-2015],[-130,-1037],[-601,883],[69,-2348],[-396,-579],[8,-1505],[-775,384],[-34,-2432],[-519,654],[-902,-2724],[-22,-1053],[572,813],[-197,-1902],[142,-997]],[[69210,762776],[1367,8],[-4,1619],[1015,11],[-7,2250],[404,-14]],[[71985,766650],[159,17]],[[127092,749125],[-108,-525]],[[126984,748600],[108,525]],[[125289,753706],[-418,-538]],[[124871,753168],[418,538]],[[124853,753145],[-548,-606],[-395,-1297],[-254,1283]],[[123656,752525],[58,1722]],[[123714,754247],[93,682]],[[123807,754929],[26,-1188],[798,113],[222,-709]],[[124293,757146],[750,-2547],[-1015,763],[-163,962],[428,822]],[[124853,768717],[212,-1953],[1164,-2450],[370,-2181],[920,-3383],[-234,-797],[806,-4371]],[[128091,753582],[-944,-4191]],[[127147,749391],[-328,-1604]],[[126819,747787],[-268,-754]],[[126551,747033],[-347,2791],[-601,2743],[-35,3375],[303,711],[-120,1531],[-569,-3645],[-843,2824],[-590,340],[-224,2827],[-377,2538],[-7,5750]],[[123141,768818],[1712,-101]],[[122508,768865],[607,-35]],[[123115,768830],[93,-1237],[-283,-3191],[-329,1969],[-88,2494]],[[125029,711856],[426,56],[-445,-1309],[19,1253]],[[123927,716625],[1,1610]],[[123928,718235],[-1,-1610]],[[130215,719801],[108,-2063],[754,-2315],[-336,-626],[253,-2100],[-617,-805],[-300,1242],[211,718],[-488,1319],[-281,-690],[-163,3076],[325,412],[163,1719],[371,113]],[[129377,721918],[250,-1134],[-116,-2167],[-588,-789],[-541,1883],[181,1807],[814,400]],[[130831,716911],[-490,1839],[74,2204],[-143,1693],[378,-777],[303,-2038],[326,198],[294,-2758],[-436,-1557],[-306,1196]],[[128815,728558],[1034,-4174],[-771,-1664],[-361,266],[61,2359],[-148,3100],[185,113]],[[126153,727422],[-66,1104],[447,-558],[-460,-4949],[-272,-4761],[208,396],[-146,-3602],[-196,615],[-111,3651],[-137,-5807],[-277,1260],[-135,3642],[145,2920],[526,49],[-192,2101],[-590,341],[100,963],[-331,2219],[-29,2428],[339,-758],[184,2186],[563,-1046],[430,-2394]],[[126096,733937],[1281,-1597],[901,-116],[344,-1458],[134,-4906],[-200,-1131],[-499,1925],[-370,3180],[207,-4438],[380,-383],[50,-1490],[-322,-1689],[-658,1032],[13,-897],[-616,-308],[-202,4527],[180,2218],[-302,119],[-133,1682],[-635,2448],[447,1282]],[[130328,738612],[338,-2561],[-338,-2230],[903,-864],[-220,-3192],[700,-1259],[104,-3850],[709,243],[1429,-3886]],[[133953,721013],[216,-2256],[-268,-1574],[-451,60],[-521,-1243],[215,-2328],[-365,57],[-534,1418],[-527,-1313],[-53,-1739],[-415,-1188],[272,-1077],[-69,-1917],[-376,-1020],[-347,1785]],[[130730,708678],[461,1375],[54,2694],[202,40],[-9,3932],[574,625],[-465,526],[-185,2188],[-506,719],[-71,1280],[-436,1390],[255,2614],[-502,-62],[-114,1369],[-779,1724],[-462,2944],[356,-608],[-84,2468],[-160,-1289],[-1098,1537],[-631,1283]],[[127130,735427],[606,1116],[480,-957],[393,2691],[951,1778],[768,-1443]],[[126819,747787],[-268,-754]],[[120135,747679],[-912,-75]],[[119223,747604],[-113,-8]],[[119110,747596],[-67,-6]],[[119043,747590],[175,3136],[917,-3047]],[[118824,752542],[436,-1596],[-323,-3068],[-280,1218],[167,3446]],[[127130,735427],[-12,1829],[1069,643],[-784,626],[-295,2733],[131,1559],[-541,1078],[246,1825],[1153,-2770],[-708,2710],[-430,722],[25,2218]],[[127092,749125],[55,266]],[[128091,753582],[284,-2841],[560,-2991],[878,-6389],[515,-2749]],[[124853,753145],[18,23]],[[125289,753706],[-147,-677],[907,-5880],[24,-2256],[-213,92],[-809,7066],[77,-1904],[-257,510],[590,-4994],[507,-2211],[51,-2144],[-522,218],[645,-2298],[-310,-1473],[-532,1666],[53,-3416],[-405,-716],[-195,-1446],[-545,-1275],[-191,2104],[52,2518],[366,839],[-4,1567],[-686,5962],[71,2065],[-287,4181],[127,721]],[[121078,751604],[-276,-1102]],[[120802,750502],[345,-330],[594,2364],[322,432]],[[122063,752968],[1024,-1345],[153,-1323],[-237,-1608],[-620,1179],[756,-2767],[-774,-494],[-453,1350],[-1420,2800]],[[120492,750760],[-345,-2996]],[[120147,747764],[-1106,4388],[167,2241],[346,-765],[279,1062],[445,-194],[426,1507],[912,-2103],[-538,-2296]],[[121729,756782],[0,-124]],[[121729,756658],[0,124]],[[123714,754247],[-96,-1670],[-340,1775],[-158,4018],[687,-3441]],[[120618,759891],[-327,4038],[-328,1992],[899,1274],[-790,545],[-394,2927],[235,-3862],[-191,-2032],[-885,1580],[-102,2460],[-280,-1505],[-688,1343],[-390,-1137],[760,-460],[670,-1418],[-345,-493],[774,-1580],[-470,-1770],[539,847],[340,-512],[457,-4298],[-641,-1196],[-12,909],[-620,-1129],[-299,1069],[42,-2620],[-717,2665],[-654,322],[-1471,4078],[-936,3744]],[[114794,765672],[1165,1936]],[[115959,767608],[1943,4721],[682,110],[264,1748]],[[118848,774187],[1665,-1619],[529,-1279],[326,-2198],[-479,-4537],[582,-819],[408,-1530],[231,-2152],[-488,-12]],[[121622,760041],[48,-2295],[-406,960],[-823,-873],[177,2058]],[[122913,775799],[-901,-103]],[[122012,775696],[-90,222]],[[121922,775918],[-936,7001]],[[120986,782919],[676,1289],[685,-1897],[571,-2466],[-201,-2534],[196,-1512]],[[121729,756782],[0,-124]],[[123141,768818],[-26,12]],[[122508,768865],[-496,6831]],[[122913,775799],[197,-1218],[722,-594],[59,-1056],[547,-1130],[415,-3084]],[[121922,775918],[-144,-2315],[-359,300],[514,-2661],[-51,-2482],[722,-6540],[-70,-1017],[303,-3963],[-99,-2100],[-512,-56],[-321,1677],[-283,3280]],[[118848,774187],[34,3836],[479,-24],[183,1767],[-318,751],[1118,1162],[642,1240]],[[120877,738496],[390,-2216],[135,-2451],[-165,-1458],[-606,-381],[12,6413],[234,93]],[[122848,727161],[-437,-147],[76,1437],[-513,245],[-61,2351],[448,1679],[-481,1224],[98,2801],[-465,-185],[-451,2135],[587,60],[-327,842],[147,1990],[629,564],[-76,-1197],[394,257],[556,-1676],[492,7],[-82,-2392],[463,-6885],[222,-4906],[-139,-7130]],[[123927,716625],[-394,1362],[-698,5371],[279,1647],[-447,-368],[181,2524]],[[119110,747596],[-67,-6]],[[119342,746836],[-119,768]],[[120135,747679],[12,85]],[[120492,750760],[1454,-3708],[395,-1834],[350,1018],[503,16],[257,-5147],[-688,-337],[-264,1058],[-1794,4643],[717,-3300],[33,-2583],[-443,-1626],[-365,435],[-452,2590],[539,-1592],[-959,3723],[85,790],[-518,1930]],[[40063,839903],[771,-536],[-861,-2773],[-123,3413],[213,-104]],[[40964,844347],[884,-2223],[77,-1915],[441,-2172],[-39,-1739],[-704,2419],[-1775,1536],[91,1825],[445,2301],[580,-32]],[[42066,848667],[903,-976],[561,-1663],[-705,-1821],[-339,-2285],[-564,-2],[-710,2401],[-621,812],[14,1297],[651,1760],[810,477]],[[46154,848898],[568,1],[10,-1610],[528,1],[18,-1676],[523,-12],[-2,-1547],[3175,0]],[[50974,844055],[-395,-2136],[-21,-6445],[-125,-25],[-6,-6437],[382,-5],[-9,-4748],[1057,-39]],[[51857,824220],[181,-1451],[603,-215],[-1455,-2220],[-980,-2588],[-900,-571],[-1212,-1602],[-1236,662],[-494,709],[-1853,-1999],[-659,648],[-690,-2756],[-940,669],[30,-2392],[-390,-2165],[-92,-1943],[-1045,-1524],[-745,777],[-937,-1159]],[[39043,805100],[-170,1112],[663,830],[-1128,3201],[-12,-2176],[-520,182],[-235,2567],[115,849],[-613,570],[-206,2124],[417,1187],[-482,1393],[-545,-1186],[-96,2644],[1075,795],[-527,599],[-414,1924],[1382,581],[-440,3024],[250,2550],[1108,5288],[620,2101],[570,-118],[934,3976],[822,-896],[964,-4031],[-209,4581],[-455,1793],[10,1197],[849,640],[78,1725],[725,1785],[524,-1400],[778,465],[611,2670],[668,1252]],[[46896,791982],[260,-1285],[-269,-665],[9,1950]],[[36192,795959],[181,-1952],[581,363],[562,-947],[-125,-4413],[449,-2402],[-1266,-1162],[-486,-2126],[-684,2000],[-494,-131],[-1055,2670],[-324,-89],[-642,1570],[-208,2198],[273,856],[1285,-623],[56,1282],[1009,2111],[905,-187],[-17,982]],[[17304,799216],[127,-1746],[803,-2157],[617,-183],[448,-1365],[-1030,65],[-999,3082],[-322,373],[356,1931]],[[39654,805231],[135,-1106],[641,589],[-99,-1482],[647,41],[525,-808],[141,-1889],[-483,-1833],[-426,-534],[213,-1308],[-376,-571],[-318,-2845],[-421,135],[-776,2413],[438,1980],[-611,-775],[-639,998],[1250,2977],[-198,1359],[400,589],[-43,2070]],[[49028,771386],[-725,158],[-208,-907],[-382,2903],[195,2895],[687,2210],[-440,2484],[-275,3082],[-345,1471],[-415,3726],[136,1138],[-767,3115],[394,1259],[285,3791],[-130,576],[-403,-4188],[-432,-1001],[310,-2534],[-70,-3037],[-404,-1084],[-1629,-2447],[-1521,-851],[-1010,789],[-259,2086],[268,429],[-760,1956],[-695,3087],[-88,1177],[383,1597],[-109,1291],[397,379],[-182,1458],[363,50],[278,1573],[409,341],[230,1753],[700,-118],[-14,-3249],[424,240],[608,2498],[-385,1562],[-1050,843],[630,147],[398,1002],[-599,266],[-481,-1345],[-126,3490],[-457,-1833],[195,-1308],[-1243,-569],[-215,1520],[-538,-627],[-174,927],[-744,-457]],[[51857,824220],[3537,-32],[11,1610],[2034,-6],[-4,1618],[4082,202],[1,-1838],[5893,-29],[3388,4],[-14,1715],[961,61],[4,1569],[902,-10],[192,1616]],[[72844,830700],[-1,-16190]],[[72843,814510],[-1303,45],[-16,-5422],[126,-21],[-17,-4230]],[[50463,766367],[-102,-328]],[[49619,764426],[-138,-1468],[-1061,-1905],[-96,1293],[-1035,446],[860,1205],[618,1650],[-308,160],[-106,3181],[675,2398]],[[91002,847056],[9,-3989],[146,-1794],[7,-11469],[-1549,27],[57,-1647],[46,-12768],[-727,13],[0,-927],[-3493,32]],[[85498,814534],[-2027,-32],[-141,994]],[[83330,815496],[-403,602],[-737,-459],[-671,-2022],[-282,-2604],[-1336,126],[-327,2166],[-17,-1517],[-1057,-1636]],[[78500,810152],[-3,1151],[-1003,22],[-4,3165],[-4647,20]],[[72844,830700],[0,8044]],[[72844,838744],[3089,-82],[11,1347],[6636,9993],[4097,-25],[10,2587],[2946,186]],[[89633,852750],[1355,59],[14,-5753]],[[86653,868811],[757,-1569],[2146,14]],[[89556,867256],[85,-6324],[-8,-8182]],[[72844,838744],[1580,8235],[0,2535],[-536,-83],[-516,926],[-151,2433],[36,3161],[1704,93],[23,3109],[496,-4],[22,3291],[619,94],[97,1433],[589,57],[151,-984],[624,-420],[1536,6613],[4538,-402],[2997,-20]],[[85498,814534],[-39,-10730],[-759,-83],[2,-2090]],[[84702,801631],[-828,17],[8,1987]],[[83882,803635],[-435,1931],[-461,-308],[-1060,1668],[-902,2472],[707,3049],[1129,2748],[470,301]],[[97243,787641],[-969,-3439],[63,996],[906,2443]],[[87222,789210],[-180,-1772],[-423,-410],[603,2182]],[[86635,788749],[222,2200],[234,-961],[-456,-1239]],[[86657,791573],[-367,-3115],[-331,1166],[698,1949]],[[89187,794370],[361,-14],[-243,-1523],[503,637],[-806,-2688],[-815,-3927],[158,-1241],[-672,-1392],[-694,-249],[129,1479],[1250,4306],[686,2953],[143,1659]],[[86770,795107],[-72,-1859],[-323,817],[395,1042]],[[90856,797012],[511,-366],[-55,-1276],[665,500],[124,-712],[-949,-1371],[-533,-1467],[-220,828],[596,1566],[-651,-377],[-24,893],[536,1782]],[[87021,792777],[236,3392],[602,-294],[-414,-4995],[-424,1897]],[[84910,786500],[234,323],[67,9012],[-285,661]],[[84926,796496],[583,1622],[519,-1020],[524,1882],[285,-1347],[30,-1922],[-995,-2869],[605,-1030],[-718,-2215],[-216,-2677],[-633,-420]],[[92921,798974],[-9,-545],[-1146,-2071],[-223,1207],[1378,1409]],[[88340,800844],[382,-576],[-511,-770],[129,1346]],[[84951,800675],[-1,141]],[[84950,800816],[1,-141]],[[86236,802132],[283,-1843],[-420,600],[137,1243]],[[84951,797243],[-1,3142]],[[84950,800385],[697,2105],[-37,-2998],[389,2501],[243,-2671],[-389,-1481],[-417,814],[-485,-1412]],[[86677,805210],[323,-2117],[-624,-286],[301,2403]],[[87479,803390],[-298,-138],[-587,2075],[325,2591],[505,2085],[121,1742],[-770,-3524],[-194,-1549],[-273,1236],[-414,-4415],[-943,-1986]],[[84951,801507],[-249,124]],[[91002,847056],[976,234],[64,648],[2681,18],[1,-1651],[1593,-292],[4039,-37],[350,-2273],[-455,-2972],[436,-1269],[-269,-2840],[730,-302],[297,1950],[1174,-335],[-16,-1588],[538,-65],[-11,-1551],[466,-23],[-40,-6434],[413,-697],[3,-4218],[2305,16]],[[106277,823375],[-1,-28115]],[[106276,795260],[-590,822],[-1600,-31],[3,1610],[-3846,-34],[-2013,-8871],[13,-855]],[[98243,787901],[-1022,2714],[46,774],[-1003,-33],[-278,1650],[-683,426],[370,3141],[18,2628],[-612,-1565],[-177,-1401],[-661,-2022],[-456,1505],[-714,1071],[-573,-359],[943,3800],[-1115,-764],[259,1691],[-925,-1558],[532,2101],[-1010,-888],[-678,62],[-93,801],[1014,956],[445,1115],[-1048,-704],[-517,1833],[317,3213],[1054,57],[-177,903],[-745,-283],[-1115,-3389],[-360,1426],[-192,-1467],[-587,-1116],[-377,408],[7,3472],[-279,-1340],[36,-2946],[-408,-423]],[[71985,766650],[159,17]],[[71670,777076],[234,-1111],[-578,-409],[344,1520]],[[79473,776784],[-279,-2074],[91,2387],[188,-313]],[[75949,796147],[-338,-1237],[225,2636],[113,-1399]],[[84951,800675],[-1,141]],[[84951,801507],[-1,-1122]],[[84951,797243],[-25,-747]],[[84910,786500],[-1246,807],[242,1474],[-372,-167],[-386,-2037],[-206,3701],[-28,-2396],[-482,-1666],[-172,-1732],[-184,2620],[-197,-5326],[-848,3357],[-38,-1545],[418,-800],[-370,-1104],[-67,-1569],[-636,-858],[208,3841],[-674,-5212],[-362,1475],[21,-2088],[-388,-20],[-756,-4011],[-74,2111],[-348,-2231],[-659,934],[-174,-858],[-797,-888],[-20,1049],[-622,715],[206,2741],[545,1203],[719,24],[15,1316],[737,963],[-65,842],[764,2927],[-372,25],[-1226,-2967],[-387,246],[-630,2275],[461,4880],[785,3381],[113,2715],[230,475],[103,3025],[-412,3227],[967,1254],[994,2799],[846,1832],[515,-1977],[449,-352],[796,1052],[346,-814],[1490,-887],[200,-646]],[[78500,810152],[-530,-2655],[-888,-709],[-891,-2927],[269,-2258],[-403,43],[-549,-1340],[-154,-1303],[-582,-1608],[-230,-3803],[-475,-1478],[-1034,410],[708,-1448],[308,-1772],[-383,-2913],[-286,-680],[-1149,-274],[-158,-989],[796,2],[-164,-2224],[-453,-1067],[-564,295],[229,1314],[-338,1411],[33,-1984],[-398,-2576],[-670,-197],[277,-1966],[-1054,-1700],[-61,-2764],[-262,-488],[165,-2860],[276,1050],[1026,35],[412,-1681],[604,-1165],[58,-1233]],[[110729,776964],[-495,571],[-782,1958],[461,899]],[[109913,780392],[89,-474],[541,2603],[-419,3604],[332,1618],[530,-2532],[165,177],[-481,2635],[-359,838],[-174,-1871],[-465,-2242],[-1471,-2407],[-1544,735],[-1624,2726],[528,2089],[-370,3152],[-376,-855],[438,-1616],[-624,-1272],[-2761,2302],[-2698,-711],[-927,-990]],[[106276,795260],[0,-1588],[1342,-1612],[173,1644],[1330,-2348],[802,2853],[1723,322],[-346,-4919],[404,-1740],[965,-1648],[226,-2564],[2839,-9770],[299,-4811],[-74,-1471]],[[114794,765672],[-73,1821],[-695,2541],[-827,1292],[164,1473],[-569,-631],[-2065,4796]],[[106278,946179],[-1,-49412]],[[106277,896767],[-929,-2456],[-130,-1602],[-1321,-3358],[-906,419],[-783,-1692],[-450,406],[-348,-3371],[-325,-1449],[-654,-436],[-1189,-2953],[58,-3794],[-685,-1988],[-823,655]],[[97792,875148],[-203,2150],[357,3326],[-316,717],[514,847],[-160,1080],[-963,-156],[-338,-900],[-1243,1394],[-888,-1195],[-579,220],[-637,-952],[-288,1202],[375,852],[-1289,1884],[-167,1203],[400,1802],[-515,869],[-625,-619],[-460,-1403],[-1060,-1320],[-1074,-9],[-602,-1160],[-3101,7],[49,-11364],[273,317],[852,-2473],[549,-2656]],[[50974,844055],[11,4776],[491,30],[-59,4948],[549,10],[5,1425],[1101,13],[-16,1635],[486,23],[-4,1682],[645,-27],[-88,4840],[-628,-25],[-60,12985],[569,32],[-10,3218],[559,13],[-6,6310],[540,-19],[-4,4867],[-576,-8]],[[54479,890783],[-6,8106],[1752,-15],[3,3093],[2984,34],[5,6544],[2342,37],[2,-3291],[1183,54],[6,3237],[1193,13],[-3,-1578],[602,62],[1,-1631],[1167,-18],[135,4837],[1805,-29],[9,2777],[1841,-6],[167,1644],[-9,6647],[-439,-22],[-9,1684],[-1233,60],[2,4808],[171,1666],[-625,-6],[17,1605],[-635,-28],[7,1646],[-620,10],[151,4213]],[[66445,936936],[6420,-4],[8315,-29],[7299,19],[3886,4],[-10,9097],[4664,308],[4791,-299],[4468,147]],[[97792,875148],[-1157,-1861],[-1437,-203],[-262,-1097],[-804,-486],[-476,-1290],[-576,795],[-732,-1427],[-433,44],[-568,-2104],[-1791,-263]],[[106277,896767],[0,-73392]],[[79658,983425],[-185,-1457],[-394,1372],[579,85]],[[47581,977020],[610,-137],[635,1732],[830,26],[1623,2411],[1469,3493],[882,526],[-302,-3710],[454,-2620],[-61,3461],[378,971],[-494,2434],[-541,44],[1262,3273],[1370,1209],[-524,-1006],[415,-852],[3298,1403],[1420,2119],[704,1934],[1322,4592],[409,808],[628,-1392],[914,-472],[118,-1343],[1297,-96],[153,-1576],[-590,-1822],[-1262,-1268],[607,-390],[-401,-1320],[1303,-53],[456,606],[-100,1673],[703,1368],[285,1695],[248,-1304],[706,927],[681,-1755],[-272,-1974],[1375,-2190],[694,2096],[1211,87],[986,692],[972,-831],[277,-2576],[300,2683],[990,-1071],[-562,-2518],[5,-1534],[1010,-523],[-1484,-682],[2476,170],[-501,-2281],[1553,-378],[327,-1081],[239,1607],[1279,271],[-193,-2495],[904,1575],[843,524],[666,1465],[1962,-426],[888,-1702],[687,50],[281,-1516],[1081,465],[877,-2131],[2069,-1579],[1437,785],[1494,-1037],[433,636],[1636,-3239],[1773,-386],[360,910],[3398,1866],[1397,-1342],[1104,-2166],[387,-1504],[1266,-1053],[1132,-2958],[448,853],[589,-630],[-2,-21362]],[[66445,936936],[-1,524],[-2610,-22],[-8,1898],[-2540,-186],[-17,1670],[-3117,28],[-4015,91],[-18,1253],[-1130,59],[26,-1251],[-2704,20],[-18,1270],[-1182,3],[10,-1281],[-1329,46],[-5,1284],[-2022,164],[0,-1272],[-4956,-97],[15,-3781],[-2411,69]],[[38413,937425],[-1696,2109],[-331,1546],[-1318,2643],[529,805],[402,3101],[39,5653],[2426,-417],[2904,1306],[906,1070],[1222,2915],[1185,4351],[538,5905],[-331,649],[1232,3475],[364,2386],[847,2064],[658,2579],[521,-1587],[-929,-958]],[[54479,890783],[-578,0],[-11,-1618],[-6225,44],[-4789,-36],[-3,3199],[-591,6],[0,3250],[-768,-9],[6,6455],[-204,26],[-6,6429],[-226,1957]],[[41084,910486],[1579,206],[201,-2555],[-310,-1226],[121,-2179],[-264,-1027],[215,-1763],[590,-1196],[376,539],[1137,-444],[965,699],[321,-1177],[667,-159],[981,798],[547,-2005],[189,2045],[810,3513],[796,-959],[610,527],[-497,1901],[-1493,1021],[-695,-1271],[194,3234],[-839,3465],[-837,787],[-420,2412],[385,1580],[445,29],[876,-3093],[-152,-2499],[446,-1912],[933,-1943],[1112,1831],[1076,-3146],[1509,330],[133,1771],[-332,2163],[-932,-161],[-461,1239],[-884,-261],[-253,-1862],[-716,-283],[-1101,3517],[233,3055],[871,1517],[-975,1716],[-1120,-1075],[-1026,-154],[-390,1249],[-528,-563],[-2239,1823],[-398,5493],[-678,3577],[-1095,2080],[-2354,5735]],[[46592,855663],[132,-1524],[-911,379],[779,1145]],[[20846,858391],[155,-1916],[1767,-2170],[1394,2515],[527,-233],[507,-1478],[154,-2243],[1091,-1044],[302,-1308],[1484,-327],[900,-741],[-444,-2851],[-1263,663],[-757,-2936],[125,-925],[-598,-398],[121,1508],[-579,2032],[-993,769],[95,1587],[-982,2254],[-776,1164],[-1178,-1499],[-407,-1269],[-853,1089],[-307,2233],[515,5524]],[[40155,909679],[-379,-812],[-1697,-1707],[2076,2519]],[[50524,879793],[-439,-61],[-575,-2905],[-898,82],[-597,-1411],[-710,-398],[-196,-1163],[-839,-1617],[-254,-2636],[-445,-1193],[-160,3172],[-951,2837],[-460,-1140],[679,-1515],[9,-1793],[-1367,2871],[-2017,-59],[-2019,-2250],[-808,901],[-2507,1784],[-688,2790],[278,1486],[-107,1445],[-748,1759],[-608,2844],[665,-529],[574,1255],[300,1828],[875,-777],[602,-2903],[499,-323],[641,1345],[-383,829],[-828,195],[-166,-711],[-668,2577],[-1943,1612],[-1533,483],[-1421,2817],[-463,460],[785,2443],[578,22],[0,1593],[845,1741],[325,-909],[992,2482],[419,1887],[1043,1672],[643,-1027],[1215,98],[319,782],[-1041,1555],[504,1845],[720,1193],[1099,506],[108,-679],[852,2834],[830,667]],[[46154,848898],[640,3384],[126,1617],[837,-1042],[-393,-958],[1743,358],[1078,995],[1027,4968],[-512,5797],[-74,2808],[-781,2760],[-730,206],[138,2075],[1090,-247],[768,2179],[53,1989],[-321,1964],[-700,1681],[381,361]],[[129335,693546],[271,-1010],[-141,-1955],[-386,2864],[256,101]],[[133465,694933],[143,-1619],[-432,-1116],[-420,1401],[709,1334]],[[129050,698432],[385,-3029],[-188,-665],[-381,868],[234,1060],[-50,1766]],[[128270,699419],[265,-2151],[-73,-1620],[898,-5179],[113,-1526],[-466,199],[-649,4105],[-450,3522],[51,2603],[311,47]],[[132791,699517],[330,-1553],[-34,-2741],[-744,304],[318,2135],[-200,1262],[330,593]],[[127590,701351],[341,-1447],[-98,-960],[-490,-120],[13,2204],[234,323]],[[126996,702605],[285,-601],[-587,-1676],[302,2277]],[[127348,703974],[-506,-707],[254,1440],[252,-733]],[[126550,705223],[399,-333],[-241,-1814],[-292,1013],[134,1134]],[[127577,705503],[193,-1280],[-213,-947],[-254,1520],[274,707]],[[126975,710441],[673,-1209],[-594,136],[47,-1542],[-469,1638],[343,977]],[[127738,711890],[120,-2595],[-287,1329],[167,1266]],[[132952,712558],[-518,-394],[513,1289],[5,-895]],[[127378,716539],[385,-260],[-14,-2495],[-237,369],[-704,-1255],[-241,-1211],[-256,709],[517,3076],[550,1067]],[[126878,720141],[452,-580],[748,57],[385,-2788],[-192,-1470],[384,-1821],[435,266],[496,-1761],[457,-2620],[48,-3196],[266,734],[170,-1960],[371,-1718],[-851,2044],[-551,-1434],[684,586],[160,-2342],[298,487],[445,-2791],[-465,-922],[455,-352],[205,1480],[89,-3147],[-431,-827],[397,-512],[100,-2503],[-398,-58],[420,-1193],[-181,-2479],[-613,701],[-450,4337],[-562,-35],[259,2639],[-330,-709],[133,1822],[-301,-502],[-724,2251],[-726,264],[29,1948],[514,-22],[-360,1667],[235,2818],[-439,-874],[-449,797],[645,3530],[-239,1458],[-150,5159],[-813,307],[-188,1878],[133,1386]],[[133953,721013],[796,-683],[443,-1861],[433,-443],[117,-1890],[501,-840],[396,491],[280,-2136],[-1,-1873],[-414,-2628],[68,-3449],[428,-5570],[-358,-1661],[-236,-2416],[-442,-2702],[-867,-2699],[-212,1931],[-287,-2059],[-268,662],[-207,4192],[490,1687],[-537,-477],[-157,1948],[583,2169],[-76,7458],[-888,5088],[-486,-470],[-72,869],[-948,-2430],[-397,-118],[344,-1651],[-544,-5283],[-589,1664],[-116,2845]],[[312327,9345],[187,-606]],[[312514,8739],[-15,-1700]],[[312499,7039],[-350,67]],[[312149,7106],[17,912]],[[312166,8018],[43,812]],[[312209,8830],[118,515]],[[312084,13310],[6,-1329]],[[312090,11981],[-147,-93]],[[311943,11888],[-157,1159]],[[311786,13047],[223,739]],[[312009,13786],[75,-476]],[[312224,10808],[178,-1249]],[[312402,9559],[-75,-214]],[[312209,8830],[-202,83]],[[312007,8913],[-56,275]],[[311951,9188],[-19,1838]],[[311932,11026],[292,-218]],[[313107,15064],[-14,-2950]],[[313093,12114],[-156,-33]],[[312937,12081],[5,366]],[[312942,12447],[-35,2685]],[[312907,15132],[200,-68]],[[312774,6524],[70,-1309]],[[312844,5215],[-339,-40]],[[312505,5175],[62,1491]],[[312567,6666],[207,-142]],[[312709,10760],[26,-1201]],[[312735,9559],[-333,0]],[[312224,10808],[123,645]],[[312347,11453],[362,-693]],[[315123,11875],[54,-127]],[[315177,11748],[78,-1804]],[[315255,9944],[-163,-1769]],[[315092,8175],[-119,1033]],[[314973,9208],[-63,762]],[[314910,9970],[144,1735]],[[315054,11705],[69,170]],[[314670,11208],[37,-329]],[[314707,10879],[60,-643]],[[314767,10236],[-199,-737]],[[314568,9499],[-72,1129]],[[314496,10628],[174,580]],[[314052,6833],[264,-477]],[[314316,6356],[-19,-702]],[[314297,5654],[-318,76]],[[313979,5730],[73,1103]],[[312567,6666],[-68,373]],[[312514,8739],[144,137]],[[312658,8876],[116,-2352]],[[312942,12447],[-192,448]],[[312750,12895],[-16,-17]],[[312734,12878],[-7,2191]],[[312727,15069],[180,63]],[[314923,14259],[-51,-293]],[[314872,13966],[-106,119]],[[314766,14085],[83,583]],[[314849,14668],[74,-409]],[[313370,8907],[-65,-416]],[[313305,8491],[-209,84]],[[313096,8575],[-80,-30]],[[313016,8545],[-82,706]],[[312934,9251],[27,1093]],[[312961,10344],[345,-245],[64,-1192]],[[313305,8491],[-14,-2845]],[[313291,5646],[-154,397]],[[313137,6043],[-41,2532]],[[314464,12205],[-98,-1502]],[[314366,10703],[-105,-150]],[[314261,10553],[-75,982]],[[314186,11535],[35,729]],[[314221,12264],[129,638]],[[314350,12902],[114,-697]],[[314016,15104],[-14,-2136]],[[314002,12968],[-54,9]],[[313948,12977],[-196,-375]],[[313752,12602],[-27,1007]],[[313725,13609],[25,1393]],[[313750,15002],[266,102]],[[313604,15085],[-4,-1775]],[[313600,13310],[-8,-956]],[[313592,12354],[-45,-184]],[[313547,12170],[-454,-56]],[[313107,15064],[497,21]],[[314264,15070],[-76,-2601]],[[314188,12469],[-186,499]],[[314016,15104],[248,-34]],[[315464,13512],[1,-2420]],[[315465,11092],[-66,435]],[[315399,11527],[-159,1610]],[[315240,13137],[-103,1306]],[[315137,14443],[122,139]],[[315259,14582],[205,-1070]],[[314938,14053],[76,-2458]],[[315014,11595],[-176,-329]],[[314838,11266],[34,2700]],[[314923,14259],[15,-206]],[[315375,10329],[63,-1608]],[[315438,8721],[6,-426]],[[315444,8295],[-234,-828]],[[315210,7467],[-116,641]],[[315094,8108],[-2,67]],[[315255,9944],[120,385]],[[313784,8890],[255,-1302]],[[314039,7588],[13,-755]],[[313979,5730],[-242,-150]],[[313737,5580],[-39,3312]],[[313698,8892],[16,20]],[[313714,8912],[70,-22]],[[315465,11092],[-90,-763]],[[315177,11748],[222,-221]],[[313725,9097],[-11,-185]],[[313698,8892],[-269,127]],[[313429,9019],[231,2603]],[[313660,11622],[65,-2525]],[[314361,14912],[31,-1700]],[[314392,13212],[-42,-310]],[[314221,12264],[-33,205]],[[314264,15070],[97,-158]],[[312306,11771],[41,-318]],[[311932,11026],[-107,568]],[[311825,11594],[118,294]],[[312090,11981],[216,-210]],[[312937,12081],[24,-1737]],[[312934,9251],[-27,-14]],[[312907,9237],[-172,322]],[[312709,10760],[41,2135]],[[315183,5666],[-140,-215]],[[315043,5451],[-34,1223]],[[315009,6674],[174,-1008]],[[312505,5175],[-359,-115]],[[312146,5060],[3,2046]],[[314634,8727],[-21,-891]],[[314613,7836],[-92,-363]],[[314521,7473],[-160,1419]],[[314361,8892],[201,526]],[[314562,9418],[72,-691]],[[312295,14639],[81,-1252]],[[312376,13387],[-70,-1616]],[[312084,13310],[211,1329]],[[312007,8913],[159,-895]],[[312146,5060],[-281,902],[86,3226]],[[315210,7467],[60,-308]],[[315270,7159],[221,-1461]],[[315491,5698],[-308,-32]],[[315009,6674],[81,1385]],[[315090,8059],[4,49]],[[314186,11535],[-217,-675]],[[313969,10860],[-21,2117]],[[311825,11594],[-39,1453]],[[312009,13786],[157,1825]],[[312166,15611],[129,-972]],[[313137,6043],[-273,-820]],[[312864,5223],[152,3322]],[[314838,11266],[-131,-387]],[[314670,11208],[-8,752]],[[314662,11960],[28,1348]],[[314690,13308],[76,777]],[[313547,12170],[113,-548]],[[313429,9019],[-59,-112]],[[314973,9208],[-339,-481]],[[314562,9418],[6,81]],[[314767,10236],[143,-266]],[[314776,6994],[-112,-1631]],[[314664,5363],[-367,291]],[[314316,6356],[205,1117]],[[314613,7836],[163,-842]],[[312679,13384],[55,-506]],[[312376,13387],[303,-3]],[[315090,8059],[-314,-1065]],[[314662,11960],[-198,245]],[[314392,13212],[143,200]],[[314535,13412],[155,-104]],[[312679,13384],[-109,1773]],[[312570,15157],[157,-88]],[[313752,12602],[-160,-248]],[[313600,13310],[125,299]],[[314496,10628],[-130,75]],[[313604,15085],[146,-83]],[[315240,13137],[-117,-1262]],[[315054,11705],[-40,-110]],[[314938,14053],[199,390]],[[315043,5451],[-379,-88]],[[312864,5223],[-20,-8]],[[312658,8876],[249,361]],[[314001,9349],[196,-56]],[[314197,9293],[164,-401]],[[314039,7588],[-38,1761]],[[313784,8890],[217,459]],[[313969,10860],[-244,-1763]],[[313737,5580],[-446,66]],[[314261,10553],[-64,-1260]],[[312166,15611],[404,-454]],[[315579,8261],[226,-899]],[[315805,7362],[-150,-1087]],[[315655,6275],[-385,884]],[[315444,8295],[135,-34]],[[314535,13412],[108,1312]],[[314643,14724],[206,-56]],[[318309,12803],[169,-865],[-544,830],[375,35]],[[316158,12800],[-233,-1215]],[[315925,11585],[-15,-114]],[[315910,11471],[23,1757]],[[315933,13228],[225,-428]],[[315714,13936],[-106,-834]],[[315608,13102],[-144,410]],[[315259,14582],[455,-646]],[[315655,6275],[-164,-577]],[[315910,11471],[-22,-196]],[[315888,11275],[-160,-131]],[[315728,11144],[-34,42]],[[315694,11186],[-86,1916]],[[315714,13936],[219,-708]],[[315888,11275],[293,-1349]],[[316181,9926],[-216,-625]],[[315965,9301],[-242,491]],[[315723,9792],[5,1352]],[[315723,9792],[-144,-1531]],[[315438,8721],[211,2085]],[[315649,10806],[45,380]],[[315649,10806],[-184,286]],[[316256,11347],[-331,238]],[[316158,12800],[154,393],[-56,-1846]],[[316256,11347],[125,-1005],[-200,-416]],[[315965,9301],[-160,-1939]],[[316936,9054],[328,-560],[-757,-908],[-91,685],[520,783]],[[318661,1986],[376,-1085],[-740,-781],[24,1181],[340,685]],[[314361,14912],[282,-188]]],"transform":{"scale":[0.0003589261789261791,0.0000537148685138684],"translate":[-179.1473399999999,17.67439566600018]}}
},{}],8:[function(require,module,exports){
module.exports={"type":"Topology","objects":{"counties":{"type":"GeometryCollection","bbox":[-179.1473399999999,17.67439566600018,179.7784800000003,71.38921046500008],"geometries":[{"type":"MultiPolygon","id":53073,"arcs":[[[0,1,2]]]},{"type":"Polygon","id":30105,"arcs":[[3,4,5,6,7,8]]},{"type":"Polygon","id":30029,"arcs":[[9,10,11,12,13,14,15,16,17,18]]},{"type":"Polygon","id":16021,"arcs":[[19,20,21,22]]},{"type":"Polygon","id":30071,"arcs":[[-8,23,24,25,26,27]]},{"type":"Polygon","id":38079,"arcs":[[28,29,30,31]]},{"type":"Polygon","id":30053,"arcs":[[-18,32,33,-20,34]]},{"type":"Polygon","id":38009,"arcs":[[-30,35,36,37,38]]},{"type":"Polygon","id":30035,"arcs":[[39,40,-10,41]]},{"type":"Polygon","id":30041,"arcs":[[42,43,44,45]]},{"type":"Polygon","id":30005,"arcs":[[-27,46,47,-46,48]]},{"type":"Polygon","id":30019,"arcs":[[49,50,-4,51]]},{"type":"Polygon","id":38067,"arcs":[[52,53,54,55]]},{"type":"Polygon","id":27069,"arcs":[[56,57,-53,58]]},{"type":"Polygon","id":38095,"arcs":[[59,60,61,-32,62,63]]},{"type":"Polygon","id":38019,"arcs":[[-55,64,65,-64,66]]},{"type":"Polygon","id":53047,"arcs":[[67,68,69,70,71,72,-1,73]]},{"type":"Polygon","id":53065,"arcs":[[74,75,76,77,78]]},{"type":"Polygon","id":53051,"arcs":[[-22,79,80,-75,81]]},{"type":"Polygon","id":53019,"arcs":[[-78,82,-68,83]]},{"type":"Polygon","id":30051,"arcs":[[84,85,86,-44,87]]},{"type":"Polygon","id":38023,"arcs":[[88,89,90,91]]},{"type":"Polygon","id":38013,"arcs":[[92,93,94,95,-89,96]]},{"type":"Polygon","id":30101,"arcs":[[97,-86,98,-40]]},{"type":"Polygon","id":38075,"arcs":[[99,100,-93,101,-38]]},{"type":"Polygon","id":27135,"arcs":[[102,103,-57,104,105]]},{"type":"Polygon","id":30091,"arcs":[[-91,106,107,-50,108]]},{"type":"Polygon","id":16017,"arcs":[[-34,109,110,111,112,-80,-21]]},{"type":"Polygon","id":38101,"arcs":[[-101,113,114,115,-94]]},{"type":"MultiPolygon","id":53055,"arcs":[[[116]],[[117]],[[118]]]},{"type":"Polygon","id":27071,"arcs":[[119,120,121,122,123]]},{"type":"MultiPolygon","id":53057,"arcs":[[[124,-2,-73,125,126,127]]]},{"type":"Polygon","id":38105,"arcs":[[-96,128,129,130,-107,-90]]},{"type":"Polygon","id":38049,"arcs":[[131,132,133,-114,-100,-37]]},{"type":"Polygon","id":27137,"arcs":[[134,135,136,137,138,139,-120,140]]},{"type":"Polygon","id":30085,"arcs":[[-108,-131,141,142,-5,-51]]},{"type":"Polygon","id":53007,"arcs":[[-72,143,144,145,146,-126]]},{"type":"Polygon","id":38061,"arcs":[[147,148,149,-129,-95,-116]]},{"type":"Polygon","id":27089,"arcs":[[150,151,152,153,154,-58,-104]]},{"type":"Polygon","id":38069,"arcs":[[-62,155,156,157,-132,-36,-29]]},{"type":"MultiPolygon","id":38071,"arcs":[[[158]],[[159,160,161,-60,-66]]]},{"type":"Polygon","id":38099,"arcs":[[-54,-155,162,163,-160,-65]]},{"type":"Polygon","id":27007,"arcs":[[-122,164,165,166,167,168,-151,-103,169]]},{"type":"Polygon","id":30073,"arcs":[[-99,-85,170,171,-11,-41]]},{"type":"MultiPolygon","id":53029,"arcs":[[[172,173]],[[174]]]},{"type":"MultiPolygon","id":53009,"arcs":[[[175,176]]]},{"type":"Polygon","id":38005,"arcs":[[-61,-162,177,178,179,-156],[-159]]},{"type":"Polygon","id":30015,"arcs":[[-48,180,181,182,183,-171,-88,-43]]},{"type":"MultiPolygon","id":53061,"arcs":[[[-147,184,185,-173,186,-127]]]},{"type":"Polygon","id":30089,"arcs":[[-17,187,188,189,190,-110,-33]]},{"type":"Polygon","id":27075,"arcs":[[191,192,-135,193]]},{"type":"Polygon","id":38063,"arcs":[[194,195,196,197,-178,-161,-164]]},{"type":"Polygon","id":38035,"arcs":[[-154,198,199,200,-195,-163]]},{"type":"Polygon","id":27119,"arcs":[[201,202,203,204,205,206,207,-199,-153]]},{"type":"Polygon","id":27113,"arcs":[[-169,208,-204,209,-202,-152]]},{"type":"Polygon","id":30083,"arcs":[[210,211,212,213,-142]]},{"type":"Polygon","id":53017,"arcs":[[214,215,-144,-71]]},{"type":"Polygon","id":38053,"arcs":[[-150,216,217,218,219,-211,-130]]},{"type":"MultiPolygon","id":53031,"arcs":[[[220,221,222,-176,223]]]},{"type":"Polygon","id":30099,"arcs":[[-184,224,225,-12,-172]]},{"type":"Polygon","id":30055,"arcs":[[-214,226,227,228,-6,-143]]},{"type":"Polygon","id":16079,"arcs":[[-191,229,230,231,232,233,-111]]},{"type":"Polygon","id":30047,"arcs":[[234,-188,-16]]},{"type":"Polygon","id":53063,"arcs":[[-81,-113,235,236,237,238,-76]]},{"type":"Polygon","id":27029,"arcs":[[239,240,241,-205,-209,-168]]},{"type":"Polygon","id":16055,"arcs":[[-234,242,-236,-112]]},{"type":"Polygon","id":30033,"arcs":[[-229,243,244,245,246,-24,-7]]},{"type":"Polygon","id":27125,"arcs":[[-203,-210]]},{"type":"Polygon","id":53025,"arcs":[[-70,247,248,249,250,251,252,-215]]},{"type":"Polygon","id":53043,"arcs":[[-83,-77,-239,253,254,-248,-69]]},{"type":"Polygon","id":30049,"arcs":[[255,256,257,258,259,-13,-226]]},{"type":"MultiPolygon","id":53035,"arcs":[[[260]],[[261,262,263,264,265]]]},{"type":"Polygon","id":27061,"arcs":[[-140,266,267,-165,-121]]},{"type":"Polygon","id":38055,"arcs":[[268,269,270,271,272,-148,-115,-134]]},{"type":"Polygon","id":38027,"arcs":[[-198,273,274,275,-179]]},{"type":"Polygon","id":38103,"arcs":[[-180,-276,276,277,278,279,-157]]},{"type":"Polygon","id":38083,"arcs":[[-158,-280,280,281,-269,-133]]},{"type":"Polygon","id":38025,"arcs":[[-273,282,283,284,-217,-149]]},{"type":"Polygon","id":30027,"arcs":[[-26,285,286,287,288,289,-181,-47]]},{"type":"Polygon","id":30021,"arcs":[[-213,290,291,-227]]},{"type":"MultiPolygon","id":53033,"arcs":[[[292]],[[-146,293,294,295,-185]]]},{"type":"Polygon","id":30013,"arcs":[[296,297,-256,-225,-183]]},{"type":"Polygon","id":38091,"arcs":[[-201,298,299,300,301,-196]]},{"type":"Polygon","id":38039,"arcs":[[-302,302,303,304,-274,-197]]},{"type":"Polygon","id":38097,"arcs":[[305,306,-299,-200,-208]]},{"type":"MultiPolygon","id":53045,"arcs":[[[307,-265,308,309,310,311,-221]]]},{"type":"Polygon","id":30063,"arcs":[[-15,312,313,314,315,316,317,-189,-235]]},{"type":"Polygon","id":30077,"arcs":[[-260,318,319,320,-313,-14]]},{"type":"Polygon","id":30069,"arcs":[[-247,321,322,-286,-25]]},{"type":"Polygon","id":53037,"arcs":[[-216,-253,323,-294,-145]]},{"type":"Polygon","id":38031,"arcs":[[-305,324,-277,-275]]},{"type":"Polygon","id":38057,"arcs":[[325,326,327,-283,-272]]},{"type":"MultiPolygon","id":53027,"arcs":[[[-312,328,329,330,331,-222]]]},{"type":"Polygon","id":27087,"arcs":[[332,333,-206,-242]]},{"type":"Polygon","id":27107,"arcs":[[-207,-334,334,335,336,-306]]},{"type":"Polygon","id":30061,"arcs":[[-318,337,-230,-190]]},{"type":"Polygon","id":27021,"arcs":[[338,339,340,341,342,343,-166,-268]]},{"type":"Polygon","id":23003,"arcs":[[344,345,346,347,348]]},{"type":"Polygon","id":30045,"arcs":[[-290,349,350,-297,-182]]},{"type":"Polygon","id":16009,"arcs":[[-233,351,352,-237,-243]]},{"type":"Polygon","id":27057,"arcs":[[-344,353,354,-240,-167]]},{"type":"MultiPolygon","id":53053,"arcs":[[[-295,355,356,357,358]],[[-262,359]],[[-309,-264,360]]]},{"type":"Polygon","id":30109,"arcs":[[-220,361,362,363,-291,-212]]},{"type":"Polygon","id":38007,"arcs":[[-285,364,365,366,-218]]},{"type":"Polygon","id":38033,"arcs":[[-367,367,368,-362,-219]]},{"type":"Polygon","id":38043,"arcs":[[369,370,371,372,-281,-279]]},{"type":"Polygon","id":38093,"arcs":[[-304,373,374,375,-370,-278,-325]]},{"type":"Polygon","id":38015,"arcs":[[-373,376,377,378,-270,-282]]},{"type":"Polygon","id":38065,"arcs":[[-379,379,-326,-271]]},{"type":"Polygon","id":53001,"arcs":[[380,381,-249,-255]]},{"type":"Polygon","id":53075,"arcs":[[-238,-353,382,383,384,385,386,387,-381,-254]]},{"type":"Polygon","id":38003,"arcs":[[-301,388,389,390,-374,-303]]},{"type":"Polygon","id":38017,"arcs":[[-307,-337,391,392,393,-389,-300]]},{"type":"Polygon","id":53067,"arcs":[[-358,394,-329,-311,395]]},{"type":"Polygon","id":30079,"arcs":[[-364,396,397,-244,-228,-292]]},{"type":"Polygon","id":27005,"arcs":[[-355,398,399,400,-335,-333,-241]]},{"type":"Polygon","id":27027,"arcs":[[-401,401,402,403,-392,-336]]},{"type":"Polygon","id":16057,"arcs":[[-232,404,405,-383,-352]]},{"type":"Polygon","id":53077,"arcs":[[-252,406,407,408,409,-356,-324]]},{"type":"Polygon","id":30059,"arcs":[[-351,410,411,412,413,414,-257,-298]]},{"type":"Polygon","id":27001,"arcs":[[-139,415,416,417,418,419,-339,-267]]},{"type":"Polygon","id":26131,"arcs":[[420,421,422,423]]},{"type":"Polygon","id":38089,"arcs":[[-328,424,425,426,427,-365,-284]]},{"type":"Polygon","id":38059,"arcs":[[-378,428,429,430,-425,-327,-380]]},{"type":"Polygon","id":26013,"arcs":[[431,432,433,434]]},{"type":"Polygon","id":16035,"arcs":[[-338,-317,435,436,437,-405,-231]]},{"type":"Polygon","id":30017,"arcs":[[438,439,440,441,-245,-398]]},{"type":"Polygon","id":30087,"arcs":[[-442,442,443,444,445,446,-322,-246]]},{"type":"Polygon","id":30039,"arcs":[[447,448,-314,-321]]},{"type":"Polygon","id":27159,"arcs":[[-343,449,450,-399,-354]]},{"type":"Polygon","id":27035,"arcs":[[-420,451,452,-340]]},{"type":"MultiPolygon","id":53049,"arcs":[[[453,454,455,-331]]]},{"type":"Polygon","id":53041,"arcs":[[-395,-357,-410,456,457,458,-454,-330]]},{"type":"Polygon","id":30007,"arcs":[[-415,459,460,-258]]},{"type":"Polygon","id":27017,"arcs":[[461,462,-416,-138]]},{"type":"Polygon","id":26053,"arcs":[[463,464,465,466,-422]]},{"type":"Polygon","id":30065,"arcs":[[-447,467,468,-287,-323]]},{"type":"Polygon","id":26095,"arcs":[[469,470,471,472,473]]},{"type":"Polygon","id":30037,"arcs":[[-469,474,475,476,477,-288]]},{"type":"Polygon","id":30107,"arcs":[[-289,-478,478,-411,-350]]},{"type":"Polygon","id":53021,"arcs":[[479,480,481,-250,-382,-388]]},{"type":"Polygon","id":53005,"arcs":[[482,483,484,485,-407,-251,-482]]},{"type":"Polygon","id":27111,"arcs":[[-451,486,487,488,489,-402,-400]]},{"type":"Polygon","id":38037,"arcs":[[490,491,492,-426,-431]]},{"type":"Polygon","id":53023,"arcs":[[493,494,495,-386]]},{"type":"Polygon","id":30025,"arcs":[[-369,496,497,498,499,-439,-397,-363]]},{"type":"Polygon","id":16049,"arcs":[[500,501,502,503,504,505,506,-436,-316]]},{"type":"Polygon","id":30081,"arcs":[[-449,507,508,509,-501,-315]]},{"type":"Polygon","id":38029,"arcs":[[-372,510,511,512,513,-429,-377]]},{"type":"Polygon","id":38047,"arcs":[[-376,514,515,-511,-371]]},{"type":"Polygon","id":16069,"arcs":[[-438,516,-506,517,518,-384,-406]]},{"type":"Polygon","id":38087,"arcs":[[519,520,521,-497,-368,-366,-428]]},{"type":"Polygon","id":38045,"arcs":[[522,523,524,-515,-375,-391]]},{"type":"Polygon","id":38041,"arcs":[[-493,525,-520,-427]]},{"type":"Polygon","id":27167,"arcs":[[-490,526,527,528,-403]]},{"type":"Polygon","id":38073,"arcs":[[-394,529,530,531,-523,-390]]},{"type":"Polygon","id":38077,"arcs":[[-529,532,533,534,-530,-393,-404]]},{"type":"Polygon","id":53013,"arcs":[[535,536,537,-480,-387,-496]]},{"type":"Polygon","id":53071,"arcs":[[-538,538,-483,-481]]},{"type":"Polygon","id":55051,"arcs":[[-466,539,540,541,542]]},{"type":"Polygon","id":23025,"arcs":[[543,544,545,546,547,548,-348]]},{"type":"Polygon","id":23021,"arcs":[[549,-544,-347]]},{"type":"Polygon","id":30043,"arcs":[[-461,550,551,552,553,-319,-259]]},{"type":"Polygon","id":26153,"arcs":[[-472,554,555,556,557]]},{"type":"Polygon","id":30111,"arcs":[[558,559,560,561,-475,-468,-446]]},{"type":"Polygon","id":30103,"arcs":[[562,-559,-445]]},{"type":"Polygon","id":16061,"arcs":[[-437,-507,-517]]},{"type":"Polygon","id":53003,"arcs":[[-519,563,-494,-385]]},{"type":"Polygon","id":38085,"arcs":[[-514,564,565,-491,-430]]},{"type":"Polygon","id":26071,"arcs":[[-433,566,567,568,569,570,-464,-421,571]]},{"type":"Polygon","id":27115,"arcs":[[572,573,574,575,-417,-463]]},{"type":"Polygon","id":23019,"arcs":[[576,577,578,579,-545,-550,-346]]},{"type":"Polygon","id":53059,"arcs":[[-409,580,581,582,583,584,-457]]},{"type":"Polygon","id":53015,"arcs":[[-585,585,586,587,588,-458]]},{"type":"MultiPolygon","id":53069,"arcs":[[[-459,-589,589,-455]]]},{"type":"Polygon","id":27153,"arcs":[[-342,590,591,592,-487,-450]]},{"type":"Polygon","id":27097,"arcs":[[-453,593,594,595,-591,-341]]},{"type":"Polygon","id":55125,"arcs":[[596,597,-540,-465,-571,598]]},{"type":"MultiPolygon","id":41007,"arcs":[[[599,600,601]]]},{"type":"Polygon","id":38001,"arcs":[[-492,-566,602,603,604,605,-521,-526]]},{"type":"Polygon","id":38081,"arcs":[[-535,606,607,608,-531]]},{"type":"Polygon","id":38051,"arcs":[[-525,609,610,611,-512,-516]]},{"type":"Polygon","id":38021,"arcs":[[-532,-609,612,613,-610,-524]]},{"type":"Polygon","id":38011,"arcs":[[-606,614,-498,-522]]},{"type":"Polygon","id":30023,"arcs":[[-554,615,616,-508,-448,-320]]},{"type":"Polygon","id":26043,"arcs":[[617,618,619,-568,620]]},{"type":"Polygon","id":27095,"arcs":[[621,622,623,624,-594,-452,-419]]},{"type":"Polygon","id":30097,"arcs":[[-477,625,626,-412,-479]]},{"type":"Polygon","id":30031,"arcs":[[-414,627,628,629,630,631,-551,-460]]},{"type":"Polygon","id":30067,"arcs":[[-627,632,633,634,-628,-413]]},{"type":"Polygon","id":30093,"arcs":[[635,636,-616,-553]]},{"type":"MultiPolygon","id":41009,"arcs":[[[637,638,639,-600,640,-587]]]},{"type":"Polygon","id":27065,"arcs":[[-576,641,-622,-418]]},{"type":"Polygon","id":55013,"arcs":[[642,643,644,645,-574,646]]},{"type":"Polygon","id":55113,"arcs":[[647,648,649,650,651]]},{"type":"Polygon","id":55129,"arcs":[[-651,652,-643,653]]},{"type":"Polygon","id":30011,"arcs":[[654,655,656,657,-440,-500]]},{"type":"Polygon","id":30095,"arcs":[[-562,658,-633,-626,-476]]},{"type":"Polygon","id":27051,"arcs":[[-489,659,660,661,-527]]},{"type":"Polygon","id":27041,"arcs":[[-593,662,663,-660,-488]]},{"type":"Polygon","id":55041,"arcs":[[664,665,666,667,668,-599,-570]]},{"type":"Polygon","id":53011,"arcs":[[-584,669,-638,-586]]},{"type":"Polygon","id":53039,"arcs":[[-486,670,671,672,673,674,-581,-408]]},{"type":"Polygon","id":30003,"arcs":[[-444,675,676,677,678,-560,-563]]},{"type":"Polygon","id":27155,"arcs":[[-662,679,680,681,-533,-528]]},{"type":"Polygon","id":55037,"arcs":[[-620,682,-665,-569]]},{"type":"Polygon","id":41059,"arcs":[[-537,683,684,685,686,-484,-539]]},{"type":"Polygon","id":41063,"arcs":[[-495,-564,-518,-505,687,688,689,-684,-536]]},{"type":"Polygon","id":26109,"arcs":[[690,691,692,-618,693]]},{"type":"Polygon","id":55099,"arcs":[[-598,694,695,696,697,-649,698,-541]]},{"type":"Polygon","id":46105,"arcs":[[699,700,701,702,703,-604]]},{"type":"Polygon","id":46031,"arcs":[[704,705,706,707,-700,-603,-565]]},{"type":"Polygon","id":46063,"arcs":[[-605,-704,708,-655,-499,-615]]},{"type":"Polygon","id":46021,"arcs":[[-612,709,710,-705,-513]]},{"type":"Polygon","id":30001,"arcs":[[-637,711,712,713,714,-509,-617]]},{"type":"Polygon","id":46089,"arcs":[[-614,715,716,717,-710,-611]]},{"type":"Polygon","id":46013,"arcs":[[-608,718,719,720,721,722,-716,-613]]},{"type":"Polygon","id":46109,"arcs":[[-682,723,724,725,726,-534]]},{"type":"Polygon","id":46091,"arcs":[[-727,727,-719,-607]]},{"type":"Polygon","id":41049,"arcs":[[-687,728,729,730,-671,-485]]},{"type":"Polygon","id":55085,"arcs":[[-669,731,732,-695,-597]]},{"type":"Polygon","id":41061,"arcs":[[733,734,-685,-690]]},{"type":"Polygon","id":30057,"arcs":[[-632,735,-712,-636,-552]]},{"type":"Polygon","id":27009,"arcs":[[-625,736,737,-595]]},{"type":"Polygon","id":41021,"arcs":[[738,739,740,-672,-731]]},{"type":"Polygon","id":30075,"arcs":[[-658,741,742,743,-676,-443,-441]]},{"type":"Polygon","id":26031,"arcs":[[744,745,746,747,748,749]]},{"type":"MultiPolygon","id":41057,"arcs":[[[750,751,752,753,754,-601]]]},{"type":"Polygon","id":41067,"arcs":[[755,756,757,-751,-640]]},{"type":"Polygon","id":27145,"arcs":[[-738,758,759,760,761,762,-663,-592,-596]]},{"type":"Polygon","id":27149,"arcs":[[763,764,765,-680,-661]]},{"type":"Polygon","id":27121,"arcs":[[-763,766,767,-764,-664]]},{"type":"Polygon","id":41055,"arcs":[[768,-673,-741]]},{"type":"Polygon","id":27059,"arcs":[[769,770,771,-623,-642]]},{"type":"Polygon","id":27025,"arcs":[[-646,772,773,774,-770,-575]]},{"type":"Polygon","id":55095,"arcs":[[775,776,777,-773,-645]]},{"type":"Polygon","id":41051,"arcs":[[-670,-583,778,779,-756,-639]]},{"type":"Polygon","id":41027,"arcs":[[780,781,-779,-582,-675]]},{"type":"Polygon","id":41065,"arcs":[[-769,-740,782,783,784,785,-781,-674]]},{"type":"Polygon","id":16059,"arcs":[[-715,786,787,788,789,-502,-510]]},{"type":"MultiPolygon","id":23029,"arcs":[[[790,-577,-345,791]]]},{"type":"Polygon","id":23007,"arcs":[[792,793,794,795,-548]]},{"type":"Polygon","id":26141,"arcs":[[796,797,-745,798]]},{"type":"Polygon","id":55005,"arcs":[[-653,799,800,801,-776,-644]]},{"type":"Polygon","id":55107,"arcs":[[-698,802,803,-800,-650]]},{"type":"Polygon","id":30009,"arcs":[[-679,804,805,-634,-659,-561]]},{"type":"Polygon","id":46129,"arcs":[[-718,806,807,808,-706,-711]]},{"type":"Polygon","id":46045,"arcs":[[-723,809,810,-807,-717]]},{"type":"Polygon","id":46037,"arcs":[[-728,-726,811,812,813,814,-720]]},{"type":"Polygon","id":27011,"arcs":[[-681,-766,815,816,817,-724]]},{"type":"Polygon","id":27141,"arcs":[[-624,-772,818,819,820,-759,-737]]},{"type":"Polygon","id":55069,"arcs":[[821,822,823,-696,-733]]},{"type":"Polygon","id":46041,"arcs":[[-809,824,825,826,827,-707]]},{"type":"Polygon","id":46137,"arcs":[[-828,828,829,-701,-708]]},{"type":"Polygon","id":55067,"arcs":[[-668,830,831,832,833,-822,-732]]},{"type":"Polygon","id":41005,"arcs":[[-782,-786,834,835,-757,-780]]},{"type":"Polygon","id":41071,"arcs":[[-836,836,837,-752,-758]]},{"type":"Polygon","id":27171,"arcs":[[-821,838,839,840,841,-760]]},{"type":"Polygon","id":27003,"arcs":[[-775,842,843,844,-819,-771]]},{"type":"Polygon","id":27067,"arcs":[[845,846,847,848,-767,-762]]},{"type":"Polygon","id":27151,"arcs":[[-849,849,850,-816,-765,-768]]},{"type":"Polygon","id":55119,"arcs":[[-824,851,852,853,-803,-697]]},{"type":"Polygon","id":55083,"arcs":[[854,855,856,857,858,859,860,-831,-667]]},{"type":"Polygon","id":23017,"arcs":[[-795,861,862,863,864,865,866]]},{"type":"Polygon","id":46051,"arcs":[[-818,867,868,869,-812,-725]]},{"type":"Polygon","id":27093,"arcs":[[-842,870,871,-846,-761]]},{"type":"Polygon","id":33007,"arcs":[[872,873,874,875,-866]]},{"type":"Polygon","id":27163,"arcs":[[-778,876,877,878,879,-843,-774]]},{"type":"Polygon","id":55017,"arcs":[[-854,880,881,882,-801,-804]]},{"type":"Polygon","id":41047,"arcs":[[-835,-785,883,884,885,-837]]},{"type":"Polygon","id":16003,"arcs":[[886,887,888,889,-688,-504]]},{"type":"Polygon","id":27073,"arcs":[[-851,890,891,892,-868,-817]]},{"type":"MultiPolygon","id":23009,"arcs":[[[893]],[[894]],[[895,-578,-791]]]},{"type":"Polygon","id":46107,"arcs":[[-811,896,897,898,-825,-808]]},{"type":"Polygon","id":46049,"arcs":[[-722,899,900,901,-897,-810]]},{"type":"Polygon","id":27053,"arcs":[[-820,-845,902,903,904,905,-839]]},{"type":"Polygon","id":46115,"arcs":[[-815,906,907,908,-900,-721]]},{"type":"Polygon","id":16085,"arcs":[[-790,909,910,911,-887,-503]]},{"type":"Polygon","id":46019,"arcs":[[-703,912,913,914,-656,-709]]},{"type":"Polygon","id":55109,"arcs":[[915,916,-877,-777]]},{"type":"Polygon","id":55033,"arcs":[[-883,917,918,919,-916,-802]]},{"type":"Polygon","id":26009,"arcs":[[920,921,922,923,924]]},{"type":"Polygon","id":26137,"arcs":[[925,926,-921,927,-747]]},{"type":"Polygon","id":26119,"arcs":[[928,929,-926,-746,-798]]},{"type":"Polygon","id":46025,"arcs":[[930,931,932,933,-907,-814]]},{"type":"Polygon","id":46029,"arcs":[[-870,934,935,-931,-813]]},{"type":"Polygon","id":27023,"arcs":[[-848,936,937,-891,-850]]},{"type":"Polygon","id":27123,"arcs":[[-880,938,-903,-844]]},{"type":"Polygon","id":55073,"arcs":[[-823,-834,939,940,941,942,-852]]},{"type":"Polygon","id":55078,"arcs":[[-861,943,-832]]},{"type":"Polygon","id":41001,"arcs":[[-890,944,945,946,-734,-689]]},{"type":"Polygon","id":41053,"arcs":[[-886,947,948,949,-753,-838]]},{"type":"Polygon","id":41069,"arcs":[[-730,950,951,952,-783,-739]]},{"type":"Polygon","id":41041,"arcs":[[-950,953,954,955,-754]]},{"type":"Polygon","id":46093,"arcs":[[-830,956,957,958,-913,-702]]},{"type":"Polygon","id":55019,"arcs":[[-943,959,960,961,-881,-853]]},{"type":"Polygon","id":55115,"arcs":[[-944,-860,962,963,964,-940,-833]]},{"type":"Polygon","id":50011,"arcs":[[965,966,967,968,969]]},{"type":"Polygon","id":50009,"arcs":[[970,971,972,973,-875]]},{"type":"Polygon","id":50013,"arcs":[[974,975,976,-969]]},{"type":"Polygon","id":36019,"arcs":[[977,978,979,980,-976]]},{"type":"Polygon","id":50019,"arcs":[[-973,981,982,-966,983]]},{"type":"Polygon","id":56029,"arcs":[[984,985,986,987,988,-629,-635,-806]]},{"type":"Polygon","id":36089,"arcs":[[989,990,991,992,993,994]]},{"type":"Polygon","id":56003,"arcs":[[995,996,997,-985,-805,-678]]},{"type":"Polygon","id":56005,"arcs":[[998,999,1000,1001,1002,-743]]},{"type":"Polygon","id":56033,"arcs":[[-744,-1003,1003,-996,-677]]},{"type":"Polygon","id":36033,"arcs":[[-980,1004,1005,-990,1006]]},{"type":"Polygon","id":56011,"arcs":[[-657,-915,1007,1008,-999,-742]]},{"type":"Polygon","id":41023,"arcs":[[-735,-947,1009,1010,1011,-951,-729,-686]]},{"type":"Polygon","id":27085,"arcs":[[-841,1012,1013,1014,-871]]},{"type":"Polygon","id":27019,"arcs":[[-906,1015,1016,-1013,-840]]},{"type":"Polygon","id":46039,"arcs":[[-893,1017,1018,1019,1020,-935,-869]]},{"type":"Polygon","id":27173,"arcs":[[1021,1022,1023,1024,-1018,-892,-938]]},{"type":"Polygon","id":27037,"arcs":[[-879,1025,1026,1027,1028,-904,-939]]},{"type":"Polygon","id":46119,"arcs":[[1029,1030,1031,-826,-899]]},{"type":"Polygon","id":46069,"arcs":[[-902,1032,1033,1034,1035,-1030,-898]]},{"type":"Polygon","id":46059,"arcs":[[-909,1036,1037,1038,-1033,-901]]},{"type":"Polygon","id":27129,"arcs":[[-872,-1015,1039,1040,1041,1042,-1022,-937,-847]]},{"type":"Polygon","id":16037,"arcs":[[1043,1044,1045,1046,-910,-789]]},{"type":"Polygon","id":55093,"arcs":[[-920,1047,1048,-1026,-878,-917]]},{"type":"Polygon","id":26001,"arcs":[[1049,1050,1051,1052]]},{"type":"Polygon","id":26079,"arcs":[[1053,1054,1055,-922]]},{"type":"Polygon","id":26039,"arcs":[[1056,1057,-1054,-927]]},{"type":"Polygon","id":55035,"arcs":[[-962,1058,1059,1060,1061,-918,-882]]},{"type":"Polygon","id":26135,"arcs":[[-1052,1062,-1057,-930]]},{"type":"Polygon","id":16087,"arcs":[[1063,1064,1065,-945,-889]]},{"type":"Polygon","id":41031,"arcs":[[-953,1066,1067,1068,-884,-784]]},{"type":"Polygon","id":27139,"arcs":[[-1029,1069,1070,1071,-1016,-905]]},{"type":"Polygon","id":46057,"arcs":[[-1021,1072,1073,-932,-936]]},{"type":"Polygon","id":50015,"arcs":[[1074,1075,1076,-967,-983]]},{"type":"Polygon","id":41043,"arcs":[[-1069,1077,1078,1079,-948,-885]]},{"type":"Polygon","id":46117,"arcs":[[-1032,1080,1081,1082,1083,-827]]},{"type":"Polygon","id":26019,"arcs":[[1084,1085,1086,1087]]},{"type":"Polygon","id":50005,"arcs":[[1088,1089,1090,-1075,-982,-972]]},{"type":"MultiPolygon","id":23027,"arcs":[[[-580,1091,1092,1093,1094,-546]]]},{"type":"Polygon","id":16043,"arcs":[[1095,1096,1097,1098,1099,-713,-736,-631]]},{"type":"Polygon","id":46055,"arcs":[[1100,1101,1102,-957,-829,-1084]]},{"type":"Polygon","id":50007,"arcs":[[-1077,1103,1104,1105,-978,-975,-968]]},{"type":"Polygon","id":41003,"arcs":[[-1080,1106,-954,-949]]},{"type":"Polygon","id":23011,"arcs":[[1107,1108,1109,1110,-793,-547,-1095]]},{"type":"Polygon","id":27143,"arcs":[[-1017,-1072,1111,1112,-1040,-1014]]},{"type":"Polygon","id":27049,"arcs":[[1113,1114,1115,1116,1117,-1027,-1049]]},{"type":"Polygon","id":27127,"arcs":[[1118,1119,1120,1121,-1023,-1043]]},{"type":"Polygon","id":55097,"arcs":[[1122,1123,1124,1125,-941]]},{"type":"Polygon","id":55141,"arcs":[[-1126,1126,1127,1128,-960,-942]]},{"type":"MultiPolygon","id":55009,"arcs":[[[-857,1129]],[[-859,1130,1131,1132,1133,1134,-963]]]},{"type":"Polygon","id":55091,"arcs":[[-1062,1135,1136,-1114,-1048,-919]]},{"type":"Polygon","id":55135,"arcs":[[1137,1138,1139,-1123,-965]]},{"type":"Polygon","id":55061,"arcs":[[1140,1141,-1132,1142,1143]]},{"type":"Polygon","id":56039,"arcs":[[1144,1145,1146,1147,1148,-1096,-630,-989]]},{"type":"Polygon","id":46005,"arcs":[[-934,1149,1150,1151,-1037,-908]]},{"type":"Polygon","id":27081,"arcs":[[1152,1153,1154,-1019,-1025]]},{"type":"Polygon","id":27083,"arcs":[[-1122,1155,1156,-1153,-1024]]},{"type":"Polygon","id":46081,"arcs":[[-959,1157,1158,-1008,-914]]},{"type":"Polygon","id":55011,"arcs":[[-1061,1159,1160,1161,-1136]]},{"type":"Polygon","id":55121,"arcs":[[1162,1163,1164,-1160,-1060]]},{"type":"Polygon","id":55053,"arcs":[[-961,-1129,1165,1166,1167,-1163,-1059]]},{"type":"Polygon","id":55087,"arcs":[[-964,-1135,1168,1169,-1138]]},{"type":"Polygon","id":16033,"arcs":[[-1100,1170,1171,-787,-714]]},{"type":"Polygon","id":56019,"arcs":[[-1002,1172,1173,1174,-997,-1004]]},{"type":"Polygon","id":41013,"arcs":[[-952,-1012,1175,1176,-1067]]},{"type":"Polygon","id":46065,"arcs":[[-1036,1177,-1081,-1031]]},{"type":"Polygon","id":36031,"arcs":[[1178,1179,1180,1181,-1005,-979,-1106]]},{"type":"Polygon","id":27079,"arcs":[[1182,1183,1184,1185,-1112,-1071]]},{"type":"Polygon","id":27131,"arcs":[[-1028,-1118,1186,1187,1188,-1183,-1070]]},{"type":"Polygon","id":46077,"arcs":[[-1074,1189,1190,1191,1192,-1150,-933]]},{"type":"Polygon","id":46011,"arcs":[[-1155,1193,1194,1195,-1190,-1073,-1020]]},{"type":"Polygon","id":26101,"arcs":[[1196,1197,1198,1199,-1086]]},{"type":"Polygon","id":26165,"arcs":[[1200,1201,1202,-1197,1203]]},{"type":"Polygon","id":26143,"arcs":[[1204,1205,1206,1207,-1058]]},{"type":"Polygon","id":26113,"arcs":[[-1208,1208,1209,-1201,-1055]]},{"type":"Polygon","id":26069,"arcs":[[1210,1211,1212,-1051]]},{"type":"Polygon","id":26129,"arcs":[[-1213,1213,1214,-1205,-1063]]},{"type":"Polygon","id":16045,"arcs":[[-912,1215,1216,1217,1218,-1064,-888]]},{"type":"Polygon","id":46103,"arcs":[[-1103,1219,1220,1221,1222,-1158,-958]]},{"type":"Polygon","id":50023,"arcs":[[1223,1224,-1104,-1076,-1091]]},{"type":"Polygon","id":27015,"arcs":[[1225,1226,1227,1228,-1119,-1042]]},{"type":"Polygon","id":23001,"arcs":[[1229,1230,-862,-794,-1111]]},{"type":"Polygon","id":27103,"arcs":[[1231,-1226,-1041,-1113,-1186]]},{"type":"Polygon","id":27157,"arcs":[[-1137,-1162,1232,1233,-1115]]},{"type":"Polygon","id":41045,"arcs":[[-1066,1234,1235,1236,1237,1238,-1010,-946]]},{"type":"Polygon","id":33009,"arcs":[[1239,1240,1241,1242,1243,1244,-1089,-971,-874]]},{"type":"Polygon","id":41017,"arcs":[[-1177,1245,1246,1247,1248,-1078,-1068]]},{"type":"MultiPolygon","id":36045,"arcs":[[[1249,-994,1250,1251,1252,1253,1254]]]},{"type":"MultiPolygon","id":23013,"arcs":[[[1255,1256,-1093]]]},{"type":"Polygon","id":16015,"arcs":[[-1047,1257,1258,-1216,-911]]},{"type":"MultiPolygon","id":23015,"arcs":[[[-1094,-1257,1259,1260,1261,-1108]]]},{"type":"Polygon","id":55071,"arcs":[[-1142,1262,1263,1264,-1133]]},{"type":"Polygon","id":50001,"arcs":[[-1225,1265,1266,1267,1268,-1179,-1105]]},{"type":"MultiPolygon","id":41039,"arcs":[[[-1249,1269,1270,1271,-955,-1107,-1079]]]},{"type":"Polygon","id":33003,"arcs":[[-865,1272,1273,1274,-1240,-873]]},{"type":"Polygon","id":27013,"arcs":[[-1185,1275,1276,1277,1278,-1227,-1232]]},{"type":"Polygon","id":55057,"arcs":[[1279,1280,1281,1282,-1166,-1128]]},{"type":"Polygon","id":55001,"arcs":[[-1125,1283,1284,1285,-1280,-1127]]},{"type":"Polygon","id":55137,"arcs":[[-1140,1286,1287,1288,-1284,-1124]]},{"type":"Polygon","id":55139,"arcs":[[1289,1290,1291,-1287,-1139,-1170]]},{"type":"Polygon","id":55015,"arcs":[[-1134,-1265,1292,1293,-1290,-1169]]},{"type":"Polygon","id":16023,"arcs":[[-1172,1294,1295,1296,-1044,-788]]},{"type":"Polygon","id":50017,"arcs":[[-1245,1297,-1266,-1224,-1090]]},{"type":"Polygon","id":36049,"arcs":[[1298,1299,-1251,-993,1300]]},{"type":"Polygon","id":46085,"arcs":[[1301,1302,1303,1304,1305,-1082,-1178,-1035,1306]]},{"type":"Polygon","id":27117,"arcs":[[-1157,1307,1308,1309,-1194,-1154]]},{"type":"Polygon","id":27101,"arcs":[[-1121,1310,1311,1312,-1308,-1156]]},{"type":"Polygon","id":46073,"arcs":[[-1152,1313,1314,1315,1316,-1038]]},{"type":"Polygon","id":27147,"arcs":[[1317,1318,1319,1320,-1188]]},{"type":"Polygon","id":27039,"arcs":[[1321,1322,-1318,-1187,-1117]]},{"type":"Polygon","id":46101,"arcs":[[-1310,1323,1324,-1195]]},{"type":"Polygon","id":27161,"arcs":[[-1321,1325,1326,-1276,-1184,-1189]]},{"type":"Polygon","id":46017,"arcs":[[-1317,1327,-1307,-1034,-1039]]},{"type":"Polygon","id":46111,"arcs":[[-1193,1328,1329,1330,1331,-1314,-1151]]},{"type":"Polygon","id":27109,"arcs":[[-1234,1332,1333,1334,-1322,-1116]]},{"type":"Polygon","id":27033,"arcs":[[-1229,1335,1336,1337,-1311,-1120]]},{"type":"Polygon","id":46079,"arcs":[[-1196,-1325,1338,1339,1340,-1191]]},{"type":"Polygon","id":46097,"arcs":[[-1341,1341,1342,-1329,-1192]]},{"type":"Polygon","id":27169,"arcs":[[-1161,-1165,1343,1344,1345,-1333,-1233]]},{"type":"Polygon","id":56045,"arcs":[[-1159,-1223,1346,1347,1348,-1000,-1009]]},{"type":"Polygon","id":26105,"arcs":[[1349,1350,1351,-1199]]},{"type":"MultiPolygon","id":23005,"arcs":[[[-1231,1352,1353,1354,1355,1356,-863]]]},{"type":"Polygon","id":46075,"arcs":[[-1306,1357,1358,-1101,-1083]]},{"type":"Polygon","id":56043,"arcs":[[-1175,1359,1360,1361,-986,-998]]},{"type":"MultiPolygon","id":23023,"arcs":[[[-1355,1362]],[[1363,1364,-1261,1365]],[[1366,-1353,-1230,-1110]]]},{"type":"Polygon","id":26085,"arcs":[[-1198,-1203,1367,1368,-1350]]},{"type":"Polygon","id":26133,"arcs":[[-1210,1369,1370,-1368,-1202]]},{"type":"Polygon","id":26035,"arcs":[[-1207,1371,1372,-1370,-1209]]},{"type":"Polygon","id":26051,"arcs":[[1373,1374,1375,-1372,-1206,-1215]]},{"type":"Polygon","id":55081,"arcs":[[-1283,1376,1377,-1167]]},{"type":"Polygon","id":16075,"arcs":[[-1219,1378,-1235,-1065]]},{"type":"Polygon","id":36041,"arcs":[[1379,1380,1381,1382,-991,-1006,-1182]]},{"type":"Polygon","id":27165,"arcs":[[-1279,1383,1384,-1336,-1228]]},{"type":"Polygon","id":16039,"arcs":[[-1046,1385,1386,1387,1388,1389,1390,-1258]]},{"type":"Polygon","id":36043,"arcs":[[-1383,1391,1392,1393,1394,-1301,-992]]},{"type":"Polygon","id":55063,"arcs":[[-1168,-1378,1395,1396,-1344,-1164]]},{"type":"Polygon","id":56017,"arcs":[[-1362,1397,-987]]},{"type":"Polygon","id":16051,"arcs":[[-1099,1398,1399,1400,-1295,-1171]]},{"type":"Polygon","id":41025,"arcs":[[-1239,1401,1402,1403,-1246,-1176,-1011]]},{"type":"Polygon","id":56013,"arcs":[[-1398,-1361,1404,1405,1406,1407,-1145,-988]]},{"type":"Polygon","id":26017,"arcs":[[1408,1409,1410,1411,-1375,1412]]},{"type":"Polygon","id":46071,"arcs":[[-1359,1413,1414,1415,-1220,-1102]]},{"type":"Polygon","id":16013,"arcs":[[-1297,1416,1417,1418,1419,1420,1421,-1386,-1045]]},{"type":"Polygon","id":16081,"arcs":[[-1149,1422,1423,-1097]]},{"type":"Polygon","id":55047,"arcs":[[-1292,1424,1425,1426,1427,-1288]]},{"type":"Polygon","id":55077,"arcs":[[-1428,1428,-1285,-1289]]},{"type":"Polygon","id":50027,"arcs":[[-1244,1429,1430,1431,1432,-1267,-1298]]},{"type":"MultiPolygon","id":41019,"arcs":[[[1433,1434,1435,1436,1437,1438,-1271]]]},{"type":"Polygon","id":55039,"arcs":[[1439,1440,1441,-1425,-1291,-1294]]},{"type":"Polygon","id":46003,"arcs":[[-1332,1442,1443,1444,1445,-1315]]},{"type":"Polygon","id":46015,"arcs":[[-1446,1446,-1302,-1328,-1316]]},{"type":"Polygon","id":16065,"arcs":[[-1424,1447,-1399,-1098]]},{"type":"Polygon","id":55117,"arcs":[[1448,1449,1450,-1440,-1293,-1264]]},{"type":"Polygon","id":16027,"arcs":[[-1218,1451,1452,-1236,-1379]]},{"type":"Polygon","id":46095,"arcs":[[-1305,1453,1454,-1414,-1358]]},{"type":"Polygon","id":16025,"arcs":[[1455,1456,-1387,-1422]]},{"type":"Polygon","id":50021,"arcs":[[1457,1458,-1268,-1433]]},{"type":"Polygon","id":46033,"arcs":[[1459,1460,1461,-1347,-1222]]},{"type":"Polygon","id":27133,"arcs":[[-1313,1462,1463,1464,-1309]]},{"type":"Polygon","id":27105,"arcs":[[-1338,1465,1466,1467,-1463,-1312]]},{"type":"Polygon","id":27047,"arcs":[[1468,1469,1470,1471,-1326,-1320]]},{"type":"Polygon","id":27099,"arcs":[[-1335,1472,1473,1474,1475,-1469,-1319,-1323]]},{"type":"Polygon","id":27055,"arcs":[[-1397,1476,1477,1478,1479,-1345]]},{"type":"Polygon","id":46035,"arcs":[[1480,1481,1482,-1443,-1331]]},{"type":"Polygon","id":46061,"arcs":[[-1343,1483,1484,-1481,-1330]]},{"type":"Polygon","id":27045,"arcs":[[-1346,-1480,1485,1486,-1473,-1334]]},{"type":"Polygon","id":27063,"arcs":[[-1385,1487,1488,1489,1490,-1466,-1337]]},{"type":"Polygon","id":27043,"arcs":[[-1327,-1472,1491,1492,1493,-1277]]},{"type":"Polygon","id":46099,"arcs":[[1494,1495,1496,1497,-1339,-1324,-1465]]},{"type":"Polygon","id":27091,"arcs":[[-1278,-1494,1498,1499,-1488,-1384]]},{"type":"Polygon","id":46087,"arcs":[[-1340,-1498,1500,1501,-1484,-1342]]},{"type":"Polygon","id":26111,"arcs":[[-1412,1502,1503,1504,-1376]]},{"type":"Polygon","id":26127,"arcs":[[1505,1506,1507,-1351]]},{"type":"Polygon","id":26073,"arcs":[[-1505,1508,1509,1510,-1373]]},{"type":"MultiPolygon","id":23031,"arcs":[[[1511,1512,-1273,-864,-1357]]]},{"type":"Polygon","id":26107,"arcs":[[-1511,1513,1514,-1371]]},{"type":"Polygon","id":26123,"arcs":[[-1515,1515,1516,1517,-1506,-1369]]},{"type":"Polygon","id":36115,"arcs":[[-1459,1518,1519,1520,1521,-1180,-1269]]},{"type":"Polygon","id":16001,"arcs":[[-1259,-1391,1522,-1452,-1217]]},{"type":"Polygon","id":36113,"arcs":[[1523,-1380,-1181,-1522]]},{"type":"Polygon","id":46123,"arcs":[[1524,1525,1526,-1454,-1304]]},{"type":"Polygon","id":33001,"arcs":[[1527,1528,-1241,-1275]]},{"type":"Polygon","id":26157,"arcs":[[1529,1530,1531,1532,1533,-1410,1534]]},{"type":"Polygon","id":55123,"arcs":[[1535,1536,1537,1538,-1477,-1396,-1377,-1282]]},{"type":"MultiPolygon","id":36075,"arcs":[[[-1254,1539]],[[-1300,1540,1541,1542,1543,1544,-1252]]]},{"type":"Polygon","id":46113,"arcs":[[1545,1546,1547,1548,-1460,-1221,-1416]]},{"type":"Polygon","id":26151,"arcs":[[1549,1550,-1531,1551,1552]]},{"type":"Polygon","id":16073,"arcs":[[-1523,-1390,1553,1554,1555,-1237,-1453]]},{"type":"Polygon","id":55021,"arcs":[[1556,1557,1558,-1286,-1429,-1427]]},{"type":"Polygon","id":55111,"arcs":[[-1559,1559,1560,1561,-1536,-1281]]},{"type":"Polygon","id":55027,"arcs":[[1562,1563,1564,1565,-1557,-1426,-1442]]},{"type":"Polygon","id":16019,"arcs":[[-1448,-1423,-1148,1566,1567,1568,-1400]]},{"type":"Polygon","id":16011,"arcs":[[1569,1570,1571,-1417,-1296,-1401,-1569]]},{"type":"Polygon","id":41035,"arcs":[[1572,1573,1574,1575,-1434,-1270,-1248]]},{"type":"Polygon","id":41037,"arcs":[[1576,1577,-1573,-1247,-1404]]},{"type":"Polygon","id":36065,"arcs":[[1578,1579,-1541,-1299,-1395]]},{"type":"Polygon","id":33013,"arcs":[[-1529,1580,1581,1582,1583,-1242]]},{"type":"MultiPolygon","id":41011,"arcs":[[[1584,1585,-1438]]]},{"type":"Polygon","id":33019,"arcs":[[-1584,1586,1587,1588,-1430,-1243]]},{"type":"Polygon","id":33017,"arcs":[[-1513,1589,1590,-1581,-1528,-1274]]},{"type":"Polygon","id":26145,"arcs":[[-1534,1591,1592,1593,-1503,-1411]]},{"type":"Polygon","id":55103,"arcs":[[1594,1595,1596,-1537,-1562]]},{"type":"Polygon","id":55089,"arcs":[[1597,1598,1599,-1450]]},{"type":"Polygon","id":55131,"arcs":[[-1451,-1600,1600,-1563,-1441]]},{"type":"Polygon","id":19189,"arcs":[[1601,1602,1603,-1492,-1471]]},{"type":"Polygon","id":19109,"arcs":[[1604,1605,1606,-1499,-1493,-1604,1607]]},{"type":"Polygon","id":19059,"arcs":[[1608,1609,-1490,1610]]},{"type":"Polygon","id":19063,"arcs":[[1611,-1611,-1489,-1500,-1607]]},{"type":"Polygon","id":19195,"arcs":[[1612,-1602,-1470,-1476,1613]]},{"type":"Polygon","id":19143,"arcs":[[1614,1615,-1467,-1491,-1610]]},{"type":"Polygon","id":56027,"arcs":[[-1462,1616,1617,1618,1619,1620,-1348]]},{"type":"Polygon","id":19131,"arcs":[[1621,1622,-1614,-1475,1623]]},{"type":"Polygon","id":19119,"arcs":[[1624,1625,-1495,-1464,-1468,-1616]]},{"type":"Polygon","id":19089,"arcs":[[1626,1627,-1624,-1474,-1487]]},{"type":"Polygon","id":19005,"arcs":[[-1539,1628,1629,1630,-1478]]},{"type":"Polygon","id":19191,"arcs":[[1631,1632,-1627,-1486,-1479,-1631]]},{"type":"Polygon","id":46083,"arcs":[[-1626,1633,1634,1635,1636,-1496]]},{"type":"Polygon","id":56009,"arcs":[[-1621,1637,1638,1639,1640,-1173,-1001,-1349]]},{"type":"Polygon","id":46023,"arcs":[[-1445,1641,1642,1643,1644,1645,1646,-1447]]},{"type":"Polygon","id":46125,"arcs":[[-1497,-1637,1647,1648,1649,-1501]]},{"type":"Polygon","id":46067,"arcs":[[-1502,-1650,1650,1651,-1643,1652,-1482,-1485]]},{"type":"Polygon","id":56025,"arcs":[[-1174,-1641,1653,-1405,-1360]]},{"type":"Polygon","id":46043,"arcs":[[-1483,-1653,-1642,-1444]]},{"type":"Polygon","id":46053,"arcs":[[-1647,1654,1655,-1525,-1303]]},{"type":"Polygon","id":46047,"arcs":[[-1549,1656,1657,-1617,-1461]]},{"type":"Polygon","id":26121,"arcs":[[-1518,1658,1659,1660,-1507]]},{"type":"Polygon","id":26117,"arcs":[[-1510,1661,1662,1663,-1516,-1514]]},{"type":"Polygon","id":56035,"arcs":[[1664,1665,-1146,-1408]]},{"type":"Polygon","id":26057,"arcs":[[-1504,-1594,1666,1667,-1662,-1509]]},{"type":"Polygon","id":55023,"arcs":[[-1597,1668,1669,-1629,-1538]]},{"type":"Polygon","id":36011,"arcs":[[1670,1671,1672,1673,1674,1675,-1544]]},{"type":"Polygon","id":36091,"arcs":[[-1521,1676,1677,1678,1679,1680,-1381,-1524]]},{"type":"Polygon","id":46007,"arcs":[[1681,1682,-1546,-1415]]},{"type":"Polygon","id":46121,"arcs":[[-1527,1683,-1682,-1455]]},{"type":"Polygon","id":36073,"arcs":[[1684,1685,1686,1687]]},{"type":"Polygon","id":36063,"arcs":[[-1687,1688,1689,1690]]},{"type":"Polygon","id":36055,"arcs":[[1691,1692,1693,1694,-1685,1695]]},{"type":"MultiPolygon","id":36117,"arcs":[[[1696,1697,-1692,1698,-1675]]]},{"type":"Polygon","id":26087,"arcs":[[1699,1700,1701,1702,-1532,-1551]]},{"type":"Polygon","id":56023,"arcs":[[-1666,1703,1704,1705,1706,1707,-1567,-1147]]},{"type":"Polygon","id":50003,"arcs":[[-1432,1708,1709,1710,1711,-1519,-1458]]},{"type":"Polygon","id":55025,"arcs":[[-1566,1712,1713,1714,1715,-1560,-1558]]},{"type":"Polygon","id":26081,"arcs":[[1716,1717,1718,1719,-1659,-1517,-1664]]},{"type":"Polygon","id":36035,"arcs":[[-1681,1720,-1392,-1382]]},{"type":"MultiPolygon","id":33015,"arcs":[[[1721,1722,1723,-1582,-1591]]]},{"type":"Polygon","id":36067,"arcs":[[1724,1725,-1671,-1543]]},{"type":"Polygon","id":50025,"arcs":[[-1589,1726,1727,-1709,-1431]]},{"type":"Polygon","id":19167,"arcs":[[1728,1729,1730,-1634,-1625]]},{"type":"Polygon","id":19141,"arcs":[[1731,1732,-1729,-1615]]},{"type":"Polygon","id":19033,"arcs":[[-1623,1733,1734,1735,-1613]]},{"type":"Polygon","id":19081,"arcs":[[-1736,1736,-1608,-1603]]},{"type":"Polygon","id":19147,"arcs":[[-1606,1737,1738,-1612]]},{"type":"Polygon","id":19041,"arcs":[[-1739,1739,-1732,-1609]]},{"type":"Polygon","id":26049,"arcs":[[-1703,1740,1741,1742,-1592,-1533]]},{"type":"Polygon","id":19037,"arcs":[[-1633,1743,1744,1745,-1628]]},{"type":"Polygon","id":19067,"arcs":[[-1746,1746,-1734,-1622]]},{"type":"Polygon","id":55049,"arcs":[[-1561,-1716,1747,1748,1749,-1595]]},{"type":"Polygon","id":55043,"arcs":[[-1750,1750,1751,1752,1753,-1669,-1596]]},{"type":"Polygon","id":33011,"arcs":[[-1724,1754,1755,1756,1757,-1587,-1583]]},{"type":"Polygon","id":26139,"arcs":[[-1720,1758,1759,-1660]]},{"type":"Polygon","id":16063,"arcs":[[1760,1761,1762,-1456,-1421]]},{"type":"Polygon","id":16047,"arcs":[[-1763,1763,1764,-1388,-1457]]},{"type":"Polygon","id":55055,"arcs":[[1765,1766,1767,-1713,-1565]]},{"type":"Polygon","id":16067,"arcs":[[1768,1769,-1761,-1420]]},{"type":"Polygon","id":55133,"arcs":[[-1601,1770,1771,1772,-1766,-1564]]},{"type":"Polygon","id":55079,"arcs":[[1773,1774,-1771,-1599]]},{"type":"Polygon","id":36053,"arcs":[[-1580,1775,1776,1777,-1725,-1542]]},{"type":"Polygon","id":33005,"arcs":[[-1758,1778,1779,-1727,-1588]]},{"type":"Polygon","id":46135,"arcs":[[1780,1781,1782,1783,-1651,-1649]]},{"type":"Polygon","id":46009,"arcs":[[-1784,1784,-1644,-1652]]},{"type":"Polygon","id":26155,"arcs":[[-1743,1785,1786,1787,-1667,-1593]]},{"type":"Polygon","id":36037,"arcs":[[1788,1789,1790,-1689,-1686,-1695]]},{"type":"Polygon","id":26067,"arcs":[[1791,1792,1793,-1717,-1663]]},{"type":"Polygon","id":26037,"arcs":[[-1788,1794,1795,-1792,-1668]]},{"type":"Polygon","id":16077,"arcs":[[-1572,1796,1797,1798,-1418]]},{"type":"MultiPolygon","id":36029,"arcs":[[[1799]],[[-1791,1800,1801,1802,1803,-1690]]]},{"type":"Polygon","id":46127,"arcs":[[-1731,1804,1805,1806,1807,1808,-1635]]},{"type":"Polygon","id":46027,"arcs":[[-1809,1809,1810,-1781,-1648,-1636]]},{"type":"Polygon","id":19065,"arcs":[[1811,1812,1813,-1744,-1632]]},{"type":"Polygon","id":19043,"arcs":[[-1670,-1754,1814,1815,-1812,-1630]]},{"type":"Polygon","id":36057,"arcs":[[-1680,1816,1817,1818,-1393,-1721]]},{"type":"Polygon","id":36069,"arcs":[[1819,1820,1821,1822,-1693,-1698]]},{"type":"Polygon","id":16005,"arcs":[[1823,1824,1825,-1797,-1571]]},{"type":"Polygon","id":16029,"arcs":[[-1568,-1708,1826,1827,-1824,-1570]]},{"type":"Polygon","id":36099,"arcs":[[1828,1829,1830,-1820,-1697,-1674]]},{"type":"Polygon","id":31165,"arcs":[[1831,1832,1833,-1618,-1658,1834]]},{"type":"Polygon","id":31161,"arcs":[[1835,1836,1837,1838,1839,-1547,1840]]},{"type":"Polygon","id":31045,"arcs":[[1841,-1835,-1657,-1548,-1840]]},{"type":"Polygon","id":31015,"arcs":[[1842,1843,1844,-1655,-1646]]},{"type":"Polygon","id":31103,"arcs":[[-1845,1845,1846,1847,-1526,-1656]]},{"type":"Polygon","id":31031,"arcs":[[-1684,-1848,1848,1849,1850,1851,1852,-1841,-1683]]},{"type":"Polygon","id":41029,"arcs":[[-1576,1853,1854,-1435]]},{"type":"Polygon","id":36051,"arcs":[[-1823,1855,1856,1857,-1789,-1694]]},{"type":"Polygon","id":36083,"arcs":[[-1712,1858,1859,1860,-1677,-1520]]},{"type":"Polygon","id":36093,"arcs":[[1861,1862,-1817,-1679]]},{"type":"Polygon","id":41015,"arcs":[[-1437,1863,1864,1865,-1585]]},{"type":"Polygon","id":16083,"arcs":[[1866,1867,1868,-1554,-1389,-1765]]},{"type":"Polygon","id":19149,"arcs":[[1869,1870,-1805,-1730]]},{"type":"Polygon","id":19021,"arcs":[[1871,1872,1873,-1740]]},{"type":"Polygon","id":19035,"arcs":[[-1874,1874,1875,-1870,-1733]]},{"type":"Polygon","id":19151,"arcs":[[1876,1877,1878,-1872,-1738]]},{"type":"Polygon","id":19197,"arcs":[[1879,1880,1881,1882,-1737]]},{"type":"Polygon","id":19091,"arcs":[[-1883,1883,-1877,-1605]]},{"type":"Polygon","id":19069,"arcs":[[1884,1885,-1880,-1735]]},{"type":"Polygon","id":19023,"arcs":[[1886,1887,1888,-1885,-1747]]},{"type":"Polygon","id":19017,"arcs":[[-1814,1889,-1887,-1745]]},{"type":"Polygon","id":36077,"arcs":[[-1819,1890,1891,1892,-1776,-1579,-1394]]},{"type":"Polygon","id":31089,"arcs":[[1893,1894,1895,1896,1897,1898,-1844]]},{"type":"Polygon","id":26099,"arcs":[[1899,1900,1901,-1701,1902]]},{"type":"Polygon","id":26125,"arcs":[[1903,1904,1905,-1741,-1702,-1902]]},{"type":"MultiPolygon","id":25009,"arcs":[[[1906,1907,1908,-1755,-1723]]]},{"type":"Polygon","id":31107,"arcs":[[-1785,-1783,1909,1910,1911,-1894,-1843,-1645]]},{"type":"Polygon","id":31027,"arcs":[[-1811,1912,1913,1914,-1910,-1782]]},{"type":"Polygon","id":36121,"arcs":[[-1858,1915,1916,-1801,-1790]]},{"type":"Polygon","id":55045,"arcs":[[1917,1918,1919,1920,-1748,-1715]]},{"type":"Polygon","id":16053,"arcs":[[-1770,1921,-1867,-1764,-1762]]},{"type":"Polygon","id":55105,"arcs":[[-1768,1922,1923,1924,-1918,-1714]]},{"type":"Polygon","id":31017,"arcs":[[1925,1926,1927,-1849,-1847]]},{"type":"Polygon","id":55127,"arcs":[[-1773,1928,1929,1930,1931,-1923,-1767]]},{"type":"Polygon","id":55101,"arcs":[[1932,1933,-1929,-1772,-1775]]},{"type":"Polygon","id":36095,"arcs":[[-1863,1934,1935,1936,-1891,-1818]]},{"type":"Polygon","id":36001,"arcs":[[-1861,1937,-1935,-1862,-1678]]},{"type":"Polygon","id":55065,"arcs":[[-1921,1938,1939,-1751,-1749]]},{"type":"Polygon","id":31149,"arcs":[[1940,-1926,-1846,-1899]]},{"type":"Polygon","id":36023,"arcs":[[1941,1942,-1672,-1726,-1778,1943,1944]]},{"type":"Polygon","id":41033,"arcs":[[-1436,-1855,1945,1946,-1864]]},{"type":"Polygon","id":26093,"arcs":[[-1906,1947,1948,1949,-1786,-1742]]},{"type":"Polygon","id":26065,"arcs":[[-1950,1950,1951,-1795,-1787]]},{"type":"Polygon","id":26045,"arcs":[[-1796,-1952,1952,1953,1954,-1793]]},{"type":"Polygon","id":26015,"arcs":[[-1955,1955,1956,1957,-1718,-1794]]},{"type":"Polygon","id":26005,"arcs":[[-1719,-1958,1958,1959,1960,-1759]]},{"type":"Polygon","id":36123,"arcs":[[1961,1962,-1821,-1831]]},{"type":"Polygon","id":31051,"arcs":[[-1808,1963,1964,1965,-1913,-1810]]},{"type":"Polygon","id":25003,"arcs":[[1966,1967,1968,1969,1970,1971,-1859,-1711]]},{"type":"Polygon","id":36017,"arcs":[[-1893,1972,1973,-1944,-1777]]},{"type":"Polygon","id":25011,"arcs":[[1974,-1967,-1710,-1728,-1780,1975]]},{"type":"Polygon","id":25017,"arcs":[[1976,1977,1978,1979,1980,1981,1982,1983,1984,-1756,-1909]]},{"type":"Polygon","id":25027,"arcs":[[-1757,-1985,1985,1986,1987,1988,1989,1990,-1976,-1779]]},{"type":"Polygon","id":16031,"arcs":[[-1799,1991,1992,1993,-1868,-1922,-1769,-1419]]},{"type":"Polygon","id":19061,"arcs":[[1994,1995,1996,1997,-1815,-1753]]},{"type":"Polygon","id":55059,"arcs":[[1998,1999,2000,-1930,-1934]]},{"type":"Polygon","id":19055,"arcs":[[-1998,2001,2002,2003,-1816]]},{"type":"Polygon","id":19187,"arcs":[[-1882,2004,2005,2006,2007,-1878,-1884]]},{"type":"Polygon","id":19019,"arcs":[[-2004,2008,2009,2010,-1813]]},{"type":"Polygon","id":19013,"arcs":[[-2011,2011,2012,2013,-1888,-1890]]},{"type":"Polygon","id":36109,"arcs":[[-1943,2014,2015,2016,-1829,-1673]]},{"type":"Polygon","id":56015,"arcs":[[-1834,2017,2018,2019,2020,-1619]]},{"type":"Polygon","id":56031,"arcs":[[-2021,2021,2022,-1638,-1620]]},{"type":"Polygon","id":16007,"arcs":[[-1707,2023,2024,-1827]]},{"type":"Polygon","id":36101,"arcs":[[-1822,-1963,2025,2026,2027,2028,2029,-1856]]},{"type":"Polygon","id":36013,"arcs":[[2030,2031,2032,2033,-1803]]},{"type":"Polygon","id":19193,"arcs":[[-1876,2034,2035,2036,2037,-1806,-1871]]},{"type":"Polygon","id":19161,"arcs":[[2038,2039,2040,2041,-1873]]},{"type":"Polygon","id":19093,"arcs":[[-2042,2042,-2035,-1875]]},{"type":"Polygon","id":19025,"arcs":[[-2008,2043,2044,-2039,-1879]]},{"type":"Polygon","id":19079,"arcs":[[2045,2046,2047,-2005,-1881]]},{"type":"Polygon","id":19083,"arcs":[[-1886,2048,2049,2050,-2046]]},{"type":"Polygon","id":19075,"arcs":[[-2014,2051,2052,-2049,-1889]]},{"type":"Polygon","id":25015,"arcs":[[-1991,2053,-1968,-1975]]},{"type":"Polygon","id":36097,"arcs":[[-2017,2054,-2026,-1962,-1830]]},{"type":"Polygon","id":36009,"arcs":[[-1917,2055,2056,2057,-2031,-1802]]},{"type":"Polygon","id":31043,"arcs":[[-1807,-2038,2058,-1964]]},{"type":"Polygon","id":36003,"arcs":[[-1857,-2030,2059,2060,-2056,-1916]]},{"type":"Polygon","id":36025,"arcs":[[-1937,2061,2062,2063,2064,2065,-1973,-1892]]},{"type":"Polygon","id":17085,"arcs":[[-1940,2066,2067,2068,-1995,-1752]]},{"type":"Polygon","id":36021,"arcs":[[2069,2070,2071,-1860,-1972]]},{"type":"Polygon","id":17177,"arcs":[[2072,-2067,-1939,-1920,2073,2074]]},{"type":"Polygon","id":17201,"arcs":[[2075,2076,-2074,-1919,-1925]]},{"type":"Polygon","id":16071,"arcs":[[-1826,2077,2078,2079,-1992,-1798]]},{"type":"Polygon","id":17111,"arcs":[[2080,2081,2082,2083,2084,-1931,-2001]]},{"type":"Polygon","id":17007,"arcs":[[-1932,-2085,2085,-2076,-1924]]},{"type":"Polygon","id":17097,"arcs":[[2086,-2081,-2000,2087]]},{"type":"Polygon","id":36039,"arcs":[[2088,-2062,-1936,-1938,-2072]]},{"type":"MultiPolygon","id":25025,"arcs":[[[2089,2090,-1983,2091,-1981]],[[-1979,2092]],[[2093,-1977,-1908]]]},{"type":"Polygon","id":31139,"arcs":[[2094,2095,2096,-1911,-1915]]},{"type":"Polygon","id":31013,"arcs":[[2097,2098,-1832,-1842,-1839]]},{"type":"Polygon","id":31003,"arcs":[[-2097,2099,2100,2101,-1895,-1912]]},{"type":"Polygon","id":26161,"arcs":[[2102,2103,2104,-1948,-1905,2105]]},{"type":"Polygon","id":56007,"arcs":[[-1640,2106,2107,2108,2109,2110,-1406,-1654]]},{"type":"Polygon","id":56001,"arcs":[[-2023,2111,2112,2113,-2107,-1639]]},{"type":"Polygon","id":16041,"arcs":[[-2025,2114,-2078,-1825,-1828]]},{"type":"Polygon","id":26075,"arcs":[[-1949,-2105,2115,2116,2117,-1953,-1951]]},{"type":"Polygon","id":26025,"arcs":[[-2118,2118,2119,2120,-1956,-1954]]},{"type":"Polygon","id":26159,"arcs":[[2121,2122,2123,2124,-1960]]},{"type":"Polygon","id":26077,"arcs":[[-2121,2125,-2122,-1959,-1957]]},{"type":"Polygon","id":36007,"arcs":[[-2066,2126,2127,2128,-1945,-1974]]},{"type":"Polygon","id":36107,"arcs":[[-2129,2129,2130,2131,-2015,-1942]]},{"type":"Polygon","id":19097,"arcs":[[-2069,2132,2133,2134,-1996]]},{"type":"Polygon","id":31179,"arcs":[[-1966,2135,2136,2137,-2095,-1914]]},{"type":"MultiPolygon","id":25021,"arcs":[[[2138,2139]],[[-2091,2140,2141,2142,2143,-1986,-1984]],[[-1982,-2092]]]},{"type":"Polygon","id":25013,"arcs":[[-1990,2144,2145,2146,-1969,-2054]]},{"type":"MultiPolygon","id":25023,"arcs":[[[-2140,2147,2148,2149,2150,-2142,2151]]]},{"type":"Polygon","id":19011,"arcs":[[2152,2153,2154,-2012,-2010]]},{"type":"Polygon","id":19113,"arcs":[[-2003,2155,2156,2157,-2153,-2009]]},{"type":"Polygon","id":19171,"arcs":[[-2155,2158,2159,-2052,-2013]]},{"type":"Polygon","id":19105,"arcs":[[-1997,-2135,2160,2161,-2156,-2002]]},{"type":"Polygon","id":36015,"arcs":[[-2016,-2132,2162,2163,-2027,-2055]]},{"type":"Polygon","id":31173,"arcs":[[-2037,2164,2165,2166,-2136,-1965,-2059]]},{"type":"Polygon","id":56037,"arcs":[[-1407,-2111,2167,2168,2169,2170,-1704,-1665]]},{"type":"Polygon","id":42049,"arcs":[[2171,2172,2173,2174,-2033]]},{"type":"Polygon","id":26021,"arcs":[[2175,2176,2177,2178,-2124]]},{"type":"Polygon","id":19133,"arcs":[[2179,2180,2181,-2165,-2036]]},{"type":"Polygon","id":19127,"arcs":[[-2160,2182,2183,-2050,-2053]]},{"type":"Polygon","id":19027,"arcs":[[-2045,2184,2185,2186,2187,-2040]]},{"type":"Polygon","id":19047,"arcs":[[-2043,-2041,-2188,2188,2189,-2180]]},{"type":"Polygon","id":19015,"arcs":[[-2048,2190,2191,2192,2193,-2006]]},{"type":"Polygon","id":19073,"arcs":[[-2194,2194,2195,-2185,-2044,-2007]]},{"type":"Polygon","id":19169,"arcs":[[-2051,-2184,2196,2197,-2191,-2047]]},{"type":"Polygon","id":17141,"arcs":[[2198,2199,2200,2201,-2075,-2077]]},{"type":"Polygon","id":17015,"arcs":[[-2202,2202,2203,-2133,-2068,-2073]]},{"type":"Polygon","id":36111,"arcs":[[-2071,2204,2205,2206,-2063,-2089]]},{"type":"Polygon","id":17031,"arcs":[[-2087,2207,2208,2209,2210,2211,-2082]]},{"type":"Polygon","id":17037,"arcs":[[2212,2213,2214,2215,-2199,-2086,-2084]]},{"type":"Polygon","id":17089,"arcs":[[-2212,2216,2217,-2213,-2083]]},{"type":"Polygon","id":31075,"arcs":[[2218,2219,2220,-1836,-1853]]},{"type":"MultiPolygon","id":25005,"arcs":[[[2221,2222,2223,2224,2225,-2143,-2151]]]},{"type":"Polygon","id":31091,"arcs":[[2226,2227,2228,-2219,-1852]]},{"type":"Polygon","id":31039,"arcs":[[-2167,2229,2230,2231,2232,-2137]]},{"type":"Polygon","id":31119,"arcs":[[2233,2234,2235,-2100,-2096]]},{"type":"Polygon","id":31167,"arcs":[[-2233,2236,2237,-2234,-2138]]},{"type":"Polygon","id":31171,"arcs":[[2238,2239,2240,-2227,-1851]]},{"type":"Polygon","id":31183,"arcs":[[2241,2242,2243,2244,-1896,-2102]]},{"type":"Polygon","id":31009,"arcs":[[-1850,-1928,2245,2246,2247,-2239]]},{"type":"Polygon","id":31115,"arcs":[[2248,2249,-2246,-1927,-1941,-1898]]},{"type":"Polygon","id":31071,"arcs":[[-2245,2250,2251,-2249,-1897]]},{"type":"Polygon","id":26091,"arcs":[[2252,2253,2254,2255,-2116,-2104]]},{"type":"Polygon","id":36027,"arcs":[[-1971,2256,2257,2258,2259,-2205,-2070]]},{"type":"MultiPolygon","id":25001,"arcs":[[[2260,-2149,2261]]]},{"type":"Polygon","id":26023,"arcs":[[2262,2263,2264,2265,-2120]]},{"type":"Polygon","id":26059,"arcs":[[-2256,2266,2267,2268,-2263,-2119,-2117]]},{"type":"Polygon","id":26149,"arcs":[[-2266,2269,2270,2271,-2126]]},{"type":"Polygon","id":26027,"arcs":[[-2272,2272,2273,-2176,-2123]]},{"type":"Polygon","id":9005,"arcs":[[-2147,2274,2275,2276,-2257,-1970]]},{"type":"Polygon","id":31021,"arcs":[[2277,2278,2279,-2230,-2166,-2182]]},{"type":"Polygon","id":9003,"arcs":[[2280,2281,2282,2283,-2275,-2146]]},{"type":"Polygon","id":9013,"arcs":[[-1989,2284,2285,-2281,-2145]]},{"type":"Polygon","id":19045,"arcs":[[-2204,2286,2287,2288,2289,-2161,-2134]]},{"type":"Polygon","id":9015,"arcs":[[2290,2291,2292,-2285,-1988]]},{"type":"Polygon","id":44007,"arcs":[[-2226,2293,2294,2295,-2291,-1987,-2144]]},{"type":"Polygon","id":36105,"arcs":[[2296,2297,2298,-2064,-2207]]},{"type":"Polygon","id":6093,"arcs":[[-1575,2299,2300,2301,2302,2303,-1946,-1854]]},{"type":"Polygon","id":31069,"arcs":[[-2221,2304,2305,2306,2307,2308,-1837]]},{"type":"Polygon","id":31123,"arcs":[[-2309,2309,2310,2311,-2098,-1838]]},{"type":"Polygon","id":49005,"arcs":[[2312,2313,2314,-2079,-2115]]},{"type":"Polygon","id":31157,"arcs":[[-2312,2315,-2018,-1833,-2099]]},{"type":"Polygon","id":49033,"arcs":[[-1706,2316,2317,2318,2319,-2313,-2024]]},{"type":"Polygon","id":42015,"arcs":[[-2163,-2131,2320,2321,2322,2323,2324]]},{"type":"Polygon","id":42117,"arcs":[[-2164,-2325,2325,2326,-2028]]},{"type":"Polygon","id":49003,"arcs":[[2327,2328,2329,-1993,-2080,-2315]]},{"type":"Polygon","id":32013,"arcs":[[2330,2331,2332,-1402,-1238,-1556,2333]]},{"type":"Polygon","id":32007,"arcs":[[-1994,-2330,2334,2335,2336,2337,-2334,-1555,-1869]]},{"type":"Polygon","id":42083,"arcs":[[-2061,2338,2339,2340,2341,-2057]]},{"type":"Polygon","id":42105,"arcs":[[-2029,-2327,2342,2343,2344,-2339,-2060]]},{"type":"Polygon","id":6015,"arcs":[[-2304,2345,2346,-1865,-1947]]},{"type":"Polygon","id":42127,"arcs":[[-2065,-2299,2347,2348,2349,2350,-2127]]},{"type":"Polygon","id":42115,"arcs":[[2351,2352,-2321,-2130,-2128,-2351]]},{"type":"Polygon","id":42123,"arcs":[[-2342,2353,2354,2355,-2172,-2032,-2058]]},{"type":"Polygon","id":6049,"arcs":[[-1578,2356,2357,2358,-2300,-1574]]},{"type":"Polygon","id":32031,"arcs":[[2359,2360,2361,2362,2363,2364,2365,2366,2367,-2357,-1577,-1403,-2333]]},{"type":"Polygon","id":17043,"arcs":[[2368,2369,-2217,-2211]]},{"type":"Polygon","id":39007,"arcs":[[2370,2371,2372,2373,2374,-2174]]},{"type":"Polygon","id":19031,"arcs":[[-2162,-2290,2375,2376,2377,-2157]]},{"type":"Polygon","id":17195,"arcs":[[-2201,2378,2379,2380,2381,-2287,-2203]]},{"type":"Polygon","id":31011,"arcs":[[-2236,2382,2383,2384,-2242,-2101]]},{"type":"Polygon","id":17103,"arcs":[[-2216,2385,2386,-2379,-2200]]},{"type":"Polygon","id":19085,"arcs":[[-2190,2387,2388,2389,-2278,-2181]]},{"type":"Polygon","id":19095,"arcs":[[2390,2391,2392,2393,-2154]]},{"type":"Polygon","id":19049,"arcs":[[2394,2395,2396,-2195,-2193]]},{"type":"Polygon","id":19165,"arcs":[[2397,2398,2399,-2388,-2189]]},{"type":"Polygon","id":19009,"arcs":[[2400,2401,-2398,-2187]]},{"type":"Polygon","id":19157,"arcs":[[-2394,2402,2403,2404,-2159]]},{"type":"Polygon","id":19153,"arcs":[[-2198,2405,2406,2407,-2395,-2192]]},{"type":"Polygon","id":19099,"arcs":[[-2183,-2405,2408,2409,-2406,-2197]]},{"type":"Polygon","id":19077,"arcs":[[-2397,2410,-2401,-2186,-2196]]},{"type":"Polygon","id":19103,"arcs":[[-2378,2411,2412,2413,-2391,-2158]]},{"type":"Polygon","id":39085,"arcs":[[2414,2415,2416,-2374]]},{"type":"Polygon","id":42039,"arcs":[[-2356,2417,2418,2419,-2371,-2173]]},{"type":"Polygon","id":17161,"arcs":[[2420,2421,2422,2423,2424,-2288,-2382]]},{"type":"Polygon","id":44001,"arcs":[[2425,-2294,-2225]]},{"type":"Polygon","id":19163,"arcs":[[-2425,2426,-2376,-2289]]},{"type":"Polygon","id":44003,"arcs":[[2427,2428,2429,-2292,-2296]]},{"type":"Polygon","id":18039,"arcs":[[2430,2431,2432,2433,2434,-2273,-2271]]},{"type":"Polygon","id":18141,"arcs":[[2435,2436,2437,-2177,-2274,-2435]]},{"type":"Polygon","id":18091,"arcs":[[2438,2439,2440,-2178,-2438]]},{"type":"Polygon","id":18151,"arcs":[[2441,2442,-2264,-2269,2443]]},{"type":"Polygon","id":18087,"arcs":[[2444,-2431,-2270,-2265,-2443]]},{"type":"Polygon","id":31037,"arcs":[[-2232,2445,2446,2447,-2237]]},{"type":"Polygon","id":31141,"arcs":[[-2448,2448,2449,2450,2451,-2383,-2235,-2238]]},{"type":"Polygon","id":31053,"arcs":[[-2280,2452,2453,2454,2455,-2446,-2231]]},{"type":"Polygon","id":31117,"arcs":[[-2241,2456,2457,2458,2459,-2228]]},{"type":"Polygon","id":31005,"arcs":[[-2460,2460,-2305,-2220,-2229]]},{"type":"Polygon","id":31077,"arcs":[[2461,2462,2463,2464,-2243,-2385]]},{"type":"Polygon","id":31041,"arcs":[[-2252,2465,2466,2467,2468,2469,2470,-2247,-2250]]},{"type":"Polygon","id":31113,"arcs":[[-2248,-2471,2471,-2457,-2240]]},{"type":"Polygon","id":31175,"arcs":[[-2244,-2465,2472,-2466,-2251]]},{"type":"MultiPolygon","id":39095,"arcs":[[[2473,2474,2475,2476,-2254,2477,2478,2479,2480,2481,2482]]]},{"type":"Polygon","id":17197,"arcs":[[-2210,2483,2484,2485,2486,-2369]]},{"type":"MultiPolygon","id":39123,"arcs":[[[2487,2488,2489,2490,2491,-2474]]]},{"type":"Polygon","id":17093,"arcs":[[-2487,2492,2493,-2214,-2218,-2370]]},{"type":"Polygon","id":39051,"arcs":[[2494,2495,-2267,-2255,-2477]]},{"type":"Polygon","id":39055,"arcs":[[2496,2497,2498,-2415,-2373]]},{"type":"MultiPolygon","id":9011,"arcs":[[[-2430,2499,2500,2501,-2282,-2286,-2293]]]},{"type":"Polygon","id":18089,"arcs":[[2502,2503,2504,2505,-2484,-2209,2506]]},{"type":"Polygon","id":18127,"arcs":[[2507,-2503,2508,-2440]]},{"type":"Polygon","id":39171,"arcs":[[2509,2510,2511,-2444,-2268,-2496]]},{"type":"Polygon","id":31007,"arcs":[[-2311,2512,2513,2514,-2019,-2316]]},{"type":"Polygon","id":31177,"arcs":[[-2390,2515,2516,-2453,-2279]]},{"type":"MultiPolygon","id":44005,"arcs":[[[2517]],[[2518,-2223]]]},{"type":"MultiPolygon","id":9001,"arcs":[[[2519,2520,2521,2522,-2258,-2277]]]},{"type":"Polygon","id":56021,"arcs":[[-2020,-2515,2523,2524,2525,-2112,-2022]]},{"type":"MultiPolygon","id":44009,"arcs":[[[-2500,-2429,2526]]]},{"type":"Polygon","id":42131,"arcs":[[-2353,2527,2528,2529,-2322]]},{"type":"MultiPolygon","id":9007,"arcs":[[[2530,2531]],[[-2502,2532,2533,-2283]]]},{"type":"Polygon","id":9009,"arcs":[[-2534,2534,-2531,2535,-2520,-2276,-2284]]},{"type":"Polygon","id":42069,"arcs":[[-2350,2536,2537,-2528,-2352]]},{"type":"Polygon","id":36071,"arcs":[[-2260,2538,2539,2540,2541,2542,-2297,-2206]]},{"type":"Polygon","id":17099,"arcs":[[-2494,2543,2544,2545,2546,2547,2548,-2386,-2215]]},{"type":"Polygon","id":39035,"arcs":[[-2499,2549,2550,2551,2552,2553,-2416]]},{"type":"Polygon","id":42047,"arcs":[[2554,2555,2556,2557,-2341]]},{"type":"Polygon","id":42053,"arcs":[[-2558,2558,2559,2560,-2354]]},{"type":"Polygon","id":42121,"arcs":[[2561,2562,2563,-2418,-2355,-2561]]},{"type":"MultiPolygon","id":39043,"arcs":[[[2564,2565,2566,2567]]]},{"type":"Polygon","id":39173,"arcs":[[-2492,2568,2569,2570,2571,-2475]]},{"type":"Polygon","id":42023,"arcs":[[-2345,2572,2573,-2555,-2340]]},{"type":"Polygon","id":42103,"arcs":[[-2543,2574,2575,-2348,-2298]]},{"type":"Polygon","id":19139,"arcs":[[-2377,-2427,-2424,2576,-2412]]},{"type":"Polygon","id":42081,"arcs":[[2577,2578,2579,2580,2581,2582,-2343,-2326,-2324]]},{"type":"Polygon","id":42113,"arcs":[[-2578,-2323,-2530,2583,2584]]},{"type":"Polygon","id":17011,"arcs":[[-2549,2585,2586,2587,2588,-2380,-2387]]},{"type":"Polygon","id":17073,"arcs":[[-2589,2589,2590,2591,-2421,-2381]]},{"type":"Polygon","id":56041,"arcs":[[-2171,2592,-2317,-1705]]},{"type":"Polygon","id":18033,"arcs":[[2593,2594,2595,-2442,-2512]]},{"type":"Polygon","id":18113,"arcs":[[-2596,2596,2597,2598,-2432,-2445]]},{"type":"Polygon","id":31125,"arcs":[[2599,2600,-2462,-2384,-2452]]},{"type":"Polygon","id":36079,"arcs":[[2601,2602,-2539,-2259,-2523,2603]]},{"type":"MultiPolygon","id":25007,"arcs":[[[2604]]]},{"type":"Polygon","id":39093,"arcs":[[-2553,2605,2606,2607,-2565,2608]]},{"type":"Polygon","id":19183,"arcs":[[2609,2610,2611,2612,-2392,-2414]]},{"type":"Polygon","id":19181,"arcs":[[2613,2614,2615,2616,-2408]]},{"type":"Polygon","id":19107,"arcs":[[-2613,2617,2618,2619,-2403,-2393]]},{"type":"Polygon","id":19121,"arcs":[[2620,2621,2622,-2396,-2617]]},{"type":"Polygon","id":19123,"arcs":[[-2620,2623,2624,2625,-2409,-2404]]},{"type":"Polygon","id":19125,"arcs":[[-2626,2626,2627,-2614,-2407,-2410]]},{"type":"Polygon","id":19155,"arcs":[[-2400,2628,2629,2630,2631,2632,-2516,-2389]]},{"type":"Polygon","id":19029,"arcs":[[-2402,2633,2634,2635,-2629,-2399]]},{"type":"Polygon","id":19001,"arcs":[[-2411,-2623,2636,2637,-2634]]},{"type":"Polygon","id":39155,"arcs":[[-2420,2638,2639,2640,-2497,-2372]]},{"type":"MultiPolygon","id":39143,"arcs":[[[-2489,2641]],[[2642,-2567,2643,2644,-2569,-2491]]]},{"type":"Polygon","id":42085,"arcs":[[-2564,2645,2646,2647,-2639,-2419]]},{"type":"Polygon","id":39069,"arcs":[[-2476,-2572,2648,2649,-2510,-2495]]},{"type":"Polygon","id":18099,"arcs":[[-2434,2650,2651,2652,-2436]]},{"type":"Polygon","id":42035,"arcs":[[-2583,2653,2654,2655,-2573,-2344]]},{"type":"MultiPolygon","id":6023,"arcs":[[[-2303,2656,2657,2658,-2346]]]},{"type":"Polygon","id":17063,"arcs":[[2659,2660,-2544,-2493,-2486]]},{"type":"Polygon","id":31023,"arcs":[[-2456,2661,2662,2663,2664,-2449,-2447]]},{"type":"Polygon","id":31155,"arcs":[[2665,2666,2667,2668,-2662,-2455]]},{"type":"Polygon","id":18085,"arcs":[[-2599,2669,2670,2671,-2651,-2433]]},{"type":"Polygon","id":31033,"arcs":[[-2308,2672,2673,2674,2675,-2513,-2310]]},{"type":"Polygon","id":42031,"arcs":[[2676,2677,2678,-2562,-2560]]},{"type":"Polygon","id":49057,"arcs":[[-2314,-2320,2679,2680,-2328]]},{"type":"Polygon","id":18149,"arcs":[[-2653,2681,2682,-2439,-2437]]},{"type":"Polygon","id":42079,"arcs":[[2683,2684,2685,2686,-2584,-2529,-2538]]},{"type":"Polygon","id":39039,"arcs":[[2687,2688,2689,-2594,-2511,-2650]]},{"type":"Polygon","id":19115,"arcs":[[-2577,-2423,2690,2691,2692,-2610,-2413]]},{"type":"Polygon","id":31101,"arcs":[[2693,2694,2695,-2306,-2461,-2459]]},{"type":"Polygon","id":31111,"arcs":[[-2472,-2470,2696,2697,2698,2699,-2694,-2458]]},{"type":"MultiPolygon","id":25019,"arcs":[[[2700]]]},{"type":"Polygon","id":31143,"arcs":[[2701,2702,2703,-2450,-2665]]},{"type":"Polygon","id":31105,"arcs":[[-2676,2704,2705,-2524,-2514]]},{"type":"Polygon","id":31121,"arcs":[[-2704,2706,2707,2708,-2600,-2451]]},{"type":"Polygon","id":31093,"arcs":[[-2601,-2709,2709,2710,2711,-2463]]},{"type":"Polygon","id":31163,"arcs":[[-2464,-2712,2712,-2467,-2473]]},{"type":"Polygon","id":31055,"arcs":[[-2517,-2633,2713,-2666,-2454]]},{"type":"Polygon","id":49029,"arcs":[[2714,2715,2716,-2680,-2319]]},{"type":"Polygon","id":42065,"arcs":[[2717,2718,2719,-2677,-2559,-2557]]},{"type":"Polygon","id":6105,"arcs":[[2720,2721,2722,-2657,-2302]]},{"type":"MultiPolygon","id":36119,"arcs":[[[2723,2724,2725,-2604,-2522,2726]]]},{"type":"Polygon","id":34037,"arcs":[[2727,2728,2729,2730,-2575,-2542]]},{"type":"Polygon","id":39153,"arcs":[[2731,2732,2733,2734,-2551]]},{"type":"Polygon","id":39133,"arcs":[[-2641,2735,2736,-2732,-2550,-2498]]},{"type":"Polygon","id":17131,"arcs":[[-2592,2737,2738,2739,2740,-2691,-2422]]},{"type":"Polygon","id":17155,"arcs":[[-2548,2741,-2586]]},{"type":"Polygon","id":36087,"arcs":[[2742,2743,-2540,-2603,2744]]},{"type":"Polygon","id":42037,"arcs":[[2745,2746,2747,-2579,-2585,-2687]]},{"type":"Polygon","id":17091,"arcs":[[-2506,2748,2749,2750,2751,-2660,-2485]]},{"type":"Polygon","id":18183,"arcs":[[2752,2753,2754,-2670,-2598]]},{"type":"MultiPolygon","id":36103,"arcs":[[[2755,2756]],[[2757,2758]]]},{"type":"Polygon","id":39077,"arcs":[[-2608,2759,2760,2761,2762,-2644,-2566]]},{"type":"Polygon","id":18073,"arcs":[[-2683,2763,2764,2765,2766,-2504,-2508]]},{"type":"Polygon","id":39103,"arcs":[[-2735,2767,2768,-2606,-2552]]},{"type":"Polygon","id":18003,"arcs":[[2769,2770,2771,2772,2773,-2753,-2597,-2595,-2690]]},{"type":"Polygon","id":39147,"arcs":[[-2763,2774,2775,2776,-2570,-2645]]},{"type":"Polygon","id":42033,"arcs":[[2777,2778,2779,2780,-2718,-2556,-2574,-2656]]},{"type":"Polygon","id":49043,"arcs":[[-2593,-2170,2781,2782,2783,2784,-2715,-2318]]},{"type":"Polygon","id":42027,"arcs":[[2785,2786,2787,2788,-2778,-2655]]},{"type":"Polygon","id":42089,"arcs":[[-2731,2789,2790,2791,-2684,-2537,-2349,-2576]]},{"type":"Polygon","id":39125,"arcs":[[2792,2793,-2770,-2689]]},{"type":"Polygon","id":17175,"arcs":[[-2588,2794,2795,2796,-2590]]},{"type":"Polygon","id":31049,"arcs":[[-2696,2797,2798,-2673,-2307]]},{"type":"Polygon","id":18111,"arcs":[[2799,2800,-2749,-2505,-2767]]},{"type":"Polygon","id":34031,"arcs":[[2801,2802,-2728,-2541,-2744,2803]]},{"type":"Polygon","id":31153,"arcs":[[-2632,2804,2805,-2667,-2714]]},{"type":"Polygon","id":6035,"arcs":[[-2368,2806,2807,2808,-2358]]},{"type":"Polygon","id":6089,"arcs":[[-2359,-2809,2809,2810,-2721,-2301]]},{"type":"Polygon","id":42097,"arcs":[[2811,-2747,2812,2813,2814,2815,2816,-2581]]},{"type":"Polygon","id":18049,"arcs":[[2817,2818,2819,2820,-2652,-2672]]},{"type":"Polygon","id":31081,"arcs":[[2821,2822,2823,2824,-2707,-2703]]},{"type":"Polygon","id":18131,"arcs":[[-2821,2825,2826,-2764,-2682]]},{"type":"Polygon","id":42093,"arcs":[[-2748,-2812,-2580]]},{"type":"Polygon","id":42019,"arcs":[[-2679,2827,2828,2829,2830,-2646,-2563]]},{"type":"Polygon","id":42005,"arcs":[[-2720,2831,2832,2833,-2828,-2678]]},{"type":"Polygon","id":39063,"arcs":[[-2777,2834,2835,2836,2837,-2571]]},{"type":"Polygon","id":39137,"arcs":[[-2838,2838,2839,-2793,-2688,-2649]]},{"type":"Polygon","id":19101,"arcs":[[-2612,2840,2841,2842,-2618]]},{"type":"Polygon","id":19087,"arcs":[[-2693,2843,2844,2845,-2841,-2611]]},{"type":"Polygon","id":19179,"arcs":[[-2843,2846,2847,-2624,-2619]]},{"type":"Polygon","id":19039,"arcs":[[2848,2849,2850,-2621,-2616]]},{"type":"Polygon","id":19117,"arcs":[[-2628,2851,2852,-2849,-2615]]},{"type":"Polygon","id":19135,"arcs":[[-2848,2853,-2852,-2627,-2625]]},{"type":"Polygon","id":19129,"arcs":[[2854,2855,2856,-2805,-2631]]},{"type":"Polygon","id":19137,"arcs":[[-2636,2857,2858,-2855,-2630]]},{"type":"Polygon","id":19003,"arcs":[[-2638,2859,2860,-2858,-2635]]},{"type":"Polygon","id":19175,"arcs":[[-2622,-2851,2861,-2860,-2637]]},{"type":"Polygon","id":49011,"arcs":[[-2717,2862,2863,-2681]]},{"type":"Polygon","id":17095,"arcs":[[-2797,2864,2865,2866,-2738,-2591]]},{"type":"Polygon","id":42119,"arcs":[[2867,2868,-2786,-2654,-2582,-2817]]},{"type":"Polygon","id":17123,"arcs":[[-2742,-2547,2869,2870,-2795,-2587]]},{"type":"Polygon","id":34003,"arcs":[[2871,2872,-2804,-2743,2873]]},{"type":"Polygon","id":39099,"arcs":[[-2648,2874,2875,2876,-2736,-2640]]},{"type":"Polygon","id":42025,"arcs":[[-2792,2877,2878,2879,-2685]]},{"type":"Polygon","id":42073,"arcs":[[-2831,2880,2881,-2875,-2647]]},{"type":"Polygon","id":17105,"arcs":[[-2752,2882,2883,2884,-2545,-2661]]},{"type":"Polygon","id":34041,"arcs":[[2885,2886,2887,2888,-2790,-2730]]},{"type":"Polygon","id":34027,"arcs":[[2889,2890,2891,2892,-2886,-2729,-2803]]},{"type":"Polygon","id":49045,"arcs":[[2893,2894,2895,2896,-2335,-2329,-2864]]},{"type":"Polygon","id":19057,"arcs":[[-2741,2897,2898,-2844,-2692]]},{"type":"Polygon","id":17071,"arcs":[[2899,2900,2901,2902,-2898,-2740]]},{"type":"Polygon","id":17187,"arcs":[[-2867,2903,2904,-2900,-2739]]},{"type":"Polygon","id":39005,"arcs":[[-2769,2905,2906,2907,2908,-2760,-2607]]},{"type":"Polygon","id":31025,"arcs":[[-2857,2909,2910,2911,-2668,-2806]]},{"type":"Polygon","id":31185,"arcs":[[2912,2913,2914,-2822,-2702]]},{"type":"Polygon","id":31079,"arcs":[[-2708,-2825,2915,2916,-2710]]},{"type":"Polygon","id":31047,"arcs":[[2917,2918,2919,2920,-2697,-2469]]},{"type":"Polygon","id":31019,"arcs":[[-2711,-2917,2921,2922,2923,-2918,-2468,-2713]]},{"type":"Polygon","id":31159,"arcs":[[2924,2925,-2913,-2664]]},{"type":"Polygon","id":31109,"arcs":[[-2912,2926,2927,2928,-2925,-2663,-2669]]},{"type":"Polygon","id":18169,"arcs":[[-2755,2929,2930,2931,-2818,-2671]]},{"type":"Polygon","id":17075,"arcs":[[-2801,2932,2933,2934,-2750]]},{"type":"Polygon","id":18069,"arcs":[[-2774,2935,2936,-2930,-2754]]},{"type":"MultiPolygon","id":8123,"arcs":[[[2937]],[[2938,2939,2940,2941,2942,-2525,-2706,2943]]]},{"type":"Polygon","id":31135,"arcs":[[-2700,2944,2945,2946,2947,-2798,-2695]]},{"type":"Polygon","id":8107,"arcs":[[2948,2949,2950,2951,2952,-2109,2953]]},{"type":"Polygon","id":8057,"arcs":[[2954,-2954,-2108,-2114,2955]]},{"type":"Polygon","id":8081,"arcs":[[-2953,2956,2957,2958,-2168,-2110]]},{"type":"Polygon","id":8075,"arcs":[[2959,2960,2961,-2944,-2705,-2675,2962,2963]]},{"type":"Polygon","id":8115,"arcs":[[2964,-2963,-2674,-2799,-2948]]},{"type":"Polygon","id":49009,"arcs":[[2965,2966,-2782,-2169,-2959]]},{"type":"Polygon","id":32011,"arcs":[[2967,2968,2969,-2337]]},{"type":"Polygon","id":32015,"arcs":[[-2970,2970,2971,2972,-2331,-2338]]},{"type":"Polygon","id":8069,"arcs":[[2973,2974,-2956,-2113,-2526,-2943]]},{"type":"Polygon","id":18103,"arcs":[[-2932,2975,2976,2977,-2819]]},{"type":"Polygon","id":39033,"arcs":[[2978,2979,2980,2981,-2775,-2762]]},{"type":"Polygon","id":17053,"arcs":[[2982,2983,2984,-2883,-2751,-2935]]},{"type":"Polygon","id":39139,"arcs":[[-2909,2985,2986,-2979,-2761]]},{"type":"Polygon","id":39175,"arcs":[[-2982,2987,2988,-2835,-2776]]},{"type":"Polygon","id":39169,"arcs":[[-2734,2989,2990,-2906,-2768]]},{"type":"Polygon","id":39161,"arcs":[[-2840,2991,2992,2993,2994,-2771,-2794]]},{"type":"Polygon","id":39151,"arcs":[[-2877,2995,2996,2997,2998,-2990,-2733,-2737]]},{"type":"Polygon","id":17143,"arcs":[[-2871,2999,3000,3001,-2865,-2796]]},{"type":"Polygon","id":42095,"arcs":[[3002,3003,-2878,-2791,-2889]]},{"type":"Polygon","id":32027,"arcs":[[-2973,3004,-2360,-2332]]},{"type":"Polygon","id":42107,"arcs":[[-2880,3005,3006,3007,3008,-2813,-2746,-2686]]},{"type":"Polygon","id":39029,"arcs":[[-2882,3009,3010,3011,3012,-2996,-2876]]},{"type":"Polygon","id":17203,"arcs":[[3013,3014,-3000,-2870,-2546,-2885]]},{"type":"Polygon","id":18001,"arcs":[[3015,3016,3017,-2772,-2995]]},{"type":"Polygon","id":39003,"arcs":[[-2837,3018,3019,-2992,-2839]]},{"type":"Polygon","id":49035,"arcs":[[-2716,-2785,3020,3021,-2894,-2863]]},{"type":"MultiPolygon","id":36005,"arcs":[[[3022,3023,3024,-2725]]]},{"type":"Polygon","id":18179,"arcs":[[-3018,3025,3026,3027,-2936,-2773]]},{"type":"MultiPolygon","id":36059,"arcs":[[[-2756,3028]],[[-2758,3029,3030,3031,3032,3033]]]},{"type":"Polygon","id":18181,"arcs":[[3034,3035,3036,3037,-2765,-2827]]},{"type":"Polygon","id":18017,"arcs":[[-2820,-2978,3038,3039,-3035,-2826]]},{"type":"Polygon","id":42063,"arcs":[[-2781,3040,3041,-2832,-2719]]},{"type":"Polygon","id":34013,"arcs":[[-2802,-2873,3042,3043,3044,-2890]]},{"type":"Polygon","id":19071,"arcs":[[3045,3046,3047,-2910,-2856]]},{"type":"Polygon","id":19145,"arcs":[[3048,3049,3050,-3046,-2859]]},{"type":"Polygon","id":19173,"arcs":[[3051,3052,3053,-3049,-2861]]},{"type":"Polygon","id":19177,"arcs":[[-2846,3054,3055,3056,3057,-2842]]},{"type":"Polygon","id":19051,"arcs":[[-3058,3058,3059,3060,-2847]]},{"type":"Polygon","id":19159,"arcs":[[3061,3062,3063,-3052,-2862]]},{"type":"Polygon","id":19053,"arcs":[[3064,3065,3066,-3062,-2850]]},{"type":"Polygon","id":19185,"arcs":[[3067,3068,3069,-3065,-2853]]},{"type":"Polygon","id":19007,"arcs":[[-3061,3070,3071,-3068,-2854]]},{"type":"Polygon","id":42109,"arcs":[[-2816,3072,3073,-2868]]},{"type":"Polygon","id":36061,"arcs":[[3074,-3024]]},{"type":"Polygon","id":49047,"arcs":[[-2958,3075,3076,3077,3078,3079,3080,-2966]]},{"type":"Polygon","id":42007,"arcs":[[-2830,3081,3082,3083,-3010,-2881]]},{"type":"Polygon","id":42087,"arcs":[[3084,-2787,-2869,-3074,3085]]},{"type":"Polygon","id":49013,"arcs":[[-2967,-3081,3086,3087,3088,-2783]]},{"type":"Polygon","id":39065,"arcs":[[-2989,3089,3090,3091,3092,-3019,-2836]]},{"type":"Polygon","id":34017,"arcs":[[3093,-3043,-2872]]},{"type":"Polygon","id":19111,"arcs":[[-2899,-2903,3094,3095,-3055,-2845]]},{"type":"MultiPolygon","id":36081,"arcs":[[[3096,-3031]],[[3097,3098]],[[-3033,3099,3100,3101]]]},{"type":"Polygon","id":34019,"arcs":[[3102,3103,3104,-2887,-2893]]},{"type":"Polygon","id":42077,"arcs":[[3105,3106,3107,-3006,-2879,-3004]]},{"type":"Polygon","id":31131,"arcs":[[-3048,3108,3109,3110,-2927,-2911]]},{"type":"Polygon","id":34035,"arcs":[[3111,3112,3113,-3103,-2892]]},{"type":"Polygon","id":17113,"arcs":[[-2985,3114,3115,3116,3117,3118,-3014,-2884]]},{"type":"Polygon","id":8095,"arcs":[[-2947,3119,3120,-2964,-2965]]},{"type":"Polygon","id":17179,"arcs":[[-3119,3121,3122,3123,-3001,-3015]]},{"type":"Polygon","id":42061,"arcs":[[-3085,3124,3125,3126,3127,3128,-2788]]},{"type":"Polygon","id":42013,"arcs":[[3129,3130,-2779,-2789,-3129]]},{"type":"MultiPolygon","id":36047,"arcs":[[[3131,-3098]],[[3132,-3101]]]},{"type":"Polygon","id":18007,"arcs":[[-2766,-3038,3133,3134,3135,-2933,-2800]]},{"type":"Polygon","id":34039,"arcs":[[3136,3137,-3112,-2891,-3045]]},{"type":"Polygon","id":18015,"arcs":[[-3040,3138,3139,3140,-3036]]},{"type":"Polygon","id":39019,"arcs":[[-3013,3141,3142,3143,-2997]]},{"type":"Polygon","id":39107,"arcs":[[3144,3145,3146,3147,-3016,-2994]]},{"type":"Polygon","id":42021,"arcs":[[-3131,3148,3149,3150,-3041,-2780]]},{"type":"Polygon","id":17057,"arcs":[[-3002,-3124,3151,3152,3153,-2904,-2866]]},{"type":"Polygon","id":39117,"arcs":[[-2987,3154,3155,3156,-2980]]},{"type":"Polygon","id":39101,"arcs":[[-3157,3157,3158,-3090,-2988,-2981]]},{"type":"Polygon","id":31063,"arcs":[[-2921,3159,3160,3161,3162,3163,-2698]]},{"type":"Polygon","id":31001,"arcs":[[-2824,3164,3165,3166,-2922,-2916]]},{"type":"Polygon","id":31073,"arcs":[[3167,3168,-3160,-2920]]},{"type":"Polygon","id":31085,"arcs":[[-3164,3169,3170,3171,-2945,-2699]]},{"type":"Polygon","id":31029,"arcs":[[-3172,3172,3173,-3120,-2946]]},{"type":"Polygon","id":31059,"arcs":[[3174,3175,3176,3177,-2914]]},{"type":"Polygon","id":31151,"arcs":[[-2926,-2929,3178,3179,-3175]]},{"type":"Polygon","id":31035,"arcs":[[-3178,3180,3181,-3165,-2823,-2915]]},{"type":"Polygon","id":42067,"arcs":[[-2815,3182,3183,-3125,-3086,-3073]]},{"type":"Polygon","id":49051,"arcs":[[-3089,3184,-3021,-2784]]},{"type":"Polygon","id":31099,"arcs":[[3185,3186,3187,-2923,-3167]]},{"type":"Polygon","id":39011,"arcs":[[-3093,3188,3189,-3145,-2993,-3020]]},{"type":"Polygon","id":31137,"arcs":[[-2924,-3188,3190,3191,-3168,-2919]]},{"type":"Polygon","id":42129,"arcs":[[-3042,-3151,3192,3193,3194,3195,-2833]]},{"type":"Polygon","id":42011,"arcs":[[3196,3197,3198,3199,-3007,-3108]]},{"type":"Polygon","id":42003,"arcs":[[-2834,-3196,3200,-3082,-2829]]},{"type":"Polygon","id":39075,"arcs":[[-2999,3201,3202,3203,-2907,-2991]]},{"type":"Polygon","id":39157,"arcs":[[-3144,3204,3205,3206,-3202,-2998]]},{"type":"Polygon","id":42043,"arcs":[[-3009,3207,3208,3209,3210,3211,-2814]]},{"type":"Polygon","id":18053,"arcs":[[-3028,3212,3213,3214,3215,3216,-2976,-2931,-2937]]},{"type":"Polygon","id":36085,"arcs":[[3217]]},{"type":"Polygon","id":17067,"arcs":[[3218,3219,3220,3221,3222,-3095,-2902]]},{"type":"Polygon","id":54029,"arcs":[[3223,3224,3225,-3011,-3084]]},{"type":"Polygon","id":17109,"arcs":[[-3154,3226,-3219,-2901,-2905]]},{"type":"Polygon","id":42099,"arcs":[[3227,3228,-3183,-3212]]},{"type":"Polygon","id":29045,"arcs":[[-3223,3229,3230,3231,-3056,-3096]]},{"type":"Polygon","id":42017,"arcs":[[3232,3233,3234,3235,-3106,-3003,-2888,-3105]]},{"type":"Polygon","id":34023,"arcs":[[3236,3237,3238,-3113,-3138]]},{"type":"Polygon","id":29199,"arcs":[[-3232,3239,3240,3241,-3059,-3057]]},{"type":"Polygon","id":39081,"arcs":[[-3226,3242,3243,3244,3245,-3142,-3012]]},{"type":"Polygon","id":29197,"arcs":[[3246,3247,-3071,-3060,-3242]]},{"type":"Polygon","id":29171,"arcs":[[-3248,3248,3249,3250,-3069,-3072]]},{"type":"Polygon","id":29005,"arcs":[[-3051,3251,3252,3253,-3109,-3047]]},{"type":"Polygon","id":29129,"arcs":[[-3251,3254,3255,3256,-3066,-3070]]},{"type":"Polygon","id":29147,"arcs":[[-3054,3257,3258,3259,3260,-3252,-3050]]},{"type":"Polygon","id":49049,"arcs":[[-3088,3261,3262,3263,-2895,-3022,-3185]]},{"type":"Polygon","id":29081,"arcs":[[-3257,3264,3265,3266,3267,-3063,-3067]]},{"type":"Polygon","id":39083,"arcs":[[3268,3269,3270,-3155,-2986,-2908,-3204]]},{"type":"Polygon","id":18075,"arcs":[[3271,3272,3273,3274,-3026,-3017,-3148]]},{"type":"Polygon","id":29227,"arcs":[[-3268,3275,-3258,-3053,-3064]]},{"type":"Polygon","id":18009,"arcs":[[-3275,3276,-3213,-3027]]},{"type":"Polygon","id":18067,"arcs":[[3277,3278,-3139,-3039,-2977,-3217]]},{"type":"Polygon","id":18157,"arcs":[[-3141,3279,3280,3281,3282,-3134,-3037]]},{"type":"Polygon","id":31127,"arcs":[[3283,3284,3285,3286,-3110,-3254]]},{"type":"Polygon","id":42075,"arcs":[[-3208,-3008,-3200,3287]]},{"type":"Polygon","id":39091,"arcs":[[-3092,3288,3289,3290,-3189]]},{"type":"Polygon","id":8087,"arcs":[[-2962,3291,3292,-2939]]},{"type":"Polygon","id":31067,"arcs":[[3293,3294,3295,3296,3297,-3179,-2928]]},{"type":"Polygon","id":31097,"arcs":[[-3287,3298,-3294,-3111]]},{"type":"Polygon","id":39159,"arcs":[[3299,3300,3301,-3289,-3091,-3159,3302]]},{"type":"Polygon","id":17183,"arcs":[[-3136,3303,3304,3305,3306,-2983,-2934]]},{"type":"Polygon","id":8049,"arcs":[[3307,3308,3309,3310,3311,-2949,-2955,-2975]]},{"type":"Polygon","id":39149,"arcs":[[-3291,3312,3313,3314,-3146,-3190]]},{"type":"Polygon","id":42125,"arcs":[[-3201,-3195,3315,3316,3317,3318,3319,-3224,-3083]]},{"type":"Polygon","id":18171,"arcs":[[-3283,3320,3321,-3304,-3135]]},{"type":"Polygon","id":34025,"arcs":[[3322,3323,3324,-3238,3325]]},{"type":"Polygon","id":39031,"arcs":[[-3207,3326,3327,3328,-3269,-3203]]},{"type":"Polygon","id":42091,"arcs":[[3329,3330,3331,-3197,-3107,-3236]]},{"type":"Polygon","id":6103,"arcs":[[3332,3333,3334,3335,-2722,-2811]]},{"type":"Polygon","id":6063,"arcs":[[-2808,3336,3337,3338,-3333,-2810]]},{"type":"Polygon","id":39041,"arcs":[[-3271,3339,3340,-3303,-3158,-3156]]},{"type":"Polygon","id":8125,"arcs":[[-3174,3341,3342,3343,3344,-2960,-3121]]},{"type":"Polygon","id":8121,"arcs":[[-3345,3345,3346,3347,3348,-3292,-2961]]},{"type":"Polygon","id":17125,"arcs":[[3349,3350,3351,3352,-3152,-3123]]},{"type":"Polygon","id":39067,"arcs":[[-3246,3353,3354,-3205,-3143]]},{"type":"Polygon","id":18023,"arcs":[[-3279,3355,3356,3357,3358,-3280,-3140]]},{"type":"Polygon","id":34021,"arcs":[[-3239,-3325,3359,-3233,-3104,-3114]]},{"type":"Polygon","id":18159,"arcs":[[-3216,3360,3361,-3356,-3278]]},{"type":"Polygon","id":54009,"arcs":[[-3320,3362,-3243,-3225]]},{"type":"Polygon","id":17019,"arcs":[[-3307,3363,3364,-3115,-2984]]},{"type":"Polygon","id":29211,"arcs":[[3365,3366,3367,-3255,-3250]]},{"type":"Polygon","id":29075,"arcs":[[-3267,3368,3369,3370,-3259,-3276]]},{"type":"Polygon","id":18095,"arcs":[[3371,3372,3373,3374,-3361,-3215]]},{"type":"Polygon","id":18035,"arcs":[[-3277,-3274,3375,3376,-3372,-3214]]},{"type":"Polygon","id":18045,"arcs":[[-3282,3377,3378,3379,-3321]]},{"type":"Polygon","id":39037,"arcs":[[-3315,3380,3381,3382,3383,3384,-3272,-3147]]},{"type":"Polygon","id":31181,"arcs":[[-3182,3385,3386,3387,3388,-3186,-3166]]},{"type":"Polygon","id":31061,"arcs":[[-3389,3389,3390,3391,-3187]]},{"type":"Polygon","id":31129,"arcs":[[-3177,3392,3393,3394,-3386,-3181]]},{"type":"Polygon","id":31057,"arcs":[[3395,3396,3397,-3342,-3173,-3171]]},{"type":"Polygon","id":31065,"arcs":[[-3192,3398,3399,3400,3401,-3161,-3169]]},{"type":"Polygon","id":31169,"arcs":[[3402,3403,-3393,-3176]]},{"type":"Polygon","id":31095,"arcs":[[-3180,-3298,3404,-3403]]},{"type":"Polygon","id":31145,"arcs":[[-3402,3405,3406,3407,-3162]]},{"type":"Polygon","id":31087,"arcs":[[-3163,-3408,3408,-3396,-3170]]},{"type":"Polygon","id":31083,"arcs":[[-3392,3409,3410,-3399,-3191]]},{"type":"Polygon","id":29001,"arcs":[[-3241,3411,3412,3413,-3366,-3249,-3247]]},{"type":"Polygon","id":42041,"arcs":[[3414,3415,3416,-3228,-3211]]},{"type":"Polygon","id":17107,"arcs":[[3417,3418,3419,3420,-3350,-3122,-3118]]},{"type":"Polygon","id":42009,"arcs":[[-3128,3421,3422,3423,-3149,-3130]]},{"type":"Polygon","id":42071,"arcs":[[3424,3425,3426,3427,-3209,-3288,-3199]]},{"type":"Polygon","id":18135,"arcs":[[-3385,3428,3429,-3376,-3273]]},{"type":"Polygon","id":29103,"arcs":[[-3231,3430,3431,3432,-3412,-3240]]},{"type":"Polygon","id":42055,"arcs":[[-3417,3433,3434,3435,3436,-3126,-3184,-3229]]},{"type":"Polygon","id":42111,"arcs":[[-3424,3437,3438,3439,-3193,-3150]]},{"type":"Polygon","id":17039,"arcs":[[3440,3441,-3418,-3117]]},{"type":"Polygon","id":17169,"arcs":[[-3153,-3353,3442,3443,3444,-3220,-3227]]},{"type":"Polygon","id":17147,"arcs":[[-3365,3445,3446,3447,-3441,-3116]]},{"type":"Polygon","id":39089,"arcs":[[-3329,3448,3449,3450,3451,-3340,-3270]]},{"type":"Polygon","id":39021,"arcs":[[-3302,3452,3453,3454,-3313,-3290]]},{"type":"Polygon","id":29079,"arcs":[[-3368,3455,3456,3457,-3265,-3256]]},{"type":"Polygon","id":8013,"arcs":[[-2942,3458,3459,3460,-3308,-2974]]},{"type":"Polygon","id":31133,"arcs":[[-3286,3461,3462,3463,-3295,-3299]]},{"type":"Polygon","id":31147,"arcs":[[3464,3465,3466,3467,-3462,-3285]]},{"type":"Polygon","id":29087,"arcs":[[-3261,3468,3469,-3465,-3284,-3253]]},{"type":"Polygon","id":29111,"arcs":[[-3222,3470,3471,3472,-3431,-3230]]},{"type":"MultiPolygon","id":42029,"arcs":[[[3473,3474]],[[3475,3476,3477,-3425,-3198,-3332]]]},{"type":"Polygon","id":42133,"arcs":[[-3428,3478,3479,3480,3481,-3415,-3210]]},{"type":"Polygon","id":8103,"arcs":[[3482,-3076,-2957,-2952]]},{"type":"Polygon","id":39059,"arcs":[[3483,3484,-3327,-3206,-3355,3485]]},{"type":"Polygon","id":18057,"arcs":[[3486,3487,3488,-3357,-3362,-3375]]},{"type":"Polygon","id":18107,"arcs":[[-3359,3489,3490,3491,3492,-3378,-3281]]},{"type":"Polygon","id":17001,"arcs":[[-3445,3493,3494,3495,-3471,-3221]]},{"type":"Polygon","id":39109,"arcs":[[-3455,3496,3497,-3381,-3314]]},{"type":"Polygon","id":54069,"arcs":[[-3319,3498,3499,-3244,-3363]]},{"type":"Polygon","id":34005,"arcs":[[-3324,3500,3501,3502,3503,3504,3505,-3234,-3360]]},{"type":"Polygon","id":18011,"arcs":[[-3489,3506,3507,-3490,-3358]]},{"type":"Polygon","id":39013,"arcs":[[-3245,-3500,3508,3509,3510,-3486,-3354]]},{"type":"MultiPolygon","id":34029,"arcs":[[[3511,-3501,-3323]]]},{"type":"Polygon","id":39119,"arcs":[[-3485,3512,3513,3514,-3449,-3328]]},{"type":"Polygon","id":42057,"arcs":[[-3437,3515,3516,-3422,-3127]]},{"type":"Polygon","id":17129,"arcs":[[-3421,3517,3518,-3351]]},{"type":"Polygon","id":6007,"arcs":[[3519,3520,3521,3522,-3334,-3339]]},{"type":"Polygon","id":18165,"arcs":[[-3380,3523,3524,3525,-3305,-3322]]},{"type":"Polygon","id":42051,"arcs":[[-3440,3526,3527,3528,3529,-3316,-3194]]},{"type":"Polygon","id":39049,"arcs":[[-3452,3530,3531,3532,-3300,-3341]]},{"type":"Polygon","id":42101,"arcs":[[-3506,3533,3534,-3330,-3235]]},{"type":"Polygon","id":29061,"arcs":[[-3266,-3458,3535,3536,3537,-3369]]},{"type":"Polygon","id":29003,"arcs":[[-3371,3538,3539,3540,-3469,-3260]]},{"type":"Polygon","id":32033,"arcs":[[-2897,3541,3542,3543,3544,-2968,-2336]]},{"type":"Polygon","id":17017,"arcs":[[-3352,-3519,3545,3546,3547,-3443]]},{"type":"Polygon","id":39097,"arcs":[[3548,3549,3550,3551,-3453,-3301,-3533]]},{"type":"Polygon","id":17009,"arcs":[[-3548,3552,3553,-3494,-3444]]},{"type":"Polygon","id":8045,"arcs":[[-2951,3554,3555,3556,3557,-3077,-3483]]},{"type":"Polygon","id":18065,"arcs":[[-3430,3558,3559,3560,3561,-3373,-3377]]},{"type":"Polygon","id":42001,"arcs":[[3562,3563,-3434,-3416,-3482]]},{"type":"Polygon","id":42045,"arcs":[[-3535,3564,3565,-3474,3566,-3476,-3331]]},{"type":"Polygon","id":17115,"arcs":[[-3448,3567,3568,3569,3570,-3419,-3442]]},{"type":"Polygon","id":8014,"arcs":[[3571,3572,-3459,-2941],[-2938]]},{"type":"Polygon","id":29121,"arcs":[[-3433,3573,3574,3575,3576,3577,-3413]]},{"type":"Polygon","id":39023,"arcs":[[-3552,3578,3579,-3497,-3454]]},{"type":"Polygon","id":29115,"arcs":[[-3578,3580,3581,-3456,-3367,-3414]]},{"type":"Polygon","id":29063,"arcs":[[-3538,3582,3583,3584,-3539,-3370]]},{"type":"Polygon","id":54051,"arcs":[[3585,3586,-3509,-3499,-3318,3587]]},{"type":"Polygon","id":42059,"arcs":[[-3530,3588,3589,-3588,-3317]]},{"type":"Polygon","id":49023,"arcs":[[-3264,3590,3591,-3542,-2896]]},{"type":"Polygon","id":18177,"arcs":[[-3384,3592,3593,3594,-3559,-3429]]},{"type":"Polygon","id":20023,"arcs":[[3595,3596,3597,-3343,-3398]]},{"type":"Polygon","id":20153,"arcs":[[-3407,3598,3599,3600,-3596,-3397,-3409]]},{"type":"Polygon","id":6045,"arcs":[[-2723,-3336,3601,3602,3603,3604,-2658]]},{"type":"Polygon","id":20089,"arcs":[[3605,3606,3607,3608,3609,-3387,-3395]]},{"type":"Polygon","id":20183,"arcs":[[-3610,3610,3611,3612,-3390,-3388]]},{"type":"Polygon","id":20157,"arcs":[[3613,3614,-3606,-3394,-3404]]},{"type":"Polygon","id":20201,"arcs":[[-3297,3615,3616,3617,3618,-3614,-3405]]},{"type":"Polygon","id":20039,"arcs":[[-3401,3619,3620,3621,-3599,-3406]]},{"type":"Polygon","id":32001,"arcs":[[-2972,3622,3623,3624,-2361,-3005]]},{"type":"Polygon","id":20137,"arcs":[[3625,3626,3627,-3620,-3400,-3411]]},{"type":"Polygon","id":20147,"arcs":[[-3613,3628,3629,-3626,-3410,-3391]]},{"type":"Polygon","id":20117,"arcs":[[-3464,3630,3631,3632,-3616,-3296]]},{"type":"Polygon","id":8001,"arcs":[[-3349,3633,3634,3635,-3572,-2940,-3293]]},{"type":"Polygon","id":20013,"arcs":[[3636,3637,3638,3639,-3467]]},{"type":"Polygon","id":20131,"arcs":[[-3468,-3640,3640,3641,-3631,-3463]]},{"type":"Polygon","id":20043,"arcs":[[-3470,-3541,3642,3643,-3637,-3466]]},{"type":"MultiPolygon","id":34007,"arcs":[[[3644,3645,3646,-3504]]]},{"type":"Polygon","id":17167,"arcs":[[-3571,3647,3648,3649,3650,-3546,-3518,-3420]]},{"type":"Polygon","id":29117,"arcs":[[3651,3652,3653,-3536,-3457,-3582]]},{"type":"Polygon","id":29205,"arcs":[[-3473,3654,3655,-3574,-3432]]},{"type":"Polygon","id":18121,"arcs":[[-3493,3656,3657,3658,-3524,-3379]]},{"type":"Polygon","id":39121,"arcs":[[-3511,3659,3660,3661,-3513,-3484]]},{"type":"Polygon","id":29127,"arcs":[[-3496,3662,3663,3664,-3655,-3472]]},{"type":"Polygon","id":18059,"arcs":[[-3562,3665,3666,3667,-3487,-3374]]},{"type":"Polygon","id":39045,"arcs":[[-3451,3668,3669,3670,-3531]]},{"type":"Polygon","id":8047,"arcs":[[3671,3672,-3309,-3461]]},{"type":"Polygon","id":39127,"arcs":[[3673,3674,3675,-3669,-3450,-3515]]},{"type":"Polygon","id":18097,"arcs":[[-3668,3676,3677,3678,3679,-3507,-3488]]},{"type":"Polygon","id":8037,"arcs":[[3680,3681,3682,-3555,-2950,-3312]]},{"type":"Polygon","id":8117,"arcs":[[3683,3684,3685,-3681,-3311]]},{"type":"Polygon","id":18063,"arcs":[[-3680,3686,3687,-3491,-3508]]},{"type":"Polygon","id":39113,"arcs":[[-3580,3688,3689,3690,3691,-3382,-3498]]},{"type":"Polygon","id":39135,"arcs":[[-3692,3692,3693,-3593,-3383]]},{"type":"Polygon","id":8059,"arcs":[[-3636,3694,3695,3696,3697,3698,3699,-3672,-3460,-3573]]},{"type":"Polygon","id":8031,"arcs":[[3700,-3695,-3635]]},{"type":"MultiPolygon","id":34015,"arcs":[[[3701,3702,3703,3704,-3646]]]},{"type":"Polygon","id":17045,"arcs":[[3705,3706,3707,3708,-3306,-3526]]},{"type":"Polygon","id":17041,"arcs":[[-3709,3709,3710,-3446,-3364]]},{"type":"Polygon","id":17137,"arcs":[[-3651,3711,3712,3713,3714,-3553,-3547]]},{"type":"Polygon","id":39111,"arcs":[[-3587,3715,3716,3717,-3660,-3510]]},{"type":"Polygon","id":18133,"arcs":[[-3688,3718,3719,3720,-3657,-3492]]},{"type":"Polygon","id":8019,"arcs":[[-3700,3721,-3684,-3310,-3673]]},{"type":"Polygon","id":39057,"arcs":[[-3551,3722,3723,3724,-3689,-3579]]},{"type":"Polygon","id":17149,"arcs":[[-3715,3725,3726,3727,3728,3729,-3663,-3495,-3554]]},{"type":"MultiPolygon","id":10003,"arcs":[[[3730,3731]],[[3732,3733]],[[3734,3735,3736,3737,-3477,-3567,-3475,-3566]]]},{"type":"Polygon","id":17021,"arcs":[[-3570,3738,3739,-3648]]},{"type":"Polygon","id":29021,"arcs":[[-3585,3740,3741,3742,-3643,-3540]]},{"type":"Polygon","id":49007,"arcs":[[-3087,-3080,3743,3744,-3262]]},{"type":"Polygon","id":49039,"arcs":[[-3745,3745,3746,3747,-3591,-3263]]},{"type":"Polygon","id":39129,"arcs":[[-3671,3748,3749,3750,-3549,-3532]]},{"type":"Polygon","id":6021,"arcs":[[-3523,3751,3752,-3602,-3335]]},{"type":"Polygon","id":17139,"arcs":[[-3711,3753,3754,-3568,-3447]]},{"type":"Polygon","id":18041,"arcs":[[3755,3756,3757,-3560,-3595]]},{"type":"Polygon","id":18139,"arcs":[[-3758,3758,3759,3760,-3666,-3561]]},{"type":"Polygon","id":17171,"arcs":[[3761,-3726,-3714]]},{"type":"Polygon","id":29025,"arcs":[[-3654,3762,3763,3764,-3583,-3537]]},{"type":"MultiPolygon","id":34033,"arcs":[[[3765,3766]],[[3767,3768,-3732,3769,-3734,3770,-3704]]]},{"type":"Polygon","id":6091,"arcs":[[-2807,-2367,3771,3772,-3337]]},{"type":"Polygon","id":39115,"arcs":[[-3662,3773,3774,-3674,-3514]]},{"type":"Polygon","id":29049,"arcs":[[-3765,3775,3776,3777,-3741,-3584]]},{"type":"Polygon","id":8005,"arcs":[[-3348,3778,3779,3780,-3696,-3701,-3634]]},{"type":"Polygon","id":32019,"arcs":[[3781,3782,3783,3784,3785,-2362,-3625]]},{"type":"MultiPolygon","id":34001,"arcs":[[[3786,3787,3788,-3702,-3645,-3503]]]},{"type":"Polygon","id":18161,"arcs":[[-3694,3789,3790,-3756,-3594]]},{"type":"Polygon","id":24043,"arcs":[[-3436,3791,3792,3793,3794,3795,3796,-3516]]},{"type":"Polygon","id":24001,"arcs":[[-3517,-3797,3797,3798,3799,3800,-3438,-3423]]},{"type":"Polygon","id":24023,"arcs":[[-3801,3801,3802,3803,-3527,-3439]]},{"type":"MultiPolygon","id":24015,"arcs":[[[-3738,3804,3805,3806,-3426,-3478]]]},{"type":"Polygon","id":54061,"arcs":[[-3529,3807,3808,3809,3810,-3589]]},{"type":"Polygon","id":54077,"arcs":[[-3804,3811,3812,3813,3814,-3808,-3528]]},{"type":"MultiPolygon","id":24025,"arcs":[[[-3427,-3807,3815,3816,-3479]]]},{"type":"Polygon","id":54103,"arcs":[[-3590,-3811,3817,3818,3819,3820,-3716,-3586]]},{"type":"MultiPolygon","id":24005,"arcs":[[[-3817,3821,3822,3823,3824,3825,-3480]]]},{"type":"Polygon","id":24013,"arcs":[[-3826,3826,3827,-3563,-3481]]},{"type":"Polygon","id":24021,"arcs":[[-3828,3828,3829,3830,-3792,-3435,-3564]]},{"type":"Polygon","id":39047,"arcs":[[-3751,3831,3832,3833,-3723,-3550]]},{"type":"Polygon","id":49015,"arcs":[[-3079,3834,3835,3836,-3746,-3744]]},{"type":"Polygon","id":29041,"arcs":[[-3577,3837,3838,3839,3840,-3652,-3581]]},{"type":"Polygon","id":18145,"arcs":[[-3761,3841,3842,3843,-3677,-3667]]},{"type":"Polygon","id":54065,"arcs":[[3844,3845,3846,-3798,-3796]]},{"type":"Polygon","id":29173,"arcs":[[-3730,3847,3848,3849,-3664]]},{"type":"Polygon","id":17029,"arcs":[[-3708,3850,3851,3852,-3754,-3710]]},{"type":"Polygon","id":29137,"arcs":[[-3665,-3850,3853,3854,-3575,-3656]]},{"type":"Polygon","id":39073,"arcs":[[3855,3856,3857,-3749,-3670,-3676]]},{"type":"Polygon","id":20029,"arcs":[[-3619,3858,3859,3860,-3607,-3615]]},{"type":"Polygon","id":20085,"arcs":[[3861,3862,3863,3864,-3641,-3639]]},{"type":"Polygon","id":20005,"arcs":[[-3743,3865,3866,3867,-3862,-3638,-3644]]},{"type":"Polygon","id":17173,"arcs":[[-3755,-3853,3868,3869,3870,3871,-3739,-3569]]},{"type":"Polygon","id":54057,"arcs":[[3872,3873,-3802,-3800]]},{"type":"Polygon","id":39167,"arcs":[[-3718,3874,3875,3876,3877,-3774,-3661]]},{"type":"Polygon","id":54049,"arcs":[[-3810,3878,3879,-3818]]},{"type":"Polygon","id":18081,"arcs":[[-3844,3880,3881,3882,-3678]]},{"type":"Polygon","id":6115,"arcs":[[-3773,3883,3884,3885,-3520,-3338]]},{"type":"Polygon","id":18109,"arcs":[[-3883,3886,3887,3888,-3719,-3687,-3679]]},{"type":"Polygon","id":32029,"arcs":[[-2363,-3786]]},{"type":"Polygon","id":54003,"arcs":[[-3795,3889,3890,-3845]]},{"type":"Polygon","id":29033,"arcs":[[-3841,3891,3892,3893,-3763,-3653]]},{"type":"Polygon","id":29175,"arcs":[[-3855,3894,3895,3896,-3838,-3576]]},{"type":"Polygon","id":18167,"arcs":[[3897,3898,3899,-3706,-3525,-3659]]},{"type":"Polygon","id":18021,"arcs":[[-3721,3900,3901,3902,-3898,-3658]]},{"type":"Polygon","id":54095,"arcs":[[3903,3904,3905,-3875,-3717,-3821]]},{"type":"Polygon","id":29163,"arcs":[[3906,3907,3908,-3848,-3729,3909]]},{"type":"Polygon","id":39017,"arcs":[[3910,3911,3912,-3790,-3693,-3691]]},{"type":"Polygon","id":39165,"arcs":[[-3725,3913,3914,3915,-3911,-3690]]},{"type":"Polygon","id":6033,"arcs":[[3916,3917,3918,3919,-3603,-3753]]},{"type":"Polygon","id":8063,"arcs":[[-3598,3920,3921,3922,3923,-3346,-3344]]},{"type":"MultiPolygon","id":34011,"arcs":[[[3924,-3767,3925,-3768,-3703,-3789,3926,3927]]]},{"type":"Polygon","id":20163,"arcs":[[3928,3929,3930,3931,-3629,-3612]]},{"type":"Polygon","id":39027,"arcs":[[3932,3933,-3914,-3724,-3834,3934]]},{"type":"Polygon","id":20181,"arcs":[[-3601,3935,3936,3937,-3921,-3597]]},{"type":"Polygon","id":20193,"arcs":[[-3622,3938,3939,3940,-3936,-3600]]},{"type":"Polygon","id":20141,"arcs":[[-3609,3941,3942,3943,3944,-3929,-3611]]},{"type":"Polygon","id":20179,"arcs":[[-3628,3945,3946,-3939,-3621]]},{"type":"Polygon","id":20027,"arcs":[[3947,3948,3949,3950,-3859,-3618]]},{"type":"Polygon","id":20123,"arcs":[[-3861,3951,3952,-3942,-3608]]},{"type":"Polygon","id":20065,"arcs":[[-3932,3953,3954,-3946,-3627,-3630]]},{"type":"Polygon","id":20161,"arcs":[[3955,3956,3957,-3948,-3617,-3633]]},{"type":"Polygon","id":8035,"arcs":[[3958,3959,3960,-3697,-3781]]},{"type":"Polygon","id":8039,"arcs":[[3961,3962,-3959,-3780]]},{"type":"Polygon","id":20149,"arcs":[[-3642,-3865,3963,3964,-3956,-3632]]},{"type":"Polygon","id":8073,"arcs":[[-3924,3965,3966,3967,3968,-3962,-3779,-3347]]},{"type":"Polygon","id":8093,"arcs":[[-3699,3969,3970,3971,3972,-3685,-3722]]},{"type":"Polygon","id":39009,"arcs":[[-3878,3973,3974,3975,-3856,-3675,-3775]]},{"type":"Polygon","id":49027,"arcs":[[-3748,3976,3977,3978,-3543,-3592]]},{"type":"Polygon","id":54027,"arcs":[[-3847,3979,3980,-3873,-3799]]},{"type":"Polygon","id":29165,"arcs":[[-3742,-3778,3981,3982,3983,-3866]]},{"type":"Polygon","id":18047,"arcs":[[-3791,-3913,3984,3985,3986,-3759,-3757]]},{"type":"Polygon","id":29177,"arcs":[[-3894,3987,3988,3989,-3776,-3764]]},{"type":"Polygon","id":17135,"arcs":[[-3740,-3872,3990,3991,3992,3993,-3649]]},{"type":"Polygon","id":17117,"arcs":[[-3994,3994,3995,3996,-3712,-3650]]},{"type":"Polygon","id":6057,"arcs":[[-2366,3997,-3884,-3772]]},{"type":"Polygon","id":17061,"arcs":[[-3713,-3997,3998,3999,-3727,-3762]]},{"type":"Polygon","id":39141,"arcs":[[-3858,4000,4001,4002,4003,-3832,-3750]]},{"type":"Polygon","id":54037,"arcs":[[4004,4005,-3890,-3794]]},{"type":"Polygon","id":49019,"arcs":[[-3558,4006,4007,-3835,-3078]]},{"type":"Polygon","id":17023,"arcs":[[-3900,4008,4009,4010,4011,-3851,-3707]]},{"type":"Polygon","id":54073,"arcs":[[4012,4013,-3876,-3906]]},{"type":"Polygon","id":18119,"arcs":[[-3889,4014,4015,-3901,-3720]]},{"type":"Polygon","id":54033,"arcs":[[4016,4017,4018,4019,4020,-3819,-3880]]},{"type":"Polygon","id":51069,"arcs":[[4021,4022,4023,4024,-3980,-3846,-3891],[4025]]},{"type":"Polygon","id":29047,"arcs":[[-3777,-3990,4026,4027,-3982]]},{"type":"Polygon","id":18031,"arcs":[[-3987,4028,4029,4030,-3842,-3760]]},{"type":"Polygon","id":54091,"arcs":[[4031,-4017,-3879,-3809,-3815]]},{"type":"Polygon","id":54017,"arcs":[[-4021,4032,4033,4034,-3904,-3820]]},{"type":"Polygon","id":20087,"arcs":[[4035,4036,4037,-3863,-3868]]},{"type":"Polygon","id":20103,"arcs":[[-3984,4038,4039,4040,-4036,-3867]]},{"type":"Polygon","id":6011,"arcs":[[-3522,4041,4042,-3917,-3752]]},{"type":"Polygon","id":29195,"arcs":[[-3840,4043,4044,4045,4046,-3892]]},{"type":"Polygon","id":54107,"arcs":[[-4014,4047,4048,4049,4050,-3974,-3877]]},{"type":"Polygon","id":17013,"arcs":[[-4000,4051,4052,4053,-3910,-3728]]},{"type":"Polygon","id":39163,"arcs":[[-3976,4054,4055,4056,-4001,-3857]]},{"type":"Polygon","id":54085,"arcs":[[-4035,4057,4058,4059,-4048,-4013,-3905]]},{"type":"MultiPolygon","id":24029,"arcs":[[[-3737,4060,4061,4062,-3805]]]},{"type":"Polygon","id":8065,"arcs":[[-3686,-3973,4063,4064,-3682]]},{"type":"Polygon","id":17035,"arcs":[[-4012,4065,4066,-3869,-3852]]},{"type":"Polygon","id":39071,"arcs":[[-4004,4067,4068,4069,-3935,-3833]]},{"type":"MultiPolygon","id":24510,"arcs":[[[4070,4071]],[[4072,4073,-3823]]]},{"type":"Polygon","id":24027,"arcs":[[-3825,4074,4075,4076,-3829,-3827]]},{"type":"Polygon","id":8077,"arcs":[[4077,4078,4079,4080,-4007,-3557]]},{"type":"Polygon","id":8097,"arcs":[[-4065,4081,4082,-4078,-3556,-3683]]},{"type":"Polygon","id":10001,"arcs":[[4083,4084,4085,-4061,-3736,4086]]},{"type":"Polygon","id":18105,"arcs":[[4087,4088,4089,4090,-4015,-3888]]},{"type":"Polygon","id":18005,"arcs":[[-4031,4091,4092,4093,-3881,-3843]]},{"type":"Polygon","id":29007,"arcs":[[-3849,-3909,4094,4095,4096,-3895,-3854]]},{"type":"Polygon","id":24031,"arcs":[[4097,4098,4099,4100,-3830,-4077]]},{"type":"Polygon","id":18013,"arcs":[[-4094,4101,-4088,-3887,-3882]]},{"type":"Polygon","id":29089,"arcs":[[4102,-4044,-3839,-3897,4103]]},{"type":"Polygon","id":54023,"arcs":[[4104,4105,4106,4107,-3812,-3803,-3874]]},{"type":"MultiPolygon","id":34009,"arcs":[[[4108,-3927,-3788]]]},{"type":"Polygon","id":51107,"arcs":[[-4101,4109,4110,4111,4112,-4005,-3793,-3831]]},{"type":"Polygon","id":6061,"arcs":[[-2365,4113,4114,4115,4116,4117,-3885,-3998]]},{"type":"Polygon","id":39061,"arcs":[[-3916,4118,4119,4120,4121,4122,-3912]]},{"type":"Polygon","id":18137,"arcs":[[4123,4124,4125,4126,4127,-4029,-3986]]},{"type":"Polygon","id":18029,"arcs":[[-3985,-4123,4128,4129,-4124]]},{"type":"Polygon","id":20143,"arcs":[[-3951,4130,4131,4132,-3952,-3860]]},{"type":"Polygon","id":6101,"arcs":[[-3886,-4118,4133,4134,-4042,-3521]]},{"type":"Polygon","id":54001,"arcs":[[4135,4136,4137,-4018,-4032,-3814]]},{"type":"Polygon","id":29107,"arcs":[[4138,4139,4140,-3988,-3893,-4047]]},{"type":"Polygon","id":54093,"arcs":[[4141,-4136,-3813,-4108]]},{"type":"Polygon","id":39025,"arcs":[[4142,4143,4144,-4119,-3915,-3934,4145]]},{"type":"Polygon","id":51043,"arcs":[[-4113,4146,4147,-4022,-4006]]},{"type":"Polygon","id":17083,"arcs":[[-3996,4148,4149,-4052,-3999]]},{"type":"MultiPolygon","id":24035,"arcs":[[[4150]],[[-4086,4151,4152,4153,-4062]]]},{"type":"Polygon","id":18153,"arcs":[[-3903,4154,4155,4156,-4009,-3899]]},{"type":"Polygon","id":8051,"arcs":[[-4083,4157,4158,4159,4160,4161,4162,-4079]]},{"type":"Polygon","id":39015,"arcs":[[4163,4164,4165,-4146,-3933,-4070]]},{"type":"Polygon","id":29019,"arcs":[[-4097,4166,4167,4168,4169,-4104,-3896]]},{"type":"Polygon","id":32510,"arcs":[[4170,-4114,-2364,-3785]]},{"type":"Polygon","id":54031,"arcs":[[-4025,4171,4172,4173,-4105,-3981]]},{"type":"MultiPolygon","id":24003,"arcs":[[[4174,4175,4176,-4075,-3824,-4074,4177,-4071,4178]]]},{"type":"Polygon","id":29095,"arcs":[[-3989,-4141,4179,4180,4181,4182,-4027]]},{"type":"Polygon","id":29113,"arcs":[[-4054,4183,4184,4185,-3907]]},{"type":"Polygon","id":20061,"arcs":[[4186,4187,4188,-3949,-3958]]},{"type":"Polygon","id":8029,"arcs":[[-4163,4189,-4080]]},{"type":"Polygon","id":20105,"arcs":[[-4133,4190,4191,4192,-3943,-3953]]},{"type":"Polygon","id":20177,"arcs":[[-4038,4193,4194,4195,-3964,-3864]]},{"type":"Polygon","id":17051,"arcs":[[-3871,4196,4197,4198,4199,4200,-3991]]},{"type":"Polygon","id":17049,"arcs":[[-4067,4201,4202,-4197,-3870]]},{"type":"Polygon","id":20197,"arcs":[[-4196,4203,4204,4205,-4187,-3957,-3965]]},{"type":"Polygon","id":39079,"arcs":[[4206,4207,4208,4209,-4002,-4057]]},{"type":"Polygon","id":39105,"arcs":[[4210,4211,-4055,-3975,-4051,4212]]},{"type":"Polygon","id":51840,"arcs":[[-4026]]},{"type":"Polygon","id":20209,"arcs":[[-3983,-4028,-4183,4213,-4039]]},{"type":"Polygon","id":39131,"arcs":[[4214,4215,-4068,-4003,-4210]]},{"type":"Polygon","id":18079,"arcs":[[4216,4217,4218,-4092,-4030,-4128]]},{"type":"Polygon","id":54105,"arcs":[[4219,4220,4221,-4049,-4060]]},{"type":"Polygon","id":17033,"arcs":[[-4157,4222,4223,4224,4225,-4010]]},{"type":"Polygon","id":17079,"arcs":[[-4226,4226,4227,-4202,-4066,-4011]]},{"type":"Polygon","id":18055,"arcs":[[-4016,-4091,4228,4229,4230,4231,-4155,-3902]]},{"type":"Polygon","id":54041,"arcs":[[4232,4233,4234,4235,-4033,-4020]]},{"type":"Polygon","id":32023,"arcs":[[-2969,-3545,4236,4237,4238,4239,4240,-3623,-2971]]},{"type":"Polygon","id":29139,"arcs":[[-3908,-4186,4241,4242,4243,4244,-4095]]},{"type":"Polygon","id":21015,"arcs":[[4245,4246,4247,4248,4249,-4129,-4122]]},{"type":"Polygon","id":24011,"arcs":[[4250,4251,4252,4253,-4152,-4085]]},{"type":"Polygon","id":20109,"arcs":[[4254,4255,4256,4257,-3937,-3941]]},{"type":"Polygon","id":20199,"arcs":[[-4258,4258,4259,4260,-3922,-3938]]},{"type":"Polygon","id":20051,"arcs":[[-3945,4261,4262,4263,4264,-3930]]},{"type":"Polygon","id":20063,"arcs":[[-3947,-3955,4265,4266,4267,4268,-4255,-3940]]},{"type":"Polygon","id":20041,"arcs":[[-4189,4269,4270,4271,-4131,-3950]]},{"type":"Polygon","id":20167,"arcs":[[-4193,4272,4273,4274,-4262,-3944]]},{"type":"Polygon","id":20195,"arcs":[[-3931,-4265,4275,-4266,-3954]]},{"type":"Polygon","id":24033,"arcs":[[-4177,4276,4277,4278,4279,4280,-4098,-4076]]},{"type":"Polygon","id":8119,"arcs":[[4281,4282,-3970,-3698,-3961]]},{"type":"Polygon","id":8041,"arcs":[[-3963,-3969,4283,4284,-4282,-3960]]},{"type":"Polygon","id":21037,"arcs":[[-4145,4285,4286,-4120]]},{"type":"Polygon","id":54083,"arcs":[[-4107,4287,4288,4289,4290,-4137,-4142]]},{"type":"Polygon","id":32005,"arcs":[[-3784,4291,4292,4293,-4115,-4171]]},{"type":"Polygon","id":54097,"arcs":[[-4138,-4291,4294,-4233,-4019]]},{"type":"Polygon","id":54021,"arcs":[[-4236,4295,4296,-4058,-4034]]},{"type":"Polygon","id":51171,"arcs":[[4297,4298,4299,-4172,-4024]]},{"type":"Polygon","id":21117,"arcs":[[-4287,4300,4301,-4246,-4121]]},{"type":"Polygon","id":54035,"arcs":[[-4222,4302,4303,4304,4305,-4213,-4050]]},{"type":"Polygon","id":32021,"arcs":[[-4241,4306,4307,-3782,-3624]]},{"type":"Polygon","id":18071,"arcs":[[-4219,4308,4309,4310,-4089,-4102,-4093]]},{"type":"Polygon","id":20045,"arcs":[[-4041,4311,4312,4313,-4194,-4037]]},{"type":"Polygon","id":6017,"arcs":[[-4294,4314,4315,4316,-4116]]},{"type":"Polygon","id":29027,"arcs":[[-4096,-4245,4317,4318,-4167]]},{"type":"Polygon","id":29053,"arcs":[[-4170,4319,4320,4321,-4045,-4103]]},{"type":"MultiPolygon","id":51059,"arcs":[[[4322,4323,4324,4325,4326,4327,-4110,-4100],[4328]],[[4329]]]},{"type":"Polygon","id":8015,"arcs":[[-3972,4330,4331,-4158,-4082,-4064]]},{"type":"Polygon","id":20091,"arcs":[[-4182,4332,4333,-4312,-4040,-4214]]},{"type":"Polygon","id":39001,"arcs":[[4334,4335,4336,-4164,-4069,-4216]]},{"type":"Polygon","id":49041,"arcs":[[-3837,4337,4338,4339,-3977,-3747]]},{"type":"Polygon","id":8017,"arcs":[[-4261,4340,4341,-3966,-3923]]},{"type":"Polygon","id":54013,"arcs":[[-4297,4342,4343,4344,-4220,-4059]]},{"type":"Polygon","id":51187,"arcs":[[4345,4346,4347,-4298,-4023,-4148]]},{"type":"Polygon","id":39053,"arcs":[[4348,4349,4350,-4207,-4056,-4212]]},{"type":"Polygon","id":18115,"arcs":[[4351,-4125,-4130,-4250]]},{"type":"Polygon","id":54053,"arcs":[[-4306,4352,4353,-4349,-4211]]},{"type":"Polygon","id":17005,"arcs":[[-4201,4354,4355,-3992]]},{"type":"Polygon","id":39145,"arcs":[[-4209,4356,4357,4358,-4335,-4215]]},{"type":"Polygon","id":51061,"arcs":[[4359,4360,4361,4362,-4346,-4147,-4112]]},{"type":"Polygon","id":17119,"arcs":[[-3995,-3993,-4356,4363,4364,4365,4366,4367,-4149]]},{"type":"Polygon","id":29219,"arcs":[[4368,4369,4370,-4242,-4185]]},{"type":"MultiPolygon","id":11001,"arcs":[[[4371,4372,-4099,-4281]]]},{"type":"Polygon","id":18093,"arcs":[[-4311,4373,4374,4375,-4229,-4090]]},{"type":"Polygon","id":29183,"arcs":[[-4368,4376,4377,-4369,-4184,-4053,-4150]]},{"type":"Polygon","id":10005,"arcs":[[4378,4379,4380,4381,4382,4383,-4251,-4084]]},{"type":"Polygon","id":20169,"arcs":[[-4272,4384,4385,-4191,-4132]]},{"type":"Polygon","id":54071,"arcs":[[-4174,4386,4387,4388,4389,-4288,-4106]]},{"type":"Polygon","id":29159,"arcs":[[-4322,4390,4391,4392,4393,-4139,-4046]]},{"type":"MultiPolygon","id":24041,"arcs":[[[-4254,4394,-4153]]]},{"type":"Polygon","id":51153,"arcs":[[-4328,4395,4396,-4360,-4111],[4397,4398]]},{"type":"Polygon","id":54087,"arcs":[[-4345,4399,4400,-4303,-4221]]},{"type":"Polygon","id":29101,"arcs":[[-4394,4401,4402,-4180,-4140]]},{"type":"Polygon","id":51013,"arcs":[[4403,-4325,4404,-4323,-4373,4405]]},{"type":"Polygon","id":6003,"arcs":[[4406,4407,4408,4409,-4315,-4293]]},{"type":"Polygon","id":18155,"arcs":[[-4249,4410,4411,4412,-4126,-4352]]},{"type":"Polygon","id":29135,"arcs":[[4413,4414,4415,-4320,-4169]]},{"type":"Polygon","id":6113,"arcs":[[-4135,4416,4417,4418,-3918,-4043]]},{"type":"Polygon","id":18077,"arcs":[[-4413,4419,4420,4421,4422,-4217,-4127]]},{"type":"Polygon","id":17025,"arcs":[[-4228,4423,4424,4425,-4198,-4203]]},{"type":"Polygon","id":18083,"arcs":[[4426,4427,4428,4429,4430,-4223,-4156,-4232]]},{"type":"Polygon","id":18101,"arcs":[[-4376,4431,4432,4433,-4230]]},{"type":"Polygon","id":18027,"arcs":[[4434,4435,-4427,-4231,-4434]]},{"type":"Polygon","id":54007,"arcs":[[-4235,4436,4437,4438,-4343,-4296]]},{"type":"Polygon","id":51610,"arcs":[[-4324,-4405]]},{"type":"Polygon","id":29189,"arcs":[[-4367,4439,4440,4441,4442,4443,-4377]]},{"type":"Polygon","id":21191,"arcs":[[4444,4445,-4301,-4286,-4144,4446]]},{"type":"Polygon","id":20127,"arcs":[[-4206,4447,4448,4449,-4270,-4188]]},{"type":"Polygon","id":20053,"arcs":[[-4386,4450,4451,4452,-4273,-4192]]},{"type":"Polygon","id":20139,"arcs":[[-4314,4453,4454,4455,-4204,-4195]]},{"type":"Polygon","id":51600,"arcs":[[-4329],[-4330]]},{"type":"Polygon","id":6055,"arcs":[[4456,4457,4458,4459,4460,-3919,-4419]]},{"type":"Polygon","id":51157,"arcs":[[4461,4462,4463,-4347,-4363]]},{"type":"Polygon","id":21077,"arcs":[[4464,4465,4466,-4411,-4248]]},{"type":"Polygon","id":6097,"arcs":[[-3920,-4461,4467,4468,4469,-3604]]},{"type":"Polygon","id":17101,"arcs":[[4470,4471,-4224,-4431]]},{"type":"Polygon","id":51165,"arcs":[[-4300,4472,4473,4474,4475,-4387,-4173],[4476]]},{"type":"Polygon","id":17159,"arcs":[[-4225,-4472,4477,4478,4479,-4424,-4227]]},{"type":"Polygon","id":39087,"arcs":[[4480,4481,4482,4483,-4357,-4208,-4351]]},{"type":"Polygon","id":29037,"arcs":[[-4403,4484,4485,4486,-4333,-4181]]},{"type":"Polygon","id":51510,"arcs":[[4487,-4326,-4404]]},{"type":"Polygon","id":51139,"arcs":[[-4464,4488,4489,-4473,-4299,-4348]]},{"type":"Polygon","id":18143,"arcs":[[-4423,4490,4491,-4309,-4218]]},{"type":"Polygon","id":21023,"arcs":[[-4166,4492,4493,4494,-4447,-4143]]},{"type":"Polygon","id":17121,"arcs":[[-4426,4495,4496,4497,4498,-4199]]},{"type":"Polygon","id":21081,"arcs":[[-4302,-4446,4499,4500,4501,-4465,-4247]]},{"type":"Polygon","id":51685,"arcs":[[4502,-4398]]},{"type":"Polygon","id":18175,"arcs":[[-4492,4503,4504,4505,4506,4507,-4374,-4310]]},{"type":"Polygon","id":51683,"arcs":[[-4503,-4399]]},{"type":"Polygon","id":29510,"arcs":[[-4440,-4366,4508]]},{"type":"Polygon","id":24009,"arcs":[[4509,-4277,-4176]]},{"type":"Polygon","id":21161,"arcs":[[-4337,4510,4511,4512,-4493,-4165]]},{"type":"Polygon","id":21041,"arcs":[[4513,4514,4515,-4420,-4412,-4467]]},{"type":"Polygon","id":21089,"arcs":[[-4484,4516,4517,4518,-4358]]},{"type":"Polygon","id":17027,"arcs":[[-4200,-4499,4519,4520,-4364,-4355]]},{"type":"Polygon","id":54075,"arcs":[[-4390,4521,4522,4523,4524,-4289]]},{"type":"Polygon","id":29051,"arcs":[[-4319,4525,4526,-4414,-4168]]},{"type":"Polygon","id":20111,"arcs":[[-4456,4527,4528,4529,-4448,-4205]]},{"type":"Polygon","id":20059,"arcs":[[4530,4531,4532,-4454,-4313]]},{"type":"Polygon","id":20121,"arcs":[[-4487,4533,4534,-4531,-4334]]},{"type":"Polygon","id":54101,"arcs":[[-4295,-4290,-4525,4535,4536,-4437,-4234]]},{"type":"MultiPolygon","id":6067,"arcs":[[[4537,4538,4539,4540,-4417,-4134,-4117,-4317]]]},{"type":"Polygon","id":21223,"arcs":[[-4516,4541,4542,4543,-4421]]},{"type":"Polygon","id":21187,"arcs":[[-4502,4544,4545,4546,-4514,-4466]]},{"type":"Polygon","id":21135,"arcs":[[4547,4548,4549,-4511,-4336,-4359,-4519]]},{"type":"Polygon","id":29073,"arcs":[[-4371,4550,4551,4552,4553,4554,-4243]]},{"type":"Polygon","id":6051,"arcs":[[-3783,-4308,4555,4556,4557,4558,4559,-4407,-4292]]},{"type":"Polygon","id":29071,"arcs":[[-4378,-4444,4560,4561,4562,-4551,-4370]]},{"type":"Polygon","id":29151,"arcs":[[-4244,-4555,4563,4564,-4526,-4318]]},{"type":"Polygon","id":6005,"arcs":[[-4410,4565,4566,-4538,-4316]]},{"type":"MultiPolygon","id":24019,"arcs":[[[4567,-4252,-4384,4568,4569]]]},{"type":"Polygon","id":20171,"arcs":[[-4269,4570,4571,4572,4573,-4256]]},{"type":"Polygon","id":20101,"arcs":[[4574,4575,-4571,-4268]]},{"type":"Polygon","id":20071,"arcs":[[4576,4577,4578,4579,-4341,-4260]]},{"type":"Polygon","id":20203,"arcs":[[-4574,4580,4581,-4577,-4259,-4257]]},{"type":"Polygon","id":51047,"arcs":[[4582,4583,4584,4585,-4462,-4362]]},{"type":"Polygon","id":20135,"arcs":[[-4276,-4264,4586,4587,4588,4589,-4575,-4267]]},{"type":"Polygon","id":29141,"arcs":[[-4416,4590,4591,4592,-4391,-4321]]},{"type":"Polygon","id":20009,"arcs":[[-4453,4593,4594,4595,4596,-4274]]},{"type":"Polygon","id":8043,"arcs":[[-4285,4597,4598,4599,-4331,-3971,-4283]]},{"type":"Polygon","id":20165,"arcs":[[-4275,-4597,4600,-4587,-4263]]},{"type":"MultiPolygon","id":24017,"arcs":[[[-4279,4601,4602,4603]]]},{"type":"Polygon","id":18117,"arcs":[[-4508,4604,4605,-4432,-4375]]},{"type":"Polygon","id":54079,"arcs":[[4606,4607,-4353,-4305,4608]]},{"type":"Polygon","id":32017,"arcs":[[-3979,4609,4610,4611,4612,4613,-4237,-3544]]},{"type":"Polygon","id":8085,"arcs":[[-4162,4614,4615,4616,-4081,-4190]]},{"type":"Polygon","id":54015,"arcs":[[4617,4618,-4400,-4344,-4439]]},{"type":"Polygon","id":17163,"arcs":[[-4521,4619,4620,4621,-4441,-4509,-4365]]},{"type":"Polygon","id":51113,"arcs":[[-4586,4622,4623,-4489,-4463]]},{"type":"Polygon","id":54039,"arcs":[[-4401,-4619,4624,4625,4626,4627,4628,-4609,-4304]]},{"type":"Polygon","id":8061,"arcs":[[-4580,4629,4630,4631,4632,-3967,-4342]]},{"type":"Polygon","id":20113,"arcs":[[4633,4634,4635,4636,-4451,-4385]]},{"type":"Polygon","id":20115,"arcs":[[-4450,4637,4638,4639,-4634,-4271]]},{"type":"Polygon","id":21201,"arcs":[[-4513,4640,4641,4642,-4494]]},{"type":"Polygon","id":17191,"arcs":[[-4480,4643,4644,4645,4646,-4496,-4425]]},{"type":"Polygon","id":18019,"arcs":[[-4544,4647,4648,4649,-4504,-4491,-4422]]},{"type":"Polygon","id":54011,"arcs":[[-4354,-4608,4650,4651,-4481,-4350]]},{"type":"Polygon","id":21103,"arcs":[[4652,4653,4654,-4542,-4515,-4547]]},{"type":"Polygon","id":51091,"arcs":[[4655,4656,-4522,-4389]]},{"type":"Polygon","id":51179,"arcs":[[4657,4658,4659,4660,4661,4662,-4583,-4361,-4397]]},{"type":"Polygon","id":21097,"arcs":[[-4643,4663,4664,4665,-4500,-4445,-4495]]},{"type":"Polygon","id":49001,"arcs":[[-4340,4666,4667,4668,-4610,-3978]]},{"type":"Polygon","id":17047,"arcs":[[4669,4670,-4644,-4479]]},{"type":"Polygon","id":17185,"arcs":[[-4478,-4471,-4430,4671,4672,-4670]]},{"type":"Polygon","id":29083,"arcs":[[-4393,4673,4674,4675,-4485,-4402]]},{"type":"Polygon","id":24045,"arcs":[[4676,4677,4678,-4569,-4383]]},{"type":"Polygon","id":54067,"arcs":[[-4537,4679,4680,-4625,-4618,-4438]]},{"type":"Polygon","id":18125,"arcs":[[4681,4682,4683,-4428,-4436]]},{"type":"MultiPolygon","id":6095,"arcs":[[[4684,-4459]],[[-4541,4685,-4457,-4418]]]},{"type":"Polygon","id":29015,"arcs":[[-4593,4686,4687,4688,-4674,-4392]]},{"type":"Polygon","id":18051,"arcs":[[4689,4690,4691,4692,-4672,-4429,-4684]]},{"type":"Polygon","id":18037,"arcs":[[-4606,4693,4694,4695,4696,-4682,-4435,-4433]]},{"type":"Polygon","id":21069,"arcs":[[4697,4698,4699,-4641,-4512,-4550]]},{"type":"Polygon","id":21185,"arcs":[[-4655,4700,4701,-4648,-4543]]},{"type":"Polygon","id":20017,"arcs":[[-4530,4702,4703,-4638,-4449]]},{"type":"Polygon","id":8101,"arcs":[[4704,4705,4706,4707,4708,-4598,-4284]]},{"type":"Polygon","id":8025,"arcs":[[-4633,4709,-4705,-3968]]},{"type":"Polygon","id":20159,"arcs":[[-4637,4710,4711,-4594,-4452]]},{"type":"Polygon","id":17133,"arcs":[[4712,4713,4714,-4442,-4622]]},{"type":"Polygon","id":17189,"arcs":[[-4498,4715,4716,4717,-4620,-4520]]},{"type":"MultiPolygon","id":24037,"arcs":[[[4718,-4603,4719]]]},{"type":"Polygon","id":6009,"arcs":[[4720,4721,4722,-4566,-4409]]},{"type":"Polygon","id":49031,"arcs":[[4723,4724,-4667,-4339]]},{"type":"Polygon","id":49055,"arcs":[[-3836,4725,4726,-4724,-4338]]},{"type":"Polygon","id":29099,"arcs":[[-4715,4727,4728,4729,-4561,-4443]]},{"type":"Polygon","id":21019,"arcs":[[4730,4731,-4517,-4483,4732]]},{"type":"Polygon","id":21043,"arcs":[[-4732,4733,4734,4735,-4548,-4518]]},{"type":"Polygon","id":49037,"arcs":[[-4617,4736,4737,4738,4739,4740,4741,4742,4743,-4726,-4008]]},{"type":"Polygon","id":21209,"arcs":[[4744,4745,4746,4747,-4545,-4501,-4666]]},{"type":"Polygon","id":51660,"arcs":[[-4477]]},{"type":"Polygon","id":51079,"arcs":[[4748,4749,-4474,-4490,-4624]]},{"type":"Polygon","id":51015,"arcs":[[4750,4751,4752,4753,-4656,-4388,-4476],[4754],[4755]]},{"type":"Polygon","id":17081,"arcs":[[-4647,4756,4757,4758,-4716,-4497]]},{"type":"Polygon","id":29013,"arcs":[[-4676,4759,4760,4761,-4534,-4486]]},{"type":"Polygon","id":32009,"arcs":[[4762,-4556,-4307,-4240]]},{"type":"Polygon","id":21181,"arcs":[[-4700,4763,4764,-4664,-4642]]},{"type":"Polygon","id":8109,"arcs":[[-4600,4765,4766,4767,4768,4769,4770,-4159,-4332]]},{"type":"MultiPolygon","id":24047,"arcs":[[[4771,4772]],[[-4380,4773]],[[4774,4775,4776,4777,-4677,-4382,4778]]]},{"type":"Polygon","id":6109,"arcs":[[-4560,4779,4780,4781,-4721,-4408]]},{"type":"Polygon","id":20031,"arcs":[[-4533,4782,4783,4784,-4528,-4455]]},{"type":"Polygon","id":29131,"arcs":[[-4527,-4565,4785,4786,4787,-4591,-4415]]},{"type":"Polygon","id":18025,"arcs":[[4788,4789,4790,-4694,-4605,-4507]]},{"type":"Polygon","id":18061,"arcs":[[4791,4792,4793,4794,-4789,-4506]]},{"type":"Polygon","id":54099,"arcs":[[-4652,4795,4796,4797,4798,-4733,-4482]]},{"type":"Polygon","id":18043,"arcs":[[-4650,4799,-4792,-4505]]},{"type":"Polygon","id":51099,"arcs":[[4800,4801,4802,4803,-4659,4804]]},{"type":"Polygon","id":21205,"arcs":[[-4736,4805,4806,4807,4808,-4698,-4549]]},{"type":"Polygon","id":51137,"arcs":[[4809,4810,4811,-4749,-4623,-4585]]},{"type":"Polygon","id":20003,"arcs":[[4812,4813,-4783,-4532]]},{"type":"Polygon","id":20107,"arcs":[[-4762,4814,4815,-4813,-4535]]},{"type":"Polygon","id":21111,"arcs":[[4816,4817,4818,4819,-4793,-4800,-4649,-4702]]},{"type":"Polygon","id":51177,"arcs":[[-4663,4820,-4661,4821,4822,4823,-4810,-4584]]},{"type":"Polygon","id":54043,"arcs":[[-4607,-4629,4824,4825,4826,-4796,-4651]]},{"type":"Polygon","id":21073,"arcs":[[-4546,-4748,4827,4828,4829,-4653]]},{"type":"Polygon","id":21017,"arcs":[[4830,4831,4832,-4745,-4665,-4765]]},{"type":"Polygon","id":21211,"arcs":[[4833,4834,-4817,-4701,-4654,-4830]]},{"type":"Polygon","id":20145,"arcs":[[-4596,4835,4836,4837,-4588,-4601]]},{"type":"Polygon","id":8091,"arcs":[[-4161,4838,4839,4840,-4615]]},{"type":"Polygon","id":51630,"arcs":[[-4821,-4662]]},{"type":"MultiPolygon","id":6041,"arcs":[[[4841,-4469]]]},{"type":"Polygon","id":21011,"arcs":[[-4809,4842,4843,-4764,-4699]]},{"type":"Polygon","id":6077,"arcs":[[-4567,-4723,4844,4845,4846,4847,-4539]]},{"type":"Polygon","id":29125,"arcs":[[-4554,4848,4849,-4786,-4564]]},{"type":"MultiPolygon","id":24039,"arcs":[[[4850,4851]],[[4852,4853,4854,4855]],[[4856,4857,4858]],[[4859,-4678,-4778,4860]]]},{"type":"Polygon","id":51003,"arcs":[[-4812,4861,4862,4863,4864,-4751,-4475,-4750],[4865]]},{"type":"MultiPolygon","id":51193,"arcs":[[[4866,4867,4868,-4801,4869]]]},{"type":"Polygon","id":29029,"arcs":[[-4788,4870,4871,4872,4873,-4687,-4592]]},{"type":"Polygon","id":21127,"arcs":[[-4799,4874,4875,4876,4877,-4734,-4731]]},{"type":"Polygon","id":51017,"arcs":[[-4657,-4754,4878,4879,4880,-4523]]},{"type":"Polygon","id":8099,"arcs":[[-4579,4881,4882,4883,4884,-4630]]},{"type":"Polygon","id":54025,"arcs":[[-4881,4885,4886,4887,4888,-4680,-4536,-4524]]},{"type":"Polygon","id":21063,"arcs":[[-4878,4889,-4806,-4735]]},{"type":"Polygon","id":8027,"arcs":[[-4709,4890,-4766,-4599]]},{"type":"Polygon","id":8011,"arcs":[[-4885,4891,4892,4893,-4631]]},{"type":"Polygon","id":8089,"arcs":[[-4894,4894,-4706,-4710,-4632]]},{"type":"Polygon","id":18123,"arcs":[[4895,4896,4897,4898,-4695,-4791]]},{"type":"Polygon","id":54019,"arcs":[[-4681,-4889,4899,4900,-4626]]},{"type":"Polygon","id":20093,"arcs":[[4901,4902,4903,-4581,-4573]]},{"type":"Polygon","id":20055,"arcs":[[-4576,-4590,4904,4905,4906,-4902,-4572]]},{"type":"Polygon","id":20075,"arcs":[[-4904,4907,-4882,-4578,-4582]]},{"type":"Polygon","id":17193,"arcs":[[-4673,-4693,4908,4909,4910,-4645,-4671]]},{"type":"Polygon","id":20185,"arcs":[[-4712,4911,4912,4913,-4836,-4595]]},{"type":"Polygon","id":20083,"arcs":[[-4838,4914,4915,4916,-4905,-4589]]},{"type":"Polygon","id":17065,"arcs":[[-4911,4917,4918,4919,-4757,-4646]]},{"type":"Polygon","id":51033,"arcs":[[-4804,4920,4921,4922,4923,-4822,-4660]]},{"type":"Polygon","id":18173,"arcs":[[-4697,4924,4925,4926,4927,-4690,-4683]]},{"type":"Polygon","id":18129,"arcs":[[4928,4929,4930,4931,-4909,-4692]]},{"type":"Polygon","id":54005,"arcs":[[4932,4933,4934,-4825,-4628]]},{"type":"Polygon","id":17157,"arcs":[[-4621,-4718,4935,4936,4937,4938,-4713]]},{"type":"Polygon","id":29185,"arcs":[[-4689,4939,4940,4941,4942,-4760,-4675]]},{"type":"Polygon","id":17145,"arcs":[[-4717,-4759,4943,4944,-4936]]},{"type":"Polygon","id":29055,"arcs":[[-4563,4945,4946,4947,4948,-4552]]},{"type":"Polygon","id":21067,"arcs":[[4949,4950,4951,4952,-4746,-4833]]},{"type":"Polygon","id":29221,"arcs":[[-4730,4953,4954,-4946,-4562]]},{"type":"Polygon","id":18147,"arcs":[[-4899,4955,4956,-4925,-4696]]},{"type":"Polygon","id":21163,"arcs":[[4957,4958,-4896,-4790,-4795]]},{"type":"Polygon","id":51790,"arcs":[[-4755]]},{"type":"Polygon","id":21239,"arcs":[[-4953,4959,4960,4961,-4828,-4747]]},{"type":"Polygon","id":21173,"arcs":[[4962,4963,4964,-4831,-4844]]},{"type":"Polygon","id":20079,"arcs":[[4965,4966,4967,-4635,-4640]]},{"type":"Polygon","id":20073,"arcs":[[-4529,-4785,4968,4969,4970,4971,-4703]]},{"type":"Polygon","id":20155,"arcs":[[-4636,-4968,4972,4973,4974,-4912,-4711]]},{"type":"Polygon","id":18163,"arcs":[[-4928,4975,-4929,-4691]]},{"type":"Polygon","id":29161,"arcs":[[-4949,4976,4977,4978,-4849,-4553]]},{"type":"Polygon","id":49017,"arcs":[[-4744,4979,4980,-4668,-4725,-4727]]},{"type":"Polygon","id":51057,"arcs":[[4981,4982,-4921,-4803,4983]]},{"type":"Polygon","id":8113,"arcs":[[-4841,4984,4985,-4737,-4616]]},{"type":"Polygon","id":51109,"arcs":[[-4824,4986,4987,4988,-4862,-4811]]},{"type":"Polygon","id":49021,"arcs":[[-4981,4989,4990,-4611,-4669]]},{"type":"Polygon","id":21215,"arcs":[[4991,4992,4993,-4818,-4835]]},{"type":"Polygon","id":8053,"arcs":[[-4771,4994,4995,4996,4997,-4839,-4160]]},{"type":"Polygon","id":21005,"arcs":[[-4962,4998,4999,5000,-4992,-4834,-4829]]},{"type":"Polygon","id":17055,"arcs":[[-4920,5001,5002,5003,-4944,-4758]]},{"type":"Polygon","id":51159,"arcs":[[5004,5005,5006,-4868]]},{"type":"Polygon","id":29186,"arcs":[[-4939,5007,5008,-4728,-4714]]},{"type":"Polygon","id":21029,"arcs":[[5009,5010,-4819,-4994]]},{"type":"Polygon","id":21175,"arcs":[[-4877,5011,5012,5013,5014,-4807,-4890]]},{"type":"Polygon","id":21049,"arcs":[[5015,5016,5017,-4950,-4832,-4965]]},{"type":"MultiPolygon","id":6013,"arcs":[[[-4847,5018,5019]]]},{"type":"Polygon","id":51820,"arcs":[[-4756]]},{"type":"Polygon","id":20015,"arcs":[[-4704,-4972,5020,5021,5022,-4966,-4639]]},{"type":"Polygon","id":20047,"arcs":[[-4914,5023,5024,5025,-4915,-4837]]},{"type":"Polygon","id":51163,"arcs":[[5026,5027,5028,5029,-4879,-4753,5030],[5031],[5032]]},{"type":"Polygon","id":29187,"arcs":[[-5009,5033,5034,5035,-4954,-4729]]},{"type":"Polygon","id":6099,"arcs":[[5036,5037,5038,-4845,-4722,-4782]]},{"type":"Polygon","id":29085,"arcs":[[-4874,5039,5040,-4940,-4688]]},{"type":"Polygon","id":51540,"arcs":[[-4866]]},{"type":"Polygon","id":29217,"arcs":[[-4943,5041,5042,5043,5044,-4815,-4761]]},{"type":"Polygon","id":21165,"arcs":[[-4808,-5015,5045,5046,-4963,-4843]]},{"type":"Polygon","id":51125,"arcs":[[5047,5048,5049,-5031,-4752,-4865]]},{"type":"Polygon","id":21027,"arcs":[[5050,5051,5052,5053,-4897,-4959]]},{"type":"Polygon","id":20207,"arcs":[[5054,5055,-4969,-4784]]},{"type":"Polygon","id":20001,"arcs":[[5056,5057,-5055,-4814]]},{"type":"Polygon","id":20011,"arcs":[[-5045,5058,5059,-5057,-4816]]},{"type":"MultiPolygon","id":51001,"arcs":[[[5060,-4854]],[[5061,-4858]],[[-4851,5062]],[[5063,5064,5065,5066,-4776,5067]],[[-4772,5068]]]},{"type":"Polygon","id":54045,"arcs":[[-4935,5069,5070,-4826]]},{"type":"Polygon","id":51133,"arcs":[[5071,-5005,-4867,5072]]},{"type":"Polygon","id":29169,"arcs":[[-4850,-4979,5073,5074,-4871,-4787]]},{"type":"Polygon","id":8055,"arcs":[[-4708,5075,5076,5077,-4767,-4891]]},{"type":"Polygon","id":51085,"arcs":[[-4924,5078,5079,5080,5081,-4987,-4823]]},{"type":"Polygon","id":51065,"arcs":[[5082,5083,-4863,-4989,5084]]},{"type":"Polygon","id":21093,"arcs":[[5085,5086,5087,5088,-5051,-4958,-4794,-4820,-5011]]},{"type":"Polygon","id":21113,"arcs":[[5089,5090,5091,-4960,-4952]]},{"type":"Polygon","id":21115,"arcs":[[5092,5093,5094,-5012,-4876]]},{"type":"Polygon","id":20069,"arcs":[[-4917,5095,5096,5097,-4906]]},{"type":"Polygon","id":21091,"arcs":[[-5054,5098,5099,-4956,-4898]]},{"type":"Polygon","id":54081,"arcs":[[-4627,-4901,5100,5101,5102,-4933]]},{"type":"Polygon","id":21179,"arcs":[[-5001,5103,5104,5105,-5086,-5010,-4993]]},{"type":"Polygon","id":54059,"arcs":[[5106,5107,5108,5109,5110,-4797,-4827,-5071]]},{"type":"Polygon","id":21101,"arcs":[[-4927,5111,5112,5113,5114,-4930,-4976]]},{"type":"Polygon","id":51097,"arcs":[[-4983,5115,5116,5117,5118,-4922]]},{"type":"Polygon","id":8111,"arcs":[[-4998,5119,5120,-4985,-4840]]},{"type":"Polygon","id":21167,"arcs":[[-5092,5121,5122,5123,-4999,-4961]]},{"type":"Polygon","id":8079,"arcs":[[5124,5125,-4995,-4770]]},{"type":"Polygon","id":21159,"arcs":[[-4798,-5111,5126,5127,-5093,-4875]]},{"type":"Polygon","id":51005,"arcs":[[-5030,5128,5129,5130,-4886,-4880],[5131]]},{"type":"Polygon","id":17077,"arcs":[[-5004,5132,5133,5134,-4937,-4945]]},{"type":"Polygon","id":21197,"arcs":[[-5047,5135,5136,5137,-5016,-4964]]},{"type":"Polygon","id":21059,"arcs":[[5138,5139,-5112,-4926,-4957,-5100]]},{"type":"Polygon","id":21151,"arcs":[[5140,5141,5142,5143,-5090,-4951,-5018]]},{"type":"Polygon","id":17059,"arcs":[[-4932,5144,5145,5146,-4918,-4910]]},{"type":"Polygon","id":21229,"arcs":[[-5124,5147,5148,-5104,-5000]]},{"type":"Polygon","id":20057,"arcs":[[-5026,5149,5150,5151,-5096,-4916]]},{"type":"Polygon","id":20173,"arcs":[[-5023,5152,5153,-4973,-4967]]},{"type":"Polygon","id":17165,"arcs":[[-5147,5154,5155,5156,-5002,-4919]]},{"type":"Polygon","id":51101,"arcs":[[-5119,5157,5158,-5079,-4923]]},{"type":"Polygon","id":29059,"arcs":[[-4873,5159,5160,5161,5162,-5040]]},{"type":"MultiPolygon","id":6001,"arcs":[[[-4846,-5039,5163,5164,-5019]]]},{"type":"Polygon","id":51075,"arcs":[[5165,5166,5167,-5085,-4988,-5082]]},{"type":"Polygon","id":29157,"arcs":[[-5135,5168,5169,5170,5171,-5034,-5008,-4938]]},{"type":"Polygon","id":29039,"arcs":[[5172,5173,5174,-5042,-4942]]},{"type":"Polygon","id":6043,"arcs":[[5175,5176,-4781]]},{"type":"Polygon","id":21225,"arcs":[[5177,5178,5179,-5145,-4931,-5115]]},{"type":"Polygon","id":29105,"arcs":[[-5075,5180,5181,5182,-5160,-4872]]},{"type":"Polygon","id":8033,"arcs":[[-5121,5183,-4738,-4986]]},{"type":"Polygon","id":21153,"arcs":[[-5095,5184,5185,5186,5187,-5013]]},{"type":"Polygon","id":54089,"arcs":[[5188,5189,-5101,-4900,-4888,5190]]},{"type":"Polygon","id":17199,"arcs":[[-5157,5191,5192,-5133,-5003]]},{"type":"Polygon","id":21237,"arcs":[[-5188,5193,5194,-5136,-5046,-5014]]},{"type":"Polygon","id":21065,"arcs":[[-5138,5195,5196,-5141,-5017]]},{"type":"MultiPolygon","id":51103,"arcs":[[[5197,-5006,-5072,5198]]]},{"type":"Polygon","id":8105,"arcs":[[-4769,5199,5200,5201,-5125]]},{"type":"MultiPolygon","id":6075,"arcs":[[[5202,5203]]]},{"type":"Polygon","id":29167,"arcs":[[-5041,-5163,5204,5205,-5173,-4941]]},{"type":"Polygon","id":21079,"arcs":[[-5144,5206,5207,5208,-5122,-5091]]},{"type":"Polygon","id":20151,"arcs":[[-4975,5209,5210,5211,-5024,-4913]]},{"type":"Polygon","id":51580,"arcs":[[-5132]]},{"type":"Polygon","id":51009,"arcs":[[5212,5213,5214,5215,-5027,-5050]]},{"type":"Polygon","id":8071,"arcs":[[-4893,5216,5217,5218,5219,-5076,-4707,-4895]]},{"type":"Polygon","id":51023,"arcs":[[5220,5221,5222,-5129,-5029]]},{"type":"Polygon","id":51678,"arcs":[[-5032]]},{"type":"Polygon","id":29065,"arcs":[[-4948,5223,5224,5225,5226,-4977]]},{"type":"Polygon","id":54109,"arcs":[[5227,5228,-5107,-5070,-4934,-5103]]},{"type":"Polygon","id":51029,"arcs":[[5229,5230,5231,-5048,-4864,-5084]]},{"type":"Polygon","id":6039,"arcs":[[-4559,5232,5233,-5176,-4780]]},{"type":"MultiPolygon","id":51119,"arcs":[[[5234,-5116,-4982,5235]]]},{"type":"Polygon","id":51530,"arcs":[[-5033]]},{"type":"Polygon","id":21071,"arcs":[[-5128,5236,5237,-5185,-5094]]},{"type":"Polygon","id":8003,"arcs":[[-5078,5238,5239,-5200,-4768]]},{"type":"Polygon","id":51049,"arcs":[[-5168,5240,5241,5242,-5230,-5083]]},{"type":"Polygon","id":21195,"arcs":[[5243,5244,5245,5246,5247,-5237,-5127,-5110]]},{"type":"Polygon","id":29093,"arcs":[[-5036,5248,5249,5250,-5224,-4947,-4955]]},{"type":"Polygon","id":20187,"arcs":[[5251,5252,5253,5254,-4883,-4908]]},{"type":"Polygon","id":21183,"arcs":[[-5053,5255,5256,5257,5258,-5139,-5099]]},{"type":"Polygon","id":20067,"arcs":[[5259,5260,-5252,-4903]]},{"type":"Polygon","id":20081,"arcs":[[-5098,5261,5262,5263,-5260,-4907]]},{"type":"Polygon","id":20097,"arcs":[[-5212,5264,5265,5266,-5150,-5025]]},{"type":"Polygon","id":20095,"arcs":[[-5154,5267,5268,5269,-5210,-4974]]},{"type":"Polygon","id":20205,"arcs":[[5270,5271,5272,-4970,-5056]]},{"type":"Polygon","id":20133,"arcs":[[-5060,5273,5274,5275,-5271,-5058]]},{"type":"Polygon","id":21123,"arcs":[[5276,5277,5278,5279,-5087,-5106]]},{"type":"Polygon","id":21155,"arcs":[[-5149,5280,5281,5282,-5277,-5105]]},{"type":"Polygon","id":54063,"arcs":[[-5131,5283,5284,-5191,-4887]]},{"type":"Polygon","id":21129,"arcs":[[-5195,5285,5286,5287,-5196,-5137]]},{"type":"Polygon","id":21021,"arcs":[[-5209,5288,5289,-5281,-5148,-5123]]},{"type":"Polygon","id":51087,"arcs":[[5290,5291,5292,5293,5294,5295,-5166,-5081]]},{"type":"Polygon","id":6081,"arcs":[[5296,5297,5298,5299,-5203]]},{"type":"Polygon","id":21025,"arcs":[[-5187,5300,5301,5302,-5286,-5194]]},{"type":"Polygon","id":51145,"arcs":[[5303,5304,-5241,-5167]]},{"type":"Polygon","id":21149,"arcs":[[-5259,5305,5306,5307,-5113,-5140]]},{"type":"Polygon","id":20037,"arcs":[[-5044,5308,5309,5310,5311,-5274,-5059]]},{"type":"Polygon","id":51045,"arcs":[[5312,5313,5314,-5284,-5130,-5223]]},{"type":"Polygon","id":8023,"arcs":[[-5220,5315,5316,5317,-5239,-5077]]},{"type":"Polygon","id":29011,"arcs":[[-5175,5318,5319,-5309,-5043]]},{"type":"Polygon","id":21233,"arcs":[[5320,5321,5322,-5178,-5114,-5308]]},{"type":"Polygon","id":29123,"arcs":[[-5172,5323,5324,-5249,-5035]]},{"type":"Polygon","id":8009,"arcs":[[-5255,5325,5326,5327,-5217,-4892,-4884]]},{"type":"Polygon","id":8083,"arcs":[[5328,5329,-4739,-5184]]},{"type":"Polygon","id":8067,"arcs":[[-4997,5330,5331,-5329,-5120]]},{"type":"Polygon","id":6047,"arcs":[[-5234,5332,5333,5334,-5037,-5177]]},{"type":"Polygon","id":21137,"arcs":[[5335,5336,5337,-5289,-5208]]},{"type":"Polygon","id":51127,"arcs":[[5338,5339,5340,-5291,-5080,-5159]]},{"type":"Polygon","id":21085,"arcs":[[-5089,5341,5342,5343,-5256,-5052]]},{"type":"Polygon","id":51019,"arcs":[[5344,5345,5346,5347,5348,-5221,-5028,-5216],[5349]]},{"type":"Polygon","id":49053,"arcs":[[5350,5351,-4612,-4991]]},{"type":"Polygon","id":20049,"arcs":[[-5273,5352,5353,5354,-5021,-4971]]},{"type":"Polygon","id":29179,"arcs":[[5355,5356,5357,-5225,-5251]]},{"type":"Polygon","id":29031,"arcs":[[5358,5359,5360,5361,5362,-5170]]},{"type":"Polygon","id":29215,"arcs":[[-4978,-5227,5363,5364,5365,5366,-5181,-5074]]},{"type":"Polygon","id":17069,"arcs":[[-5146,-5180,5367,5368,5369,-5155]]},{"type":"Polygon","id":17151,"arcs":[[-5370,5370,5371,5372,-5156]]},{"type":"Polygon","id":51760,"arcs":[[5373,-5295]]},{"type":"Polygon","id":17087,"arcs":[[-5373,5374,5375,5376,-5192]]},{"type":"Polygon","id":17181,"arcs":[[-5193,-5377,5377,5378,-5359,-5169,-5134]]},{"type":"MultiPolygon","id":51073,"arcs":[[[5379,5380,5381,-5117,-5235]]]},{"type":"Polygon","id":29017,"arcs":[[-5363,5382,5383,-5324,-5171]]},{"type":"Polygon","id":54055,"arcs":[[-5190,5384,5385,5386,5387,-5228,-5102]]},{"type":"Polygon","id":6019,"arcs":[[5388,5389,5390,5391,5392,-5333,-5233,-4558]]},{"type":"Polygon","id":29057,"arcs":[[-5206,5393,5394,5395,-5319,-5174]]},{"type":"Polygon","id":21109,"arcs":[[-5288,5396,5397,5398,5399,-5142,-5197]]},{"type":"Polygon","id":21107,"arcs":[[5400,5401,5402,-5321,-5307]]},{"type":"MultiPolygon","id":51041,"arcs":[[[-5374,-5294,5403,5404,5405,5406,5407,5408,5409,5410,-5304,-5296]]]},{"type":"Polygon","id":51011,"arcs":[[5411,5412,5413,-5213,-5049,-5232]]},{"type":"MultiPolygon","id":51131,"arcs":[[[5414,-5065]]]},{"type":"Polygon","id":21045,"arcs":[[-5338,5415,5416,5417,5418,-5282,-5290]]},{"type":"Polygon","id":54047,"arcs":[[-5388,5419,5420,-5108,-5229]]},{"type":"Polygon","id":21055,"arcs":[[-5323,5421,5422,5423,-5368,-5179]]},{"type":"Polygon","id":49025,"arcs":[[-4980,-4743,5424,5425,-5351,-4990]]},{"type":"Polygon","id":21189,"arcs":[[-5303,5426,5427,-5397,-5287]]},{"type":"Polygon","id":21203,"arcs":[[-5400,5428,5429,-5336,-5207,-5143]]},{"type":"Polygon","id":51027,"arcs":[[-5421,5430,5431,5432,-5244,-5109]]},{"type":"MultiPolygon","id":51115,"arcs":[[[-5381,5433]]]},{"type":"Polygon","id":21119,"arcs":[[-5186,-5238,-5248,5434,5435,-5301]]},{"type":"Polygon","id":51007,"arcs":[[-5411,5436,5437,5438,-5242,-5305]]},{"type":"Polygon","id":51036,"arcs":[[5439,5440,-5292,-5341]]},{"type":"Polygon","id":29225,"arcs":[[-5183,5441,5442,5443,5444,-5161]]},{"type":"Polygon","id":6085,"arcs":[[-5038,-5335,5445,5446,-5298,5447,-5164]]},{"type":"Polygon","id":21217,"arcs":[[-5283,-5419,5448,5449,-5278]]},{"type":"Polygon","id":29229,"arcs":[[-5367,5450,-5442,-5182]]},{"type":"Polygon","id":51071,"arcs":[[-5315,5451,5452,5453,-5385,-5189,-5285]]},{"type":"Polygon","id":20035,"arcs":[[-5355,5454,5455,5456,5457,-5022]]},{"type":"Polygon","id":20191,"arcs":[[-5458,5458,5459,5460,-5268,-5153]]},{"type":"Polygon","id":20119,"arcs":[[-5152,5461,5462,5463,-5262,-5097]]},{"type":"Polygon","id":20025,"arcs":[[-5267,5464,5465,5466,-5462,-5151]]},{"type":"Polygon","id":20007,"arcs":[[-5270,5467,5468,5469,5470,-5265,-5211]]},{"type":"Polygon","id":21087,"arcs":[[-5450,5471,5472,5473,-5279]]},{"type":"Polygon","id":51680,"arcs":[[-5215,5474,-5345]]},{"type":"Polygon","id":6027,"arcs":[[-4763,-4239,5475,5476,5477,5478,-5389,-4557]]},{"type":"MultiPolygon","id":51095,"arcs":[[[5479,5480,5481,5482,-5440,-5340,5483,5484,5485]]]},{"type":"Polygon","id":21099,"arcs":[[-5280,-5474,5486,5487,5488,-5342,-5088]]},{"type":"Polygon","id":21193,"arcs":[[-5436,5489,5490,5491,5492,-5427,-5302]]},{"type":"Polygon","id":51031,"arcs":[[-5414,5493,5494,5495,-5346,-5475,-5214]]},{"type":"Polygon","id":29077,"arcs":[[-5162,-5445,5496,5497,-5394,-5205]]},{"type":"Polygon","id":21139,"arcs":[[-5424,5498,5499,5500,5501,-5371,-5369]]},{"type":"Polygon","id":29203,"arcs":[[-5358,5502,5503,5504,-5364,-5226]]},{"type":"Polygon","id":8007,"arcs":[[-5126,-5202,5505,5506,5507,-5331,-4996]]},{"type":"Polygon","id":51161,"arcs":[[-5349,5508,5509,5510,-5313,-5222],[5511,5512]]},{"type":"Polygon","id":21177,"arcs":[[5513,5514,5515,5516,-5401,-5306,-5258]]},{"type":"Polygon","id":51147,"arcs":[[-5243,-5439,5517,5518,5519,-5412,-5231]]},{"type":"Polygon","id":8021,"arcs":[[-5201,-5240,-5318,5520,5521,-5506]]},{"type":"Polygon","id":21031,"arcs":[[5522,5523,-5514,-5257,-5344,5524]]},{"type":"Polygon","id":20129,"arcs":[[5525,5526,5527,-5326,-5254]]},{"type":"Polygon","id":20189,"arcs":[[-5264,5528,5529,-5526,-5253,-5261]]},{"type":"Polygon","id":20175,"arcs":[[-5464,5530,5531,-5529,-5263]]},{"type":"Polygon","id":20125,"arcs":[[-5272,-5276,5532,5533,5534,5535,-5353]]},{"type":"Polygon","id":20077,"arcs":[[5536,5537,-5468,-5269,-5461]]},{"type":"Polygon","id":20033,"arcs":[[5538,5539,-5465,-5266,-5471]]},{"type":"Polygon","id":20099,"arcs":[[-5312,5540,5541,5542,-5533,-5275]]},{"type":"Polygon","id":21033,"arcs":[[-5403,5543,5544,5545,-5422,-5322]]},{"type":"MultiPolygon","id":51199,"arcs":[[[5546,5547,5548,5549,-5481,5550,-5485]]]},{"type":"Polygon","id":29097,"arcs":[[-5396,5551,5552,5553,-5310,-5320]]},{"type":"Polygon","id":51121,"arcs":[[5554,5555,5556,5557,-5452,-5314,-5511]]},{"type":"Polygon","id":51515,"arcs":[[-5350]]},{"type":"Polygon","id":21051,"arcs":[[-5493,5558,5559,5560,5561,-5398,-5428]]},{"type":"Polygon","id":21199,"arcs":[[5562,5563,5564,-5416,-5337,-5430,5565]]},{"type":"Polygon","id":20021,"arcs":[[-5554,5566,5567,5568,-5541,-5311]]},{"type":"Polygon","id":21061,"arcs":[[-5489,5569,5570,-5525,-5343]]},{"type":"Polygon","id":51770,"arcs":[[5571,-5513]]},{"type":"Polygon","id":17127,"arcs":[[-5502,5572,5573,-5375,-5372]]},{"type":"Polygon","id":51185,"arcs":[[-5387,5574,5575,5576,-5431,-5420]]},{"type":"Polygon","id":17003,"arcs":[[5577,5578,5579,5580,-5360,-5379]]},{"type":"Polygon","id":21125,"arcs":[[-5562,5581,5582,5583,-5566,-5429,-5399]]},{"type":"Polygon","id":17153,"arcs":[[-5376,-5574,5584,5585,-5578,-5378]]},{"type":"Polygon","id":51775,"arcs":[[-5572,-5512]]},{"type":"Polygon","id":21131,"arcs":[[5586,5587,-5559,-5492]]},{"type":"Polygon","id":51670,"arcs":[[5588,-5405,5589]]},{"type":"Polygon","id":29223,"arcs":[[-5384,5590,5591,5592,-5356,-5250,-5325]]},{"type":"Polygon","id":51149,"arcs":[[5593,5594,5595,5596,5597,-5406,-5589]]},{"type":"Polygon","id":51830,"arcs":[[5598,-5486,-5551,-5480]]},{"type":"Polygon","id":21001,"arcs":[[-5418,5599,5600,5601,-5472,-5449]]},{"type":"Polygon","id":51051,"arcs":[[5602,5603,-5245,-5433]]},{"type":"Polygon","id":20019,"arcs":[[-5536,5604,5605,-5455,-5354]]},{"type":"Polygon","id":51021,"arcs":[[5606,5607,5608,-5575,-5386,-5454]]},{"type":"Polygon","id":51570,"arcs":[[5609,-5408]]},{"type":"Polygon","id":51135,"arcs":[[5610,5611,-5518,-5438,5612]]},{"type":"Polygon","id":29109,"arcs":[[-5498,5613,5614,5615,5616,-5552,-5395]]},{"type":"Polygon","id":6087,"arcs":[[5617,5618,5619,-5299,-5447]]},{"type":"Polygon","id":51053,"arcs":[[5620,-5597,5621,5622,5623,-5613,-5437,-5410]]},{"type":"Polygon","id":21133,"arcs":[[-5247,5624,5625,-5490,-5435]]},{"type":"Polygon","id":29201,"arcs":[[5626,5627,5628,-5361,-5581]]},{"type":"Polygon","id":51037,"arcs":[[5629,5630,5631,-5494,-5413,-5520]]},{"type":"Polygon","id":51155,"arcs":[[5632,-5556,5633,5634,5635,-5607,-5453,-5558]]},{"type":"Polygon","id":51730,"arcs":[[-5621,-5409,-5610,-5407,-5598]]},{"type":"Polygon","id":51181,"arcs":[[5636,5637,5638,-5595,5639]]},{"type":"Polygon","id":51067,"arcs":[[5640,5641,5642,5643,-5509,-5348]]},{"type":"Polygon","id":21007,"arcs":[[5644,5645,-5579,-5586,5646]]},{"type":"Polygon","id":21145,"arcs":[[-5501,5647,5648,5649,-5647,-5585,-5573]]},{"type":"Polygon","id":51700,"arcs":[[5650,5651,-5482,-5550]]},{"type":"Polygon","id":51195,"arcs":[[5652,5653,5654,5655,-5625,-5246,-5604],[5656]]},{"type":"Polygon","id":21227,"arcs":[[-5571,5657,5658,5659,5660,-5523]]},{"type":"Polygon","id":21207,"arcs":[[-5565,5661,5662,5663,-5600,-5417]]},{"type":"Polygon","id":21169,"arcs":[[-5602,5664,5665,5666,-5487,-5473]]},{"type":"Polygon","id":21143,"arcs":[[-5546,5667,5668,-5499,-5423]]},{"type":"MultiPolygon","id":51735,"arcs":[[[5669,5670,-5548,5671]]]},{"type":"Polygon","id":21009,"arcs":[[5672,5673,-5658,-5570,-5488,-5667]]},{"type":"Polygon","id":21047,"arcs":[[-5517,5674,5675,5676,5677,-5544,-5402]]},{"type":"Polygon","id":51750,"arcs":[[-5633,-5557]]},{"type":"Polygon","id":51093,"arcs":[[5678,5679,5680,5681,-5637,5682]]},{"type":"Polygon","id":51167,"arcs":[[5683,5684,5685,-5653,-5603,-5432,-5577]]},{"type":"Polygon","id":51143,"arcs":[[5686,5687,5688,5689,5690,5691,-5641,-5347,-5496]]},{"type":"Polygon","id":51063,"arcs":[[-5644,5692,5693,-5634,-5555,-5510]]},{"type":"Polygon","id":29207,"arcs":[[-5362,-5629,5694,5695,5696,-5591,-5383]]},{"type":"Polygon","id":51111,"arcs":[[-5612,5697,5698,-5630,-5519]]},{"type":"Polygon","id":51650,"arcs":[[-5651,-5549,-5671,5699]]},{"type":"Polygon","id":51183,"arcs":[[5700,5701,-5622,-5596,-5639]]},{"type":"Polygon","id":29035,"arcs":[[-5593,5702,5703,5704,-5503,-5357]]},{"type":"Polygon","id":29043,"arcs":[[-5444,5705,5706,5707,-5614,-5497]]},{"type":"Polygon","id":51197,"arcs":[[5708,5709,5710,-5608,-5636]]},{"type":"Polygon","id":21141,"arcs":[[5711,5712,5713,-5515,-5524,-5661]]},{"type":"Polygon","id":21219,"arcs":[[-5714,5714,5715,-5675,-5516]]},{"type":"Polygon","id":29067,"arcs":[[-5451,-5366,5716,5717,5718,-5706,-5443]]},{"type":"Polygon","id":21157,"arcs":[[-5669,5719,5720,5721,-5648,-5500]]},{"type":"Polygon","id":29133,"arcs":[[-5646,5722,5723,5724,5725,-5627,-5580]]},{"type":"Polygon","id":51083,"arcs":[[-5632,5726,5727,5728,5729,-5687,-5495]]},{"type":"Polygon","id":29091,"arcs":[[-5505,5730,5731,5732,-5717,-5365]]},{"type":"Polygon","id":29145,"arcs":[[-5617,5733,5734,5735,-5567,-5553]]},{"type":"Polygon","id":21121,"arcs":[[5736,5737,-5582,-5561]]},{"type":"Polygon","id":51025,"arcs":[[-5624,5738,5739,5740,5741,-5698,-5611]]},{"type":"Polygon","id":21095,"arcs":[[-5626,-5656,5742,5743,-5587,-5491]]},{"type":"Polygon","id":51173,"arcs":[[-5609,-5711,5744,5745,-5684,-5576]]},{"type":"Polygon","id":4017,"arcs":[[5746,5747,5748,5749,-4741]]},{"type":"Polygon","id":4005,"arcs":[[-5750,5750,5751,5752,-5425,-4742]]},{"type":"Polygon","id":21221,"arcs":[[5753,5754,-5720,-5668,-5545,-5678]]},{"type":"Polygon","id":40105,"arcs":[[-5543,5755,5756,5757,-5534]]},{"type":"Polygon","id":40113,"arcs":[[5758,5759,5760,5761,5762,-5456,-5606]]},{"type":"Polygon","id":40151,"arcs":[[-5470,5763,5764,5765,5766,-5539]]},{"type":"Polygon","id":40035,"arcs":[[-5569,5767,5768,5769,5770,-5756,-5542]]},{"type":"Polygon","id":40147,"arcs":[[-5758,5771,5772,-5759,-5605,-5535]]},{"type":"Polygon","id":40053,"arcs":[[5773,5774,5775,-5537,-5460]]},{"type":"Polygon","id":40003,"arcs":[[-5538,-5776,5776,5777,-5764,-5469]]},{"type":"Polygon","id":40071,"arcs":[[-5763,5778,5779,-5774,-5459,-5457]]},{"type":"Polygon","id":40115,"arcs":[[-5736,5780,5781,-5768,-5568]]},{"type":"Polygon","id":40059,"arcs":[[-5540,-5767,5782,5783,5784,-5466]]},{"type":"Polygon","id":35039,"arcs":[[-5522,5785,5786,5787,5788,5789,5790,-5507]]},{"type":"Polygon","id":35045,"arcs":[[-5791,5791,5792,5793,-5330,-5332,-5508]]},{"type":"Polygon","id":4001,"arcs":[[-5794,5794,5795,5796,5797,5798,-5747,-4740]]},{"type":"Polygon","id":35059,"arcs":[[5799,5800,5801,5802,5803,5804,-5218,-5328]]},{"type":"Polygon","id":40025,"arcs":[[-5528,5805,5806,5807,-5800,-5327]]},{"type":"Polygon","id":40139,"arcs":[[5808,5809,5810,5811,-5806,-5527,-5530,-5532]]},{"type":"Polygon","id":40007,"arcs":[[-5467,-5785,5812,5813,5814,-5809,-5531,-5463]]},{"type":"Polygon","id":51175,"arcs":[[5815,-5680,5816,5817,5818,5819,5820,-5701,-5638,-5682]]},{"type":"Polygon","id":21231,"arcs":[[5821,5822,5823,5824,-5662,-5564]]},{"type":"Polygon","id":35055,"arcs":[[5825,5826,-5786,-5521,-5317]]},{"type":"Polygon","id":35007,"arcs":[[-5805,5827,5828,-5826,-5316,-5219]]},{"type":"Polygon","id":29209,"arcs":[[5829,5830,5831,-5615,-5708]]},{"type":"Polygon","id":6069,"arcs":[[-5334,-5393,5832,-5618,-5446]]},{"type":"Polygon","id":21235,"arcs":[[-5738,5833,5834,5835,5836,-5583]]},{"type":"MultiPolygon","id":51710,"arcs":[[[5837,5838,5839]],[[5840,5841]]]},{"type":"Polygon","id":21147,"arcs":[[-5837,5842,5843,-5822,-5563,-5584]]},{"type":"Polygon","id":51720,"arcs":[[-5657]]},{"type":"Polygon","id":21013,"arcs":[[-5588,-5744,5844,5845,-5834,-5737,-5560]]},{"type":"Polygon","id":21039,"arcs":[[-5650,5846,5847,-5723,-5645]]},{"type":"Polygon","id":21083,"arcs":[[-5722,5848,5849,5850,5851,-5847,-5649]]},{"type":"Polygon","id":21057,"arcs":[[5852,5853,5854,-5665,-5601,-5664]]},{"type":"Polygon","id":21003,"arcs":[[-5674,5855,5856,5857,5858,-5659]]},{"type":"Polygon","id":29009,"arcs":[[-5832,5859,5860,5861,-5734,-5616]]},{"type":"MultiPolygon","id":51810,"arcs":[[[5862,5863,5864]],[[5865,5866,5867,5868,5869,5870,5871,-5841,5872]]]},{"type":"Polygon","id":51035,"arcs":[[5873,5874,5875,5876,5877,-5709,-5635,-5694]]},{"type":"Polygon","id":51191,"arcs":[[5878,5879,5880,5881,-5685,-5746,5882,5883,5884,5885]]},{"type":"Polygon","id":29023,"arcs":[[-5697,5886,5887,5888,-5703,-5592]]},{"type":"MultiPolygon","id":51740,"arcs":[[[-5839,5889,5890]],[[5891,5892,5893]]]},{"type":"Polygon","id":51800,"arcs":[[-5893,5894,5895,5896,-5817,-5679,5897]]},{"type":"Polygon","id":6053,"arcs":[[-5833,-5392,5898,5899,5900,-5619]]},{"type":"Polygon","id":51081,"arcs":[[-5702,-5821,5901,-5739,-5623],[5902]]},{"type":"Polygon","id":51105,"arcs":[[5903,5904,5905,-5845,-5743,-5655]]},{"type":"Polygon","id":51117,"arcs":[[-5742,5906,5907,5908,-5727,-5631,-5699]]},{"type":"Polygon","id":21053,"arcs":[[-5825,5909,5910,-5853,-5663]]},{"type":"Polygon","id":29149,"arcs":[[-5705,5911,5912,5913,5914,-5731,-5504]]},{"type":"Polygon","id":51169,"arcs":[[-5686,-5882,5915,5916,5917,-5904,-5654]]},{"type":"Polygon","id":21213,"arcs":[[5918,5919,-5712,-5660,-5859]]},{"type":"Polygon","id":51141,"arcs":[[5920,5921,5922,-5874,-5693,-5643]]},{"type":"Polygon","id":29143,"arcs":[[-5726,5923,5924,5925,5926,5927,5928,-5695,-5628]]},{"type":"Polygon","id":51550,"arcs":[[5929,-5890,-5838,5930,-5871,5931,5932,-5895,-5892]]},{"type":"Polygon","id":51089,"arcs":[[5933,5934,-5921,-5642,-5692],[5935]]},{"type":"Polygon","id":32003,"arcs":[[5936,5937,-5476,-4238,-4614]]},{"type":"Polygon","id":21171,"arcs":[[-5855,5938,5939,-5856,-5673,-5666]]},{"type":"Polygon","id":29181,"arcs":[[-5889,5940,5941,-5912,-5704]]},{"type":"Polygon","id":29213,"arcs":[[-5719,5942,5943,5944,5945,-5830,-5707]]},{"type":"Polygon","id":40153,"arcs":[[5946,5947,5948,-5783,-5766]]},{"type":"Polygon","id":51077,"arcs":[[-5878,5949,-5876,5950,5951,5952,5953,-5883,-5745,-5710]]},{"type":"Polygon","id":29153,"arcs":[[-5733,5954,5955,5956,-5943,-5718]]},{"type":"Polygon","id":21105,"arcs":[[-5852,5957,5958,5959,-5724,-5848]]},{"type":"Polygon","id":29119,"arcs":[[-5862,5960,5961,-5781,-5735]]},{"type":"Polygon","id":21035,"arcs":[[-5755,5962,5963,-5849,-5721]]},{"type":"Polygon","id":6107,"arcs":[[5964,5965,-5390,-5479]]},{"type":"Polygon","id":51595,"arcs":[[-5903]]},{"type":"Polygon","id":51690,"arcs":[[-5936]]},{"type":"Polygon","id":51620,"arcs":[[-5816,-5681]]},{"type":"Polygon","id":51640,"arcs":[[-5950,-5877]]},{"type":"Polygon","id":47161,"arcs":[[-5677,5966,5967,5968,5969,-5963,-5754]]},{"type":"Polygon","id":40041,"arcs":[[-5962,5970,5971,5972,5973,-5769,-5782]]},{"type":"Polygon","id":47147,"arcs":[[5974,5975,5976,-5715,-5713,-5920,5977]]},{"type":"Polygon","id":47165,"arcs":[[5978,5979,5980,5981,-5978,-5919,-5858]]},{"type":"MultiPolygon","id":21075,"arcs":[[[5982,-5926]],[[5983,5984,-5924,-5725,-5960]]]},{"type":"Polygon","id":47125,"arcs":[[-5977,5985,5986,5987,-5967,-5676,-5716]]},{"type":"Polygon","id":51590,"arcs":[[5988,-5689]]},{"type":"Polygon","id":47111,"arcs":[[5989,5990,5991,-5979,-5857,-5940,5992]]},{"type":"MultiPolygon","id":51520,"arcs":[[[-5879]],[[-5886,5993,-5880]]]},{"type":"Polygon","id":29069,"arcs":[[-5929,5994,5995,5996,5997,5998,-5887,-5696]]},{"type":"Polygon","id":47137,"arcs":[[5999,6000,6001,6002,-5910,-5824]]},{"type":"Polygon","id":47027,"arcs":[[6003,6004,-5993,-5939,-5854,-5911,-6003]]},{"type":"Polygon","id":47163,"arcs":[[6005,6006,6007,-5916,-5881,-5994,-5885,6008]]},{"type":"Polygon","id":47091,"arcs":[[-5954,6009,6010,6011,6012,-6009,-5884]]},{"type":"Polygon","id":47151,"arcs":[[6013,6014,6015,6016,-6000,-5823,-5844]]},{"type":"Polygon","id":47025,"arcs":[[6017,6018,6019,6020,-5835,-5846,-5906]]},{"type":"Polygon","id":40103,"arcs":[[6021,6022,6023,6024,-5779,-5762]]},{"type":"Polygon","id":47067,"arcs":[[-5918,6025,6026,-6018,-5905]]},{"type":"Polygon","id":40131,"arcs":[[6027,6028,6029,-5772,-5757,-5771]]},{"type":"Polygon","id":47013,"arcs":[[6030,6031,-6014,-5843,-5836,-6021]]},{"type":"Polygon","id":47073,"arcs":[[-6008,6032,6033,6034,6035,-6026,-5917]]},{"type":"Polygon","id":40047,"arcs":[[-5780,-6025,6036,6037,6038,-5777,-5775]]},{"type":"Polygon","id":40045,"arcs":[[-5949,6039,6040,6041,6042,-5813,-5784]]},{"type":"Polygon","id":37009,"arcs":[[6043,6044,6045,-6010,-5953]]},{"type":"Polygon","id":47049,"arcs":[[-6017,6046,6047,6048,6049,-6001]]},{"type":"Polygon","id":37005,"arcs":[[6050,6051,-6044,-5952]]},{"type":"Polygon","id":40117,"arcs":[[6052,6053,6054,-6022,-5761]]},{"type":"Polygon","id":37171,"arcs":[[-5923,6055,6056,6057,6058,-6051,-5951,-5875]]},{"type":"Polygon","id":37073,"arcs":[[6059,6060,6061,6062,6063,6064,-5818,-5897]]},{"type":"MultiPolygon","id":37053,"arcs":[[[6065,6066,-5932,-5870,6067]],[[-5866,6068,6069,6070]],[[-6072,5863,-6073,5867]]]},{"type":"Polygon","id":37169,"arcs":[[-5935,6073,6074,-6056,-5922]]},{"type":"Polygon","id":37029,"arcs":[[-5896,-5933,-6067,6075,6076,-6060]]},{"type":"Polygon","id":37185,"arcs":[[6077,6078,6079,6080,-5907,-5741]]},{"type":"Polygon","id":37131,"arcs":[[6081,6082,-6078,-5740,-5902,-5820,6083]]},{"type":"Polygon","id":37091,"arcs":[[-6065,6084,6085,-6084,-5819]]},{"type":"Polygon","id":37145,"arcs":[[6086,6087,6088,6089,-5729]]},{"type":"Polygon","id":37181,"arcs":[[-6081,6090,6091,-5908]]},{"type":"Polygon","id":37077,"arcs":[[6092,6093,6094,-6087,-5728,-5909,-6092]]},{"type":"Polygon","id":37157,"arcs":[[-5691,6095,6096,6097,-6074,-5934]]},{"type":"Polygon","id":37033,"arcs":[[-6090,6098,6099,-6096,-5690,-5989,-5688,-5730]]},{"type":"Polygon","id":47133,"arcs":[[-6050,6100,6101,-6004,-6002]]},{"type":"Polygon","id":47087,"arcs":[[-6102,6102,6103,-5990,-6005]]},{"type":"Polygon","id":37083,"arcs":[[6104,6105,6106,6107,-6079,-6083]]},{"type":"Polygon","id":40097,"arcs":[[-5974,6108,6109,-6028,-5770]]},{"type":"Polygon","id":47019,"arcs":[[6110,6111,6112,6113,-6006,-6013]]},{"type":"Polygon","id":37139,"arcs":[[6114,6115,-6061,-6077]]},{"type":"Polygon","id":47131,"arcs":[[-5959,6116,6117,6118,6119,-5984]]},{"type":"Polygon","id":40093,"arcs":[[-5778,-6039,6120,6121,6122,-5947,-5765]]},{"type":"Polygon","id":47183,"arcs":[[6123,6124,6125,-6117,-5958,-5851]]},{"type":"Polygon","id":47095,"arcs":[[6126,6127,-5927,-5983,-5925,-5985,-6120]]},{"type":"Polygon","id":48421,"arcs":[[6128,6129,-5807,-5812,6130]]},{"type":"Polygon","id":47079,"arcs":[[-5970,6131,6132,-6124,-5850,-5964]]},{"type":"Polygon","id":48195,"arcs":[[6133,6134,-6131,-5811,6135]]},{"type":"Polygon","id":48111,"arcs":[[-5808,-6130,6136,-5801]]},{"type":"Polygon","id":48357,"arcs":[[6137,6138,-6136,-5810,-5815]]},{"type":"Polygon","id":48295,"arcs":[[6139,6140,-6138,-5814,-6043]]},{"type":"Polygon","id":5007,"arcs":[[-5861,6141,6142,6143,6144,-5971,-5961]]},{"type":"Polygon","id":5049,"arcs":[[6145,6146,6147,-5955,-5732,-5915]]},{"type":"Polygon","id":5015,"arcs":[[-5831,-5946,6148,6149,6150,-6142,-5860]]},{"type":"Polygon","id":5135,"arcs":[[-5914,6151,6152,6153,6154,-6146]]},{"type":"Polygon","id":5121,"arcs":[[6155,6156,-6152,-5913,-5942,6157]]},{"type":"Polygon","id":5009,"arcs":[[6158,6159,6160,-6149,-5945]]},{"type":"Polygon","id":5089,"arcs":[[6161,6162,-6159,-5944,-5957]]},{"type":"Polygon","id":5005,"arcs":[[-6148,6163,6164,6165,-6162,-5956]]},{"type":"Polygon","id":5021,"arcs":[[-5888,-5999,6166,-6158,-5941]]},{"type":"Polygon","id":6031,"arcs":[[6167,6168,-5899,-5391,-5966]]},{"type":"Polygon","id":47169,"arcs":[[-5992,6169,6170,-5980]]},{"type":"Polygon","id":47021,"arcs":[[6171,6172,6173,-5986,-5976],[6174]]},{"type":"Polygon","id":47179,"arcs":[[-6114,6175,6176,-6033,-6007]]},{"type":"Polygon","id":37193,"arcs":[[-6059,6177,6178,6179,6180,6181,-6045,-6052]]},{"type":"Polygon","id":47173,"arcs":[[6182,6183,6184,-6031,-6020]]},{"type":"Polygon","id":47159,"arcs":[[-6104,6185,6186,6187,-6170,-5991]]},{"type":"Polygon","id":29155,"arcs":[[-6128,6188,6189,-5995,-5928]]},{"type":"Polygon","id":40143,"arcs":[[-6030,6190,6191,6192,-6053,-5760,-5773]]},{"type":"Polygon","id":47057,"arcs":[[-6027,-6036,6193,6194,6195,-6183,-6019]]},{"type":"Polygon","id":47037,"arcs":[[-5982,6196,6197,6198,-6172,-5975]]},{"type":"Polygon","id":47059,"arcs":[[6199,6200,6201,6202,-6034,-6177]]},{"type":"Polygon","id":37189,"arcs":[[-6182,6203,6204,-6011,-6046]]},{"type":"Polygon","id":37143,"arcs":[[6205,6206,-6062,-6116]]},{"type":"Polygon","id":47129,"arcs":[[-6016,6207,6208,6209,-6047]]},{"type":"Polygon","id":47083,"arcs":[[-5988,6210,6211,6212,-5968]]},{"type":"Polygon","id":47005,"arcs":[[-6213,6213,6214,6215,6216,-6132,-5969]]},{"type":"Polygon","id":47189,"arcs":[[-6171,-6188,6217,6218,6219,-6197,-5981]]},{"type":"MultiPolygon","id":37041,"arcs":[[[6220,-6063,-6207]]]},{"type":"Polygon","id":47063,"arcs":[[-6203,6221,6222,-6194,-6035]]},{"type":"MultiPolygon","id":47043,"arcs":[[[-6175]],[[-6174,6223,6224,6225,-6211,-5987]]]},{"type":"Polygon","id":5087,"arcs":[[6226,6227,6228,6229,6230,-6143,-6151]]},{"type":"Polygon","id":47141,"arcs":[[-6049,6231,6232,6233,-6186,-6103,-6101]]},{"type":"Polygon","id":47001,"arcs":[[-6185,6234,6235,-6208,-6015,-6032]]},{"type":"Polygon","id":37197,"arcs":[[6236,6237,6238,-6178,-6058]]},{"type":"Polygon","id":37011,"arcs":[[6239,6240,6241,6242,-6111,-6012,-6205]]},{"type":"Polygon","id":37069,"arcs":[[6243,6244,-6093,-6091,-6080]]},{"type":"Polygon","id":5055,"arcs":[[-5998,6245,6246,-6156,-6167]]},{"type":"Polygon","id":35033,"arcs":[[-5829,6247,6248,6249,-5787,-5827]]},{"type":"Polygon","id":37067,"arcs":[[6250,6251,6252,-6237,-6057,-6075]]},{"type":"Polygon","id":5065,"arcs":[[-6155,6253,6254,-6164,-6147]]},{"type":"Polygon","id":47171,"arcs":[[6255,6256,6257,-6200,-6176,-6113]]},{"type":"Polygon","id":5075,"arcs":[[-6247,6258,6259,6260,-6153,-6157]]},{"type":"Polygon","id":37081,"arcs":[[6261,6262,6263,-6251,-6098]]},{"type":"Polygon","id":37001,"arcs":[[6264,6265,6266,-6262,-6097,-6100]]},{"type":"Polygon","id":40119,"arcs":[[6267,6268,6269,-6023,-6055]]},{"type":"Polygon","id":47085,"arcs":[[-6226,6270,6271,-6214,-6212]]},{"type":"Polygon","id":37015,"arcs":[[6272,6273,6274,-6105,-6082,-6086]]},{"type":"Polygon","id":37135,"arcs":[[-6089,6275,6276,-6265,-6099]]},{"type":"Polygon","id":37063,"arcs":[[-6095,6277,6278,-6276,-6088]]},{"type":"Polygon","id":5143,"arcs":[[6279,6280,-6144,-6231]]},{"type":"MultiPolygon","id":37055,"arcs":[[[6281,6282,6283]],[[6284,6285]],[[-6070,6286]]]},{"type":"Polygon","id":47053,"arcs":[[6287,6288,6289,6290,-6118,-6126]]},{"type":"MultiPolygon","id":35043,"arcs":[[[6291,6292]],[[6293,6294,6295,6296,6297,-5792,-5790]]]},{"type":"Polygon","id":35021,"arcs":[[-5804,6298,6299,-6248,-5828]]},{"type":"Polygon","id":47045,"arcs":[[6300,6301,6302,-6189,-6127,-6119,-6291]]},{"type":"Polygon","id":37127,"arcs":[[-6108,6303,6304,6305,-6244]]},{"type":"Polygon","id":47089,"arcs":[[-6223,6306,6307,6308,-6195]]},{"type":"Polygon","id":47093,"arcs":[[-6309,6309,6310,6311,6312,-6235,-6184,-6196]]},{"type":"Polygon","id":47029,"arcs":[[6313,6314,6315,-6307,-6222,-6202]]},{"type":"Polygon","id":47035,"arcs":[[-6210,6316,6317,6318,6319,6320,6321,6322,-6232,-6048]]},{"type":"Polygon","id":40073,"arcs":[[6323,6324,6325,-6121,-6038]]},{"type":"Polygon","id":40083,"arcs":[[-6024,-6270,6326,6327,-6324,-6037]]},{"type":"Polygon","id":40011,"arcs":[[-6326,6328,6329,6330,6331,-6122]]},{"type":"Polygon","id":40043,"arcs":[[6332,6333,-6040,-5948,-6123,-6332]]},{"type":"Polygon","id":40037,"arcs":[[-6193,6334,6335,6336,-6268,-6054]]},{"type":"Polygon","id":40145,"arcs":[[-6110,6337,6338,6339,-6191,-6029]]},{"type":"Polygon","id":40021,"arcs":[[-5973,6340,6341,6342,-6338,-6109]]},{"type":"Polygon","id":40001,"arcs":[[-6145,-6281,6343,6344,-6341,-5972]]},{"type":"Polygon","id":37121,"arcs":[[-6243,6345,6346,-6256,-6112]]},{"type":"Polygon","id":37065,"arcs":[[6347,6348,6349,-6304,-6107]]},{"type":"Polygon","id":47017,"arcs":[[-6217,6350,6351,6352,-6288,-6125,-6133]]},{"type":"Polygon","id":47041,"arcs":[[6353,6354,6355,-6218,-6187,-6234]]},{"type":"Polygon","id":5137,"arcs":[[6356,6357,6358,6359,-6165,-6255]]},{"type":"Polygon","id":5101,"arcs":[[-6161,6360,6361,6362,-6227,-6150]]},{"type":"Polygon","id":37027,"arcs":[[-6181,6363,6364,6365,-6240,-6204]]},{"type":"Polygon","id":5129,"arcs":[[-6166,-6360,6366,6367,-6361,-6160,-6163]]},{"type":"Polygon","id":47149,"arcs":[[6368,6369,6370,6371,6372,-6198,-6220]]},{"type":"Polygon","id":37199,"arcs":[[6373,6374,6375,-6257,-6347]]},{"type":"MultiPolygon","id":47185,"arcs":[[[6376,-6321]],[[-6323,6377,6378,-6354,-6233]]]},{"type":"Polygon","id":37183,"arcs":[[-6245,6379,6380,6381,-6278,-6094]]},{"type":"Polygon","id":37117,"arcs":[[6382,6383,6384,-6348,-6106,-6275]]},{"type":"Polygon","id":37115,"arcs":[[-6258,-6376,6385,6386,-6314,-6201]]},{"type":"Polygon","id":37059,"arcs":[[6387,6388,6389,-6238,-6253]]},{"type":"Polygon","id":48393,"arcs":[[-6141,6390,6391,6392,6393,-6134,-6139]]},{"type":"Polygon","id":48211,"arcs":[[-6140,-6042,6394,6395,-6391]]},{"type":"Polygon","id":48233,"arcs":[[-6135,-6394,6396,6397]]},{"type":"Polygon","id":48205,"arcs":[[6398,6399,6400,-5802,-6137]]},{"type":"Polygon","id":37097,"arcs":[[-6239,-6390,6401,6402,6403,6404,6405,6406,-6179]]},{"type":"Polygon","id":48341,"arcs":[[-6398,6407,6408,6409,-6399,-6129]]},{"type":"Polygon","id":47187,"arcs":[[-6373,6410,6411,6412,-6224,-6173,-6199]]},{"type":"Polygon","id":37003,"arcs":[[6413,-6364,-6180,-6407]]},{"type":"Polygon","id":47145,"arcs":[[6414,6415,6416,6417,6418,-6317,-6209,-6236,-6313,6419]]},{"type":"Polygon","id":47155,"arcs":[[-6316,6420,6421,6422,-6310,-6308]]},{"type":"Polygon","id":37057,"arcs":[[-6264,6423,6424,6425,-6388,-6252]]},{"type":"Polygon","id":40129,"arcs":[[-6334,6426,6427,6428,-6395,-6041]]},{"type":"Polygon","id":35031,"arcs":[[-6298,6429,-5795,-5793]]},{"type":"Polygon","id":35049,"arcs":[[-6250,6430,6431,6432,-6295,6433,-6293,6434,-5788]]},{"type":"Polygon","id":5093,"arcs":[[6435,6436,6437,6438,6439,6440,6441,-5996,-6190,-6303]]},{"type":"Polygon","id":37023,"arcs":[[-6366,6442,6443,6444,6445,6446,-6241]]},{"type":"Polygon","id":47033,"arcs":[[6447,6448,6449,-6301,-6290]]},{"type":"Polygon","id":5031,"arcs":[[-6442,6450,6451,-6259,-6246,-5997]]},{"type":"Polygon","id":37177,"arcs":[[6452,6453,6454]]},{"type":"Polygon","id":47081,"arcs":[[-6413,6455,6456,6457,-6271,-6225]]},{"type":"Polygon","id":37187,"arcs":[[-6454,6458,6459,-6383,-6274,6460]]},{"type":"Polygon","id":35028,"arcs":[[-5789,-6435,-6292,-6434,-6294]]},{"type":"Polygon","id":47015,"arcs":[[6461,6462,-6369,-6219,-6356]]},{"type":"Polygon","id":37111,"arcs":[[6463,6464,-6374,-6346,-6242,-6447]]},{"type":"Polygon","id":47097,"arcs":[[-6450,6465,6466,-6436,-6302]]},{"type":"Polygon","id":40081,"arcs":[[-6337,6467,6468,6469,-6327,-6269]]},{"type":"Polygon","id":5063,"arcs":[[-6261,6470,6471,6472,-6357,-6254,-6154]]},{"type":"Polygon","id":37151,"arcs":[[-6267,6473,6474,6475,-6424,-6263]]},{"type":"MultiPolygon","id":47105,"arcs":[[[6476,6477]],[[-6415]],[[-6420,-6312,6478,6479,6480,-6416]]]},{"type":"Polygon","id":5067,"arcs":[[-6260,-6452,6481,6482,6483,6484,-6471]]},{"type":"Polygon","id":47009,"arcs":[[6485,6486,6487,-6479,-6311,-6423]]},{"type":"Polygon","id":37037,"arcs":[[-6279,-6382,6488,6489,6490,-6474,-6266,-6277]]},{"type":"Polygon","id":35047,"arcs":[[-6300,6491,6492,6493,-6431,-6249]]},{"type":"Polygon","id":37195,"arcs":[[6494,6495,6496,6497,-6305,-6350]]},{"type":"Polygon","id":37159,"arcs":[[-6426,6498,6499,-6402,-6389]]},{"type":"Polygon","id":40111,"arcs":[[-6192,-6340,6500,6501,6502,-6335]]},{"type":"Polygon","id":40101,"arcs":[[-6343,6503,6504,6505,-6501,-6339]]},{"type":"Polygon","id":47177,"arcs":[[-6379,6506,6507,6508,6509,-6462,-6355]]},{"type":"Polygon","id":47119,"arcs":[[6510,6511,6512,6513,-6456,-6412]]},{"type":"Polygon","id":47039,"arcs":[[6514,6515,6516,6517,-6351,-6216]]},{"type":"Polygon","id":47135,"arcs":[[-6458,6518,6519,-6515,-6215,-6272]]},{"type":"Polygon","id":37147,"arcs":[[-6385,6520,6521,6522,6523,6524,6525,-6495,-6349]]},{"type":"Polygon","id":37035,"arcs":[[-6406,6526,-6443,-6365,-6414]]},{"type":"Polygon","id":37021,"arcs":[[-6465,6527,6528,6529,-6386,-6375]]},{"type":"Polygon","id":47143,"arcs":[[6530,6531,6532,-6318,-6419]]},{"type":"Polygon","id":47175,"arcs":[[-6322,-6377,-6320,6533,6534,-6507,-6378]]},{"type":"Polygon","id":47077,"arcs":[[-6518,6535,6536,6537,-6352]]},{"type":"Polygon","id":47075,"arcs":[[6538,6539,6540,6541,-6466,-6449]]},{"type":"Polygon","id":37101,"arcs":[[-6498,6542,6543,6544,-6380,-6306]]},{"type":"Polygon","id":40039,"arcs":[[-6331,6545,6546,6547,-6427,-6333]]},{"type":"Polygon","id":6071,"arcs":[[6548,6549,6550,6551,6552,6553,-5477,-5938]]},{"type":"Polygon","id":6079,"arcs":[[-6169,6554,6555,6556,-5900]]},{"type":"Polygon","id":6029,"arcs":[[-6554,6557,6558,6559,-6555,-6168,-5965,-5478]]},{"type":"Polygon","id":47113,"arcs":[[-6353,-6538,6560,6561,-6539,-6448,-6289]]},{"type":"Polygon","id":5141,"arcs":[[-6359,6562,6563,6564,6565,-6367]]},{"type":"Polygon","id":37087,"arcs":[[-6530,6566,6567,6568,-6421,-6315,-6387]]},{"type":"Polygon","id":5047,"arcs":[[6569,6570,6571,-6229,6572]]},{"type":"Polygon","id":47007,"arcs":[[-6533,6573,6574,-6534,-6319]]},{"type":"Polygon","id":5071,"arcs":[[-6228,-6363,6575,6576,-6573]]},{"type":"Polygon","id":5033,"arcs":[[6577,6578,-6344,-6280,-6230,-6572]]},{"type":"Polygon","id":47121,"arcs":[[6579,6580,6581,-6531,-6418]]},{"type":"Polygon","id":35037,"arcs":[[-6401,6582,6583,6584,6585,6586,6587,-6492,-6299,-5803]]},{"type":"MultiPolygon","id":37013,"arcs":[[[6588,6589,6590,-6523]],[[-6460,6591,6592,-6521,-6384]]]},{"type":"Polygon","id":5115,"arcs":[[-6368,-6566,6593,6594,6595,-6576,-6362]]},{"type":"Polygon","id":40017,"arcs":[[6596,6597,6598,6599,6600,-6329,-6325]]},{"type":"Polygon","id":40109,"arcs":[[-6470,6601,6602,-6597,-6328]]},{"type":"Polygon","id":5023,"arcs":[[-6473,6603,6604,-6563,-6358]]},{"type":"Polygon","id":47117,"arcs":[[6605,6606,6607,-6511,-6411,-6372]]},{"type":"Polygon","id":5111,"arcs":[[-6441,6608,6609,-6482,-6451]]},{"type":"MultiPolygon","id":37095,"arcs":[[[-6283,6610]],[[-6453,6611,-6285,6612,-6592,-6459]]]},{"type":"Polygon","id":47031,"arcs":[[-6463,-6510,6613,6614,6615,6616,-6370]]},{"type":"Polygon","id":47003,"arcs":[[-6617,6617,6618,-6606,-6371]]},{"type":"Polygon","id":37173,"arcs":[[6619,6620,6621,-6486,-6422,-6569]]},{"type":"Polygon","id":47123,"arcs":[[-6488,6622,6623,6624,6625,-6478,6626,-6480]]},{"type":"Polygon","id":47101,"arcs":[[-6514,6627,6628,-6519,-6457]]},{"type":"Polygon","id":37079,"arcs":[[6629,6630,-6496,-6526]]},{"type":"MultiPolygon","id":47167,"arcs":[[[6631,6632,-6439]],[[-6542,6633,6634,-6437,-6467]]]},{"type":"Polygon","id":47107,"arcs":[[-6481,-6627,-6477,-6626,6635,6636,-6580,-6417]]},{"type":"Polygon","id":40135,"arcs":[[-6345,-6579,6637,6638,6639,-6504,-6342]]},{"type":"Polygon","id":40107,"arcs":[[-6503,6640,6641,6642,6643,-6468,-6336]]},{"type":"Polygon","id":37105,"arcs":[[6644,6645,-6490]]},{"type":"Polygon","id":48359,"arcs":[[-6410,6646,6647,-6583,-6400]]},{"type":"Polygon","id":48065,"arcs":[[-6393,6648,6649,6650,-6408,-6397]]},{"type":"Polygon","id":48179,"arcs":[[6651,6652,-6649,-6392]]},{"type":"Polygon","id":48483,"arcs":[[-6429,6653,6654,-6652,-6396]]},{"type":"Polygon","id":48375,"arcs":[[-6651,6655,-6647,-6409]]},{"type":"Polygon","id":37161,"arcs":[[6656,6657,6658,6659,6660,-6528,-6464,-6446]]},{"type":"Polygon","id":37191,"arcs":[[-6631,6661,6662,6663,-6543,-6497]]},{"type":"Polygon","id":47023,"arcs":[[6664,6665,6666,-6561,-6537]]},{"type":"Polygon","id":37085,"arcs":[[-6545,6667,6668,6669,-6645,-6489,-6381]]},{"type":"Polygon","id":37045,"arcs":[[6670,6671,6672,6673,-6657,-6445]]},{"type":"Polygon","id":37109,"arcs":[[-6405,6674,6675,-6671,-6444,-6527]]},{"type":"Polygon","id":47153,"arcs":[[6676,6677,6678,-6508,-6535,-6575]]},{"type":"Polygon","id":40091,"arcs":[[6679,6680,6681,-6641,-6502,-6506]]},{"type":"Polygon","id":40015,"arcs":[[-6601,6682,6683,6684,6685,-6546,-6330]]},{"type":"Polygon","id":5145,"arcs":[[-6485,6686,6687,6688,6689,-6604,-6472]]},{"type":"Polygon","id":47061,"arcs":[[6690,6691,-6614,-6509,-6679]]},{"type":"Polygon","id":4025,"arcs":[[6692,6693,6694,6695,-5752]]},{"type":"Polygon","id":37099,"arcs":[[-6568,6696,6697,6698,6699,-6620]]},{"type":"Polygon","id":37119,"arcs":[[6700,6701,6702,6703,6704,-6675,-6404]]},{"type":"Polygon","id":37125,"arcs":[[-6646,-6670,6705,6706,6707,6708,-6475,-6491]]},{"type":"Polygon","id":37123,"arcs":[[-6709,6709,6710,-6425,-6476]]},{"type":"Polygon","id":37025,"arcs":[[6711,6712,-6701,-6403,-6500]]},{"type":"Polygon","id":40009,"arcs":[[-6548,6713,6714,6715,6716,6717,-6654,-6428]]},{"type":"Polygon","id":37167,"arcs":[[-6711,6718,6719,-6712,-6499]]},{"type":"Polygon","id":37089,"arcs":[[-6661,6720,6721,6722,-6529]]},{"type":"Polygon","id":47181,"arcs":[[6723,6724,6725,-6516,-6520,-6629]]},{"type":"Polygon","id":40133,"arcs":[[6726,6727,6728,-6643]]},{"type":"Polygon","id":37075,"arcs":[[6729,6730,-6623,-6487,-6622]]},{"type":"Polygon","id":40149,"arcs":[[-6686,6731,-6714,-6547]]},{"type":"Polygon","id":40125,"arcs":[[-6644,-6729,6732,6733,6734,-6602,-6469]]},{"type":"Polygon","id":5029,"arcs":[[6735,6736,6737,-6594,-6565]]},{"type":"Polygon","id":47099,"arcs":[[-6513,6738,6739,-6724,-6628]]},{"type":"Polygon","id":40061,"arcs":[[6740,6741,6742,-6680,-6505,-6640]]},{"type":"Polygon","id":47065,"arcs":[[-6582,6743,6744,6745,6746,6747,-6677,-6574,-6532]]},{"type":"Polygon","id":47055,"arcs":[[-6608,6748,6749,6750,-6739,-6512]]},{"type":"Polygon","id":5131,"arcs":[[-6571,6751,6752,6753,-6638,-6578]]},{"type":"Polygon","id":5037,"arcs":[[6754,6755,6756,-6483,-6610]]},{"type":"Polygon","id":5147,"arcs":[[-6757,6757,6758,6759,-6687,-6484]]},{"type":"Polygon","id":5035,"arcs":[[-6440,-6633,6760,6761,6762,6763,6764,-6755,-6609]]},{"type":"Polygon","id":47069,"arcs":[[-6562,-6667,6765,6766,6767,6768,6769,-6540]]},{"type":"Polygon","id":37107,"arcs":[[6770,6771,6772,-6662,-6630,-6525]]},{"type":"Polygon","id":5083,"arcs":[[-6577,-6596,6773,6774,-6752,-6570]]},{"type":"Polygon","id":37175,"arcs":[[6775,6776,6777,-6697,-6567,-6723]]},{"type":"Polygon","id":47071,"arcs":[[-6726,6778,6779,6780,6781,-6665,-6536,-6517]]},{"type":"Polygon","id":37071,"arcs":[[-6705,6782,-6672,-6676]]},{"type":"MultiPolygon","id":37049,"arcs":[[[6783,6784,6785]],[[-6591,6786,6787,6788,-6771,-6524]]]},{"type":"Polygon","id":47127,"arcs":[[6789,6790,-6618,-6616]]},{"type":"Polygon","id":47157,"arcs":[[6791,6792,6793,-6761,-6632,-6438,-6635]]},{"type":"Polygon","id":37149,"arcs":[[6794,6795,-6721,-6660]]},{"type":"Polygon","id":47047,"arcs":[[-6770,6796,6797,-6792,-6634,-6541]]},{"type":"Polygon","id":47109,"arcs":[[-6782,6798,-6766,-6666]]},{"type":"Polygon","id":40079,"arcs":[[6799,6800,6801,6802,6803,-6741,-6639,-6754]]},{"type":"Polygon","id":40051,"arcs":[[6804,6805,6806,6807,-6683,-6600]]},{"type":"Polygon","id":40027,"arcs":[[-6735,6808,-6598,-6603]]},{"type":"Polygon","id":47103,"arcs":[[-6791,6809,6810,6811,-6749,-6607,-6619]]},{"type":"Polygon","id":5045,"arcs":[[-6605,-6690,6812,6813,6814,-6736,-6564]]},{"type":"Polygon","id":47051,"arcs":[[-6692,6815,6816,6817,-6810,-6790,-6615]]},{"type":"Polygon","id":47011,"arcs":[[6818,6819,6820,-6744,-6581,-6637]]},{"type":"Polygon","id":35006,"arcs":[[-6297,6821,6822,6823,6824,-5796,-6430]]},{"type":"Polygon","id":40087,"arcs":[[-6734,6825,6826,-6805,-6599,-6809]]},{"type":"Polygon","id":37113,"arcs":[[6827,6828,6829,-6730,-6621,-6700]]},{"type":"MultiPolygon","id":37137,"arcs":[[[-6787,-6590,6830]]]},{"type":"Polygon","id":47115,"arcs":[[-6748,6831,6832,-6816,-6691,-6678]]},{"type":"Polygon","id":37163,"arcs":[[-6664,6833,6834,6835,6836,-6668,-6544]]},{"type":"Polygon","id":5149,"arcs":[[-6738,6837,6838,6839,6840,-6774,-6595]]},{"type":"Polygon","id":40121,"arcs":[[-6743,6841,6842,6843,6844,6845,-6681]]},{"type":"Polygon","id":37039,"arcs":[[-6830,6846,6847,6848,6849,-6624,-6731]]},{"type":"Polygon","id":40063,"arcs":[[-6682,-6846,6850,6851,-6727,-6642]]},{"type":"Polygon","id":47139,"arcs":[[-6850,6852,6853,-6819,-6636,-6625]]},{"type":"Polygon","id":37051,"arcs":[[-6837,6854,6855,6856,-6706,-6669]]},{"type":"Polygon","id":37103,"arcs":[[6857,-6785,6858,6859,6860,-6772,-6789]]},{"type":"Polygon","id":35001,"arcs":[[-6433,6861,6862,-6822,-6296]]},{"type":"Polygon","id":35019,"arcs":[[-6588,6863,6864,6865,-6493]]},{"type":"Polygon","id":45045,"arcs":[[-6796,6866,6867,6868,6869,-6776,-6722]]},{"type":"Polygon","id":37007,"arcs":[[6870,6871,6872,6873,-6719]]},{"type":"Polygon","id":37093,"arcs":[[-6857,6874,6875,-6707]]},{"type":"Polygon","id":37179,"arcs":[[-6874,6876,6877,-6702,-6713,-6720]]},{"type":"Polygon","id":45083,"arcs":[[6878,6879,-6867,-6795,-6659,6880]]},{"type":"Polygon","id":37061,"arcs":[[-6773,-6861,6881,6882,-6834,-6663]]},{"type":"Polygon","id":48117,"arcs":[[6883,6884,6885,6886,-6584,-6648]]},{"type":"Polygon","id":45021,"arcs":[[6887,-6881,-6658,-6674,6888]]},{"type":"Polygon","id":48129,"arcs":[[6889,6890,6891,6892,-6653]]},{"type":"Polygon","id":48087,"arcs":[[-6718,6893,6894,6895,-6890,-6655]]},{"type":"Polygon","id":48381,"arcs":[[6896,6897,6898,-6884,-6656]]},{"type":"Polygon","id":37153,"arcs":[[-6708,6899,6900,-6871,-6710]]},{"type":"Polygon","id":48011,"arcs":[[-6893,6901,6902,-6897,-6650]]},{"type":"Polygon","id":45091,"arcs":[[6903,6904,6905,-6889,-6673,-6783,-6704]]},{"type":"Polygon","id":37043,"arcs":[[-6829,6906,6907,6908,-6847]]},{"type":"Polygon","id":5123,"arcs":[[-6765,6909,6910,-6758,-6756]]},{"type":"Polygon","id":40075,"arcs":[[-6685,6911,6912,6913,6914,-6715,-6732]]},{"type":"MultiPolygon","id":37031,"arcs":[[[6915,-6859,-6784,6916]]]},{"type":"Polygon","id":40055,"arcs":[[-6915,6917,6918,-6716]]},{"type":"MultiPolygon","id":6083,"arcs":[[[6919]],[[6920]],[[-6560,6921,6922,-6556]]]},{"type":"Polygon","id":5105,"arcs":[[6923,6924,6925,-6838,-6737,-6815]]},{"type":"Polygon","id":5127,"arcs":[[-6841,6926,6927,-6800,-6753,-6775]]},{"type":"Polygon","id":5117,"arcs":[[-6760,6928,6929,6930,-6688]]},{"type":"Polygon","id":45077,"arcs":[[-6870,6931,6932,-6777]]},{"type":"Polygon","id":5085,"arcs":[[-6931,6933,6934,6935,-6813,-6689]]},{"type":"Polygon","id":45057,"arcs":[[-6878,6936,6937,6938,6939,-6904,-6703]]},{"type":"Polygon","id":40077,"arcs":[[-6804,6940,-6842,-6742]]},{"type":"Polygon","id":45073,"arcs":[[6941,6942,6943,6944,6945,6946,-6698,-6778,-6933]]},{"type":"Polygon","id":35057,"arcs":[[-6866,6947,6948,6949,-6862,-6432,-6494]]},{"type":"Polygon","id":37165,"arcs":[[6950,6951,-6900,-6876]]},{"type":"Polygon","id":40057,"arcs":[[-6919,6952,6953,6954,-6894,-6717]]},{"type":"Polygon","id":5119,"arcs":[[-6936,6955,6956,6957,-6924,-6814]]},{"type":"Polygon","id":1077,"arcs":[[6958,6959,6960,-6779,-6725,-6740,-6751,6961]]},{"type":"Polygon","id":5095,"arcs":[[-6911,6962,6963,6964,-6929,-6759]]},{"type":"Polygon","id":13241,"arcs":[[6965,6966,-6907,-6828,-6699,-6947]]},{"type":"Polygon","id":1083,"arcs":[[-6812,6967,6968,6969,-6962,-6750]]},{"type":"Polygon","id":28003,"arcs":[[6970,6971,-6767,-6799,-6781,6972]]},{"type":"Polygon","id":28141,"arcs":[[6973,6974,6975,-6973,-6780,-6961,6976]]},{"type":"Polygon","id":28139,"arcs":[[6977,6978,6979,-6768,-6972]]},{"type":"Polygon","id":28033,"arcs":[[6980,6981,-6762,-6794,6982]]},{"type":"Polygon","id":28009,"arcs":[[6983,6984,-6797,-6769,-6980]]},{"type":"Polygon","id":28093,"arcs":[[6985,6986,6987,-6983,-6793,-6798,-6985]]},{"type":"Polygon","id":13281,"arcs":[[-6967,6988,6989,6990,-6908]]},{"type":"Polygon","id":1089,"arcs":[[-6818,6991,6992,6993,-6968,-6811]]},{"type":"Polygon","id":1071,"arcs":[[6994,6995,-6992,-6817,-6833,6996]]},{"type":"Polygon","id":13213,"arcs":[[6997,6998,6999,-6820,-6854,7000]]},{"type":"Polygon","id":13111,"arcs":[[-6849,7001,7002,7003,7004,-7001,-6853]]},{"type":"Polygon","id":13313,"arcs":[[7005,7006,7007,-6821,-7000]]},{"type":"Polygon","id":13047,"arcs":[[7008,-6745,-7008]]},{"type":"Polygon","id":13291,"arcs":[[-6909,-6991,7009,7010,-7002,-6848]]},{"type":"MultiPolygon","id":37133,"arcs":[[[-6916,7011,7012,-6882,-6860]]]},{"type":"Polygon","id":13083,"arcs":[[-6832,-6747,7013,7014,-6997]]},{"type":"Polygon","id":13295,"arcs":[[-7007,7015,7016,7017,7018,-7014,-6746,-7009]]},{"type":"Polygon","id":40123,"arcs":[[-6728,-6852,7019,7020,7021,7022,-6826,-6733]]},{"type":"Polygon","id":35061,"arcs":[[-6863,-6950,7023,-6823]]},{"type":"Polygon","id":37155,"arcs":[[7024,7025,7026,7027,7028,-6951,-6875,-6856]]},{"type":"Polygon","id":35009,"arcs":[[-6887,7029,7030,7031,-6585]]},{"type":"Polygon","id":45087,"arcs":[[-6906,7032,7033,7034,7035,-6879,-6888]]},{"type":"Polygon","id":5077,"arcs":[[-6764,7036,7037,-6963,-6910]]},{"type":"Polygon","id":1033,"arcs":[[7038,7039,-6977,-6960]]},{"type":"MultiPolygon","id":6111,"arcs":[[[7040]],[[7041,-6922,-6559,7042]]]},{"type":"Polygon","id":28143,"arcs":[[-6763,-6982,7043,7044,7045,7046,7047,-7037]]},{"type":"Polygon","id":1049,"arcs":[[-7019,7048,7049,7050,7051,-6995,-7015]]},{"type":"Polygon","id":37017,"arcs":[[7052,7053,-7025,-6855,-6836]]},{"type":"Polygon","id":40065,"arcs":[[7054,7055,7056,-6953,-6918,-6914]]},{"type":"Polygon","id":5125,"arcs":[[-6958,7057,7058,7059,-6925]]},{"type":"Polygon","id":40031,"arcs":[[-6684,-6808,7060,7061,7062,-6912]]},{"type":"Polygon","id":40049,"arcs":[[-7023,7063,7064,7065,-6806,-6827]]},{"type":"Polygon","id":13123,"arcs":[[7066,7067,7068,-6998,-7005]]},{"type":"Polygon","id":13137,"arcs":[[-6946,7069,7070,7071,7072,-6989,-6966]]},{"type":"MultiPolygon","id":6037,"arcs":[[[7073]],[[7074]],[[-6553,7075,7076,-7043,-6558]]]},{"type":"Polygon","id":45023,"arcs":[[-6940,7077,-7033,-6905]]},{"type":"Polygon","id":45007,"arcs":[[7078,7079,7080,-6942,-6932,-6869]]},{"type":"Polygon","id":45025,"arcs":[[7081,7082,-6937,-6877,-6873,7083]]},{"type":"Polygon","id":45069,"arcs":[[-7029,7084,7085,7086,-7084,-6872,-6901,-6952]]},{"type":"Polygon","id":1079,"arcs":[[-6970,7087,7088,7089,7090,-7039,-6959]]},{"type":"Polygon","id":13311,"arcs":[[7091,7092,-7010,-6990,-7073]]},{"type":"Polygon","id":45059,"arcs":[[-7036,7093,7094,7095,-6868,-6880]]},{"type":"Polygon","id":35011,"arcs":[[7096,7097,7098,-6864,-6587]]},{"type":"Polygon","id":28137,"arcs":[[-6988,7099,7100,-7044,-6981]]},{"type":"Polygon","id":5051,"arcs":[[-7060,7101,7102,-6839,-6926]]},{"type":"Polygon","id":40029,"arcs":[[-6845,7103,7104,-7020,-6851]]},{"type":"Polygon","id":28117,"arcs":[[-6976,7105,7106,7107,-6978,-6971]]},{"type":"Polygon","id":48437,"arcs":[[-6903,7108,7109,7110,7111,-6898]]},{"type":"Polygon","id":48045,"arcs":[[-6892,7112,7113,7114,-7109,-6902]]},{"type":"Polygon","id":48069,"arcs":[[-7112,7115,7116,7117,-6885,-6899]]},{"type":"Polygon","id":48191,"arcs":[[-6896,7118,7119,7120,-7113,-6891]]},{"type":"Polygon","id":48075,"arcs":[[-6955,7121,7122,-7119,-6895]]},{"type":"Polygon","id":5097,"arcs":[[-7103,7123,7124,7125,7126,-6927,-6840]]},{"type":"Polygon","id":48369,"arcs":[[-7118,7127,7128,-7030,-6886]]},{"type":"Polygon","id":13187,"arcs":[[-7093,7129,7130,-7003,-7011]]},{"type":"MultiPolygon","id":37141,"arcs":[[[7131,7132]],[[-7013,7133,7134,7135,7136,-7053,-6835,-6883]]]},{"type":"Polygon","id":5113,"arcs":[[7137,7138,7139,-6801,-6928,-7127]]},{"type":"Polygon","id":1103,"arcs":[[-6994,7140,7141,-7088,-6969]]},{"type":"Polygon","id":13257,"arcs":[[7142,7143,-7070,-6945]]},{"type":"Polygon","id":40137,"arcs":[[-7066,7144,7145,7146,-7061,-6807]]},{"type":"Polygon","id":40005,"arcs":[[7147,7148,7149,7150,-7104,-6844]]},{"type":"Polygon","id":40127,"arcs":[[-6803,7151,7152,-7148,-6843,-6941]]},{"type":"Polygon","id":5107,"arcs":[[-7048,7153,7154,7155,7156,-6964,-7038]]},{"type":"Polygon","id":40099,"arcs":[[-7022,7157,7158,-7064]]},{"type":"Polygon","id":40141,"arcs":[[-7063,7159,7160,7161,-7055,-6913]]},{"type":"Polygon","id":13129,"arcs":[[-7069,7162,7163,7164,-7016,-7006,-6999]]},{"type":"Polygon","id":45033,"arcs":[[7165,7166,7167,-7085,-7028]]},{"type":"Polygon","id":13085,"arcs":[[-7131,7168,7169,7170,7171,-7067,-7004]]},{"type":"Polygon","id":45055,"arcs":[[7172,7173,7174,7175,7176,-6938,-7083]]},{"type":"Polygon","id":35041,"arcs":[[-7032,7177,7178,7179,7180,-7097,-6586]]},{"type":"Polygon","id":28145,"arcs":[[-7108,7181,7182,7183,-6986,-6984,-6979]]},{"type":"Polygon","id":1095,"arcs":[[-7052,7184,7185,7186,-7141,-6993,-6996]]},{"type":"Polygon","id":13055,"arcs":[[7187,7188,-7049,-7018]]},{"type":"Polygon","id":13115,"arcs":[[-7165,7189,7190,7191,-7188,-7017]]},{"type":"Polygon","id":35053,"arcs":[[-6949,7192,7193,7194,-6824,-7024]]},{"type":"Polygon","id":35003,"arcs":[[-7195,7195,7196,7197,-5797,-6825]]},{"type":"Polygon","id":1059,"arcs":[[-7091,7198,7199,7200,-6974,-7040]]},{"type":"Polygon","id":48197,"arcs":[[-7057,7201,7202,7203,-7122,-6954]]},{"type":"Polygon","id":45039,"arcs":[[-6939,-7177,7204,7205,-7034,-7078]]},{"type":"Polygon","id":5001,"arcs":[[-6965,-7157,7206,7207,7208,-6934,-6930]]},{"type":"Polygon","id":13227,"arcs":[[-7172,7209,-7163,-7068]]},{"type":"Polygon","id":28071,"arcs":[[-7184,7210,7211,7212,7213,-7100,-6987]]},{"type":"Polygon","id":28107,"arcs":[[-7214,7214,7215,7216,-7045,-7101]]},{"type":"Polygon","id":13119,"arcs":[[7217,7218,7219,-7143,-6944]]},{"type":"Polygon","id":45031,"arcs":[[-7087,7220,7221,-7173,-7082]]},{"type":"Polygon","id":45071,"arcs":[[-7206,7222,7223,7224,7225,-7094,-7035]]},{"type":"Polygon","id":1019,"arcs":[[-7192,7226,7227,7228,7229,-7050,-7189]]},{"type":"Polygon","id":28027,"arcs":[[7230,7231,7232,-7154,-7047,7233]]},{"type":"Polygon","id":28119,"arcs":[[-7217,7234,-7234,-7046]]},{"type":"Polygon","id":13139,"arcs":[[-7072,7235,7236,7237,7238,-7169,-7130,-7092]]},{"type":"Polygon","id":28081,"arcs":[[7239,7240,7241,7242,-7182,-7107]]},{"type":"Polygon","id":40019,"arcs":[[-7159,7243,7244,7245,7246,-7145,-7065]]},{"type":"Polygon","id":40069,"arcs":[[-7021,-7105,-7151,7247,7248,-7244,-7158]]},{"type":"Polygon","id":40033,"arcs":[[-7147,7249,7250,7251,-7160,-7062]]},{"type":"Polygon","id":40089,"arcs":[[-7140,7252,7253,7254,7255,7256,-7152,-6802]]},{"type":"Polygon","id":5059,"arcs":[[-7059,7257,7258,7259,-7124,-7102]]},{"type":"Polygon","id":4007,"arcs":[[-5749,7260,7261,7262,-6693,-5751]]},{"type":"Polygon","id":13147,"arcs":[[-7081,7263,7264,-7218,-6943]]},{"type":"Polygon","id":5053,"arcs":[[-6957,7265,7266,7267,-7258,-7058]]},{"type":"Polygon","id":5069,"arcs":[[-6935,-7209,7268,7269,-7266,-6956]]},{"type":"Polygon","id":13011,"arcs":[[7270,7271,-7236,-7071,-7144,-7220]]},{"type":"Polygon","id":37047,"arcs":[[-7137,7272,7273,-7026,-7054]]},{"type":"Polygon","id":45001,"arcs":[[7274,7275,7276,-7079,-7096]]},{"type":"Polygon","id":28057,"arcs":[[-6975,-7201,7277,7278,-7240,-7106]]},{"type":"Polygon","id":48487,"arcs":[[-7162,7279,7280,7281,-7202,-7056]]},{"type":"Polygon","id":13015,"arcs":[[7282,7283,7284,-7190,-7164,7285]]},{"type":"Polygon","id":13057,"arcs":[[-7171,7286,7287,7288,-7286,-7210]]},{"type":"Polygon","id":45047,"arcs":[[-7226,7289,7290,7291,-7275,-7095]]},{"type":"MultiPolygon","id":37129,"arcs":[[[7292,7293]],[[7294,-7132,7295,7296,-7135]]]},{"type":"Polygon","id":28115,"arcs":[[-7243,7297,7298,-7211,-7183]]},{"type":"Polygon","id":45061,"arcs":[[7299,7300,-7174,-7222]]},{"type":"MultiPolygon","id":37019,"arcs":[[[7301,7302]],[[-7293,7303]],[[-7297,7304,7305,7306,7307,-7273,-7136]]]},{"type":"Polygon","id":5061,"arcs":[[7308,7309,7310,7311,-7138]]},{"type":"Polygon","id":5109,"arcs":[[7312,7313,7314,-7309,-7126]]},{"type":"Polygon","id":35027,"arcs":[[-7099,7315,7316,7317,-7193,-6948,-6865]]},{"type":"Polygon","id":5019,"arcs":[[-7260,7318,7319,7320,-7313,-7125]]},{"type":"Polygon","id":13117,"arcs":[[-7239,7321,7322,-7287,-7170]]},{"type":"Polygon","id":1093,"arcs":[[7323,7324,7325,7326,7327,-7278,-7200]]},{"type":"Polygon","id":4012,"arcs":[[-6695,7328,7329,7330,7331,-6550,7332]]},{"type":"Polygon","id":48345,"arcs":[[7333,7334,7335,-7114,-7121]]},{"type":"Polygon","id":48101,"arcs":[[-7123,-7204,7336,7337,-7334,-7120]]},{"type":"Polygon","id":1043,"arcs":[[-7187,7338,7339,7340,-7089,-7142]]},{"type":"Polygon","id":48153,"arcs":[[-7336,7341,7342,-7110,-7115]]},{"type":"Polygon","id":48189,"arcs":[[-7116,-7111,-7343,7343,7344]]},{"type":"Polygon","id":48279,"arcs":[[-7345,7345,7346,-7128,-7117]]},{"type":"Polygon","id":45041,"arcs":[[7347,7348,7349,7350,-7300,-7221,-7086,-7168]]},{"type":"Polygon","id":48017,"arcs":[[-7347,7351,-7178,-7031,-7129]]},{"type":"Polygon","id":1133,"arcs":[[-7090,-7341,7352,-7324,-7199]]},{"type":"MultiPolygon","id":45051,"arcs":[[[-7302,7353]],[[-7306,7354]],[[-7274,-7308,7355,7356,7357,-7166,-7027]]]},{"type":"Polygon","id":45067,"arcs":[[-7358,7358,7359,-7348,-7167]]},{"type":"Polygon","id":13157,"arcs":[[7360,7361,7362,-7237,-7272]]},{"type":"Polygon","id":40067,"arcs":[[-7247,7363,7364,7365,-7250,-7146]]},{"type":"Polygon","id":13105,"arcs":[[-7277,7366,7367,7368,7369,7370,-7264,-7080]]},{"type":"Polygon","id":13195,"arcs":[[-7371,7371,7372,-7361,-7271,-7219,-7265]]},{"type":"Polygon","id":45079,"arcs":[[7373,7374,7375,-7223,-7205,-7176]]},{"type":"Polygon","id":1009,"arcs":[[-7186,7376,7377,7378,7379,-7339]]},{"type":"Polygon","id":48155,"arcs":[[-7203,-7282,7380,7381,7382,-7337]]},{"type":"Polygon","id":48485,"arcs":[[-7252,7383,7384,-7280,-7161]]},{"type":"Polygon","id":1055,"arcs":[[-7230,7385,7386,-7377,-7185,-7051]]},{"type":"Polygon","id":45063,"arcs":[[7387,7388,7389,7390,-7224,-7376]]},{"type":"Polygon","id":28161,"arcs":[[7391,7392,7393,-7215,-7213]]},{"type":"Polygon","id":5133,"arcs":[[7394,-7253,-7139,-7312]]},{"type":"Polygon","id":45081,"arcs":[[-7391,7395,7396,-7290,-7225]]},{"type":"Polygon","id":13121,"arcs":[[-7323,7397,7398,7399,7400,7401,7402,7403,7404,-7288]]},{"type":"Polygon","id":40095,"arcs":[[7405,7406,7407,-7245,-7249]]},{"type":"Polygon","id":5079,"arcs":[[-7208,7408,7409,7410,-7269]]},{"type":"Polygon","id":45085,"arcs":[[-7351,7411,7412,-7374,-7175,-7301]]},{"type":"Polygon","id":13135,"arcs":[[7413,7414,7415,7416,-7398,-7322,-7238]]},{"type":"Polygon","id":28135,"arcs":[[-7394,7417,7418,7419,-7231,-7235,-7216]]},{"type":"Polygon","id":28013,"arcs":[[-7299,7420,7421,7422,-7392,-7212]]},{"type":"Polygon","id":40013,"arcs":[[7423,7424,7425,7426,-7406,-7248,-7150]]},{"type":"Polygon","id":40023,"arcs":[[-7257,7427,7428,-7424,-7149,-7153]]},{"type":"Polygon","id":5039,"arcs":[[-7268,7429,7430,7431,-7319,-7259]]},{"type":"Polygon","id":48077,"arcs":[[-7366,7432,7433,7434,-7384,-7251]]},{"type":"Polygon","id":13013,"arcs":[[7435,7436,-7414,-7363]]},{"type":"Polygon","id":28011,"arcs":[[7437,7438,7439,7440,-7155,-7233]]},{"type":"Polygon","id":5041,"arcs":[[-7441,7441,7442,-7409,-7207,-7156]]},{"type":"Polygon","id":13233,"arcs":[[-7285,7443,7444,7445,-7227,-7191]]},{"type":"Polygon","id":28095,"arcs":[[-7279,-7328,7446,7447,7448,7449,-7241]]},{"type":"Polygon","id":35005,"arcs":[[-7181,7450,7451,7452,-7316,-7098]]},{"type":"Polygon","id":13067,"arcs":[[-7405,7453,7454,-7283,-7289]]},{"type":"Polygon","id":6065,"arcs":[[7455,7456,7457,-6551,-7332]]},{"type":"Polygon","id":13223,"arcs":[[-7455,7458,7459,7460,-7444,-7284]]},{"type":"Polygon","id":45065,"arcs":[[-7292,7461,7462,7463,-7367,-7276]]},{"type":"Polygon","id":28017,"arcs":[[-7242,-7450,7464,7465,-7421,-7298]]},{"type":"Polygon","id":40085,"arcs":[[-7408,7466,7467,7468,-7364,-7246]]},{"type":"Polygon","id":5025,"arcs":[[-7411,7469,7470,7471,-7430,-7267,-7270]]},{"type":"Polygon","id":1075,"arcs":[[7472,7473,7474,-7447,-7327]]},{"type":"Polygon","id":13221,"arcs":[[-7370,7475,7476,7477,7478,7479,-7372]]},{"type":"Polygon","id":4013,"arcs":[[-7263,7480,7481,7482,-7329,-6694]]},{"type":"Polygon","id":13059,"arcs":[[-7480,7483,-7362,-7373]]},{"type":"Polygon","id":5057,"arcs":[[7484,7485,7486,7487,-7310,-7315]]},{"type":"Polygon","id":1127,"arcs":[[-7340,-7380,7488,7489,7490,-7325,-7353]]},{"type":"Polygon","id":13317,"arcs":[[7491,7492,7493,7494,-7476,-7369]]},{"type":"Polygon","id":48337,"arcs":[[-7469,7495,7496,7497,-7433,-7365]]},{"type":"Polygon","id":1115,"arcs":[[7498,7499,7500,7501,-7378,-7387]]},{"type":"Polygon","id":28133,"arcs":[[-7420,7502,7503,7504,-7438,-7232]]},{"type":"Polygon","id":13181,"arcs":[[-7464,7505,7506,-7492,-7368]]},{"type":"Polygon","id":45037,"arcs":[[7507,7508,7509,-7462,-7291,-7397]]},{"type":"Polygon","id":13089,"arcs":[[-7417,7510,7511,7512,-7399]]},{"type":"Polygon","id":1015,"arcs":[[7513,-7499,-7386,-7229,7514]]},{"type":"Polygon","id":13219,"arcs":[[-7479,7515,7516,7517,-7436,-7484]]},{"type":"Polygon","id":1029,"arcs":[[-7446,7518,7519,7520,7521,7522,-7515,-7228]]},{"type":"Polygon","id":48387,"arcs":[[-7256,7523,7524,7525,7526,7527,7528,-7428]]},{"type":"Polygon","id":5099,"arcs":[[-7321,7529,7530,7531,-7485,-7314]]},{"type":"Polygon","id":48181,"arcs":[[-7427,7532,7533,7534,7535,-7467,-7407]]},{"type":"Polygon","id":48097,"arcs":[[-7536,7536,7537,-7496,-7468]]},{"type":"Polygon","id":5081,"arcs":[[-7311,-7488,7538,7539,-7254,-7395]]},{"type":"Polygon","id":45027,"arcs":[[7540,7541,7542,7543,-7412,-7350]]},{"type":"MultiPolygon","id":6059,"arcs":[[[-6552,-7458,7544,7545,-7076]]]},{"type":"Polygon","id":48277,"arcs":[[-7529,7546,7547,-7425,-7429]]},{"type":"Polygon","id":13297,"arcs":[[-7518,7548,7549,7550,-7415,-7437]]},{"type":"Polygon","id":1057,"arcs":[[-7491,7551,7552,-7473,-7326]]},{"type":"Polygon","id":13143,"arcs":[[7553,-7519,-7445,-7461]]},{"type":"Polygon","id":28043,"arcs":[[-7423,7554,7555,7556,7557,-7418,-7393]]},{"type":"Polygon","id":45089,"arcs":[[-7360,7558,7559,-7541,-7349]]},{"type":"Polygon","id":48147,"arcs":[[-7548,7560,7561,7562,-7533,-7426]]},{"type":"Polygon","id":45017,"arcs":[[-7413,-7544,7563,-7388,-7375]]},{"type":"Polygon","id":45003,"arcs":[[7564,7565,7566,7567,-7508,-7396,-7390]]},{"type":"Polygon","id":1073,"arcs":[[-7502,7568,7569,7570,-7489,-7379]]},{"type":"Polygon","id":48269,"arcs":[[-7383,7571,7572,7573,-7338]]},{"type":"Polygon","id":48275,"arcs":[[7574,7575,-7572,-7382]]},{"type":"Polygon","id":48009,"arcs":[[-7435,7576,7577,7578,-7385]]},{"type":"Polygon","id":48125,"arcs":[[-7574,7579,7580,-7335]]},{"type":"Polygon","id":48107,"arcs":[[-7581,7581,7582,-7342]]},{"type":"Polygon","id":48023,"arcs":[[-7579,7583,-7575,-7381,-7281]]},{"type":"Polygon","id":48303,"arcs":[[-7583,7584,7585,-7344]]},{"type":"Polygon","id":48079,"arcs":[[7586,7587,7588,-7179,-7352]]},{"type":"Polygon","id":48219,"arcs":[[-7586,7589,-7587,-7346]]},{"type":"Polygon","id":5103,"arcs":[[-7432,7590,7591,7592,-7530,-7320]]},{"type":"Polygon","id":13211,"arcs":[[7593,7594,7595,7596,-7549,-7517]]},{"type":"Polygon","id":13045,"arcs":[[-7403,7597,7598,7599,-7520,-7554,-7460,7600]]},{"type":"Polygon","id":28083,"arcs":[[-7558,7601,7602,7603,-7503,-7419]]},{"type":"Polygon","id":28025,"arcs":[[-7449,7604,7605,7606,-7465]]},{"type":"Polygon","id":13097,"arcs":[[-7404,-7601,-7459,-7454]]},{"type":"Polygon","id":5013,"arcs":[[7607,7608,-7591,-7431,-7472]]},{"type":"Polygon","id":5043,"arcs":[[-7443,7609,7610,7611,-7470,-7410]]},{"type":"Polygon","id":13247,"arcs":[[7612,-7511,-7416,-7551,7613]]},{"type":"MultiPolygon","id":45043,"arcs":[[[7614,7615]],[[-7357,7616,7617,7618,-7559,-7359]]]},{"type":"Polygon","id":4011,"arcs":[[-7198,7619,7620,7621,7622,-5798]]},{"type":"Polygon","id":13133,"arcs":[[7623,7624,7625,-7594,-7516,-7478]]},{"type":"Polygon","id":28087,"arcs":[[-7475,7626,7627,7628,-7605,-7448]]},{"type":"Polygon","id":13217,"arcs":[[-7597,7629,7630,7631,-7614,-7550]]},{"type":"Polygon","id":28155,"arcs":[[-7607,7632,7633,7634,-7555,-7422,-7466]]},{"type":"Polygon","id":13265,"arcs":[[7635,7636,-7624,-7477,-7495]]},{"type":"Polygon","id":48037,"arcs":[[-7540,7637,7638,7639,-7524,-7255]]},{"type":"Polygon","id":45075,"arcs":[[-7543,7640,7641,7642,7643,7644,-7565,-7389,-7564]]},{"type":"Polygon","id":5011,"arcs":[[-7612,7645,7646,-7608,-7471]]},{"type":"Polygon","id":13073,"arcs":[[-7463,-7510,7647,7648,-7506]]},{"type":"Polygon","id":1121,"arcs":[[-7514,-7523,7649,7650,7651,-7500]]},{"type":"Polygon","id":28097,"arcs":[[-7635,7652,7653,7654,-7556]]},{"type":"Polygon","id":28015,"arcs":[[-7655,7655,7656,-7602,-7557]]},{"type":"Polygon","id":13189,"arcs":[[-7507,-7649,7657,7658,7659,-7493]]},{"type":"Polygon","id":4009,"arcs":[[-7623,7660,7661,7662,-7261,-5748,-5799]]},{"type":"Polygon","id":13063,"arcs":[[-7513,7663,7664,7665,-7400]]},{"type":"Polygon","id":13151,"arcs":[[-7613,-7632,7666,7667,-7664,-7512]]},{"type":"Polygon","id":5091,"arcs":[[7668,7669,7670,7671,-7638,-7539,-7487]]},{"type":"Polygon","id":13301,"arcs":[[7672,7673,7674,-7636,-7494,-7660]]},{"type":"Polygon","id":1125,"arcs":[[-7490,-7571,7675,7676,7677,7678,-7552]]},{"type":"Polygon","id":35025,"arcs":[[-7589,7679,7680,7681,7682,7683,7684,-7451,-7180]]},{"type":"Polygon","id":28105,"arcs":[[-7629,7685,7686,7687,-7633,-7606]]},{"type":"Polygon","id":5017,"arcs":[[-7440,7688,7689,7690,7691,7692,7693,-7610,-7442]]},{"type":"Polygon","id":13113,"arcs":[[7694,7695,-7401,-7666]]},{"type":"Polygon","id":1117,"arcs":[[-7652,7696,7697,7698,-7569,-7501]]},{"type":"Polygon","id":13245,"arcs":[[7699,7700,-7658,-7648,-7509,-7568]]},{"type":"Polygon","id":1107,"arcs":[[-7553,-7679,7701,7702,7703,-7627,-7474]]},{"type":"Polygon","id":28019,"arcs":[[-7688,7704,7705,-7653,-7634]]},{"type":"Polygon","id":28151,"arcs":[[-7505,7706,7707,7708,-7689,-7439]]},{"type":"Polygon","id":13159,"arcs":[[7709,7710,7711,7712,-7630,-7596]]},{"type":"Polygon","id":13077,"arcs":[[-7696,7713,7714,7715,7716,-7598,-7402]]},{"type":"Polygon","id":45015,"arcs":[[-7619,7717,7718,7719,7720,-7641,-7542,-7560]]},{"type":"MultiPolygon","id":6073,"arcs":[[[7721,7722,-7545,-7457]]]},{"type":"Polygon","id":1111,"arcs":[[-7600,7723,7724,7725,7726,7727,-7521]]},{"type":"Polygon","id":1027,"arcs":[[-7728,7728,7729,-7650,-7522]]},{"type":"Polygon","id":48119,"arcs":[[-7528,7730,7731,7732,-7561,-7547]]},{"type":"Polygon","id":45011,"arcs":[[7733,7734,7735,-7566,-7645]]},{"type":"Polygon","id":13237,"arcs":[[7736,7737,7738,-7710,-7595,-7626]]},{"type":"Polygon","id":35051,"arcs":[[-7318,7739,7740,7741,7742,-7196,-7194]]},{"type":"Polygon","id":5073,"arcs":[[-7532,7743,7744,7745,-7669,-7486]]},{"type":"Polygon","id":13141,"arcs":[[-7675,7746,7747,7748,-7737,-7625,-7637]]},{"type":"Polygon","id":4027,"arcs":[[-7483,7749,7750,7751,-7330]]},{"type":"Polygon","id":4021,"arcs":[[-7262,-7663,7752,-7481]]},{"type":"Polygon","id":48237,"arcs":[[-7498,7753,7754,7755,7756,-7577,-7434]]},{"type":"Polygon","id":5027,"arcs":[[-7593,7757,7758,7759,-7744,-7531]]},{"type":"Polygon","id":13035,"arcs":[[-7713,7760,7761,7762,-7667,-7631]]},{"type":"Polygon","id":45009,"arcs":[[7763,7764,-7734,-7644]]},{"type":"Polygon","id":6025,"arcs":[[-7752,7765,-7722,-7456,-7331]]},{"type":"Polygon","id":48497,"arcs":[[-7538,7766,7767,7768,-7754,-7497]]},{"type":"Polygon","id":48121,"arcs":[[7769,7770,7771,-7767,-7537,-7535]]},{"type":"Polygon","id":13149,"arcs":[[-7717,7772,-7724,-7599]]},{"type":"Polygon","id":48231,"arcs":[[7773,7774,7775,7776,7777,-7562,-7733,7778]]},{"type":"Polygon","id":48085,"arcs":[[-7563,-7778,7779,7780,-7770,-7534]]},{"type":"Polygon","id":48263,"arcs":[[7781,7782,7783,7784,-7580]]},{"type":"Polygon","id":48433,"arcs":[[7785,7786,7787,-7782,-7573]]},{"type":"Polygon","id":48449,"arcs":[[7788,7789,7790,-7526]]},{"type":"Polygon","id":48169,"arcs":[[-7785,7791,7792,7793,-7582]]},{"type":"Polygon","id":48447,"arcs":[[7794,7795,7796,7797,-7584]]},{"type":"Polygon","id":48503,"arcs":[[-7757,7798,7799,-7795,-7578]]},{"type":"Polygon","id":48207,"arcs":[[-7798,7800,7801,-7786,-7576]]},{"type":"Polygon","id":5003,"arcs":[[-7694,7802,7803,-7646,-7611]]},{"type":"Polygon","id":48305,"arcs":[[-7794,7804,7805,7806,-7585]]},{"type":"Polygon","id":35035,"arcs":[[-7453,7807,7808,7809,7810,7811,-7740,-7317]]},{"type":"Polygon","id":48501,"arcs":[[7812,7813,-7680,-7588]]},{"type":"Polygon","id":48445,"arcs":[[-7807,7814,7815,-7813,-7590]]},{"type":"Polygon","id":48159,"arcs":[[-7791,7816,7817,7818,-7731,-7527]]},{"type":"Polygon","id":5139,"arcs":[[-7609,-7647,-7804,7819,7820,-7758,-7592]]},{"type":"Polygon","id":48223,"arcs":[[-7819,7821,7822,-7779,-7732]]},{"type":"Polygon","id":48343,"arcs":[[-7640,7823,7824,7825,7826,-7789,-7525]]},{"type":"Polygon","id":28051,"arcs":[[-7657,7827,7828,7829,-7603]]},{"type":"Polygon","id":13255,"arcs":[[-7763,7830,7831,7832,-7714,-7695,-7665,-7668]]},{"type":"Polygon","id":45035,"arcs":[[-7721,7833,7834,-7642]]},{"type":"Polygon","id":28053,"arcs":[[-7604,-7830,7835,7836,-7707,-7504]]},{"type":"Polygon","id":13125,"arcs":[[7837,7838,-7747,-7674]]},{"type":"Polygon","id":13163,"arcs":[[7839,7840,7841,7842,-7838,-7673,-7659,-7701]]},{"type":"Polygon","id":48067,"arcs":[[-7672,7843,7844,-7824,-7639]]},{"type":"Polygon","id":13033,"arcs":[[-7567,-7736,7845,7846,7847,7848,-7840,-7700]]},{"type":"Polygon","id":28103,"arcs":[[-7704,7849,7850,7851,-7686,-7628]]},{"type":"Polygon","id":28159,"arcs":[[-7852,7852,7853,7854,-7705,-7687]]},{"type":"Polygon","id":28007,"arcs":[[-7855,7855,7856,-7828,-7656,-7654,-7706]]},{"type":"Polygon","id":1007,"arcs":[[7857,7858,7859,-7676,-7570,-7699]]},{"type":"Polygon","id":13303,"arcs":[[-7839,-7843,7860,7861,7862,-7748]]},{"type":"Polygon","id":13199,"arcs":[[-7833,7863,7864,7865,7866,7867,-7715]]},{"type":"Polygon","id":13285,"arcs":[[-7868,7868,7869,-7725,-7773,-7716]]},{"type":"Polygon","id":35017,"arcs":[[-7743,7870,7871,-7620,-7197]]},{"type":"Polygon","id":13231,"arcs":[[7872,7873,-7864,-7832]]},{"type":"Polygon","id":13171,"arcs":[[7874,7875,-7873,-7831,-7762]]},{"type":"Polygon","id":13207,"arcs":[[-7712,7876,7877,7878,7879,-7875,-7761]]},{"type":"Polygon","id":13009,"arcs":[[-7749,-7863,7880,7881,-7738]]},{"type":"Polygon","id":13169,"arcs":[[-7882,7882,7883,7884,-7877,-7711,-7739]]},{"type":"MultiPolygon","id":45029,"arcs":[[[7885,7886]],[[-7835,7887,7888,7889,7890,-7764,-7643]]]},{"type":"Polygon","id":45005,"arcs":[[-7765,7891,7892,-7846,-7735]]},{"type":"Polygon","id":1063,"arcs":[[7893,7894,7895,-7702,-7678]]},{"type":"Polygon","id":1017,"arcs":[[-7870,7896,7897,7898,-7726]]},{"type":"Polygon","id":1123,"arcs":[[-7899,7899,7900,7901,7902,-7729,-7727]]},{"type":"Polygon","id":1037,"arcs":[[-7903,7903,7904,-7697,-7651,-7730]]},{"type":"Polygon","id":28125,"arcs":[[-7837,7905,7906,-7708]]},{"type":"Polygon","id":48063,"arcs":[[-7827,7907,7908,-7817,-7790]]},{"type":"Polygon","id":1021,"arcs":[[-7905,7909,7910,7911,7912,-7858,-7698]]},{"type":"Polygon","id":35013,"arcs":[[7913,7914,7915,-7741,-7812]]},{"type":"Polygon","id":13251,"arcs":[[7916,7917,7918,7919,-7847,-7893]]},{"type":"Polygon","id":45049,"arcs":[[7920,7921,7922,-7917,-7892,-7891]]},{"type":"Polygon","id":28163,"arcs":[[7923,7924,7925,7926,-7906,-7836,-7829]]},{"type":"Polygon","id":22017,"arcs":[[7927,7928,7929,7930,7931,-7844,-7671,7932]]},{"type":"Polygon","id":22015,"arcs":[[7933,7934,7935,-7933,-7670,-7746]]},{"type":"Polygon","id":22119,"arcs":[[7936,-7934,-7745,-7760,7937]]},{"type":"Polygon","id":22027,"arcs":[[7938,7939,-7938,-7759,-7821,7940]]},{"type":"Polygon","id":22111,"arcs":[[7941,7942,-7941,-7820,7943]]},{"type":"Polygon","id":48499,"arcs":[[7944,7945,7946,7947,-7822,-7818,-7909]]},{"type":"Polygon","id":28055,"arcs":[[-7907,-7927,7948,7949,-7690,-7709]]},{"type":"Polygon","id":13319,"arcs":[[-7862,7950,7951,7952,-7883,-7881]]},{"type":"Polygon","id":22067,"arcs":[[-7693,7953,7954,7955,-7944,-7803]]},{"type":"Polygon","id":1065,"arcs":[[-7860,7956,7957,-7894,-7677]]},{"type":"Polygon","id":22123,"arcs":[[7958,7959,-7954,-7692]]},{"type":"Polygon","id":48363,"arcs":[[7960,7961,7962,7963,7964,-7799,-7756]]},{"type":"Polygon","id":22035,"arcs":[[7965,7966,7967,-7959,-7691,-7950]]},{"type":"Polygon","id":48367,"arcs":[[7968,7969,7970,-7961,-7755,-7769]]},{"type":"Polygon","id":13293,"arcs":[[-7876,-7880,7971,7972,7973,-7865,-7874]]},{"type":"Polygon","id":1119,"arcs":[[7974,7975,7976,7977,-7850,-7703,-7896]]},{"type":"Polygon","id":48439,"arcs":[[-7768,-7772,7978,7979,7980,-7969]]},{"type":"Polygon","id":48113,"arcs":[[-7781,7981,7982,7983,-7979,-7771]]},{"type":"Polygon","id":48397,"arcs":[[-7777,7984,-7982,-7780]]},{"type":"Polygon","id":48379,"arcs":[[-7948,7985,-7774,-7823]]},{"type":"Polygon","id":48415,"arcs":[[7986,7987,7988,-7792,-7784]]},{"type":"Polygon","id":35015,"arcs":[[-7685,7989,7990,7991,-7808,-7452]]},{"type":"Polygon","id":48151,"arcs":[[-7788,7992,7993,-7987,-7783]]},{"type":"Polygon","id":48033,"arcs":[[-7989,7994,7995,7996,-7805,-7793]]},{"type":"Polygon","id":48115,"arcs":[[-7997,7997,7998,-7815,-7806]]},{"type":"Polygon","id":48165,"arcs":[[-7816,-7999,7999,8000,-7681,-7814]]},{"type":"Polygon","id":48253,"arcs":[[-7802,8001,8002,8003,-7993,-7787]]},{"type":"Polygon","id":48417,"arcs":[[8004,8005,8006,-8002,-7801,-7797]]},{"type":"Polygon","id":48429,"arcs":[[-7965,8007,-8005,-7796,-7800]]},{"type":"Polygon","id":13165,"arcs":[[-7920,8008,8009,-7848]]},{"type":"Polygon","id":13021,"arcs":[[8010,8011,8012,-7878,-7885]]},{"type":"Polygon","id":28099,"arcs":[[8013,8014,8015,-7854]]},{"type":"Polygon","id":28079,"arcs":[[-8016,8016,8017,8018,-7856]]},{"type":"Polygon","id":28069,"arcs":[[-7978,8019,-8014,-7853,-7851]]},{"type":"Polygon","id":48459,"arcs":[[-7826,8020,8021,8022,8023,-7945,-7908]]},{"type":"Polygon","id":13289,"arcs":[[8024,8025,-8011,-7884,-7953]]},{"type":"Polygon","id":13263,"arcs":[[8026,8027,8028,8029,8030,-7866,-7974]]},{"type":"Polygon","id":48315,"arcs":[[-7932,8031,-8021,-7825,-7845]]},{"type":"Polygon","id":28089,"arcs":[[-8019,8032,8033,8034,-7924,-7857]]},{"type":"Polygon","id":1105,"arcs":[[-7913,8035,8036,-7957,-7859]]},{"type":"Polygon","id":13145,"arcs":[[-8031,8037,8038,-7897,-7869,-7867]]},{"type":"Polygon","id":13079,"arcs":[[-8013,8039,8040,8041,-7972,-7879]]},{"type":"Polygon","id":48257,"arcs":[[8042,8043,8044,-7983,-7985,-7776]]},{"type":"Polygon","id":13107,"arcs":[[-7849,-8010,8045,8046,8047,8048,8049,8050,-7841]]},{"type":"Polygon","id":48467,"arcs":[[-7986,-7947,8051,8052,-8043,-7775]]},{"type":"Polygon","id":13167,"arcs":[[-8051,8053,-7951,-7861,-7842]]},{"type":"Polygon","id":48203,"arcs":[[-7931,8054,8055,8056,-8022,-8032]]},{"type":"Polygon","id":35023,"arcs":[[8057,8058,8059,-7621,-7872]]},{"type":"Polygon","id":1051,"arcs":[[8060,8061,8062,-7910,-7904,-7902]]},{"type":"Polygon","id":22061,"arcs":[[8063,8064,8065,-7939,-7943]]},{"type":"MultiPolygon","id":45053,"arcs":[[[8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,-7922]]]},{"type":"Polygon","id":13269,"arcs":[[-8042,8076,8077,8078,8079,-8027,-7973]]},{"type":"Polygon","id":1081,"arcs":[[-8039,8080,8081,8082,-7900,-7898]]},{"type":"Polygon","id":1047,"arcs":[[8083,8084,8085,8086,-8036,-7912]]},{"type":"Polygon","id":22073,"arcs":[[8087,8088,8089,-8064,-7942,-7956]]},{"type":"Polygon","id":13175,"arcs":[[8090,8091,8092,-7952,-8054,8093]]},{"type":"Polygon","id":1001,"arcs":[[-8063,8094,8095,-8084,-7911]]},{"type":"MultiPolygon","id":45013,"arcs":[[[8096]],[[-8073,8097]],[[-8071,8098]],[[-8069,8099]],[[8100]],[[8101]],[[8102,-8067,-7921,-7890]]]},{"type":"Polygon","id":13225,"arcs":[[8103,-8077,-8041,8104]]},{"type":"Polygon","id":13153,"arcs":[[-8026,8105,8106,8107,8108,-8105,-8040,-8012]]},{"type":"Polygon","id":48423,"arcs":[[-8024,8109,8110,8111,8112,-8052,-7946]]},{"type":"Polygon","id":22083,"arcs":[[-7968,8113,8114,8115,-8088,-7955,-7960]]},{"type":"Polygon","id":48183,"arcs":[[-8057,8116,-8110,-8023]]},{"type":"Polygon","id":13031,"arcs":[[8117,8118,8119,8120,-8046,-8009,-7919]]},{"type":"Polygon","id":28123,"arcs":[[-8018,8121,8122,8123,-8033]]},{"type":"Polygon","id":28149,"arcs":[[8124,8125,8126,8127,8128,8129,-7966,-7949,-7926]]},{"type":"Polygon","id":13215,"arcs":[[-8030,8130,8131,-8081,-8038]]},{"type":"Polygon","id":35029,"arcs":[[-7916,8132,-8058,-7871,-7742]]},{"type":"Polygon","id":13103,"arcs":[[-8076,8133,8134,-8118,-7918,-7923]]},{"type":"Polygon","id":1087,"arcs":[[8135,8136,8137,-8061,-7901,-8083]]},{"type":"Polygon","id":28121,"arcs":[[-8124,8138,8139,8140,-8034]]},{"type":"Polygon","id":22013,"arcs":[[-8066,8141,8142,8143,8144,-7935,-7937,-7940]]},{"type":"Polygon","id":13023,"arcs":[[8145,8146,-8106,-8025,-8093]]},{"type":"Polygon","id":28075,"arcs":[[-7977,8147,8148,8149,-8020]]},{"type":"Polygon","id":28101,"arcs":[[-8150,8150,-8122,-8017,-8015]]},{"type":"Polygon","id":28049,"arcs":[[-8141,8151,8152,-8125,-7925,-8035]]},{"type":"MultiPolygon","id":22065,"arcs":[[[8153,-8128]],[[8154,8155,-8114,-7967,-8130]]]},{"type":"Polygon","id":13197,"arcs":[[8156,8157,8158,8159,8160,-8028,-8080]]},{"type":"Polygon","id":13043,"arcs":[[8161,8162,-8047,-8121]]},{"type":"Polygon","id":48221,"arcs":[[8163,8164,8165,-7962,-7971]]},{"type":"Polygon","id":48251,"arcs":[[8166,8167,8168,8169,-8164,-7970,-7981]]},{"type":"Polygon","id":48139,"arcs":[[-7984,-8045,8170,8171,8172,-8167,-7980]]},{"type":"Polygon","id":1091,"arcs":[[-7958,-8037,-8087,8173,8174,8175,-7975,-7895]]},{"type":"Polygon","id":13053,"arcs":[[-8161,8176,8177,-8131,-8029]]},{"type":"Polygon","id":48227,"arcs":[[8178,8179,8180,8181,-7996]]},{"type":"Polygon","id":48335,"arcs":[[8182,8183,8184,-8179,-7995,-7988]]},{"type":"Polygon","id":48353,"arcs":[[8185,8186,8187,-8183,-7994]]},{"type":"Polygon","id":48317,"arcs":[[-8182,8188,8189,8190,-8000,-7998]]},{"type":"Polygon","id":48003,"arcs":[[-8191,8191,8192,8193,-7682,-8001]]},{"type":"Polygon","id":13193,"arcs":[[-8104,-8109,8194,8195,8196,-8078]]},{"type":"Polygon","id":48441,"arcs":[[8197,8198,8199,-8186,-8004]]},{"type":"Polygon","id":48133,"arcs":[[-7964,8200,8201,8202,8203,-8006,-8008]]},{"type":"Polygon","id":48143,"arcs":[[-7963,-8166,8204,8205,8206,8207,-8201]]},{"type":"Polygon","id":48059,"arcs":[[-8204,8208,8209,-8198,-8003,-8007]]},{"type":"Polygon","id":4019,"arcs":[[-7662,8210,8211,8212,-7750,-7482,-7753]]},{"type":"Polygon","id":13283,"arcs":[[8213,8214,-8094,-8050]]},{"type":"Polygon","id":1113,"arcs":[[-8132,-8178,8215,8216,8217,-8136,-8082]]},{"type":"Polygon","id":1101,"arcs":[[-8138,8218,8219,8220,8221,-8095,-8062]]},{"type":"Polygon","id":22049,"arcs":[[-8090,8222,8223,-8142,-8065]]},{"type":"Polygon","id":13091,"arcs":[[8224,8225,8226,8227,-8146,-8092]]},{"type":"Polygon","id":13249,"arcs":[[-8197,8228,-8157,-8079]]},{"type":"Polygon","id":4003,"arcs":[[-7622,-8060,8229,8230,-8211,-7661]]},{"type":"Polygon","id":1085,"arcs":[[-8222,8231,8232,8233,-8085,-8096]]},{"type":"Polygon","id":48401,"arcs":[[8234,8235,8236,8237,-8111,-8117,-8056]]},{"type":"Polygon","id":22041,"arcs":[[-8156,8238,8239,8240,-8115]]},{"type":"Polygon","id":13235,"arcs":[[-8147,-8228,8241,8242,-8107]]},{"type":"Polygon","id":48365,"arcs":[[-7930,8243,8244,-8235,-8055]]},{"type":"Polygon","id":48213,"arcs":[[-8053,-8113,8245,8246,8247,8248,-8171,-8044]]},{"type":"Polygon","id":13209,"arcs":[[8249,8250,-8214,8251]]},{"type":"Polygon","id":13279,"arcs":[[-8049,8252,8253,8254,-8252]]},{"type":"Polygon","id":22031,"arcs":[[8255,8256,8257,8258,-8244,-7929]]},{"type":"Polygon","id":48349,"arcs":[[8259,8260,8261,-8172,-8249]]},{"type":"Polygon","id":48425,"arcs":[[-8170,8262,-8205,-8165]]},{"type":"Polygon","id":13267,"arcs":[[8263,8264,8265,8266,8267,-8253,-8048,-8163]]},{"type":"Polygon","id":1023,"arcs":[[8268,8269,8270,8271,-8148,-7976,-8176]]},{"type":"Polygon","id":13309,"arcs":[[-8251,8272,8273,-8225,-8091,-8215]]},{"type":"Polygon","id":1011,"arcs":[[-8218,8274,8275,-8219,-8137]]},{"type":"Polygon","id":13093,"arcs":[[-8243,8276,8277,8278,-8195,-8108]]},{"type":"Polygon","id":13109,"arcs":[[-8120,8279,8280,-8264,-8162]]},{"type":"Polygon","id":22021,"arcs":[[-8116,-8241,8281,8282,8283,-8223,-8089]]},{"type":"Polygon","id":1131,"arcs":[[-8086,-8234,8284,8285,8286,-8174]]},{"type":"Polygon","id":48217,"arcs":[[-8262,8287,8288,8289,-8168,-8173]]},{"type":"Polygon","id":48093,"arcs":[[8290,8291,8292,-8202,-8208]]},{"type":"Polygon","id":22107,"arcs":[[-8129,-8154,-8127,8293,8294,8295,8296,8297,-8239,-8155]]},{"type":"MultiPolygon","id":13029,"arcs":[[[8298,8299,8300,-8280,-8119,-8135]]]},{"type":"Polygon","id":22081,"arcs":[[-7936,-8145,8301,-8256,-7928]]},{"type":"MultiPolygon","id":13051,"arcs":[[[8302]],[[8303]],[[8304,-8299,-8134,-8075]]]},{"type":"Polygon","id":13307,"arcs":[[8305,8306,8307,8308,-8159]]},{"type":"Polygon","id":13259,"arcs":[[-8309,8309,8310,8311,-8216,-8177,-8160]]},{"type":"Polygon","id":13261,"arcs":[[-8279,8312,8313,8314,-8306,-8158,-8229,-8196]]},{"type":"Polygon","id":28023,"arcs":[[-8272,8315,8316,-8149]]},{"type":"Polygon","id":28021,"arcs":[[-8153,8317,8318,-8294,-8126]]},{"type":"Polygon","id":28061,"arcs":[[-8317,8319,8320,8321,-8151]]},{"type":"Polygon","id":28129,"arcs":[[-8322,8322,8323,8324,-8139,-8123]]},{"type":"Polygon","id":48035,"arcs":[[-8169,-8290,8325,8326,8327,-8206,-8263]]},{"type":"Polygon","id":13271,"arcs":[[8328,8329,8330,8331,-8226,-8274]]},{"type":"Polygon","id":22127,"arcs":[[-8224,-8284,8332,8333,8334,-8143]]},{"type":"Polygon","id":22069,"arcs":[[-8335,8335,8336,8337,8338,-8257,-8302,-8144]]},{"type":"Polygon","id":1005,"arcs":[[-8312,8339,8340,8341,8342,8343,-8275,-8217]]},{"type":"Polygon","id":48073,"arcs":[[-8238,8344,8345,8346,8347,-8246,-8112]]},{"type":"Polygon","id":13315,"arcs":[[-8227,-8332,8348,8349,8350,-8277,-8242]]},{"type":"MultiPolygon","id":13179,"arcs":[[[8351]],[[8352,8353,8354,-8265,-8281,-8301,8355]]]},{"type":"Polygon","id":48431,"arcs":[[-8185,8356,8357,8358,8359,-8180]]},{"type":"Polygon","id":48173,"arcs":[[-8360,8360,8361,-8189,-8181]]},{"type":"Polygon","id":48329,"arcs":[[-8362,8362,8363,-8192,-8190]]},{"type":"Polygon","id":48135,"arcs":[[-8364,8364,8365,8366,8367,-8193]]},{"type":"Polygon","id":48495,"arcs":[[-8368,8368,8369,-7683,-8194]]},{"type":"Polygon","id":48081,"arcs":[[-8188,8370,8371,-8357,-8184]]},{"type":"Polygon","id":48001,"arcs":[[8372,8373,8374,-8247,-8348]]},{"type":"Polygon","id":48083,"arcs":[[-8210,8375,8376,8377,8378,-8199]]},{"type":"Polygon","id":48399,"arcs":[[-8379,8379,8380,-8371,-8187,-8200]]},{"type":"Polygon","id":48049,"arcs":[[-8293,8381,8382,8383,-8376,-8209,-8203]]},{"type":"Polygon","id":1109,"arcs":[[-8344,8384,8385,8386,-8220,-8276]]},{"type":"Polygon","id":1041,"arcs":[[-8387,8387,8388,8389,-8232,-8221]]},{"type":"Polygon","id":28029,"arcs":[[8390,8391,8392,8393,-8318,-8152]]},{"type":"Polygon","id":28127,"arcs":[[-8325,8394,8395,8396,-8391,-8140]]},{"type":"Polygon","id":13081,"arcs":[[-8351,8397,8398,8399,-8313,-8278]]},{"type":"Polygon","id":48193,"arcs":[[8400,-8291,-8207,-8328,8401,8402]]},{"type":"Polygon","id":13183,"arcs":[[8403,8404,-8266,-8355]]},{"type":"Polygon","id":48161,"arcs":[[8405,8406,-8260,-8248,-8375]]},{"type":"Polygon","id":48109,"arcs":[[8407,8408,8409,-7809,-7992]]},{"type":"Polygon","id":48229,"arcs":[[8410,8411,8412,-7810,-8410]]},{"type":"Polygon","id":48141,"arcs":[[8413,-7914,-7811,-8413]]},{"type":"Polygon","id":48301,"arcs":[[8414,8415,-7990,-7684,-8370]]},{"type":"Polygon","id":48389,"arcs":[[8416,8417,8418,-8408,-7991,-8416]]},{"type":"Polygon","id":13239,"arcs":[[8419,8420,-8340,-8311]]},{"type":"Polygon","id":1025,"arcs":[[-8287,8421,8422,8423,-8269,-8175]]},{"type":"Polygon","id":48419,"arcs":[[8424,8425,8426,8427,-8236,-8245,-8259]]},{"type":"Polygon","id":22025,"arcs":[[-8298,8428,8429,8430,-8282,-8240]]},{"type":"Polygon","id":13161,"arcs":[[8431,8432,8433,-8329,-8273,-8250,-8255]]},{"type":"Polygon","id":13273,"arcs":[[8434,8435,8436,8437,-8307,-8315]]},{"type":"Polygon","id":13001,"arcs":[[-8268,8438,8439,8440,-8432,-8254]]},{"type":"Polygon","id":1013,"arcs":[[-8390,8441,8442,8443,-8285,-8233]]},{"type":"Polygon","id":13243,"arcs":[[-8308,-8438,8444,8445,-8420,-8310]]},{"type":"Polygon","id":22059,"arcs":[[-8431,8446,8447,8448,-8333,-8283]]},{"type":"Polygon","id":13177,"arcs":[[-8400,8449,8450,-8435,-8314]]},{"type":"Polygon","id":28153,"arcs":[[8451,8452,8453,-8320,-8316,-8271,8454]]},{"type":"Polygon","id":28063,"arcs":[[-8394,8455,8456,8457,-8295,-8319]]},{"type":"Polygon","id":48309,"arcs":[[8458,-8326,-8289,8459,8460,8461]]},{"type":"Polygon","id":13287,"arcs":[[8462,8463,8464,8465,-8398,-8350]]},{"type":"Polygon","id":13017,"arcs":[[-8331,8466,8467,-8463,-8349]]},{"type":"Polygon","id":13321,"arcs":[[-8399,-8466,8468,8469,8470,8471,-8450]]},{"type":"Polygon","id":48347,"arcs":[[-8428,8472,8473,-8345,-8237]]},{"type":"Polygon","id":22085,"arcs":[[-8339,8474,8475,8476,-8425,-8258]]},{"type":"Polygon","id":13305,"arcs":[[-8267,-8405,8477,8478,8479,8480,-8439]]},{"type":"Polygon","id":1099,"arcs":[[-8444,8481,8482,8483,-8422,-8286]]},{"type":"Polygon","id":28067,"arcs":[[8484,8485,8486,-8323,-8321,-8454]]},{"type":"Polygon","id":48293,"arcs":[[8487,-8460,-8288,-8261,-8407,8488,8489]]},{"type":"Polygon","id":13069,"arcs":[[8490,8491,8492,8493,8494,-8467,-8330,-8434]]},{"type":"Polygon","id":22043,"arcs":[[-8449,8495,-8336,-8334]]},{"type":"Polygon","id":28031,"arcs":[[-8487,8496,8497,8498,-8395,-8324]]},{"type":"Polygon","id":13061,"arcs":[[-8446,8499,8500,8501,-8341,-8421]]},{"type":"Polygon","id":1067,"arcs":[[-8502,8502,8503,8504,-8342]]},{"type":"Polygon","id":28065,"arcs":[[8505,8506,8507,-8396,-8499]]},{"type":"Polygon","id":13155,"arcs":[[-8495,8508,8509,-8464,-8468]]},{"type":"Polygon","id":22029,"arcs":[[-8297,8510,8511,8512,8513,8514,8515,-8429]]},{"type":"Polygon","id":28077,"arcs":[[8516,8517,8518,-8392,-8397,-8508]]},{"type":"Polygon","id":1035,"arcs":[[8519,8520,-8482,-8443]]},{"type":"Polygon","id":28001,"arcs":[[8521,8522,-8511,-8296,-8458]]},{"type":"Polygon","id":4023,"arcs":[[-8231,8523,-8212]]},{"type":"Polygon","id":48333,"arcs":[[8524,8525,-8382,-8292,-8401]]},{"type":"Polygon","id":28085,"arcs":[[8526,8527,8528,8529,-8456,-8393,-8519]]},{"type":"Polygon","id":13005,"arcs":[[8530,8531,-8491,-8433,-8441]]},{"type":"Polygon","id":48099,"arcs":[[8532,-8402,-8327,-8459,8533]]},{"type":"Polygon","id":48451,"arcs":[[-8381,8534,8535,8536,8537,-8358,-8372]]},{"type":"Polygon","id":1129,"arcs":[[-8424,8538,8539,8540,-8455,-8270]]},{"type":"MultiPolygon","id":13191,"arcs":[[[8541,8542]],[[8543,8544]],[[8545]],[[8546,8547,-8478,-8404,-8354]]]},{"type":"Polygon","id":48289,"arcs":[[8548,8549,8550,-8489,-8406,-8374]]},{"type":"Polygon","id":48461,"arcs":[[8551,8552,8553,-8365,-8363]]},{"type":"Polygon","id":48103,"arcs":[[-8554,8554,8555,8556,-8366]]},{"type":"Polygon","id":48405,"arcs":[[8557,8558,8559,-8473,-8427]]},{"type":"Polygon","id":48383,"arcs":[[-8359,-8538,8560,8561,-8552,-8361]]},{"type":"Polygon","id":48475,"arcs":[[-8415,-8369,-8367,-8557,8562,-8417]]},{"type":"Polygon","id":13095,"arcs":[[-8472,8563,8564,8565,-8436,-8451]]},{"type":"Polygon","id":13037,"arcs":[[-8437,-8566,8566,8567,-8500,-8445]]},{"type":"Polygon","id":1045,"arcs":[[-8505,8568,8569,8570,-8385,-8343]]},{"type":"Polygon","id":1031,"arcs":[[8571,8572,-8388,-8386,-8571]]},{"type":"Polygon","id":28037,"arcs":[[-8530,8573,8574,-8522,-8457]]},{"type":"Polygon","id":48403,"arcs":[[-8477,8575,8576,-8558,-8426]]},{"type":"Polygon","id":13277,"arcs":[[-8510,8577,8578,8579,-8469,-8465]]},{"type":"Polygon","id":48225,"arcs":[[8580,8581,8582,8583,-8549,-8373,-8347]]},{"type":"Polygon","id":48095,"arcs":[[-8378,8584,8585,-8535,-8380]]},{"type":"Polygon","id":13229,"arcs":[[-8481,8586,8587,-8531,-8440]]},{"type":"Polygon","id":1039,"arcs":[[-8573,8588,8589,8590,8591,-8520,-8442,-8389]]},{"type":"Polygon","id":48235,"arcs":[[8592,8593,-8561,-8537]]},{"type":"Polygon","id":48005,"arcs":[[-8560,8594,8595,8596,8597,-8581,-8346,-8474]]},{"type":"Polygon","id":13099,"arcs":[[-8568,8598,8599,8600,8601,-8503,-8501]]},{"type":"Polygon","id":48145,"arcs":[[8602,8603,-8461,-8488,8604]]},{"type":"Polygon","id":22079,"arcs":[[-8448,8605,8606,8607,8608,-8337,-8496]]},{"type":"Polygon","id":48307,"arcs":[[-8384,8609,8610,8611,-8585,-8377]]},{"type":"Polygon","id":48411,"arcs":[[-8526,8612,8613,8614,8615,-8610,-8383]]},{"type":"Polygon","id":13019,"arcs":[[-8494,8616,8617,8618,8619,-8578,-8509]]},{"type":"Polygon","id":13299,"arcs":[[-8588,8620,8621,8622,8623,8624,-8492,-8532]]},{"type":"Polygon","id":48281,"arcs":[[8625,8626,-8613,-8525,-8403,-8533]]},{"type":"MultiPolygon","id":13127,"arcs":[[[-8542,8627]],[[8628,-8544,8629,8630,8631,-8479,-8548]]]},{"type":"Polygon","id":13007,"arcs":[[-8565,8632,8633,8634,-8599,-8567]]},{"type":"Polygon","id":13205,"arcs":[[-8471,8635,8636,8637,8638,-8633,-8564]]},{"type":"Polygon","id":28041,"arcs":[[-8541,8639,8640,8641,-8452]]},{"type":"Polygon","id":28035,"arcs":[[8642,8643,8644,8645,-8497,-8486]]},{"type":"Polygon","id":28073,"arcs":[[-8498,-8646,8646,8647,-8506]]},{"type":"Polygon","id":28111,"arcs":[[-8453,-8642,8648,8649,-8643,-8485]]},{"type":"Polygon","id":28091,"arcs":[[-8648,8650,8651,8652,-8517,-8507]]},{"type":"Polygon","id":13003,"arcs":[[-8625,8653,8654,-8617,-8493]]},{"type":"Polygon","id":48455,"arcs":[[8655,8656,8657,-8582,-8598]]},{"type":"Polygon","id":48371,"arcs":[[-8556,8658,8659,8660,8661,-8418,-8563]]},{"type":"Polygon","id":13025,"arcs":[[-8632,8662,8663,-8621,-8587,-8480]]},{"type":"Polygon","id":28157,"arcs":[[-8575,8664,8665,8666,-8512,-8523]]},{"type":"Polygon","id":22115,"arcs":[[-8609,8667,8668,8669,-8475,-8338]]},{"type":"Polygon","id":48395,"arcs":[[8670,8671,8672,-8605,-8490,-8551]]},{"type":"Polygon","id":13075,"arcs":[[8673,8674,8675,-8579,-8620]]},{"type":"Polygon","id":28005,"arcs":[[-8529,8676,8677,8678,8679,-8665,-8574]]},{"type":"Polygon","id":28113,"arcs":[[8680,8681,8682,-8677,-8528]]},{"type":"Polygon","id":28147,"arcs":[[-8653,8683,-8681,-8527,-8518]]},{"type":"Polygon","id":22009,"arcs":[[-8430,-8516,8684,8685,8686,8687,-8606,-8447]]},{"type":"Polygon","id":13071,"arcs":[[-8580,-8676,8688,8689,-8636,-8470]]},{"type":"Polygon","id":48027,"arcs":[[-8604,8690,8691,8692,-8626,-8534,-8462]]},{"type":"MultiPolygon","id":1003,"arcs":[[[8693,8694]],[[-8484,8695,8696,8697,8698,8699,8700,-8539,-8423]]]},{"type":"Polygon","id":1069,"arcs":[[-8602,8701,8702,8703,-8569,-8504]]},{"type":"Polygon","id":1053,"arcs":[[-8592,8704,8705,8706,-8696,-8483,-8521]]},{"type":"Polygon","id":13201,"arcs":[[-8635,8707,8708,-8600]]},{"type":"Polygon","id":1061,"arcs":[[8709,8710,8711,-8589,-8572,-8570,-8704]]},{"type":"Polygon","id":48351,"arcs":[[8712,8713,8714,8715,-8576,-8476,-8670]]},{"type":"Polygon","id":13065,"arcs":[[-8624,8716,8717,8718,8719,-8654]]},{"type":"Polygon","id":13173,"arcs":[[-8720,8720,8721,-8618,-8655]]},{"type":"MultiPolygon","id":1097,"arcs":[[[-8699,8722]],[[8723,8724,8725,-8640,-8540,-8701]]]},{"type":"MultiPolygon","id":13039,"arcs":[[[8726]],[[8727,8728,8729,-8663,-8631]]]},{"type":"Polygon","id":48241,"arcs":[[8730,8731,8732,-8595,-8559,-8577,-8716]]},{"type":"Polygon","id":48373,"arcs":[[8733,8734,8735,8736,-8656,-8597]]},{"type":"Polygon","id":48331,"arcs":[[8737,8738,8739,-8691,-8603,-8673]]},{"type":"Polygon","id":48243,"arcs":[[8740,-8411,-8409,-8419,-8662,8741]]},{"type":"Polygon","id":48313,"arcs":[[8742,8743,8744,-8550,-8584]]},{"type":"Polygon","id":48327,"arcs":[[-8612,8745,8746,8747,-8586]]},{"type":"Polygon","id":48413,"arcs":[[-8748,8748,8749,-8593,-8536]]},{"type":"Polygon","id":48105,"arcs":[[-8553,-8562,-8594,-8750,8750,8751,8752,-8659,-8555]]},{"type":"Polygon","id":13087,"arcs":[[-8634,-8639,8753,8754,8755,-8708]]},{"type":"Polygon","id":13131,"arcs":[[8756,8757,8758,-8754,-8638]]},{"type":"MultiPolygon","id":13027,"arcs":[[[8759,8760]],[[8761,8762,8763,8764,-8689,-8675]]]},{"type":"Polygon","id":13275,"arcs":[[-8690,-8765,8765,8766,-8757,-8637]]},{"type":"Polygon","id":13253,"arcs":[[-8756,8767,8768,-8702,-8601,-8709]]},{"type":"Polygon","id":13049,"arcs":[[8769,8770,-8622,-8664,-8730]]},{"type":"Polygon","id":48457,"arcs":[[-8733,8771,-8734,-8596]]},{"type":"Polygon","id":48471,"arcs":[[8772,8773,8774,-8743,-8583,-8658]]},{"type":"MultiPolygon","id":22125,"arcs":[[[8775,8776,-8513,-8667,8777]],[[8778,-8685,-8515]]]},{"type":"Polygon","id":48053,"arcs":[[-8693,8779,8780,8781,8782,-8614,-8627]]},{"type":"Polygon","id":13185,"arcs":[[-8619,-8722,8783,8784,-8761,8785,-8762,-8674]]},{"type":"Polygon","id":22077,"arcs":[[-8514,-8777,8786,8787,8788,8789,-8686,-8779]]},{"type":"Polygon","id":28109,"arcs":[[-8645,8790,8791,8792,8793,-8651,-8647]]},{"type":"Polygon","id":22117,"arcs":[[-8794,8794,8795,-8682,-8684,-8652]]},{"type":"Polygon","id":22039,"arcs":[[-8688,8796,8797,8798,8799,-8607]]},{"type":"Polygon","id":12063,"arcs":[[-8769,8800,8801,8802,8803,8804,-8710,-8703]]},{"type":"Polygon","id":22105,"arcs":[[-8796,8805,8806,8807,8808,8809,-8678,-8683]]},{"type":"MultiPolygon","id":12033,"arcs":[[[-8695,8810]],[[8811,8812]],[[8813,-8697,-8707,8814]]]},{"type":"MultiPolygon","id":12113,"arcs":[[[8815,-8812,8816,8817]],[[8818,8819,-8815,-8706]]]},{"type":"Polygon","id":28039,"arcs":[[-8726,8820,8821,-8649,-8641]]},{"type":"Polygon","id":22091,"arcs":[[-8810,8822,8823,8824,-8679]]},{"type":"MultiPolygon","id":12091,"arcs":[[[-8818,8825]],[[8826,8827]],[[-8591,8828,8829,-8819,-8705]]]},{"type":"Polygon","id":22037,"arcs":[[-8825,8830,8831,-8778,-8666,-8680]]},{"type":"Polygon","id":12059,"arcs":[[-8805,8832,8833,-8711]]},{"type":"Polygon","id":12131,"arcs":[[-8712,-8834,8834,8835,8836,-8827,8837,-8829,-8590]]},{"type":"Polygon","id":48041,"arcs":[[8838,8839,8840,-8671,-8745]]},{"type":"Polygon","id":48319,"arcs":[[-8616,8841,8842,8843,-8746,-8611]]},{"type":"Polygon","id":48299,"arcs":[[-8783,8844,8845,-8842,-8615]]},{"type":"Polygon","id":28131,"arcs":[[-8822,8846,8847,-8791,-8644,-8650]]},{"type":"Polygon","id":48491,"arcs":[[8848,8849,8850,-8780,-8692,-8740]]},{"type":"Polygon","id":48407,"arcs":[[-8737,8851,8852,-8773,-8657]]},{"type":"Polygon","id":22003,"arcs":[[-8800,8853,8854,-8668,-8608]]},{"type":"Polygon","id":22011,"arcs":[[-8855,8855,8856,-8713,-8669]]},{"type":"Polygon","id":13101,"arcs":[[8857,8858,-8784,-8721,-8719]]},{"type":"Polygon","id":48185,"arcs":[[-8775,8859,8860,8861,-8839,-8744]]},{"type":"Polygon","id":22097,"arcs":[[-8790,8862,8863,8864,-8797,-8687]]},{"type":"Polygon","id":12133,"arcs":[[8865,-8835,-8833,-8804]]},{"type":"MultiPolygon","id":12089,"arcs":[[[-8729,8866,8867,8868,-8770]]]},{"type":"MultiPolygon","id":28059,"arcs":[[[-8725,8869,8870,-8847,-8821]]]},{"type":"Polygon","id":48051,"arcs":[[-8841,8871,8872,-8738,-8672]]},{"type":"Polygon","id":22033,"arcs":[[8873,8874,8875,8876,-8831,-8824]]},{"type":"Polygon","id":22103,"arcs":[[-8793,8877,8878,8879,8880,-8806,-8795]]},{"type":"Polygon","id":12039,"arcs":[[-8759,8881,8882,-8801,-8768,-8755]]},{"type":"Polygon","id":48267,"arcs":[[8883,8884,8885,8886,-8747,-8844]]},{"type":"Polygon","id":48435,"arcs":[[-8887,8887,8888,-8751,-8749]]},{"type":"Polygon","id":12073,"arcs":[[-8767,8889,8890,8891,-8882,-8758]]},{"type":"MultiPolygon","id":28047,"arcs":[[[-8871,8892,8893,-8848]]]},{"type":"Polygon","id":12065,"arcs":[[-8764,8894,8895,8896,8897,-8890,-8766]]},{"type":"Polygon","id":48043,"arcs":[[8898,-8742,-8661,8899,8900]]},{"type":"Polygon","id":22121,"arcs":[[8901,-8787,-8776,-8832,-8877]]},{"type":"Polygon","id":48443,"arcs":[[8902,8903,-8900,-8660,-8753]]},{"type":"Polygon","id":22063,"arcs":[[-8809,8904,8905,-8874,-8823]]},{"type":"Polygon","id":12079,"arcs":[[-8786,-8760,8906,8907,8908,8909,-8895,-8763]]},{"type":"Polygon","id":28045,"arcs":[[-8894,8910,-8878,-8792]]},{"type":"Polygon","id":12047,"arcs":[[-8859,8911,8912,-8907,-8785]]},{"type":"Polygon","id":48377,"arcs":[[-8899,8913,-8741]]},{"type":"Polygon","id":48339,"arcs":[[-8853,8914,8915,8916,-8860,-8774]]},{"type":"Polygon","id":48453,"arcs":[[8917,8918,8919,8920,-8781,-8851]]},{"type":"Polygon","id":12013,"arcs":[[8921,8922,8923,-8802]]},{"type":"Polygon","id":12077,"arcs":[[-8892,8924,8925,8926,-8922,-8883]]},{"type":"Polygon","id":12023,"arcs":[[-8718,8927,8928,8929,8930,8931,-8912,-8858]]},{"type":"MultiPolygon","id":12031,"arcs":[[[8932,8933]],[[8934,8935]],[[8936,8937,8938,-8868]]]},{"type":"Polygon","id":12003,"arcs":[[-8869,-8939,8939,8940,8941,-8928,-8717,-8623,-8771]]},{"type":"MultiPolygon","id":12005,"arcs":[[[8942,8943]],[[-8924,8944,8945,-8836,-8866,-8803]]]},{"type":"Polygon","id":48287,"arcs":[[8946,8947,8948,-8849,-8739,-8873]]},{"type":"Polygon","id":48199,"arcs":[[-8732,8949,8950,8951,-8735,-8772]]},{"type":"Polygon","id":48171,"arcs":[[-8846,8952,8953,8954,-8884,-8843]]},{"type":"Polygon","id":48031,"arcs":[[-8782,-8921,8955,8956,8957,-8953,-8845]]},{"type":"MultiPolygon","id":22099,"arcs":[[[8958,8959,8960]],[[8961,8962,-8863,-8789,8963]]]},{"type":"Polygon","id":22047,"arcs":[[-8902,-8876,8964,8965,8966,-8964,-8788]]},{"type":"Polygon","id":48291,"arcs":[[-8952,8967,8968,8969,-8915,-8852,-8736]]},{"type":"Polygon","id":22019,"arcs":[[8970,8971,8972,-8714,-8857]]},{"type":"Polygon","id":22053,"arcs":[[-8799,8973,8974,8975,-8971,-8856,-8854]]},{"type":"Polygon","id":22001,"arcs":[[-8865,8976,8977,-8974,-8798]]},{"type":"Polygon","id":12121,"arcs":[[-8932,8978,8979,-8908,-8913]]},{"type":"Polygon","id":48021,"arcs":[[8980,8981,-8918,-8850,-8949]]},{"type":"Polygon","id":48477,"arcs":[[-8862,8982,8983,8984,-8947,-8872,-8840]]},{"type":"Polygon","id":22055,"arcs":[[-8963,8985,8986,-8977,-8864]]},{"type":"Polygon","id":48209,"arcs":[[8987,8988,-8956,-8920,8989]]},{"type":"Polygon","id":22005,"arcs":[[-8906,8990,8991,8992,-8965,-8875]]},{"type":"Polygon","id":12123,"arcs":[[8993,8994,8995,-8896,-8910]]},{"type":"MultiPolygon","id":12129,"arcs":[[[-8898,8996,8997,-8925,-8891]]]},{"type":"Polygon","id":22095,"arcs":[[8998,8999,9000,-8991,-8905,-8808]]},{"type":"Polygon","id":48465,"arcs":[[-8889,9001,9002,9003,-8903,-8752]]},{"type":"Polygon","id":48137,"arcs":[[9004,9005,9006,9007,-9002,-8888,-8886]]},{"type":"Polygon","id":48265,"arcs":[[9008,9009,9010,-9005,-8885,-8955]]},{"type":"Polygon","id":12067,"arcs":[[-8980,9011,9012,-8994,-8909]]},{"type":"MultiPolygon","id":12109,"arcs":[[[9013,9014]],[[9015,9016,9017,9018,9019,-8933,9020]],[[-8935,9021]]]},{"type":"Polygon","id":48361,"arcs":[[-8973,9022,9023,-8950,-8731,-8715]]},{"type":"Polygon","id":48473,"arcs":[[9024,9025,9026,-8983,-8861,-8917]]},{"type":"Polygon","id":22089,"arcs":[[9027,-8999,9028]]},{"type":"MultiPolygon","id":22051,"arcs":[[[9029,9030]],[[9031,9032,9033,9034,-9029,-8807,-8881]]]},{"type":"Polygon","id":12045,"arcs":[[-8927,9035,9036,9037,9038,-8943,9039,-8945,-8923]]},{"type":"Polygon","id":22071,"arcs":[[9040,9041,9042,-9032,-8880]]},{"type":"Polygon","id":12019,"arcs":[[9043,9044,9045,-8940,-8938]]},{"type":"Polygon","id":48245,"arcs":[[-9024,9046,9047,9048,-8968,-8951]]},{"type":"MultiPolygon","id":48201,"arcs":[[[9049,9050]],[[-8970,9051,9052,9053,9054,9055,-9025,-8916]]]},{"type":"MultiPolygon","id":22087,"arcs":[[[-9057,-9058,-9059,-9060]],[[9060,9061,9062,9063,9064,9065,9066,-9042,9067]]]},{"type":"Polygon","id":22093,"arcs":[[9068,9069,-8992,-9001]]},{"type":"Polygon","id":48149,"arcs":[[9070,9071,9072,9073,9074,-8981,-8948,-8985]]},{"type":"Polygon","id":22113,"arcs":[[-8987,9075,9076,9077,-8975,-8978]]},{"type":"Polygon","id":12007,"arcs":[[-9046,9078,9079,9080,-8941]]},{"type":"Polygon","id":12125,"arcs":[[-9081,9081,-8929,-8942]]},{"type":"Polygon","id":48259,"arcs":[[-8958,9082,9083,9084,-9009,-8954]]},{"type":"MultiPolygon","id":22045,"arcs":[[[9085]],[[-8967,9086,-8960,9087,9088,-9076,-8986,-8962]]]},{"type":"Polygon","id":48015,"arcs":[[-9027,9089,9090,9091,-9071,-8984]]},{"type":"Polygon","id":22007,"arcs":[[-9070,9092,9093,9094,-8961,-9087,-8966,-8993]]},{"type":"Polygon","id":48385,"arcs":[[-9011,9095,9096,-9006]]},{"type":"Polygon","id":48055,"arcs":[[-8982,-9075,9097,9098,-8990,-8919]]},{"type":"Polygon","id":22023,"arcs":[[-8976,-9078,9099,-9047,-9023,-8972]]},{"type":"Polygon","id":48091,"arcs":[[9100,9101,-9083,-8957,-8989]]},{"type":"MultiPolygon","id":12037,"arcs":[[[9102]],[[-9038,9103]],[[-8998,9104,-9036,-8926]]]},{"type":"Polygon","id":48089,"arcs":[[9105,9106,9107,-9072,-9092]]},{"type":"MultiPolygon","id":22101,"arcs":[[[-9095,9108,9109,-9088,-8959]]]},{"type":"Polygon","id":12001,"arcs":[[-9080,9110,9111,9112,9113,-8930,-9082]]},{"type":"Polygon","id":12041,"arcs":[[-9114,9114,9115,-9012,-8979,-8931]]},{"type":"MultiPolygon","id":22057,"arcs":[[[9116,9117]],[[9118,9119,9120,-9030,9121,9122,9123,9124,9125,9126,9127,-9093,-9069,-9000,-9028,-9035,9128]]]},{"type":"Polygon","id":48019,"arcs":[[9129,-9096,-9010,-9085,9130,9131]]},{"type":"MultiPolygon","id":22075,"arcs":[[[9132]],[[-9059,9133]],[[9134,-9058]],[[9135,-9065]],[[9136,9137,9138,9139,-9033,-9043,-9067,9140]]]},{"type":"MultiPolygon","id":48071,"arcs":[[[-9050,9141]],[[-9049,9142,9143,9144,-9052,-8969]]]},{"type":"Polygon","id":48187,"arcs":[[9145,9146,9147,-9101,-8988,-9099]]},{"type":"MultiPolygon","id":12107,"arcs":[[[-9019,9148,9149,9150]],[[9151,9152,-9111,-9079,-9045]]]},{"type":"Polygon","id":48157,"arcs":[[9153,9154,-9090,-9026,-9056]]},{"type":"Polygon","id":48177,"arcs":[[9155,9156,9157,9158,-9146,-9098,-9074]]},{"type":"MultiPolygon","id":22109,"arcs":[[[9159,-9117]],[[9160,-9124]],[[9161,-9126]],[[9162]],[[9163,9164,9165,9166,9167,-9109,-9094,-9128,9168]]]},{"type":"Polygon","id":48029,"arcs":[[-9148,9169,9170,9171,-9131,-9084,-9102]]},{"type":"Polygon","id":48325,"arcs":[[9172,9173,9174,-9132,-9172]]},{"type":"MultiPolygon","id":12035,"arcs":[[[9175,9176,-9149,-9018]],[[-9016,9177]],[[9178,9179,9180,-9015]]]},{"type":"Polygon","id":48481,"arcs":[[-9155,9181,9182,9183,-9106,-9091]]},{"type":"Polygon","id":48285,"arcs":[[9184,9185,9186,-9156,-9073,-9108]]},{"type":"Polygon","id":48463,"arcs":[[-9175,9187,9188,-9007,-9097,-9130]]},{"type":"Polygon","id":48271,"arcs":[[-9189,9189,9190,-9003,-9008]]},{"type":"MultiPolygon","id":48167,"arcs":[[[9191]],[[9192,9193,-9054,9194]],[[9195,-9144]]]},{"type":"MultiPolygon","id":48039,"arcs":[[[-9194,9196,9197,-9182,-9154,-9055]]]},{"type":"MultiPolygon","id":12075,"arcs":[[[-9113,9198,9199,9200,9201,9202,-9115]]]},{"type":"Polygon","id":12083,"arcs":[[9203,9204,9205,9206,-9199,-9112,-9153]]},{"type":"Polygon","id":48493,"arcs":[[-9159,9207,9208,-9170,-9147]]},{"type":"MultiPolygon","id":12127,"arcs":[[[9209,9210]],[[9211,9212,9213,9214,9215,9216,-9150,-9177,9217]],[[9218,-9180]]]},{"type":"Polygon","id":48123,"arcs":[[9219,9220,-9157,-9187,9221]]},{"type":"Polygon","id":12069,"arcs":[[-9216,9222,9223,9224,9225,-9205,9226]]},{"type":"Polygon","id":48239,"arcs":[[9227,9228,9229,9230,9231,9232,9233,9234,-9185,-9107,-9184]]},{"type":"Polygon","id":48013,"arcs":[[9235,9236,-9173,-9171,-9209,9237,9238]]},{"type":"MultiPolygon","id":48321,"arcs":[[[9239,9240,-9228,-9183,-9198,9241]]]},{"type":"Polygon","id":48255,"arcs":[[9242,9243,-9238,-9208,-9158,-9221,9244]]},{"type":"MultiPolygon","id":48469,"arcs":[[[-9233,9245]],[[-9235,9246,9247,9248,9249,-9222,-9186]]]},{"type":"Polygon","id":48163,"arcs":[[-9237,9250,9251,9252,-9174]]},{"type":"Polygon","id":48507,"arcs":[[-9253,9253,9254,-9188]]},{"type":"Polygon","id":48323,"arcs":[[-9255,9255,9256,9257,-9190]]},{"type":"MultiPolygon","id":12017,"arcs":[[[9258,-9201]],[[-9200,-9207,9259,9260,9261]]]},{"type":"Polygon","id":12119,"arcs":[[-9226,9262,9263,9264,-9260,-9206]]},{"type":"Polygon","id":48175,"arcs":[[-9250,9265,9266,-9245,-9220]]},{"type":"Polygon","id":12117,"arcs":[[9267,-9223,-9215]]},{"type":"MultiPolygon","id":12009,"arcs":[[[9268,9269,9270,9271,-9214]],[[9272,-9210,9273,-9212]]]},{"type":"Polygon","id":48297,"arcs":[[9274,9275,9276,-9239,-9244,9277,9278]]},{"type":"Polygon","id":12095,"arcs":[[-9268,-9272,9279,-9224]]},{"type":"MultiPolygon","id":48057,"arcs":[[[9280,9281,9282]],[[9283,9284,9285]],[[-9241,9286,-9229]],[[9287,-9248,9288]],[[9289,-9231,9290]]]},{"type":"Polygon","id":48025,"arcs":[[-9267,9291,9292,-9278,-9243]]},{"type":"Polygon","id":12053,"arcs":[[-9265,9293,9294,-9261]]},{"type":"Polygon","id":48283,"arcs":[[9295,9296,9297,-9251]]},{"type":"Polygon","id":48311,"arcs":[[-9277,9298,-9296,-9236]]},{"type":"Polygon","id":48127,"arcs":[[-9252,-9298,9299,-9256,-9254]]},{"type":"Polygon","id":48391,"arcs":[[-9288,9300,9301,9302,9303,9304,-9292,-9266,-9249]]},{"type":"MultiPolygon","id":12101,"arcs":[[[9305,9306]],[[-9264,9307,9308,9309,9310,-9294]]]},{"type":"Polygon","id":12105,"arcs":[[9311,9312,9313,9314,-9308,-9263,-9225]]},{"type":"Polygon","id":12097,"arcs":[[-9271,9315,9316,-9312,-9280]]},{"type":"MultiPolygon","id":48007,"arcs":[[[9317,9318]],[[9319]],[[9320,9321,-9304]],[[9322,9323]],[[-9285,9324]],[[9325,-9302,9326,-9282,9327]]]},{"type":"Polygon","id":48479,"arcs":[[9328,9329,9330,9331,-9257,-9300,-9297]]},{"type":"Polygon","id":48409,"arcs":[[-9322,9332,-9323,9333,9334,9335,9336,9337,-9279,-9293,-9305]]},{"type":"MultiPolygon","id":12103,"arcs":[[[-9306,9338]],[[9339,9340,-9310]]]},{"type":"MultiPolygon","id":12057,"arcs":[[[-9315,9341,9342,-9340,-9309]]]},{"type":"Polygon","id":48131,"arcs":[[9343,9344,9345,-9329,-9299,-9276]]},{"type":"Polygon","id":48249,"arcs":[[-9338,9346,9347,9348,-9344,-9275]]},{"type":"MultiPolygon","id":48355,"arcs":[[[9349,9350]],[[9351]],[[-9318,9352]],[[-9335,9353]],[[9354,9355,-9347,-9337,9356]]]},{"type":"MultiPolygon","id":12061,"arcs":[[[9357,9358,-9316,-9270,9359]],[[9360,9361]]]},{"type":"Polygon","id":12055,"arcs":[[9362,9363,9364,9365,-9313]]},{"type":"Polygon","id":12049,"arcs":[[-9366,9366,9367,-9314]]},{"type":"MultiPolygon","id":12081,"arcs":[[[9368,9369]],[[-9368,9370,9371,9372,-9342]]]},{"type":"Polygon","id":12093,"arcs":[[-9359,9373,9374,9375,-9363,-9317]]},{"type":"MultiPolygon","id":48273,"arcs":[[[9376,9377,-9350,9378]],[[9379,9380,9381,-9348,-9356]]]},{"type":"MultiPolygon","id":12111,"arcs":[[[9382,9383]],[[9384,-9361]],[[9385,9386,9387,9388,-9374,-9358]]]},{"type":"MultiPolygon","id":12115,"arcs":[[[9389,9390]],[[-9372,9391,9392,9393,9394,9395]],[[-9369,9396]]]},{"type":"Polygon","id":48247,"arcs":[[9397,9398,9399,-9330,-9346]]},{"type":"Polygon","id":12027,"arcs":[[-9365,9400,-9392,-9371,-9367]]},{"type":"Polygon","id":48505,"arcs":[[-9400,9401,9402,-9331]]},{"type":"MultiPolygon","id":48261,"arcs":[[[9403,9404]],[[9405,9406,9407,9408]],[[9409,9410,9411,9412]],[[9413,9414,-9377,9415]],[[9416,9417,9418,9419,9420,-9381,9421]]]},{"type":"Polygon","id":48047,"arcs":[[-9349,-9382,-9421,9422,9423,-9398,-9345]]},{"type":"MultiPolygon","id":12085,"arcs":[[[9424,9425]],[[9426,9427,9428,9429,9430,-9375,-9389,9431]],[[9432,-9383]],[[9433,-9387]]]},{"type":"Polygon","id":12043,"arcs":[[9434,9435,-9364,-9376]]},{"type":"MultiPolygon","id":12015,"arcs":[[[9436,9437]],[[-9390,9438]],[[-9395,9439]],[[-9436,9440,9441,-9393,-9401]]]},{"type":"MultiPolygon","id":12099,"arcs":[[[-9425,9442]],[[9443,-9427]],[[9444,-9429]],[[9445,9446,9447,-9431]]]},{"type":"Polygon","id":12051,"arcs":[[9448,9449,9450,-9435,-9448]]},{"type":"MultiPolygon","id":12071,"arcs":[[[9451]],[[-9451,9452,9453,-9441]],[[-9438,9454]]]},{"type":"Polygon","id":48427,"arcs":[[-9424,9455,9456,-9402,-9399]]},{"type":"Polygon","id":48215,"arcs":[[-9420,9457,9458,9459,-9456,-9423]]},{"type":"MultiPolygon","id":48489,"arcs":[[[9460,9461]],[[-9404,9462]],[[9463,9464,9465,-9407,9466]],[[9467,9468,9469,9470,-9458,-9419,9471]]]},{"type":"MultiPolygon","id":12021,"arcs":[[[9472,9473]],[[9474,9475,9476,9477,-9453,-9450]]]},{"type":"MultiPolygon","id":48061,"arcs":[[[9478,-9459,-9471,9479]],[[-9461,9480]]]},{"type":"Polygon","id":12011,"arcs":[[9481,9482,-9475,-9449,-9447]]},{"type":"MultiPolygon","id":12086,"arcs":[[[9483,9484,9485,9486,9487,9488,-9476,-9483,9489]]]},{"type":"MultiPolygon","id":12087,"arcs":[[[-9487,9490]],[[-9485,9491]],[[9492]],[[9493,-9474]],[[-9489,9494,-9477]]]},{"type":"Polygon","id":4015,"arcs":[[-5753,-6696,-7333,-6549,-5937,-4613,-5352,-5426]]},{"type":"Polygon","id":12029,"arcs":[[-9116,-9203,9495,-8995,-9013]]},{"type":"Polygon","id":27077,"arcs":[[-123,-170,-106,9496]]},{"type":"Polygon","id":27031,"arcs":[[-192,9497]]},{"type":"Polygon","id":55031,"arcs":[[9498,-654,-647,-573,-462,-137,9499]]},{"type":"Polygon","id":55007,"arcs":[[9500,-652,-9499,9501]]},{"id":55003,"type":"MultiPolygon","arcs":[[[-542,-699,-648,-9501,9502]],[[9503]]]},{"id":26083,"type":"MultiPolygon","arcs":[[[9504,9505,9506]],[[9507]]]},{"id":26061,"type":"MultiPolygon","arcs":[[[-434,-572,-424,9508]],[[9509,-9506]]]},{"type":"Polygon","id":26103,"arcs":[[9510,9511,-694,-621,-567,-432,9512]]},{"type":"Polygon","id":26003,"arcs":[[-558,9513,-9511,9514,-473]]},{"type":"Polygon","id":26041,"arcs":[[-9514,-557,9515,-691,-9512]]},{"type":"Polygon","id":55075,"arcs":[[-693,9516,-855,-666,-683,-619]]},{"type":"Polygon","id":55029,"arcs":[[-1144,9517]]},{"id":26033,"type":"MultiPolygon","arcs":[[[9518,9519]],[[9520]],[[9521,9522,9523,-470,9524]]]},{"id":26097,"type":"MultiPolygon","arcs":[[[9525]],[[9526,-9522]],[[9527,-555,-471,-9524]]]},{"type":"Polygon","id":26047,"arcs":[[-749,9528,9529]]},{"id":26029,"type":"MultiPolygon","arcs":[[[-9529,-748,-928,-925,9530]],[[9531]]]},{"id":26089,"type":"MultiPolygon","arcs":[[[9532]],[[9533,-1088,9534]]]},{"type":"Polygon","id":26055,"arcs":[[-923,-1056,-1204,-1085,-9534,9535]]},{"type":"Polygon","id":26007,"arcs":[[9536,-1053,-929,-797]]},{"type":"Polygon","id":26011,"arcs":[[9537,-1413,-1374,-1214,-1212]]},{"type":"Polygon","id":26063,"arcs":[[-1552,-1530,9538]]},{"type":"Polygon","id":26147,"arcs":[[-1903,-1700,-1550,9539]]},{"type":"Polygon","id":26163,"arcs":[[9540,9541,-2106,-1904,-1901]]},{"id":26115,"type":"MultiPolygon","arcs":[[[-2482,9542]],[[9543,-2480]],[[9544,-2478,-2253,-2103,-9542]]]},{"type":"MultiPolygon","id":45019,"arcs":[[[9545,-7886,9546,-7888,-7834,-7720]],[[9547,-7615]],[[9548,-7718,-7618,9549]]]},{"type":"Polygon","id":15005,"arcs":[[9550,9551]]},{"type":"Polygon","id":15001,"arcs":[[9552]]},{"id":15007,"type":"MultiPolygon","arcs":[[[9553]],[[9554]]]},{"id":15009,"type":"MultiPolygon","arcs":[[[-9551,9555]],[[9556]],[[9557]],[[9558]]]},{"type":"Polygon","id":15003,"arcs":[[9559]]},{"type":"MultiPolygon","id":2016,"arcs":[[[9560]],[[9561]],[[9562]],[[9563]],[[9564]],[[9565]],[[9566]],[[9567]],[[9568]],[[9569]],[[9570]],[[9571]],[[9572]],[[9573]],[[9574]],[[9575]],[[9576]],[[9577]],[[9578]],[[9579]],[[9580]],[[9581]],[[9582]],[[9583]]]},{"type":"MultiPolygon","id":2013,"arcs":[[[9584]],[[9585]],[[9586]],[[9587]],[[9588]],[[9589]],[[9590]],[[9591]],[[9592]],[[9593]],[[9594]],[[9595]],[[9596,9597,9598,9599]]]},{"type":"MultiPolygon","id":2130,"arcs":[[[9600]],[[9601]]]},{"type":"Polygon","id":2060,"arcs":[[9602,9603]]},{"type":"MultiPolygon","id":2070,"arcs":[[[9604]],[[9605,9606]],[[9607,9608,9609,9610,9611,9612]]]},{"type":"MultiPolygon","id":2164,"arcs":[[[9613]],[[-9597,9614]],[[9615,9616,9617,-9599,9618,-9604,9619,-9612,9620]]]},{"type":"MultiPolygon","id":2150,"arcs":[[[9621]],[[9622]],[[9623]],[[9624]],[[9625]],[[9626]],[[9627]],[[9628]],[[9629]],[[9630]],[[9631,-9617,9632,9633]]]},{"type":"MultiPolygon","id":2110,"arcs":[[[9634,9635]],[[9636,9637]],[[9638,9639,9640,9641]],[[9642]],[[9643,9644,9645,9646,9647,9648]],[[9649,9650]]]},{"type":"MultiPolygon","id":2280,"arcs":[[[9651]],[[9652,9653]],[[9654]],[[9655]],[[9656]],[[9657]],[[9658]],[[9659]],[[9660,9661,9662,9663]]]},{"type":"MultiPolygon","id":2232,"arcs":[[[-9647,9664]],[[9665,9666,9667,9668]],[[9669]],[[-9664,9670,-9635,9671,-9645,9672]],[[-9639,9673,-9637,9674]],[[9675,9676,9677,9678,9679]],[[9680,9681]],[[-9641,9682]],[[9683,9684,9685,9686,9687]],[[9688,9689,9690,9691]]]},{"type":"MultiPolygon","id":2100,"arcs":[[[-9681,9692]],[[-9649,9693,-9650,9694,-9689,9695]],[[9696,-9687,9697,-9691]]]},{"type":"MultiPolygon","id":2220,"arcs":[[[9698]],[[9699,-9653,9700]],[[-9668,9701]],[[9702,-9666,9703,-9679,9704]]]},{"type":"MultiPolygon","id":2270,"arcs":[[[9705]],[[9706]],[[9707]],[[9708,9709,9710,9711]]]},{"type":"MultiPolygon","id":2050,"arcs":[[[9712]],[[9713]],[[9714]],[[9715]],[[9716,-9711,9717,9718,9719,-9621,-9611,9720,-9607,9721]]]},{"type":"Polygon","id":2170,"arcs":[[9722,9723,9724,9725,-9719,9726,9727,9728]]},{"type":"Polygon","id":2068,"arcs":[[9729,9730,-9728,9731]]},{"type":"MultiPolygon","id":2020,"arcs":[[[-9724,9732,9733,9734]]]},{"type":"MultiPolygon","id":2261,"arcs":[[[9735]],[[9736]],[[9737]],[[9738]],[[9739]],[[9740]],[[9741]],[[9742]],[[9743,9744]],[[9745]],[[9746]],[[9747,9748]],[[9749]],[[9750,9751]],[[9752]],[[9753,9754,-9733,-9723,9755,9756,9757,9758]]]},{"type":"MultiPolygon","id":2122,"arcs":[[[9759,-9634]],[[9760]],[[9761]],[[9762]],[[9763,-9748]],[[-9734,-9755,9764,-9751,9765,-9744,9766]],[[-9633,-9616,-9720,-9726,9767]]]},{"type":"MultiPolygon","id":2282,"arcs":[[[9768,9769,-9758,9770,-9685,9771]]]},{"type":"Polygon","id":2290,"arcs":[[9772,9773,9774,-9732,-9727,-9718,-9710,9775,9776,9777]]},{"type":"Polygon","id":2090,"arcs":[[9778,-9730,-9775]]},{"type":"Polygon","id":2240,"arcs":[[-9756,-9729,-9731,-9779,-9774,9779]]},{"type":"MultiPolygon","id":2185,"arcs":[[[9780]],[[9781,-9778,9782,9783]]]},{"type":"MultiPolygon","id":2188,"arcs":[[[-9777,9784,9785,-9783]]]},{"type":"MultiPolygon","id":2180,"arcs":[[[9786]],[[9787]],[[9788]],[[9789,-9785,-9776,-9709,9790]]]},{"id":2201,"type":"MultiPolygon","arcs":[[[9791]],[[9792]],[[9793]],[[9794]],[[9795]],[[9796]],[[9797]],[[9798]],[[9799]],[[9800]],[[9801]],[[9802]],[[9803]],[[9804]],[[9805]],[[-9662,9806]]]},{"type":"Polygon","id":72125,"arcs":[[9807,9808,9809,9810,9811,9812]]},{"type":"Polygon","id":72003,"arcs":[[9813,9814,9815,9816,9817]]},{"type":"Polygon","id":72097,"arcs":[[9818,9819,-9813,9820,9821,9822,9823]]},{"type":"Polygon","id":72065,"arcs":[[9824,9825,9826,9827,9828]]},{"type":"Polygon","id":72055,"arcs":[[9829,9830,9831,9832]]},{"type":"Polygon","id":72083,"arcs":[[9833,9834,-9819,9835,9836]]},{"type":"Polygon","id":72025,"arcs":[[9837,9838,9839,9840,9841,9842,9843]]},{"type":"Polygon","id":72045,"arcs":[[9844,9845,9846,9847,9848]]},{"type":"Polygon","id":72133,"arcs":[[9849,9850,9851,9852]]},{"type":"Polygon","id":72121,"arcs":[[-9833,9853,-9809,9854,9855]]},{"type":"Polygon","id":72027,"arcs":[[-9828,9856,9857,9858,9859]]},{"type":"Polygon","id":72033,"arcs":[[9860,9861,9862,9863]]},{"type":"Polygon","id":72001,"arcs":[[9864,9865,9866,9867,9868,9869]]},{"type":"Polygon","id":72111,"arcs":[[9870,9871,9872,-9866]]},{"type":"Polygon","id":72047,"arcs":[[9873,9874,9875,9876,9877,9878]]},{"type":"Polygon","id":72091,"arcs":[[9879,9880,9881,9882,9883,9884]]},{"type":"Polygon","id":72013,"arcs":[[9885,9886,9887,9888,-9825,9889]]},{"type":"Polygon","id":72145,"arcs":[[9890,9891,-9880,9892]]},{"type":"Polygon","id":72031,"arcs":[[9893,9894,9895,9896,9897,9898]]},{"type":"Polygon","id":72061,"arcs":[[9899,9900,9901,-9861,9902]]},{"type":"Polygon","id":72129,"arcs":[[9903,9904,9905,9906,9907,-9840,9908]]},{"type":"MultiPolygon","id":72075,"arcs":[[[9909,9910,-9853,9911,9912,9913,9914]]]},{"type":"Polygon","id":72063,"arcs":[[-9895,9915,-9909,-9839,9916]]},{"type":"Polygon","id":72073,"arcs":[[9917,-9914,9918,9919,9920]]},{"type":"Polygon","id":72143,"arcs":[[9921,9922,-9878,9923,-9891,9924]]},{"type":"Polygon","id":72011,"arcs":[[9925,-9836,-9824,9926,9927,-9815,9928]]},{"type":"Polygon","id":72081,"arcs":[[-9827,9929,-9869,9930,9931,-9834,9932,-9857]]},{"type":"Polygon","id":72015,"arcs":[[9933,9934,9935]]},{"type":"Polygon","id":72079,"arcs":[[-9854,-9832,9936,9937,-9810]]},{"type":"Polygon","id":72009,"arcs":[[9938,9939,9940,9941,9942]]},{"type":"Polygon","id":72099,"arcs":[[9943,9944,-9929,-9814,9945]]},{"type":"Polygon","id":72023,"arcs":[[9946,-9811,-9938,9947,-9822]]},{"type":"Polygon","id":72109,"arcs":[[9948,9949,9950,-9936,9951,9952,-9907]]},{"type":"Polygon","id":72101,"arcs":[[-9924,-9877,9953,9954,-9881,-9892]]},{"type":"Polygon","id":72117,"arcs":[[-9928,9955,-9816]]},{"type":"Polygon","id":72005,"arcs":[[-9946,-9818,9956,9957]]},{"type":"Polygon","id":72059,"arcs":[[-9873,9958,9959,-9867]]},{"type":"Polygon","id":72021,"arcs":[[-9902,9960,-9845,9961,9962,9963,-9862]]},{"type":"Polygon","id":72141,"arcs":[[9964,-9920,9965,-9870,-9930,-9826,-9889]]},{"type":"Polygon","id":72041,"arcs":[[-9842,9966,-9943,9967,-9847,9968]]},{"type":"Polygon","id":72123,"arcs":[[9969,9970,-9851,9971,-9940,9972]]},{"type":"Polygon","id":72131,"arcs":[[9973,-9858,-9933,-9837,-9926,-9945,9974]]},{"type":"Polygon","id":72035,"arcs":[[-9908,-9953,9975,-9973,-9939,-9967,-9841]]},{"type":"Polygon","id":72135,"arcs":[[-9963,9976,-9879,-9923,9977,9978]]},{"type":"Polygon","id":72115,"arcs":[[-9859,-9974,9979,9980]]},{"type":"Polygon","id":72054,"arcs":[[-9883,9981,-9887,9982]]},{"type":"Polygon","id":72105,"arcs":[[-9962,-9849,9983,-9874,-9977]]},{"type":"Polygon","id":72017,"arcs":[[-9884,-9983,-9886,9984]]},{"type":"Polygon","id":72127,"arcs":[[-9897,9985,-9844,9986,-9900,9987]]},{"type":"Polygon","id":72139,"arcs":[[-9896,-9917,-9838,-9986]]},{"type":"Polygon","id":72057,"arcs":[[-9952,-9935,9988,-9970,-9976]]},{"type":"Polygon","id":72153,"arcs":[[-9868,-9960,9989,-9830,-9856,9990,-9931]]},{"type":"Polygon","id":72043,"arcs":[[9991,9992,-9941,-9972,-9850,-9911,9993]]},{"type":"Polygon","id":72149,"arcs":[[-9994,-9910,9994]]},{"type":"Polygon","id":72039,"arcs":[[-9955,9995,-9921,-9965,-9888,-9982,-9882]]},{"type":"MultiPolygon","id":72113,"arcs":[[[-9913,9996,-9871,-9865,-9966,-9919]]]},{"type":"Polygon","id":72107,"arcs":[[9997,-9992,-9995,-9915,-9918,-9996,-9954,-9876]]},{"type":"Polygon","id":72067,"arcs":[[-9812,-9947,-9821]]},{"type":"Polygon","id":72071,"arcs":[[-9980,-9975,-9944,-9958,9998]]},{"type":"Polygon","id":72007,"arcs":[[-9843,-9969,-9846,-9961,-9901,-9987]]},{"type":"Polygon","id":72019,"arcs":[[-9848,-9968,-9942,-9993,-9998,-9875,-9984]]},{"type":"Polygon","id":72093,"arcs":[[-9932,-9991,-9855,-9808,-9820,-9835]]},{"type":"Polygon","id":72151,"arcs":[[9999,10000,10001,-9949,-9906,10002]]},{"type":"Polygon","id":72137,"arcs":[[-9863,-9964,-9979,10003,10004]]},{"type":"Polygon","id":78030,"arcs":[[10005]]},{"type":"Polygon","id":72089,"arcs":[[10006,10007,10008,10009]]},{"type":"Polygon","id":72087,"arcs":[[10010,10011,-9899,10012]]},{"type":"Polygon","id":72095,"arcs":[[10013,-9950,-10002]]},{"type":"Polygon","id":72119,"arcs":[[-10009,10014,10015,10016,10017,-10011,10018]]},{"type":"Polygon","id":72103,"arcs":[[10019,10020,10021,10022,-10016]]},{"type":"Polygon","id":72085,"arcs":[[-10023,10023,-10003,-9905,10024,10025,-10017]]},{"type":"Polygon","id":72029,"arcs":[[-10018,-10026,10026,-9894,-10012]]},{"type":"MultiPolygon","id":72053,"arcs":[[[10027,-10007,10028]]]},{"type":"Polygon","id":72077,"arcs":[[-10025,-9904,-9916,-10027]]},{"type":"MultiPolygon","id":72037,"arcs":[[[10029,-10020,-10015,-10008,-10028]]]},{"type":"Polygon","id":72069,"arcs":[[10030,-10000,-10024,-10022]]},{"type":"Polygon","id":72147,"arcs":[[10031]]},{"type":"Polygon","id":78010,"arcs":[[10032]]},{"type":"Polygon","id":72051,"arcs":[[-10004,-9978,-9922,10033]]}]},"states":{"type":"GeometryCollection","geometries":[{"type":"MultiPolygon","arcs":[[[6960,-6779,-6725,-6740,-6751,-6750,-6812,-6811,-6818,-6817,-6833,6996,-7015,-7019,7048,-7189,-7192,7226,-7446,7518,7519,-7600,7723,7724,-7870,7896,-8039,8080,-8132,-8178,8215,-8312,8339,8340,-8502,8502,-8602,8701,8702,8709,8710,8711,8589,8590,8704,8705,8706,8696,8697,8722,8699,8723,8724,8725,-8640,8540,-8455,8270,8271,-8148,7976,7977,-7850,7703,-7627,7474,-7447,7327,-7278,7200,-6974,-6977]],[[8693,8694]]],"id":1},{"type":"MultiPolygon","arcs":[[[9560]],[[9561]],[[9562]],[[9563]],[[9564]],[[9565]],[[9566]],[[9567]],[[9568]],[[9569]],[[9570]],[[9571]],[[9572]],[[9573]],[[9574]],[[9575]],[[9576]],[[9577]],[[9578]],[[9579]],[[9580]],[[9581]],[[9582]],[[9583]],[[9584]],[[9585]],[[9586]],[[9587]],[[9588]],[[9589]],[[9590]],[[9591]],[[9592]],[[9593]],[[9594]],[[9595]],[[9597,9618,9602,9619,9612,9607,9608,9609,9720,9605,9721,9716,9711,9790,9789,9785,9783,9781,9772,9779,9756,9770,9685,9697,9691,9695,9643,9672,9660,9806,9662,9670,9635,9671,9645,9664,9647,9693,9650,9694,9689,9696,9687,9683,9771,9768,9769,9758,9753,9764,9751,9765,9744,9766,9734,9724,9767,9759,9631,9617,9599,9614]],[[9600]],[[9601]],[[9604]],[[9613]],[[9621]],[[9622]],[[9623]],[[9624]],[[9625]],[[9626]],[[9627]],[[9628]],[[9629]],[[9630]],[[9641,9673,9637,9674,9639,9682]],[[9642]],[[9651]],[[9699,9653,9700]],[[9654]],[[9655]],[[9656]],[[9657]],[[9658]],[[9659]],[[9675,9676,9677,9704,9702,9666,9701,9668,9703,9679]],[[9669]],[[9681,9692]],[[9698]],[[9705]],[[9706]],[[9707]],[[9712]],[[9713]],[[9714]],[[9715]],[[9735]],[[9736]],[[9737]],[[9738]],[[9739]],[[9740]],[[9741]],[[9742]],[[9745]],[[9746]],[[9748,9763]],[[9749]],[[9752]],[[9760]],[[9761]],[[9762]],[[9780]],[[9786]],[[9787]],[[9788]],[[9791]],[[9792]],[[9793]],[[9794]],[[9795]],[[9796]],[[9797]],[[9798]],[[9799]],[[9800]],[[9801]],[[9802]],[[9803]],[[9804]],[[9805]]],"id":2},{"type":"MultiPolygon","arcs":[[[-5794,5794,5795,5796,-7198,7619,7620,-8060,8229,8523,8212,7750,7751,7330,7331,-6550,-6549,-5937,-4613,-5352,-5426,-5425,-4742,-4741,-4740]]],"id":4},{"type":"MultiPolygon","arcs":[[[-5831,-5946,-5945,-5944,-5957,-5956,-5955,-5732,-5915,-5914,-5913,-5942,-5941,-5888,-5999,-5998,-5997,-5996,-6190,-6303,6435,6436,6437,6438,-6633,6760,6761,6762,7036,-7048,7153,7154,-7441,-7440,7688,7689,7690,7691,7692,7802,7819,7820,7758,7759,7744,7745,7669,7670,7671,-7638,7539,-7254,-7253,7139,-6801,-6800,6753,-6638,6578,-6344,6280,6144,-5971,-5961,-5861,-5860]]],"id":5},{"type":"MultiPolygon","arcs":[[[-1578,2356,-2368,-2367,-2366,-2365,4113,4114,-4294,-4293,-4292,-3783,-4308,4555,-4763,-4239,5475,-5938,6548,6549,-7332,-7331,-7752,7765,7722,7545,7076,7041,6922,6556,5900,5619,5299,5203,5296,5447,5164,5019,4847,4539,4685,4457,4684,4459,4467,4841,4469,3604,2658,2346,-1865,-1947,-1946,-1854,-1575,-1574]],[[6919]],[[6920]],[[7040]],[[7073]],[[7074]]],"id":6},{"type":"MultiPolygon","arcs":[[[-2525,-2706,-2705,-2675,-2674,-2799,-2948,-2947,3119,-3174,3341,3342,-3598,3920,3921,-4261,4340,-4580,-4579,4881,4882,-5255,5325,5326,5327,5217,5218,5315,5316,5520,5521,5506,5507,5331,5329,-4739,-4738,-4737,4616,-4007,3557,-3077,-3076,2957,2958,-2168,-2110,-2109,-2108,-2114,-2113,-2526]]],"id":8},{"type":"MultiPolygon","arcs":[[[-2145,-1989,-1988,2290,2291,-2430,2499,2500,2532,2534,2531,2535,2520,2521,2522,-2258,-2257,-1970,-2147,-2146]]],"id":9},{"type":"MultiPolygon","arcs":[[[3730,3731]],[[3732,3733]],[[4084,4085,-4061,3736,3737,-3477,-3567,-3475,-3566,3734,4086,4378,4379,4380,4381,4382,4383,-4251]]],"id":10},{"type":"MultiPolygon","arcs":[[[4371,4372,-4099,-4281]]],"id":11},{"type":"MultiPolygon","arcs":[[[-8759,-8758,-8767,-8766,-8764,-8763,-8786,-8760,-8785,-8859,-8858,-8718,-8717,-8623,-8771,-8770,-8729,8866,8936,9043,9151,9203,9226,9216,9150,9019,8933,9020,9177,9016,9175,9217,9272,9210,9273,9212,9268,9359,9385,9433,9387,9431,9443,9427,9444,9429,9445,9481,9489,9483,9491,9485,9490,9487,9494,9477,9453,9441,9393,9439,9395,9372,9342,9340,9310,9294,9261,9258,9201,9495,8995,8896,8996,9104,9036,9103,9038,8943,9039,8945,8836,8827,8837,8829,8819,8813,-8697,-8707,-8706,-8705,-8591,-8590,-8712,-8711,-8710,-8703,-8769,-8768,-8755]],[[-8695,8810]],[[8815,8812,8816,8825]],[[8935,9021]],[[9180,9013,9178,9218]],[[9102]],[[9306,9338]],[[9361,9384]],[[9369,9396]],[[9383,9432]],[[9390,9438]],[[9425,9442]],[[9436,9454]],[[9451]],[[9472,9493]],[[9492]]],"id":12},{"type":"MultiPolygon","arcs":[[[-6945,-6944,-6943,-7081,-7080,-7277,7366,-7464,-7463,-7510,-7509,-7568,-7567,-7736,7845,-7893,7916,-7923,-8076,-8075,8304,8299,8355,8352,8546,8628,8544,8629,8727,8728,8769,8770,8622,8716,8717,8857,8858,8784,8759,8785,8762,8763,8765,8766,8757,8758,8754,8767,8768,-8702,8601,-8503,8501,-8341,-8340,8311,-8216,8177,8131,-8081,8038,-7897,7869,-7725,-7724,7599,-7520,-7519,7445,-7227,7191,7188,-7049,7018,7014,-6997,-6832,-6747,-6746,-6745,-6821,-6820,-6854,-6853,-6849,-6848,-6909,-6908,-6907,-6828,-6699,-6947,-6946]],[[8302]],[[8303]],[[8351]],[[8542,8627]],[[8545]],[[8726]]],"id":13},{"type":"MultiPolygon","arcs":[[[9551,9555]],[[9552]],[[9553]],[[9554]],[[9556]],[[9557]],[[9558]],[[9559]]],"id":15},{"type":"MultiPolygon","arcs":[[[-338,-317,-316,500,-510,-715,-714,-713,-736,-631,1095,-1149,-1148,1566,-1708,-1707,2023,2114,2078,2079,1992,1993,1868,1554,1555,-1237,-1236,-1235,1065,-945,889,-688,504,517,518,-384,-383,352,-237,-236,112,-80,21,22,19,-34,109,-191,229]]],"id":16},{"type":"MultiPolygon","arcs":[[[-1919,-1925,-1924,-1932,-1931,-2001,-2000,2087,2207,2208,2483,-2506,2748,-2801,2932,-3136,3303,3304,-3526,3705,-3900,4008,-4157,4222,-4431,-4430,4671,-4693,4908,-4932,5144,-5180,5367,5368,5370,-5502,5572,5584,5585,5578,5579,5580,-5360,-5359,-5169,5134,4937,4938,4713,4714,-4442,-4441,-4509,4365,4366,4367,4149,4052,4053,-3910,3728,3729,-3663,3495,-3471,3221,3222,-3095,2902,-2898,2740,-2691,2422,2423,2424,-2288,-2287,2203,-2133,2068,-1995,-1752,-1940,-1939,-1920]]],"id":17},{"type":"MultiPolygon","arcs":[[[-2264,-2269,2443,-2512,2593,-2690,2769,2770,-2995,3015,-3148,3271,-3385,-3384,3592,-3694,3789,-3913,-4123,4128,-4250,-4249,4410,4411,4419,4420,-4544,4647,4648,4799,4792,4793,4794,4789,4895,4896,4897,4955,4956,4925,4926,4975,4929,4930,4931,-4909,4692,-4672,4429,4430,-4223,4156,-4009,3899,-3706,3525,-3305,-3304,3135,-2933,2800,-2749,2505,-2484,-2209,2506,2508,2440,-2178,-2177,-2274,-2273,-2271,-2270,-2265]]],"id":18},{"type":"MultiPolygon","arcs":[[[-1475,-1474,-1487,-1486,-1479,-1478,-1539,1628,-1670,-1754,-1753,1994,-2069,2132,-2204,2286,2287,-2425,-2424,-2423,2690,-2741,2897,-2903,3094,3095,3055,3056,3058,3059,3070,3071,3068,3069,3065,3066,3062,3063,3052,3053,3049,3050,3046,3047,-2910,2856,-2805,2631,2632,-2516,2389,-2278,2181,-2165,2036,2037,-1806,-1805,1730,-1634,1625,-1495,-1464,-1468,-1467,-1491,-1490,-1489,-1500,-1499,-1493,-1492,-1471,-1470,-1476]]],"id":19},{"type":"MultiPolygon","arcs":[[[-3407,-3406,-3401,-3400,-3411,-3410,-3391,-3390,-3388,-3387,-3395,-3394,-3404,-3405,-3297,-3296,-3464,-3463,-3468,-3467,-3466,-3470,-3541,3642,-3743,3865,-3984,-3983,-4028,-4183,-4182,4332,-4487,4533,-4762,4814,-5045,-5044,5308,5309,-5554,5566,5567,5568,5541,5542,5533,5534,5604,5605,5455,5456,5458,5459,5536,5537,5468,5469,5538,5539,5465,5466,5462,5530,5531,5529,5526,5527,-5326,5254,-4883,-4882,4578,4579,-4341,4260,-3922,-3921,3597,-3343,-3398,-3397,-3409]]],"id":20},{"type":"MultiPolygon","arcs":[[[-4120,-4145,-4144,-4143,-4166,-4165,-4337,-4336,-4359,-4358,-4484,-4483,4732,-4799,-4798,-5111,-5110,5243,5244,5245,5624,-5656,5742,5844,5845,5834,5835,5842,5843,5822,5823,5909,5910,5853,5938,5939,5856,5857,5918,5919,5712,5714,5715,5675,5676,5753,5962,5963,5849,5850,5957,5958,5983,5984,-5924,-5725,-5724,-5723,5645,-5579,-5586,-5585,-5573,5501,-5371,-5369,-5368,5179,-5145,-4931,-4930,-4976,-4927,-4926,-4957,-4956,-4898,-4897,-4896,-4790,-4795,-4794,-4793,-4800,-4649,-4648,4543,-4421,-4420,-4412,-4411,4248,4249,-4129,-4122,-4121]],[[5982,-5926]]],"id":21},{"type":"MultiPolygon","arcs":[[[7929,7930,7931,-7844,-7671,-7670,-7746,-7745,-7760,-7759,-7821,-7820,-7803,-7693,-7692,-7691,-7950,7965,-8130,-8129,-8128,-8127,8293,8294,8295,8510,8511,-8667,-8666,-8680,-8679,-8678,-8683,-8682,-8684,-8652,-8794,-8793,8877,8878,9040,9067,9060,9061,9062,9063,9135,9065,9140,9136,9137,9138,9139,9033,9128,9118,9119,9120,9030,9121,9122,9160,9124,9161,9126,9168,9163,9164,9165,9166,9167,9109,9088,9076,9099,-9047,-9023,8972,-8714,-8713,8669,8475,8476,-8425,8258,-8244]],[[9133,9134],[-9057],[-9060]],[[9085]],[[9117,9159]],[[9132]],[[9162]]],"id":22},{"type":"MultiPolygon","arcs":[[[895,578,1091,1255,1259,1365,1363,1364,1261,1108,1366,1353,1362,1355,1511,1512,-1273,864,865,866,795,548,348,791]],[[893]],[[894]]],"id":23},{"type":"MultiPolygon","arcs":[[[-3480,-3479,-3427,-3426,-3478,-3738,-3737,4060,-4086,-4085,4250,-4384,-4383,-4382,4778,4774,4775,4776,4860,4859,4678,4569,4567,4252,4394,4153,4062,3805,3815,3821,4072,4177,4071,4178,4174,4509,4277,4601,4719,4718,4603,4279,4280,4098,4099,4100,3830,3792,3793,3794,3795,3797,3798,3799,3801,3802,3803,-3527,-3439,-3438,-3423,-3517,-3516,-3436,-3435,-3564,-3563,-3481]],[[4150]],[[4771,4772]],[[-4380,4773]],[[4850,4851]],[[4852,4853,4854,4855]],[[4856,4857,4858]]],"id":24},{"type":"MultiPolygon","arcs":[[[1977,2092,1979,2089,2140,2151,2138,2147,2261,2260,2149,2221,2222,2223,2224,2225,2143,1986,1987,1988,2144,2145,2146,1969,1970,1971,-1859,-1711,-1710,-1728,-1780,-1779,-1757,-1756,-1755,-1723,1906,2093]],[[2604]],[[2700]]],"id":25},{"type":"MultiPolygon","arcs":[[[464,465,466,422,9508,434,9512,9514,473,9524,9526,9522,9527,555,9515,691,692,618,619,568,569,570]],[[9536,1049,1210,9537,1408,1534,9538,1552,9539,1899,9540,9544,-2478,2253,2254,2266,2267,2268,2263,2264,2269,2270,2272,2273,2176,2177,2178,2124,1960,1759,1660,1507,1351,1199,1086,9534,9535,923,9530,9529,749,798]],[[9506,9504,9509]],[[9507]],[[9518,9519]],[[9520]],[[9525]],[[9531]],[[9532]],[[-2482,9542]],[[9543,-2480]]],"id":26},{"type":"MultiPolygon","arcs":[[[9496,123,140,193,9497,192,135,136,461,572,573,-646,772,-778,876,877,1025,-1049,1113,-1137,-1162,-1161,-1165,1343,-1397,1476,1477,1478,1485,1486,1473,1474,1475,1469,1470,1491,1492,1498,1499,1488,1489,1490,1466,1467,1463,1464,1309,-1194,1154,-1019,-1018,892,-868,817,-724,681,-533,528,403,-392,336,-306,207,-199,153,154,-53,58,104]]],"id":27},{"type":"MultiPolygon","arcs":[[[-6767,-6799,-6781,-6780,-6961,6976,6973,-7201,7277,-7328,7446,-7475,7626,-7704,7849,-7978,-7977,8147,-8272,-8271,8454,-8541,8639,-8726,-8725,8869,8892,8910,-8878,8792,8793,8651,8683,8681,8682,8677,8678,8679,8665,8666,-8512,-8511,-8296,-8295,-8294,8126,8127,8128,8129,-7966,7949,-7690,-7689,7439,7440,-7155,-7154,7047,-7037,-6763,-6762,-6794,-6793,-6798,-6797,-6769,-6768]]],"id":28},{"type":"MultiPolygon","arcs":[[[-3496,3662,-3730,-3729,3909,-4054,-4053,-4150,-4368,-4367,-4366,4508,4440,4441,-4715,-4714,-4939,-4938,-5135,5168,5358,5359,-5581,-5580,-5646,5722,5723,5724,5923,5924,5925,5926,-6128,6188,6189,5995,5996,5997,5998,5887,5940,5941,5912,5913,5914,5731,5954,5955,5956,5943,5944,5945,5830,5859,5860,5960,5961,-5781,5735,-5567,5553,-5310,-5309,5043,5044,-4815,4761,-4534,4486,-4333,4181,4182,4027,3982,3983,-3866,3742,-3643,3540,3469,-3465,-3284,3253,-3109,-3047,-3051,-3050,-3054,-3053,-3064,-3063,-3067,-3066,-3070,-3069,-3072,-3071,-3060,-3059,-3057,-3056,-3096,-3223,-3222,3470]]],"id":29},{"type":"MultiPolygon","arcs":[[[108,-91,106,-131,210,-220,361,-369,496,497,498,654,655,656,741,742,743,676,677,804,805,634,628,629,630,735,712,713,714,509,-501,315,316,337,-230,190,-110,33,-20,34,18,41,97,86,44,48,27,8,51]]],"id":30},{"type":"MultiPolygon","arcs":[[[1833,-1618,-1658,-1657,-1548,-1547,-1683,-1684,-1526,-1656,-1655,-1646,-1645,-1785,-1783,-1782,-1811,-1810,-1808,-1807,-2038,-2037,2164,-2182,2277,-2390,2515,-2633,-2632,2804,-2857,2909,-3048,3108,-3254,3283,3464,3465,3466,3467,3462,3463,3295,3296,3404,3403,3393,3394,3386,3387,3389,3390,3409,3410,3399,3400,3405,3406,3408,3396,3397,-3342,3173,-3120,2946,2947,2798,2673,2674,2704,2705,-2524,2514,-2019,-2018]]],"id":31},{"type":"MultiPolygon","arcs":[[[-1402,-1238,-1556,-1555,-1869,-1994,-2330,2334,-2897,3541,3542,-3979,4609,4610,4611,4612,5936,5937,-5476,4238,4762,-4556,4307,3782,4291,4292,4293,-4115,-4114,2364,2365,2366,2367,-2357,-1577,-1403]]],"id":32},{"type":"MultiPolygon","arcs":[[[-1513,1589,1721,1722,1754,1755,1756,1778,1779,-1727,1588,-1430,1243,1244,-1089,-971,874,875,-866,-865,1272]]],"id":33},{"type":"MultiPolygon","arcs":[[[-2743,2873,3093,3043,3136,3236,3325,3511,3501,3786,4108,3927,3924,3765,3925,3768,-3732,3769,-3734,3770,3704,3646,3504,3505,-3234,-3233,3104,2887,2888,-2790,2730,-2575,-2542,-2541,-2744]]],"id":34},{"type":"MultiPolygon","arcs":[[[-5316,-5219,-5218,-5328,5799,5800,5801,-6401,6582,6583,-6887,7029,7030,7177,7178,-7589,7679,7680,7681,7682,7683,7989,7990,7991,7808,7809,7810,7913,7914,8132,8058,8059,-7621,-7620,7197,-5797,-5796,-5795,5793,-5330,-5332,-5508,-5507,-5522,-5521,-5317]]],"id":35},{"type":"MultiPolygon","arcs":[[[1178,-1269,-1459,1518,-1712,1858,-1972,-1971,2256,2257,-2523,-2522,2726,2723,3022,3074,3024,2725,2601,2744,2742,2743,2540,2541,2542,2297,2298,2064,2126,2127,2129,2130,2162,2163,2027,2028,2059,2060,2056,2057,2031,2032,2033,1803,1690,1687,1695,1698,1675,1544,1252,1539,1254,1249,994,1006,980,-976,977,-1106]],[[1799]],[[2756,3028]],[[3031,3099,3132,3101,3033,2758,3029,3096]],[[3098,3131]],[[3217]]],"id":36},{"type":"MultiPolygon","arcs":[[[-5951,-5875,-5923,-5922,-5935,-5934,-5691,-5690,-5989,-5688,-5730,-5729,-5728,-5909,-5908,-5907,-5741,-5740,-5902,-5820,-5819,-5818,-5897,-5896,-5933,-5932,-5870,6067,6065,6075,6114,6205,6220,6063,6084,6272,6460,6454,6611,6285,6612,6592,6521,6588,6830,6787,6857,6785,6916,7011,7133,7294,7132,7295,7304,7305,7306,7307,7273,7026,7027,7028,6951,6900,6871,6872,6876,6877,6702,6703,6782,6672,6673,6657,6658,6794,6795,6721,6775,6776,6777,6697,6698,6827,6906,6907,6908,6847,6848,6849,-6624,-6623,-6487,-6486,-6422,-6421,-6315,-6314,-6201,-6258,-6257,-6256,-6112,-6111,-6012,-6011,-6010,-5953,-5952]],[[6070,-5866,6068,6286]],[[-6072,5863,-6073,5867]],[[6283,6281,6610]],[[7293,7303]],[[7301,7302]]],"id":37},{"type":"MultiPolygon","arcs":[[[30,62,66,55,52,-155,-154,198,-208,305,-337,391,-404,-529,532,533,606,607,612,613,610,611,512,564,602,603,604,614,-498,-497,368,-362,219,-211,130,-107,90,91,96,101,38]]],"id":38},{"type":"MultiPolygon","arcs":[[[-2648,2874,-2882,3009,3010,-3226,3242,3243,-3500,3508,-3587,3715,3716,3874,3875,3876,3973,-4051,4212,4210,4348,4349,4480,4481,4482,4483,4357,4358,4335,4336,4164,4165,4142,4143,4144,4119,4120,4121,4122,3912,-3790,3693,-3593,3383,3384,-3272,3147,-3016,2994,-2771,-2770,2689,-2594,2511,-2444,-2268,-2267,-2255,-2254,2477,2478,2479,2480,2481,2482,2487,2641,2489,2642,2567,2608,2553,2416,2374,-2174,2370,-2420,2638]]],"id":39},{"type":"MultiPolygon","arcs":[[[-5569,-5568,-5736,5780,-5962,5970,-6145,-6281,6343,-6579,6637,-6754,6799,6800,-7140,7252,7253,7254,7255,7427,7428,7424,7425,7426,7406,7466,7467,7468,7364,7365,7250,7251,7160,7161,7055,7056,6953,6954,-6894,6717,-6654,6428,-6395,6041,6042,5813,5814,5809,5810,5811,5806,5807,-5800,-5327,-5528,-5527,-5530,-5532,-5531,-5463,-5467,-5466,-5540,-5539,-5470,-5469,-5538,-5537,-5460,-5459,-5457,-5456,-5606,-5605,-5535,-5534,-5543,-5542]]],"id":40},{"type":"MultiPolygon","arcs":[[[637,-670,-583,-582,-675,-674,-673,-672,-671,-485,-484,-539,-537,-536,-495,-564,-518,-505,687,-890,944,-1066,1234,1235,1236,1237,1401,1402,1576,1577,1573,1574,1853,1945,1946,1864,1865,1585,1438,1271,955,754,601,640,-587]]],"id":41},{"type":"MultiPolygon","arcs":[[[-2057,-2061,-2060,-2029,-2028,-2164,-2163,-2131,-2130,-2128,-2127,-2065,-2299,-2298,-2543,2574,-2731,2789,-2889,-2888,-3105,3232,3233,-3506,3533,3564,3565,3474,3566,3476,3477,3425,3426,3478,3479,3480,3562,3563,3434,3435,3515,3516,3422,3437,3438,3526,3527,3528,3588,3589,-3588,3317,3318,3319,-3224,3083,-3010,2881,-2875,2647,-2639,2419,-2371,2173,2174,-2033,-2032,-2058]]],"id":42},{"type":"MultiPolygon","arcs":[[[2425,2294,2427,2526,-2500,2429,-2292,-2291,-1987,-2144,-2226,-2225]],[[2517]],[[2518,-2223]]],"id":44},{"type":"MultiPolygon","arcs":[[[-6658,-6674,-6673,-6783,-6704,-6703,-6878,-6877,-6873,-6872,-6901,-6952,-7029,-7028,-7027,-7274,-7308,7355,7616,9549,9548,7718,9545,7886,9546,7888,8102,8067,8099,8069,8098,8071,8097,8073,8074,8075,7922,-7917,7892,-7846,7735,7566,7567,7508,7509,7462,7463,-7367,7276,7079,7080,6942,6943,6944,6945,6946,-6698,-6778,-6777,-6776,-6722,-6796,-6795,-6659]],[[-7302,7353]],[[-7306,7354]],[[7615,9547]],[[8096]],[[8100]],[[8101]]],"id":45},{"type":"MultiPolygon","arcs":[[[-513,-612,-611,-614,-613,-608,-607,-534,-682,723,-818,867,-893,1017,1018,-1155,1193,-1310,-1465,1494,-1626,1633,-1731,1804,1805,1806,1807,1809,1810,1781,1782,1784,1644,1645,1654,1655,1525,1683,1682,1546,1547,1656,1657,-1617,1461,-1347,1222,1158,-1008,914,-656,-655,-499,-615,-605,-604,-603,-565]]],"id":46},{"type":"MultiPolygon","arcs":[[[-5715,-5713,-5920,-5919,-5858,-5857,-5940,-5939,-5854,-5911,-5910,-5824,-5823,-5844,-5843,-5836,-5835,-5846,-5906,-5905,-5918,-5917,-5916,-5881,-5994,-5885,-5884,-5954,6009,6010,6011,6110,6111,6255,6256,6257,6200,6313,6314,6420,6421,6485,6486,6622,6623,-6850,6852,6853,6819,6820,6744,6745,6746,6831,6832,6816,6817,6810,6811,6749,6750,6739,6724,6778,6779,6780,6798,6766,6767,6768,6796,6797,6792,6793,-6761,6632,-6439,-6438,-6437,-6436,6302,-6189,6127,-5927,-5983,-5925,-5985,-5984,-5959,-5958,-5851,-5850,-5964,-5963,-5754,-5677,-5676,-5716]]],"id":47},{"type":"MultiPolygon","arcs":[[[-5808,-5807,-5812,-5811,-5810,-5815,-5814,-6043,-6042,6394,-6429,6653,-6718,6893,-6955,-6954,-7057,-7056,-7162,-7161,-7252,-7251,-7366,-7365,-7469,-7468,-7467,-7407,-7427,-7426,-7425,-7429,-7428,-7256,-7255,-7540,7637,-7672,7843,-7932,-7931,-7930,8243,-8259,8424,-8477,-8476,-8670,8712,8713,-8973,9022,9046,9047,9142,9195,9144,9052,9194,9192,9196,9241,9239,9286,9229,9290,9289,9231,9245,9233,9246,9288,9300,9326,9282,9280,9327,9325,9302,9320,9332,9323,9333,9353,9335,9356,9354,9379,9421,9416,9417,9471,9467,9468,9469,9479,9478,9459,9456,9402,9331,9257,9190,9003,8903,8900,8913,8411,8413,-7914,-7811,-7810,-7809,-7992,-7991,-7990,-7684,-7683,-7682,-7681,-7680,7588,-7179,-7178,-7031,-7030,6886,-6584,-6583,6400,-5802,-5801]],[[9050,9141]],[[9191]],[[9285,9283,9324]],[[9318,9352]],[[9319]],[[9413,9414,9377,9350,9378,9415]],[[9351]],[[9404,9462]],[[9463,9464,9465,9407,9408,9405,9466]],[[9409,9410,9411,9412]],[[9461,9480]]],"id":48},{"type":"MultiPolygon","arcs":[[[-1706,2316,-2593,-2170,-2169,-2959,-2958,3075,3076,-3558,4006,-4617,4736,4737,4738,4739,4740,4741,5424,5425,5351,-4612,-4611,-4610,3978,-3543,-3542,2896,-2335,2329,-1993,-2080,-2079,-2115,-2024]]],"id":49},{"type":"MultiPolygon","arcs":[[[973,-875,970,1088,-1245,-1244,1429,-1589,1726,1727,1709,1710,1711,-1519,1458,1268,-1179,1105,-978,975,976,969,983]]],"id":50},{"type":"MultiPolygon","arcs":[[[-4005,-3793,-3831,-4101,-4100,-4373,4405,4487,4326,4395,4657,4804,4869,5072,5198,5197,5006,4868,4801,4983,5235,5379,5433,5381,5117,5157,5338,5483,5546,5671,5669,5699,5651,5482,5440,5292,5403,5589,5593,5639,5682,5897,5893,5929,5890,5839,5930,5871,5841,5872,5865,5866,5867,5868,5869,5931,5932,5895,5896,5817,5818,5819,5901,5739,5740,5906,5907,5908,5727,5728,5729,5687,5988,5689,5690,5933,5934,5921,5922,5874,5950,5951,5952,5953,5883,5884,5993,5880,5915,5916,5917,5904,5905,-5845,-5743,5655,-5625,-5246,-5245,-5244,-5109,-5421,-5420,-5387,-5386,-5385,-5189,-5285,-5284,5130,-4886,4880,-4523,-4522,-4389,-4388,-4387,-4173,-4172,4024,-3980,-3846,-3891,-4006],[5598]],[[5060,-4854]],[[5061,-4858]],[[-4851,5062]],[[5065,5066,-4776,5067,5063,5414]],[[-4772,5068]],[[5862,5863,5864]]],"id":51},{"type":"MultiPolygon","arcs":[[[83,78,81,-22,79,-113,235,236,-353,382,383,-519,563,494,535,536,538,483,484,670,671,672,673,674,581,582,669,-638,586,587,589,455,331,222,176,223,307,265,359,262,360,309,395,358,295,185,173,186,127,124,2,73]],[[116]],[[117]],[[118]],[[174]],[[260]],[[292]]],"id":53},{"type":"MultiPolygon","arcs":[[[-3529,-3528,-3804,-3803,-3802,-3800,-3799,-3798,-3796,-3795,-3794,4004,4005,3890,3845,3979,-4025,4171,4172,4386,4387,4388,4521,4522,-4881,4885,-5131,5283,5284,5188,5384,5385,5386,5419,5420,5108,5109,5110,4797,4798,-4733,-4482,-4481,-4350,-4349,-4211,-4213,4050,-3974,-3877,-3876,-3875,-3717,-3716,3586,-3509,3499,-3244,-3243,3225,-3011,-3084,3223,-3320,-3319,-3318,3587,-3590,-3589]]],"id":54},{"type":"MultiPolygon","arcs":[[[-570,-569,-620,-619,-693,9516,855,1129,857,1130,1142,9517,1140,1262,1448,1597,1773,1932,1998,1999,2000,1930,1931,1923,1924,1918,1919,1938,1939,1751,1752,1753,1669,-1629,1538,-1477,1396,-1344,1164,1160,1161,1136,-1114,1048,-1026,-878,-877,777,-773,645,-574,-573,-462,-137,9499,9501,9502,542,-466,-465,-571]],[[9503]]],"id":55},{"type":"MultiPolygon","arcs":[[[-677,-744,-743,-742,-657,-915,1007,-1159,-1223,1346,-1462,1616,1617,-1834,2017,2018,-2515,2523,2524,2525,2112,2113,2107,2108,2109,2167,2168,2169,2592,-2317,1705,1706,1707,-1567,1147,1148,-1096,-630,-629,-635,-806,-805,-678]]],"id":56},{"type":"MultiPolygon","arcs":[[[9947,9822,9926,9955,9816,9956,9998,9980,9859,9828,9889,9984,9884,9892,9924,10033,10004,9863,9902,9987,9897,10012,10018,10009,10028,10029,10020,10030,10000,10013,9950,9933,9988,9970,9851,9911,9996,9871,9958,9989,9830,9936]],[[10031]]],"id":72},{"type":"MultiPolygon","arcs":[[[10005]],[[10032]]],"id":78}]},"land":{"type":"MultiPolygon","arcs":[[[5868,6067,6065,6075,6114,6205,6220,6063,6084,6272,6460,6454,6611,6285,6612,6592,6521,6588,6830,6787,6857,6785,6916,7011,7133,7294,7132,7295,7304,7354,7306,7355,7616,9549,9548,7718,9545,7886,9546,7888,8102,8067,8099,8069,8098,8071,8097,8073,8304,8299,8355,8352,8546,8628,8544,8629,8727,8866,8936,9043,9151,9203,9226,9216,9150,9019,8933,9020,9177,9016,9175,9217,9272,9210,9273,9212,9268,9359,9385,9433,9387,9431,9443,9427,9444,9429,9445,9481,9489,9483,9491,9485,9490,9487,9494,9477,9453,9441,9393,9439,9395,9372,9342,9340,9310,9294,9261,9258,9201,9495,8995,8896,8996,9104,9036,9103,9038,8943,9039,8945,8836,8827,8837,8829,8819,8813,8697,8722,8699,8723,8869,8892,8910,8878,9040,9067,9060,9061,9062,9063,9135,9065,9140,9136,9137,9138,9139,9033,9128,9118,9119,9120,9030,9121,9122,9160,9124,9161,9126,9168,9163,9164,9165,9166,9167,9109,9088,9076,9099,9047,9142,9195,9144,9052,9194,9192,9196,9241,9239,9286,9229,9290,9289,9231,9245,9233,9246,9288,9300,9326,9282,9280,9327,9325,9302,9320,9332,9323,9333,9353,9335,9356,9354,9379,9421,9416,9417,9471,9467,9468,9469,9479,9478,9459,9456,9402,9331,9257,9190,9003,8903,8900,8913,8411,8413,7914,8132,8058,8229,8523,8212,7750,7765,7722,7545,7076,7041,6922,6556,5900,5619,5299,5203,5296,5447,5164,5019,4847,4539,4685,4457,4684,4459,4467,4841,4469,3604,2658,2346,1865,1585,1438,1271,955,754,601,640,587,589,455,331,222,176,223,307,265,359,262,360,309,395,358,295,185,173,186,127,124,2,73,83,78,81,22,34,18,41,97,86,44,48,27,8,51,108,91,96,101,38,30,62,66,55,58,104,9496,123,140,193,9497,192,135,9499,9501,9502,542,466,422,9508,434,9512,9514,473,9524,9526,9522,9527,555,9515,691,9516,855,1129,857,1130,1142,9517,1140,1262,1448,1597,1773,1932,1998,2087,2207,2506,2508,2440,2178,2124,1960,1759,1660,1507,1351,1199,1086,9534,9535,923,9530,9529,749,798,9536,1049,1210,9537,1408,1534,9538,1552,9539,1899,9540,9544,2478,9543,2480,9542,2482,2487,2641,2489,2642,2567,2608,2553,2416,2374,2174,2033,1803,1690,1687,1695,1698,1675,1544,1252,1539,1254,1249,994,1006,980,976,969,983,973,875,866,795,548,348,791,895,578,1091,1255,1259,1365,1363,1364,1261,1108,1366,1353,1362,1355,1511,1589,1721,1906,2093,1977,2092,1979,2089,2140,2151,2138,2147,2261,2260,2149,2221,2518,2223,2425,2294,2427,2526,2500,2532,2534,2531,2535,2520,2726,2723,3022,3074,3024,2725,2601,2744,2873,3093,3043,3136,3236,3325,3511,3501,3786,4108,3927,3924,3765,3925,3768,3730,3769,3732,3770,3704,3646,3504,3533,3564,3734,4086,4378,4773,4380,4778,4774,5067,5063,5414,5065,5066,4776,4860,4859,4678,4569,4567,4252,4394,4153,4062,3805,3815,3821,4072,4177,4071,4178,4174,4509,4277,4601,4719,4718,4603,4279,4371,4405,4487,4326,4395,4657,4804,4869,5072,5198,5197,5006,4868,4801,4983,5235,5379,5433,5381,5117,5157,5338,5483,5546,5671,5669,5699,5651,5482,5440,5292,5403,5589,5593,5639,5682,5897,5893,5929,5890,5839,5930,5871,5841,5872,6068,6286,6070,5866],[5598],[5864,5862],[-6072],[-6073]],[[8693,8810]],[[9560]],[[9561]],[[9562]],[[9563]],[[9564]],[[9565]],[[9566]],[[9567]],[[9568]],[[9569]],[[9570]],[[9571]],[[9572]],[[9573]],[[9574]],[[9575]],[[9576]],[[9577]],[[9578]],[[9579]],[[9580]],[[9581]],[[9582]],[[9583]],[[9584]],[[9585]],[[9586]],[[9587]],[[9588]],[[9589]],[[9590]],[[9591]],[[9592]],[[9593]],[[9594]],[[9595]],[[9597,9618,9602,9619,9612,9607,9608,9609,9720,9605,9721,9716,9711,9790,9789,9785,9783,9781,9772,9779,9756,9770,9685,9697,9691,9695,9643,9672,9660,9806,9662,9670,9635,9671,9645,9664,9647,9693,9650,9694,9689,9696,9687,9683,9771,9768,9769,9758,9753,9764,9751,9765,9744,9766,9734,9724,9767,9759,9631,9617,9599,9614]],[[9600]],[[9601]],[[9604]],[[9613]],[[9621]],[[9622]],[[9623]],[[9624]],[[9625]],[[9626]],[[9627]],[[9628]],[[9629]],[[9630]],[[9641,9673,9637,9674,9639,9682]],[[9642]],[[9651]],[[9699,9653,9700]],[[9654]],[[9655]],[[9656]],[[9657]],[[9658]],[[9659]],[[9675,9676,9677,9704,9702,9666,9701,9668,9703,9679]],[[9669]],[[9681,9692]],[[9698]],[[9705]],[[9706]],[[9707]],[[9712]],[[9713]],[[9714]],[[9715]],[[9735]],[[9736]],[[9737]],[[9738]],[[9739]],[[9740]],[[9741]],[[9742]],[[9745]],[[9746]],[[9748,9763]],[[9749]],[[9752]],[[9760]],[[9761]],[[9762]],[[9780]],[[9786]],[[9787]],[[9788]],[[9791]],[[9792]],[[9793]],[[9794]],[[9795]],[[9796]],[[9797]],[[9798]],[[9799]],[[9800]],[[9801]],[[9802]],[[9803]],[[9804]],[[9805]],[[6919]],[[6920]],[[7040]],[[7073]],[[7074]],[[8815,8812,8816,8825]],[[8935,9021]],[[9180,9013,9178,9218]],[[9102]],[[9306,9338]],[[9361,9384]],[[9369,9396]],[[9383,9432]],[[9390,9438]],[[9425,9442]],[[9436,9454]],[[9451]],[[9472,9493]],[[9492]],[[8302]],[[8303]],[[8351]],[[8542,8627]],[[8545]],[[8726]],[[9551,9555]],[[9552]],[[9553]],[[9554]],[[9556]],[[9557]],[[9558]],[[9559]],[[-9060,-9057],[9133],[9134]],[[9085]],[[9117,9159]],[[9132]],[[9162]],[[893]],[[894]],[[4150]],[[4772,5068]],[[4851,5062]],[[4854,4855,4852,5060]],[[4858,4856,5061]],[[2604]],[[2700]],[[9506,9504,9509]],[[9507]],[[9518,9519]],[[9520]],[[9525]],[[9531]],[[9532]],[[1799]],[[2756,3028]],[[3031,3099,3132,3101,3033,2758,3029,3096]],[[3098,3131]],[[3217]],[[6283,6281,6610]],[[7293,7303]],[[7302,7353]],[[2517]],[[7615,9547]],[[8096]],[[8100]],[[8101]],[[9050,9141]],[[9191]],[[9285,9283,9324]],[[9318,9352]],[[9319]],[[9413,9414,9377,9350,9378,9415]],[[9351]],[[9404,9462]],[[9463,9464,9465,9407,9408,9405,9466]],[[9409,9410,9411,9412]],[[9461,9480]],[[116]],[[117]],[[118]],[[174]],[[260]],[[292]],[[9503]],[[9947,9822,9926,9955,9816,9956,9998,9980,9859,9828,9889,9984,9884,9892,9924,10033,10004,9863,9902,9987,9897,10012,10018,10009,10028,10029,10020,10030,10000,10013,9950,9933,9988,9970,9851,9911,9996,9871,9958,9989,9830,9936]],[[10031]],[[10005]],[[10032]]]}},"arcs":[[[162416,583189],[236,-863],[95,-3199],[219,-1079],[-271,-1241]],[[162695,576807],[-442,-309],[-4397,83]],[[157856,576581],[-6,1800],[-436,606],[-476,3062],[168,1173],[2781,-89],[2529,56]],[[203483,583173],[-111,-3268],[363,0],[1,-4838],[604,-14]],[[204340,575053],[0,-6406],[-109,-3],[-1,-3886]],[[204230,564758],[-1074,300],[-477,661],[-50,-1946]],[[202629,563773],[-411,-2654],[-860,-2419],[-1043,-435],[-462,561]],[[199853,558826],[29,9804],[98,1617],[303,-7],[-114,3279],[302,529],[-36,7508],[73,1628]],[[200508,583184],[2975,-11]],[[181317,583162],[311,-3373],[318,707],[389,-2530],[-133,-1970],[788,-1235],[-38,-1636],[347,-662],[20,-2123]],[[183319,570340],[343,-1416],[-25,-1101],[608,-791]],[[184245,567032],[386,-2907],[-296,-415]],[[184335,563710],[-284,-667],[56,-2638],[-277,-1038],[59,-2315]],[[183889,557052],[-896,67]],[[182993,557119],[-467,-2]],[[182526,557117],[100,1562],[-233,2072],[31,1860],[-477,1550],[-122,1357],[-537,-515],[111,-1134],[-1263,-12],[41,-3203],[-354,-5]],[[179823,560649],[-1,1601],[-1073,-52],[-59,2655]],[[178690,564853],[-26,3920],[480,4],[-5,6467],[-109,1580],[659,10],[112,1730],[-222,1681],[-105,2947]],[[179474,583192],[1843,-30]],[[175797,583199],[0,-9287]],[[175797,573912],[-2052,-27],[-1,6456],[-689,-16]],[[173055,580325],[0,2843]],[[173055,583168],[2742,31]],[[199853,558826],[-98,-1296],[-681,144],[-597,-3335]],[[198477,554339],[-62,2205],[-374,544],[-689,-277]],[[197352,556811],[-1279,1156],[-333,1654]],[[195740,559621],[8,3507],[732,-36],[49,1308],[485,-270],[63,8718],[182,-420],[75,5957],[166,-2],[64,4793]],[[197564,583176],[2944,8]],[[221924,574709],[-1819,8]],[[220105,574717],[-103,3252],[0,5201]],[[220002,583170],[1831,2]],[[221833,583172],[2,-5232],[89,-3231]],[[178690,564853],[-400,43],[-118,-1893],[-228,-480],[-676,326],[-47,1381],[-616,5246],[-698,-1924],[-112,1019]],[[175795,568571],[2,5341]],[[175797,583199],[3677,-7]],[[220105,574717],[-364,-10]],[[219741,574707],[-362,-1],[-1,1624],[-1819,10],[0,-1619]],[[217559,574721],[-1091,11],[0,3239],[-126,10],[-1,5192]],[[216341,583173],[3661,-3]],[[186539,583158],[26,-9701]],[[186565,573457],[-1094,108],[-10,-3230],[-2142,5]],[[181317,583162],[5222,-4]],[[193948,567081],[-537,-46],[0,1653],[-331,-43],[0,1617],[-2172,10],[0,-1617],[-363,1]],[[190545,568656],[35,14501]],[[190580,583157],[3492,32]],[[194072,583189],[-44,-7981],[115,-2218],[-242,-2960],[47,-2949]],[[195740,559621],[-133,1040],[-934,56],[-434,-1362],[-302,350]],[[193937,559705],[11,7376]],[[194072,583189],[3492,-13]],[[206421,583169],[53,-6498],[181,-1619]],[[206655,575052],[-2315,1]],[[203483,583173],[2938,-4]],[[228232,583191],[206,-4516],[166,-1312],[-187,-2686]],[[228417,574677],[-2130,0]],[[226287,574677],[-64,8514]],[[226223,583191],[2009,0]],[[230526,583184],[49,-8486]],[[230575,574698],[-2158,-21]],[[228232,583191],[2294,-7]],[[223380,574698],[-1,-3220],[-639,-11]],[[222740,571467],[-816,5]],[[221924,571472],[0,3237]],[[221833,583172],[1465,10]],[[223298,583182],[0,-5247],[82,-3237]],[[226287,574677],[-1090,12]],[[225197,574689],[-1817,9]],[[223298,583182],[2925,9]],[[168030,583185],[-42,-19407]],[[167988,563778],[-338,-262]],[[167650,563516],[-25,343]],[[167625,563859],[88,1056],[-308,2218],[-250,148],[-799,-1281],[-586,-1450],[-104,1726],[-570,-649],[55,-1799]],[[165151,563828],[-497,4],[-263,1945],[-611,1931],[-82,1381],[-532,1417],[-331,3957]],[[162835,574463],[-140,2344]],[[162416,583189],[2209,-15],[3405,11]],[[171951,583192],[-373,-3049],[-183,-3367],[361,7],[-7,-9706],[182,-1632]],[[171931,565445],[-274,12],[-1,-4693],[-435,1680],[-360,-1132]],[[170861,561312],[-166,418],[-548,-890],[-371,2707],[-364,-947]],[[169412,562600],[-132,2358],[406,757],[-5,1210],[289,2381],[-186,3288],[316,4420],[-332,3951],[45,2219]],[[169813,583184],[2138,8]],[[173055,580325],[-26,-14911]],[[173029,565414],[-1098,31]],[[171951,583192],[1104,-24]],[[169412,562600],[-45,-983],[-485,620],[-109,1069],[-446,-598],[-339,1070]],[[168030,583185],[1783,-1]],[[188725,567028],[0,1624]],[[188725,568652],[374,0],[11,14480]],[[189110,583132],[1470,25]],[[190545,568656],[-199,-1611],[-1621,-17]],[[212324,583170],[-3,-5175],[150,-1639]],[[212471,576356],[-3238,15]],[[209233,576371],[-1,6810]],[[209232,583181],[3092,-11]],[[214880,583162],[-1,-3570]],[[214879,579592],[-364,-1],[-1,-1615],[-226,0],[0,-3239]],[[214288,574737],[-1816,1]],[[212472,574738],[-1,1618]],[[212324,583170],[2556,-8]],[[186539,583158],[2571,-26]],[[188725,568652],[-718,-1],[2,2422],[-362,804],[-543,30],[-81,1075],[-458,475]],[[217559,574721],[0,-1621]],[[217559,573100],[-2179,21],[-1,4852],[-499,6],[-1,1613]],[[214880,583162],[1461,11]],[[233488,574623],[-724,-26]],[[232764,574597],[-2189,101]],[[230526,583184],[3019,-21]],[[233545,583163],[240,-2188],[403,729],[4,-3863],[-704,-3],[0,-3215]],[[209233,576371],[4,-4555]],[[209237,571816],[-1620,-3],[1,1621],[-362,4],[0,1612],[-601,2]],[[206421,583169],[2811,12]],[[175795,568571],[0,-4401]],[[175795,564170],[-503,1655],[-278,-929],[18,-2373]],[[175032,562523],[-508,-3],[3,1886],[-1500,-263]],[[173027,564143],[2,1271]],[[217559,573100],[127,-1619],[-2,-6492],[124,-2],[-3,-3238]],[[217805,561749],[-2509,-20]],[[215296,561729],[1,3269],[-141,0],[0,6485],[-143,10],[1,3259],[-726,-15]],[[156776,574866],[145,-2337],[-336,700],[191,1637]],[[156018,576189],[368,-1161],[-54,-1922],[-275,764],[-39,2319]],[[156711,577874],[437,-1002],[-571,-1183],[-175,1060],[309,1125]],[[239768,576252],[-26,-7172],[46,-6527]],[[239788,562553],[-1935,132],[-2,-978],[-1789,-11]],[[236062,561696],[-28,9709]],[[236034,571405],[-5,6210]],[[236029,577615],[339,174],[235,-1132],[1048,-348],[153,-2131],[908,561],[5,841],[719,948],[332,-276]],[[157403,572219],[-141,1501],[247,575],[362,-1247],[-15,3533]],[[162835,574463],[-341,252],[-585,-931],[-105,-3299],[196,-417]],[[162000,570068],[-3852,30]],[[158148,570098],[-745,2121]],[[212472,574738],[0,-3235],[160,6],[-1,-4641]],[[212631,566868],[-1040,215],[-261,-1783],[-494,-877],[-372,2569],[-383,-709],[-219,-2109],[-618,321]],[[209244,564495],[-7,7321]],[[219741,574707],[109,-3230],[1,-6504],[110,0],[-1,-3243]],[[219960,561730],[-1079,-3]],[[218881,561727],[-1076,22]],[[243362,568345],[29,-12216],[-17,-11281]],[[243374,544848],[-834,-2840],[-305,-2385]],[[242235,539623],[-249,57]],[[241986,539680],[-26,1879],[-2117,44]],[[239843,541603],[15,4838]],[[239858,546441],[-15,12916],[-55,3196]],[[239768,576252],[1003,-1644],[260,59],[-216,-1482],[572,-281],[382,-4206],[280,489],[20,1987],[577,82],[136,-1749],[580,-1162]],[[209244,564495],[-258,1115],[-593,-179],[-307,1362],[-1057,19],[-145,560],[-288,-1582],[-558,-1]],[[206038,565789],[-93,497],[-752,103],[-963,-1631]],[[165151,563828],[-358,-3363],[-516,-331],[-140,-2995],[-194,-1515],[49,-2367],[561,-1042],[-26,-1385]],[[164527,550830],[-822,-17],[-768,1528],[-383,1475],[-339,202],[-528,3048]],[[161687,557066],[130,2031],[-145,1372]],[[161672,560469],[136,875],[-308,1331],[76,2649],[386,643],[303,1650],[-265,2451]],[[215296,561729],[-1431,3],[-1,-1673]],[[213864,560059],[-714,1226]],[[213150,561285],[-16,1450],[265,1806],[-308,1452],[-460,875]],[[232764,574597],[24,-6811]],[[232788,567786],[-2527,21]],[[230261,567807],[-1798,-6]],[[228463,567801],[13,367]],[[228476,568168],[71,2441],[-130,4068]],[[221924,571472],[-985,7],[-4,-6507],[100,-3249]],[[221035,561723],[-716,0]],[[220319,561723],[-359,7]],[[223962,564053],[0,0]],[[225197,574689],[73,-6488]],[[225270,568201],[-362,-8],[-2,-3234],[-287,1],[0,-1975]],[[224619,562985],[-263,25],[-571,2718],[-293,-1216],[-752,3114],[0,3841]],[[228476,568168],[-2123,27]],[[226353,568195],[-1083,6]],[[236062,561696],[6,-7465]],[[236068,554231],[0,-615],[-707,-31]],[[235361,553585],[-1430,49]],[[233931,553634],[-29,8560],[-224,1564],[125,1180],[-985,11]],[[232818,564949],[-30,2837]],[[233488,574623],[363,-5],[3,-3239],[2180,26]],[[188725,567028],[1,-2703]],[[188726,564325],[-1602,-42],[-179,1901],[-362,820],[-2338,28]],[[158090,569229],[27,-389]],[[158117,568840],[-233,-1009],[277,-1641],[-369,861],[-55,2156],[353,22]],[[157569,571941],[242,-1775],[-417,-308],[-219,-1058],[350,-340],[186,-3597],[44,1501],[415,-1154],[-2,-2382],[-642,2318],[-19,2344],[-435,1258],[298,3297],[199,-104]],[[156635,565779],[-61,-3686],[-1563,-8],[-1,265],[-3066,-4]],[[151944,562346],[-337,5364],[262,4073],[685,-1863],[396,-423],[748,-1863],[763,57],[868,-995],[776,701],[530,-1618]],[[224619,562985],[0,-1281]],[[224619,561704],[-2150,10]],[[222469,561714],[-1434,9]],[[193937,559705],[-803,-422],[-50,-3212],[-1028,-2365]],[[192056,553706],[-1187,-7]],[[190869,553699],[-361,553],[1,1468],[-266,4],[-517,1364],[204,1867],[-1205,-7]],[[188725,558948],[1,5377]],[[161672,560469],[-3555,-37]],[[158117,560432],[249,3191],[302,1598],[-408,1180],[-143,2439]],[[158090,569229],[58,869]],[[179823,560649],[58,-3498],[649,4],[-91,-2233],[239,252],[-155,-1950],[417,-649],[44,-4053]],[[180984,548522],[-292,-237],[-171,1187],[-551,1163],[-685,298]],[[179285,550933],[-478,836],[-38,1569],[-836,1676],[-964,-135]],[[176969,554879],[-353,1336],[183,799],[-96,1863],[-283,1074],[-625,4219]],[[245498,568092],[24,-13481]],[[245522,554611],[-1265,-6316],[-883,-3447]],[[243362,568345],[243,-1594],[424,-163],[-24,-1207],[886,751],[607,1960]],[[226353,568195],[59,-3242],[-1,-6490]],[[226411,558463],[-285,2]],[[226126,558465],[-1436,0]],[[224690,558465],[-71,3239]],[[228463,567801],[349,-5611],[345,-3679]],[[229157,558511],[-1604,-50]],[[227553,558461],[-1142,2]],[[230261,567807],[50,-3920]],[[230311,563887],[2,-2161],[360,-5],[3,-1615],[1434,5],[0,1629],[356,7],[-1,1624]],[[232465,563371],[355,-34]],[[232820,563337],[78,-8073]],[[232898,555264],[-1430,-21]],[[231468,555243],[-2182,14]],[[229286,555257],[-129,3254]],[[232818,564949],[2,-1612]],[[232465,563371],[-1,531],[-2153,-15]],[[209244,564495],[-2,-11146]],[[209242,553349],[-241,-807],[-805,9]],[[208196,552551],[-259,2],[1,3249],[-225,-5],[0,1619],[-1072,7],[1,1622],[-715,4],[0,1622]],[[205927,560671],[111,1441],[0,3677]],[[167625,563859],[-339,-5],[-301,-1380],[-1,-1619],[-240,-1347],[-120,-2159],[-533,-1577],[-2,-1607],[-954,-85],[-359,-2172],[-6,-1862]],[[164770,550046],[-243,784]],[[213150,561285],[-1,-2790],[-1274,10],[2,-6436]],[[211877,552069],[-1581,12]],[[210296,552081],[-1055,15]],[[209241,552096],[1,1253]],[[156466,557234],[-1440,16],[0,-1664]],[[155026,555586],[-1512,9],[-856,299]],[[152658,555894],[-216,4014],[-498,2438]],[[156635,565779],[272,1293],[567,-4576],[-189,-395],[-250,-3034],[-106,2479],[-245,-3231],[-218,-1081]],[[188725,558948],[-718,-7],[0,-1612],[-713,3],[0,-1972],[-347,194]],[[186947,555554],[-644,-185],[-425,1863],[-410,507],[-656,-490],[-280,1680],[6,2406],[-203,2375]],[[205927,560671],[-357,-7],[-2,-4859],[-120,-3],[1,-6473]],[[205449,549329],[-1188,-10],[0,-1636],[-355,-3],[0,1641],[-353,-3]],[[203553,549318],[-233,0],[-1,3235],[-355,-6],[105,3251],[-1,6317],[-271,1],[-168,1657]],[[176969,554879],[-257,-1008],[473,-1408],[60,-942],[526,-680],[549,-2997],[263,-2458],[251,-686]],[[178834,544700],[-3821,28]],[[175013,544728],[0,1637]],[[175013,546365],[0,7286]],[[175013,553651],[19,8872]],[[182526,557117],[-825,-26],[-59,-2280],[224,-1574],[136,-3906],[-311,-808],[-707,-1]],[[173027,564143],[7,-11380]],[[173034,552763],[0,-1987]],[[173034,550776],[-2181,21]],[[170853,550797],[8,10515]],[[233931,553634],[40,-4845]],[[233971,548789],[-1065,-20]],[[232906,548769],[-8,6495]],[[175013,553651],[-714,16],[-121,-799],[-1144,-105]],[[203553,549318],[1,-5970]],[[203554,543348],[0,-266]],[[203554,543082],[-1766,-14],[-2,268],[-3263,-151]],[[198523,543185],[-142,488],[173,2154],[-209,2560],[-11,4245],[143,1707]],[[167650,563516],[-17,-12699]],[[167633,550817],[-9,-6519],[-1075,22],[-3,-3262]],[[166546,541058],[-233,-1080]],[[166313,539978],[-187,856],[-295,-1494],[-690,-305]],[[165141,539035],[-276,2021]],[[164865,541056],[127,1141],[-311,5065],[89,2784]],[[170853,550797],[-380,1]],[[170473,550798],[-2840,19]],[[186947,555554],[7,-6012],[711,-1191],[-2,-4004],[368,-11]],[[188031,544336],[35,-1329],[411,-1480]],[[188477,541527],[-392,-449],[14,-3150],[-430,-3]],[[187669,537925],[-672,2],[-784,-2757]],[[186213,535170],[46,3441],[-325,1748],[-347,-22],[-1,2529],[-723,-49],[-4,6432],[-731,40],[-1,5728],[-238,2035]],[[157723,558953],[153,-2103],[-264,244],[111,1859]],[[157679,553460],[-209,2]],[[157470,553462],[-20,-1]],[[157450,553461],[-465,10]],[[156985,553471],[3,2162],[-620,2]],[[156368,555635],[296,1874],[456,872],[192,2438],[440,2118],[103,-3143],[-199,148],[-132,-3407],[313,-1094],[-158,-1981]],[[239858,546441],[-2004,75]],[[237854,546516],[-5,4597],[-695,1379],[-255,2407],[-570,-1212],[-261,544]],[[218881,561727],[0,-3232],[-241,5],[-5,-6449]],[[218635,552051],[-211,-1],[0,-3173],[-602,-11]],[[217822,548866],[-251,2540],[-562,-513]],[[217009,550893],[-256,567],[-257,3108],[37,1844],[-852,-555],[-223,-664],[-1091,1452]],[[214367,556645],[-155,784],[-3,3079],[-345,-449]],[[224690,558465],[0,-1585]],[[224690,556880],[-2133,9]],[[222557,556889],[-88,4825]],[[222557,556889],[-1,-4848]],[[222556,552041],[-598,-4]],[[221958,552037],[-1539,4]],[[220419,552041],[1,6449],[-101,3233]],[[220419,552041],[-222,0]],[[220197,552041],[-1562,10]],[[214367,556645],[0,-4588],[170,0],[-1,-5915]],[[214536,546142],[-1061,-2],[0,-539],[-1412,-13]],[[212063,545588],[-1,6481],[-185,0]],[[197352,556811],[-7,-4999],[-769,-161],[-357,-670],[-49,-3204],[357,-6],[-62,-6487]],[[196465,541284],[-1055,22]],[[195410,541306],[-1057,8],[-1,-1068]],[[194352,540246],[-993,3]],[[193359,540249],[-235,2015],[208,1753],[-4,5387],[-1034,1609],[0,1620],[-238,1073]],[[208196,552551],[219,-2029],[101,-3785],[-297,-2572],[-534,-806]],[[207685,543359],[-1181,12],[-117,1073],[-355,1],[1,1079],[-357,1],[0,3802],[-227,2]],[[157999,553531],[-252,-1157],[151,3089],[101,-1932]],[[161687,557066],[-282,-523],[-596,-2846],[-98,-1164],[461,-3838],[-226,-1130]],[[160946,547565],[-1160,1607],[-393,-641],[-440,1038],[-133,1180],[-534,2],[-231,1165]],[[158055,551916],[258,528],[-269,4233],[225,530],[-269,1061],[117,2164]],[[190869,553699],[1,-1066],[-357,2],[-14,-4901],[354,-2],[-21,-5066]],[[190832,542666],[-725,2921],[-441,463],[-27,1540],[-216,-1427],[-1062,-215],[1,-1610],[-331,-2]],[[227553,558461],[-3,-6470],[62,-1591]],[[227612,550400],[-709,17]],[[226903,550417],[-711,10]],[[226192,550427],[-71,1593],[5,6445]],[[226192,550427],[-1411,-1]],[[224781,550426],[-88,1602]],[[224693,552028],[-3,4852]],[[229286,555257],[52,-4884]],[[229338,550373],[-1726,27]],[[156466,557234],[-98,-1599]],[[156985,553471],[-2,-836]],[[156983,552635],[-348,-1456],[-55,-1446],[-357,-1953]],[[156223,547780],[-354,-250]],[[155869,547530],[-800,-41],[-43,8097]],[[182993,557119],[1,-7838],[455,9],[-1,-6466]],[[183448,542824],[-493,-547],[1,-1076],[-524,-538],[1,-1073],[-447,49]],[[181986,539639],[-1407,-5]],[[180579,539634],[-732,-499]],[[179847,539135],[-221,1916]],[[179626,541051],[351,195],[-48,4029],[320,549],[-90,1379],[-636,2137],[-238,1593]],[[186213,535170],[-690,-2887]],[[185523,532283],[-1333,17]],[[184190,532300],[-6,8737],[-214,-420],[-522,2207]],[[198523,543185],[180,-1781]],[[198703,541404],[-2238,-120]],[[164865,541056],[-1495,18],[1,1609],[-349,24],[-1,1604],[-1091,-12],[-177,1484],[-533,1821],[-274,-39]],[[224693,552028],[-2137,13]],[[217009,550893],[-2,-451],[-1411,-2],[0,-4839]],[[215596,545601],[-927,-4]],[[214669,545597],[-133,545]],[[155869,547530],[121,-1651],[-6,-3776]],[[155984,542103],[-586,-24]],[[155398,542079],[-2026,38]],[[153372,542117],[-109,2053],[252,-202],[623,1195],[-914,1191],[-230,4847],[-241,1362],[-95,3331]],[[232906,548769],[-1437,4]],[[231469,548773],[-1,6470]],[[231469,548773],[-356,-11]],[[231113,548762],[-1799,-4]],[[229314,548758],[24,1615]],[[179626,541051],[-762,2278],[-30,1371]],[[237854,546516],[-2,-4236]],[[237852,542280],[-1578,49],[42,-9604],[-40,-223]],[[236276,532502],[-231,1007],[-307,-539],[-331,854]],[[235407,533824],[-217,373]],[[235190,534197],[-133,485],[-22,7620]],[[235035,542302],[354,-11],[-28,11294]],[[310206,521389],[-674,-758]],[[309532,520631],[-1071,-1126],[-11,14937],[-1066,257]],[[307384,534699],[-8,3291],[-2505,26]],[[304871,538016],[-841,2]],[[304030,538018],[72,2263],[2153,14229],[505,-617],[6,-3382],[393,-1252],[815,1288],[76,747],[564,5],[41,1253],[358,12],[783,-2953],[455,-2410],[25,-20921],[-70,-4891]],[[193359,540249],[-620,1062],[-850,-749]],[[191889,540562],[-514,-597],[-543,2701]],[[175013,546365],[-1409,188],[-569,1764]],[[173035,548317],[-1,2459]],[[235035,542302],[-1047,14]],[[233988,542316],[-17,6473]],[[160946,547565],[-214,-3054],[-186,-928],[190,-1670]],[[160736,541913],[-846,11],[-206,-1039],[-1032,653]],[[158652,541538],[-352,1507],[-447,420],[-411,2054],[-166,2243]],[[157276,547762],[314,1630],[142,2452],[323,72]],[[157679,553460],[-93,-2779],[-243,609],[127,2172]],[[157450,553461],[-258,-1218],[-95,-3180],[-195,1415],[81,2157]],[[209241,552096],[0,-12822]],[[209241,539274],[-860,0],[-178,809],[-527,0]],[[207676,540083],[9,3276]],[[212063,545588],[-553,-13],[-2,-6517]],[[211508,539058],[-1052,-1]],[[210456,539057],[-1,6518],[-160,-2],[1,6508]],[[210456,539057],[-534,-4],[0,-1653],[-681,3]],[[209241,537403],[0,1871]],[[221958,552037],[-1,-6447],[97,4],[-9,-6501]],[[222045,539093],[-1299,23]],[[220746,539116],[-461,8]],[[220285,539124],[17,6480],[-110,4],[5,6433]],[[224781,550426],[0,-4857],[78,2],[1,-6489]],[[224860,539082],[-1665,-10]],[[223195,539072],[-1150,21]],[[220285,539124],[-1617,18]],[[218668,539142],[-334,973],[-96,2185],[-334,3330]],[[217904,545630],[153,619],[-235,2617]],[[217904,545630],[-2308,-29]],[[170473,550798],[4,-6433],[-150,-2316],[-550,-960]],[[169777,541089],[-3231,-31]],[[173035,548317],[0,-10900]],[[173035,537417],[-1,-2156]],[[173034,535261],[-434,-110],[-90,788]],[[172510,535939],[-70,1545],[-616,2886],[-768,-191],[-281,-1215]],[[170775,538964],[-894,-1263],[-120,595]],[[169761,538296],[16,2793]],[[226903,550417],[68,-4868],[-1,-6487]],[[226970,539062],[-981,13]],[[225989,539075],[-1129,7]],[[229314,548758],[6,-2652],[212,-1371],[-110,-2548],[11,-3117]],[[229433,539070],[-1343,-23]],[[228090,539047],[-1120,15]],[[158652,541538],[-2669,24],[1,541]],[[156223,547780],[371,1366],[-165,-1817],[270,11],[248,1910],[329,-1488]],[[207676,540083],[-351,-1344]],[[207325,538739],[-350,-4],[-351,-1338],[-710,7],[-584,557],[-128,1621],[-225,-2],[-117,3243],[-599,530],[-707,-5]],[[233988,542316],[-2,-1623]],[[233986,540693],[-2817,4]],[[231169,540697],[-56,8065]],[[231169,540697],[7,-1623],[-303,3]],[[230873,539077],[-1399,-8]],[[229474,539069],[-41,1]],[[175013,544728],[1,-5708],[-353,22]],[[174661,539042],[-461,-3],[-274,-1604],[-891,-18]],[[165141,539035],[21,-10945]],[[165162,528090],[-2024,0],[-2594,63]],[[160544,528153],[1,6416]],[[160545,534569],[358,11],[-157,2684],[251,3313],[-261,1336]],[[191889,540562],[-24,-9124]],[[191865,531438],[0,-676]],[[191865,530762],[-1399,153]],[[190466,530915],[-776,9]],[[189690,530924],[-179,1515],[195,2306],[-474,569],[-329,2182],[-426,4031]],[[239843,541603],[18,-6465]],[[239861,535138],[3,-4862]],[[239864,530276],[-1053,-77]],[[238811,530199],[4,1716],[-1019,-55]],[[237796,531860],[-43,6341],[94,109],[5,3970]],[[251183,535146],[2,-1610]],[[251185,533536],[-1045,-5],[1,3215],[-1046,-7],[1,1617],[-346,12],[-67,3222]],[[248683,541590],[281,994],[1035,453],[493,1189],[335,1615],[517,690]],[[251344,546531],[2,-4942],[190,-1609],[-348,14],[-5,-4848]],[[214669,545597],[2,-4901]],[[214671,540696],[-1,-1616]],[[214670,539080],[-2316,-18]],[[212354,539062],[-846,-4]],[[218668,539142],[261,-751],[-62,-3093]],[[218867,535298],[-369,-883],[-548,257],[-360,-2040]],[[217590,532632],[0,1615],[-698,1],[0,4816],[-1166,16],[-1,1620],[-1054,-4]],[[253820,544308],[0,-2727],[148,-1606],[-346,-13],[-2,-4818]],[[253620,535144],[-1568,10]],[[252052,535154],[1,8036],[354,0],[-1,1615],[281,8]],[[252687,544813],[-46,-3488],[634,3347],[545,-364]],[[179847,539135],[-2884,-2989],[-518,-3856],[-988,1959]],[[175457,534249],[-555,1774]],[[174902,536023],[-221,561],[-20,2458]],[[207325,538739],[0,-2429],[-482,-1],[56,-6431]],[[206899,529878],[-149,-3],[0,-6509],[-119,1]],[[206631,523367],[-3371,30]],[[203260,523397],[2,6486],[106,4],[-6,6446],[97,2],[-1,6474],[96,273]],[[203260,523397],[-118,-5],[-3,-8127],[-123,-28],[0,-3172]],[[203016,512065],[-1361,-4],[-1,3224],[108,-22],[0,5982],[-511,206],[100,2748],[-172,715]],[[201179,524914],[0,4963],[-191,-48],[-58,4865],[-348,2],[-60,1616],[-1571,-11]],[[198951,536301],[-119,265]],[[198832,536566],[-129,4838]],[[184190,532300],[-1,-814],[-687,-6],[16,-3298],[-667,-1968]],[[182851,526214],[-255,180],[-219,1599],[-324,48],[141,1392],[-197,1673],[207,1275],[-352,4420],[134,2838]],[[235190,534197],[-1182,4]],[[234008,534201],[-22,6492]],[[237796,531860],[-40,-1612]],[[237756,530248],[-1572,9],[92,2245]],[[155398,542079],[35,-7597]],[[155433,534482],[-1024,26],[-6,-1764]],[[154403,532744],[-413,-941],[-401,1402],[-173,-854],[164,5827],[40,-3886],[155,66],[162,3197],[-178,1201],[335,1945],[-444,-237],[-278,1653]],[[160545,534569],[-1999,-62]],[[158546,534507],[-2721,-5]],[[155825,534502],[-392,-20]],[[189690,530924],[-791,-90],[-193,-3456],[-681,-3145]],[[188025,524233],[-1,4020],[-345,10],[-10,9662]],[[241986,539680],[-2,-4580]],[[241984,535100],[-2123,38]],[[251185,533536],[-1,-4392]],[[251184,529144],[-281,766],[-2333,3002],[1,-217]],[[248571,532695],[-534,909],[-308,3219],[-519,1035]],[[247210,537858],[1092,2058],[381,1674]],[[198832,536566],[-2,-1875],[-408,1],[-281,-2448],[-812,5],[-234,-521],[0,-1925],[-1045,-3]],[[196050,529800],[2,2684],[-229,1641],[-121,3955],[-233,24],[-59,3202]],[[261640,541399],[0,-9498]],[[261640,531901],[-1747,-14]],[[259893,531887],[0,4842]],[[259893,536729],[1,3447]],[[259894,540176],[1066,-173],[680,1396]],[[196050,529800],[-402,-6]],[[195648,529794],[-1369,1],[-5,-1634]],[[194274,528161],[-523,16],[-137,3240]],[[193614,531417],[700,2],[38,8827]],[[193614,531417],[-1749,21]],[[169761,538296],[-37,88]],[[169724,538384],[-623,62],[-454,-1720],[-56,-1736],[-390,-2246],[-741,-1821]],[[167460,530923],[-633,1584],[-9,4567],[-505,2904]],[[167460,530923],[206,-1170],[-54,-2423]],[[167612,527330],[-388,-1247],[-851,-272]],[[166373,525811],[-390,134],[-274,-1277],[-552,-389]],[[165157,524279],[5,3811]],[[234008,534201],[28,-4881]],[[234036,529320],[-1739,14]],[[232297,529334],[-1380,21]],[[230917,529355],[-44,9722]],[[217590,532632],[-397,-2552],[-436,-1343],[-920,-1191],[-478,1151],[-416,-370]],[[214943,528327],[2,2829]],[[214945,531156],[-136,1457],[-12,6465],[-127,2]],[[172510,535939],[1,-949],[-532,-522],[0,-4866],[-168,2],[-1,-2311]],[[171810,527293],[-342,19]],[[171468,527312],[-25,6322],[-176,-16],[-173,2490],[-351,-8],[32,2864]],[[209241,537403],[-1,-4854]],[[209240,532549],[1,-6235]],[[209241,526314],[3,-1180]],[[209244,525134],[-252,2],[0,1618],[-714,26],[2,1575],[-351,-6],[1,1522],[-1031,7]],[[180579,539634],[-28,-2628],[-263,-4539],[-67,-3326],[-131,-1223],[266,-995],[6,-2349],[-249,-34],[-187,-1419],[188,-1950],[-181,-2072]],[[179933,519099],[-282,-1616],[-344,766],[-14,-1410],[527,-2617],[-250,-1838]],[[179570,512384],[-3571,-27],[-470,-1640]],[[175529,510717],[-390,423],[-163,2564],[-956,-4]],[[174020,513700],[363,4438],[258,2020],[-237,2562],[-686,1930]],[[173718,524650],[258,2609]],[[173976,527259],[447,45],[75,2435],[241,1363],[664,-892],[157,1127],[336,203],[-439,2709]],[[182851,526214],[3,-24]],[[182854,526190],[-34,-1070],[-471,-700],[-670,-2752]],[[181679,521668],[-944,-3979],[-194,-400],[-349,1947],[-259,-137]],[[220746,539116],[-2,-6512],[106,-6]],[[220850,532598],[-4,-6356]],[[220846,526242],[-1761,43]],[[219085,526285],[-327,3734],[198,1955],[-89,3324]],[[223195,539072],[-2,-6466]],[[223193,532606],[-2343,-8]],[[174902,536023],[1,-2306],[-958,-326],[31,-6132]],[[173718,524650],[-339,2599]],[[173379,527249],[-121,1925],[103,1310],[-372,3279],[45,1498]],[[212354,539062],[9,-6488]],[[212363,532574],[-197,-15]],[[212166,532559],[-2926,-10]],[[225989,539075],[-2,-6477]],[[225987,532598],[-2698,1]],[[223289,532599],[-96,7]],[[214945,531156],[-1392,13],[0,1436],[-1190,-31]],[[230917,529355],[-1,-1621]],[[230916,527734],[-866,4]],[[230050,527738],[45,1765],[-114,3994],[-380,2927],[-127,2645]],[[228090,539047],[-2,-6457]],[[228088,532590],[-2023,4]],[[226065,532594],[-78,4]],[[230050,527738],[35,-1611]],[[230085,526127],[-1851,-1]],[[228234,526126],[-88,1154],[-58,5310]],[[171468,527312],[-1044,34]],[[170424,527346],[-53,1]],[[170371,527347],[15,3855],[-349,1],[1,1630],[-349,-7],[35,5558]],[[170371,527347],[-2759,-17]],[[248571,532695],[0,-5698],[-321,-1]],[[248250,526996],[-719,-11]],[[247531,526985],[-3,3230],[-343,-15],[1,1609],[-352,7],[6,6374]],[[246840,538190],[370,-332]],[[304871,538016],[-24,-11134],[233,-2084],[-240,-2015],[-258,-234],[344,-2135],[-221,-1593],[445,-9902],[739,1165]],[[305889,510084],[248,-6544]],[[306137,503540],[-330,591],[-241,-1132]],[[305566,502999],[-450,139],[79,-2294],[-907,626]],[[304288,501470],[-183,1243],[-102,3478],[-276,-236],[62,1778],[-139,3374],[-376,-344],[-347,651],[-372,9721]],[[302555,521135],[466,1247],[-87,1101],[431,1781],[-152,2424],[219,2372],[-153,837],[286,2948],[372,1242],[93,2931]],[[307384,534699],[-16,-13241],[-374,-414],[-14,-2791],[297,275],[227,-5338],[-292,-285],[68,-1530],[-1391,-1291]],[[188025,524233],[-403,-667]],[[187622,523566],[-350,1101],[-489,-286],[-234,-1731]],[[186549,522650],[-588,1548],[-293,6521],[-197,-56]],[[185471,530663],[52,1620]],[[259893,531887],[-1,-5145]],[[259892,526742],[-133,-900],[-413,823],[-697,-828],[-157,-2486],[-258,-539]],[[258234,522812],[-83,2590],[0,4874],[-349,11]],[[257802,530287],[0,3250],[698,-25],[0,3238],[1393,-21]],[[198951,536301],[351,-3235],[408,-2428],[-126,-2500]],[[199584,528138],[-454,7],[0,-1079],[-345,0],[-232,-1614],[-462,6],[-62,-7075],[-689,-1094],[-914,67]],[[196426,517356],[-551,2735]],[[195875,520091],[-174,1330],[10,5160],[-63,3213]],[[201179,524914],[-661,1614],[-693,2],[0,1610],[-241,-2]],[[173379,527249],[-1569,44]],[[219085,526285],[-4142,17]],[[214943,526302],[0,2025]],[[253620,535144],[-3,-3220]],[[253617,531924],[2,-6051]],[[253619,525873],[-836,1000],[-325,853],[-417,-133]],[[252041,527593],[-695,1110]],[[251346,528703],[-162,441]],[[251183,535146],[869,8]],[[241984,535100],[-2,-4839]],[[241982,530261],[-158,-2624],[-996,-2261],[-371,-3070]],[[240457,522306],[-838,12]],[[239619,522318],[-4,4660],[246,5],[3,3293]],[[309532,520631],[304,-6937],[-325,-226]],[[309511,513468],[-690,-627],[93,-2259],[-353,-313],[61,-1593],[-355,-303],[157,-4051],[-1023,-1482]],[[307401,502840],[-7,-12]],[[307394,502828],[-61,340],[-964,-1079],[-232,1451]],[[160544,528153],[-247,-4],[10,-4864],[241,-1078]],[[160548,522207],[-795,-346],[-319,-1061]],[[159434,520800],[-910,-1887]],[[158524,518913],[9,9424]],[[158533,528337],[13,6170]],[[158533,528337],[-318,-1795],[-454,495],[-601,-1309],[-131,-1178]],[[157029,524550],[-330,4340],[-600,1895],[-259,-235]],[[155840,530550],[-2,54]],[[155838,530604],[-13,3898]],[[155838,530604],[-183,-462],[-495,2189],[-757,413]],[[235407,533824],[27,-10700]],[[235434,523124],[-1381,-10]],[[234053,523114],[-17,6206]],[[237756,530248],[0,-3231],[116,-9],[14,-2987]],[[237886,524021],[-1641,-2],[226,-871]],[[236471,523148],[-1037,-24]],[[251026,525384],[-2773,34]],[[248253,525418],[-3,1578]],[[251346,528703],[-2,-1704],[-318,2],[0,-1617]],[[155418,529962],[8,-6731]],[[155426,523231],[-1689,63]],[[153737,523294],[-68,3037],[184,1181],[-261,4092],[308,-881],[393,424],[493,-351],[259,901],[373,-1735]],[[214943,526302],[-5,-2]],[[214938,526300],[-2623,9]],[[212315,526309],[-150,2]],[[212165,526311],[1,6248]],[[228234,526126],[-2091,12]],[[226143,526138],[-82,1]],[[226061,526139],[4,6455]],[[223289,532599],[-7,-6388]],[[223282,526211],[-1985,21]],[[221297,526232],[-451,10]],[[226061,526139],[-1995,51]],[[224066,526190],[-784,21]],[[212165,526311],[-2924,3]],[[185471,530663],[-559,-802],[1,-1628],[-449,-1027],[40,-1092],[-450,-1375]],[[184054,524739],[-389,162],[-477,-1895],[-334,3184]],[[255011,527072],[0,-1623],[-222,0],[-1,-3274],[-416,-8]],[[254372,522167],[-588,1081]],[[253784,523248],[-213,795],[48,1830]],[[253617,531924],[1399,-8],[-5,-4844]],[[238811,530199],[-2,-3213],[-238,7],[12,-4605]],[[238583,522388],[8,-3269]],[[238591,519119],[-693,16]],[[237898,519135],[-12,4886]],[[194274,528161],[-17,-1569],[-232,-20],[-118,-1642],[-36,-4874],[-1029,-1611],[-3,-3240],[-365,3],[-1,-3288]],[[192473,511920],[-459,14],[21,11394],[-200,2],[30,7432]],[[190466,530915],[-30,-11210],[-346,-1209],[4,-3243],[-336,0],[-17,-6512]],[[189741,508741],[-31,-6238]],[[189710,502503],[18,-3578]],[[189728,498925],[-493,1904],[19,851],[-442,2414]],[[188812,504094],[13,11149],[64,-1],[-3,5424],[-517,4],[-342,1882],[-405,1014]],[[192473,511920],[740,-88]],[[193213,511832],[-2,-3076]],[[193211,508756],[-2525,-183],[-945,168]],[[186549,522650],[-756,-105],[-628,-2189]],[[185165,520356],[-202,2287],[-909,2096]],[[157029,524550],[64,-2277]],[[157093,522273],[-464,-110]],[[156629,522163],[-284,1059],[-919,9]],[[155418,529962],[422,588]],[[239619,522318],[-1036,70]],[[242662,530269],[51,-9640]],[[242713,520629],[-344,-3]],[[242369,520626],[1,1598],[-1042,58],[-2,-1612],[-997,38]],[[240329,520708],[128,1598]],[[241982,530261],[680,8]],[[245796,530213],[-1,-3233],[691,9]],[[246486,526989],[-5,-6391]],[[246481,520598],[-2400,-12]],[[244081,520586],[-31,9670]],[[244050,530256],[1746,-43]],[[244081,520586],[-1368,43]],[[242662,530269],[1388,-13]],[[209244,525134],[12,-12455]],[[209256,512679],[-50,-4012]],[[209206,508667],[-2732,55]],[[206474,508722],[1,6548],[142,-1],[14,8098]],[[195875,520091],[-795,-463],[-177,-2269],[-459,3],[-573,-1889],[-130,-1894],[-228,1],[-2,-1751],[-298,3]],[[232297,529334],[32,-6470]],[[232329,522864],[-1381,-3]],[[230948,522861],[-32,4873]],[[234053,523114],[0,-270]],[[234053,522844],[-1724,20]],[[252041,527593],[20,-5420],[699,-8]],[[252760,522165],[-8,-6431]],[[252752,515734],[-696,32]],[[252056,515766],[-691,-1],[8,1610],[-344,-7]],[[251029,517368],[-3,8016]],[[158524,518913],[-1068,1088],[-329,768],[-34,1504]],[[165157,524279],[-366,-437]],[[164791,523842],[-599,-1643],[-746,-545],[-477,787]],[[162969,522441],[-731,-1785]],[[162238,520656],[-782,-457],[-46,928],[-635,569]],[[160775,521696],[-227,511]],[[203016,512065],[45,-3465]],[[203061,508600],[-4592,140]],[[198469,508740],[-941,-34]],[[197528,508706],[338,4067],[-1592,0],[48,4005],[104,578]],[[230948,522861],[3,-3246]],[[230951,519615],[-1623,13]],[[229328,519628],[-7,1157],[513,1813],[251,3529]],[[253784,523248],[-5,-1257],[-1019,174]],[[170424,527346],[13,-2609]],[[170437,524737],[-401,-3204],[0,-4053],[-226,-812],[-642,33],[1,-1373],[-751,-187],[117,-2760],[304,1],[77,-3742]],[[168916,508640],[-1797,-1]],[[167119,508639],[49,1621],[3,8063],[-287,1],[0,1597],[-519,16],[8,5874]],[[174020,513700],[-270,-3513]],[[173750,510187],[-1345,33]],[[172405,510220],[-1,1583],[-585,-10],[-295,3221],[-170,-21],[-112,3313],[-288,3247],[112,3192],[-629,-8]],[[255706,527059],[117,-1614],[-5,-6481],[175,-7]],[[255993,518957],[-480,-4770],[-502,-3587]],[[255011,510600],[-348,1798],[263,2652],[-666,243],[263,2751],[-117,1109],[148,2102],[-182,912]],[[255011,527072],[695,-13]],[[248253,525418],[-2,-6368]],[[248251,519050],[4,-3225]],[[248255,515825],[-1774,-76]],[[246481,515749],[0,4849]],[[246486,526989],[1045,-4]],[[214938,526300],[2,-8789]],[[214940,517511],[-1,-8089]],[[214939,509422],[-2667,29]],[[212272,509451],[0,3227]],[[212272,512678],[43,13631]],[[219085,526285],[420,-1613],[146,-2779],[-338,-2104]],[[219313,519789],[-136,-1298],[382,-971]],[[219559,517520],[-3144,-9]],[[216415,517511],[-1475,0]],[[212272,512678],[-3016,1]],[[221297,526232],[2,-6469]],[[221299,519763],[-1986,26]],[[185165,520356],[-3,-2744],[506,-651],[135,-1730],[3,-4866],[343,-1],[-2,-1637],[399,-13],[67,-3224],[282,-800],[791,-49],[1,-1346],[860,8]],[[188547,503303],[-98,-3225],[-306,273]],[[188143,500351],[-567,-771],[-129,1023],[-637,-764],[-533,835],[-280,-2222],[-237,583],[-858,91],[-96,-2022]],[[184806,497104],[-526,1386],[-10,1397],[-347,4611],[-317,914],[-262,-705],[-322,1502],[12,3599],[-287,1010],[-383,2793],[-233,2701],[-86,3614],[-272,360],[-94,1382]],[[224066,526190],[-2,-6467]],[[224064,519723],[-2738,40]],[[221326,519763],[-27,0]],[[226143,526138],[-2,-6467]],[[226141,519671],[-6,-6480]],[[226135,513191],[-2051,62]],[[224084,513253],[-13,1]],[[224071,513254],[-7,6469]],[[229328,519628],[389,-3087],[628,-1746]],[[230345,514795],[-1456,6],[-40,-559],[-610,15]],[[228239,514257],[-2,4850]],[[228237,519107],[-3,7019]],[[228237,519107],[-408,549],[-1688,15]],[[167119,508639],[-1415,-27]],[[165704,508612],[-332,4],[2,1361]],[[165374,509977],[84,1859],[-342,38],[2,1607],[-347,28],[20,10333]],[[251029,517368],[-1054,47]],[[249975,517415],[-10,1640],[-1714,-5]],[[172405,510220],[-826,-23],[-2,-1616],[-596,-11],[-301,1240],[-304,-1199],[-378,943],[-318,-1615]],[[169680,507939],[-764,701]],[[188812,504094],[-265,-791]],[[237898,519135],[-1086,-11]],[[236812,519124],[-341,4024]],[[165374,509977],[-1964,15]],[[163410,509992],[-23,268]],[[163387,510260],[-111,2406],[144,4765],[366,767],[-140,1600],[-677,2643]],[[206474,508722],[-142,2]],[[206332,508724],[-2606,-128]],[[203726,508596],[-665,4]],[[264518,520374],[-131,-4],[15,-7955]],[[264402,512415],[-335,1]],[[264067,512416],[-1024,59]],[[263043,512475],[5,1628]],[[263048,514103],[0,9278]],[[263048,523381],[752,-2509],[718,-498]],[[155426,523231],[0,-1322],[-345,8],[171,-1358],[345,-537],[-450,-2154],[-11,-1076]],[[155136,516792],[5,-4050],[-895,-4],[-1,-2602],[169,-4]],[[154414,510132],[-4,-597]],[[154410,509535],[-766,17]],[[153644,509552],[191,6726],[-98,7016]],[[156629,522163],[0,-1647],[515,-2132],[2,-1597]],[[157146,516787],[-2,-1893],[-345,-270]],[[156799,514624],[-745,2158],[-918,10]],[[236812,519124],[284,-2536]],[[237096,516588],[-222,-1934],[-373,-651]],[[236501,514003],[-342,795],[-1058,-11]],[[235101,514787],[1,1614],[-1027,-8]],[[234075,516393],[-22,6451]],[[232329,522864],[30,-6471]],[[232359,516393],[-1029,-8]],[[231330,516385],[-347,13],[-32,3217]],[[234075,516393],[-344,3]],[[233731,516396],[-1372,-3]],[[163387,510260],[-630,17],[17,875],[-376,1202],[-462,444],[26,1607],[414,1539],[112,2268],[-250,2444]],[[239619,522318],[0,-3212],[334,-17],[7,-2705]],[[239960,516384],[-1367,54]],[[238593,516438],[-2,2681]],[[240329,520708],[8,-1269],[308,-145],[354,-2359],[-276,-2708]],[[240723,514227],[-762,15]],[[239961,514242],[-1,2142]],[[242369,520626],[-5,-8010]],[[242364,512616],[-1676,1]],[[240688,512617],[35,1610]],[[159434,520800],[0,-1906],[284,-1586]],[[159718,517308],[-2287,-7],[-285,-514]],[[160775,521696],[1,-3313],[-117,6],[3,-4865],[-600,-5]],[[160062,513519],[3,2150],[-347,1639]],[[163410,509992],[120,-3800],[224,-797]],[[163754,505395],[-3866,75]],[[159888,505470],[69,1165]],[[159957,506635],[-195,2311],[405,1008],[-240,2616],[135,949]],[[184806,497104],[3,-2717],[-506,66]],[[184303,494453],[-906,-18]],[[183397,494435],[-56,1597],[-348,2544],[-106,-613],[-845,1224],[-633,3399],[-141,1577],[-365,-188],[52,2182],[-181,-234],[-402,-2430],[55,-904],[-491,-1772],[-716,3193],[20,1138]],[[179240,505148],[217,1309],[9,5102],[104,825]],[[309697,499440],[-326,8144],[343,308],[-203,5576]],[[310206,521389],[551,-1389],[510,-516],[-213,-1646],[200,-1811],[-163,-2048],[408,-2916],[145,1141],[349,-534],[352,-3817],[161,-2744],[-592,-2997],[-880,-140],[-164,-1985],[-252,636],[-149,-1354],[-202,2089],[-181,-786],[-141,-3116],[-248,1984]],[[304288,501470],[-305,-405],[-9,-1933],[-241,39]],[[303733,499171],[-304,-528]],[[303429,498643],[-117,2061],[-640,1070],[-291,3136],[-430,-1180],[-152,5250],[122,81],[-151,4819]],[[301770,513880],[26,2282],[518,-340],[-235,2392],[476,2921]],[[266792,512571],[-1372,-94]],[[265420,512477],[-1018,-62]],[[264518,520374],[261,-2226],[563,-388],[377,-1459],[555,-1119],[218,171],[319,-1624],[-19,-1158]],[[244081,520586],[-3,-6434]],[[244078,514152],[-2,-1591],[-344,26]],[[243732,512587],[-1368,29]],[[246481,515749],[-686,31],[0,-1629]],[[245795,514151],[-1717,1]],[[197528,508706],[-1036,15]],[[196492,508721],[-3281,35]],[[221326,519763],[-4,-6470]],[[221322,513293],[-1536,18]],[[219786,513311],[-157,1348],[119,1153],[-189,1708]],[[224071,513254],[-2371,30]],[[221700,513284],[-378,9]],[[228239,514257],[0,-2714]],[[228239,511543],[-746,-4]],[[227493,511539],[-1359,31]],[[226134,511570],[1,1621]],[[231330,516385],[37,-4380]],[[231367,512005],[-502,1311],[-471,406]],[[230394,513722],[-49,1073]],[[238593,516438],[-6,-3148]],[[238587,513290],[-26,17]],[[238561,513307],[-163,844],[-522,100],[-780,2337]],[[249975,517415],[-3,-6481]],[[249972,510934],[-1721,19]],[[248251,510953],[4,4872]],[[219786,513311],[-178,-2703],[123,-1549],[-311,141],[-36,-2389]],[[219384,506811],[-387,-2543],[-370,1156],[-115,-973]],[[218512,504451],[-583,56],[-208,-833],[-377,334]],[[217344,504008],[2,4597],[-1015,-5],[84,8911]],[[217344,504008],[-269,-1031],[-620,-1015],[-211,-1237],[-503,175],[-264,-1034],[-539,-243]],[[214938,499623],[1,9799]],[[252056,515766],[-6,-3234],[108,-1632]],[[252158,510900],[-950,13],[2,-1662]],[[251210,509251],[-675,9]],[[250535,509260],[-1,1663],[-562,11]],[[159957,506635],[-1845,-55],[-388,968],[-168,1539],[-534,2059],[129,2389],[-301,15]],[[156850,513550],[-51,1074]],[[156850,513550],[-529,-701],[118,-1993],[-202,-742]],[[156237,510114],[-1823,18]],[[238561,513307],[-382,-977],[-277,-2080],[-23,-1945]],[[237879,508305],[-685,14]],[[237194,508319],[-679,14]],[[236515,508333],[-14,5670]],[[239961,514242],[-4,-3220]],[[239957,511022],[-577,12],[2,-1654]],[[239382,509380],[-216,1966],[-579,1944]],[[235101,514787],[15,-8081]],[[235116,506706],[-1366,-14]],[[233750,506692],[5,4861]],[[233755,511553],[-24,4843]],[[233755,511553],[-2201,-4]],[[231554,511549],[-187,456]],[[248251,510953],[-430,7],[1,-1618],[-327,3]],[[247495,509345],[-1695,-50]],[[245800,509295],[-5,4856]],[[252752,515734],[340,-45],[-9,-3220],[342,-69],[182,-3245],[999,-1069]],[[254606,508086],[-385,-2583],[-242,-2789]],[[253979,502714],[-8,-1]],[[253971,502713],[-10,-1]],[[253961,502712],[-693,39]],[[253268,502751],[-16,3220],[-670,52]],[[252582,506023],[15,4858],[-439,19]],[[303429,498643],[-266,-4622],[-406,-3326]],[[302757,490695],[-370,576],[-32,2012],[-647,-2107],[393,-1789],[-189,-2754]],[[301912,486633],[-573,-442]],[[301339,486191],[-59,9209]],[[301280,495400],[-86,9641],[-121,9365]],[[301073,514406],[217,752],[480,-1278]],[[230394,513722],[3,-5426]],[[230397,508296],[-1199,-11]],[[229198,508285],[-5,3227],[-954,31]],[[236515,508333],[-686,5],[-1,-1627]],[[235828,506711],[-712,-5]],[[301280,495400],[-90,-874],[-585,120],[-254,-2830],[-201,2231]],[[300150,494047],[-446,794],[-524,2812]],[[299180,497653],[520,1849],[112,1481],[-264,3053],[383,3039],[-19,1891]],[[299912,508966],[388,4731],[214,622],[386,-1122],[173,1209]],[[240688,512617],[-96,-2433],[64,-4037]],[[240656,506147],[-95,-2136]],[[240561,504011],[-562,444],[-37,2206]],[[239962,506661],[96,22],[-1,4337],[-100,2]],[[245800,509295],[3,-3236]],[[245803,506059],[-2029,-25]],[[243774,506034],[-42,6553]],[[159888,505470],[-166,-669],[69,-1969]],[[159791,502832],[-1153,206],[-233,1075],[-632,10],[-781,720],[-578,-1960],[-382,1172]],[[156032,504055],[-98,1558],[388,2207],[-85,2294]],[[175529,510717],[154,-826],[-339,-5246],[150,-1455],[0,-3804]],[[175494,499386],[-398,-1021]],[[175096,498365],[-633,867],[-4,2312],[-267,893],[-1,3275],[-764,34]],[[173427,505746],[188,1739],[-44,1635],[179,1067]],[[231554,511549],[662,-3749],[173,-272]],[[232389,507528],[-309,-828],[-3,-1608],[-1679,19]],[[230398,505111],[-1,3185]],[[307819,495119],[63,-2040],[-255,1149],[192,891]],[[308823,498240],[322,-1211],[-422,-2791],[-256,1683],[356,2319]],[[309697,499440],[-194,-3153],[-121,2655],[-613,1159],[154,-1191],[-465,-1334],[31,1761],[-402,-1706],[118,-3275],[-828,3345],[180,1912],[-237,2131],[81,1096]],[[221700,513284],[1,-6478]],[[221701,506806],[-279,1]],[[221422,506807],[-2038,4]],[[224084,513253],[3,-6454]],[[224087,506799],[-1658,3]],[[222429,506802],[-728,4]],[[239382,509380],[135,-2743]],[[239517,506637],[-427,-1841]],[[239090,504796],[-535,227]],[[238555,505023],[9,1658],[-687,3],[2,1621]],[[226134,511570],[12,-9713]],[[226146,501857],[-2029,50]],[[224117,501907],[-30,4892]],[[179240,505148],[-395,-1629],[-367,938],[-230,-2310],[-308,-656],[142,-3508],[-185,-1567]],[[177897,496416],[-297,-1464],[-332,-476],[-1622,26],[-30,-1654],[-276,67]],[[175340,492915],[1,3219],[164,2],[-11,3250]],[[212272,509451],[-19,-8102],[-1681,-4]],[[210572,501345],[-701,13],[-660,-630]],[[209211,500728],[-5,7939]],[[242364,512616],[56,-6547]],[[242420,506069],[-1764,78]],[[243774,506034],[0,-3209]],[[243774,502825],[-1350,15]],[[242424,502840],[-4,3229]],[[262700,510888],[28,-4815]],[[262728,506073],[-1239,26],[-114,-876]],[[261375,505223],[-304,883]],[[261071,506106],[219,4694],[-69,1784]],[[261221,512584],[458,-41],[1,-1633],[1020,-22]],[[264067,512416],[-14,-6399]],[[264053,506017],[-1325,56]],[[262700,510888],[342,-33],[1,1620]],[[265420,512477],[-20,-6430]],[[265400,506047],[-1347,-30]],[[227493,511539],[8,-6473]],[[227501,505066],[-3,-4842]],[[227498,500224],[-1005,10]],[[226493,500234],[-9,1613],[-338,10]],[[229198,508285],[-7,-3210]],[[229191,505075],[-1690,-9]],[[233750,506692],[-653,-11],[0,-2565]],[[233097,504116],[-708,3412]],[[239962,506661],[-445,-24]],[[250535,509260],[0,-6476]],[[250535,502784],[-1731,66]],[[248804,502850],[-1313,5]],[[247491,502855],[4,6490]],[[252582,506023],[-689,19],[2,1616],[-685,-6],[0,1599]],[[173427,505746],[-386,-1718],[-295,-3771],[-220,-1145],[9,-3402]],[[172535,495710],[-741,0],[0,1607],[-293,1056],[-1060,-21],[-726,-3486]],[[169715,494866],[-738,-18],[245,2193],[-29,1556],[315,2472],[-553,1434],[612,1573],[-28,2092],[141,1771]],[[156032,504055],[-16,-547]],[[156016,503508],[-1263,17]],[[154753,503525],[-341,333],[-2,5677]],[[165704,508612],[55,-3188],[-10,-9610]],[[165749,495814],[-676,-6],[-2,1543],[-342,912],[-1014,-18],[1,2353]],[[163716,500598],[38,4797]],[[154753,503525],[15,-5367],[-344,3],[15,-1349],[-284,-294],[116,-1140]],[[154271,495378],[-947,-136]],[[153324,495242],[89,2630],[44,7616],[170,1569],[17,2495]],[[214938,499623],[-2,-12]],[[214936,499611],[-312,-1407],[-473,240],[-223,-2776],[-71,-2959],[-2964,11]],[[210893,492720],[-2,2156],[-338,-10],[19,6479]],[[247491,502855],[1,-4850]],[[247492,498005],[-1354,-31],[0,1610],[-337,6],[2,1612]],[[245803,501202],[0,4857]],[[253268,502751],[-7,-1765]],[[253261,500986],[-1005,106]],[[252256,501092],[3,1635],[-1724,57]],[[296979,508865],[60,-3256],[-127,-959]],[[296912,504650],[-471,86],[-134,-1750],[-359,-1101]],[[295948,501885],[-849,1672]],[[295099,503557],[103,5409]],[[295202,508966],[1777,-101]],[[299180,497653],[-205,-1076]],[[298975,496577],[-266,1736],[213,1023],[-144,949],[183,1193],[-188,668],[204,1295],[-286,976]],[[298691,504417],[181,2000],[-64,2447]],[[298808,508864],[1104,102]],[[295099,503557],[-145,-2596],[-226,-367]],[[294728,500594],[-75,974],[149,3512],[-119,604],[97,3231]],[[294780,508915],[422,51]],[[294728,500594],[65,-314]],[[294793,500280],[-930,-2004],[-662,-178]],[[293201,498098],[-213,5177],[-115,5361]],[[292873,508636],[1907,279]],[[298691,504417],[-203,-1307],[-284,945],[-413,-3859],[-312,778]],[[297479,500974],[-299,925],[174,1659],[-442,1092]],[[296979,508865],[1829,-1]],[[196492,508721],[81,-2399],[-1,-6525],[53,-2],[-1,-6560],[65,0]],[[196689,493235],[-1,-1658]],[[196688,491577],[-673,4],[0,-1649],[-344,-3],[9,-1603],[-502,-5],[2,-1644],[-615,-56]],[[194565,486621],[-361,2183],[-278,575],[-277,-718],[-66,-1424],[-340,-839],[-198,2909],[-377,-147],[-166,1088]],[[192502,490248],[0,2320],[-270,2958],[-406,2562],[50,1662],[-272,1203],[-814,-4],[0,1554],[-1080,0]],[[290927,508616],[234,-782],[324,-14558],[-26,-1329]],[[291459,491947],[-889,-543]],[[290570,491404],[-581,-367],[-299,867]],[[289690,491904],[-769,2247]],[[288921,494151],[-1154,3457]],[[287767,497608],[260,2084],[1343,6200],[870,2516],[687,208]],[[198469,508740],[221,-3931],[453,-2059],[152,401],[684,-2630]],[[199979,500521],[185,-1796],[287,-397],[154,-2197],[-5,-2948]],[[200600,493183],[-3911,52]],[[206332,508724],[28,-15345]],[[206360,493379],[-1,-12617]],[[206359,480762],[-2612,-65]],[[203747,480697],[21,19901]],[[203768,500598],[-42,7998]],[[203768,500598],[-1168,-134],[-2621,57]],[[293201,498098],[-645,-417],[133,-5013],[-525,-325]],[[292164,492343],[-705,-396]],[[290927,508616],[1946,20]],[[209211,500728],[4,-7271]],[[209215,493457],[-2855,-78]],[[169715,494866],[13,-4023]],[[169728,490843],[-1637,144],[-4,-1633],[-2343,-17]],[[165744,489337],[5,6477]],[[237194,508319],[5,-4865]],[[237199,503454],[-679,9],[-2,-1632],[-677,-5],[-1,1626]],[[235840,503452],[-12,3259]],[[238555,505023],[-264,-1739],[-417,-1265]],[[237874,502019],[-336,1431],[-339,4]],[[230398,505111],[0,-3258]],[[230398,501853],[-1,-1635]],[[230397,500218],[-1208,4]],[[229189,500222],[2,4853]],[[233097,504116],[341,-1014]],[[233438,503102],[0,-2921],[-654,12]],[[232784,500193],[-25,1633],[-1362,10]],[[231397,501836],[-999,17]],[[240561,504011],[200,-613]],[[240761,503398],[-169,-3191],[-689,-567],[1,-756]],[[239904,498884],[-675,2],[1,1340]],[[239230,500226],[-140,4570]],[[221422,506807],[-9,-6504]],[[221413,500303],[-2368,-13]],[[219045,500290],[-317,676],[77,2216],[-293,1269]],[[222429,506802],[32,-13076]],[[222461,493726],[-769,-45]],[[221692,493681],[-243,467]],[[221449,494148],[-36,6155]],[[224117,501907],[15,-8146]],[[224132,493761],[-628,-3]],[[223504,493758],[-1043,-32]],[[235840,503452],[-367,-8],[16,-4852]],[[235489,498592],[-437,8]],[[235052,498600],[-236,772]],[[234816,499372],[-1378,3730]],[[183397,494435],[-268,4],[1,-3240],[-116,1],[10,-3445],[227,-983],[-559,-2336],[-480,-1253],[-145,-1113]],[[182067,482070],[-654,3911],[-113,-749],[-563,1718],[-9,880],[-657,321],[-39,-921],[-426,1522],[-370,1],[1,1213],[-439,-1021]],[[178798,488945],[-55,216]],[[178743,489161],[-155,1983],[62,1848],[-398,879],[-33,1744],[-322,801]],[[242424,502840],[-1,-2696],[-504,27]],[[241919,500171],[-648,507],[-510,2720]],[[266980,506081],[138,-2704],[-131,-3751]],[[266987,499626],[-1582,-52]],[[265405,499574],[-5,6473]],[[265400,506047],[1580,34]],[[262728,506073],[-10,-6460]],[[262718,499613],[-1346,23]],[[261372,499636],[3,5587]],[[264053,506017],[3,-6475]],[[264056,499542],[-1338,71]],[[245803,501202],[-678,11]],[[245125,501213],[-1013,-15]],[[244112,501198],[-337,9]],[[243775,501207],[-1,1618]],[[265405,499574],[-1349,-32]],[[175096,498365],[-132,-2276],[-32,-3180],[-260,7]],[[174672,492916],[-1240,21]],[[173432,492937],[-217,1683],[-680,1090]],[[163716,500598],[-1231,-21],[0,-1605],[-450,-3],[1,-1609],[-331,10]],[[161705,497370],[-2049,35]],[[159656,497405],[135,5427]],[[239230,500226],[-677,-7]],[[238553,500219],[-1077,-8]],[[237476,500211],[398,1808]],[[229189,500222],[-676,-12]],[[228513,500210],[-1015,14]],[[297479,500974],[-166,-1452]],[[297313,499522],[-157,-1497],[-296,998],[-160,-1509],[-420,995]],[[296280,498509],[-67,1872],[-265,1504]],[[159656,497405],[121,-2500]],[[159777,494905],[-1469,-90],[-166,-673],[-532,204],[-411,1118],[-498,-542],[-6,-1095],[-722,-4],[-54,1557]],[[155919,495380],[-124,1127],[44,2998],[-133,924],[521,1787],[-211,1292]],[[219045,500290],[-133,-1712],[523,-288],[58,-1572],[781,-877],[538,-1239],[-128,-869]],[[220684,493733],[-1196,-11],[0,-483]],[[219488,493239],[-1893,-6]],[[217595,493233],[-334,-5],[34,9715],[49,1065]],[[260032,504518],[-8,-4869]],[[260024,499649],[-1160,99]],[[258864,499748],[-13,3454],[458,1388]],[[259309,504590],[723,-72]],[[298975,496577],[-544,-513],[-20,-3063]],[[298411,493001],[-914,898]],[[297497,493899],[402,4107],[-586,1516]],[[307394,502828],[-140,-1574],[180,-625],[-64,-1886],[-523,-588],[177,-1427],[-225,-1985]],[[306799,494743],[-257,114],[-412,2029],[-390,-679]],[[305740,496207],[-272,275]],[[305468,496482],[309,2126],[8,3412],[-219,979]],[[189728,498925],[5,-9134]],[[189733,489791],[-389,-951],[-593,-175]],[[188751,488665],[-448,-740],[-1162,821]],[[187141,488746],[-1,810],[-499,8],[1,1607]],[[186642,491171],[339,-6],[1,1607],[490,821],[16,2405],[169,1558],[484,18],[2,2777]],[[217595,493233],[-48,-3229]],[[217547,490004],[-2628,-7]],[[214919,489997],[17,9614]],[[296280,498509],[-410,-5407]],[[295870,493102],[-68,2573],[-938,-658]],[[294864,495017],[48,3057],[-119,2206]],[[155919,495380],[-1648,-2]],[[305468,496482],[-133,-1504],[-266,328],[-18,-2929],[-277,308]],[[304774,492685],[-7,9]],[[304767,492694],[-269,530],[-119,-1120],[-300,314]],[[304079,492418],[-196,1521],[-150,5232]],[[237476,500211],[-51,-1567]],[[237425,498644],[-1936,-52]],[[241919,500171],[207,-1615]],[[242126,498556],[-525,16],[0,-1617],[-335,5],[-1,-3232]],[[241265,493728],[-356,11]],[[240909,493739],[-1010,22]],[[239899,493761],[5,5123]],[[234816,499372],[-1,-4019],[-672,-9],[-4,-1614]],[[234139,493730],[-985,19]],[[233154,493749],[-366,-7]],[[232788,493742],[-4,6451]],[[250535,502784],[-3,-8151]],[[250532,494633],[-1040,40]],[[249492,494673],[-353,36]],[[249139,494709],[-5,4907],[-328,5],[-2,3229]],[[249139,494709],[-495,34]],[[248644,494743],[-1141,-13]],[[247503,494730],[-11,3275]],[[253979,502714],[-8,-1]],[[253961,502712],[-152,-2104],[333,-531],[464,2017]],[[254606,502094],[-10,-5904]],[[254596,496190],[-339,8],[-1,-1624],[-432,11]],[[253824,494585],[-416,19]],[[253408,494604],[6,6419],[-153,-37]],[[243775,501207],[-1056,-193],[-152,-3332]],[[242567,497682],[-441,874]],[[252256,501092],[-364,1],[-9,-6465]],[[251883,494628],[-409,-12]],[[251474,494616],[-942,17]],[[255685,502676],[-302,-3068],[-168,-3412]],[[255215,496196],[-619,-6]],[[254606,502094],[73,609]],[[254679,502703],[1006,-27]],[[192502,490248],[5,-10113]],[[192507,480135],[-16,-1620],[-799,3],[0,-1615],[-653,8],[-1,-1050]],[[191038,475861],[-655,-1],[0,1503],[-643,-3]],[[189740,477360],[-2,3452]],[[189738,480812],[-5,8979]],[[226493,500234],[-2,-6499]],[[226491,493735],[-1332,24]],[[225159,493759],[-1027,2]],[[231397,501836],[40,-8076]],[[231437,493760],[-1042,2]],[[230395,493762],[2,6456]],[[232788,493742],[-1310,16]],[[231478,493758],[-41,2]],[[210893,492720],[-1678,5]],[[209215,492725],[0,732]],[[244112,501198],[-2,-6505],[-219,-856],[207,-1949],[-69,-1318]],[[244029,490570],[-834,3122]],[[243195,493692],[-279,3080],[-349,910]],[[245125,501213],[38,-9631]],[[245163,491582],[-433,-275],[-41,-1497],[-287,-3]],[[244402,489807],[-373,763]],[[247503,494730],[-1,-1740]],[[247502,492990],[-1654,56],[-187,-1630]],[[245661,491416],[-498,166]],[[253408,494604],[-589,39]],[[252819,494643],[-936,-15]],[[186642,491171],[-1501,14],[-1,-1610]],[[185140,489575],[-834,8],[-3,4870]],[[203747,480697],[-170,-9]],[[203577,480688],[-2877,-40],[0,148]],[[200700,480796],[-49,12388],[-51,-1]],[[165744,489337],[-329,0],[-5,-4859],[-337,5]],[[165073,484483],[-1002,8],[0,1610],[-336,-4],[-1,1618],[-1028,-13],[-1,1606],[-664,64],[-2,3219],[-321,78],[-13,4701]],[[221449,494148],[180,-1780],[-748,46],[-197,1319]],[[294864,495017],[-214,-1345],[-132,-2763],[162,-4374]],[[294680,486535],[-165,-91]],[[294515,486444],[-1724,-1102]],[[292791,485342],[28,960],[-465,275],[-343,2130],[225,833],[-72,2803]],[[238553,500219],[-2,-6472]],[[238551,493747],[-677,-2]],[[237874,493745],[1,808],[-680,-7]],[[237195,494546],[220,1969],[10,2129]],[[239899,493761],[-13,0]],[[239886,493761],[-1005,-6]],[[238881,493755],[-330,-8]],[[228513,500210],[-4,-6463]],[[228509,493747],[-670,-20]],[[227839,493727],[-1336,7]],[[226503,493734],[-12,1]],[[230395,493762],[0,-2]],[[230395,493760],[-1217,-20]],[[229178,493740],[-669,7]],[[260024,499649],[-9,-6493]],[[260015,493156],[-615,54]],[[259400,493210],[-964,215]],[[258436,493425],[364,3555],[64,2768]],[[261372,499636],[-2,-6463]],[[261370,493173],[-640,-4]],[[260730,493169],[-715,-13]],[[260024,499649],[1348,-13]],[[264056,499542],[8,-6454]],[[264064,493088],[-669,-1]],[[263395,493087],[-679,16]],[[262716,493103],[2,6510]],[[262716,493103],[-656,53]],[[262060,493156],[-690,17]],[[266987,499626],[-62,-3377],[-470,-1067],[-157,-2039]],[[266298,493143],[-886,-32]],[[265412,493111],[-7,6463]],[[265412,493111],[-786,0]],[[264626,493111],[-562,-23]],[[175340,492915],[-169,-3],[-24,-6409]],[[175147,486503],[-644,5]],[[174503,486508],[-557,-1]],[[173946,486507],[0,3241],[391,-17],[114,1595],[220,-13],[1,1603]],[[214919,489997],[-32,-5323],[-335,-145]],[[214552,484529],[-104,-245],[-1766,9]],[[212682,484293],[343,3116],[-3812,-38]],[[209213,487371],[2,5354]],[[297497,493899],[-208,-1404],[-408,589],[-262,-2738],[-163,304]],[[296456,490650],[-487,788],[-99,1664]],[[235052,498600],[862,-2186],[274,-1379]],[[236188,495035],[12,-2914]],[[236200,492121],[-1368,-13]],[[234832,492108],[-669,3],[-24,1619]],[[304079,492418],[-79,-2770]],[[304000,489648],[-229,-1286],[-556,2438],[-134,-953],[-324,848]],[[237195,494546],[-163,-1485],[-844,1974]],[[243195,493692],[-616,1],[0,-1602]],[[242579,492091],[-668,7],[-1,1620],[-645,10]],[[173432,492937],[-215,-1207],[111,-1864],[-135,-2003]],[[173193,487863],[-118,-728],[-1,-2989]],[[173074,484146],[-2,-31285]],[[173072,452861],[-3259,-52]],[[169813,452809],[-49,5195],[-6,11887],[-34,1],[4,20951]],[[300150,494047],[150,-5520],[-565,-418],[90,-2385]],[[299825,485724],[28,-1263],[-360,-305],[-213,-2183]],[[299280,481973],[-251,-348],[-88,1240],[-239,-1545]],[[298702,481320],[-1098,1335]],[[297604,482655],[73,1782],[273,1403]],[[297950,485840],[461,7161]],[[165073,484483],[-1,-1675]],[[165072,482808],[-3996,131]],[[161076,482939],[-1866,-3]],[[159210,482936],[77,4514],[296,1024],[283,3754],[-89,2677]],[[286590,490299],[-326,1891],[242,1614],[1261,3804]],[[288921,494151],[-278,-2135],[171,-536],[-163,-1981],[-600,-1657],[-229,97],[184,-3632]],[[288006,484307],[-698,337],[-439,-516]],[[286869,484128],[-30,11]],[[286839,484139],[-17,6]],[[286822,484145],[-93,2653],[-183,296],[473,1068],[-221,1527],[192,1727],[-400,-1117]],[[306799,494743],[-208,-3179],[83,-579],[-394,-2171],[-422,631],[40,936]],[[305898,490381],[198,677],[-157,2939],[-190,25],[-9,2185]],[[178743,489161],[-409,649],[-97,1866],[-374,-2892],[-523,-708],[-420,-3555],[-517,-1774],[-404,-258]],[[175999,482489],[-852,4014]],[[305898,490381],[-88,1150],[-333,-4457],[-153,1112],[-294,-802],[27,3033],[-191,-1421]],[[304866,488996],[63,1228],[-293,335]],[[304636,490559],[138,2126]],[[255215,496196],[9,-3137],[-283,-948],[-251,-4019]],[[254690,488092],[-862,-9]],[[253828,488083],[-4,6502]],[[296456,490650],[-138,-1260]],[[296318,489390],[-526,-1476],[60,-1043]],[[295852,486871],[-725,197],[35,-1310],[-435,-258]],[[294727,485500],[-47,1035]],[[159210,482936],[-357,-1082],[-3,-2172]],[[158850,479682],[-1696,-62],[-3,2000],[-1023,-131],[-80,4508],[-585,9],[-506,918],[-251,1688],[-580,464],[-273,-1479],[-649,-39]],[[153204,487558],[120,7684]],[[301339,486191],[74,-4637]],[[301413,481554],[-561,-31]],[[300852,481523],[-271,609],[-756,3592]],[[237874,493745],[1,-6477]],[[237875,487268],[-1335,-3]],[[236540,487265],[-340,-1]],[[236200,487264],[0,4857]],[[248644,494743],[4,-1204],[-356,-1774],[167,-1778],[17,-2211],[271,-1702],[222,-2658]],[[248969,483416],[-1467,-1]],[[247502,483415],[1,1682]],[[247503,485097],[-1,7893]],[[249492,494673],[0,-4905]],[[249492,489768],[-4,-6323]],[[249488,483445],[-519,-29]],[[251474,494616],[2,-4829]],[[251476,489787],[-786,-8]],[[250690,489779],[-1198,-11]],[[252819,494643],[-1,-5695]],[[252818,488948],[3,-842],[-1344,42]],[[251477,488148],[-1,1639]],[[253828,488083],[-336,-5]],[[253492,488078],[2,861],[-676,9]],[[185140,489575],[-7,-6496]],[[185133,483079],[-5,-1541],[-325,-81],[-2,-1617],[-333,6],[-31,-3058],[-167,-6]],[[184270,476782],[-988,-2],[0,1537],[-762,6],[71,2286],[-253,1758],[-271,-297]],[[297950,485840],[-1609,2938],[-23,612]],[[289857,482936],[-1180,-3639],[-620,942]],[[288057,480239],[-51,4068]],[[289690,491904],[167,-8968]],[[222306,488875],[139,-1400],[-276,-1472],[-156,-2285],[239,-7],[215,-2925]],[[222467,480786],[-656,1]],[[221811,480787],[-251,2],[-1,4521],[-205,287],[-400,-1289],[-686,-69],[-402,533]],[[219866,484772],[-299,60]],[[219567,484832],[-76,2418],[-3,5989]],[[221692,493681],[38,-1692],[582,-1978],[-6,-1136]],[[231478,493758],[-2,-6467]],[[231476,487291],[-1083,9]],[[230393,487300],[2,6460]],[[233154,493749],[0,-6482]],[[233154,487267],[-1644,21]],[[231510,487288],[-34,3]],[[225159,493759],[1,-4821]],[[225160,488938],[-1327,-45]],[[223833,488893],[-332,-2]],[[223501,488891],[3,4867]],[[239886,493761],[1,-6484]],[[239887,487277],[-11,1]],[[239876,487278],[-995,-7]],[[238881,487271],[0,6484]],[[240909,493739],[-31,-6461]],[[240878,487278],[-991,-1]],[[230393,487300],[-1213,-24]],[[229180,487276],[-2,6464]],[[238881,487271],[-673,1]],[[238208,487272],[-333,-4]],[[223501,488891],[-1195,-16]],[[226503,493734],[-5,-6430]],[[226498,487304],[-323,15]],[[226175,487319],[-997,7]],[[225178,487326],[-18,1612]],[[242579,492091],[0,-4839]],[[242579,487252],[-1030,-242]],[[241549,487010],[-671,268]],[[234832,492108],[2,-4840]],[[234834,487268],[-1653,0]],[[233181,487268],[-27,-1]],[[229180,487276],[-670,-7]],[[228510,487269],[-670,12]],[[227840,487281],[-1,6446]],[[227840,487281],[-666,8]],[[227174,487289],[-676,15]],[[244402,489807],[393,-2555]],[[244795,487252],[-1244,-3]],[[243551,487249],[-972,3]],[[209213,487371],[2,-6521]],[[209215,480850],[-2355,-66]],[[206860,480784],[-501,-22]],[[259400,493210],[11,-6544]],[[259411,486666],[-1095,71]],[[258316,486737],[-227,4106],[347,2582]],[[304000,489648],[314,-1030]],[[304314,488618],[155,528]],[[304469,489146],[-41,-1011]],[[304428,488135],[-42,-1969],[-144,1439],[-555,-1235],[-307,-2322],[164,-2049],[-435,-545]],[[303109,481454],[-386,1325],[-161,2029],[-306,-177],[3,1605],[-347,397]],[[219567,484832],[-690,962],[-260,-1067],[-280,233],[-415,1974],[-376,206]],[[217546,487140],[1,2864]],[[200700,480796],[-1181,20]],[[199519,480816],[-168,0]],[[199351,480816],[0,2700],[-338,-12],[1,1631],[-670,1],[0,1587],[-984,520],[1,1055],[-333,2],[5,1651],[-345,1626]],[[304469,489146],[96,425],[146,-4224],[-211,-752],[-72,3540]],[[304747,485718],[-31,9]],[[304716,485727],[-143,4024],[63,808]],[[304866,488996],[-144,-864],[186,-1284],[-161,-1130]],[[304767,492694],[-187,-2521],[-266,-1555]],[[260730,493169],[6,-6502]],[[260736,486667],[-1325,-1]],[[262060,493156],[-5,-6526]],[[262055,486630],[-1319,37]],[[263395,493087],[5,-6428]],[[263400,486659],[-1345,-29]],[[264626,493111],[-1,-3070]],[[264625,490041],[-2,-3183]],[[264623,486858],[-1223,-199]],[[247503,485097],[-1667,-111]],[[245836,484986],[-8,6442],[-167,-12]],[[173946,486507],[-392,-271],[-361,1627]],[[292791,485342],[-439,-294],[152,-6649]],[[292504,478399],[55,-2189]],[[292559,476210],[-1099,-481],[-496,1080]],[[290964,476809],[-432,1000],[257,2733],[-219,10862]],[[236200,487264],[-1352,5]],[[234848,487269],[-14,-1]],[[178798,488945],[-51,-1480]],[[178747,487465],[-147,-2107],[27,-2295],[-141,-364],[-9,-7525]],[[178477,475174],[-1,-5281],[148,-48]],[[178624,469845],[-11,-2675]],[[178613,467170],[-1161,-3],[35,3027],[-978,384],[-398,937],[-84,-1083],[-654,1956],[-183,1187]],[[175190,473575],[801,17],[8,8897]],[[290964,476809],[48,-2086],[-179,-2358]],[[290833,472365],[-10,-3429]],[[290823,468936],[-322,652],[-79,-1360],[-540,1548],[-309,-528]],[[289573,469248],[-20,3211],[418,3255],[-260,632],[239,1293],[-93,5297]],[[245836,484986],[-965,56]],[[244871,485042],[-76,2210]],[[199351,480816],[0,-542],[-2070,-233],[-331,808],[-664,542],[-332,1359],[-995,270],[0,1479],[-394,2122]],[[187141,488746],[-18,-3230],[156,229],[838,-2596]],[[188117,483149],[-2489,-4]],[[185628,483145],[-495,-66]],[[169813,452809],[-3140,-58]],[[166673,452751],[-101,8]],[[166572,452759],[-14,14051],[-1606,-147],[6,8084],[116,22],[-2,8039]],[[199519,480816],[49,-535],[44,-12867],[-117,0],[4,-6462],[53,0]],[[199552,460952],[1,-3214]],[[199553,457738],[-4238,36]],[[195315,457774],[-81,8002],[-208,644],[-621,4049],[-508,1246],[-388,4712],[-175,3678],[-827,30]],[[265345,488432],[-13,-4364],[594,-1608]],[[265926,482460],[2,-2061]],[[265928,480399],[-330,807],[-651,39],[-327,828]],[[264620,482073],[3,4785]],[[264625,490041],[337,2],[2,-1583],[381,-28]],[[217546,487140],[-458,-847],[2,-7566]],[[217090,478727],[-2459,14]],[[214631,478741],[-79,1615],[0,4173]],[[184270,476782],[-1,-3235]],[[184269,473547],[-657,2],[18,-6493],[161,-1616],[-161,-936]],[[183630,464504],[-371,1135],[-285,-316]],[[182974,465323],[1,3350],[164,1],[-2,6526],[-838,4]],[[182299,475204],[-1840,-8]],[[180459,475196],[-55,2307],[-389,209],[74,2719],[-486,2041],[-29,3598],[-455,236],[-372,1159]],[[189738,480812],[-430,715],[-125,1527],[-435,6]],[[188748,483060],[3,5605]],[[251477,488148],[-1,-4871]],[[251476,483277],[-337,-10]],[[251139,483267],[-664,187]],[[250475,483454],[215,6325]],[[250475,483454],[-987,-9]],[[297604,482655],[-139,-531],[-150,-6298]],[[297315,475826],[-695,-198],[-380,612]],[[296240,476240],[-135,842]],[[296105,477082],[40,1310],[261,-316],[91,2133],[-178,490],[251,3496],[-332,633],[104,1629],[-255,1002],[-235,-588]],[[158850,479682],[187,-616],[253,-2714],[-330,-3406],[-529,-206],[-3,-1355]],[[158428,471385],[-330,3],[-438,-1061],[-659,-2952],[-995,-473],[-214,-851]],[[155792,466051],[-606,-122],[-747,708],[-3,820]],[[154436,467457],[-267,105]],[[154169,467562],[-22,3823],[330,1722],[-6,3184],[-170,-24],[1,3264],[-310,1556],[0,1719],[-955,38]],[[153037,482844],[167,4714]],[[253492,488078],[4,-6488]],[[253496,481590],[-667,11]],[[252829,481601],[-2,1626],[-1351,50]],[[225178,487326],[13,-6561]],[[225191,480765],[-1074,13]],[[224117,480778],[-247,-3]],[[223870,480775],[-37,8118]],[[223870,480775],[-1403,11]],[[188748,483060],[-631,89]],[[254690,488092],[83,-3796],[-251,-2704]],[[254522,481592],[-691,-13]],[[253831,481579],[-335,11]],[[174503,486508],[-1,-3222],[108,-1],[2,-3245],[-111,-9],[5,-3147]],[[174506,476884],[-750,3480],[-170,2161],[-512,1621]],[[219866,484772],[49,-6023]],[[219915,478749],[-2825,-22]],[[180459,475196],[-612,-24]],[[179847,475172],[-1370,2]],[[296105,477082],[-1078,260]],[[295027,477342],[17,4427],[-151,1362],[-345,331],[179,2038]],[[212682,484293],[-532,-1540],[1,-2394]],[[212151,480359],[-2937,18]],[[209214,480377],[1,473]],[[231510,487288],[-2,-6495]],[[231508,480793],[-1114,5]],[[230394,480798],[-1,6502]],[[233181,487268],[-6,-6467]],[[233175,480801],[-1132,-10]],[[232043,480791],[-535,2]],[[239876,487278],[3,-6493]],[[239879,480785],[-1250,-4]],[[238629,480781],[-422,3]],[[238207,480784],[1,6488]],[[241549,487010],[0,-6211]],[[241549,480799],[-290,-4]],[[241259,480795],[-1313,-10]],[[239946,480785],[-67,0]],[[244871,485042],[-34,-2081],[143,-2160]],[[244980,480801],[-1096,2]],[[243884,480803],[-334,1]],[[243550,480804],[1,6445]],[[226175,487319],[6,-6546]],[[226181,480773],[-417,-14]],[[225764,480759],[-573,6]],[[227174,487289],[5,-6502]],[[227179,480787],[-998,-14]],[[243550,480804],[-972,-1]],[[242578,480803],[-1029,-4]],[[234848,487269],[-4,-6462]],[[234844,480807],[-164,-8]],[[234680,480799],[-1319,-4]],[[233361,480795],[-186,6]],[[238207,480784],[-898,-1]],[[237309,480783],[-772,10]],[[236537,480793],[3,6472]],[[230394,480798],[-407,0]],[[229987,480798],[-908,-8]],[[229079,480790],[-570,-5]],[[228509,480785],[1,6484]],[[236537,480793],[-543,5]],[[235994,480798],[-1150,9]],[[228509,480785],[-758,1]],[[227751,480786],[-572,1]],[[264620,482073],[-6,-1618],[-556,-297]],[[264058,480158],[-662,0]],[[263396,480158],[4,6501]],[[259411,486666],[-4,-6482]],[[259407,480184],[-1174,91]],[[258233,480275],[-220,3394],[303,3068]],[[263396,480158],[-664,2]],[[262732,480160],[-666,1]],[[262066,480161],[-11,6469]],[[303109,481454],[-237,-3363],[-309,-544],[-343,-4752],[-437,1186]],[[301783,473981],[56,1698],[-493,2897],[67,2978]],[[262066,480161],[-1330,38]],[[260736,480199],[0,6468]],[[260736,480199],[0,-3239]],[[260736,476960],[-635,-23]],[[260101,476937],[-693,9],[-1,3238]],[[295027,477342],[-54,-6909]],[[294973,470433],[-1008,-44]],[[293965,470389],[167,2590],[-54,4202]],[[294078,477181],[-94,3357],[378,3143],[153,2763]],[[175190,473575],[-334,1506],[-129,1914],[-221,-111]],[[294078,477181],[-671,-975],[-134,2686],[-769,-493]],[[221811,480787],[-2,-9342]],[[221809,471445],[-1850,12]],[[219959,471457],[-44,7292]],[[300852,481523],[10,-3416],[-211,-1324]],[[300651,476783],[-895,3174],[-123,-380],[-353,2396]],[[266573,485031],[2,-1115],[972,142]],[[267547,484058],[-7,-6487]],[[267540,477571],[-652,-90],[7,-1620],[-304,-225]],[[266591,475636],[-654,-32]],[[265937,475604],[-9,4795]],[[265926,482460],[509,2703],[138,-132]],[[247502,483415],[4,-1619]],[[247506,481796],[-1005,-19],[9,-2420]],[[246510,479357],[-1496,-1]],[[245014,479356],[-34,1445]],[[286839,484139],[-17,6]],[[288057,480239],[-163,246],[-201,-2952],[7,-3154]],[[287700,474379],[-304,517]],[[287396,474896],[-580,1634],[-156,-692],[-618,-120]],[[286042,475718],[-350,485],[-33,3060]],[[285659,479263],[575,1959],[489,118],[146,2788]],[[214631,478741],[5,-4840],[73,-2431]],[[214709,471470],[-1977,12]],[[212732,471482],[-581,14]],[[212151,471496],[0,8863]],[[269259,474627],[-1374,-276]],[[267885,474351],[-11,2435],[-334,785]],[[267547,484058],[1423,278]],[[268970,484336],[189,-4720],[100,-4989]],[[178613,467170],[-2,-14381]],[[178611,452789],[-3086,40],[-2428,19]],[[173097,452848],[-25,13]],[[251139,483267],[-6,-6482]],[[251133,476785],[-1981,150]],[[249152,476935],[333,1631],[5,3332],[-358,175],[-163,1343]],[[249152,476935],[-329,-1617]],[[248823,475318],[-991,-774]],[[247832,474544],[6,7270],[-332,-18]],[[252829,481601],[-49,-6494]],[[252780,475107],[-328,25]],[[252452,475132],[-1318,30]],[[251134,475162],[-1,1623]],[[189740,477360],[2,-5505]],[[189742,471855],[-1522,-1]],[[188220,471854],[5,4870],[-654,10],[0,1563],[-614,10],[-169,1087],[-1161,0],[1,3751]],[[188220,471854],[-1319,43]],[[186901,471897],[-1652,-8],[-264,-1313]],[[184985,470576],[-183,-1641],[-532,-4],[-1,4616]],[[161076,482939],[-46,-16196],[1299,-29],[10,-13964]],[[162339,452750],[-1582,69]],[[160757,452819],[-2346,191]],[[158411,453010],[17,18375]],[[166572,452759],[-1780,10]],[[164792,452769],[-2453,-19]],[[289573,469248],[-100,-158]],[[289473,469090],[-527,-153],[-20,1299],[-279,-24],[-23,1969],[-519,2369],[-405,-171]],[[300651,476783],[-32,-196]],[[300619,476587],[-404,-4938]],[[300215,471649],[-352,1116],[-342,-274],[-74,1832],[-524,-693],[-159,1711],[-267,-361]],[[298497,474980],[-226,2507],[101,2207],[330,1626]],[[154169,467562],[-316,-270],[-199,-1662],[-396,-276],[-61,3940],[-268,1346],[-619,4]],[[152310,470644],[269,5889],[458,6311]],[[298497,474980],[-81,-1100]],[[298416,473880],[-391,59],[61,931],[-822,-384]],[[297264,474486],[51,1340]],[[301783,473981],[-163,-963]],[[301620,473018],[-513,-14],[127,1049],[-615,2534]],[[265937,475604],[-658,-19],[7,-1631]],[[265286,473954],[-1222,-81]],[[264064,473873],[-6,6285]],[[247832,474544],[-657,679]],[[247175,475223],[-660,-543]],[[246515,474680],[-5,4677]],[[254522,481592],[-329,-5331],[50,-1204]],[[254243,475057],[-476,2]],[[253767,475059],[64,6520]],[[253767,475059],[-987,48]],[[238629,480781],[-1,-4543]],[[238628,476238],[-1318,-2]],[[237310,476236],[-1,4547]],[[237308,469765],[-1314,6]],[[235994,469771],[-1,6459]],[[235993,476230],[1,4568]],[[237310,476236],[-2,-6471]],[[234682,476230],[-1321,3]],[[233361,476233],[0,4562]],[[234680,480799],[2,-4569]],[[235993,476230],[-1311,0]],[[239947,476239],[-1319,-1]],[[239946,480785],[1,-4546]],[[233361,476233],[-1320,44]],[[232041,476277],[2,4514]],[[209214,480377],[5,-8812]],[[209219,471565],[1,-7313]],[[209220,464252],[-1680,-40]],[[207540,464212],[-659,-10]],[[206881,464202],[-21,16582]],[[241256,475444],[-1309,0]],[[239947,475444],[0,795]],[[241259,480795],[-3,-5351]],[[232041,476277],[-1932,42]],[[230109,476319],[87,2489],[-209,1990]],[[242578,480803],[-3,-5357]],[[242575,475446],[-1319,-2]],[[245014,479356],[4,-1361],[405,-1716],[-330,-3303]],[[245093,472976],[-1193,26]],[[243900,473002],[-16,7801]],[[243900,473002],[-1326,21]],[[242574,473023],[1,2423]],[[230109,476319],[223,-746],[59,-2539]],[[230391,473034],[-980,6]],[[229411,473040],[-330,1]],[[229081,473041],[-2,7749]],[[206881,464202],[-1098,-58],[7,-3247]],[[205790,460897],[-134,-6],[-121,-2624],[-664,266],[161,2348],[-1442,50]],[[203590,460931],[-6,-1]],[[203584,460930],[-7,19758]],[[224117,480778],[91,-2392],[1571,-3239]],[[225779,475147],[90,-531]],[[225869,474616],[-47,-3529],[-165,-2602]],[[225657,468485],[-436,812]],[[225221,469297],[-526,2161]],[[224695,471458],[-1032,3040],[-78,1581],[-470,1324],[-243,2027],[-405,1356]],[[229081,473041],[-659,-11]],[[228422,473030],[0,1617],[-664,-11]],[[227758,474636],[-7,6150]],[[227758,474636],[-664,-12]],[[227094,474624],[-1225,-8]],[[225779,475147],[-15,5612]],[[203584,460930],[-1530,-50],[-2502,72]],[[224695,471458],[-2109,-11]],[[222586,471447],[-777,-2]],[[212151,471496],[-1401,0]],[[210750,471496],[-1531,69]],[[260101,476937],[-1,-1635]],[[260100,475302],[-328,14],[3,-1620],[-1016,-10]],[[258759,473686],[-526,6589]],[[262732,480160],[25,-6465]],[[262757,473695],[-1325,-1]],[[261432,473694],[1,3265],[-697,1]],[[195315,457774],[-2814,132]],[[192501,457906],[-1359,125],[-5,3185],[-131,-2],[32,14647]],[[264064,473873],[0,-195]],[[264064,473678],[-1307,17]],[[246515,474680],[-1111,-3346],[-255,-72]],[[245149,471262],[-56,1714]],[[286042,475718],[-35,-4144],[115,-2963],[261,68],[229,-1455]],[[286612,467224],[26,-2750]],[[286638,464474],[-1117,-2]],[[285521,464472],[-187,1944],[55,5513]],[[285389,471929],[-24,5904]],[[285365,477833],[294,1430]],[[293965,470389],[-115,-2942]],[[293850,467447],[-369,-82]],[[293481,467365],[-266,2463],[-523,831]],[[292692,470659],[-14,505]],[[292678,471164],[-119,5046]],[[217090,478727],[0,-7284]],[[217090,471443],[-2381,27]],[[219959,471457],[-2869,-14]],[[281818,478275],[-5,-4317]],[[281813,473958],[-1305,-81]],[[280508,473877],[0,4511]],[[280508,478388],[1310,-113]],[[280508,473877],[4,-838]],[[280512,473039],[-752,7],[-414,-1124]],[[279346,471922],[-518,1158],[12,3306],[719,1122],[949,880]],[[283548,476628],[9,-4500]],[[283557,472128],[-318,-2],[8,-1702],[-272,15]],[[282975,470439],[-429,33],[9,794],[-498,-12]],[[282057,471254],[10,2715],[-254,-11]],[[281818,478275],[657,-443],[527,-1887],[546,683]],[[285389,471929],[-697,-202]],[[284692,471727],[-474,498],[-661,-97]],[[283548,476628],[635,251],[429,-526],[753,1480]],[[267885,474351],[36,-4847]],[[267921,469504],[-333,-95]],[[267588,469409],[-976,-153]],[[266612,469256],[-21,6380]],[[192501,457906],[16,-12908]],[[192517,444998],[-2780,45]],[[189737,445043],[-3,7851]],[[189734,452894],[0,9524]],[[189734,462418],[8,9437]],[[296240,476240],[-137,-2650],[-357,111],[-31,-3519],[241,-61],[-25,-3493]],[[295931,466628],[-259,36]],[[295672,466664],[-674,89]],[[294998,466753],[-25,3680]],[[251134,475162],[-13,-6522]],[[251121,468640],[-991,-43]],[[250130,468597],[-1307,230]],[[248823,468827],[0,6491]],[[261432,473694],[8,-6496]],[[261440,467198],[-657,-32]],[[260783,467166],[-660,1]],[[260123,467167],[-23,8135]],[[292678,471164],[-1239,48],[-606,1153]],[[301620,473018],[189,655],[301,-1389],[-295,-3187]],[[301815,469097],[-594,-238],[-94,-983],[-503,-1186]],[[300624,466690],[-506,1532],[-67,1970],[164,1457]],[[287396,474896],[215,-2006],[56,-5300]],[[287667,467590],[-1055,-366]],[[297264,474486],[21,-2797],[-310,-2919],[270,-2371]],[[297245,466399],[-1314,229]],[[232041,476277],[7,-6487]],[[232048,469790],[-1892,-6]],[[230156,469784],[78,2629],[157,621]],[[233361,476233],[0,-6428]],[[233361,469805],[-1313,-15]],[[239947,475444],[-3,-5679]],[[239944,469765],[-1319,14]],[[238625,469779],[3,6459]],[[238625,469779],[-1317,-14]],[[235994,469771],[-1312,30]],[[234682,469801],[0,6429]],[[234682,469801],[-1321,4]],[[266612,469256],[-658,-171],[8,-1638]],[[265962,467447],[-657,-45]],[[265305,467402],[-19,6552]],[[242574,473023],[-1,-3272]],[[242573,469751],[-1317,2]],[[241256,469753],[0,5691]],[[241256,469753],[-1312,12]],[[248823,468827],[0,-811]],[[248823,468016],[-1640,-18]],[[247183,467998],[-8,7225]],[[247183,467998],[1,-5693]],[[247184,462305],[-597,23]],[[246587,462328],[-172,2280],[-542,826]],[[245873,465434],[-469,1434],[-255,4394]],[[300624,466690],[-29,-121]],[[300595,466569],[-107,-728],[-1684,269]],[[298804,466110],[-84,15]],[[298720,466125],[-215,4313],[-157,17],[68,3425]],[[260123,467167],[-1187,-13]],[[258936,467154],[-49,4105],[-128,2427]],[[182299,475204],[2,-6521],[-141,-1591],[-469,14]],[[181691,467106],[-326,810],[-824,10],[-55,777],[-638,0]],[[179848,468703],[-1,6469]],[[179848,468703],[-62,-3750]],[[179786,464953],[-566,398],[-337,2246],[112,1245],[-371,1003]],[[252452,475132],[-16,-6574]],[[252436,468558],[-656,-5]],[[251780,468553],[-659,87]],[[182974,465323],[-238,-239],[-275,-2258],[-767,3]],[[181694,462829],[-3,4277]],[[253767,475059],[-17,-6494]],[[253750,468565],[-659,-23]],[[253091,468542],[-655,16]],[[254243,475057],[184,-6512]],[[254427,468545],[-677,20]],[[289473,469090],[-133,-2371]],[[289340,466719],[-1655,-378]],[[287685,466341],[-18,1249]],[[298720,466125],[-986,173]],[[297734,466298],[-489,101]],[[228422,473030],[1,-5277]],[[228423,467753],[-411,1263],[-493,-320]],[[227519,468696],[-420,21]],[[227099,468717],[-5,5907]],[[227099,468717],[-647,152],[-239,-1688],[-225,-92],[-331,1396]],[[265305,467402],[-657,-78]],[[264648,467324],[-572,-16]],[[264076,467308],[-12,6370]],[[282057,471254],[-126,-2331]],[[281931,468923],[-1419,92]],[[280512,469015],[0,4024]],[[262757,473695],[0,-6486]],[[262757,467209],[-661,6]],[[262096,467215],[-656,-17]],[[264076,467308],[-666,-110]],[[263410,467198],[-653,11]],[[184985,470576],[7,-702],[463,1104],[183,-1173],[54,-3295],[326,-1616],[-112,-2669]],[[185906,462225],[-218,4],[1,-1621],[-435,0],[0,-1622],[-966,-26]],[[184288,458960],[-6,4851],[-652,693]],[[279029,472686],[285,-724],[-124,-1251],[-161,1975]],[[280512,469015],[1,-6165]],[[280513,462850],[-1172,-1823],[-491,1851]],[[278850,462878],[-210,586]],[[278640,463464],[245,2249],[543,1799],[-163,3148],[81,1262]],[[230156,469784],[-257,-2656],[18,-1098],[319,-1424],[30,-1300]],[[230266,463306],[144,-1321]],[[230410,461985],[-513,642]],[[229897,462627],[-186,2346],[-301,1001]],[[229410,465974],[1,7066]],[[229410,465974],[-586,1070]],[[228824,467044],[-401,709]],[[243900,473002],[-5,-8148]],[[243895,464854],[-1322,-36]],[[242573,464818],[0,4933]],[[245873,465434],[-1,-548],[-656,3]],[[245216,464889],[-1321,-35]],[[292692,470659],[24,-1088],[-500,-1877]],[[292216,467694],[-534,-438],[-538,1053]],[[291144,468309],[-321,627]],[[284692,471727],[-24,-4635]],[[284668,467092],[-949,-54],[-149,-3443]],[[283570,463595],[-344,17]],[[283226,463612],[9,1732],[-312,31],[52,5064]],[[186901,471897],[-242,-2320],[147,-3747],[355,398],[147,-1874],[115,-3739]],[[187423,460615],[-60,-2973],[-639,534]],[[186724,458176],[-179,1226],[-381,-494],[84,2410],[-342,907]],[[189734,462418],[-524,-640],[35,1742],[-1063,342],[13,-3257]],[[188195,460605],[-772,10]],[[285521,464472],[224,-1369],[-308,-60]],[[285437,463043],[-555,-96]],[[284882,462947],[2,2099],[-216,2046]],[[210915,461007],[1,-6453],[118,-1623]],[[211034,452931],[-1814,-34]],[[209220,452897],[0,11355]],[[210750,471496],[65,-4017],[1,-6473],[99,1]],[[214922,454659],[-168,-1623]],[[214754,453036],[-1702,-72]],[[213052,452964],[-57,-9]],[[212995,452955],[-124,1630],[-20,6470],[-66,0]],[[212785,461055],[0,6429],[-53,3998]],[[214709,471470],[45,-10349],[76,-3],[-3,-6452],[95,-7]],[[212785,461055],[-1870,-48]],[[225221,469297],[13,-2261]],[[225234,467036],[-777,345],[-862,1235],[-166,869],[-848,-1646]],[[222581,467839],[5,3608]],[[222581,467839],[-781,-1614],[-391,247]],[[221409,466472],[-1271,1432],[-179,713]],[[219959,468617],[0,2840]],[[219959,468617],[86,-14154]],[[220045,454463],[-279,6]],[[219766,454469],[-1612,38]],[[218154,454507],[-1617,75]],[[216537,454582],[-1615,77]],[[158411,453010],[-2621,-73]],[[155790,452937],[2,13114]],[[283226,463612],[-473,57],[-176,-2031]],[[282577,461638],[-328,866],[-551,60]],[[281698,462564],[229,2735],[4,3624]],[[294998,466753],[-244,-4393]],[[294754,462360],[-1202,-852]],[[293552,461508],[61,2653],[237,3286]],[[293481,467365],[-1033,-910]],[[292448,466455],[-257,-292],[25,1531]],[[154436,467457],[-322,-2815],[-164,-2462],[-328,-79],[-48,-2548],[372,-119],[282,-2180],[-184,-1761],[99,-2712]],[[154143,452781],[-1087,56]],[[153056,452837],[-394,1953],[-208,4302],[105,4473],[-70,1599],[-265,1356],[-113,2029],[199,2095]],[[179786,464953],[673,-952],[683,-1920],[360,583]],[[181502,462664],[-185,-222],[-6,-1813],[-601,5],[9,-7878]],[[180719,452756],[-2108,33]],[[232048,469790],[-2,-6488]],[[232046,463302],[-1780,4]],[[234682,469801],[-2,-6505]],[[234680,463296],[-1319,27]],[[233361,463323],[0,6482]],[[233361,463323],[-985,-8]],[[232376,463315],[-330,-13]],[[235994,469771],[0,-4895]],[[235994,464876],[0,-1607]],[[235994,463269],[-1314,27]],[[238625,469779],[-2,-6531]],[[238623,463248],[-1316,8]],[[237307,463256],[0,1612]],[[237307,464868],[1,4897]],[[237307,464868],[-1313,8]],[[239944,469765],[-5,-6533]],[[239939,463232],[-1316,16]],[[241256,469753],[-1,-4930]],[[241255,464823],[1,-1610]],[[241256,463213],[-1317,19]],[[242573,464818],[-1318,5]],[[291144,468309],[49,-3777],[-226,-2027]],[[290967,462505],[-369,-97],[-984,-2871],[-607,-823]],[[289007,458714],[112,1789],[-67,1881],[190,1044],[98,3291]],[[225234,467036],[13,-6037]],[[225247,460999],[-1,-6480]],[[225246,454519],[-1283,-6]],[[223963,454513],[-1286,-11]],[[222677,454502],[-33,1]],[[222644,454503],[-31,12930],[-32,406]],[[268694,465642],[-316,-1304],[-142,-3077]],[[268236,461261],[-593,-71]],[[267643,461190],[-55,8219]],[[267921,469504],[681,71],[92,-3933]],[[267643,461190],[-1306,-223]],[[266337,460967],[-314,-75]],[[266023,460892],[-61,6555]],[[301815,469097],[129,-3011],[504,-1290],[-172,-917],[-656,-1010],[-20,-1435],[-247,-532]],[[301353,460902],[-115,246]],[[301238,461148],[-90,2974],[-550,962],[-3,1485]],[[227519,468696],[-1,-7666]],[[227518,461030],[-973,-16]],[[226545,461014],[-1298,-15]],[[228824,467044],[-4,-7638]],[[228820,459406],[-975,10]],[[227845,459416],[1,1618],[-328,-4]],[[281698,462564],[-753,1]],[[280945,462565],[-432,285]],[[250130,468597],[9,-6418]],[[250139,462179],[-99,3]],[[250040,462182],[-1215,98]],[[248825,462280],[-2,5736]],[[181694,462829],[-192,-165]],[[251780,468553],[1,-6528]],[[251781,462025],[-456,57]],[[251325,462082],[-1186,97]],[[221409,466472],[43,-12006]],[[221452,454466],[-68,2]],[[221384,454468],[-1339,-5]],[[253091,468542],[1,-4305]],[[253092,464237],[4,-2164]],[[253096,462073],[-1122,-19]],[[251974,462054],[-193,-29]],[[254427,468545],[185,-1078],[-127,-2165]],[[254485,465302],[-1064,31],[0,-1088],[-329,-8]],[[292448,466455],[-171,-3336],[-36,-2654]],[[292241,460465],[-527,-990]],[[291714,459475],[-489,1291],[-258,1739]],[[293552,461508],[-1311,-1043]],[[248825,462280],[-247,1]],[[248578,462281],[-1394,24]],[[222644,454503],[-1192,-37]],[[287015,460504],[-343,-51]],[[286672,460453],[-34,4021]],[[287685,466341],[71,-5737]],[[287756,460604],[-741,-100]],[[155790,452937],[-801,-56]],[[154989,452881],[-846,-100]],[[266023,460892],[-1299,-123]],[[264724,460769],[-27,1]],[[264697,460770],[-49,6554]],[[264697,460770],[-1281,-49]],[[263416,460721],[-6,6477]],[[263416,460721],[-329,-8]],[[263087,460713],[-984,-2]],[[262103,460711],[-7,6504]],[[262103,460711],[-633,-30]],[[261470,460681],[-681,30]],[[260789,460711],[-6,6455]],[[260789,460711],[-616,-16]],[[260173,460695],[-1419,-24]],[[258754,460671],[182,6483]],[[284882,462947],[17,-1461],[-606,385]],[[284293,461871],[-102,1734],[-621,-10]],[[229897,462627],[-253,6],[-13,-4592]],[[229631,458041],[-267,-255]],[[229364,457786],[-544,3],[0,1617]],[[295672,466664],[201,-1870],[-69,-1579]],[[295804,463215],[-69,-4535]],[[295735,458680],[-148,-5073]],[[295587,453607],[-1209,182]],[[294378,453789],[-26,1]],[[294352,453790],[-31,692],[433,7878]],[[289007,458714],[-9,-2218]],[[288998,456496],[-609,11],[-4,988],[-572,205],[-57,2904]],[[297645,459261],[-169,1431],[-916,-277],[9,882],[-474,582],[-291,1336]],[[297734,466298],[148,-1092],[-43,-2780],[-194,-3165]],[[301238,461148],[-70,-969]],[[301168,460179],[-67,-41]],[[301101,460138],[28,-398]],[[301129,459740],[-2,-4]],[[301127,459736],[-256,-725]],[[300871,459011],[-22,-492]],[[300849,458519],[-74,-391]],[[300775,458128],[-385,553],[-40,-2081],[-373,-818]],[[299977,455782],[-294,713],[-11,1199],[281,1311],[-388,367],[185,1163],[57,2437],[-390,-234],[39,1513],[-540,411],[-112,1448]],[[299977,455782],[-56,-2597]],[[299921,453185],[-840,-170]],[[299081,453015],[-844,386]],[[298237,453401],[-93,27]],[[298144,453428],[2,2448],[-359,413],[119,1141]],[[297906,457430],[27,1226],[-288,605]],[[184288,458960],[0,-6128]],[[184288,452832],[-2898,-85]],[[181390,452747],[-671,9]],[[246587,462328],[-37,-555],[502,-1806]],[[247052,459967],[-532,14],[-2,-1629],[-648,10]],[[245870,458362],[-646,9]],[[245224,458371],[-8,6518]],[[254485,465302],[3,-3266]],[[254488,462036],[-1092,47]],[[253396,462083],[-300,-10]],[[245224,458371],[-650,13]],[[244574,458384],[-651,-1]],[[243923,458383],[-28,6471]],[[237307,463256],[111,-1603],[1,-4876]],[[237419,456777],[-650,-3]],[[236769,456774],[-649,-15]],[[236120,456759],[0,4918],[-126,1592]],[[243923,458383],[-652,50]],[[243271,458433],[-651,-34]],[[242620,458399],[-47,6419]],[[242620,458399],[-652,5]],[[241968,458404],[-654,-10]],[[241314,458394],[-58,4819]],[[286672,460453],[9,-2065],[-460,404],[-3,-1031],[-340,350]],[[285878,458111],[-226,20]],[[285652,458131],[-201,28],[-14,4884]],[[209220,452897],[0,-5655]],[[209220,447242],[1,-2489]],[[209221,444753],[-1673,14],[-1,1638]],[[207547,446405],[-7,17807]],[[207547,446405],[-1741,68]],[[205806,446473],[-16,14424]],[[189734,452894],[-1285,-39]],[[188449,452855],[-244,1757],[-87,2140],[178,1265],[-101,2588]],[[284293,461871],[21,-3935],[375,114]],[[284689,458050],[-2,-5187]],[[284687,452863],[-1795,-1]],[[282892,452862],[-390,-48]],[[282502,452814],[75,8824]],[[278850,462878],[-1,-10015]],[[278849,452863],[-1529,-47]],[[277320,452816],[-423,27],[0,5035]],[[276897,457878],[602,1757],[633,2570],[508,1259]],[[232376,463315],[-1,-1600],[202,-13],[-4,-4901]],[[232573,456801],[-1911,67]],[[230662,456868],[1,1145]],[[230663,458013],[-154,1202],[39,2678],[-138,92]],[[234680,463296],[161,-1607],[-5,-4920]],[[234836,456769],[-647,13]],[[234189,456782],[-648,10]],[[233541,456792],[3,4901],[-183,1630]],[[233541,456792],[-968,9]],[[236120,456759],[-644,5]],[[235476,456764],[-640,5]],[[238623,463248],[102,-1618],[-1,-4868]],[[238724,456762],[-656,0]],[[238068,456762],[-649,15]],[[239939,463232],[70,-6471]],[[240009,456761],[-640,-7]],[[239369,456754],[-645,8]],[[241314,458394],[-654,-6],[2,-1611]],[[240662,456777],[-653,-16]],[[297906,457430],[-486,-1106],[-24,857],[-523,-375],[-118,1160],[-154,-1681],[-621,1035],[76,1737],[-321,-377]],[[285652,458131],[-963,-81]],[[280945,462565],[4,-9702]],[[280949,452863],[-1704,-50]],[[279245,452813],[-396,50]],[[230663,458013],[-1032,28]],[[282502,452814],[-1272,49]],[[281230,452863],[-281,0]],[[291714,459475],[-261,-2860],[238,-599]],[[291691,456016],[-916,-2846]],[[290775,453170],[-1003,-3057]],[[289772,450113],[-329,184],[-290,2566]],[[289153,452863],[-165,772],[10,2861]],[[248578,462281],[18,-5761]],[[248596,456520],[-1109,-47]],[[247487,456473],[-210,622],[-225,2872]],[[294352,453790],[-85,-1335],[-514,519],[-607,1358]],[[293146,454332],[53,903]],[[293199,455235],[352,2852],[1,3421]],[[249240,456572],[-644,-52]],[[250040,462182],[14,-5553]],[[250054,456629],[-814,-57]],[[251325,462082],[1,-6381]],[[251326,455701],[-650,-38],[2,1005],[-624,-39]],[[186724,458176],[47,-5357]],[[186771,452819],[-155,1]],[[186616,452820],[-2328,12]],[[253396,462083],[-8,-6346]],[[253388,455737],[-108,0]],[[253280,455737],[-976,-13]],[[252304,455724],[-325,0]],[[251979,455724],[-5,6330]],[[251979,455724],[-653,-23]],[[254614,455702],[-1226,35]],[[254488,462036],[-82,-3532],[208,-2802]],[[293199,455235],[-367,802],[-92,-1373],[-647,330],[-402,1022]],[[301127,459736],[69,-1616]],[[301196,458120],[-253,-1012],[-168,1020]],[[300849,458519],[22,492]],[[301101,460138],[28,-398]],[[301353,460902],[-185,-723]],[[227845,459416],[-2,-4858]],[[227843,454558],[-1298,-22]],[[226545,454536],[0,6478]],[[212995,452955],[-1853,-35]],[[211142,452920],[-108,11]],[[226545,454536],[3,-3229]],[[226548,451307],[-1288,-25]],[[225260,451282],[-14,3237]],[[266372,454459],[-653,-59]],[[265719,454400],[-998,-202]],[[264721,454198],[3,6571]],[[266337,460967],[35,-6508]],[[203590,460931],[14,-19328],[-709,2],[8,-7373]],[[202903,434232],[-1501,66]],[[201402,434298],[-1279,5]],[[200123,434303],[-1673,-17]],[[198450,434286],[-31,12242],[1170,-40],[16,8015],[-52,3235]],[[205806,446473],[3,-12257]],[[205809,434216],[-2545,-6]],[[203264,434210],[-361,22]],[[188449,452855],[-1678,-36]],[[264721,454198],[-644,35]],[[264077,454233],[-965,-58]],[[263112,454175],[-25,6538]],[[263112,454175],[-326,39]],[[262786,454214],[-1301,-17]],[[261485,454197],[-15,6484]],[[260173,460695],[4,-6539]],[[260177,454156],[-1281,40]],[[258896,454196],[-2,3200],[-392,-4]],[[258502,457392],[252,3279]],[[261485,454197],[-1308,-41]],[[289153,452863],[-334,-23]],[[288819,452840],[-1736,23]],[[287083,452863],[-29,3458],[98,835],[-137,3348]],[[287083,452863],[-115,0]],[[286968,452863],[-1145,0]],[[285823,452863],[55,5248]],[[247487,456473],[432,-1435],[26,-1576]],[[247945,453462],[-2076,28]],[[245869,453490],[1,4872]],[[229364,457786],[-3,-3238]],[[229361,454548],[-545,3]],[[228816,454551],[-973,7]],[[301793,457791],[116,-445]],[[301909,457346],[-116,445]],[[301196,458120],[304,-647]],[[301500,457473],[18,-1676],[-433,-1150]],[[301085,454647],[-839,-2061]],[[300246,452586],[-325,599]],[[298144,453428],[-1041,73]],[[297103,453501],[-1391,88]],[[295712,453589],[-125,18]],[[301909,457346],[403,-2846],[-196,-1500],[475,-1515],[5,-2151]],[[302596,449334],[-234,-1189]],[[302362,448145],[-280,-204],[-97,-1527],[-241,-453]],[[301744,445961],[-218,3011],[-291,-217],[146,1519],[-214,1940],[-82,2433]],[[301500,457473],[293,318]],[[243271,458433],[-1,-8140]],[[243270,450293],[-1301,18]],[[241969,450311],[-1,8093]],[[244574,458384],[-7,-6498]],[[244567,451886],[-1,-1626]],[[244566,450260],[-1296,33]],[[241969,450311],[-1303,-7]],[[240666,450304],[-4,6473]],[[245869,453490],[0,-1629]],[[245869,451861],[-1302,25]],[[285823,452863],[-1027,0]],[[284796,452863],[-109,0]],[[230662,456868],[249,-1941],[-15,-1182]],[[230896,453745],[-107,-597],[-679,13]],[[230110,453161],[-2,1379],[-747,8]],[[198450,434286],[-3153,-25]],[[195297,434261],[-2648,-56]],[[192649,434205],[-133,0]],[[192516,434205],[1,10793]],[[277320,452816],[-6,-2742]],[[277314,450074],[-2528,-14]],[[274786,450060],[0,2383]],[[274786,452443],[526,1090],[1585,4345]],[[258896,454196],[-9,-5791]],[[258887,448405],[-831,-14]],[[258056,448391],[-837,12]],[[257219,448403],[579,2539],[358,3965],[346,2485]],[[232573,456801],[-5,-6484]],[[232568,450317],[-1299,59]],[[231269,450376],[19,2011],[-392,1358]],[[240666,450304],[-1298,5]],[[239368,450309],[1,6445]],[[235476,456764],[0,-6454]],[[235476,450310],[-323,-7]],[[235153,450303],[-970,19]],[[234183,450322],[6,6460]],[[234183,450322],[-1294,1]],[[232889,450323],[-321,-6]],[[238068,456762],[1,-6440]],[[238069,450322],[-327,1]],[[237742,450323],[-971,-4]],[[236771,450319],[-2,6455]],[[236771,450319],[-324,-4]],[[236447,450315],[-971,-5]],[[239368,450309],[-323,8]],[[239045,450317],[-976,5]],[[251326,455701],[-4,-4851]],[[251322,450850],[-1168,-69],[-750,255]],[[249404,451036],[-159,538]],[[249245,451574],[-5,4998]],[[249245,451574],[-1296,-32]],[[247949,451542],[-4,1920]],[[293146,454332],[-66,-9100]],[[293080,445232],[-482,-138],[-384,934],[-288,-777]],[[291926,445251],[-77,1003],[-501,1869],[338,2426],[-911,2621]],[[254614,455702],[218,-1446],[203,-4308],[236,-2529]],[[255271,447419],[-5,-4485]],[[255266,442934],[-738,66],[-9,1648],[-322,-35],[-7,1623],[-327,775]],[[253863,447011],[320,581],[-17,5162],[-954,-145]],[[253212,452609],[68,3128]],[[252304,455724],[-36,-8080]],[[252268,447644],[-1,-1641]],[[252267,446003],[-938,-57]],[[251329,445946],[-7,4904]],[[253212,452609],[3,-4870]],[[253215,447739],[-947,-95]],[[216537,454582],[2,-6500]],[[216539,448082],[-1559,-14]],[[214980,448068],[-230,-4],[4,4972]],[[301744,445961],[-236,-1674],[-533,-780]],[[300975,443507],[-36,3035],[-176,276]],[[300763,446818],[-87,707]],[[300676,447525],[-253,1172]],[[300423,448697],[-177,3889]],[[218154,454507],[10,-6475]],[[218164,448032],[-1571,52]],[[216593,448084],[-54,-2]],[[230110,453161],[-1,-5099]],[[230109,448062],[-977,14]],[[229132,448076],[-318,4]],[[228814,448080],[2,6471]],[[227843,454558],[1,-6473]],[[227844,448085],[-1288,-18]],[[226556,448067],[-8,3240]],[[228814,448080],[-648,2]],[[228166,448082],[-322,3]],[[219766,454469],[6,-6447]],[[219772,448022],[-1243,-2]],[[218529,448020],[-365,12]],[[225260,451282],[0,-3235]],[[225260,448047],[-1272,-15]],[[223988,448032],[-19,0]],[[223969,448032],[-6,6481]],[[221384,454468],[0,-6437]],[[221384,448031],[-1572,-10]],[[219812,448021],[-40,1]],[[222677,454502],[3,-6462]],[[222680,448040],[-1296,-9]],[[223969,448032],[-1262,4]],[[222707,448036],[-27,4]],[[265719,454400],[30,-6681]],[[265749,447719],[-327,-65]],[[265422,447654],[-1337,-251]],[[264085,447403],[-8,6830]],[[294378,453789],[-86,-7126]],[[294292,446663],[-33,-2600]],[[294259,444063],[-1125,-724],[-133,-918]],[[293001,442421],[79,2811]],[[302989,445850],[-269,-1329],[-502,-404],[144,4028]],[[302596,449334],[321,-1189],[408,-370],[764,1511],[-341,4569],[401,-2137],[107,-3239],[-210,-1768],[-1057,-861]],[[262786,454214],[4,-5817]],[[262790,448397],[-1035,-6]],[[261755,448391],[-266,4]],[[261489,448395],[-4,5802]],[[264085,447403],[-109,-15]],[[263976,447388],[-1133,-180]],[[262843,447208],[-53,1189]],[[261489,448395],[-1024,-15]],[[260465,448380],[-348,0]],[[260117,448380],[68,740],[-8,5036]],[[260117,448380],[-775,27]],[[259342,448407],[-455,-2]],[[295712,453589],[-58,-1345],[397,121],[-173,-3103],[-189,-154],[94,-2952]],[[295783,446156],[-481,-2335],[-431,-845]],[[294871,442976],[-365,419],[-214,3268]],[[231269,450376],[205,-1282],[-160,-2130]],[[231314,446964],[-897,11]],[[230417,446975],[1,1083],[-309,4]],[[297103,453501],[5,-4179],[88,62],[182,-3932]],[[297378,445452],[-156,-333]],[[297222,445119],[-108,1174],[-581,-359],[-107,-908]],[[296426,445026],[-541,-412],[-102,1542]],[[298237,453401],[8,-1300],[-328,-15],[-2,-2289],[170,-1516],[-230,-737]],[[297855,447544],[-477,-2092]],[[247949,451542],[-252,-2717]],[[247697,448825],[-205,-1009]],[[247492,447816],[-439,832],[-669,-719],[-515,680]],[[245869,448609],[0,3252]],[[299081,453015],[27,-5278]],[[299108,447737],[6,-1575]],[[299114,446162],[-459,-103],[-560,582],[-240,903]],[[300423,448697],[-95,-429]],[[300328,448268],[-110,206]],[[300218,448474],[-189,-592],[-921,-145]],[[291926,445251],[-301,-1608],[-771,-203],[-6,-1281]],[[290848,442159],[-634,1016],[-245,2280]],[[289969,445455],[47,2798],[-244,1860]],[[160757,452819],[3,-15155]],[[160760,437664],[-2931,-15]],[[157829,437649],[51,2566],[-254,887],[-643,-3073],[-236,35],[-241,-1729],[155,-2198],[-334,193],[-289,1393],[-274,-64],[-470,1939]],[[155294,437598],[-187,3492],[-518,272]],[[154589,441362],[110,941],[-260,2964],[146,1892],[-112,2512],[386,1397],[130,1813]],[[214980,448068],[2,-6471]],[[214982,441597],[-197,8],[0,-3232]],[[214785,438373],[-1546,1]],[[213239,438374],[-74,4048]],[[213165,442422],[1,5661],[-117,1089],[3,3792]],[[213165,442422],[-2040,-26]],[[211125,442396],[-4,4869]],[[211121,447265],[21,5655]],[[188449,452855],[1,-2742],[226,-3238],[-46,-2736],[-189,-2015]],[[188441,442124],[-433,106],[-167,-982],[-443,939]],[[187398,442187],[-88,2092],[-182,-89],[-193,3079],[-3,3037],[-316,2514]],[[211121,447265],[-1901,-23]],[[189737,445043],[-2,-6108]],[[189735,438935],[-608,-2001]],[[189127,436934],[120,1271],[-305,2684],[-249,88]],[[188693,440977],[-252,1147]],[[286968,452863],[88,-6473]],[[287056,446390],[-234,-101],[-57,-1949]],[[286765,444340],[-1655,896]],[[285110,445236],[-170,121]],[[284940,445357],[-144,7506]],[[284940,445357],[-238,-844],[-1781,-169]],[[282921,444344],[-29,8518]],[[187398,442187],[-205,138],[-194,-1813],[-583,5],[-712,-4840]],[[185704,435677],[-852,-1424],[-3463,-5]],[[181389,434248],[1,18499]],[[173097,434253],[-1,-6650],[-636,-11],[-149,-2165]],[[172311,425427],[-25,2930],[-933,15],[0,3230],[-3183,-36],[0,1954],[-1457,-9]],[[166713,433511],[-56,0],[16,19240]],[[173097,452848],[0,-18595]],[[181389,434248],[-13,-16439]],[[181376,417809],[-3391,104],[-1591,99]],[[176394,418012],[-462,-9],[-438,10035],[-1,6209],[-1194,9]],[[174299,434256],[-1202,-3]],[[281230,452863],[9,-7106]],[[281239,445757],[-601,-298]],[[280638,445459],[-179,516],[-1317,-112]],[[279142,445863],[103,6950]],[[282921,444344],[4,-1186]],[[282925,443158],[-1089,-70]],[[281836,443088],[-171,12],[-426,2657]],[[154589,441362],[-304,-18],[-3,1572],[-819,-16]],[[153463,442900],[-268,5082],[-262,812],[123,4043]],[[289969,445455],[-804,-6747]],[[289165,438708],[-411,-131]],[[288754,438577],[180,478],[-59,7138]],[[288875,446193],[-56,6647]],[[288875,446193],[-721,12]],[[288154,446205],[-1098,185]],[[279142,445863],[-1549,13]],[[277593,445876],[-281,-13]],[[277312,445863],[2,4211]],[[164792,452769],[-2,-15096]],[[164790,437673],[-3709,-1]],[[161081,437672],[-321,-8]],[[166713,433511],[-9,-8230],[-71,-9],[-2,-9666],[318,14]],[[166949,415620],[46,-3526],[105,-404],[-51,-2899]],[[167049,408791],[-263,-205]],[[166786,408586],[-506,-709],[-437,-1338],[-205,182],[103,-3534],[-151,-1502]],[[165590,401685],[-468,-1589],[-344,2]],[[164778,400098],[-9,2800]],[[164769,402898],[12,2458]],[[164781,405356],[6,5108]],[[164787,410464],[3,27209]],[[253863,447011],[-4,808],[-643,-82]],[[253216,447737],[-1,2]],[[274786,450060],[0,-6513]],[[274786,443547],[-1348,41]],[[273438,443588],[-1,3974]],[[273437,447562],[3,2573]],[[273440,450135],[1346,2308]],[[245869,448609],[-4,-3244]],[[245865,445365],[-1300,23]],[[244565,445388],[1,4872]],[[249404,451036],[-5,-5897]],[[249399,445139],[-643,-17]],[[248756,445122],[-901,11]],[[247855,445133],[-158,3692]],[[226556,448067],[2,-4023]],[[226558,444044],[-753,-845],[-533,-1]],[[225272,443198],[-12,4849]],[[251329,445946],[-636,7],[1,-813]],[[250694,445140],[-1295,-1]],[[232889,450323],[0,-4862],[165,-1791]],[[233054,443670],[-1388,16]],[[231666,443686],[-257,439],[-95,2839]],[[243270,450293],[6,-6523]],[[243276,443770],[-325,-13]],[[242951,443757],[-980,-18]],[[241971,443739],[-2,6572]],[[237742,450323],[69,-6544]],[[237811,443779],[-1256,-154]],[[236555,443625],[-107,1818],[-1,4872]],[[234183,450322],[1,-4860],[144,-1818]],[[234328,443644],[-317,10]],[[234011,443654],[-957,16]],[[235153,450303],[2,-4797],[121,-1872]],[[235276,443634],[-948,10]],[[241971,443739],[-319,-4]],[[241652,443735],[-960,-14]],[[240692,443721],[-26,6583]],[[239045,450317],[54,-6615]],[[239099,443702],[0,-314]],[[239099,443388],[-1288,391]],[[240692,443721],[-320,-6]],[[240372,443715],[-1273,-13]],[[236555,443625],[-1279,9]],[[244565,445388],[-5,-3262]],[[244560,442126],[-322,13]],[[244238,442139],[-104,1623],[-858,8]],[[273437,447562],[-275,-15],[3,-1357],[-539,-11],[-3,-1320],[-265,-4]],[[272358,444855],[-272,1147]],[[272086,446002],[570,2451],[784,1682]],[[277312,445863],[-602,-34],[-476,-2457]],[[276234,443372],[-1448,-20]],[[274786,443352],[0,195]],[[247855,445133],[-29,-825],[-657,-1555],[-5,-2417]],[[247164,440336],[-1778,119]],[[245386,440455],[0,4]],[[245386,440459],[89,1581],[707,640]],[[246182,442680],[363,172],[871,2340],[76,2624]],[[300676,447525],[-94,-1308],[-254,2051]],[[246182,442680],[7,2674],[-324,11]],[[300218,448474],[-108,-2110]],[[300110,446364],[-154,-894],[-847,-110]],[[299109,445360],[5,802]],[[260465,448380],[14,-4389]],[[260479,443991],[3,-1610]],[[260482,442381],[-1130,-19]],[[259352,442362],[-1,806]],[[259351,443168],[-9,5239]],[[259351,443168],[-1136,-49],[2,-810]],[[258217,442309],[-162,-2]],[[258055,442307],[103,4030],[-102,2054]],[[258055,442307],[-491,-569],[-231,-2173],[-408,-905]],[[256925,438660],[-7,8809]],[[256918,447469],[301,934]],[[262847,444118],[-1085,-69]],[[261762,444049],[-7,4342]],[[262843,447208],[4,-3090]],[[261762,444049],[-1283,-58]],[[229132,448076],[0,-5330]],[[229132,442746],[-759,-1482],[-210,137]],[[228163,441401],[3,6681]],[[228163,441401],[-319,227]],[[227844,441628],[-642,-1180]],[[227202,440448],[0,1151],[-293,1]],[[226909,441600],[0,2456],[-351,-12]],[[230417,446975],[2,-2973],[320,-2435]],[[230739,441567],[-395,2]],[[230344,441569],[-276,747],[-936,373]],[[229132,442689],[0,57]],[[218529,448020],[-5,-6446]],[[218524,441574],[-1550,27]],[[216974,441601],[-383,9]],[[216591,441610],[2,6474]],[[216591,441610],[-1609,-13]],[[225272,443198],[0,-1617]],[[225272,441581],[-1262,6]],[[224010,441587],[-20,-2]],[[223990,441585],[-2,6447]],[[222707,448036],[24,-6450]],[[222731,441586],[-12,-6463]],[[222719,435123],[-608,-9]],[[222111,435114],[-2224,2]],[[219887,435116],[-75,6454]],[[219812,441570],[0,6451]],[[219812,441570],[-1288,4]],[[223990,441585],[-1259,1]],[[267414,445851],[-697,-80]],[[266717,445771],[-430,-33],[-394,-2264],[-479,-1509]],[[265414,441965],[1,1360]],[[265415,443325],[7,4329]],[[265749,447719],[781,160]],[[266530,447879],[6,1]],[[266536,447880],[30,6]],[[266566,447886],[16,1]],[[266582,447887],[26,6]],[[266608,447893],[806,-2042]],[[255266,442934],[-3,-3134]],[[255263,439800],[-1357,-110],[6,-1614],[-648,-79]],[[253264,437997],[-22,4868]],[[253242,442865],[-26,4872]],[[267414,445851],[546,-1925],[381,1255],[294,-1579],[-868,-836]],[[267767,442766],[-50,-4]],[[267717,442762],[-15,-1]],[[267702,442761],[-769,5],[-213,795]],[[266720,443561],[-3,2210]],[[253242,442865],[-957,-108]],[[252285,442757],[-18,3246]],[[265415,443325],[-1279,-38]],[[264136,443287],[-108,529],[-52,3572]],[[273438,443588],[0,-2864]],[[273438,440724],[-1081,8]],[[272357,440732],[1,4123]],[[299109,445360],[-23,-3357],[-140,-1618]],[[298946,440385],[-436,-421],[-482,288],[-416,-839],[-291,2723]],[[297321,442136],[350,235],[-50,1823],[-299,-180],[-100,1105]],[[256110,445861],[11,-7107]],[[256121,438754],[-158,-435]],[[255963,438319],[-386,-1051],[-314,72]],[[255263,437340],[0,2460]],[[255271,447419],[248,-1015],[591,-543]],[[256925,438660],[-559,918],[-245,-824]],[[256110,445861],[808,1608]],[[264136,443287],[1,-1079]],[[264137,442208],[-1288,-28]],[[262849,442180],[-2,1938]],[[211125,442396],[-24,-801]],[[211101,441595],[-1879,-26]],[[209222,441569],[-1,3184]],[[231666,443686],[163,-2163]],[[231829,441523],[-1090,44]],[[300704,446133],[-85,-2792],[-210,504],[295,2288]],[[300975,443507],[-208,-748],[-4,4059]],[[294871,442976],[348,-1153],[336,-2034],[-121,-1229]],[[295434,438560],[-200,-1187],[-705,-2090],[-626,-1184]],[[293903,434099],[-195,2024],[683,2086],[-173,2860]],[[294218,441069],[41,2994]],[[209222,441569],[-4,-7295]],[[209218,434274],[-2479,-59]],[[206739,434215],[-930,1]],[[300110,446364],[27,-3366],[-179,-1833],[-1042,-1242],[30,462]],[[288154,446205],[-316,-4003]],[[287838,442202],[-487,-794],[-761,-135]],[[286590,441273],[175,3067]],[[297027,438996],[-21,79]],[[297006,439075],[21,-79]],[[297321,442136],[207,-2885],[-531,-113]],[[296997,439138],[-298,3270],[-256,-279],[-17,2897]],[[296997,439138],[9,-63]],[[297027,438996],[-1112,58],[-473,-1600],[-8,1106]],[[288754,438577],[-264,-1321]],[[288490,437256],[-133,486],[-104,2828],[-415,1632]],[[293001,442421],[-13,-2191]],[[292988,440230],[-683,-3302]],[[292305,436928],[-373,1054]],[[291932,437982],[-934,2867]],[[290998,440849],[-150,1310]],[[252285,442757],[26,-6500]],[[252311,436257],[-960,-39],[-1,-3314]],[[251350,432904],[-324,-34]],[[251026,432870],[0,3329],[-319,-13]],[[250707,436186],[-5,3837]],[[250702,440023],[-8,5117]],[[272357,440732],[-1,0]],[[272356,440732],[-569,48],[73,-1359],[-321,-13]],[[271539,439408],[-538,-38]],[[271001,439370],[3,1405],[-263,14],[8,2860]],[[270749,443649],[623,-331],[714,2684]],[[280638,445459],[-3,-3672],[463,-4],[46,-3243]],[[281144,438540],[-1140,433],[-177,-967]],[[279827,438006],[-70,1137],[-624,1848],[-379,-397]],[[278754,440594],[88,2092],[292,-301],[8,3478]],[[278754,440594],[-317,-166]],[[278437,440428],[5,1839],[-538,104],[-216,-927]],[[277688,441444],[-95,4432]],[[277688,441444],[-1,-946],[-351,-263],[-253,-2768]],[[277083,437467],[-849,-19]],[[276234,437448],[0,5924]],[[269692,442196],[16,-2669]],[[269708,439527],[-1391,121]],[[268317,439648],[-18,2604],[-150,10]],[[268149,442262],[561,621],[551,-1528],[431,841]],[[266720,443561],[-15,-4584]],[[266705,438977],[-3,-1624]],[[266702,437353],[-1282,19]],[[265420,437372],[-6,4593]],[[281836,443088],[1,-1968],[-292,-2833]],[[281545,438287],[-401,253]],[[290998,440849],[-384,-1438],[-427,-3445]],[[290187,435966],[-461,1078],[82,1910],[-643,-246]],[[245386,440459],[-829,46],[3,1621]],[[285110,445236],[175,-3416],[441,-1905],[405,-535]],[[286131,439380],[-539,-2233]],[[285592,437147],[-256,304]],[[285336,437451],[-455,-614]],[[284881,436837],[-228,-952],[-463,-355]],[[284190,435530],[-1068,5402],[-197,2226]],[[286590,441273],[-78,-1278]],[[286512,439995],[-381,-615]],[[250702,440023],[-480,-175],[-57,-1257],[-306,11],[0,-1588]],[[249859,437014],[-479,1]],[[249380,437015],[-1,1587],[-610,12]],[[248769,438614],[-13,6508]],[[248769,438614],[-31,-1592],[-323,7]],[[248415,437029],[-1262,35]],[[247153,437064],[11,3272]],[[192516,434205],[-2782,5],[1,4725]],[[262849,442180],[1,-2881]],[[262850,439299],[-1082,-132]],[[261768,439167],[-6,4882]],[[261768,439167],[-323,-1]],[[261445,439166],[-639,37],[-320,533]],[[260486,439736],[-4,2645]],[[226909,441600],[-5,-1596],[-968,-299],[-620,-535],[-31,2412]],[[225285,441582],[-13,-1]],[[293006,440243],[-18,-18]],[[292988,440225],[0,5]],[[294218,441069],[-1212,-826]],[[302428,442673],[372,-1939],[-773,-264],[113,1841],[288,362]],[[271001,439370],[-263,5],[-6,-1404],[-273,-2],[-271,-1169],[-5,-1369]],[[270183,435431],[-459,42]],[[269724,435473],[-16,4054]],[[269692,442196],[936,1652],[121,-199]],[[244238,442139],[-5,-4867]],[[244233,437272],[-641,8]],[[243592,437280],[-640,14]],[[242952,437294],[-1,6463]],[[239099,443388],[2,-6149]],[[239101,437239],[-640,12]],[[238461,437251],[-646,14]],[[237815,437265],[-4,6514]],[[242952,437294],[-653,-17]],[[242299,437277],[-642,-14]],[[241657,437263],[-5,6472]],[[237815,437265],[-627,-98]],[[237188,437167],[-633,7]],[[236555,437174],[0,6451]],[[241657,437263],[-641,-12]],[[241016,437251],[-639,-8]],[[240377,437243],[-5,6472]],[[240377,437243],[-639,-2]],[[239738,437241],[-637,-2]],[[234011,443654],[-3,-6441]],[[234008,437213],[-637,14]],[[233371,437227],[-1382,-2]],[[231989,437225],[-120,576]],[[231869,437801],[88,2412],[-128,1310]],[[235276,443634],[0,-6443]],[[235276,437191],[-632,8]],[[234644,437199],[-636,14]],[[236555,437174],[-638,8]],[[235917,437182],[-641,9]],[[274786,443352],[1,-6623]],[[274787,436729],[-1339,18]],[[273448,436747],[-10,3977]],[[267767,442766],[-50,-4]],[[267702,442761],[447,-499]],[[268317,439648],[3,-646]],[[268320,439002],[-1615,-25]],[[276234,437448],[-271,-1900]],[[275963,435548],[-140,819],[-1037,201]],[[274786,436568],[1,161]],[[265420,437372],[-967,-36]],[[264453,437336],[-1,4877],[-315,-5]],[[259352,442362],[14,-4890],[-65,-5]],[[259301,437467],[-1086,-27]],[[258215,437440],[2,4869]],[[284190,435530],[0,-456]],[[284190,435074],[-1015,-1516],[-180,1961],[-470,731],[-132,1393],[-289,-76],[-14,1365],[-389,-1859]],[[281701,437073],[-156,1214]],[[155294,437598],[-138,-2080],[141,-716],[-208,-2139],[-386,312],[219,-3715],[-7,-13593]],[[154915,415667],[-1334,-12]],[[153581,415655],[-243,1900],[-703,2915],[-128,3411],[386,4770],[132,-280],[309,6363],[-132,874],[261,7292]],[[253264,437997],[-21,-1627]],[[253243,436370],[-932,-113]],[[229132,442689],[-7,-7583]],[[229125,435106],[-7,1]],[[229118,435107],[-1274,15]],[[227844,435122],[0,6506]],[[230344,441569],[400,-3783]],[[230744,437786],[23,-2700]],[[230767,435086],[-404,-539]],[[230363,434547],[0,541],[-1238,18]],[[260486,439736],[-89,-4618]],[[260397,435118],[-729,-71]],[[259668,435047],[-363,782],[-4,1638]],[[213239,438374],[-30,-4080]],[[213209,434294],[-90,-2]],[[213119,434292],[-2031,-1]],[[211088,434291],[13,7304]],[[278437,440428],[-17,-5242]],[[278420,435186],[-185,-771],[-669,-629],[-401,1395],[-70,2246]],[[277095,437427],[-12,40]],[[188693,440977],[-212,-2505],[-448,-762],[-414,553],[-140,-1426]],[[187479,436837],[-928,257],[-847,-1417]],[[258215,437440],[-1290,17]],[[256925,437457],[0,1203]],[[288490,437256],[-135,-732]],[[288355,436524],[-329,-580],[98,-1544],[-739,-1772]],[[287385,432628],[-586,685]],[[286799,433313],[-59,3513],[-251,1238],[23,1931]],[[264453,437336],[-316,-6]],[[264137,437330],[-325,1637],[-962,-17]],[[262850,438950],[0,349]],[[245386,440455],[-115,-1739],[344,-1569],[113,-1545]],[[245728,435602],[-1175,26]],[[244553,435628],[2,1613],[-322,31]],[[216974,441601],[-2,-6470],[57,-809]],[[217029,434322],[-2234,-1]],[[214795,434321],[-10,4052]],[[219887,435116],[2,-6448]],[[219889,428668],[-1545,-2]],[[218344,428666],[-1309,-44]],[[217035,428622],[-6,5700]],[[304069,440803],[121,-1847],[-424,-198],[303,2045]],[[227844,435122],[-1276,-6]],[[226568,435116],[-6,2365]],[[226562,437481],[640,2967]],[[211088,434291],[-535,-10]],[[210553,434281],[-1335,-7]],[[226562,437481],[-534,-2004],[-732,-3606]],[[225296,431871],[-12,3241]],[[225284,435112],[1,6470]],[[225284,435112],[-1212,5]],[[224072,435117],[-74,0]],[[223998,435117],[12,6470]],[[223998,435117],[-1279,6]],[[231869,437801],[-1125,-15]],[[189127,436934],[-680,-1517],[-235,-1306],[316,-2475],[-193,-1470],[-256,342]],[[188079,430508],[-272,1154]],[[187807,431662],[-214,1796],[-114,3379]],[[279827,438006],[-264,-1318],[-1,-4190]],[[279562,432498],[-1143,100]],[[278419,432598],[1,2588]],[[157829,437649],[146,-436],[-429,-4820],[-421,-4012],[146,-2151],[-836,-2814],[-186,-2443]],[[156249,420973],[222,-710],[144,-5038]],[[156615,415225],[-1701,-21],[1,463]],[[293900,433789],[-376,-1707]],[[293524,432082],[-325,588]],[[293199,432670],[123,2992],[-28,2071],[-288,2510]],[[293903,434099],[-3,-310]],[[291932,437982],[-383,-2133]],[[291549,435849],[-417,-3054],[-322,-187]],[[290810,432608],[-554,3400]],[[290256,436008],[-69,-42]],[[272356,440732],[-5,-6697]],[[272351,434035],[-74,-1524],[-634,144]],[[271643,432655],[-114,1381]],[[271529,434036],[10,5372]],[[273448,436747],[0,-2714],[-243,-5]],[[273205,434028],[-854,7]],[[247153,437064],[-5,-1624]],[[247148,435440],[-963,88]],[[246185,435528],[-457,35]],[[245728,435563],[0,39]],[[250707,436186],[-548,-8],[-300,836]],[[293219,434221],[-863,2534]],[[292356,436755],[-51,173]],[[292988,440225],[220,-3323],[11,-2681]],[[286799,433313],[-277,-2754],[-204,-490]],[[286318,430069],[-412,1992]],[[285906,432061],[44,1187],[-292,2181],[-66,1718]],[[255263,437340],[2,-2899]],[[255265,434441],[-1688,-234]],[[253577,434207],[-321,-56]],[[253256,434151],[-13,2219]],[[261445,439166],[-77,-4820]],[[261368,434346],[-859,-55]],[[260509,434291],[-112,827]],[[294555,427007],[-1,231]],[[294554,427238],[1,-231]],[[294554,427873],[-111,3760]],[[294443,431633],[-93,1192],[769,-305],[174,1129],[1072,-46],[376,297],[903,2986],[-441,-2839],[-371,-1388],[292,-372],[379,1926],[532,898],[205,-1022],[552,1761],[82,-626],[-1554,-3633],[-192,472],[-405,-1606],[-231,346],[-428,-1335],[-389,98],[-351,-945],[-238,353],[-532,-1101]],[[269724,435473],[-278,-7],[9,-1349]],[[269455,434117],[-813,50]],[[268642,434167],[-292,19]],[[268350,434186],[-30,4816]],[[256925,437457],[-1,-4839]],[[256924,432618],[-156,-1387],[-315,-5],[3,-1882]],[[256456,429344],[-470,-1]],[[255986,429343],[-23,8976]],[[271529,434036],[-1228,60]],[[270301,434096],[-118,1335]],[[262850,438950],[1,-4899]],[[262851,434051],[1,-1244]],[[262852,432807],[-755,-88]],[[262097,432719],[-730,-14]],[[261367,432705],[1,1641]],[[268350,434186],[-789,-60]],[[267561,434126],[-857,-29]],[[266704,434097],[-2,3256]],[[281701,437073],[-194,-835],[74,-2824],[-363,-706],[-462,-3036],[47,-402]],[[280803,429270],[26,-144]],[[280829,429126],[-1257,-6]],[[279572,429120],[-10,3378]],[[192649,434205],[0,-3424]],[[192649,430781],[-728,405],[-315,-879],[-787,-888],[-261,131],[-420,-1293]],[[190138,428257],[-340,-1865],[-343,-530],[-618,1479],[-69,1143],[-267,-1698],[-177,190]],[[188324,426976],[-245,3532]],[[284190,435074],[-613,-3675]],[[283577,431399],[-884,-2182]],[[282693,429217],[-399,260],[-333,-971],[-479,890]],[[281482,429396],[-679,-126]],[[290256,436008],[-428,-2350]],[[289828,433658],[-466,-1941],[-519,-917]],[[288843,430800],[-280,2542],[218,671],[-426,2511]],[[264137,437330],[-1,-3255],[-160,-7]],[[263976,434068],[-1125,-17]],[[249380,437015],[-1,-3256]],[[249379,433759],[-966,19]],[[248413,433778],[2,3251]],[[214795,434321],[-2,-29]],[[214793,434292],[-1584,2]],[[255986,429343],[-721,8]],[[255265,429351],[0,5090]],[[292587,430897],[-395,1442]],[[292192,432339],[-104,1880],[-539,1630]],[[292356,436755],[-165,-2166],[367,-970],[29,-2722]],[[231989,437225],[3,-1984]],[[231992,435241],[-431,236],[-484,-1310],[-310,919]],[[164787,410464],[-407,-275]],[[164380,410189],[102,1082],[5,3235],[-258,1376],[-23,1351],[-367,544],[-472,2489],[-707,1249],[-457,-2310],[-371,1200],[1,3540],[-743,-22]],[[161090,423923],[22,8573],[-31,5176]],[[161090,423923],[-473,4]],[[160617,423927],[-1427,-350],[-831,-1031],[-549,335],[-407,-1138],[-270,689],[-884,-1459]],[[285336,437451],[-167,-4196],[366,398],[371,-1592]],[[286318,430069],[-895,-2187]],[[285423,427882],[-525,-888],[-165,332]],[[284733,427326],[26,188]],[[284759,427514],[265,1448],[124,3090]],[[285148,432052],[-223,1660],[-44,3125]],[[259668,435047],[-2,-813]],[[259666,434234],[-619,-58],[-1,-1610]],[[259046,432566],[-835,5]],[[258211,432571],[4,4869]],[[226568,435116],[1,-6480]],[[226569,428636],[-1260,-4]],[[225309,428632],[-13,-1]],[[225296,428631],[0,3240]],[[258211,432571],[-314,19]],[[257897,432590],[-973,28]],[[277095,437427],[-6,-9327]],[[277089,428100],[-1270,89]],[[275819,428189],[-27,3363]],[[275792,431552],[-19,2705],[190,1291]],[[278419,432598],[1,-2521],[-655,-4576]],[[277765,425501],[-675,2581]],[[277090,428082],[-1,18]],[[266704,434097],[-266,-3234]],[[266438,430863],[-1015,33]],[[265423,430896],[-1,1871]],[[265422,432767],[-2,4605]],[[265422,432767],[-638,-292],[0,-814],[-644,-36]],[[264140,431625],[-164,2443]],[[243592,437280],[-7,-4878]],[[243585,432402],[-1284,-20]],[[242301,432382],[-2,4895]],[[244553,435628],[-3,-4868],[-104,1]],[[244446,430761],[-862,16]],[[243584,430777],[1,1625]],[[242301,432382],[-1281,-16]],[[241020,432366],[-4,4885]],[[238461,437251],[3,-4896]],[[238464,432355],[-1277,-24]],[[237187,432331],[1,4836]],[[239738,437241],[4,-4883]],[[239742,432358],[-1278,-3]],[[241020,432366],[-1278,-8]],[[233371,437227],[-2,-4811]],[[233369,432416],[-1193,2]],[[232176,432418],[-184,2823]],[[234644,437199],[-3,-4800]],[[234641,432399],[-1272,17]],[[235917,437182],[-1,-4805]],[[235916,432377],[-1275,22]],[[237187,432331],[-1271,46]],[[187807,431662],[-565,-723],[-182,1854],[-716,-2763]],[[186344,430030],[-640,5647]],[[248413,433778],[-2,-4886]],[[248411,428892],[-1277,44]],[[247134,428936],[14,6504]],[[285148,432052],[-398,108],[-1152,-1498]],[[283598,430662],[-21,737]],[[251026,432870],[-1183,-88]],[[249843,432782],[68,968],[-532,9]],[[292970,430541],[-431,-269]],[[292539,430272],[48,625]],[[293219,434221],[-249,-3680]],[[274786,436568],[0,-4189]],[[274786,432379],[-1580,38]],[[273206,432417],[-1,1611]],[[288843,430800],[-376,-510]],[[288467,430290],[-415,-967]],[[288052,429323],[-667,3305]],[[275792,431552],[-1004,-69]],[[274788,431483],[-2,896]],[[253256,434151],[34,-7012],[-625,-15]],[[252665,427124],[-321,-16],[-27,2627],[-962,-80]],[[251355,429655],[-5,3249]],[[290810,432608],[-339,-2310]],[[290471,430298],[-220,-1439],[-616,-2210]],[[289635,426649],[-20,312]],[[289615,426961],[68,3154],[341,1723],[-196,1820]],[[292192,432339],[-162,208],[-116,-3152]],[[291914,429395],[-248,-1212]],[[291666,428183],[-265,1560],[-471,-722]],[[290930,429021],[-459,1277]],[[186344,430030],[155,-1074],[97,-4631]],[[186596,424325],[-109,-153],[38,-2825],[149,-2529],[-96,-2970]],[[186578,415848],[-452,-1999],[-1271,-19],[-3480,52]],[[181375,413882],[1,3927]],[[245728,435563],[-37,-2695],[-356,-1884],[-62,-2389]],[[245273,428595],[-827,2166]],[[246185,435528],[-13,-8061]],[[246172,427467],[-319,64]],[[245853,427531],[-783,-26]],[[245070,427505],[203,1090]],[[247134,428936],[-3,-1616]],[[247131,427320],[-959,147]],[[270301,434096],[8,-6024]],[[270309,428072],[-263,-12],[2,-1850]],[[270048,426210],[-326,-246]],[[269722,425964],[-6,3196],[-215,1864],[-46,3093]],[[232176,432418],[-58,-2195]],[[232118,430223],[-1754,3]],[[230364,430226],[-1,4321]],[[227844,435122],[-1,-6484]],[[227843,428638],[-1271,-2]],[[226572,428636],[-3,0]],[[225296,428631],[-1222,12]],[[224074,428643],[-2,6474]],[[222111,435114],[24,-6994]],[[222135,428120],[-630,262]],[[221505,428382],[-943,281]],[[220562,428663],[-673,5]],[[224074,428643],[-9,-170]],[[224065,428473],[-506,-690],[-761,186]],[[222798,427969],[-663,151]],[[229118,435107],[-7,-6481]],[[229111,428626],[-1268,12]],[[230364,430226],[0,-4858]],[[230364,425368],[-1251,12]],[[229113,425380],[-2,3246]],[[260509,434291],[15,-6500]],[[260524,427791],[-631,-27]],[[259893,427764],[-208,-13],[-19,6483]],[[255265,429351],[-1,-4574]],[[255264,424777],[-1140,-99]],[[254124,424678],[-508,40],[-39,9489]],[[261367,432705],[3,-4890],[-318,-15]],[[261052,427800],[-528,-9]],[[206643,416247],[0,0]],[[210532,425375],[-1577,18],[-7,-9745]],[[208948,415648],[-2259,-10]],[[206689,415638],[-255,-1]],[[206434,415637],[-6,4869]],[[206428,420506],[-5,1628],[310,-3],[6,12084]],[[210553,434281],[-21,-8906]],[[217035,428622],[-272,6]],[[216763,428628],[-1967,-10]],[[214796,428618],[0,969]],[[214796,429587],[-3,4705]],[[201978,423908],[55,-1918],[16,-7759]],[[202049,414231],[-1129,-109]],[[200920,414122],[-15,3214]],[[200905,417336],[-2,2480],[-1118,-26]],[[199785,419790],[29,5936],[320,1081],[-11,7496]],[[201402,434298],[27,-1460],[436,-670],[158,-1783],[-185,-3986],[140,-2491]],[[204199,424684],[-292,-2571],[-164,468],[-589,-929],[-98,691],[-519,-163],[-107,1114],[-340,-603],[-112,1217]],[[203264,434210],[15,-1191],[530,-3757],[390,-4578]],[[199785,419790],[-1878,-32],[-2612,19]],[[195295,419777],[7,8023]],[[195302,427800],[-5,6461]],[[213087,423794],[-321,0]],[[212766,423794],[-1909,-39]],[[210857,423755],[-6,1618],[-319,2]],[[213119,434292],[6,-4708]],[[213125,429584],[-38,-5790]],[[214796,429587],[-1671,-3]],[[195302,427800],[-314,562],[-118,3255],[-532,-11],[-250,-2208],[-269,1599],[-807,-1145],[-299,856]],[[192713,430708],[-64,73]],[[176394,418012],[112,-5115],[-101,-2198],[49,-2635],[-263,-2403],[2,-5633]],[[176193,400028],[-1933,-7]],[[174260,400021],[29,16934],[-18,16297],[28,1004]],[[174260,400021],[-2037,36],[-1236,-1303]],[[170987,398754],[153,2224],[-118,2607],[482,3074],[266,297],[87,1838],[-89,2169],[75,3206],[-204,1482]],[[171639,415651],[672,9776]],[[206428,420506],[-1667,-25]],[[204761,420481],[-562,4203]],[[259893,427764],[3,-1603]],[[259896,426161],[-839,-54]],[[259057,426107],[-11,6459]],[[268642,434167],[-7,-5295]],[[268635,428872],[-365,-115]],[[268270,428757],[-705,-40]],[[267565,428717],[-4,5409]],[[254124,424678],[8,-1608]],[[254132,423070],[-1470,-13]],[[252662,423057],[3,4067]],[[269722,425964],[-798,-95]],[[268924,425869],[-10,2970],[-279,33]],[[267565,428717],[-860,-299]],[[266705,428418],[-211,275],[-56,2170]],[[271643,432655],[-7,-4585]],[[271636,428070],[-1327,2]],[[264140,431625],[-158,-803],[1,-2439]],[[263983,428383],[-165,-1]],[[263818,428382],[0,807],[-964,-2]],[[262854,429187],[-2,3620]],[[273206,432417],[-2,-3235]],[[273204,429182],[-418,-80],[-224,-1340]],[[272562,427762],[-923,-316]],[[271639,427446],[-3,624]],[[249843,432782],[-231,-3232]],[[249612,429550],[-356,-3635],[-528,-731]],[[248728,425184],[-3,2060],[-321,38],[7,1610]],[[289615,426961],[-382,-1336]],[[289233,425625],[-268,2542],[-150,-335],[-348,2458]],[[171639,415651],[-2673,-44],[-2017,13]],[[288052,429323],[-372,-1083]],[[287680,428240],[-781,-2649],[-748,-726]],[[286151,424865],[-265,1102]],[[285886,425967],[-463,1915]],[[274788,431483],[-1,-3962]],[[274787,427521],[-415,-1046]],[[274372,426475],[-540,316]],[[273832,426791],[-154,2374],[-474,17]],[[251355,429655],[-154,-1644],[-415,-1270],[-378,-46]],[[250408,426695],[-162,393],[-9,2476],[-625,-14]],[[262854,429187],[-1,-2903]],[[262853,426284],[-741,-74]],[[262112,426210],[-15,6509]],[[265423,430896],[0,-3262]],[[265423,427634],[-634,-31],[-321,799],[-485,-19]],[[188324,426976],[-114,-601]],[[188210,426375],[-465,-891],[-618,-2134],[-142,895],[-389,80]],[[293524,432082],[-12,-1259],[-325,-351]],[[293187,430472],[-27,1525]],[[293160,431997],[39,673]],[[262112,426210],[-370,-18]],[[261742,426192],[-685,-6]],[[261057,426186],[-5,1614]],[[294555,427007],[-1,231]],[[294554,427873],[-875,-1167]],[[293679,426706],[-79,470]],[[293600,427176],[63,322]],[[293663,427498],[119,2121],[-126,536]],[[293656,430155],[90,1669],[410,855],[287,-1046]],[[257897,432590],[-1,-3261]],[[257896,429329],[-463,33],[-65,-3266]],[[257368,426096],[-903,15]],[[256465,426111],[-9,3233]],[[259057,426107],[-583,-24]],[[258474,426083],[2,2440],[-422,-1],[-158,807]],[[279572,429120],[-482,-6117]],[[279090,423003],[-351,-509],[-158,819],[-661,807],[-155,1381]],[[292539,430272],[83,-963]],[[292622,429309],[-118,-889]],[[292504,428420],[-590,975]],[[233369,432416],[31,-5977]],[[233400,426439],[-1091,87]],[[232309,426526],[-329,3028],[138,669]],[[234641,432399],[38,-6061]],[[234679,426338],[-801,63]],[[233878,426401],[-478,38]],[[235916,432377],[-1,-6118]],[[235915,426259],[-448,10]],[[235467,426269],[-788,69]],[[243584,430777],[5,-4003]],[[243589,426774],[-630,136]],[[242959,426910],[-660,-98]],[[242299,426812],[2,5570]],[[242299,426812],[-476,-61]],[[241823,426751],[-800,-120]],[[241023,426631],[-3,5735]],[[237187,432331],[-2,-6015]],[[237185,426316],[-604,-37]],[[236581,426279],[-666,-20]],[[238464,432355],[-1,-5921]],[[238463,426434],[-606,-50]],[[237857,426384],[-672,-68]],[[239742,432358],[1,-5854]],[[239743,426504],[-772,-68]],[[238971,426436],[-508,-2]],[[241023,426631],[-213,-26]],[[240810,426605],[-1067,-101]],[[284759,427514],[-273,768],[-697,262]],[[283789,428544],[-185,150],[-6,1968]],[[293187,430472],[-271,-1807],[244,3332]],[[195295,419777],[-1,-10466]],[[195294,409311],[0,-3031]],[[195294,406280],[-155,-665],[-2556,-5]],[[192583,405610],[1,136]],[[192584,405746],[-39,1805],[122,2542],[304,1922],[-230,5]],[[192741,412020],[-28,18688]],[[275819,428189],[-81,-1216],[-510,-2451]],[[275228,424522],[-441,-3]],[[274787,424519],[0,3002]],[[282497,422685],[-451,360],[271,1887],[-71,939],[431,2360],[16,986]],[[283789,428544],[-584,-2082],[-708,-3777]],[[192741,412020],[-2481,120]],[[190260,412140],[-94,1614]],[[190166,413754],[-28,14503]],[[266705,428418],[4,-3381]],[[266709,425037],[-283,-21]],[[266426,425016],[-1003,645]],[[265423,425661],[0,1973]],[[292970,430541],[-211,-2552],[-210,-377],[73,1697]],[[245070,427505],[-470,-581],[-146,-1017],[115,-2813],[-151,-420]],[[244418,422674],[-829,4100]],[[293679,426706],[-79,470]],[[293412,427055],[2,251]],[[293414,427306],[-2,-251]],[[293663,427498],[-315,245]],[[293348,427743],[-288,1615]],[[293060,429358],[139,999],[457,-202]],[[290930,429021],[33,-2516],[-174,-1500],[76,-1477]],[[290865,423528],[-301,-1442],[-241,-93]],[[290323,421993],[-332,1497],[-16,2219],[-340,940]],[[289233,425625],[-418,-2203]],[[288815,423422],[-127,533]],[[288688,423955],[-1008,4285]],[[232309,426526],[155,-1143]],[[232464,425383],[-995,-12]],[[231469,425371],[-1105,-3]],[[291666,428183],[-6,-1402]],[[291660,426781],[-177,-792],[187,-1218],[-446,-2170]],[[291224,422601],[-359,927]],[[252662,423057],[2,-2183]],[[252664,420874],[-322,-1]],[[252342,420873],[-1598,9]],[[250744,420882],[-320,803]],[[250424,421685],[-16,5010]],[[214796,428618],[0,-4795]],[[214796,423823],[-1709,-29]],[[250424,421685],[-946,-94]],[[249478,421591],[-311,-17],[-6,2160],[-579,13]],[[248582,423747],[146,1437]],[[282497,422685],[136,-2142]],[[282633,420543],[-450,-3765]],[[282183,416778],[-753,1928]],[[281430,418706],[-282,1105],[-60,1366]],[[281088,421177],[343,3265],[-239,3445],[290,1509]],[[281088,421177],[-85,-1011],[-408,1093],[-38,-1088],[-480,1549]],[[280077,421720],[157,811],[68,2529],[527,4066]],[[293412,427055],[2,251]],[[293348,427743],[-53,-1236],[-451,496],[216,2355]],[[256465,426111],[5,-1623]],[[256470,424488],[-1206,27]],[[255264,424515],[0,262]],[[292504,428420],[-134,-1704]],[[292370,426716],[-710,65]],[[258474,426083],[-4,-2412]],[[258470,423671],[-889,5]],[[257581,423676],[-2,2416],[-211,4]],[[273832,426791],[-165,-803],[-57,-2450]],[[273610,423538],[-915,164]],[[272695,423702],[15,2449],[-148,1611]],[[263818,428382],[2,-6070],[59,-80]],[[263879,422232],[-1,-5]],[[263878,422227],[-1029,-28]],[[262849,422199],[4,4085]],[[280077,421720],[-106,-1566]],[[279971,420154],[-653,121],[-455,659]],[[278863,420934],[227,2069]],[[248582,423747],[-330,-1227],[-73,-1405],[-363,-2059]],[[247816,419056],[-702,92],[4,1628]],[[247118,420776],[13,6544]],[[268924,425869],[-64,-3813],[-274,84]],[[268586,422140],[-515,159],[-254,1409]],[[267817,423708],[174,1058],[2,2876],[277,1115]],[[267817,423708],[-635,189]],[[267182,423897],[2,1174],[-475,-34]],[[220562,428663],[2,-4872],[-317,7],[0,-1627]],[[220247,422171],[-287,-23]],[[219960,422148],[-1562,-10]],[[218398,422138],[-52,0]],[[218346,422138],[-2,6528]],[[225309,428632],[0,-6478]],[[225309,422154],[-1242,1]],[[224067,422155],[-2,6318]],[[221505,428382],[3,-6212]],[[221508,422170],[-1261,1]],[[218346,422138],[-1521,20]],[[216825,422158],[-55,-2]],[[216770,422156],[-7,6472]],[[216770,422156],[-1974,-23]],[[214796,422133],[0,1690]],[[227843,428638],[0,-6483]],[[227843,422155],[-1260,3]],[[226583,422158],[-9,0]],[[226574,422158],[-2,6478]],[[229113,425380],[-7,-3237]],[[229106,422143],[-1263,12]],[[226574,422158],[-1253,-4]],[[225321,422154],[-12,0]],[[284733,427326],[-651,-855],[-995,-3407],[-367,-2037]],[[282720,421027],[-87,-484]],[[190166,413754],[-531,19],[-2,801],[-456,2164],[59,2009],[-250,2239],[-310,-13],[-356,1411],[-184,1615],[74,2376]],[[224067,422155],[-8,0]],[[224059,422155],[-1261,5]],[[222798,422160],[0,5809]],[[265423,425661],[-341,-1035]],[[265082,424626],[-938,-41],[1,-1903],[-266,-450]],[[222798,422160],[-1257,8]],[[221541,422168],[-33,2]],[[278863,420934],[-360,-3257],[-302,-1293]],[[278201,416384],[-562,1959],[-401,-1171],[-297,845],[-366,-25]],[[276575,417992],[19,1315]],[[276594,419307],[179,811],[290,5227],[-200,1083],[227,1654]],[[288688,423955],[-466,-3821]],[[288222,420134],[-493,-1945]],[[287729,418189],[-773,3320]],[[286956,421509],[-805,3356]],[[276594,419307],[-123,1028],[-749,1490],[-494,2697]],[[271639,427446],[-58,-3551],[-110,17]],[[271471,423912],[-1324,214]],[[270147,424126],[-99,2084]],[[272695,423702],[-15,-2421],[-175,-1661]],[[272505,419620],[-793,132]],[[271712,419752],[19,2733],[-268,50],[8,1377]],[[285886,425967],[-397,-1498],[304,-5190]],[[285793,419279],[-424,-1382]],[[285369,417897],[-35,1119],[-345,857]],[[284989,419873],[-161,1874]],[[284828,421747],[-318,1084],[208,1376],[-107,1919],[122,1200]],[[261057,426186],[8,-3496]],[[261065,422690],[-374,7]],[[260691,422697],[-791,-21]],[[259900,422676],[1,530]],[[259901,423206],[-5,2955]],[[292731,427719],[-75,-1794],[-401,-1051],[179,2726],[297,119]],[[245853,427531],[-15,-6605]],[[245838,420926],[-7,-1699]],[[245831,419227],[-1653,137]],[[244178,419364],[23,899]],[[244201,420263],[217,2411]],[[274787,424519],[3,-1461]],[[274790,423058],[-309,-65]],[[274481,422993],[90,1246],[-199,2236]],[[247118,420776],[-1280,150]],[[284828,421747],[-989,-927],[-267,651],[-693,-2143]],[[282879,419328],[-159,1699]],[[244201,420263],[-1264,157]],[[242937,420420],[3,812]],[[242940,421232],[19,5678]],[[290323,421993],[609,-3619]],[[290932,418374],[-696,-1838]],[[290236,416536],[-114,1663]],[[290122,418199],[-1307,5223]],[[292370,426716],[-184,-1986],[143,-700]],[[292329,424030],[-474,-3179],[-254,-504]],[[291601,420347],[-383,1322],[6,932]],[[242940,421232],[-1109,36]],[[241831,421268],[-6,814]],[[241825,422082],[-2,4669]],[[274481,422993],[82,-1389],[-230,-2518]],[[274333,419086],[-58,-528]],[[274275,418558],[-502,43]],[[273773,418601],[49,4904],[-212,33]],[[241825,422082],[-931,-56]],[[240894,422026],[22,2915],[-106,1664]],[[240894,422026],[-478,-14]],[[240416,422012],[1,804],[-1425,-54]],[[238992,422762],[-21,3674]],[[233878,426401],[61,-5897]],[[233939,420504],[-1043,57]],[[232896,420561],[-163,921],[-269,3901]],[[238992,422762],[-1,-2172]],[[238991,420590],[-1104,-44]],[[237887,420546],[-30,5838]],[[235467,426269],[94,-3438]],[[235561,422831],[-21,-4851]],[[235540,417980],[-1218,74]],[[234322,418054],[-79,2429],[-304,21]],[[190260,412140],[-1085,15]],[[189175,412155],[-1095,-4]],[[188080,412151],[-519,2498],[-397,-2608],[-336,-472],[101,2059],[-351,2220]],[[237887,420546],[-2,-2440]],[[237885,418106],[-1261,69]],[[236624,418175],[7,4610]],[[236631,422785],[-50,3494]],[[270147,424126],[-32,-4044]],[[270115,420082],[-784,126],[-762,580]],[[268569,420788],[17,1352]],[[262849,422199],[1,-795]],[[262850,421404],[-1157,-63]],[[261693,421341],[-3,1350]],[[261690,422691],[52,3501]],[[236631,422785],[-1070,46]],[[261690,422691],[-625,-1]],[[259901,423206],[-1061,-73],[0,-541]],[[258840,422592],[-370,1079]],[[257581,423676],[-3,-4054]],[[257578,419622],[-1105,9]],[[256473,419631],[1,2822]],[[256474,422453],[-4,2035]],[[232896,420561],[7,-54]],[[232903,420507],[-1276,-7]],[[231627,420500],[-157,10]],[[231470,420510],[-1,4861]],[[286956,421509],[-435,-1129],[-728,-1101]],[[266426,425016],[-87,-5114]],[[266339,419902],[-1291,821]],[[265048,420723],[34,3903]],[[210857,423755],[-19,-8095],[-651,-3]],[[210187,415657],[-1239,-9]],[[230364,425368],[0,-4856]],[[230364,420512],[0,-4861]],[[230364,415651],[-953,8]],[[229411,415659],[-308,1]],[[229103,415660],[3,6483]],[[231470,420510],[-1106,2]],[[267401,418295],[-101,-658]],[[267300,417637],[-828,70]],[[266472,417707],[25,2122],[-158,73]],[[267182,423897],[1,-3714],[212,-4],[6,-1884]],[[255264,424515],[-14,-6128]],[[255250,418387],[-5,-4934]],[[255245,413453],[-1127,-59]],[[254118,413394],[14,9676]],[[204761,420481],[44,-3996],[-107,-2111]],[[204698,414374],[-40,-1498]],[[204658,412876],[-515,-983],[-138,-1866]],[[204005,410027],[-269,-196],[-186,2235],[-440,1922],[-526,246]],[[202584,414234],[-535,-3]],[[265048,420723],[-23,-1667]],[[265025,419056],[-1141,244]],[[263884,419300],[-6,2927]],[[276575,417992],[2,-1689],[-338,-982]],[[276239,415321],[-807,668],[-645,-1056]],[[274787,414933],[1,1005]],[[274788,415938],[-1,2668]],[[274787,418606],[3,4452]],[[256474,422453],[-391,-1025],[-571,-2641],[86,-782]],[[255598,418005],[-348,382]],[[292681,417934],[-413,-100],[-60,940],[-392,66],[-407,-1735]],[[291409,417105],[-97,1100]],[[291312,418205],[289,2142]],[[292329,424030],[617,-741],[71,-1974],[-164,-3756],[-172,375]],[[271712,419752],[-260,-1288]],[[271452,418464],[-1312,274]],[[270140,418738],[-25,1344]],[[290122,418199],[-264,-1711],[-318,871],[49,-1505],[-196,-651]],[[289393,415203],[-235,1649]],[[289158,416852],[-265,414],[-399,2752],[-272,116]],[[160617,423927],[82,-1784],[340,-681],[-60,-1870],[-213,-1153]],[[160766,418439],[-393,-946],[-168,-2180],[-363,-1739],[-738,-95],[-16,-1615]],[[159088,411864],[-2483,10]],[[156605,411874],[10,3351]],[[164380,410189],[-1412,-44],[-74,-532],[-534,1856],[-382,-2585]],[[161978,408884],[-186,-741]],[[161792,408143],[-928,5114],[-31,2656],[120,1726],[-187,800]],[[268569,420788],[-30,-2813]],[[268539,417975],[-1138,320]],[[214796,422133],[-1,-6444]],[[214795,415689],[6,-7987]],[[214801,407702],[-2099,-115]],[[212702,407587],[-2,8092],[66,8115]],[[212702,407587],[-979,-41]],[[211723,407546],[-1540,11]],[[210183,407557],[2,3232]],[[210185,410789],[2,4868]],[[249478,421591],[4,-3680]],[[249482,417911],[-1008,385],[-87,-647]],[[248387,417649],[-390,-863],[-421,-126],[-193,1285]],[[247383,417945],[433,1111]],[[273773,418601],[-955,197]],[[272818,418798],[-313,822]],[[258840,422592],[0,-2942]],[[258840,419650],[1,-653]],[[258841,418997],[-1263,-39]],[[257578,418958],[0,664]],[[291312,418205],[-380,169]],[[259900,422676],[1,-2968]],[[259901,419708],[-1061,-58]],[[274787,418606],[-454,480]],[[254118,413394],[-1462,-13]],[[252656,413381],[8,7493]],[[240416,422012],[-1,-5687]],[[240415,416325],[-1409,-77]],[[239006,416248],[-15,4342]],[[236624,418175],[-6,-1894]],[[236618,416281],[-1077,81]],[[235541,416362],[-1,1618]],[[260691,422697],[7,-5629]],[[260698,417068],[-1,-2446]],[[260697,414622],[-797,-40]],[[259900,414582],[1,5126]],[[261693,421341],[13,-4278]],[[261706,417063],[-1008,5]],[[256473,419631],[4,-4874]],[[256477,414757],[-917,-11]],[[255560,414746],[38,3259]],[[263884,419300],[17,-5165]],[[263901,414135],[-164,-21]],[[263737,414114],[-912,-29]],[[262825,414085],[5,1641]],[[262830,415726],[20,5678]],[[225321,422154],[-1,-6473]],[[225320,415681],[-642,-7]],[[224678,415674],[-618,2]],[[224060,415676],[-1,6479]],[[224060,415676],[-949,-1]],[[223111,415675],[-312,-4]],[[222799,415671],[-1,6489]],[[226583,422158],[-2,-6488]],[[226581,415670],[-307,0]],[[226274,415670],[-954,11]],[[216825,422158],[-7,-6476]],[[216818,415682],[-238,-3]],[[216580,415679],[-1785,10]],[[221541,422168],[6,-6502]],[[221547,415666],[-1531,-5]],[[220016,415661],[-44,2]],[[219972,415663],[-12,6485]],[[227843,422155],[-2,-6487]],[[227841,415668],[-1260,2]],[[229103,415660],[-1262,8]],[[219972,415663],[-1519,8]],[[218453,415671],[-56,3]],[[218397,415674],[1,6464]],[[218397,415674],[-1579,8]],[[222799,415671],[-1244,-5]],[[221555,415666],[-8,0]],[[241831,421268],[8,-4944]],[[241839,416324],[-1400,2]],[[240439,416326],[-24,-1]],[[284989,419873],[-135,-1158],[-365,-437],[-280,-1344]],[[284209,416934],[-135,-749],[-607,-656],[-188,-939]],[[283279,414590],[-400,4738]],[[250744,420882],[11,-4341]],[[250755,416541],[4,-2438],[-208,-17]],[[250551,414086],[-739,301],[-265,800]],[[249547,415187],[-65,2724]],[[281430,418706],[-459,-6339],[-226,-1900]],[[280745,410467],[-1192,6]],[[279553,410473],[143,1890],[-17,4331],[292,3460]],[[287729,418189],[-193,-523],[-134,-4476],[-402,-2750]],[[287000,410440],[-272,4]],[[286728,410444],[-19,0]],[[286709,410444],[-635,4132],[-197,2069],[-508,1252]],[[262830,415726],[-1089,-10]],[[261741,415716],[-35,1347]],[[242937,420420],[-5,-5730]],[[242932,414690],[-935,53]],[[241997,414743],[-158,1581]],[[283279,414590],[33,-4171]],[[283312,410419],[-28,0]],[[283284,410419],[-1756,39]],[[281528,410458],[270,1945],[385,4375]],[[279553,410473],[-342,-2]],[[279211,410471],[-1285,-23]],[[277926,410448],[-70,2461],[345,3475]],[[252342,420873],[-474,-4214]],[[251868,416659],[-1113,-118]],[[247383,417945],[-442,-2539]],[[246941,415406],[-262,-107],[-245,2264],[-607,13]],[[245827,417576],[4,1651]],[[252656,413381],[-30,-1626]],[[252626,411755],[-760,5]],[[251866,411760],[2,4899]],[[270140,418738],[-33,-4033],[-98,-688]],[[270009,414017],[-637,318]],[[269372,414335],[-891,173]],[[268481,414508],[58,3467]],[[266472,417707],[-35,-1886]],[[266437,415821],[-1449,559]],[[264988,416380],[37,2676]],[[239006,416248],[0,-1219]],[[239006,415029],[-1115,-150]],[[237891,414879],[-6,3227]],[[206434,415637],[-263,-1609]],[[206171,414028],[-698,-18]],[[205473,414010],[-2,411],[-773,-47]],[[231627,420500],[-1,-4856]],[[231626,415644],[-637,4]],[[230989,415648],[-625,3]],[[232903,420507],[433,-2548],[-67,-1277],[314,-1050]],[[233583,415632],[-88,0]],[[233495,415632],[-1249,8]],[[232246,415640],[-620,4]],[[234322,418054],[138,-4323]],[[234460,413731],[-255,-671],[-622,2572]],[[244178,419364],[30,-3036],[165,-1716]],[[244373,414612],[-1128,56]],[[243245,414668],[-313,22]],[[288510,412605],[38,24]],[[288548,412629],[-38,-24]],[[289158,416852],[-454,-2262],[-196,-1986]],[[288508,412604],[-541,-2144]],[[287967,410460],[-967,-20]],[[286709,410444],[-918,-3]],[[285791,410441],[-606,-7]],[[285185,410434],[-592,-13]],[[284593,410421],[124,2546],[-179,2927],[-329,1040]],[[200905,417336],[-779,-15],[-5,-3272],[-315,51],[0,-1663],[-1412,-63],[0,-2430],[-1717,-16],[1,-809],[-1384,192]],[[272795,414724],[-423,-10],[-218,-1046],[-319,59],[-5,-1091],[-317,66]],[[271513,412702],[-96,1662],[35,4100]],[[272818,418798],[-23,-4074]],[[259900,414582],[-209,-307]],[[259691,414275],[-842,-20]],[[258849,414255],[-8,4742]],[[257578,418958],[2,-4763]],[[257580,414195],[0,-1080]],[[257580,413115],[-876,35]],[[256704,413150],[-228,10],[1,1597]],[[245827,417576],[-8,-4829]],[[245819,412747],[1,-1636],[-1253,29]],[[244567,411140],[-193,1581],[-1,1891]],[[264988,416380],[-41,-2986]],[[264947,413394],[-298,808],[-748,-67]],[[274788,415938],[-600,318]],[[274188,416256],[87,2302]],[[291409,417105],[453,-5673],[-67,-3974]],[[291795,407458],[-8,-68]],[[291787,407390],[-674,1374],[-215,1839]],[[290898,410603],[-464,1138],[-81,1797],[-341,1920]],[[290012,415458],[-13,49]],[[289999,415507],[237,1029]],[[258849,414255],[-241,-37]],[[258608,414218],[-1028,-23]],[[274188,416256],[-53,-2244],[-194,-1196]],[[273941,412816],[-1155,355]],[[272786,413171],[9,1553]],[[292681,417934],[179,-419],[-159,-5398],[-46,2228],[-255,-3465],[103,-762],[-505,-2576],[-203,-84]],[[271513,412702],[-9,-1621]],[[271504,411081],[-1056,287]],[[270448,411368],[-261,927],[22,1648],[-200,74]],[[281528,410458],[-678,3]],[[280850,410461],[-105,6]],[[249547,415187],[-334,-14],[-10,-1089],[-815,-275]],[[248388,413809],[-1,3840]],[[161792,408143],[-202,-1300],[-433,-150],[-282,-3312],[-609,-862]],[[160266,402519],[-794,178]],[[159472,402697],[52,1462]],[[159524,404159],[106,2863],[-397,-48],[-8,2486],[153,591],[-290,1813]],[[255560,414746],[183,-1654],[-78,-4759]],[[255665,408333],[-417,-12]],[[255248,408321],[-3,5132]],[[277926,410448],[-234,-9]],[[277692,410439],[-800,-6]],[[276892,410433],[-426,0]],[[276466,410433],[-22,3775],[-205,1113]],[[268481,414508],[-116,-2693]],[[268365,411815],[-1169,326]],[[267196,412141],[-43,3579],[147,1917]],[[289999,415507],[-235,-1942],[-206,-351]],[[289558,413214],[-165,1989]],[[237891,414879],[8,-3256]],[[237899,411623],[-1244,80]],[[236655,411703],[-37,4578]],[[235541,416362],[8,-4089]],[[235549,412273],[-763,19]],[[234786,412292],[-326,1439]],[[181375,413882],[-2,-6763]],[[181373,407119],[-6,-16111]],[[181367,391008],[-2649,0]],[[178718,391008],[-2525,9020]],[[248388,413809],[0,-545]],[[248388,413264],[-1641,73]],[[246747,413337],[194,2069]],[[267196,412141],[-24,-2179]],[[267172,409962],[-1117,399]],[[266055,410361],[17,1045]],[[266072,411406],[162,-81],[203,4496]],[[246747,413337],[32,-697]],[[246779,412640],[-960,107]],[[200920,414122],[-228,4],[1,-10296]],[[200693,403830],[-885,2]],[[199808,403832],[-4513,9]],[[195295,403841],[-1,2439]],[[261741,415716],[-54,-4022]],[[261687,411694],[-224,-18]],[[261463,411676],[-823,-18]],[[260640,411658],[57,2964]],[[284593,410421],[-604,-5]],[[283989,410416],[-677,3]],[[289558,413214],[-576,-1173]],[[288982,412041],[-434,588]],[[288510,412605],[-2,-1]],[[251866,411760],[-181,-2586]],[[251685,409174],[-598,19]],[[251087,409193],[-316,20],[-8,2709],[-211,269]],[[250552,412191],[-1,1895]],[[206689,415638],[-255,-1611]],[[206434,414027],[-263,1]],[[241997,414743],[-31,-6459]],[[241966,408284],[-4,0]],[[241962,408284],[-1090,93]],[[240872,408377],[8,1624],[-470,45]],[[240410,410046],[29,6280]],[[266072,411406],[-502,924],[-631,518]],[[264939,412848],[8,546]],[[240410,410046],[-1140,67]],[[239270,410113],[-272,4],[8,4912]],[[236655,411703],[-1,-803]],[[236654,410900],[-1104,25]],[[235550,410925],[-1,1348]],[[274786,410447],[-874,-18]],[[273912,410429],[29,2387]],[[274787,414933],[-1,-4486]],[[276466,410433],[-1406,8]],[[275060,410441],[-274,6]],[[188080,412151],[154,-1357],[-372,-848],[15,-4365],[-94,-1439],[-489,-26],[-259,-1247]],[[187035,402869],[-501,282],[-67,4178],[-5094,-210]],[[262825,414085],[-5,-3543]],[[262820,410542],[-613,-224]],[[262207,410318],[-419,17],[-101,1359]],[[216580,415679],[-8,-8083]],[[216572,407596],[-1771,-3]],[[214801,407593],[0,109]],[[218453,415671],[-6,-8081]],[[218447,407590],[-1806,6]],[[216641,407596],[-69,0]],[[156605,411874],[135,-4012]],[[156740,407862],[1,-963],[-483,-512],[-37,-1772],[224,-3191],[-238,-1152],[-36,-1898],[296,-1404],[110,-1804],[361,-938]],[[156938,394228],[-728,41],[-164,-808],[-645,-63],[-455,-694]],[[154946,392704],[-541,2801],[109,2093],[-386,5926],[150,3428],[-35,2229],[-193,3367],[-469,3107]],[[226274,415670],[1,-6484]],[[226275,409186],[-1,-1617]],[[226274,407569],[-1548,10]],[[224726,407579],[-50,3]],[[224676,407582],[2,8092]],[[224676,407582],[-1502,8]],[[223174,407590],[-61,1]],[[223113,407591],[-2,8084]],[[227841,415668],[2,-6477]],[[227843,409191],[-1568,-5]],[[229411,415659],[-2,-8099]],[[229409,407560],[-425,-1]],[[228984,407559],[-1141,12]],[[227843,407571],[0,1620]],[[220016,415661],[-7,-8093]],[[220009,407568],[-1504,22]],[[218505,407590],[-58,0]],[[170987,398754],[-249,-368]],[[170738,398386],[-2476,18]],[[168262,398404],[-1,696],[-1014,5148],[112,6216],[-310,-1673]],[[221555,415666],[-7,-8087]],[[221548,407579],[-1487,-3]],[[220061,407576],[-52,-8]],[[223113,407591],[-1493,-14]],[[221620,407577],[-72,2]],[[230989,415648],[1,-8092]],[[230990,407556],[-955,2]],[[230035,407558],[-626,2]],[[210185,410789],[-3283,6]],[[206902,410795],[415,544],[-67,968],[390,100],[54,1353],[-365,-16],[-165,-1868],[-731,-134]],[[206433,411742],[1,2285]],[[233495,415632],[0,-6461]],[[233495,409171],[-625,0]],[[232870,409171],[-626,1]],[[232244,409172],[2,6468]],[[232244,409172],[-1,-1611],[-687,-7]],[[231556,407554],[-566,2]],[[234786,412292],[-21,-1747],[-200,349],[-276,-2271]],[[234289,408623],[-168,540],[-626,8]],[[290898,410603],[-392,-2264]],[[290506,408339],[-409,2275],[-302,2865]],[[289795,413479],[217,1979]],[[250552,412191],[-498,-1356],[-386,-1884],[4,-2170]],[[249672,406781],[-468,-23]],[[249204,406758],[-626,-24]],[[248578,406734],[-164,3649],[-26,2881]],[[239270,410113],[-31,-1637]],[[239239,408476],[-1338,-79]],[[237901,408397],[-2,3226]],[[243245,414668],[-18,-5394]],[[243227,409274],[-942,82],[-5,-1095],[-314,23]],[[256704,413150],[-10,-4876]],[[256694,408274],[-518,44]],[[256176,408318],[-511,15]],[[272786,413171],[-213,31],[-15,-3018],[100,-1891]],[[272658,408293],[-850,-351]],[[271808,407942],[-304,3139]],[[244567,411140],[169,-1392]],[[244736,409748],[-1143,47],[1,-537]],[[243594,409258],[-367,16]],[[260640,411658],[-101,-1640]],[[260539,410018],[-888,-25]],[[259651,409993],[40,4282]],[[269372,414335],[-25,-1734],[207,-77],[64,-3316]],[[269618,409208],[-318,123],[-21,-1093],[-338,107],[-318,-1008]],[[268623,407337],[-310,141],[52,4337]],[[205473,414010],[-1,-3087]],[[205472,410923],[-407,495],[-407,1458]],[[270448,411368],[146,-862],[-65,-3237]],[[270529,407269],[-311,107]],[[270218,407376],[-615,748],[15,1084]],[[259651,409993],[-1,-1094]],[[259650,408899],[-829,-88]],[[258821,408811],[-213,-27]],[[258608,408784],[0,5434]],[[202584,414234],[137,-2937],[562,-2151],[-209,-2932],[145,-2132]],[[203219,404082],[-612,-330]],[[202607,403752],[-1914,78]],[[204005,410027],[367,-1170],[-102,-1326]],[[204270,407531],[-525,-3718],[-328,268]],[[203417,404081],[-198,1]],[[258608,408784],[-389,-585],[-532,8]],[[257687,408207],[-86,542],[-21,4366]],[[264939,412848],[-109,-226],[-59,-4847]],[[264771,407775],[-700,214]],[[264071,407989],[-317,29]],[[263754,408018],[-17,6096]],[[263754,408018],[1,-414],[-936,-23]],[[262819,407581],[1,2961]],[[206433,411742],[-1,-3288]],[[206432,408454],[13,-902]],[[206445,407552],[-516,-5958],[-264,-2165]],[[205665,399429],[-5,0]],[[205660,399429],[-187,-2],[-3,8128]],[[205470,407555],[2,3368]],[[206902,410795],[-80,-2162],[-167,812],[-223,-991]],[[290506,408339],[-301,-1740]],[[290205,406599],[-214,1002]],[[289991,407601],[-385,1832],[-352,446],[-281,1742]],[[288973,411621],[822,1858]],[[255248,408321],[1,-2424]],[[255249,405897],[-1194,78]],[[254055,405975],[-17,3810]],[[254038,409785],[80,3609]],[[254038,409785],[-270,-622],[-1139,-18]],[[252629,409145],[-3,2610]],[[248578,406734],[-634,-33]],[[247944,406701],[-412,-2]],[[247532,406699],[3,2166],[-202,555],[5,1620],[-635,683]],[[246703,411723],[76,917]],[[273912,410429],[-309,-2118]],[[273603,408311],[-264,-1244]],[[273339,407067],[6,599],[-687,627]],[[257687,408207],[-84,-2441]],[[257603,405766],[-705,61]],[[256898,405827],[-209,8],[5,2439]],[[205470,407555],[-1200,-24]],[[266055,410361],[-47,-3102]],[[266008,407259],[-855,352]],[[265153,407611],[-382,164]],[[246703,411723],[-131,-1726],[182,-3269]],[[246754,406728],[-91,-2345]],[[246663,404383],[-901,73]],[[245762,404456],[-253,772],[-419,2923]],[[245090,408151],[-354,1597]],[[288652,406259],[12,7]],[[288664,406266],[-12,-7]],[[288613,408309],[-8,431]],[[288605,408740],[8,-431]],[[288982,412041],[-534,-3559],[147,-1016],[-73,-1880],[204,-1804]],[[288726,403782],[-376,-1333],[-304,88]],[[288046,402537],[-18,1506]],[[288028,404043],[-61,6417]],[[251087,409193],[1,-5735],[-319,52]],[[250769,403510],[-1089,3],[-8,3268]],[[235550,410925],[3,-4036]],[[235553,406889],[-1398,55]],[[234155,406944],[134,1679]],[[192584,405746],[-2935,11],[-153,2687],[-321,1687]],[[189175,410131],[0,2024]],[[189175,410131],[1,-4419],[-151,2],[5,-8099]],[[189030,397615],[-1544,14],[-447,229]],[[187039,397858],[-4,5011]],[[268623,407337],[-26,-1603]],[[268597,405734],[-717,218],[40,495],[-788,179]],[[267132,406626],[40,3336]],[[159524,404159],[-693,578],[2,-532],[-1674,-52]],[[157159,404153],[10,3692],[-429,17]],[[252629,409145],[5,-3808]],[[252634,405337],[-317,9],[-372,2453],[-255,17],[-5,1358]],[[262207,410318],[-5,-3507]],[[262202,406811],[-729,-13]],[[261473,406798],[-10,4878]],[[261473,406798],[1,-1345]],[[261474,405453],[-925,-9]],[[260549,405444],[-10,4574]],[[247532,406699],[-778,29]],[[237901,408397],[-2,-1616]],[[237899,406781],[-1252,49]],[[236647,406830],[7,4070]],[[289029,404123],[-16,44]],[[289013,404167],[16,-44]],[[289991,407601],[-61,-2065],[-434,1889],[-494,-3193]],[[289002,404232],[-350,2027]],[[288664,406266],[-51,2043]],[[288605,408740],[368,2881]],[[164781,405356],[-1401,-15],[-152,1284],[-273,169],[-234,-1182],[-772,-1245]],[[161949,404367],[29,4517]],[[271808,407942],[-352,-103],[16,-1873],[-379,-570]],[[271093,405396],[-587,184],[23,1689]],[[236647,406830],[-6,-1350]],[[236641,405480],[-1087,27]],[[235554,405507],[-1,1382]],[[210183,407557],[-20,1]],[[210163,407558],[-2636,-8]],[[207527,407550],[-1082,2]],[[168262,398404],[-491,-22],[-237,-2422],[1,-1714],[314,16],[-14,-8144],[-697,1]],[[167138,386119],[-481,2256]],[[166657,388375],[-56,3727],[-157,-51],[-41,4121],[307,670],[-3,1729],[-666,41]],[[166041,398612],[-32,2040],[-419,1033]],[[165590,401685],[652,1617],[544,5284]],[[291787,407390],[22,-3591],[-686,-1401]],[[291123,402398],[-572,644]],[[290551,403042],[14,1877],[-360,1680]],[[262819,407581],[-2,-849]],[[262817,406732],[-615,79]],[[283284,410419],[-281,-1862],[-298,-5500]],[[282705,403057],[-115,-74]],[[282590,402983],[-298,3218]],[[282292,406201],[-167,1077],[132,1025],[-513,247]],[[281744,408550],[-440,1436],[-237,-1383],[-192,274]],[[280875,408877],[-25,1584]],[[280875,408877],[-278,-307],[-96,-1936]],[[280501,406634],[-526,344]],[[279975,406978],[-386,1376],[-475,-3170],[-283,768]],[[278831,405952],[380,4519]],[[278831,405952],[-568,-2832]],[[278263,403120],[-600,-2269]],[[277663,400851],[29,9588]],[[288028,404043],[-186,-68]],[[287842,403975],[-578,293],[198,3147],[-296,-282]],[[287166,407133],[-438,3311]],[[276892,410433],[-365,-5307]],[[276527,405126],[-123,314]],[[276404,405440],[-598,2940],[-675,502]],[[275131,408882],[-71,1559]],[[277663,400851],[0,-206]],[[277663,400645],[-557,1423],[-342,-760]],[[276764,401308],[-239,1284]],[[276525,402592],[2,2534]],[[287166,407133],[-74,-2015],[-419,-1266],[83,1880],[-379,-1384]],[[286377,404348],[-194,1933],[-292,888],[-100,3272]],[[275131,408882],[-285,-1378],[11,-1745]],[[274857,405759],[-140,-754]],[[274717,405005],[-207,396]],[[274510,405401],[-283,562],[-368,2260],[-256,88]],[[286377,404348],[69,-1032],[-251,-2456],[-293,639]],[[285902,401499],[0,2434],[-506,6],[2,-1756],[256,-748]],[[285654,401435],[-221,-442]],[[285433,400993],[-513,2542]],[[284920,403535],[-27,1753],[292,5146]],[[284920,403535],[-797,69]],[[284123,403604],[171,2562],[-558,2377],[253,1873]],[[284123,403604],[-2,-8]],[[284121,403596],[-805,-2420]],[[283316,401176],[-301,1527],[-310,354]],[[267132,406626],[-296,-2586]],[[266836,404040],[-607,26]],[[266229,404066],[40,3087],[-261,106]],[[192583,405610],[37,-824],[-294,-4892],[-129,-5401],[227,-2018],[156,-4769]],[[192580,387706],[-3568,0],[0,190]],[[189012,387896],[18,9719]],[[240872,408377],[-43,-5375]],[[240829,403002],[-231,409],[-164,-2185]],[[240434,401226],[-711,2931]],[[239723,404157],[-346,980],[-138,3339]],[[260549,405444],[-153,-1912]],[[260396,403532],[-746,-50]],[[259650,403482],[0,5417]],[[281744,408550],[-325,-479],[-251,-3773]],[[281168,404298],[-330,1392]],[[280838,405690],[-337,944]],[[245090,408151],[-786,-2744],[61,-2459]],[[244365,402948],[-779,380]],[[243586,403328],[8,5930]],[[254055,405975],[-144,-1905]],[[253911,404070],[-1278,-83]],[[252633,403987],[1,1350]],[[243586,403328],[-1650,162]],[[241936,403490],[26,4794]],[[270218,407376],[-23,-1680],[-315,123],[-26,-1652]],[[269854,404167],[-626,216],[-9,-490],[-644,-24]],[[268575,403869],[22,1865]],[[227843,407571],[-4,-4859]],[[227839,402712],[-1559,8]],[[226280,402720],[-6,4849]],[[232870,409171],[-17,-4355]],[[232853,404816],[-53,-3775]],[[232800,401041],[-1243,5]],[[231557,401046],[-1,6508]],[[234155,406944],[373,-2131]],[[234528,404813],[-590,6]],[[233938,404819],[-1085,-3]],[[252633,403987],[0,-2969]],[[252633,401018],[-933,23]],[[251700,401041],[-932,31]],[[250768,401072],[1,2438]],[[279975,406978],[-539,-3797],[-360,-1740]],[[279076,401441],[-431,1393],[-382,286]],[[273339,407067],[-230,-1522]],[[273109,405545],[-695,-2160]],[[272414,403385],[-195,1248],[-314,-1222],[-55,-1446],[-293,114],[-131,-1044]],[[271426,401035],[10,998],[-367,905],[24,2458]],[[276404,405440],[-240,-950],[-479,-155]],[[275685,404335],[-828,1424]],[[259650,403482],[-372,-60]],[[259278,403422],[-462,-46]],[[258816,403376],[5,5435]],[[161949,404367],[-299,-279],[-425,-2782],[0,-3647]],[[161225,397659],[-377,-706]],[[160848,396953],[-363,-449],[-90,-982],[-129,6997]],[[258816,403376],[-362,-36]],[[258454,403340],[-695,149]],[[257759,403489],[-4,2280],[-152,-3]],[[282292,406201],[-394,-2354],[-185,-1907]],[[281713,401940],[-545,2358]],[[239723,404157],[-203,523],[-147,-1561],[-300,-405],[-194,-1442],[-195,1194]],[[238684,402466],[-29,-1190],[-453,360],[-301,-767]],[[237901,400869],[-2,5912]],[[241936,403490],[-12,-1887]],[[241924,401603],[-322,44]],[[241602,401647],[-773,1355]],[[256176,408318],[-109,-1613],[-6,-4868]],[[256061,401837],[-1014,8]],[[255047,401845],[202,1649],[0,2403]],[[256898,405827],[-7,-2442],[-310,8],[-2,-3249]],[[256579,400144],[-519,69]],[[256060,400213],[1,1624]],[[274510,405401],[-752,-2906]],[[273758,402495],[-136,1718],[-196,-664]],[[273426,403549],[-49,2100],[-268,-104]],[[246361,401187],[-1284,58],[-7,-1638],[-209,11]],[[244861,399618],[-414,50]],[[244447,399668],[-82,3280]],[[245762,404456],[468,-1904],[131,-1365]],[[264071,407989],[93,-711],[-59,-4822]],[[264105,402456],[-1299,241]],[[262806,402697],[11,4035]],[[265153,407611],[-83,-5848]],[[265070,401763],[-704,293]],[[264366,402056],[-261,400]],[[157159,404153],[-102,-1293],[315,-1811],[516,-796],[-42,-2231],[424,-2417]],[[158270,395605],[-153,-1117]],[[158117,394488],[-192,-2961],[-455,-702]],[[157470,390825],[-532,3403]],[[214801,407593],[7,-8099]],[[214808,399494],[2,-1604]],[[214810,397890],[-3111,-175]],[[211699,397715],[24,9831]],[[289145,403438],[-116,685]],[[289013,404167],[-11,65]],[[290551,403042],[-150,-2724]],[[290401,400318],[-713,1073],[-543,2047]],[[223174,407590],[-9,-8099]],[[223165,399491],[-1516,-10]],[[221649,399481],[-38,0]],[[221611,399481],[9,8096]],[[265463,401619],[-346,126]],[[265117,401745],[-47,18]],[[266229,404066],[-541,-2162],[-225,-285]],[[216641,407596],[-7,-8066]],[[216634,399530],[-241,-6]],[[216393,399524],[-1585,-30]],[[218505,407590],[-3,-8092]],[[218502,399498],[-252,0]],[[218250,399498],[-1616,32]],[[224726,407579],[-8,-6473]],[[224718,401106],[0,-1621]],[[224718,399485],[-1525,8]],[[223193,399493],[-28,-2]],[[220061,407576],[-7,-8104]],[[220054,399472],[-1552,26]],[[228984,407559],[-7,-6447]],[[228977,401112],[-5,-1634]],[[228972,399478],[-1136,-7]],[[227836,399471],[3,3241]],[[226280,402720],[-2,-1625]],[[226278,401095],[-1560,11]],[[221611,399481],[-1512,-5]],[[220099,399476],[-45,-4]],[[230035,407558],[-404,-3029],[469,-4113],[472,-186]],[[230572,400230],[-5,-2410],[-307,8]],[[230260,397828],[0,542],[-974,290],[4,2434],[-313,18]],[[207527,407550],[-7,-8123]],[[207520,399427],[-1032,5]],[[206488,399432],[-823,-3]],[[210163,407558],[-15,-13022],[-936,36]],[[209212,394572],[12,4831],[-1704,24]],[[231557,401046],[-18,-1625]],[[231539,399421],[-119,1201],[-442,280],[-406,-672]],[[211699,397715],[-28,-7915]],[[211671,389800],[1,-1622],[-925,-166]],[[210747,388012],[-1530,111]],[[209217,388123],[-5,6449]],[[205660,399429],[4,-8051]],[[205664,391378],[-1785,-68]],[[203879,391310],[176,2110],[-338,2531],[-236,-28],[-218,2136]],[[203263,398059],[20,4732],[134,1290]],[[271426,401035],[-87,-662]],[[271339,400373],[-1426,435]],[[269913,400808],[-59,3359]],[[187039,397858],[-587,-3354],[17,-2559],[-254,-958],[-384,92],[-188,-2026]],[[185643,389053],[-4276,11]],[[181367,389064],[0,1944]],[[280838,405690],[20,-2092],[-220,-1798],[43,-1668],[-291,-1467]],[[280390,398665],[-1091,2059],[-223,717]],[[235554,405507],[-2,-5521]],[[235552,399986],[-482,732]],[[235070,400718],[-348,1876],[57,1415],[-251,804]],[[262806,402697],[-686,37]],[[262120,402734],[-425,21],[-218,-745]],[[261477,402010],[-3,3443]],[[237901,400869],[-183,146],[-782,-1329]],[[236936,399686],[-300,1184]],[[236636,400870],[5,4610]],[[250768,401072],[-307,-8],[0,-3525]],[[250461,397539],[-935,2],[-151,-542]],[[249375,396999],[-163,-3]],[[249212,396996],[-8,9762]],[[249212,396996],[-1246,20]],[[247966,397016],[-6,4876]],[[247960,401892],[-16,4809]],[[164769,402898],[-1778,-16],[-231,-508],[-693,-3277],[-169,-1785],[-673,347]],[[247960,401892],[-463,-687],[1,-945],[-743,197],[-64,-1253]],[[246691,399204],[-28,5179]],[[268575,403869],[-39,-2983]],[[268536,400886],[-64,-729]],[[268472,400157],[-1582,536]],[[266890,400693],[-54,3347]],[[282590,402983],[-306,-3505]],[[282284,399478],[-571,2462]],[[195295,403841],[-25,-16135]],[[195270,387706],[-2690,0]],[[255047,401845],[-68,-1899]],[[254979,399946],[-896,325]],[[254083,400271],[-160,-18]],[[253923,400253],[-12,3817]],[[273426,403549],[-646,-1537]],[[272780,402012],[-366,1373]],[[257759,403489],[-152,-219],[7,-3170]],[[257614,400100],[-1035,44]],[[275685,404335],[85,-2808]],[[275770,401527],[-169,-2411]],[[275601,399116],[-203,-165]],[[275398,398951],[-825,1176]],[[274573,400127],[195,794],[-216,1514],[165,2570]],[[281713,401940],[-331,-4250]],[[281382,397690],[-453,-529]],[[280929,397161],[-54,1696],[-336,-1326],[-249,538]],[[280290,398069],[100,596]],[[281262,400644],[0,0]],[[236636,400870],[-257,453],[-437,-2067],[-406,-129]],[[235536,399127],[16,859]],[[261477,402010],[-400,-1353]],[[261077,400657],[-346,-1150],[-342,-60]],[[260389,399447],[7,4085]],[[276525,402592],[-354,-957],[-401,-108]],[[274573,400127],[-368,-1329]],[[274205,398798],[-236,255]],[[273969,399053],[-281,3045],[70,397]],[[233938,404819],[-17,-6983]],[[233921,397836],[-873,234]],[[233048,398070],[-272,169],[24,2802]],[[235070,400718],[-349,74],[-25,-3937]],[[234696,396855],[-411,-173]],[[234285,396682],[-361,-327],[-3,1481]],[[159472,402697],[-103,-2316],[298,-2192],[10,-2579]],[[159677,395610],[-1407,-5]],[[240434,401226],[-265,-1911],[27,-1099]],[[240196,398216],[-322,-2537]],[[239874,395679],[-1243,272]],[[238631,395951],[53,6515]],[[272780,402012],[-162,-1544]],[[272618,400468],[-357,-942],[-433,-2022]],[[271828,397504],[-465,1316]],[[271363,398820],[-24,1553]],[[246691,399204],[104,-2426],[318,-370]],[[247113,396408],[-268,-1766],[-327,1147]],[[246518,395789],[-157,5398]],[[269913,400808],[-106,32],[-45,-3310]],[[269762,397530],[-314,138]],[[269448,397668],[30,1912],[-311,800],[-631,506]],[[273969,399053],[-615,-1858]],[[273354,397195],[-359,391]],[[272995,397586],[-242,75],[-135,2807]],[[288046,402537],[11,-941]],[[288057,401596],[-639,-5]],[[287418,401591],[-372,-2533],[-163,577],[-139,-1618],[-138,1747],[461,4160],[775,51]],[[203263,398059],[-1078,34]],[[202185,398093],[231,2578],[24,2142],[167,939]],[[253923,400253],[-983,-52]],[[252940,400201],[-307,817]],[[266890,400693],[-89,-2651]],[[266801,398042],[-801,-647]],[[266000,397395],[-555,16],[18,4208]],[[285892,400881],[-123,-38]],[[285769,400843],[123,38]],[[285902,401499],[-150,-621]],[[285752,400878],[-98,557]],[[285433,400993],[-397,-2058]],[[285036,398935],[-134,518]],[[284902,399453],[-167,-26],[-614,4169]],[[199808,403832],[102,-2045]],[[199910,401787],[-296,-715]],[[199614,401072],[-738,-3251],[-270,662],[-334,-353],[-440,-2814],[-665,-1481],[1,-2999]],[[197168,390836],[-2,-3130],[-1896,0]],[[202185,398093],[-59,-1116]],[[202126,396977],[-415,808],[-150,-1174],[-541,1040],[-198,1576],[-600,-2],[-312,2562]],[[289289,396094],[-480,-882],[-190,-1250],[-469,-136]],[[288150,393826],[-70,5854]],[[288080,399680],[-23,1916]],[[288726,403782],[311,-1994],[21,-3695],[231,-1999]],[[258454,403340],[32,-5425],[144,8]],[[258630,397923],[2,-1078]],[[258632,396845],[-1016,28]],[[257616,396873],[-2,3227]],[[260389,399447],[-315,-33],[3,-1128]],[[260077,398286],[-173,-511],[-611,176]],[[259293,397951],[-15,5471]],[[244447,399668],[-615,99],[-12,-1653]],[[243820,398114],[-1327,96]],[[242493,398210],[15,3270],[-584,123]],[[284902,399453],[-317,-3074]],[[284585,396379],[-327,-587]],[[284258,395792],[-575,2284]],[[283683,398076],[-376,336],[-185,1328],[194,1436]],[[259293,397951],[-663,-28]],[[241246,396474],[-791,165],[-259,1577]],[[241602,401647],[-356,-5173]],[[279076,401441],[-306,-3713],[122,-2044],[-246,-2142]],[[278646,393542],[-601,2684]],[[278045,396226],[-22,130]],[[278023,396356],[164,2029],[-157,242],[174,1961],[-541,57]],[[291123,402398],[69,-688],[-433,-4686],[-217,-1125],[-299,-2],[197,2821],[-39,1600]],[[283683,398076],[-584,-3904]],[[283099,394172],[-333,1775]],[[282766,395947],[-855,1322]],[[281911,397269],[373,2209]],[[164778,400098],[2,-985]],[[164780,399113],[3,-842]],[[164783,398271],[-389,10],[-272,-829],[-495,64],[-430,-2100],[-547,1773],[-795,-2035],[-254,-3501]],[[161601,391653],[-949,430]],[[160652,392083],[47,3550],[149,1320]],[[264366,402056],[-167,-4639]],[[264199,397417],[-520,1367]],[[263679,398784],[-327,-385]],[[263352,398399],[-336,1361],[-212,-782]],[[262804,398978],[2,3719]],[[262120,402734],[-186,-6686]],[[261934,396048],[-10,-344]],[[261924,395704],[-187,-294]],[[261737,395410],[-674,-15]],[[261063,395395],[14,5262]],[[262804,398978],[-161,-1387]],[[262643,397591],[-709,-1543]],[[227836,399471],[-2,-3241]],[[227834,396230],[-1551,10]],[[226283,396240],[-5,4855]],[[160652,392083],[-329,7]],[[160323,392090],[-249,594],[-92,1588],[-305,1338]],[[276764,401308],[-43,-2135]],[[276721,399173],[-197,-2651],[-527,-488]],[[275997,396034],[78,1670],[-474,1412]],[[238631,395951],[-2,-269]],[[238629,395682],[-940,177],[-5,-541],[-774,157]],[[236910,395475],[26,4211]],[[278023,396356],[-421,199],[-771,1158],[-110,1460]],[[264942,392757],[-495,1045]],[[264447,393802],[-4,881]],[[264443,394683],[-244,2734]],[[265117,401745],[-175,-8988]],[[281911,397269],[-117,-636]],[[281794,396633],[-412,1057]],[[247966,397016],[-356,-13],[-6,-1412]],[[247604,395591],[-491,817]],[[286601,396690],[-270,-2438],[180,3428],[90,-990]],[[288080,399680],[-243,-644],[-318,-3542]],[[287519,395494],[-452,119]],[[287067,395613],[-237,-813],[-18,1649],[166,2200],[440,2942]],[[256060,400213],[0,-4914]],[[256060,395299],[-786,-99]],[[255274,395200],[-295,4746]],[[202126,396977],[391,-1636],[384,-265],[-241,-1240],[-125,-2429],[202,-1122],[71,-1957],[299,-2059]],[[203107,386269],[-2100,53],[-1,-5186]],[[201006,381136],[-1581,2]],[[199425,381138],[-185,2880]],[[199240,384018],[376,1],[-2,6825]],[[199614,390844],[0,10228]],[[266000,397395],[-90,-7128]],[[265910,390267],[-554,2429]],[[265356,392696],[-414,61]],[[242493,398210],[-120,-2235],[32,-2529],[-220,-3074]],[[242185,390372],[-394,741],[-91,1045]],[[241700,392158],[-288,3406]],[[241412,395564],[-166,910]],[[166041,398612],[-586,525],[-675,-24]],[[280290,398069],[-483,-2836],[-192,-318],[-231,-2313]],[[279384,392602],[-347,1620],[-177,-1640]],[[278860,392582],[-214,960]],[[286072,395357],[-240,-2629],[72,-1051]],[[285904,391677],[-438,652]],[[285466,392329],[40,2579],[-96,1946],[-374,2081]],[[285752,400878],[17,-35]],[[285892,400881],[302,-2196],[-274,-289],[359,-1162],[-228,-562],[21,-1315]],[[236910,395475],[-14,-1566]],[[236896,393909],[-1362,261]],[[235534,394170],[2,3666]],[[235536,397836],[0,1291]],[[246518,395789],[-459,-1048],[-357,-130]],[[245702,394611],[-426,37],[-426,2232]],[[244850,396880],[11,2738]],[[230260,397828],[-2,-3239]],[[230258,394589],[-1082,7]],[[229176,394596],[-204,1767],[0,3115]],[[199614,390844],[-2446,-8]],[[226283,396240],[-1,-1625]],[[226282,394615],[-1549,-6]],[[224733,394609],[-15,4876]],[[233048,398070],[-1,-3479]],[[233047,394591],[-1242,3]],[[231805,394594],[-1,4258],[-265,569]],[[251700,401041],[-3,-5671],[315,56]],[[252012,395426],[-4,-1645]],[[252008,393781],[-1234,-54],[-1,-1621]],[[250773,392106],[-323,106]],[[250450,392212],[11,5327]],[[252940,400201],[-3,-4846]],[[252937,395355],[-925,71]],[[231805,394594],[2,-2436]],[[231807,392158],[-1134,-2]],[[230673,392156],[-105,1611],[-310,822]],[[269448,397668],[-55,-3547],[-336,-2]],[[269057,394119],[-207,86]],[[268850,394205],[-308,108],[-130,1735]],[[268412,396048],[60,4109]],[[270916,394754],[20,1086],[-281,1702],[-269,-1234]],[[270386,396308],[9,758],[-633,464]],[[271363,398820],[-98,-3219],[-349,-847]],[[235536,397836],[-739,279],[-101,-1260]],[[268412,396048],[-1128,225],[-164,1036]],[[267120,397309],[-319,733]],[[261063,395395],[-665,-1817]],[[260398,393578],[-311,-147]],[[260087,393431],[-10,4855]],[[272995,397586],[-322,-2153]],[[272673,395433],[-626,51]],[[272047,395484],[-219,2020]],[[255274,395200],[-23,-931]],[[255251,394269],[-1050,-45]],[[254201,394224],[-106,0]],[[254095,394224],[-12,6047]],[[254095,394224],[-871,-48]],[[253224,394176],[-287,83],[0,1096]],[[257616,396873],[-2,-1632]],[[257614,395241],[-617,-10]],[[256997,395231],[-542,-4]],[[256455,395227],[-395,72]],[[275398,398951],[-49,-2704],[-193,-1561],[-17,-2747]],[[275139,391939],[-179,223]],[[274960,392162],[-177,2250],[-237,820]],[[274546,395232],[-309,1941],[-32,1625]],[[178718,391008],[0,-11659],[-2488,-10],[-9,-22497]],[[176221,356842],[9,-15661]],[[176230,341181],[-3544,18062]],[[172686,359243],[1,19187],[-1464,8789]],[[171223,387219],[-1407,8282],[-1,1512],[923,1373]],[[244850,396880],[-2,-2773],[-420,28],[-8,-2523]],[[244420,391612],[-356,-627],[-262,515]],[[243802,391500],[-19,-7]],[[243783,391493],[37,6621]],[[263352,398399],[22,-5065]],[[263374,393334],[-124,-465]],[[263250,392869],[-377,1491]],[[262873,394360],[-210,810]],[[262663,395170],[-20,2421]],[[288150,393826],[43,-3599]],[[288193,390227],[-151,927],[-491,-152]],[[287551,391002],[-166,1427],[180,785]],[[287565,393214],[-46,2280]],[[218250,399498],[-19,-8071]],[[218231,391427],[-863,14]],[[217368,391441],[-992,-7]],[[216376,391434],[17,8090]],[[216376,391434],[-231,-10]],[[216145,391424],[-1332,-40]],[[214813,391384],[-3,6506]],[[223193,399493],[-14,-8123]],[[223179,391370],[-1512,-4]],[[221667,391366],[-36,-1]],[[221631,391365],[18,8116]],[[220099,399476],[-16,-8096]],[[220083,391380],[-260,16]],[[219823,391396],[-1228,34]],[[218595,391430],[-364,-3]],[[229176,394596],[-104,-1078],[-8,-3776]],[[229064,389742],[-1230,0]],[[227834,389742],[0,6488]],[[224733,394609],[-4,-3237]],[[224729,391372],[-1523,-3]],[[223206,391369],[-27,1]],[[221631,391365],[-1548,15]],[[285466,392329],[-31,-1557]],[[285435,390772],[-7,-2276]],[[285428,388496],[-134,1401],[-606,810],[-230,-838],[-81,1376]],[[284377,391245],[169,2220]],[[284546,393465],[298,1555],[-259,1359]],[[206488,399432],[13,-4858],[-121,-1294],[371,-47],[-10,-2736]],[[206741,390497],[-830,-43],[-247,924]],[[209217,388123],[-2473,-52]],[[206744,388071],[-3,2426]],[[264443,394683],[-524,-1279]],[[263919,393404],[-110,900],[24,2588],[-154,1892]],[[278045,396226],[-294,-514],[-232,-1659],[80,-1120],[-325,-2167]],[[277274,390766],[-416,1407],[-243,-3512],[-463,-1712],[-244,275],[-358,-1592]],[[275550,385632],[171,2537],[-267,3167]],[[275454,391336],[428,949],[115,3749]],[[166657,388375],[-699,3239]],[[165958,391614],[-902,4160]],[[165056,395774],[-269,1239],[-4,1258]],[[275454,391336],[-315,603]],[[274546,395232],[-268,-471],[-788,-2996]],[[273490,391765],[-200,1393],[150,994],[-86,3043]],[[280929,397161],[39,-1198],[-240,-2110]],[[280728,393853],[-452,-1704],[-259,-2493]],[[280017,389656],[-633,2946]],[[263919,393404],[-308,-258]],[[263611,393146],[-237,188]],[[272047,395484],[-122,-4567],[68,-1110]],[[271993,389807],[-308,-1085],[-178,1340]],[[271507,390062],[-213,1013]],[[271294,391075],[-378,3679]],[[171223,387219],[-1840,-10800],[-214,47]],[[169169,376466],[-2031,9653]],[[260087,393431],[-260,-1361]],[[259827,392070],[-266,627],[-811,-80]],[[258750,392617],[-16,4231],[-102,-3]],[[234285,396682],[0,-4534]],[[234285,392148],[-1238,4]],[[233047,392152],[0,2439]],[[165056,395774],[67,-1277],[-535,-3016]],[[164588,391481],[-682,-2964],[-866,-752],[-371,962],[-735,-860]],[[161934,387867],[-256,3852],[-77,-66]],[[243783,391493],[-601,-672],[-237,-1354]],[[242945,389467],[-301,-675],[-459,1580]],[[241412,395564],[-331,-4506],[-621,73]],[[240460,391131],[-613,170]],[[239847,391301],[27,4378]],[[284258,395792],[-146,-763]],[[284112,395029],[62,-330]],[[284174,394699],[109,-599]],[[284283,394100],[166,-999]],[[284449,393101],[22,-1315],[-319,-1468],[-235,541]],[[283917,390859],[-818,3313]],[[283747,394572],[0,0]],[[283737,394153],[0,0]],[[203879,391310],[232,-1351],[-62,-2148],[-284,-1101]],[[203765,386710],[-658,-441]],[[235534,394170],[-3,-2031]],[[235531,392139],[-1246,9]],[[267120,397309],[10,-7398]],[[267130,389911],[-689,1521],[-363,-1183]],[[266078,390249],[-168,18]],[[189012,387896],[-1284,-153]],[[187728,387743],[-2094,147]],[[185634,387890],[9,1163]],[[214813,391384],[1,-1534]],[[214814,389850],[-3143,-50]],[[273490,391765],[-131,-932]],[[273359,390833],[-145,-1040]],[[273214,389793],[-209,605],[-29,1581],[-303,3454]],[[281794,396633],[-352,-2134]],[[281442,394499],[-181,-1569],[-249,-398]],[[281012,392532],[-284,1321]],[[270386,396308],[-126,-2312],[-210,-922],[124,-3421],[-112,-240]],[[270062,389413],[-201,-166]],[[269861,389247],[-208,45],[20,1692],[-328,120],[-31,1671],[-276,127],[19,1217]],[[262663,395170],[-751,43],[12,491]],[[271294,391075],[-509,-437],[-303,-920],[26,-2484]],[[270508,387234],[-446,2179]],[[250450,392212],[-956,23]],[[249494,392235],[-119,4764]],[[268850,394205],[-252,-4690],[-210,-491]],[[268388,389024],[-201,3414],[-398,-532]],[[267789,391906],[-350,-1992],[-309,-3]],[[282766,395947],[-168,-2056],[513,-5136]],[[283111,388755],[-288,-2729]],[[282823,386026],[-280,59],[-558,5268]],[[281985,391353],[-543,3146]],[[249494,392235],[6,-1626],[-311,-14]],[[249189,390595],[-1322,102]],[[247867,390697],[42,2085]],[[247909,392782],[135,616]],[[248044,393398],[7,862],[-447,1331]],[[245702,394611],[-17,-6019]],[[245685,388592],[-299,1157],[-435,348],[-393,1320]],[[244558,391417],[-138,195]],[[284546,393465],[-223,1828]],[[284323,395293],[-65,499]],[[258750,392617],[-93,-1409]],[[258657,391208],[-1043,-28]],[[257614,391180],[0,4061]],[[248044,393398],[-494,1528],[-406,-1104],[-259,-2536],[-553,-983]],[[246332,390303],[-514,-1949],[-133,238]],[[289289,396094],[351,-2735],[270,-53],[-16,-3322],[132,-3185]],[[290026,386799],[-57,0]],[[289969,386799],[-44,0]],[[289925,386799],[-712,13]],[[289213,386812],[-982,152],[-22,1873]],[[288209,388837],[-16,1390]],[[227834,389742],[-1541,10]],[[226293,389752],[-11,4863]],[[278860,392582],[-466,-5288]],[[278394,387294],[-254,-1223]],[[278140,386071],[-449,839],[-166,1724],[-310,767]],[[277215,389401],[59,1365]],[[239847,391301],[-20,-3034]],[[239827,388267],[-622,98],[-4,-541],[-615,115]],[[238586,387939],[4,814]],[[238590,388753],[39,6929]],[[287565,393214],[-230,-1317],[167,-933],[-195,-1782],[-402,1980],[-480,1174],[215,1899],[256,-1835],[-68,1744],[239,1469]],[[283917,390859],[-162,-3064]],[[283755,387795],[-414,1424],[-230,-464]],[[283312,392781],[-46,161]],[[283266,392942],[46,-161]],[[273214,389793],[-307,-1570]],[[272907,388223],[-755,414],[-159,1170]],[[238590,388753],[-1541,208]],[[237049,388961],[-152,25],[-1,4923]],[[284458,394060],[-175,40]],[[284174,394699],[-62,330]],[[284323,395293],[135,-1233]],[[165958,391614],[-111,-1811],[216,-2119],[-268,-3201]],[[165795,384483],[-318,1674],[-351,-1063],[-391,1452]],[[164735,386546],[-147,1346]],[[164588,387892],[0,3589]],[[262873,394360],[-58,-1367],[-578,-417]],[[262237,392576],[-496,-1309]],[[261741,391267],[-4,4143]],[[241700,392158],[-279,-5795]],[[241421,386363],[-363,55]],[[241058,386418],[-603,3090],[5,1623]],[[160323,392090],[-77,-1063],[333,-1451],[-117,-1633],[136,-803],[-47,-1999],[-216,-907]],[[160335,384234],[-267,44],[0,3908],[-681,142],[-457,-373]],[[158930,387955],[-515,6080],[-298,453]],[[261741,391267],[-366,838]],[[261375,392105],[-331,-490],[66,-2302]],[[261110,389313],[-395,370]],[[260715,389683],[-3,1350],[-313,1081],[-1,1464]],[[253224,394176],[-108,-3961],[133,-657]],[[253249,389558],[-1250,127]],[[251999,389685],[9,4096]],[[256455,395227],[-410,-1812],[-93,-2129],[104,-2737]],[[256056,388549],[-615,-232]],[[255441,388317],[-373,-1489],[-409,-715]],[[254659,386113],[-35,905],[308,954],[-17,1004]],[[254915,388976],[435,3214],[-99,2079]],[[257614,391180],[2,-2983]],[[257616,388197],[-674,-392]],[[256942,387805],[55,7426]],[[256942,387805],[-413,172]],[[256529,387977],[-473,572]],[[274960,392162],[-143,-1744],[-396,-2215]],[[274421,388203],[-376,576],[-266,-940]],[[273779,387839],[-420,2994]],[[247909,392782],[-238,-999],[-192,-2324],[176,-1160]],[[247655,388299],[-25,-168]],[[247630,388131],[-211,-2528]],[[247419,385603],[-176,2125],[-512,9],[-410,-651]],[[246321,387086],[11,3217]],[[264517,389239],[-755,-736]],[[263762,388503],[-151,4643]],[[264447,393802],[70,-4563]],[[230673,392156],[-3,-4046]],[[230670,388110],[-1298,15]],[[229372,388125],[-307,-1],[-1,1618]],[[226293,389752],[2,-1622]],[[226295,388130],[-1550,-17]],[[224745,388113],[-16,3259]],[[233047,392152],[-21,-5676]],[[233026,386476],[-1232,4]],[[231794,386480],[13,5678]],[[158930,387955],[-62,-1644],[169,-2032],[-400,3],[-19,-2538],[-216,-435]],[[158402,381309],[-24,5]],[[158378,381314],[-291,-20]],[[158087,381294],[-3,44]],[[158084,381338],[140,477],[-107,2272],[-521,4539],[-126,2199]],[[281985,391353],[-669,-3258],[-157,217]],[[281159,388312],[-296,1764]],[[280863,390076],[149,2456]],[[263250,392869],[-350,-1063]],[[262900,391806],[-413,-1089]],[[262487,390717],[-250,1859]],[[158084,381338],[-237,-852],[-152,858]],[[157695,381344],[-539,908],[-435,1971],[-295,-310]],[[156426,383913],[-354,2862],[-569,2151],[-557,3778]],[[254915,388976],[-726,35]],[[254189,389011],[12,5213]],[[280017,389656],[-138,-1763],[572,-1648]],[[280451,386245],[-493,-2673]],[[279958,383572],[-240,-1326]],[[279718,382246],[-1324,5048]],[[279335,387009],[0,0]],[[254189,389011],[-119,3]],[[254070,389014],[-537,-21]],[[253533,388993],[-284,565]],[[269861,389247],[-95,-2476],[-512,-708]],[[269254,386063],[-253,186]],[[269001,386249],[-194,1565]],[[268807,387814],[-419,1210]],[[237049,388961],[-4,-2241]],[[237045,386720],[-1525,569]],[[235520,387289],[11,4850]],[[284458,394060],[-9,-959]],[[280863,390076],[-319,-2826]],[[280544,387250],[-93,-1005]],[[260715,389683],[-623,-25],[-151,-811]],[[259941,388847],[-106,263],[-8,2960]],[[265356,392696],[-244,-3246]],[[265112,389450],[-475,-738]],[[264637,388712],[-120,527]],[[251999,389685],[-2,-2446]],[[251997,387239],[-1241,-18]],[[250756,387221],[2,543]],[[250758,387764],[15,4342]],[[263762,388503],[-226,-927]],[[263536,387576],[-64,-376]],[[263472,387200],[-541,2720],[-31,1886]],[[283312,392781],[-46,161]],[[259941,388847],[-406,-1354],[-3,-1307]],[[259532,386186],[-107,-8]],[[259425,386178],[-618,89]],[[258807,386267],[-150,4]],[[258657,386271],[0,4937]],[[247867,390697],[-212,-2398]],[[285904,391677],[33,-3346],[377,-2749],[-110,-1238],[-607,2727],[-162,3701]],[[266078,390249],[8,-2072]],[[266086,388177],[-605,-1280],[-198,665]],[[265283,387562],[-171,1888]],[[262487,390717],[-392,-1208]],[[262095,389509],[-261,-210]],[[261834,389299],[-459,2806]],[[268807,387814],[-424,-2456]],[[268383,385358],[-426,367],[-546,2055]],[[267411,387780],[397,3341],[-19,785]],[[250758,387764],[-585,209],[-360,-847],[-369,60],[-248,-998]],[[249196,386188],[-7,4407]],[[277215,389401],[-117,-2971],[-334,-2300],[41,-776]],[[276805,383354],[-350,-1566],[-111,-2182]],[[276344,379606],[-848,-338],[-274,1261],[9,2076]],[[275231,382605],[22,2224],[297,803]],[[242945,389467],[-266,-2385],[-345,60],[127,-1459],[-203,-1038]],[[242258,384645],[-596,108],[14,1563],[-255,47]],[[231794,386480],[-23,-4900]],[[231771,381580],[-1110,51]],[[230661,381631],[9,6479]],[[234285,392148],[-26,-6490]],[[234259,385658],[-1233,6]],[[233026,385664],[0,812]],[[235520,387289],[0,-1654]],[[235520,385635],[-1261,23]],[[275231,382605],[-213,772]],[[275018,383377],[-482,1699],[-115,3127]],[[161934,387867],[6,-3922]],[[161940,383945],[-1040,-1302],[-210,590],[-282,-2812]],[[160408,380421],[-311,-431],[76,1800]],[[160173,381790],[162,2444]],[[261834,389299],[-406,-1730]],[[261428,387569],[-332,583]],[[261096,388152],[14,1161]],[[263472,387200],[-446,-2245]],[[263026,384955],[-363,79]],[[262663,385034],[-258,1507],[-110,2136],[-200,832]],[[267411,387780],[-197,-1448],[23,-1522],[-313,-464]],[[266924,384346],[-311,1158]],[[266613,385504],[-354,897],[-173,1776]],[[244558,391417],[4,-9114]],[[244562,382303],[-467,23],[2,-1087]],[[244097,381239],[-267,17]],[[243830,381256],[-40,2513]],[[243790,383769],[12,7731]],[[169169,376466],[1659,-8029]],[[170828,368437],[-2625,-35]],[[168203,368402],[-689,2284]],[[167514,370686],[-267,2691],[-421,166]],[[166826,373543],[187,2774],[-291,1077],[-121,2597],[-312,216],[-475,1906],[-19,2370]],[[246321,387086],[-122,-4888]],[[246199,382198],[-880,-1]],[[245319,382197],[-757,106]],[[243790,383769],[-1535,69]],[[242255,383838],[3,807]],[[164588,387892],[-720,-833],[-260,132],[-515,-1390],[-61,-1061],[-1009,-2142]],[[162023,382598],[-83,1347]],[[286908,384389],[-189,474],[-264,2363],[218,1227],[-54,1256],[301,244],[335,-1095],[296,2144]],[[288209,388837],[-340,-1484],[-14,-1069]],[[287855,386284],[-365,-3226],[-582,1331]],[[218595,391430],[0,-8114]],[[218595,383316],[-1157,7]],[[217438,383323],[-62,-1]],[[217376,383322],[-8,8119]],[[219823,391396],[8,-8115]],[[219831,383281],[-1236,35]],[[216145,391424],[-1,-8127]],[[216144,383297],[-1330,-14]],[[214814,383283],[1,118]],[[214815,383401],[-1,6449]],[[217376,383322],[-1162,-24]],[[216214,383298],[-70,-1]],[[282823,386026],[45,-780]],[[282868,385246],[-236,-135]],[[282632,385111],[-191,603],[-899,-1519]],[[281542,384195],[7,1474],[-390,2643]],[[221667,391366],[1,-6464]],[[221668,384902],[2,-1623]],[[221670,383279],[-1791,1]],[[219879,383280],[-48,1]],[[241058,386418],[-180,-1533],[-17,-2354]],[[240861,382531],[-192,-605],[-545,142],[-327,1182]],[[239797,383250],[30,5017]],[[224745,388113],[2,-4860]],[[224747,383253],[-1206,6]],[[223541,383259],[-334,2],[0,1622]],[[223207,384883],[-1,6486]],[[206744,388071],[3,-4865],[-303,-5]],[[206444,383201],[-2083,131]],[[204361,383332],[-596,3378]],[[223207,384883],[-1539,19]],[[285428,388496],[2,-844]],[[285430,387652],[-211,220],[-263,-2217]],[[284956,385655],[81,-2289],[-234,434],[-329,2868],[-459,-1568],[-187,2280],[549,3865]],[[258657,386271],[-1,-537],[-1038,13]],[[257618,385747],[-2,2450]],[[270898,384461],[-214,-1052],[-154,1960]],[[270530,385369],[-22,1865]],[[271507,390062],[-150,-656],[68,-2319],[-484,-1260],[-43,-1366]],[[181367,389064],[0,-7900]],[[181367,381164],[-7,-10123]],[[181360,371041],[5,-11252]],[[181365,359789],[1,-2928]],[[181366,356861],[-1984,13],[0,179],[-2726,-7],[-435,-204]],[[199240,384018],[-2,564],[-1384,-11],[128,-1422],[415,-674],[-79,-1241]],[[198318,381234],[-2999,13]],[[195319,381247],[-49,6459]],[[273779,387839],[177,-533],[-261,-1184],[-892,-2813]],[[272803,383309],[-146,3878],[250,1036]],[[249196,386188],[3,-3707]],[[249199,382481],[-545,27]],[[248654,382508],[-40,1621],[-342,19],[-642,3983]],[[281542,384195],[-437,-1435],[-99,693]],[[281006,383453],[-396,1782],[-66,2015]],[[272803,383309],[-1,-6]],[[272802,383303],[-272,-1508],[-143,-3970]],[[272387,377825],[-212,339]],[[272175,378164],[-165,2328],[-356,2011],[-528,-202]],[[271126,382301],[46,1977],[-274,183]],[[214815,383401],[-1944,-33]],[[212871,383368],[-1832,-28]],[[211039,383340],[-284,-8]],[[210755,383332],[-8,4680]],[[227834,389742],[0,-8111]],[[227834,381631],[-920,3]],[[226914,381634],[-613,-2]],[[226301,381632],[-6,6498]],[[229372,388125],[-59,-8133]],[[229313,379992],[-869,39]],[[228444,380031],[-1,1618],[-609,-18]],[[265283,387562],[-139,-988]],[[265144,386574],[-341,378]],[[264803,386952],[-166,1760]],[[253533,388993],[-9,-5827]],[[253524,383166],[-611,-14]],[[252913,383152],[-925,24]],[[251988,383176],[9,4063]],[[261096,388152],[-572,-2670]],[[260524,385482],[-286,-2089],[-141,377]],[[260097,383770],[-46,2157],[-519,259]],[[270530,385369],[-363,-644],[-243,-2058]],[[269924,382667],[-670,3396]],[[262663,385034],[-353,-388]],[[262310,384646],[-796,417]],[[261514,385063],[-86,2506]],[[278140,386071],[-341,-3643],[-207,-671]],[[277592,381757],[-787,1597]],[[283755,387795],[-68,-3119]],[[283687,384676],[-6,-1714]],[[283681,382962],[-121,26]],[[283560,382988],[-214,707]],[[283346,383695],[-232,459]],[[283114,384154],[-246,1092]],[[264803,386952],[-255,-1635]],[[264548,385317],[-418,-1608],[-274,-40]],[[263856,383669],[-44,1680],[-276,2227]],[[185634,387890],[509,-3310],[-59,-2002],[-242,-1389]],[[185842,381189],[-97,-48]],[[185745,381141],[-4378,23]],[[254070,389014],[36,-2006],[-137,-3776]],[[253969,383232],[-445,-66]],[[254659,386113],[-464,-2724],[-218,-213]],[[253977,383176],[-8,56]],[[238586,387939],[-30,-5630]],[[238556,382309],[-1467,73]],[[237089,382382],[-71,9],[27,4329]],[[289213,386812],[95,-1817],[-160,-1191],[-692,-216]],[[288456,383588],[-506,-230]],[[287950,383358],[-283,-697],[-32,1164],[220,2459]],[[275018,383377],[-768,-3504],[-473,452]],[[273777,380325],[-279,2236],[-256,-553],[-440,1295]],[[256529,387977],[-2,-5249]],[[256527,382728],[-679,251]],[[255848,382979],[3,2497],[-256,-92],[-154,2933]],[[158378,381314],[146,-1463],[-437,1443]],[[160173,381790],[-408,-2224],[-354,-188],[-351,1518],[-215,-1697],[-283,501],[-160,1609]],[[239797,383250],[35,-3689]],[[239832,379561],[-1222,173]],[[238610,379734],[-54,2575]],[[255848,382979],[-1,-825],[-418,-676]],[[255429,381478],[-616,57]],[[254813,381535],[-309,1119],[-517,33]],[[253987,382687],[-10,489]],[[257618,385747],[6,-2451]],[[257624,383296],[-312,-1079]],[[257312,382217],[-630,-29]],[[256682,382188],[-155,540]],[[266613,385504],[-146,-2035],[-362,-1580]],[[266105,381889],[-246,1825],[-347,209]],[[265512,383923],[-368,2651]],[[261514,385063],[-513,-1353]],[[261001,383710],[-477,1772]],[[230661,381631],[-3,-1635],[-459,10]],[[230199,380006],[-886,-14]],[[209217,388123],[-12,-6998]],[[209205,381125],[-8,-7666]],[[209197,373459],[-808,1541]],[[208389,375000],[-823,1546],[-1023,-358],[-101,636]],[[206442,376824],[2,6377]],[[210755,383332],[-21,-1722],[-306,-20],[0,-1082],[-596,-8],[-627,625]],[[226301,381632],[-1535,-18]],[[224766,381614],[-19,1639]],[[248654,382508],[-383,35],[1,-1620],[-477,-883]],[[247795,380040],[-127,737]],[[247668,380777],[-303,1892],[54,2934]],[[250756,387221],[-8,-4860]],[[250748,382361],[-1241,119]],[[249507,382480],[-308,1]],[[286032,384373],[445,-3369],[-10,-1655],[-344,2010],[-710,2346],[-112,-1068],[-345,3018]],[[285430,387652],[602,-3279]],[[164735,386546],[-435,-1185],[-950,-7856],[-381,-2238]],[[162969,375267],[-759,4580]],[[162210,379847],[-187,2751]],[[187728,387743],[-228,-1435],[16,-5094]],[[187516,381214],[-1674,-25]],[[192580,387706],[28,-2493],[350,-3273],[-106,-714]],[[192852,381226],[-4142,-34],[-1194,22]],[[247668,380777],[-455,-1591]],[[247213,379186],[-466,-723],[-158,1359]],[[246589,379822],[-390,2376]],[[268978,383008],[-530,-70]],[[268448,382938],[-65,2420]],[[269001,386249],[-23,-3241]],[[268448,382938],[-363,-1281]],[[268085,381657],[-378,306],[-289,1389],[-223,-1372]],[[267195,381980],[-271,2366]],[[195319,381247],[2,-5061]],[[195321,376186],[-5,-7382]],[[195316,368804],[-5,-9040]],[[195311,359764],[-2662,-21]],[[192649,359743],[-2090,98]],[[190559,359841],[-1844,-32]],[[188715,359809],[653,1883],[604,385],[346,3276],[287,901],[-33,1955],[278,1645]],[[190850,369854],[446,2473],[227,3836],[527,219],[571,4056],[231,788]],[[263856,383669],[113,-1403]],[[263969,382266],[-621,-1697]],[[263348,380569],[-281,1464]],[[263067,382033],[-41,2922]],[[281006,383453],[-231,-1615]],[[280775,381838],[-817,1734]],[[279718,382246],[-89,-2345],[-162,-618]],[[279467,379283],[-168,-1840],[-296,-1250],[-422,176]],[[278581,376369],[-906,3632]],[[277675,380001],[127,1436],[-210,320]],[[278910,381985],[0,0]],[[279286,380244],[0,0]],[[251988,383176],[-7,-2447]],[[251981,380729],[-1184,-9]],[[250797,380720],[-49,1641]],[[237089,382382],[-23,-3302]],[[237066,379080],[-1549,436]],[[235517,379516],[3,6119]],[[172686,359243],[-1858,9194]],[[265512,383923],[-362,-1945]],[[265150,381978],[-326,1244],[-276,2095]],[[204361,383332],[336,-2213],[254,-3271],[312,-1387]],[[205263,376461],[44,-2691]],[[205307,373770],[-1620,-57]],[[203687,373713],[-1526,-10],[-2,1613],[-297,15]],[[201862,375331],[0,678],[-568,1791],[-287,-220]],[[201007,377580],[-1,3556]],[[289490,378912],[-53,-34]],[[289437,378878],[53,34]],[[290026,386799],[-57,0]],[[289865,385833],[-126,-2836],[-305,-809],[-323,-3508]],[[289111,378680],[-677,-383]],[[288434,378297],[-6,31]],[[288428,378328],[-108,835],[337,901],[-201,3524]],[[289925,386799],[-60,-966]],[[166826,373543],[-111,722]],[[166715,374265],[-627,2326],[-334,-1722],[-421,-936],[-390,89],[-379,1183],[-853,-3609]],[[163711,371596],[-742,3671]],[[233026,385664],[-30,-6554]],[[232996,379110],[-1226,36]],[[231770,379146],[1,2434]],[[242255,383838],[29,-5136]],[[242284,378702],[-616,90]],[[241668,378792],[-305,22],[-346,3550],[-156,167]],[[258807,386267],[-62,-3639],[-147,-850]],[[258598,381778],[-366,-1124]],[[258232,380654],[2,1594],[-308,13],[2,1095],[-304,-60]],[[259425,386178],[1,-1624],[368,-2836]],[[259794,381718],[-134,-3193]],[[259660,378525],[-140,-132]],[[259520,378393],[-502,215],[-245,853],[-175,2317]],[[269924,382667],[-59,-1572],[261,-1815],[-318,-1929]],[[269808,377351],[-304,-1660]],[[269504,375691],[-230,1692]],[[269274,377383],[-144,2308],[-237,1273],[85,2044]],[[260097,383770],[-303,-2052]],[[284512,383385],[-92,-1945]],[[284420,381440],[-8,-27]],[[284412,381413],[-144,-224]],[[284268,381189],[-437,1843],[-150,-70]],[[283687,384676],[250,-96],[535,1273],[40,-2468]],[[267195,381980],[-57,-1465]],[[267138,380515],[-472,-1482]],[[266666,379033],[-181,318]],[[266485,379351],[-380,2538]],[[282632,385111],[-701,-4527]],[[281931,380584],[-408,649],[-297,-356]],[[281226,380877],[-451,961]],[[234259,385658],[-34,-6558]],[[234225,379100],[-1229,10]],[[235517,379516],[0,-428]],[[235517,379088],[-1292,12]],[[261001,383710],[173,-405],[-53,-2162]],[[261121,381143],[-14,-545]],[[261107,380598],[-354,-821],[-435,244],[-629,-1650]],[[259689,378371],[-29,154]],[[283114,384154],[232,-459]],[[283560,382988],[-758,-4755]],[[282802,378233],[-126,314]],[[282676,378547],[-383,1648],[-362,389]],[[271126,382301],[-263,-1062],[-13,-2367]],[[270850,378872],[-720,-942]],[[270130,377930],[-322,-579]],[[263067,382033],[-389,-1466]],[[262678,380567],[-442,233]],[[262236,380800],[74,3846]],[[265150,381978],[-286,-1441]],[[264864,380537],[-573,-891]],[[264291,379646],[-263,849],[-59,1771]],[[262236,380800],[-219,-1713]],[[262017,379087],[-896,2056]],[[223541,383259],[-1,-4853],[-304,-4]],[[223236,378402],[-914,10],[-1,1609],[-610,4]],[[221711,380025],[-41,3254]],[[199425,381138],[158,-1618],[-159,-1773]],[[199424,377747],[-472,-1109]],[[198952,376638],[-30,887],[-420,1384],[23,1648],[-207,677]],[[157695,381344],[163,-971],[-42,-3300],[179,-855],[-251,-1183],[-370,1730],[-114,-335],[-478,2413],[-374,-283],[164,2872],[317,-1457],[-463,3938]],[[266485,379351],[-223,-717],[-503,-259]],[[265759,378375],[-341,2566],[-268,1037]],[[162210,379847],[3,-6325],[-189,423],[-596,-1236],[-739,-3959]],[[160689,368750],[-239,1114],[0,5132]],[[160450,374996],[-70,4168]],[[160380,379164],[28,1257]],[[243830,381256],[-6,-1909],[-732,4],[-351,-755]],[[242741,378596],[-457,106]],[[287272,377541],[-21,-6]],[[287251,377535],[21,6]],[[287356,378030],[36,-498]],[[287392,377532],[-31,2]],[[287361,377534],[-41,379]],[[287320,377913],[36,117]],[[287320,377913],[-5,-375]],[[287315,377538],[-19,-1]],[[287296,377537],[24,376]],[[287781,379692],[-1,1870],[-264,-794],[434,2590]],[[288428,378328],[-760,-1368],[113,2732]],[[281226,380877],[-275,-2360]],[[280951,378517],[-515,-3904]],[[280436,374613],[-425,-1183]],[[280011,373430],[-544,5853]],[[280484,379686],[0,0]],[[285766,378696],[-155,-919]],[[285611,377777],[-363,656],[-314,2280],[-163,-800]],[[284771,379913],[-351,1527]],[[284512,383385],[528,-1942],[635,-277],[253,-1943],[-162,-527]],[[241668,378792],[-8,-3016]],[[241660,375776],[-363,-1063],[-225,1684],[-655,60]],[[240417,376457],[-605,128]],[[239812,376585],[20,2976]],[[269274,377383],[-231,160],[-89,-1393]],[[268954,376150],[-910,2229],[-138,-652]],[[267906,377727],[-93,803]],[[267813,378530],[371,1947],[-99,1180]],[[277675,380001],[-469,-3994]],[[277206,376007],[-657,396],[-135,1144],[-337,-43]],[[276077,377504],[267,2102]],[[214814,383283],[8,-9753]],[[214822,373530],[1,-1754]],[[214823,371776],[-1967,-12]],[[212856,371764],[15,11604]],[[276077,377504],[-296,-1431],[-373,-3413]],[[275408,372660],[-430,-145],[-592,890]],[[274386,373405],[-399,2555]],[[273987,375960],[102,2168],[-312,2197]],[[267813,378530],[-479,65],[-196,1920]],[[206442,376824],[-331,1927],[-322,-2224],[-84,711],[-442,-777]],[[212856,371764],[-914,-4]],[[211942,371760],[-915,4]],[[211027,371764],[12,11576]],[[211027,371764],[-1822,7],[-8,1688]],[[258232,380654],[-83,-1403]],[[258149,379251],[-55,-2224],[-404,-1554]],[[257690,375473],[32,1004],[-294,274],[-178,1615]],[[257250,378366],[113,-4],[-51,3855]],[[273987,375960],[-386,-927]],[[273601,375033],[-357,1056],[-619,250],[-238,1486]],[[217438,383323],[-2,-8108],[40,-1726]],[[217476,373489],[-1219,0]],[[216257,373489],[-44,1699],[1,8110]],[[219879,383280],[1,-4863]],[[219880,378417],[-1219,28],[33,-4957]],[[218694,373488],[-1218,1]],[[216257,373489],[-1435,41]],[[253987,382687],[206,-1256],[-505,-5063]],[[253688,376368],[-787,325]],[[252901,376693],[12,6459]],[[224766,381614],[1,-6484]],[[224767,375130],[-1507,16]],[[223260,375146],[-24,3256]],[[221711,380025],[-1,-3246]],[[221710,376779],[-1831,18]],[[219879,376797],[1,1620]],[[252901,376693],[0,-14]],[[252901,376679],[-925,-16]],[[251976,376663],[5,4066]],[[284268,381189],[-150,-1310],[278,-2137]],[[284396,377742],[-309,-256],[-1,-1105]],[[284086,376381],[-456,-1904]],[[283630,374477],[-165,-177],[-222,1929],[-441,2004]],[[256682,382188],[-153,-1592],[-544,-3576],[-2,-876]],[[255983,376144],[-94,369]],[[255889,376513],[-415,787]],[[255474,377300],[-45,4178]],[[254813,381535],[-35,-5040]],[[254778,376495],[-630,72]],[[254148,376567],[55,-1760],[-337,-147]],[[253866,374660],[-178,1708]],[[272175,378164],[-318,-1099],[158,-2552]],[[272015,374513],[-260,-47]],[[271755,374466],[-295,397],[-169,2098],[-573,1279],[132,632]],[[249507,382480],[-6,-4914]],[[249501,377566],[-221,-2833]],[[249280,374733],[-473,1904],[-262,-566]],[[248545,376071],[-165,1642],[-585,2327]],[[238610,379734],[-22,-2902],[-171,-1635]],[[238417,375197],[-154,26]],[[238263,375223],[-509,95],[7,1075],[-716,162]],[[237045,376555],[21,2525]],[[250797,380720],[-133,-3247]],[[250664,377473],[-1163,93]],[[245319,382197],[-11,-8639]],[[245308,373558],[-149,-795]],[[245159,372763],[-438,51],[5,1622],[-613,34]],[[244113,374470],[-16,6769]],[[264291,379646],[-143,-3261]],[[264148,376385],[-273,-833]],[[263875,375552],[-122,1730],[-504,1186]],[[263249,378468],[99,2101]],[[246589,379822],[-14,-6361]],[[246575,373461],[-1267,97]],[[257250,378366],[-461,-1267]],[[256789,377099],[-280,-2533],[-526,1578]],[[259520,378393],[-23,-3366],[-403,-372]],[[259094,374655],[-945,4596]],[[263249,378468],[-138,-2639]],[[263111,375829],[-141,-279],[-100,2291]],[[262870,377841],[-192,2726]],[[265759,378375],[-26,-1496]],[[265733,376879],[-550,230]],[[265183,377109],[-319,3428]],[[228444,380031],[1,-3258]],[[228445,376773],[-1531,-4]],[[226914,376769],[0,4865]],[[231770,379146],[-5,-5694]],[[231765,373452],[0,-2431]],[[231765,371021],[-1573,61]],[[230192,371082],[7,8924]],[[226914,376769],[9,-3303],[-304,-23]],[[226619,373443],[-1830,-22]],[[224789,373421],[-22,1709]],[[255474,377300],[-169,-642],[-244,1256],[-44,-2642],[-239,1223]],[[244113,374470],[-771,42],[-10,-3582]],[[243332,370930],[-613,69]],[[242719,370999],[22,7597]],[[190850,369854],[-4778,-85],[-897,125]],[[185175,369894],[-17,4889],[309,-24],[-28,1599],[335,1],[-29,4782]],[[285474,374122],[-189,-777]],[[285285,373345],[-143,1233],[-392,-213],[-211,1145],[-143,2232]],[[284412,381413],[24,-1012],[357,-714],[24,-1757],[347,-1480],[310,-2328]],[[198952,376638],[-341,-2419]],[[198611,374219],[-359,1512],[-614,-665],[-130,1368],[-1561,19],[-626,-267]],[[282676,378547],[-305,-5181]],[[282371,373366],[-288,724],[-132,1442],[-320,1092]],[[281631,376624],[-680,1893]],[[185175,369894],[-607,4],[0,-813]],[[184568,369085],[-378,-469],[-604,143],[1,868],[-616,2],[-2,1663],[-315,-252],[-1294,1]],[[262017,379087],[-182,-1209]],[[261835,377878],[-646,-598],[-256,977]],[[260933,378257],[174,2341]],[[201007,377580],[-383,-320],[-19,-4903],[45,-4702]],[[200650,367655],[-984,-5]],[[199666,367650],[-1,4037]],[[199665,371687],[0,2392],[-241,3668]],[[262870,377841],[-381,-296],[-271,-1166]],[[262218,376379],[-341,113]],[[261877,376492],[-42,1386]],[[251976,376663],[-1,-809]],[[251975,375854],[-1238,-25]],[[250737,375829],[-73,1644]],[[285611,377777],[352,-2380]],[[285963,375397],[-300,-591]],[[285663,374806],[-240,292],[-546,3121],[-106,1694]],[[248545,376071],[-481,-3792]],[[248064,372279],[-249,-32],[-722,3897],[380,1914],[-260,1128]],[[260933,378257],[-419,-2943],[-266,-430]],[[260248,374884],[-559,3487]],[[267906,377727],[-44,-1950]],[[267862,375777],[-303,91],[-437,-1812],[23,-1008]],[[267145,373048],[-650,2775]],[[266495,375823],[171,3210]],[[265183,377109],[-100,-1733]],[[265083,375376],[-218,283]],[[264865,375659],[-717,726]],[[160450,374996],[-1124,-1844],[-235,1488],[-259,115],[-483,1735]],[[158349,376490],[-209,1238],[349,1656],[315,-572],[373,668],[783,-708],[357,1506],[63,-1114]],[[230192,371082],[-1,-2432]],[[230191,368650],[-1748,-16]],[[228443,368634],[2,8139]],[[223260,375146],[0,-1719]],[[223260,373427],[-1521,35]],[[221739,373462],[-29,3317]],[[278540,374733],[-257,-157],[-226,-2495],[-255,-813]],[[277802,371268],[-172,-1566]],[[277630,369702],[-515,2397],[26,1888]],[[277141,373987],[65,2020]],[[278581,376369],[-41,-1636]],[[277790,374553],[0,0]],[[278042,373830],[0,0]],[[248064,372279],[-101,-553]],[[247963,371726],[-1081,38]],[[246882,371764],[-315,-16],[8,1713]],[[163711,371596],[-1656,-4356],[43,-1065],[-726,-3845]],[[161372,362330],[-155,871],[-328,-611],[-162,2473],[145,499],[-185,3196]],[[160687,368758],[2,-8]],[[239812,376585],[-307,30],[-14,-1889]],[[239491,374726],[-1074,471]],[[237045,376555],[-22,-4864]],[[237023,371691],[-1516,258]],[[235507,371949],[0,363]],[[235507,372312],[10,6776]],[[266495,375823],[-378,-675]],[[266117,375148],[-384,1731]],[[280011,373430],[-196,-1764],[-242,63],[-67,-1661]],[[279506,370068],[-122,-195]],[[279384,369873],[-552,4225],[-292,635]],[[259094,374655],[-345,-3823]],[[258749,370832],[-373,-503],[-265,1039],[-246,-1076]],[[257865,370292],[-128,1809]],[[257737,372101],[-47,3372]],[[232996,379110],[-18,-5687]],[[232978,373423],[-1213,29]],[[234225,379100],[-28,-5680]],[[234197,373420],[-1219,3]],[[235507,372312],[-1310,27]],[[234197,372339],[0,1081]],[[287392,377532],[-31,2]],[[287315,377538],[-19,-1]],[[287272,377541],[-21,-6]],[[288876,376511],[119,-271],[-517,-3407],[-55,-2435],[-470,-1281]],[[287953,369117],[-126,1004]],[[287827,370121],[-283,134],[408,3843]],[[287952,374098],[291,1243],[191,2956]],[[289111,378680],[-235,-2169]],[[289490,378912],[-53,-34]],[[271755,374466],[-438,-677],[176,-948],[-282,-761]],[[271211,372080],[-347,406],[-184,-777],[-249,1135],[-83,2839],[-218,2247]],[[286401,372837],[-192,2274],[-246,286]],[[285766,378696],[289,-8],[647,-2450],[-301,-3401]],[[242719,370999],[-614,37]],[[242105,371036],[2,817],[-459,1220],[12,2703]],[[208389,375000],[-289,-1427],[-261,-3093],[-562,-3167],[-508,-171],[-617,-1904]],[[206152,365238],[46,2010],[-135,4024],[-310,765],[-525,-1497]],[[205228,370540],[79,3230]],[[283630,374477],[147,-1396],[514,-1037],[-44,-592]],[[284247,371452],[-292,-1688]],[[283955,369764],[-489,1286],[-105,1395],[-525,504]],[[282836,372949],[-465,417]],[[281362,373717],[-225,-1081]],[[281137,372636],[-621,1278],[-80,699]],[[281631,376624],[-269,-2907]],[[260248,374884],[159,-1472]],[[260407,373412],[-544,-3501],[-48,-1933]],[[259815,367978],[-430,176]],[[259385,368154],[-185,2177],[-451,501]],[[263875,375552],[-250,-1450]],[[263625,374102],[-126,-754],[-407,1614]],[[263092,374962],[19,867]],[[268954,376150],[-162,-516],[84,-2448]],[[268876,373186],[-340,667],[-495,-734]],[[268041,373119],[-179,2658]],[[219879,376797],[30,-8169]],[[219909,368628],[-1216,-7]],[[218693,368621],[1,4867]],[[257737,372101],[-515,1415]],[[257222,373516],[-85,1915],[-348,1668]],[[273601,375033],[187,-2460],[-193,530],[-410,-2364]],[[273185,370739],[-292,-249],[-64,-1204]],[[272829,369286],[-281,1662],[-394,3474],[-139,91]],[[261877,376492],[-288,-708],[-405,-2399]],[[261184,373385],[-333,-3287]],[[260851,370098],[-285,-39],[141,1604],[-300,1749]],[[271211,372080],[-148,-2078]],[[271063,370002],[-199,-676]],[[270864,369326],[-114,472]],[[270750,369798],[-437,240],[-582,3546]],[[269731,373584],[-227,2107]],[[255889,376513],[81,-2236],[-378,-1770]],[[255592,372507],[-241,-671]],[[255351,371836],[-666,-173]],[[254685,371663],[-57,1803],[-480,3101]],[[285285,373345],[270,-2335]],[[285555,371010],[-138,-2862]],[[285417,368148],[-256,2601]],[[285161,370749],[-819,3092],[-256,2540]],[[199665,371687],[-1364,1]],[[198301,371688],[8,1041],[302,1490]],[[263092,374962],[-79,-1906]],[[263013,373056],[-780,-638]],[[262233,372418],[68,3271],[-83,690]],[[201862,375331],[-47,-8024]],[[201815,367307],[-1165,-220],[0,568]],[[269731,373584],[-340,-1357],[-300,302]],[[269091,372529],[-215,657]],[[277141,373987],[-397,706],[-568,-2858]],[[276176,371835],[-345,-947],[-213,580]],[[275618,371468],[-210,1192]],[[276253,374852],[0,0]],[[250737,375829],[-7,-4869]],[[250730,370960],[-827,-8],[-198,-519]],[[249705,370433],[27,2110],[-434,1361],[-18,829]],[[266117,375148],[-215,-2029]],[[265902,373119],[-39,-3]],[[265863,373116],[-510,789],[-270,1471]],[[257222,373516],[17,-1185],[-615,-2106]],[[256624,370225],[-1032,2282]],[[264865,375659],[-28,-5332]],[[264837,370327],[-303,-812]],[[264534,369515],[-414,300]],[[264120,369815],[-495,4287]],[[253866,374660],[-364,-2527],[71,-1661]],[[253573,370472],[-674,471]],[[252899,370943],[2,5736]],[[262233,372418],[-14,-886]],[[262219,371532],[-865,379],[-170,1474]],[[221739,373462],[9,-4974]],[[221748,368488],[-1535,133]],[[220213,368621],[-304,7]],[[228443,368634],[-1823,-25]],[[226620,368609],[-1,4834]],[[252899,370943],[-103,7]],[[252796,370950],[-826,-12]],[[251970,370938],[5,4916]],[[285161,370749],[-468,-116]],[[284693,370633],[-446,819]],[[240417,376457],[5,-7664]],[[240422,368793],[-607,46],[-5,-1332]],[[239810,367507],[-304,42]],[[239506,367549],[-15,7177]],[[160687,368758],[-1094,45],[-338,-405]],[[159255,368398],[-342,754],[-149,3107],[-463,2405],[48,1826]],[[282836,372949],[-67,-2693]],[[282769,370256],[-815,2165],[-30,-1006],[-320,604]],[[281604,372019],[-242,1698]],[[249705,370433],[0,-111]],[[249705,370322],[-946,616]],[[248759,370938],[-796,-35]],[[247963,370903],[0,823]],[[238263,375223],[35,-4780]],[[238298,370443],[-1280,165]],[[237018,370608],[5,1083]],[[166715,374265],[-765,-4052],[-188,-2676],[-313,4],[-790,-4320]],[[164659,363221],[-270,1013],[-380,3367],[-298,3995]],[[254685,371663],[-553,-2946]],[[254132,368717],[-234,1247],[-124,-777]],[[253774,369187],[-201,1285]],[[242105,371036],[-8,-2450]],[[242097,368586],[-1210,160]],[[240887,368746],[-465,47]],[[198301,371688],[-2633,-143],[-352,-2741]],[[268041,373119],[135,-3677],[-93,-602]],[[268083,368840],[-64,308]],[[268019,369148],[-398,2375],[-439,725]],[[267182,372248],[-37,800]],[[273842,367755],[-4,20]],[[273838,367775],[-653,2964]],[[274386,373405],[-544,-5650]],[[251970,370938],[-927,-50]],[[251043,370888],[-313,72]],[[267182,372248],[-389,563],[-373,-1145]],[[266420,371666],[-518,1453]],[[265863,373116],[-284,-991],[-227,-2237]],[[265352,369888],[-515,439]],[[286401,371346],[-510,730],[-228,2730]],[[286401,372837],[0,-1491]],[[203687,373713],[-2,-6471]],[[203685,367242],[-1780,53]],[[201905,367295],[-90,12]],[[158120,372966],[-303,-2]],[[157817,372964],[-33,1343],[287,552],[49,-1893]],[[239506,367549],[-1222,189]],[[238284,367738],[14,2705]],[[264120,369815],[-276,-991]],[[263844,368824],[-589,2769]],[[263255,371593],[-242,1463]],[[224789,373421],[0,-4871]],[[224789,368550],[-1527,-11]],[[223262,368539],[-2,4888]],[[279384,369873],[-416,-2088]],[[278968,367785],[-186,-655]],[[278782,367130],[-282,1313]],[[278500,368443],[-442,1075],[-256,1750]],[[211942,371760],[-29,-11974]],[[211913,359786],[-2568,-75]],[[209345,359711],[-3196,-18]],[[206149,359693],[3,5545]],[[277630,369702],[-234,-1502],[-213,614],[-430,-1508],[-95,-1769]],[[276658,365537],[-630,2109]],[[276028,367646],[291,2274],[-143,1915]],[[245159,372763],[-5,-2033]],[[245154,370730],[-438,88],[-5,-1633],[288,-71],[-3,-1602]],[[244996,367512],[-1211,139]],[[243785,367651],[-302,26],[0,3251],[-151,2]],[[272829,369286],[-248,-1600]],[[272581,367686],[-815,1322],[-628,339],[-75,655]],[[281137,372636],[-25,-1023],[-602,-5508]],[[280510,366105],[-361,1085]],[[280149,367190],[-643,2878]],[[167514,370686],[-806,-4323],[-52,-2727],[-160,-1066],[-478,-109],[49,-889],[-436,-1628],[-318,-2892],[-1553,-1283],[-242,1461],[-239,3370]],[[163279,360600],[183,976],[522,1046],[675,599]],[[285850,370354],[-295,656]],[[285474,374122],[422,-2949],[651,-1010],[-346,-836],[-351,1027]],[[269091,372529],[-167,-3366],[109,-686],[-352,-3384]],[[268681,365093],[-160,2648],[-438,1099]],[[205228,370540],[-718,-4116]],[[204510,366424],[-823,2],[-2,816]],[[281604,372019],[-166,-3773]],[[281438,368246],[-287,-1612]],[[281151,366634],[-415,-1159],[-226,630]],[[270750,369798],[-954,-4451]],[[269796,365347],[-678,-1793]],[[269118,363554],[-32,-122]],[[269086,363432],[-466,1404]],[[268620,364836],[61,257]],[[246882,371764],[-41,-6070]],[[246841,365694],[-3,-838],[-515,-29]],[[246323,364827],[-104,1910],[11,4270],[-1076,-277]],[[216257,373489],[3,-6477]],[[216260,367012],[-85,2]],[[216175,367014],[-1352,13]],[[214823,367027],[0,4749]],[[257865,370292],[-200,-146],[146,-3006]],[[257811,367140],[-547,-1924],[-253,-1483]],[[257011,363733],[-559,3793]],[[256452,367526],[172,2699]],[[217476,373489],[0,-6490]],[[217476,366999],[-1216,13]],[[218693,368621],[0,-1623]],[[218693,366998],[-1157,2]],[[217536,367000],[-60,-1]],[[223262,368539],[4,-1604]],[[223266,366935],[-1482,-59]],[[221784,366876],[-36,1612]],[[226620,368609],[1,-1636]],[[226621,366973],[-1512,-42]],[[225109,366931],[-321,1],[1,1618]],[[232978,373423],[0,-6493]],[[232978,366930],[-1215,50]],[[231763,366980],[2,4041]],[[234197,372339],[-1,-5412]],[[234196,366927],[-1206,3]],[[232990,366930],[-12,0]],[[260851,370098],[153,-1651]],[[261004,368447],[-327,81]],[[260677,368528],[-206,-891]],[[260471,367637],[-656,341]],[[262219,371532],[-27,-1601]],[[262192,369931],[-95,-2448]],[[262097,367483],[-273,950],[-278,-893],[-215,1026],[-327,-119]],[[275618,371468],[-300,-1181],[80,-1043],[-490,-1589]],[[274908,367655],[-100,1093],[-720,-2035],[-246,1042]],[[266420,371666],[-159,-2460]],[[266261,369206],[-144,586],[-553,-948],[-155,569]],[[265409,369413],[-57,475]],[[263255,371593],[-527,-1618]],[[262728,369975],[-536,-44]],[[283955,369764],[143,-836]],[[284098,368928],[-199,-2026]],[[283899,366902],[-182,63]],[[283717,366965],[-298,1139]],[[283419,368104],[99,1639],[-146,1184],[-444,-782]],[[282928,370145],[-159,111]],[[158120,372966],[96,-2154],[271,-373],[409,-1982]],[[158896,368457],[-209,-644],[106,-2701]],[[158793,365112],[-4,-1305],[-464,-534],[77,-1486]],[[158402,361787],[-314,1660],[11,3041],[-319,2975],[37,3501]],[[268019,369148],[-408,283],[-84,-2105]],[[267527,367326],[-252,703],[-463,-1951],[-186,747],[-277,-815]],[[266349,366010],[-88,3196]],[[282769,370256],[-560,-2686]],[[282209,367570],[-433,1403],[-338,-727]],[[256452,367526],[-546,-453]],[[255906,367073],[-158,651],[-62,2672]],[[255686,370396],[-335,1440]],[[235507,371949],[0,-5388]],[[235507,366561],[0,-480]],[[235507,366081],[-1274,28]],[[234233,366109],[-37,818]],[[276028,367646],[-525,-1522]],[[275503,366124],[-183,485],[-294,-965]],[[275026,365644],[-118,2011]],[[206149,359693],[-183,-2]],[[205966,359691],[-1386,13]],[[204580,359704],[-148,938],[143,4467],[-65,1315]],[[237018,370608],[-19,-4324]],[[236999,366284],[-1492,277]],[[255686,370396],[-1221,-4086]],[[254465,366310],[33,525]],[[254498,366835],[-359,564],[-7,1318]],[[247963,370903],[3,-5312],[-200,54]],[[247766,365645],[-925,49]],[[214823,367027],[-1,-7366]],[[214822,359661],[-2675,122]],[[212147,359783],[-234,3]],[[198301,371688],[-141,-896],[-30,-2362],[-478,-2240],[-241,-2267],[2,-1425],[-247,-2726]],[[197166,359772],[-1855,-8]],[[199666,367650],[1,-7869]],[[199667,359781],[-2501,-9]],[[163279,360600],[-1048,-5633]],[[162231,354967],[-622,1773],[-205,2320]],[[161404,359060],[-32,3270]],[[263844,368824],[-156,-2928]],[[263688,365896],[-150,509],[-457,-2190]],[[263081,364215],[-5,2272],[-355,1235],[7,2253]],[[284693,370633],[402,-619],[175,-1717]],[[285270,368297],[-384,-511],[-28,-974]],[[284858,366812],[-760,2116]],[[259385,368154],[-66,-2032],[-241,-91]],[[259078,366031],[-868,-274]],[[258210,365757],[-399,1383]],[[278500,368443],[-229,-637],[32,-1405]],[[278303,366401],[-518,-5580]],[[277785,360821],[-108,-926],[-313,672]],[[277364,360567],[-363,2794],[-342,618]],[[276659,363979],[-1,1558]],[[277509,366213],[0,0]],[[184568,369085],[5,-9297]],[[184573,359788],[-3208,1]],[[231763,366980],[-8,-1628]],[[231755,365352],[-1561,65]],[[230194,365417],[-3,3233]],[[246323,364827],[-123,-4109]],[[246200,360718],[-515,61],[-148,783]],[[245537,361562],[-46,1372],[-349,1595],[-44,2975],[-102,8]],[[249705,370322],[275,-3107],[-171,-1185]],[[249809,366030],[-12,-1568]],[[249797,364462],[-367,-344],[-403,-1990]],[[249027,362128],[-283,3]],[[248744,362131],[15,8807]],[[243785,367651],[-25,-6959]],[[243760,360692],[-1207,136]],[[242553,360828],[-453,64]],[[242100,360892],[-3,7694]],[[253774,369187],[-63,-597],[-543,-371],[-221,-906]],[[252947,367313],[-159,351]],[[252788,367664],[8,3286]],[[252788,367664],[-169,-666],[-98,-2357],[240,-2056],[-183,-1538]],[[252578,361047],[0,1701],[-613,3309]],[[251965,366057],[5,4881]],[[283419,368104],[-491,2041]],[[251965,366057],[-546,-28],[-63,-614]],[[251356,365415],[-322,507]],[[251034,365922],[9,4966]],[[251034,365922],[-568,98]],[[250466,366020],[-657,10]],[[285850,370354],[308,-1052]],[[286158,369302],[-18,-1124]],[[286140,368178],[152,-3489],[-321,-310],[-554,3769]],[[248744,362131],[-259,19],[1,-1356],[-424,-246]],[[248062,360548],[-312,844],[16,4253]],[[273838,367775],[29,-1536],[-368,-994]],[[273499,365245],[-679,-1091]],[[272820,364154],[-382,1914]],[[272438,366068],[143,1618]],[[168203,368402],[-33,-2228],[201,-311],[167,-3441],[606,-1527],[213,-3239],[-23,-2583]],[[169334,355073],[-1716,-81],[-1,-1561],[-890,26],[-3,-1596],[-459,20],[-299,-1621]],[[165966,350260],[-246,-1295],[-814,-376],[-3,-4045],[-991,-5108]],[[163912,339436],[-929,3751],[57,1792],[-141,1162]],[[162899,346141],[229,1144],[-1,2966],[-896,4716]],[[238284,367738],[-14,-2706]],[[238270,365032],[-1188,149]],[[237082,365181],[-83,1103]],[[265409,369413],[279,-3141]],[[265688,366272],[-442,-1825]],[[265246,364447],[-535,1286]],[[264711,365733],[-177,3782]],[[255906,367073],[-251,-1811],[146,-2557]],[[255801,362705],[-529,-954],[-438,810]],[[254834,362561],[-346,1710],[-23,2039]],[[283717,366965],[-7,-1437]],[[283710,365528],[-51,70]],[[283659,365598],[-117,-1256]],[[283542,364342],[-75,-142]],[[283467,364200],[-36,-78]],[[283431,364122],[-87,-195]],[[283344,363927],[-565,790]],[[282779,364717],[-265,34],[-366,1828],[61,991]],[[280149,367190],[-243,-2778]],[[279906,364412],[-397,-808]],[[279509,363604],[-259,695],[-282,3486]],[[287953,369117],[-346,-3597],[-150,-3563],[-151,2650],[266,5441],[255,73]],[[263081,364215],[-502,-2274]],[[262579,361941],[-398,1305]],[[262181,363246],[-37,1321],[-302,1000]],[[261842,365567],[255,1916]],[[272438,366068],[-555,-2440],[-498,579]],[[271385,364207],[-316,930],[-383,3657],[178,532]],[[254498,366835],[-802,-2923],[-19,-787]],[[253677,363125],[-271,-607]],[[253406,362518],[-71,2345],[-388,2450]],[[188715,359809],[-3142,-15]],[[185573,359794],[-1000,-6]],[[266349,366010],[57,-1413]],[[266406,364597],[-349,1839],[-369,-164]],[[264711,365733],[-224,-683],[-203,-2440]],[[264284,362610],[-596,3286]],[[271385,364207],[-448,-1772]],[[270937,362435],[-326,-1378],[-364,-500]],[[270247,360557],[-283,4288],[-168,502]],[[286158,369302],[207,216],[310,-1576],[-73,-2371],[-462,2607]],[[268620,364836],[-243,-50],[-502,-1356]],[[267875,363430],[-354,1381],[6,2515]],[[282779,364717],[-405,-1350]],[[282374,363367],[-1213,1929]],[[281161,365296],[-10,1338]],[[284858,366812],[77,-164]],[[284935,366648],[-7,-2000],[-380,948],[-673,136],[24,1170]],[[240887,368746],[2,-7717]],[[240889,361029],[-605,67]],[[240284,361096],[-452,336]],[[239832,361432],[-22,6075]],[[161404,359060],[-763,407],[-257,-1537]],[[160384,357930],[-486,2766],[-658,1780],[-447,2636]],[[158896,368457],[359,-59]],[[261842,365567],[-522,-2203]],[[261320,363364],[-643,5164]],[[242100,360892],[-1211,137]],[[275026,365644],[-484,-1303]],[[274542,364341],[-690,-1814]],[[273852,362527],[-445,2381],[92,337]],[[230194,365417],[-2,-5660]],[[230192,359757],[-625,5]],[[229567,359762],[-1109,1]],[[228458,359763],[-15,8871]],[[228458,359763],[-876,-6]],[[227582,359757],[-948,0]],[[226634,359757],[-13,7216]],[[220213,368621],[49,-8798]],[[220262,359823],[-1515,-40]],[[218747,359783],[-1,7214],[-53,1]],[[221784,366876],[6,-7102]],[[221790,359774],[-1286,39]],[[220504,359813],[-242,10]],[[225109,366931],[7,-7184]],[[225116,359747],[-550,11]],[[224566,359758],[-1269,13]],[[223297,359771],[-31,7164]],[[261320,363364],[-485,-1545]],[[260835,361819],[-445,1353]],[[260390,363172],[-31,2226],[112,2239]],[[278782,367130],[-479,-729]],[[176230,341181],[676,-3534]],[[176906,337647],[-237,-294],[-2130,-6],[-3164,16]],[[171375,337363],[-1036,-167]],[[170339,337196],[74,1515],[-404,8051],[81,567],[-422,2802],[-73,2163],[-261,2779]],[[285316,364880],[167,-151]],[[285483,364729],[247,-950]],[[285730,363779],[-49,-868]],[[285681,362911],[-94,912],[-633,479],[-19,2346]],[[285270,368297],[233,-1659]],[[285503,366638],[-153,-1180]],[[285350,365458],[-34,-578]],[[260390,363172],[-160,-225]],[[260230,362947],[-453,-403],[-418,352]],[[259359,362896],[21,897],[-302,2238]],[[267875,363430],[-170,-1501],[19,-1797],[-189,-330]],[[267535,359802],[-167,367]],[[267368,360169],[-60,2883],[-338,936],[-80,1342],[-349,-222],[-82,-931]],[[266459,364177],[-53,420]],[[279509,363604],[-224,-3408]],[[279285,360196],[-519,776]],[[278766,360972],[-292,-176],[-159,1424],[-530,-1399]],[[239832,361432],[-1514,176]],[[238318,361608],[-48,3424]],[[253406,362518],[-128,-3094]],[[253278,359424],[-344,1548],[-334,-767]],[[252600,360205],[-233,1071]],[[252367,361276],[211,-229]],[[245537,361562],[-556,-176],[-16,-3767]],[[244965,357619],[-1212,98]],[[243753,357717],[7,2975]],[[201905,367295],[0,-3259],[563,-4371]],[[202468,359665],[-2632,116]],[[199836,359781],[-169,0]],[[276659,363979],[-321,-1646],[-128,662],[-334,-926]],[[275876,362069],[-139,-176]],[[275737,361893],[-37,2240],[-197,1991]],[[276171,365518],[-31,-844]],[[276140,364674],[211,-935],[217,1689],[-397,90]],[[257011,363733],[-117,-2666]],[[256894,361067],[-312,-151]],[[256582,360916],[-548,-371],[-28,566]],[[256006,361111],[-205,1594]],[[281161,365296],[-22,-3279]],[[281139,362017],[-569,-758]],[[280570,361259],[-694,2327],[30,826]],[[204580,359704],[-804,-10]],[[203776,359694],[-1308,-29]],[[258405,362945],[-625,205],[-142,-3375]],[[257638,359775],[-744,1292]],[[258210,365757],[195,-2812]],[[216175,367014],[3,-7320]],[[216178,359694],[-1317,-41]],[[214861,359653],[-39,8]],[[217536,367000],[3,-7258]],[[217539,359742],[-1361,-48]],[[218747,359783],[-870,-31]],[[217877,359752],[-338,-10]],[[232990,366930],[-4,-7162]],[[232986,359768],[-736,0]],[[232250,359768],[-495,-4]],[[231755,359764],[0,5588]],[[226634,359757],[-862,-11]],[[225772,359746],[-656,1]],[[223297,359771],[-1270,0]],[[222027,359771],[-237,3]],[[234233,366109],[4,-6336]],[[234237,359773],[-931,-5]],[[233306,359768],[-320,0]],[[254834,362561],[-147,-2742]],[[254687,359819],[-400,-773]],[[254287,359046],[-460,3989],[-150,90]],[[285503,366638],[154,-1165],[635,-2093],[-66,-1011]],[[286226,362369],[53,-610]],[[286279,361759],[-115,-211]],[[286164,361548],[-434,2231]],[[285483,364729],[-133,729]],[[237082,365181],[-19,-4504]],[[237063,360677],[-1556,162]],[[235507,360839],[0,5242]],[[275737,361893],[-473,-1710],[-546,-688]],[[274718,359495],[-101,1954]],[[274617,361449],[153,1098]],[[274770,362547],[-228,1794]],[[266459,364177],[-121,-2912],[119,-2629]],[[266457,358636],[-224,321]],[[266233,358957],[-784,1845]],[[265449,360802],[-274,2103],[71,1542]],[[264091,359038],[-613,-1731]],[[263478,357307],[-281,2109],[-435,319]],[[262762,359735],[-183,2206]],[[264284,362610],[-193,-3572]],[[235507,360839],[-1,-1078]],[[235506,359761],[-1085,11]],[[234421,359772],[-184,1]],[[259359,362896],[-159,-1977]],[[259200,360919],[-468,373],[-327,1653]],[[276140,364674],[31,844]],[[252367,361276],[-1008,2722]],[[251359,363998],[-3,1417]],[[272820,364154],[-287,-1785],[161,-863],[-535,-1063],[70,-474]],[[272229,359969],[-685,-1435],[-271,477]],[[271273,359011],[-336,3424]],[[250466,366020],[-48,-4181],[274,-849]],[[250692,360990],[92,-1565]],[[250784,359425],[-347,1557],[-155,-1006]],[[250282,359976],[-177,540],[-308,3946]],[[265449,360802],[-249,-1447],[-375,-411]],[[264825,358944],[-564,-169]],[[264261,358775],[-170,263]],[[251359,363998],[-14,-28]],[[251345,363970],[-427,-1200],[-226,-1780]],[[267368,360169],[-217,-969],[-641,-1367]],[[266510,357833],[-53,803]],[[283884,365227],[-225,371]],[[283710,365528],[174,-301]],[[248062,360548],[-410,-2218]],[[247652,358330],[-1170,83]],[[246482,358413],[-282,2305]],[[283884,365227],[441,266],[239,-1372]],[[284564,364121],[-405,-2254]],[[284159,361867],[-678,-2216]],[[283481,359651],[-2,3311]],[[283479,362962],[63,1380]],[[285316,364880],[0,0]],[[262181,363246],[-452,-3530],[-71,-1327]],[[261658,358389],[-614,241]],[[261044,358630],[-209,3189]],[[270247,360557],[-500,-1318]],[[269747,359239],[-387,951],[-242,3364]],[[231755,359764],[-101,-4]],[[231654,359760],[-1462,-3]],[[273852,362527],[-162,-1380]],[[273690,361147],[-561,-945],[-310,462],[-429,-1769]],[[272390,358895],[-161,1074]],[[283467,364200],[-36,-78]],[[282112,359573],[-317,632]],[[281795,360205],[-220,-114],[-436,1926]],[[282374,363367],[-290,-906],[28,-2888]],[[238318,361608],[-4,-1905]],[[238314,359703],[-2,-1358]],[[238312,358345],[-1259,166]],[[237053,358511],[10,2166]],[[160384,357930],[-174,-102]],[[160210,357828],[-281,264],[-163,-998]],[[159766,357094],[-380,2272],[-464,-405],[-520,2826]],[[283344,363927],[135,-965]],[[283481,359651],[-614,-2144]],[[282867,357507],[-109,310]],[[282758,357817],[-299,1492],[-347,264]],[[269086,363432],[-450,-1508],[10,-1311],[-407,-1312]],[[268239,359301],[-193,765],[-584,-1128],[73,864]],[[250282,359976],[-572,-2622]],[[249710,357354],[-478,-188]],[[249232,357166],[10,1268],[-274,2899],[59,795]],[[280570,361259],[-138,-3503]],[[280432,357756],[-433,-3599]],[[279999,354157],[-48,2703],[-666,3336]],[[274770,362547],[-153,-1098]],[[274718,359495],[-251,-984]],[[274467,358511],[-297,-982]],[[274170,357529],[-480,3618]],[[285497,362381],[-63,-1487],[-424,-1183]],[[285010,359711],[-289,-964]],[[284721,358747],[-34,2055],[-528,1065]],[[284564,364121],[581,-507],[352,-1233]],[[277364,360567],[-130,-3464]],[[277234,357103],[-337,-1260],[-663,787],[-116,-677]],[[276118,355953],[-70,869],[-471,579]],[[275577,357401],[360,2851],[-61,1817]],[[251671,358926],[-486,-648],[-308,443]],[[250877,358721],[-93,704]],[[251345,363970],[326,-5044]],[[252600,360205],[-4,-1497]],[[252596,358708],[-916,78]],[[251680,358786],[-9,140]],[[286164,361548],[133,-1959]],[[286297,359589],[-664,2557],[48,765]],[[269747,359239],[82,-1209],[-301,-551]],[[269528,357479],[-635,40],[-381,-1463]],[[268512,356056],[-298,1723]],[[268214,357779],[25,1522]],[[268976,359021],[0,0]],[[259200,360919],[-148,-2366]],[[259052,358553],[-666,-2939]],[[258386,355614],[14,578],[-508,429],[-79,979]],[[257813,357600],[-175,2175]],[[262762,359735],[-638,-2584]],[[262124,357151],[-421,-77]],[[261703,357074],[-45,1315]],[[261044,358630],[-402,-2235]],[[260642,356395],[-399,433]],[[260243,356828],[-13,6119]],[[254287,359046],[-781,-1739]],[[253506,357307],[-228,2117]],[[286374,362810],[-59,-945]],[[286315,361865],[-36,-106]],[[286226,362369],[148,441]],[[260243,356828],[-662,-2213]],[[259581,354615],[-529,3938]],[[256006,361111],[-211,-8003]],[[255795,353108],[-851,-65]],[[254944,353043],[-147,-18]],[[254797,353025],[95,6137],[-205,657]],[[285916,358061],[-1039,-4907]],[[284877,353154],[-34,77]],[[284843,353231],[-42,1109]],[[284801,354340],[305,3818],[-96,1553]],[[285497,362381],[59,-1872],[467,-1558],[-107,-890]],[[271273,359011],[-157,-551]],[[271116,358460],[-308,-1198],[-364,-180],[-73,-1054],[-635,-1658]],[[269736,354370],[-208,3109]],[[278766,360972],[-356,-9724]],[[278410,351248],[-345,-5]],[[278065,351243],[106,760],[-263,1161],[-285,-492],[86,-1439]],[[277709,351233],[-112,-1]],[[277597,351232],[-569,22]],[[277028,351254],[206,5849]],[[275577,357401],[-419,-1374],[-218,-1669]],[[274940,354358],[-473,4153]],[[249232,357166],[-26,-4320],[-719,34]],[[248487,352880],[-528,25]],[[247959,352905],[-9,1582],[-298,3843]],[[281795,360205],[-66,-4559]],[[281729,355646],[-596,560],[-701,1550]],[[286315,361865],[307,-510],[-325,-1766]],[[284721,358747],[-1328,-4408]],[[283393,354339],[-167,252],[88,2639],[-447,277]],[[246482,358413],[44,-2142]],[[246526,356271],[-1263,227]],[[245263,356498],[-303,38],[5,1083]],[[240284,361096],[-17,-4867]],[[240267,356229],[-1101,143]],[[239166,356372],[-105,8],[12,3261],[-759,62]],[[274170,357529],[-841,-1352]],[[273329,356177],[-156,-696],[-455,-110]],[[272718,355371],[-328,3524]],[[257813,357600],[-221,-728],[-202,-3628]],[[257390,353244],[-829,-106]],[[256561,353138],[21,7778]],[[256561,353138],[-151,-14]],[[256410,353124],[-615,-16]],[[242553,360828],[-66,-4878]],[[242487,355950],[-1818,221]],[[240669,356171],[-402,58]],[[253506,357307],[130,-2237]],[[253636,355070],[-1045,64]],[[252591,355134],[5,3574]],[[250877,358721],[-61,-2945]],[[250816,355776],[-215,-1257],[64,-1203]],[[250665,353316],[-203,-1647],[-216,1259]],[[250246,352928],[-536,4426]],[[279999,354157],[-151,-412],[-88,-2491]],[[279760,351254],[-173,-5]],[[279587,351249],[-953,1]],[[278634,351250],[-224,-2]],[[243753,357717],[-40,-7254]],[[243713,350463],[-1248,-11]],[[242465,350452],[22,5498]],[[237053,358511],[-17,-3425]],[[237036,355086],[-1531,349]],[[235505,355435],[1,4326]],[[266233,358957],[17,-975],[-599,-2206],[-221,-1817]],[[265430,353959],[-521,3091],[-84,1894]],[[282758,357817],[6,-3369],[-310,-3129]],[[282454,351319],[-369,-15]],[[282085,351304],[-408,-9]],[[281677,351295],[52,4351]],[[268214,357779],[-540,-707],[-177,-2081],[-906,-1449]],[[266591,353542],[-141,2662],[60,1629]],[[272718,355371],[-733,-1028],[-226,-1288]],[[271759,353055],[-261,2814],[-382,2591]],[[192649,359743],[0,-24859],[484,-3],[-47,-2692],[-3,-12919],[-57,-4901],[47,-1624],[-30,-12942],[-91,-9],[0,-3908]],[[192952,295886],[-303,170]],[[192649,296056],[0,7876],[-2090,0],[0,4901]],[[190559,308833],[0,51008]],[[190559,308833],[-267,68],[-549,2097],[-586,1352],[-625,-722],[-214,1094]],[[188318,312722],[8,6149],[-629,15],[-1,3314],[-1550,-155],[-3,3263],[-297,21],[4,2068],[-380,-318],[-149,1053],[-899,1045],[-616,2799],[-445,402]],[[183361,332378],[1,5119],[67,1656],[-123,2775],[363,944],[70,1118],[518,1618],[615,865],[469,2332],[-89,1927],[91,1456],[24,3833],[237,2875],[-31,898]],[[254797,353025],[-1049,764]],[[253748,353789],[-112,1281]],[[233306,359768],[-67,-1052],[1,-6427]],[[233240,352289],[-1054,-2]],[[232186,352287],[-1,6412],[65,1069]],[[231654,359760],[-1,-10708]],[[231653,349052],[-2,-4884],[-743,12]],[[230908,344180],[41,1148],[-278,232],[-357,1844],[-191,-673],[-230,2345],[-236,377],[-144,2237],[-300,-1766],[-371,678]],[[228842,350602],[273,1700],[-394,-68]],[[228721,352234],[-27,1706],[357,-36],[129,1256],[379,564],[8,4038]],[[224566,359758],[31,-9970]],[[224597,349788],[-210,-1342],[-482,1078],[-172,1065],[-325,12]],[[223408,350601],[-47,1717],[-453,3424],[-433,680]],[[222475,356422],[-448,3349]],[[234421,359772],[22,-6122]],[[234443,353650],[-17,-2995]],[[234426,350655],[-898,9]],[[233528,350664],[-1,1625],[-287,0]],[[232186,352287],[-8,-3237]],[[232178,349050],[-525,2]],[[227582,359757],[-1,-7541]],[[227581,352216],[-1788,-1]],[[225793,352215],[-21,7531]],[[225793,352215],[0,-2429]],[[225793,349786],[-1196,2]],[[228721,352234],[-1137,-18]],[[227584,352216],[-3,0]],[[235505,355435],[1,-1837]],[[235506,353598],[-1063,52]],[[222475,356422],[0,-4178],[-865,-44]],[[221610,352200],[-1107,8]],[[220503,352208],[1,7605]],[[203776,359694],[98,-2074],[-26,-3169],[117,-4650],[-91,-2221],[-239,-893],[559,-1234],[337,-2424],[573,-1622]],[[205104,341407],[-115,-752],[-407,114]],[[204582,340769],[2,439],[-988,-6],[48,-1326],[-533,2]],[[203111,339878],[-7,660]],[[203104,340538],[2,655],[-1777,-48],[0,4051],[-2059,60]],[[199270,345256],[16,10890],[481,2044],[69,1591]],[[199270,345256],[-7,-4086]],[[199263,341170],[-3954,38]],[[195309,341208],[2,18556]],[[195309,341208],[0,-19410]],[[195309,321798],[-1,-7083]],[[195308,314715],[-2,-14913]],[[195306,299802],[-838,-13],[-15,-899],[-397,-1422]],[[194056,297468],[-882,-3135],[-222,1553]],[[212147,359783],[-1,-9303]],[[212146,350480],[-110,1],[3,-8288]],[[212039,342193],[-1,-5881]],[[212038,336312],[-930,12]],[[211108,336324],[28,6448],[-1196,-11],[1,1643],[-599,9],[0,810]],[[209342,345223],[3,14488]],[[214861,359653],[-12,-9170]],[[214849,350483],[-362,-4]],[[214487,350479],[-2341,1]],[[217877,359752],[-24,-9286]],[[217853,350466],[-365,-7]],[[217488,350459],[-1501,5]],[[215987,350464],[-1138,19]],[[220503,352208],[-3,-1741]],[[220500,350467],[-1510,-6]],[[218990,350461],[-1137,5]],[[284801,354340],[42,-1109]],[[284877,353154],[-51,-1711]],[[284826,351443],[-1,-152]],[[284825,351291],[-691,43]],[[284134,351334],[-370,-26]],[[283764,351308],[-248,1790],[-323,549],[200,692]],[[263478,357307],[2,-789],[-559,-4123]],[[262921,352395],[-20,2]],[[262901,352397],[-528,227]],[[262373,352624],[-249,4527]],[[205966,359691],[58,-1481],[-86,-3571],[-387,-996],[-22,-2199],[163,-1117],[-61,-4280]],[[205631,346047],[-183,-448],[-37,-1983],[-307,-2209]],[[209342,345223],[-1191,14]],[[208151,345237],[-1195,-14],[1,803],[-1326,21]],[[239166,356372],[-30,-5934]],[[239136,350438],[-750,14]],[[238386,350452],[29,5979],[-103,1914]],[[162899,346141],[-231,-1190],[-456,1973],[-261,-927],[-61,1184],[-572,3412],[-183,-61],[-19,1981],[-417,1414],[44,778],[-533,3123]],[[265430,353959],[-148,-1854]],[[265282,352105],[-222,46]],[[265060,352151],[-603,36]],[[264457,352187],[-224,1543],[-135,2569],[163,2476]],[[286694,356681],[-124,-213]],[[286570,356468],[-12,177]],[[286558,356645],[136,36]],[[286870,358327],[-79,-1657]],[[286791,356670],[-328,768],[3,1657],[404,-768]],[[264457,352187],[-96,-2]],[[264361,352185],[-1440,210]],[[266591,353542],[-596,-1193]],[[265995,352349],[-713,-244]],[[251680,358786],[-1,-3231]],[[251679,355555],[-863,221]],[[252591,355134],[-9,-4639]],[[252582,350495],[-78,9]],[[252504,350504],[-835,20]],[[251669,350524],[10,5031]],[[261703,357074],[-225,-4257]],[[261478,352817],[-392,-140]],[[261086,352677],[-444,3718]],[[259581,354615],[12,-1748]],[[259593,352867],[-646,209]],[[258947,353076],[-577,206]],[[258370,353282],[16,2332]],[[238386,350452],[-787,-3]],[[237599,350449],[-586,0]],[[237013,350449],[23,4637]],[[287471,351575],[127,-159]],[[287598,351416],[-118,-4]],[[287480,351412],[-9,163]],[[287748,351418],[-69,0]],[[287679,351418],[-139,3115],[-110,-3119]],[[287430,351414],[-90,0]],[[287340,351414],[-61,2]],[[287279,351416],[-242,-2]],[[287037,351414],[1,2144],[150,496],[-378,1440],[-61,1239]],[[286749,356733],[42,-63]],[[286870,358327],[530,-179],[348,-6730]],[[274940,354358],[-364,-882],[-48,-1926]],[[274528,351550],[-629,24]],[[273899,351574],[-213,1696]],[[273686,353270],[-50,397]],[[273636,353667],[-307,2510]],[[270321,353193],[0,0]],[[270321,353193],[-338,-940]],[[269983,352253],[-141,1]],[[269842,352254],[-106,2116]],[[271759,353055],[-114,-499]],[[271645,352556],[-501,43]],[[271144,352599],[-890,-363]],[[270254,352236],[67,957]],[[247959,352905],[-202,-2472]],[[247757,350433],[-990,13]],[[246767,350446],[-44,3366],[-197,2459]],[[286570,356468],[-316,-133]],[[286254,356335],[304,310]],[[286305,356801],[-99,492]],[[286206,357293],[36,564]],[[286242,357857],[63,-1056]],[[286206,357293],[-103,-959],[-95,-4918]],[[286008,351416],[-140,0]],[[285868,351416],[-1042,27]],[[285916,358061],[-22,-1249],[348,1045]],[[163912,339436],[276,-2209]],[[164188,337227],[-3150,124]],[[161038,337351],[-326,1746],[-77,1735],[-231,787],[-396,3161],[-503,2053],[-222,5106],[442,1738],[41,3417]],[[283764,351308],[-1310,11]],[[283158,354580],[0,0]],[[268512,356056],[-491,-2310],[-105,-1528]],[[267916,352218],[-1356,66]],[[266560,352284],[-565,65]],[[281677,351295],[-774,-7]],[[280903,351288],[-371,-27]],[[280532,351261],[-772,-7]],[[262373,352624],[-838,204]],[[261535,352828],[-57,-11]],[[245263,356498],[-29,-6068]],[[245234,350430],[-782,-12]],[[244452,350418],[-119,11]],[[244333,350429],[-620,34]],[[269842,352254],[-878,-30]],[[268964,352224],[-617,-6]],[[268347,352218],[-431,0]],[[258370,353282],[-422,-315]],[[257948,352967],[-558,277]],[[276118,355953],[-148,-276],[114,-4413]],[[276084,351264],[-1077,151]],[[275007,351415],[-479,135]],[[250246,352928],[-253,-2473]],[[249993,350455],[-185,-21]],[[249808,350434],[-152,5]],[[249656,350439],[-17,-3004]],[[249639,347435],[-129,1228],[-367,441],[-80,-746],[-583,45]],[[248480,348403],[7,4477]],[[286305,356801],[-51,-466]],[[286694,356681],[55,52]],[[287037,351414],[-532,-2]],[[286505,351412],[-497,4]],[[277028,351254],[-871,10]],[[276157,351264],[-73,0]],[[276536,353676],[0,0]],[[181366,356861],[18,-12097],[-305,-3168],[-223,-193],[-381,2417],[-725,-8],[-350,-1052],[144,-4363],[76,-6300],[227,-3470],[73,-3058],[-216,-1125],[36,-1876]],[[179740,322568],[-2834,15079]],[[261086,352677],[-980,64]],[[260106,352741],[-513,126]],[[246767,350446],[-580,-1]],[[246187,350445],[-953,-15]],[[240669,356171],[-21,-5742]],[[240648,350429],[-227,4]],[[240421,350433],[-1233,7]],[[239188,350440],[-52,-2]],[[223408,350601],[13,-6429]],[[223421,344172],[-1188,51]],[[222233,344223],[-596,-4],[-27,7981]],[[273636,353667],[50,-397]],[[273899,351574],[-178,50]],[[273721,351624],[-1258,239]],[[272463,351863],[-903,251]],[[271560,352114],[85,442]],[[242465,350452],[-84,-5]],[[242381,350447],[-1055,0]],[[241326,350447],[-678,-18]],[[251669,350524],[-28,4]],[[251641,350528],[-22,-4]],[[251619,350524],[-191,1382],[-763,1410]],[[237013,350449],[-1507,13]],[[235506,350462],[0,3136]],[[253748,353789],[47,-3359]],[[253795,350430],[-1213,65]],[[170339,337196],[-4266,59]],[[166073,337255],[29,8918],[143,-17],[5,2474],[-284,1630]],[[254944,353043],[136,-5034]],[[255080,348009],[-639,-725],[-444,466]],[[253997,347750],[-26,131]],[[253971,347881],[-176,2549]],[[235506,350462],[154,-6283]],[[235660,344179],[-653,-10]],[[235007,344169],[-597,8]],[[234410,344177],[16,6478]],[[257414,348713],[-201,-1048],[-241,622]],[[256972,348287],[-208,-250],[-369,1607]],[[256395,349644],[15,3480]],[[257948,352967],[-373,-4226],[-161,-28]],[[258947,353076],[-67,-2837]],[[258880,350239],[-152,-2605]],[[258728,347634],[-470,-221],[-397,-1686]],[[257861,345727],[-447,2986]],[[249808,350434],[-152,5]],[[251619,350524],[-1425,9]],[[250194,350533],[-201,-78]],[[256395,349644],[-463,-2486]],[[255932,347158],[-632,238]],[[255300,347396],[-220,613]],[[278065,351243],[-356,-10]],[[260035,350463],[-39,-1632]],[[259996,348831],[-420,265]],[[259576,349096],[-528,340],[-168,803]],[[260106,352741],[-71,-2278]],[[270254,352236],[-271,17]],[[248480,348403],[6,-7255]],[[248486,341148],[-919,-50]],[[247567,341098],[-247,-14]],[[247320,341084],[522,3829]],[[247842,344913],[352,1893],[-43,1810],[-210,1819],[-184,-2]],[[262901,352397],[149,-1465]],[[263050,350932],[-592,1051],[-298,-537],[-193,-2702]],[[261967,348744],[-458,2312]],[[261509,351056],[26,1772]],[[261509,351056],[-433,-574],[-153,-1811]],[[260923,348671],[-582,2219],[-306,-427]],[[270706,350628],[-572,-2009],[-308,-73]],[[269826,348546],[-389,913],[-672,-256]],[[268765,349203],[199,3021]],[[271144,352599],[-438,-1971]],[[271560,352114],[-142,-3666]],[[271418,348448],[-528,-1943]],[[270890,346505],[-41,-397]],[[270849,346108],[-351,1893],[300,1976],[-92,651]],[[264361,352185],[5,-1439],[-252,-900],[56,-3382],[-120,-1264]],[[264050,345200],[-190,-992]],[[263860,344208],[-474,1990],[-250,1871]],[[263136,348069],[117,454],[-203,2409]],[[266560,352284],[206,-1169],[31,-2258]],[[266797,348857],[-174,-720],[-607,-561]],[[266016,347576],[-183,13],[-202,1690],[-279,-296]],[[265352,348983],[-292,3168]],[[228842,350602],[-61,-3232],[298,0],[0,-1617]],[[229079,345753],[-602,-1],[-1,-1624],[-593,-2]],[[227883,344126],[-297,100]],[[227586,344226],[-2,7990]],[[268347,352218],[-502,-560],[-752,-3146]],[[267093,348512],[-296,345]],[[233528,350664],[-299,-2],[-13,-8097]],[[233216,342565],[-366,1],[-131,1627],[-399,1]],[[232320,344194],[-150,-1],[8,4857]],[[265352,348983],[-275,-2785]],[[265077,346198],[-193,-791],[-429,316],[-38,-1253],[-367,730]],[[268765,349203],[-61,-398]],[[268704,348805],[-665,-1447],[-393,-1683]],[[267646,345675],[-224,1918],[-258,-1047]],[[267164,346546],[-71,1966]],[[227586,344226],[-599,4]],[[226987,344230],[-1193,4]],[[225794,344234],[-1,5552]],[[222233,344223],[3,-2818]],[[222236,341405],[-225,-158],[-276,-2614],[-162,-422],[-441,842],[-101,2155],[-521,-2268]],[[220510,338940],[0,3261]],[[220510,342201],[-10,8266]],[[272463,351863],[277,-3899]],[[272740,347964],[-622,-2325]],[[272118,345639],[-700,2809]],[[263136,348069],[-494,-1685],[-81,-2308]],[[262561,344076],[-537,-332]],[[262024,343744],[-54,115]],[[261970,343859],[103,957],[-106,3928]],[[273721,351624],[-182,-2986]],[[273539,348638],[-167,-516],[-189,1242],[-443,-1400]],[[230908,344180],[-82,5]],[[230826,344185],[-902,-43]],[[229924,344142],[-550,-15],[0,1626],[-295,0]],[[275007,351415],[-33,-5379]],[[274974,346036],[-1,-378]],[[274973,345658],[-247,763],[-926,-860]],[[273800,345561],[12,1685],[-273,1392]],[[285868,351416],[140,-749]],[[286008,350667],[106,-2464]],[[286114,348203],[-296,-486]],[[285818,347717],[-335,-961]],[[285483,346756],[-266,1180],[-452,775]],[[284765,348711],[60,2580]],[[287518,346134],[-187,1417]],[[287331,347551],[-272,272],[-554,3589]],[[287279,351416],[112,-2597],[320,-2366],[229,-3945],[-422,3626]],[[287748,351418],[261,-5943]],[[288009,345475],[-7,-9]],[[288002,345466],[-124,1107],[-199,4845]],[[287598,351416],[-258,-2]],[[287430,351414],[50,-2]],[[276157,351264],[-22,-5309]],[[276135,345955],[-1161,81]],[[287331,347551],[294,-3319],[-296,418],[-595,3435]],[[286734,348085],[-726,2582]],[[282085,351304],[5,-704]],[[282090,350600],[-40,-2323],[-263,-3338]],[[281787,344939],[-837,1178]],[[280950,346117],[82,751],[-129,4420]],[[284010,345760],[-232,-1458]],[[283778,344302],[-264,840],[-153,2057],[-292,-389],[-26,2141],[-250,1169],[-703,480]],[[284134,351334],[123,-1350],[-247,-4224]],[[284765,348711],[428,-836],[170,-2171]],[[285363,345704],[-1353,56]],[[279587,351249],[-16,-5692]],[[279571,345557],[-415,60]],[[279156,345617],[-565,56]],[[278591,345673],[43,5577]],[[280950,346117],[-322,-1897],[-207,205]],[[280421,344425],[-40,5196],[151,1640]],[[280421,344425],[-138,-2848]],[[280283,341577],[-564,914]],[[279719,342491],[-155,441],[7,2625]],[[277597,351232],[-60,-5440]],[[277537,345792],[-1,-133]],[[277536,345659],[-1401,296]],[[278591,345673],[-288,31]],[[278303,345704],[-766,88]],[[261970,343859],[-836,1715],[-211,1218]],[[260923,346792],[0,1879]],[[260923,346792],[-350,-1703],[-444,506]],[[260129,345595],[-184,949],[51,2287]],[[283778,344302],[137,-1340],[-235,-399]],[[283680,342563],[-211,-1306]],[[283469,341257],[-343,603],[-21,992],[-459,1162]],[[282646,344014],[-526,-168],[-333,1093]],[[234410,344177],[-298,-3],[1,-1624],[-250,5]],[[233863,342555],[-647,10]],[[270849,346108],[-412,-3021]],[[270437,343087],[-395,999]],[[270042,344086],[-95,1420],[-234,365]],[[269713,345871],[113,2675]],[[286734,348085],[37,-1381],[441,-2720],[-295,-510],[-337,1726]],[[286580,345200],[-247,782],[-219,2221]],[[251641,350528],[29,-1722],[-373,-22],[-27,-3471]],[[251270,345313],[-542,-338]],[[250728,344975],[-915,150]],[[249813,345125],[342,3659],[39,1749]],[[225794,344234],[-297,0]],[[225497,344234],[-1188,0]],[[224309,344234],[-888,-62]],[[252504,350504],[-37,-6508]],[[252467,343996],[-452,-1664]],[[252015,342332],[-416,1162],[-329,1819]],[[249813,345125],[-408,-509]],[[249405,344616],[-184,1254],[448,35],[-218,1039],[188,491]],[[215988,342196],[-1503,-3]],[[214485,342193],[2,8286]],[[215987,350464],[1,-8268]],[[253971,347881],[-287,-10],[29,-1851],[-361,-2613]],[[253352,343407],[3,475],[-888,114]],[[217487,342236],[0,-43]],[[217487,342193],[-1499,3]],[[217488,350459],[-1,-8223]],[[214485,342193],[-2446,0]],[[218990,350461],[-2,-8244]],[[218988,342217],[-1501,19]],[[220510,342201],[-1504,15]],[[219006,342216],[-18,1]],[[237599,350449],[-66,-2391],[209,-1186]],[[237742,346872],[-201,-1332]],[[237541,345540],[-237,-554],[-1005,172],[-161,-2143],[-448,53]],[[235690,343068],[-30,1111]],[[244333,350429],[-13,-3019],[-310,36],[-1,-1628],[-349,62]],[[243660,345880],[-1297,148]],[[242363,346028],[18,4419]],[[239188,350440],[-10,-7018]],[[239178,343422],[-500,71]],[[238678,343493],[-199,24],[-297,3290],[-440,65]],[[244452,350418],[274,-1428],[139,-3024]],[[244865,345966],[-253,-502],[-21,-6336]],[[244591,339128],[-295,861],[-689,91]],[[243607,340080],[78,1094],[-25,4706]],[[246125,346133],[-9,-2184]],[[246116,343949],[-922,327],[-329,1690]],[[246187,350445],[91,-4019],[-153,-293]],[[240421,350433],[-86,-130],[-16,-7014]],[[240319,343289],[-151,19]],[[240168,343308],[-990,114]],[[241326,350447],[-51,-4301],[214,-302],[163,-1657],[2,-1854]],[[241654,342333],[-1188,137],[-147,819]],[[242363,346028],[-108,-2388]],[[242255,343640],[-5,-1372],[-299,33],[-7,-1620],[-298,34]],[[241646,340715],[8,1618]],[[247842,344913],[-364,-14],[3,1093],[-1356,141]],[[166073,337255],[-1825,-23]],[[164248,337232],[-60,-5]],[[259576,349096],[-440,-2424]],[[259136,346672],[-408,962]],[[256972,348287],[-235,-4733],[-157,-1542]],[[256580,342012],[-358,78]],[[256222,342090],[89,2409],[-69,2509],[-310,150]],[[256334,346649],[0,0]],[[269713,345871],[-270,-1826],[-440,-1090]],[[269003,342955],[-147,935],[39,5066],[-191,-151]],[[273800,345561],[-24,-3359]],[[273776,342202],[-410,-186]],[[273366,342016],[-834,-920]],[[272532,341096],[-604,2255]],[[271928,343351],[190,2288]],[[266016,347576],[-182,-3348]],[[265834,344228],[-583,406]],[[265251,344634],[-174,1564]],[[260129,345595],[-76,-1981]],[[260053,343614],[-159,-706],[-544,-142]],[[259350,342766],[-214,3906]],[[249405,344616],[100,-1066],[-238,-810],[-78,-1541]],[[249189,341199],[-703,-51]],[[232320,344194],[0,-4873],[-163,-839]],[[232157,338482],[-593,17]],[[231564,338499],[9,4068],[-746,8],[-1,1610]],[[267164,346546],[-203,142],[-387,-2272]],[[266574,344416],[-254,92],[-305,-1843]],[[266015,342665],[-181,1563]],[[257861,345727],[219,-2690]],[[258080,343037],[-288,-2464]],[[257792,340573],[-469,1262],[-395,311],[-275,-1179],[-73,1045]],[[269003,342955],[-22,-1049]],[[268981,341906],[-95,483],[-414,-1436],[-99,-1242],[-215,431]],[[268158,340142],[-746,4390]],[[267412,344532],[234,1143]],[[271928,343351],[-738,-110]],[[271190,343241],[-274,1942],[-26,1322]],[[286580,345200],[260,-2059],[-166,-58],[-563,1793],[417,-1963],[-516,-158]],[[286012,342755],[-231,471],[37,4491]],[[263860,344208],[277,-2132]],[[264137,342076],[-291,-1173],[-653,-1443]],[[263193,339460],[-112,1610],[-520,3006]],[[255300,347396],[-148,-2919]],[[255152,344477],[-646,1244],[-421,-30]],[[254085,345691],[-88,2059]],[[254085,345691],[76,-2249],[-252,-3271],[243,-246],[-104,-1722]],[[254048,338203],[-22,-470]],[[254026,337733],[-577,561]],[[253449,338294],[-110,14],[13,5099]],[[259350,342766],[125,-2327]],[[259475,340439],[-385,-124]],[[259090,340315],[-438,450],[-572,2272]],[[286012,342755],[225,-327],[-290,-1136],[-496,1123],[-83,1530],[115,2811]],[[267412,344532],[-191,-1783]],[[267221,342749],[-165,989],[-482,678]],[[256222,342090],[-60,-1685]],[[256162,340405],[-921,637]],[[255241,341042],[-89,3435]],[[238678,343493],[80,-2934],[-203,-1599],[13,-2198]],[[238568,336762],[-493,95]],[[238075,336857],[-599,-165]],[[237476,336692],[-145,22]],[[237331,336714],[53,6146],[157,2680]],[[262024,343744],[-408,-705],[-49,-2263]],[[261567,340776],[-127,977],[-554,938],[-379,-1246]],[[260507,341445],[-454,2169]],[[265251,344634],[-424,-2187],[97,-598],[-378,-805],[-214,-1552]],[[264332,339492],[-195,2584]],[[274973,345658],[38,-1939],[-162,-1684]],[[274849,342035],[-546,78]],[[274303,342113],[-527,89]],[[271190,343241],[205,-849],[-197,-1934]],[[271198,340458],[-379,-47]],[[270819,340411],[-107,-893]],[[270712,339518],[-146,571],[-129,2998]],[[281787,344939],[-692,-7162]],[[281095,337777],[-139,1398],[-673,2402]],[[247320,341084],[-33,-576],[-1289,60]],[[245998,340568],[118,3381]],[[208151,345237],[293,-4777],[-163,-1891],[63,-1473]],[[208344,337096],[-1781,-187],[-951,1848],[-1038,6]],[[204574,338763],[8,2006]],[[276135,345955],[-22,-4592]],[[276113,341363],[-980,-698]],[[275133,340665],[-284,1370]],[[243607,340080],[-387,-1384]],[[243220,338696],[-296,1224],[-438,79],[156,1793],[-387,1848]],[[270042,344086],[-542,-1569]],[[269500,342517],[-247,-1769]],[[269253,340748],[-294,-190],[22,1348]],[[245998,340568],[-64,-1620],[-438,77]],[[245496,339025],[-463,92]],[[245033,339117],[-442,11]],[[277536,345659],[-27,-6363]],[[277509,339296],[-1406,391]],[[276103,339687],[10,1676]],[[278303,345704],[22,-6834]],[[278325,338870],[33,-603],[-850,-17]],[[277508,338250],[1,1046]],[[229924,344142],[1,-4066]],[[229925,340076],[-1447,8]],[[228478,340084],[-594,801],[-1,3241]],[[255241,341042],[-480,-1635],[-27,-1245]],[[254734,338162],[-379,-650],[-307,691]],[[285363,345704],[-90,-1720],[200,-3016],[-54,-1229]],[[285419,339739],[-161,-1091]],[[285258,338648],[-207,365],[-191,-1125],[-97,1432],[-186,-785],[-144,1522],[-394,-15],[-22,1229],[-337,1292]],[[279156,345617],[-183,-6998]],[[278973,338619],[-648,251]],[[279719,342491],[139,-1156],[-370,-2640],[-207,11]],[[279281,338706],[-308,-87]],[[237331,336714],[-1477,-33]],[[235854,336681],[-164,6387]],[[288818,335050],[63,-1480],[-197,-6894],[-610,-638]],[[288074,326038],[-5,98]],[[288069,326136],[643,1434],[149,5776],[-43,1704]],[[287690,334443],[-349,562]],[[287341,335005],[74,4092],[488,661],[174,-763],[41,-4813],[-337,-752],[-91,1013]],[[288009,345475],[568,-6869],[-469,3338],[-106,3522]],[[252015,342332],[-40,-5057]],[[251975,337275],[-583,117]],[[251392,337392],[-539,1205],[-221,2559]],[[250632,341156],[96,3819]],[[203103,338170],[0,312]],[[203103,338482],[0,-312]],[[203104,340538],[-422,-117],[-2,-2838],[423,-966]],[[203103,336617],[9,-10066]],[[203112,326551],[-2650,80]],[[200462,326631],[-119,1602],[-198,-3]],[[200145,328230],[5,12910],[-887,30]],[[211108,336324],[-13,-6367],[-717,-154]],[[210378,329803],[-244,605],[-702,7065],[-124,-377],[-964,0]],[[250632,341156],[-254,-2106],[-174,-102]],[[250204,338948],[-181,1222],[-661,-786]],[[249362,339384],[-173,1815]],[[282646,344014],[-362,-5323]],[[282284,338691],[-1014,-2547]],[[281270,336144],[-175,1633]],[[267221,342749],[-212,-3524]],[[267009,339225],[-457,518],[-553,2138]],[[265999,341881],[16,784]],[[265999,341881],[52,-1239],[-389,-1579]],[[265662,339063],[-165,-856],[-257,652],[-539,-385],[-75,-938]],[[264626,337536],[-271,1710]],[[264355,339246],[-23,246]],[[268158,340142],[-176,-2868]],[[267982,337274],[-326,-27],[-492,-1365]],[[267164,335882],[-155,3343]],[[263193,339460],[-282,-1554]],[[262911,337906],[-375,-1179]],[[262536,336727],[-941,74]],[[261595,336801],[1,25]],[[261596,336826],[-53,386]],[[261543,337212],[10,105]],[[261553,337317],[156,2179],[-142,1280]],[[226987,344230],[5,-8167]],[[226992,336063],[-1485,-16]],[[225507,336047],[-10,8187]],[[228478,340084],[-1,-4053]],[[228477,336031],[-1485,32]],[[225507,336047],[-296,-3],[0,-3229]],[[225211,332815],[-863,2]],[[224348,332817],[-25,4855]],[[224323,337672],[-14,6562]],[[224323,337672],[-2072,-4]],[[222251,337668],[-15,3737]],[[231564,338499],[-444,4],[-1,-4058]],[[231119,334445],[-1192,-1]],[[229927,334444],[-2,5632]],[[233863,342555],[-208,-1974],[146,-1820],[-99,-1073]],[[233702,337688],[-1043,-409],[-29,1219],[-323,-7]],[[232307,338491],[-150,-9]],[[235007,344169],[-28,-9733]],[[234979,334436],[-892,6]],[[234087,334442],[1,3236],[-386,10]],[[235854,336681],[57,-2246]],[[235911,334435],[-932,1]],[[270712,339518],[-422,-1622]],[[270290,337896],[-183,3519],[-607,1102]],[[283469,341257],[168,-1847],[-22,-1611]],[[283615,337799],[-112,244],[-755,-2883]],[[282748,335160],[-250,2798],[-214,733]],[[253449,338294],[-4,-541]],[[253445,337753],[-1088,149],[-103,-659]],[[252254,337243],[-279,32]],[[260507,341445],[21,-2479],[-126,-943]],[[260402,338023],[-565,156]],[[259837,338179],[-362,2260]],[[243220,338696],[34,-3025]],[[243254,335671],[-1124,135]],[[242130,335806],[-496,71],[5,1352]],[[241639,337229],[7,3486]],[[240168,343308],[-18,-7270]],[[240150,336038],[-594,78]],[[239556,336116],[-989,104],[1,542]],[[272532,341096],[-16,-3721]],[[272516,337375],[-83,-532]],[[272433,336843],[-535,176],[-700,3439]],[[241639,337229],[-594,41],[-3,-1349],[-498,75]],[[240544,335996],[-394,42]],[[259090,340315],[-150,-4665]],[[258940,335650],[-106,-1338]],[[258834,334312],[-300,532],[-141,-775],[-313,1294],[-345,-46]],[[257735,335317],[-130,449]],[[257605,335766],[203,1497],[-16,3310]],[[270290,337896],[-396,-2234]],[[269894,335662],[-202,1972],[-170,143]],[[269522,337777],[-269,2971]],[[261596,336826],[-53,386]],[[261553,337317],[-455,475],[-475,-445]],[[260623,337347],[-221,676]],[[281095,337777],[-585,-2047],[-679,-3519]],[[279831,332211],[-571,1186]],[[279260,333397],[-227,517],[248,4792]],[[285258,338648],[-235,-2967]],[[285023,335681],[-392,-875],[-524,1391]],[[284107,336197],[-492,1602]],[[269522,337777],[-293,-274],[-813,-2185],[-219,-149]],[[268197,335169],[-215,2105]],[[275133,340665],[83,-1449],[-296,-1328],[32,-1468]],[[274952,336420],[-480,1873],[-210,137]],[[274262,338430],[41,3683]],[[219006,342216],[1,-8139]],[[219007,334077],[-1521,-4]],[[217486,334073],[0,115]],[[217486,334188],[1,8005]],[[220510,338940],[0,-4867]],[[220510,334073],[-1503,4]],[[217486,334188],[-1496,-23]],[[215990,334165],[-2,8031]],[[214485,342193],[1,-7963]],[[214486,334230],[-2449,-96]],[[212037,334134],[1,2178]],[[274262,338430],[-178,-3319],[96,-3116]],[[274180,331995],[-135,-24]],[[274045,331971],[-450,-339]],[[273595,331632],[-36,1117]],[[273559,332749],[96,1381],[-522,2938]],[[273133,337068],[300,3340],[-67,1608]],[[215990,334165],[0,-71]],[[215990,334094],[-1504,-3]],[[214486,334091],[0,139]],[[257605,335766],[-267,-59]],[[257338,335707],[-1207,2677]],[[256131,338384],[31,2021]],[[273133,337068],[-79,883],[-538,-576]],[[263585,335029],[0,0]],[[263585,335029],[-124,-484]],[[263461,334545],[-99,4]],[[263362,334549],[-9,1250],[-281,765]],[[263072,336564],[-161,1342]],[[264355,339246],[-770,-4217]],[[267164,335882],[3,-378]],[[267167,335504],[-680,-2475],[-459,115]],[[266028,333144],[-109,2607],[-257,3312]],[[276103,339687],[-56,-7726]],[[276047,331961],[-323,-24]],[[275724,331937],[-70,1389],[-359,2653],[-343,441]],[[222251,337668],[32,-5648]],[[222283,332020],[-589,1],[-1,-1624],[-1183,13]],[[220510,330410],[0,3663]],[[200145,328230],[-3228,28],[-2,-6474],[-1606,14]],[[204574,338763],[16,-15442]],[[204590,323321],[-1474,-28]],[[203116,323293],[-4,3258]],[[203103,336617],[208,1297],[-208,256]],[[203103,338482],[8,1396]],[[249362,339384],[-275,31],[115,-1382],[-335,-1404],[-366,-377],[270,-1926],[-281,-846],[135,-918]],[[248625,332562],[-364,175],[-4,-2806]],[[248257,329931],[-36,-136]],[[248221,329795],[-36,1334],[-212,-483]],[[247973,330646],[-400,66]],[[247573,330712],[0,4866]],[[247573,335578],[-6,5520]],[[272433,336843],[-475,-3705]],[[271958,333138],[-10,-82]],[[271948,333056],[-430,281]],[[271518,333337],[-367,-86]],[[271151,333251],[-126,2692],[-326,1639],[222,1422],[-102,1407]],[[251392,337392],[-291,-2345],[-136,397]],[[250965,335444],[-553,1154],[-246,1169]],[[250166,337767],[38,1181]],[[247573,335578],[-2090,161]],[[245483,335739],[13,3286]],[[286926,335502],[-145,-1822],[-233,206],[79,1506],[-351,140]],[[286276,335532],[78,4358]],[[286354,339890],[552,1171],[303,-80],[50,-5635],[-333,156]],[[256131,338384],[-53,-2345],[-292,-1221]],[[255786,334818],[-336,-819],[-354,711],[-199,-818]],[[254897,333892],[-239,1016],[76,3254]],[[286276,335532],[-676,145]],[[285600,335677],[-577,4]],[[285419,339739],[847,1101],[88,-950]],[[259837,338179],[-278,-1956],[-1,-1386]],[[259558,334837],[-289,-248],[-329,1061]],[[271151,333251],[-416,-936],[-546,61]],[[270189,332376],[-338,1183],[43,2103]],[[250166,337767],[-127,96],[-281,-4503]],[[249758,333360],[-308,1168],[-405,125],[-420,-2091]],[[229927,334444],[-12,-3282]],[[229915,331162],[-1439,23]],[[228476,331185],[1,4846]],[[245033,339117],[-93,-1439],[-340,-1930],[-43,-3401],[-592,76]],[[243965,332423],[-591,68]],[[243374,332491],[12,3307],[-132,-127]],[[277508,338250],[-37,-6114]],[[277471,332136],[-595,-67]],[[276876,332069],[-829,-108]],[[263633,333862],[1,202]],[[263634,334064],[-1,-202]],[[264626,337536],[88,-2616],[-150,-1006]],[[264564,333914],[-285,822],[-464,206],[-191,-774]],[[263624,334168],[-163,377]],[[245483,335739],[-6,-4945]],[[245477,330794],[-2,-1650]],[[245475,329144],[-590,62],[-3,1642],[-263,-126]],[[244619,330722],[-662,63],[8,1638]],[[266028,333144],[-304,-143],[-504,-1878]],[[265220,331123],[-22,59]],[[265198,331182],[-124,1693],[-214,-288],[-296,1327]],[[279260,333397],[-157,-1140]],[[279103,332257],[-411,1984],[-648,-2053]],[[278044,332188],[-573,-52]],[[210378,329803],[0,-2771],[-614,432],[-745,-2269]],[[209019,325195],[-2,1368],[-3247,12],[1,-3244]],[[205771,323331],[-1181,-10]],[[282748,335160],[-108,-470]],[[282640,334690],[-343,-1480]],[[282297,333210],[-672,237]],[[281625,333447],[-169,331],[-186,2366]],[[275724,331937],[-313,-26]],[[275411,331911],[-1231,84]],[[232307,338491],[0,-2432],[148,-23],[1,-3216]],[[232456,332820],[-305,-2],[-149,-3257],[-294,2]],[[231708,329563],[-296,1],[-1,3262],[-292,-4],[0,1623]],[[234087,334442],[-14,-2089],[230,-1262]],[[234303,331091],[-538,-3686],[-283,599]],[[233482,328004],[-1,4815],[-1025,1]],[[260623,337347],[23,-3296],[103,-1581]],[[260749,332470],[-138,-25]],[[260611,332445],[-752,-140]],[[259859,332305],[-301,2532]],[[257338,335707],[-156,-2904],[-342,-2492]],[[256840,330311],[-446,715],[-239,-414]],[[256155,330612],[-245,215]],[[255910,330827],[24,1814],[-148,2177]],[[254026,337733],[-164,-1607],[-17,-2092],[167,-1717],[-89,-1887]],[[253923,330430],[-47,-579]],[[253876,329851],[-478,-216],[-127,792]],[[253271,330427],[-4,1966],[147,1494],[31,3866]],[[254897,333892],[-166,-2346]],[[254731,331546],[-712,-436],[-96,-680]],[[284107,336197],[0,-1816],[235,-1426]],[[284342,332955],[-25,-149]],[[284317,332806],[-216,-595],[-40,-1864]],[[284061,330347],[-198,-1249],[-361,-216]],[[283502,328882],[-237,1612]],[[283265,330494],[-76,1698],[-549,2498]],[[273559,332749],[-1601,389]],[[270189,332376],[-269,-1122]],[[269920,331254],[-1335,-829]],[[268585,330425],[-153,883],[95,1791],[-330,2070]],[[263072,336564],[-195,-3681],[-172,-21],[-175,-2136],[-273,-559]],[[262257,330167],[-331,919]],[[261926,331086],[77,2096],[533,3545]],[[261595,336801],[-473,-3690]],[[261122,333111],[-373,-641]],[[253271,330427],[-332,-80]],[[252939,330347],[-8,1375],[-394,358],[-302,1418]],[[252235,333498],[19,3745]],[[250965,335444],[-26,-4865]],[[250939,330579],[-293,-638]],[[250646,329941],[-809,110]],[[249837,330051],[-79,3309]],[[281625,333447],[-251,-3124],[4,-1252],[-421,-1196]],[[280957,327875],[-522,-413],[-138,955]],[[280297,328417],[-332,3369],[-134,425]],[[224348,332817],[-1,-1627]],[[224347,331190],[-2064,20]],[[222283,331210],[0,810]],[[179740,322568],[3,-2451],[444,-2895],[104,-2181],[266,-2705],[564,-2760]],[[181121,309576],[-326,-2417],[-494,-1592]],[[180301,305567],[-2460,-124],[1,-805],[-4499,-63],[2,-553],[-829,-8],[-928,527],[-315,-3026]],[[171273,301515],[-312,1400]],[[170961,302915],[145,1407],[238,4959],[-64,9968]],[[171280,319249],[98,4],[-3,18110]],[[164248,337232],[-2,-3233],[300,-23],[0,-1605],[244,-1640],[325,-34],[5,-1631],[193,12],[3,-1614],[397,-45],[3,-1614],[314,78],[-22,-1691],[246,-211],[0,-3299]],[[166254,320682],[-755,1375],[-936,2625],[-284,-1411],[-421,-724],[101,-1703],[-443,1647],[-537,-409]],[[162979,322082],[-5,3222],[-296,222],[-393,1772],[197,1534],[-165,1791],[-326,509],[-445,3198],[-340,589],[-168,2432]],[[171280,319249],[-3410,-90],[36,-551]],[[167906,318608],[-267,446],[-750,39],[-88,1202],[-462,376]],[[166339,320671],[-85,11]],[[252235,333498],[-176,-1852],[-459,-1134]],[[251600,330512],[-661,67]],[[242130,335806],[-34,-6487]],[[242096,329319],[-637,87]],[[241459,329406],[3,1623],[-1032,137]],[[240430,331166],[104,1602],[10,3228]],[[268585,330425],[-242,-1949],[-248,-495]],[[268095,327981],[-738,4146]],[[267357,332127],[82,739],[-272,2638]],[[238036,329533],[-270,1020],[-9,-2177],[-298,111],[-9,-1668],[-302,-291]],[[237148,326528],[-149,21],[20,4291]],[[237019,330840],[145,2397],[-141,1639],[249,-27],[204,1843]],[[238075,336857],[-39,-7324]],[[261926,331086],[-253,-1943]],[[261673,329143],[-493,2571],[-58,1397]],[[239556,336116],[-9,-2441],[-149,23],[-7,-2427],[-201,25],[-9,-2653]],[[239181,328643],[-294,242],[-94,1575],[-757,-927]],[[237019,330840],[-164,-1085],[-525,-532],[-176,1675],[-128,-957]],[[236026,329941],[-115,4494]],[[263362,334549],[-670,-5484]],[[262692,329065],[-240,-1164]],[[262452,327901],[-195,2266]],[[212037,334134],[-2,-8177]],[[212035,325957],[-1,-4264]],[[212034,321693],[-669,4],[-3,-1665],[-294,7],[-2,-1619],[-293,8],[-1,-1623],[-585,17],[-91,-1634]],[[210096,315188],[-586,7]],[[209510,315195],[-502,3],[-1,3241]],[[209007,318439],[12,6756]],[[284317,332806],[371,-2176],[955,-1729],[26,-1207]],[[285669,327694],[-54,-767],[-593,-357],[-140,698]],[[284882,327268],[-821,3079]],[[285600,335677],[126,-1604],[273,-883]],[[285999,333190],[-398,-1100],[175,-2296],[-1124,1767],[-310,1394]],[[240430,331166],[-12,-5402],[-114,-39]],[[240304,325725],[-549,-592],[-186,1872],[-330,1452]],[[239239,328457],[-58,186]],[[226992,336063],[8,-6492]],[[227000,329571],[-1,-750]],[[226999,328821],[0,-19]],[[226999,328802],[-475,-44],[-290,766],[-418,56]],[[225816,329580],[-586,-9],[-19,3244]],[[228476,331185],[-1,-1622]],[[228475,329563],[-1475,8]],[[243374,332491],[-161,-3273],[-723,82]],[[242490,329300],[-394,19]],[[257735,335317],[-73,-4276],[185,-1699]],[[257847,329342],[-411,-2087],[-227,201]],[[257209,327456],[-369,2855]],[[247573,330712],[-600,59]],[[246973,330771],[-1496,23]],[[288074,326038],[-5,98]],[[286926,335502],[415,-497]],[[287690,334443],[20,-1175],[-419,-3066],[-333,-1394],[-288,214],[-380,1513],[-221,-1048],[-325,2540],[265,-142],[-10,1305]],[[259859,332305],[-102,-4380]],[[259757,327925],[-680,1377],[-289,-544]],[[258788,328758],[11,1469]],[[258799,330227],[35,4085]],[[258799,330227],[-519,-1708],[-227,633]],[[258053,329152],[-206,190]],[[267357,332127],[-461,-864],[33,-2552]],[[266929,328711],[-948,-959]],[[265981,327752],[263,2891],[-1024,480]],[[265198,331182],[-169,-1111],[-21,-2086]],[[265008,327985],[-272,-947],[-243,467],[-219,-1110]],[[264274,326395],[-566,1467]],[[263708,327862],[264,836],[-23,1266],[-316,3898]],[[263634,334064],[-10,104]],[[255910,330827],[-429,244],[-353,-1106]],[[255128,329965],[-397,1581]],[[283265,330494],[-572,-1459],[-346,398]],[[282347,329433],[-50,3777]],[[248221,329795],[-58,-96]],[[248163,329699],[-190,947]],[[249837,330051],[-442,-508]],[[249395,329543],[-1138,388]],[[263708,327862],[-580,-827]],[[263128,327035],[-436,2030]],[[236026,329941],[-3,-304]],[[236023,329637],[-176,-1477],[-443,-194],[-252,1213],[-191,-612]],[[234961,328567],[-77,886],[-581,1638]],[[231708,329563],[0,-1618]],[[231708,327945],[-1282,3]],[[230426,327948],[0,3298],[-261,-1413],[-247,175]],[[229918,330008],[-3,1154]],[[279103,332257],[-595,-3991]],[[278508,328266],[-251,856],[-213,3066]],[[214486,334091],[-13,-8132]],[[214473,325959],[-2438,-2]],[[217486,334073],[-1,-8135]],[[217485,325938],[-1495,19]],[[215990,325957],[0,8137]],[[219007,334077],[3,-8124]],[[219010,325953],[-1525,-15]],[[220510,330410],[0,-4461]],[[220510,325949],[-1500,4]],[[215990,325957],[-1517,2]],[[271518,333337],[-29,-4139],[-182,-3290]],[[271307,325908],[-296,67]],[[271011,325975],[-264,59]],[[270747,326034],[1,1307],[-511,2796],[-304,-278]],[[269933,329859],[-13,1395]],[[282347,329433],[-80,-3574]],[[282267,325859],[-165,-563],[-420,838],[-332,-61]],[[281350,326073],[-393,1802]],[[252939,330347],[-5,-701]],[[252934,329646],[-672,-91],[-323,-2399],[-173,1]],[[251766,327157],[-166,3355]],[[280297,328417],[-211,-1294]],[[280086,327123],[-581,255],[-754,-1251]],[[278751,326127],[-353,1413],[110,726]],[[271948,333056],[227,-2696]],[[272175,330360],[382,-2967],[-24,-1802]],[[272533,325591],[-107,26]],[[272426,325617],[-1119,291]],[[273595,331632],[-24,-1620]],[[273571,330012],[-1396,348]],[[261673,329143],[-449,-3852]],[[261224,325291],[-188,2237],[-289,964]],[[260747,328492],[203,1622],[-339,2331]],[[233482,328004],[-312,226]],[[233170,328230],[-399,-1549],[-1070,-1312]],[[231701,325369],[7,2576]],[[225816,329580],[10,-9733]],[[225826,319847],[-1469,0]],[[224357,319847],[-4,4513]],[[224353,324360],[-6,6830]],[[244619,330722],[-212,-1147],[105,-2459],[-222,-2903]],[[244290,324213],[-331,36],[-3,-1236],[-368,689],[-238,-588]],[[243350,323114],[-586,854],[-297,-184]],[[242467,323784],[23,5516]],[[260747,328492],[-421,-561],[-85,-1375],[-371,150]],[[259870,326706],[-113,1219]],[[188318,312722],[-291,-1597],[-147,-4378],[653,-3],[-47,-2817]],[[188486,303927],[-642,1],[-1224,898],[-311,-3086],[-1306,2189],[-1641,-13]],[[183362,303916],[1,5933]],[[183363,309849],[-2,22529]],[[268095,327981],[-175,-2988],[-203,-1445],[134,-484]],[[267851,323064],[-277,-501]],[[267574,322563],[-1,-3]],[[267573,322560],[-644,6151]],[[274045,331971],[332,-4442],[324,-1103]],[[274701,326426],[-806,-3867]],[[273895,322559],[-185,1400]],[[273710,323959],[-377,-575],[22,1921]],[[273355,325305],[216,4707]],[[278751,326127],[-5,-339]],[[278746,325788],[-367,682],[-294,-913],[-345,-2208]],[[277740,323349],[-312,426],[-120,1819]],[[277308,325594],[-233,1635],[-199,4840]],[[277308,325594],[-662,369],[-623,-752]],[[276023,325211],[-58,1791],[126,2469],[-367,2466]],[[275411,331911],[-586,-5937]],[[274825,325974],[-124,452]],[[222283,331210],[11,-6489]],[[222294,324721],[-137,-42]],[[222157,324679],[-1040,43],[-1,-1614],[-294,3]],[[220822,323111],[-312,20]],[[220510,323131],[0,2818]],[[276023,325211],[-562,988]],[[275461,326199],[-228,-565],[-408,340]],[[269933,329859],[-238,-2103],[-19,-1656]],[[269676,326100],[-619,-853]],[[269057,325247],[-122,2959],[-350,2219]],[[255128,329965],[-90,-7353]],[[255038,322612],[-1051,46]],[[253987,322658],[9,5394],[-120,1799]],[[230426,327948],[0,-3245],[-137,1],[-1,-3821]],[[230288,320883],[-666,-983],[-127,785]],[[229495,320685],[-3,9491],[426,-168]],[[265981,327752],[-64,-577]],[[265917,327175],[-396,128],[-315,-711],[-198,1393]],[[224353,324360],[-360,353],[-1699,8]],[[229495,320685],[-432,1199]],[[229063,321884],[-238,-1061],[-352,454]],[[228473,321277],[2,8286]],[[241459,329406],[-204,-4750]],[[241255,324656],[-448,-779],[-906,103]],[[239901,323980],[403,1745]],[[256155,330612],[-49,-8076]],[[256106,322536],[-1068,76]],[[234961,328567],[-3,-2253],[-315,-6],[0,-2676]],[[234643,323632],[-1174,5]],[[233469,323637],[0,1895],[-295,3],[-4,2695]],[[262452,327901],[-222,-2978],[129,-2605]],[[262359,322318],[-796,-48]],[[261563,322270],[-276,-32]],[[261287,322238],[-305,-7]],[[260982,322231],[247,1083],[-5,1977]],[[257209,327456],[-20,-5059]],[[257189,322397],[-1046,132]],[[256143,322529],[-37,7]],[[237148,326528],[-7,-1358],[-305,-767]],[[236836,324403],[-229,-383],[-21,-2058],[-606,-644]],[[235980,321318],[43,8319]],[[246973,330771],[-2,-5539]],[[246971,325232],[-1504,74]],[[245467,325306],[8,3838]],[[245467,325306],[-7,-2742],[-291,30]],[[245169,322594],[-399,-324],[-210,-1347]],[[244560,320923],[13,2577],[-283,713]],[[248163,329699],[-214,-2386],[219,-628],[20,-1533],[-293,-394],[-116,-1726],[-268,-565]],[[247511,322467],[186,-1297],[-172,-1230]],[[247525,319940],[-289,-502]],[[247236,319438],[-2,1325]],[[247234,320763],[22,4543],[-285,-74]],[[251766,327157],[-13,-4698]],[[251753,322459],[-101,0]],[[251652,322459],[-541,-5]],[[251111,322454],[-505,-9]],[[250606,322445],[40,7496]],[[283502,328882],[-231,-2074]],[[283271,326808],[-356,-2934],[-358,-1180]],[[282557,322694],[-108,2561],[-182,604]],[[239239,328457],[-5,-1942],[-493,50],[-203,-1310],[-493,-195],[5,-2145]],[[238050,322915],[-1029,135],[-185,1353]],[[269057,325247],[-524,-1429]],[[268533,323818],[-371,-223]],[[268162,323595],[-311,-531]],[[253987,322658],[-600,-192]],[[253387,322466],[-453,-3]],[[252934,322463],[-50,3]],[[252884,322466],[50,7180]],[[273355,325305],[-822,286]],[[285469,320638],[-203,-947],[-926,-817]],[[284340,318874],[-64,5013]],[[284276,323887],[204,503],[398,-2748],[591,-1004]],[[284882,327268],[-235,-2199],[118,-897]],[[284765,324172],[-259,864],[-282,-1162]],[[284224,323874],[-953,2934]],[[258788,328758],[-158,-3843]],[[258630,324915],[-206,2015],[-376,1415],[5,807]],[[249395,329543],[-32,-7083]],[[249363,322460],[-223,-9]],[[249140,322451],[-1629,16]],[[270747,326034],[-688,163]],[[270059,326197],[-383,-97]],[[250606,322445],[-430,-12]],[[250176,322433],[-813,27]],[[252884,322466],[-1131,-7]],[[235980,321318],[-18,-3816]],[[235962,317502],[-19,-4124]],[[235943,313378],[-1327,-11]],[[234616,313367],[-1,3239],[-339,-2]],[[234276,316604],[0,3244],[171,1607],[196,17],[0,2160]],[[226999,328802],[9,-8951]],[[227008,319851],[-1,-3236]],[[227007,316615],[-1172,1]],[[225835,316616],[-9,3231]],[[228473,321277],[-555,610],[-74,2247],[-845,4687]],[[258630,324915],[-1,-2532]],[[258629,322383],[-1296,15]],[[257333,322398],[-144,-1]],[[242467,323784],[-5,-1009]],[[242462,322775],[-296,42],[-6,-1618],[-876,479]],[[241284,321678],[-150,871],[121,2107]],[[259870,326706],[26,-4377]],[[259896,322329],[-1243,53]],[[258653,322382],[-24,1]],[[263128,327035],[11,-1304],[-212,-3409]],[[262927,322322],[-101,-5]],[[262826,322317],[-467,1]],[[200462,326631],[361,-4880]],[[200823,321751],[-379,16],[-5,-7061]],[[200439,314706],[-1450,-14]],[[198989,314692],[-3681,23]],[[229063,321884],[-6,-2046]],[[229057,319838],[-2049,13]],[[267573,322560],[-1043,-136]],[[266530,322424],[-489,3117],[-223,-90]],[[265818,325451],[99,1724]],[[285669,327694],[310,747],[30,-1789],[-452,-994],[295,-347],[-138,-1387],[-575,-2025],[-396,1478],[22,795]],[[260982,322231],[-365,31]],[[260617,322262],[-721,67]],[[281350,326073],[46,-5342],[-149,-3077],[243,-283]],[[281490,317371],[-394,-3133]],[[281096,314238],[-204,2185],[-465,3448]],[[280427,319871],[-419,2517],[-71,1883],[149,2852]],[[239901,323980],[-690,-4023],[1,-1632]],[[239212,318325],[-296,-555]],[[238916,317770],[-881,36]],[[238035,317806],[15,5109]],[[233469,323637],[-441,-557],[-20,-6469]],[[233008,316611],[1,-1619],[-439,-6]],[[232570,314986],[-586,-6],[0,1619],[-585,2]],[[231399,316601],[1,1620]],[[231400,318221],[8,5253],[293,1895]],[[265818,325451],[-331,-348],[-413,-2793]],[[265074,322310],[-349,6]],[[264725,322316],[-533,16]],[[264192,322332],[82,4063]],[[231400,318221],[-877,0]],[[230523,318221],[1,2621],[-236,41]],[[264192,322332],[-835,-2]],[[263357,322330],[-430,-8]],[[280427,319871],[-1132,-400]],[[279295,319471],[-372,2212]],[[278923,321683],[-155,1648],[-22,2457]],[[284224,323874],[52,13]],[[284340,318874],[-211,-330]],[[284129,318544],[-198,2127],[-360,239],[-380,1073],[-481,70]],[[282710,322053],[-153,641]],[[203116,323293],[0,-1615],[261,2],[1,-1549],[-728,1]],[[202650,320132],[-59,615],[-705,54],[-101,-673],[-844,4],[-118,1619]],[[209007,318439],[-587,-6],[1,-1615],[-293,-11],[-4,-1617],[-1242,-7],[0,-4792]],[[206882,310391],[-1173,-5]],[[205709,310386],[1,4846],[62,-6],[-1,8105]],[[270059,326197],[-28,-6431],[221,-1212]],[[270252,318554],[-254,-3696],[-212,-1916]],[[269786,312942],[-390,2635],[-91,3609]],[[269305,319186],[-142,3644],[-154,854],[-476,134]],[[276023,325211],[227,-1073],[186,598],[147,-1356],[71,-2680],[-218,-1752]],[[276436,318948],[-6,0]],[[276430,318948],[-1089,137]],[[275341,319085],[120,7114]],[[278923,321683],[-437,-2238],[-436,97]],[[278050,319542],[-14,1963],[-296,1844]],[[275341,319085],[-679,65]],[[274662,319150],[-651,43],[43,2131],[-159,1235]],[[271464,320921],[-199,-1405],[-198,-4516]],[[271067,315000],[-604,2049],[-211,1505]],[[271011,325975],[333,-4681],[120,-373]],[[282710,322053],[66,-1014],[-81,-3692]],[[282695,317347],[-1205,24]],[[214473,325959],[-4,-8114]],[[214469,317845],[-993,-9]],[[213476,317836],[-1442,8]],[[212034,317844],[0,3849]],[[272173,319555],[-709,1366]],[[272426,325617],[-120,-2206],[-216,-215],[83,-3641]],[[219010,325953],[-5,-8102]],[[219005,317851],[-1126,10]],[[217879,317861],[-406,0]],[[217473,317861],[12,8077]],[[220510,323131],[0,-5304]],[[220510,317827],[-1157,20]],[[219353,317847],[-348,4]],[[215990,325957],[-18,-8107]],[[215972,317850],[-1028,10]],[[214944,317860],[-475,-15]],[[277740,323349],[-316,-946],[31,-1526],[-351,-1962]],[[277104,318915],[-668,33]],[[217473,317861],[-1061,-15]],[[216412,317846],[-440,4]],[[273710,323959],[112,-2797],[-91,-1952]],[[273731,319210],[-1617,15]],[[272114,319225],[59,330]],[[266530,322424],[-186,-15]],[[266344,322409],[-1079,-93]],[[265265,322316],[-191,-6]],[[247234,320763],[-1924,142],[-2,-829]],[[245308,320076],[-139,2518]],[[224357,319847],[-575,10],[0,-4860]],[[223782,314997],[-488,-1],[-284,811]],[[223010,315807],[139,1188],[-267,11],[14,2697],[-285,-467]],[[222611,319236],[-167,661],[-83,3112],[-204,1670]],[[284158,318179],[-29,365]],[[285469,320638],[29,1356],[695,560],[-107,-1081],[521,322],[-484,-2668],[-165,-1717],[-182,-43],[-131,1683],[-204,-1777],[-551,162],[-575,-954],[-157,1698]],[[222611,319236],[-441,-169],[-51,-1639],[-679,-8]],[[221440,317420],[-149,817],[-33,3269],[-436,-2],[0,1607]],[[164640,304627],[231,-1774],[-418,-878],[-322,2121],[509,531]],[[165055,305328],[975,-1440],[-461,-704],[-359,132],[-155,2012]],[[166339,320671],[-2,-7969],[-90,-1806]],[[166247,310896],[-249,759],[-867,-159],[-358,995],[-804,201],[-490,-415],[-116,1396],[-372,1055],[123,2396],[-24,2470],[-170,1150],[59,1338]],[[241284,321678],[-584,-794],[39,-1065]],[[240739,319819],[-931,87],[-3,-1605]],[[239805,318301],[-593,24]],[[238035,317806],[-613,-1484]],[[237422,316322],[-245,500],[-834,92],[-381,588]],[[244560,320923],[-20,-4593],[-199,26],[193,-1935]],[[244534,314421],[-604,81],[-3,-1622],[-230,23]],[[243697,312903],[96,2891],[-159,661],[20,4598],[-307,35],[3,2026]],[[269305,319186],[-840,-2741],[-145,-912]],[[268320,315533],[-168,2206],[10,5856]],[[243697,312903],[-75,13]],[[243622,312916],[-905,125]],[[242717,313041],[1,2458],[-234,29],[98,2072],[20,5167],[-140,8]],[[274662,319150],[434,-3775]],[[275096,315375],[-397,-1018],[74,-879],[-605,-586],[-6,1090],[-378,-1531]],[[273784,312451],[4,1591]],[[273788,314042],[49,2842],[-106,2326]],[[234276,316604],[-1268,7]],[[268320,315533],[-415,-2629]],[[267905,312904],[-174,218]],[[267731,313122],[-145,796]],[[267586,313918],[-653,2805]],[[266933,316723],[-40,540]],[[266893,317263],[305,3008],[323,1133],[53,1159]],[[205709,310386],[-1,-1614],[-1701,0]],[[204007,308772],[-1371,-6],[-3,3352]],[[202633,312118],[-147,1515],[16,6497],[148,2]],[[278050,319542],[43,-1241],[-360,-2634]],[[277733,315667],[-629,3248]],[[221440,317420],[1,-4034],[-493,-32]],[[220948,313354],[-223,1274],[-207,-261]],[[220518,314367],[-8,3460]],[[242717,313041],[-496,63]],[[242221,313104],[-106,14]],[[242115,313118],[5,1627],[-291,31],[-264,1666],[-303,324],[6,1345],[-291,53],[9,1622],[-247,33]],[[256004,318054],[-462,771]],[[255542,318825],[-243,556],[-714,-1852],[-404,1290],[-162,1542],[-347,180]],[[253672,320541],[-285,1925]],[[256143,322529],[-11,-3407],[-128,-1068]],[[245308,320076],[-7,-2463],[141,-1661]],[[245442,315952],[-8,-3255],[151,-26],[-6,-2480],[-150,6]],[[245429,310197],[-103,135],[-579,3570],[-213,519]],[[266893,317263],[-555,643],[-280,1346]],[[266058,319252],[-12,1037],[298,2120]],[[257333,322398],[-17,-8213]],[[257316,314185],[-332,545],[-546,1973]],[[256438,316703],[-434,1351]],[[252925,317998],[-982,22]],[[251943,318020],[-96,1898],[-197,-2],[2,2543]],[[252934,322463],[-9,-4465]],[[253555,314761],[-46,-2207]],[[253509,312554],[-482,7]],[[253027,312561],[-4,5160],[-98,277]],[[253672,320541],[-117,-5780]],[[251943,318020],[-47,-2985]],[[251896,315035],[-984,33]],[[250912,315068],[1,4041],[197,808],[1,2537]],[[249142,318305],[-519,9],[-331,-1193],[-263,918],[-215,-624]],[[247814,317415],[-5,2533],[-284,-8]],[[249140,322451],[2,-4146]],[[250912,315068],[-438,-279]],[[250474,314789],[-147,-6],[-2,4868],[-149,0],[0,2782]],[[250474,314789],[-1,-1631]],[[250473,313158],[-643,1090],[-534,3]],[[249296,314251],[-2,2447],[-152,1607]],[[266058,319252],[-82,-420]],[[265976,318832],[-275,-140]],[[265701,318692],[-106,2241],[-330,1383]],[[258653,322382],[-137,-6674],[89,-612]],[[258605,315096],[-29,-1678],[-447,-519],[-145,1195]],[[257984,314094],[-428,804],[-240,-713]],[[260678,319948],[-562,-4378],[-610,-2702],[-150,-76]],[[259356,312792],[-223,839],[-30,1452],[-498,13]],[[260617,322262],[61,-2314]],[[263365,319856],[101,-595],[-208,-1794],[7,-2679]],[[263265,314788],[-172,734],[-550,214]],[[262543,315736],[264,4518],[19,2063]],[[263357,322330],[8,-2474]],[[264725,322316],[-135,-684],[239,-2782],[-180,-2852]],[[264649,315998],[-86,-842]],[[264563,315156],[-22,278]],[[264541,315434],[-329,3527],[-293,881],[-554,14]],[[262543,315736],[-381,-217]],[[262162,315519],[-1,1815],[-262,888]],[[261899,318222],[232,965],[228,3131]],[[261899,318222],[-334,1613],[-2,2435]],[[265701,318692],[-212,-1318]],[[265489,317374],[-231,350],[-271,-1838],[-338,112]],[[284158,318179],[119,-1091],[-640,-3358],[-489,-1594]],[[283148,312136],[-159,657],[-294,4554]],[[261287,322238],[-239,-2821],[0,-1352],[-233,-2520]],[[260815,315545],[-137,4403]],[[262162,315519],[-52,-657]],[[262110,314862],[-107,4]],[[262003,314866],[-1169,24]],[[260834,314890],[-19,655]],[[230523,318221],[0,-1628],[-294,-3],[-5,-3251]],[[230224,313339],[-873,12]],[[229351,313351],[0,1623],[-293,811]],[[229058,315785],[-1,4053]],[[202633,312118],[-979,1703],[-317,896],[-898,-11]],[[279295,319471],[266,-2709],[-183,-3842]],[[279378,312920],[-224,-635],[-333,-2783]],[[278821,309502],[-4,24]],[[278817,309526],[-1052,5966]],[[277765,315492],[-32,175]],[[212034,317844],[-3,-8091]],[[212031,309753],[0,-189]],[[212031,309564],[-1940,9],[5,5615]],[[272114,319225],[155,-4645]],[[272269,314580],[-1,-1446]],[[272268,313134],[-327,-920],[-286,1648]],[[271655,313862],[-588,1138]],[[247236,319438],[-213,564],[88,-2171],[-320,-435],[282,-923],[-325,-596]],[[246748,315877],[-1306,75]],[[255542,318825],[30,-628],[-317,-3711]],[[255255,314486],[-1700,275]],[[166087,290612],[275,-966],[-300,-16],[25,982]],[[167726,304768],[-743,1873],[-183,2255],[-553,2000]],[[167906,318608],[691,-9433],[-103,-2110],[-329,6],[-439,-2303]],[[247814,317415],[-121,-2322],[126,-841]],[[247819,314252],[0,-806]],[[247819,313446],[-294,-28],[6,-1584],[-272,-13]],[[247259,311821],[-473,1881]],[[246786,313702],[-38,2175]],[[260834,314890],[37,-1199]],[[260871,313691],[-340,-2930],[-579,-3106]],[[259952,307655],[-731,14]],[[259221,307669],[-12,4226],[147,897]],[[281096,314238],[217,-1643],[-222,-1224]],[[281091,311371],[-528,-426],[-618,1727],[-567,248]],[[223010,315807],[-167,-929],[-209,-3035],[76,-1642]],[[222710,310201],[-463,2267],[-58,-1528],[-215,361]],[[221974,311301],[-292,391],[-321,-718],[-413,2380]],[[242115,313118],[-438,43],[-4,-817],[-514,69],[-222,-771]],[[240937,311642],[-45,1095],[-302,569]],[[240590,313306],[-41,1616],[-479,872],[30,2514],[-295,-7]],[[225835,316616],[-146,-4],[-1,-3243]],[[225688,313369],[-284,3],[-145,-1082],[-582,7],[-438,-809]],[[224239,311488],[-1,1890],[-456,-2],[0,1621]],[[229058,315785],[-744,-261],[154,-2163],[-579,4]],[[227889,313365],[-586,3]],[[227303,313368],[-1,3244],[-295,3]],[[264541,315434],[-415,-1027]],[[264126,314407],[-860,-257]],[[263266,314150],[-1,638]],[[266933,316723],[-339,-3833]],[[266594,312890],[-433,-921]],[[266161,311969],[-142,1338]],[[266019,313307],[139,814],[-135,1989],[115,1470],[-162,1252]],[[168718,285870],[613,-3552],[-361,241],[-252,3311]],[[168676,294217],[663,-1336],[118,-1995],[-366,419],[-148,2046],[-267,866]],[[170961,302915],[-533,9],[-383,-3729]],[[170045,299195],[-299,468],[-188,-1225],[-342,666],[55,1824],[-185,2349],[-237,1371],[-531,-107],[-202,-603],[-390,830]],[[273788,314042],[-1519,538]],[[269786,312942],[-1189,-5125]],[[268597,307817],[-93,1503]],[[268504,309320],[-251,3127],[-348,457]],[[276707,313833],[-152,-754],[-450,18],[-676,-2348]],[[275429,310749],[-117,2670],[-216,1956]],[[276430,318948],[164,-2140],[207,-808],[-94,-2167]],[[277765,315492],[-510,-6014]],[[277255,309478],[-68,132]],[[277187,309610],[-190,3520],[-290,703]],[[256438,316703],[-14,-6930]],[[256424,309773],[0,-270]],[[256424,309503],[-1169,98]],[[255255,309601],[0,4885]],[[266019,313307],[-494,36]],[[265525,313343],[-95,2291],[59,1740]],[[271655,313862],[-387,-3128],[-316,-1220],[-138,-1801]],[[270814,307713],[-619,2360],[-220,1485]],[[269975,311558],[-189,1384]],[[209510,315195],[8,-9723]],[[209518,305472],[-585,10],[-1,-1637],[-1755,87],[0,1633],[-298,10]],[[206879,305575],[3,4816]],[[249296,314251],[-147,-1]],[[249149,314250],[-1330,2]],[[240590,313306],[-339,47],[-92,-2176],[-1279,142]],[[238880,311319],[36,6451]],[[231399,316601],[1,-3247],[-148,-1629],[-731,-2]],[[230521,311723],[-297,20],[0,1596]],[[253027,312561],[-593,32]],[[252434,312593],[1,817],[-542,-5]],[[251893,313405],[3,1630]],[[216412,317846],[0,-8101]],[[216412,309745],[-260,3]],[[216152,309748],[-1207,11]],[[214945,309759],[-1,8101]],[[217879,317861],[-4,-8108]],[[217875,309753],[-265,-6]],[[217610,309747],[-1198,-2]],[[214945,309759],[-258,1]],[[214687,309760],[-1212,-2]],[[213475,309758],[1,8078]],[[219353,317847],[-5,-8079]],[[219348,309768],[-278,10]],[[219070,309778],[-1195,-25]],[[220518,314367],[0,-4631]],[[220518,309736],[-1170,32]],[[238880,311319],[-3,-1067]],[[238877,310252],[-196,24]],[[238681,310276],[-1273,172]],[[237408,310448],[14,5874]],[[213475,309758],[-250,-2]],[[213225,309756],[-1194,-3]],[[265525,313343],[-379,-1617]],[[265146,311726],[-589,2243],[6,1187]],[[282602,309349],[-10,65]],[[282592,309414],[10,-65]],[[283148,312136],[-617,-2746]],[[282531,309390],[-232,1787],[-388,-117],[-188,-953]],[[281723,310107],[-370,469]],[[281353,310576],[-262,795]],[[237408,310448],[-890,101],[31,-3035]],[[236549,307514],[-631,-49]],[[235918,307465],[25,5913]],[[257984,314094],[-89,-4491]],[[257895,309603],[-1471,170]],[[267586,313918],[-206,-1092],[-615,-311]],[[266765,312515],[-171,375]],[[227303,313368],[-1,-4054]],[[227302,309314],[-1606,11]],[[225696,309325],[-8,4044]],[[232570,314986],[1,-1620],[-301,-10],[2,-6508]],[[232272,306848],[-593,2]],[[231679,306850],[-1159,9]],[[230520,306859],[1,4864]],[[234616,313367],[-304,7],[0,-4907],[-291,4],[-15,-1618]],[[234006,306853],[-1734,-5]],[[246786,313702],[-19,-2055],[-497,-863],[38,-1147],[-293,-1723],[-253,398],[310,-1738],[-363,-407]],[[245709,306167],[2,-24]],[[245711,306143],[-453,5]],[[245258,306148],[93,410],[78,3639]],[[229351,313351],[-149,-2],[-1,-3219],[-146,-6]],[[229055,310124],[-301,798],[-865,13],[0,2430]],[[224239,311488],[147,-1345],[-2,-3288]],[[224384,306855],[-433,-385],[-521,1416]],[[223430,307886],[-657,27],[-63,2288]],[[263266,314150],[3,-2538]],[[263269,311612],[-982,-375]],[[262287,311237],[-273,215],[96,3410]],[[278817,309526],[-155,-873]],[[278662,308653],[-702,873],[-466,-1309]],[[277494,308217],[-239,1261]],[[265146,311726],[62,-1577]],[[265208,310149],[-838,21]],[[264370,310170],[1,855]],[[264371,311025],[-245,3382]],[[275429,310749],[0,-38]],[[275429,310711],[-371,-1301],[-162,-2339]],[[274896,307071],[-379,-1286]],[[274517,305785],[-288,-570],[-418,2121],[121,1598]],[[273932,308934],[155,2002],[-303,1515]],[[212031,309564],[-10,-8889]],[[212021,300675],[-14,-4738]],[[212007,295937],[-1275,-7]],[[210732,295930],[1,1618],[-581,-19],[4,3038],[-348,-1],[0,4885],[-290,21]],[[251893,313405],[-148,-262],[-98,-2422]],[[251647,310721],[-1175,275]],[[250472,310996],[1,2162]],[[259221,307669],[-550,-1893]],[[258671,305776],[-416,2982]],[[258255,308758],[-360,845]],[[262003,314866],[-203,-2819],[-428,-1224],[-148,-1566],[-209,5]],[[261015,309262],[-144,4429]],[[262287,311237],[-115,-5511]],[[262172,305726],[-1045,-291]],[[261127,305435],[-112,3827]],[[204007,308772],[-2,-8089],[-357,6],[0,-3269],[-895,189],[3,-3357]],[[202756,294252],[-282,-80],[-3451,20]],[[199023,294192],[-10,14576],[-24,5924]],[[199023,294192],[-802,21],[0,-5147]],[[198221,289066],[-2916,138]],[[195305,289204],[1,10598]],[[255255,309601],[-293,45]],[[254962,309646],[-1501,262]],[[253461,309908],[48,2646]],[[221974,311301],[-1,-5776]],[[221973,305525],[-842,203],[-613,2379]],[[220518,308107],[0,1629]],[[273932,308934],[-751,-1022],[-232,-720],[-385,1197]],[[272564,308389],[-296,4745]],[[245258,306148],[-220,-1243],[179,-1808],[-328,48],[-478,1055]],[[244411,304200],[-66,1223]],[[244345,305423],[-235,2560],[-507,303],[19,4630]],[[264371,311025],[-903,8],[-199,579]],[[250472,310996],[3,-4065]],[[250475,306931],[-737,17]],[[249738,306948],[1,538],[-589,29]],[[249150,307515],[-1,6735]],[[249150,307515],[-2,-540],[-585,15]],[[248563,306990],[-568,-79]],[[247995,306911],[2,1971],[-165,660],[-13,3904]],[[267731,313122],[-172,-4100]],[[267559,309022],[-165,-649],[-348,481],[-159,-756]],[[266887,308098],[-122,4417]],[[277187,309610],[-200,-184],[-957,-3894]],[[276030,305532],[-239,1408],[128,659],[-179,3128],[-311,-16]],[[272564,308389],[-61,-778]],[[272503,307611],[-371,-2255]],[[272132,305356],[-182,81],[-533,1971],[-394,-959]],[[271023,306449],[-209,1264]],[[261127,305435],[65,-2172]],[[261192,303263],[-366,-423]],[[260826,302840],[-582,504]],[[260244,303344],[-292,4311]],[[247116,305288],[0,-1624]],[[247116,303664],[-574,36]],[[246542,303700],[-7,2441],[-826,26]],[[247259,311821],[2,-3022],[-144,17],[-1,-3528]],[[247995,306911],[-1,-1623],[-878,0]],[[266161,311969],[-151,-1209],[137,-1333]],[[266147,309427],[-550,-3123]],[[265597,306304],[-143,-537],[-540,1289]],[[264914,307056],[377,2075],[-83,1018]],[[252434,312593],[-3,-7005]],[[252431,305588],[-490,-270]],[[251941,305318],[-294,8]],[[251647,305326],[0,5395]],[[229055,310124],[0,-2981]],[[229055,307143],[-102,-1894]],[[228953,305249],[-1646,5]],[[227307,305254],[-5,4060]],[[230520,306859],[-129,-798],[-366,1]],[[230025,306062],[-236,1076],[-734,5]],[[225696,309325],[4,-2728]],[[225700,306597],[-87,-539],[-544,798],[-165,-1383]],[[224904,305473],[-175,-372],[-345,1754]],[[235918,307465],[-20,-4634]],[[235898,302831],[-24,-5642]],[[235874,297189],[-725,1210]],[[235149,298399],[-86,1119],[-236,-357],[-301,2194],[-518,1395]],[[234008,302750],[-2,4103]],[[240937,311642],[-27,-4926]],[[240910,306716],[-579,117]],[[240331,306833],[-388,76],[-25,1423],[-898,817],[-143,1103]],[[192649,296056],[0,-2068],[-471,-21],[-761,-1597],[-17,-3435]],[[191400,288935],[-518,-982],[-412,-2924],[-457,4942],[-260,4020]],[[189753,293991],[-316,3938],[-198,-1382],[-452,2730],[42,1284],[-343,3366]],[[268504,309320],[-576,-1453],[-270,224]],[[267658,308091],[-99,931]],[[242221,313104],[-71,-8013]],[[242150,305091],[-288,-50]],[[241862,305041],[-455,1583],[-497,92]],[[244345,305423],[-785,1742],[-49,-1484],[-582,-12],[0,-544]],[[242929,305125],[-779,-34]],[[266887,308098],[-133,-492]],[[266754,307606],[-217,1203],[-390,618]],[[281353,310576],[-256,-2617],[-334,-211],[-135,-1225],[-339,131],[-50,-1711],[-247,-2039]],[[279992,302904],[-1171,6598]],[[269975,311558],[-244,-1242],[240,-2297],[-54,-2071],[-167,-824]],[[269750,305124],[-567,147],[-179,-1082]],[[269004,304189],[-407,3628]],[[253461,309908],[-84,-4366]],[[253377,305542],[-946,46]],[[223430,307886],[-2,-7046]],[[223428,300840],[-1456,0]],[[221972,300840],[1,4685]],[[263252,305383],[-219,26]],[[263033,305409],[-515,58]],[[262518,305467],[-346,259]],[[263269,311612],[-17,-6229]],[[264370,310170],[-2,-2778]],[[264368,307392],[-267,-203],[-179,-1894]],[[263922,305295],[-670,88]],[[271023,306449],[-385,-3232]],[[270638,303217],[-108,-157]],[[270530,303060],[5,560],[-727,-210],[-58,1714]],[[281981,302597],[-3,82]],[[281978,302679],[3,-82]],[[282531,309390],[61,24]],[[282602,309349],[-405,-2625],[-165,-1820],[-109,2614]],[[281923,307518],[-200,2589]],[[251647,305326],[-876,-15]],[[250771,305311],[-294,-4],[-2,1624]],[[276030,305532],[200,-730]],[[276230,304802],[-500,-1758],[-394,2382],[-444,601],[4,1044]],[[280269,301329],[-18,102]],[[280251,301431],[18,-102]],[[281981,302597],[-3,82]],[[281923,307518],[8,-4063],[-186,-1610],[-387,486],[-737,-285],[-373,-588]],[[280248,301458],[-33,175]],[[280215,301633],[-11,68]],[[280204,301701],[-212,1203]],[[237408,310448],[27,-3045],[293,-50],[-7,-3257]],[[237721,304096],[-23,-4862],[-351,60]],[[237347,299294],[-4,1]],[[237343,299295],[-252,2449],[-133,5739],[-409,31]],[[238681,310276],[-66,-2357],[143,-159],[46,-2922],[169,-1709]],[[238973,303129],[-231,-2]],[[238742,303127],[-202,-247],[-819,1216]],[[206879,305575],[2,-12857],[-37,-4822],[-1146,-121]],[[205698,287775],[-6,3219],[-1134,-5],[-3,1595],[-1724,6]],[[202831,292590],[-75,1662]],[[240331,306833],[-20,-6441]],[[240311,300392],[-587,-612]],[[239724,299780],[-512,1234],[-239,2115]],[[264914,307056],[-97,-2181]],[[264817,304875],[-449,1093],[0,1424]],[[254962,309646],[-4,-5674]],[[254958,303972],[1,-1619]],[[254959,302353],[-880,88]],[[254079,302441],[-98,2460],[-614,116]],[[253367,305017],[10,525]],[[183362,303916],[0,-11575]],[[183362,292341],[-1739,3],[0,1620],[-863,-20],[-2,-8075],[-687,-61]],[[180071,285808],[-439,260],[-94,887],[82,3389],[-151,600],[21,1938],[272,564]],[[179762,293446],[283,2149],[77,2691],[-106,4262],[275,1900],[10,1119]],[[181121,309576],[282,-790],[1201,-586],[252,1502],[507,147]],[[219070,309778],[-4,-8907]],[[219066,300871],[-1455,-38]],[[217611,300833],[-1,8914]],[[220518,308107],[-138,101],[-4,-7331]],[[220376,300877],[-1310,-6]],[[258255,308758],[-186,-143],[-223,-2439],[-292,-747],[-162,-1946],[-429,-1122],[-130,-1067]],[[256833,301294],[-358,591],[-165,1920]],[[256310,303805],[109,-16],[5,5714]],[[217611,300833],[-1456,-59]],[[216155,300774],[-3,8974]],[[216155,300774],[-1454,-107]],[[214701,300667],[-14,9093]],[[214701,300667],[-1476,8]],[[213225,300675],[0,9081]],[[277494,308217],[-65,-785],[217,-4446],[468,-2796]],[[278114,300190],[-479,-436],[-840,1115],[-215,922]],[[276580,301791],[-276,1144]],[[276304,302935],[225,772],[-299,1095]],[[213225,300675],[-1204,0]],[[256310,303805],[-1352,167]],[[280269,301329],[-18,102]],[[280248,301458],[-33,175]],[[280204,301701],[21,-471],[-685,-2076],[-529,-3189]],[[279011,295965],[-269,-6],[-253,2494]],[[278489,298453],[-185,3127],[-229,1784],[245,1596],[342,3693]],[[278489,298453],[-265,205],[-88,1174]],[[278136,299832],[-22,358]],[[266754,307606],[118,-2920]],[[266872,304686],[-494,-1390]],[[266378,303296],[-72,1226],[-571,652],[-138,1130]],[[227307,305254],[-1,-3184]],[[227306,302070],[-352,1622],[-507,-2568],[-302,758]],[[226145,301882],[90,1860],[-381,232],[-154,2623]],[[269004,304189],[84,-1082]],[[269088,303107],[-225,529]],[[268863,303636],[-374,-245]],[[268489,303391],[-548,1345]],[[267941,304736],[-283,3355]],[[267941,304736],[-418,57],[-368,-881]],[[267155,303912],[-283,774]],[[274517,305785],[-85,-1864],[134,-4155],[-61,-615]],[[274505,299151],[-581,663],[-511,1884]],[[273413,301698],[-135,2326],[-372,1680],[-227,40],[-176,1867]],[[258671,305776],[-62,-2960]],[[258609,302816],[-230,-1971],[-471,-601],[9,-685]],[[257917,299559],[-515,1404],[-542,-471]],[[256860,300492],[-27,802]],[[221972,300840],[4,-1864]],[[221976,298976],[-229,1201],[-392,509],[-834,191]],[[220521,300877],[-145,0]],[[224904,305473],[0,-4595]],[[224904,300878],[-1476,-38]],[[260244,303344],[-448,-474],[-461,-1877]],[[259335,300993],[-374,2733],[-352,-910]],[[273413,301698],[-85,-3220]],[[273328,298478],[-403,-1011]],[[272925,297467],[-503,1412],[-567,2766]],[[271855,301645],[277,3711]],[[249738,306948],[7,-5485]],[[249745,301463],[-730,-2],[-437,570]],[[248578,302031],[-15,4959]],[[237343,299295],[-645,694],[-800,2842]],[[271855,301645],[-224,-1169]],[[271631,300476],[-514,965],[-162,2030],[-317,-254]],[[264817,304875],[-499,-1732]],[[264318,303143],[-198,104],[-7,-5871]],[[264113,297376],[-299,18],[-3,-1823]],[[263811,295571],[-420,-901]],[[263391,294670],[-672,167]],[[262719,294837],[116,1165]],[[262835,296002],[415,1552],[228,1602]],[[263478,299156],[298,1538],[245,2560],[-99,2041]],[[230025,306062],[101,-882],[-211,-1084],[101,-2120]],[[230016,301976],[-185,350],[-328,-1482],[-268,388],[-184,1849]],[[229051,303081],[-98,2168]],[[244411,304200],[-353,-701],[-25,-3601]],[[244033,299898],[-1166,156]],[[242867,300054],[62,5071]],[[276304,302935],[-783,-2653],[-394,-674],[-382,-2307]],[[274745,297301],[-240,1850]],[[265597,306304],[-143,-2280],[195,-1399]],[[265649,302625],[-510,-2676]],[[265139,299949],[-116,-620]],[[265023,299329],[-659,3103],[-46,711]],[[248578,302031],[0,-1380],[-586,-270],[-1,-1632]],[[247991,298749],[-443,543],[316,1089],[-750,38]],[[247114,300419],[2,3245]],[[250771,305311],[3,-4878],[-150,-1369]],[[250624,299064],[-878,-312]],[[249746,298752],[-1,2711]],[[231679,306850],[149,-590],[1,-3198],[271,-1475],[224,-5]],[[232324,301582],[-241,-630]],[[232083,300952],[-247,888],[-429,-565],[-250,-1798],[-558,-651]],[[230599,298826],[-125,948],[-568,1263],[110,939]],[[234008,302750],[-177,481],[-257,-1569]],[[233574,301662],[-669,200],[-133,968],[-448,-1248]],[[241862,305041],[-376,-48],[-11,-1571],[394,-3307]],[[241869,300115],[-693,133]],[[241176,300248],[-865,144]],[[226145,301882],[-3,-7872]],[[226142,294010],[-1232,-6]],[[224910,294004],[-6,6874]],[[266378,303296],[-305,-1111]],[[266073,302185],[-424,440]],[[246542,303700],[-5,-6913],[-292,-2],[0,-1616]],[[246245,295169],[-1257,-5]],[[244988,295164],[-45,601]],[[244943,295765],[269,600],[-236,1264],[282,816],[-40,1454],[303,-381],[-185,3715],[560,1252],[-185,1658]],[[244943,295765],[-41,-823],[-579,866]],[[244323,295808],[8,4035],[-298,55]],[[262518,305467],[-156,-2441],[-200,-873]],[[262162,302153],[-936,-51]],[[261226,302102],[-34,1161]],[[253367,305017],[-116,-5834]],[[253251,299183],[-738,-1766]],[[252513,297417],[38,555],[-611,6],[-2,2435]],[[251938,300413],[3,4905]],[[210732,295930],[-587,-11],[-3,-3235],[-124,-7],[0,-8009],[-134,-3]],[[209884,284665],[-2861,-34],[-28,-8244]],[[206995,276387],[-1400,-32],[4,8251],[101,1],[-2,3168]],[[263478,299156],[-127,1132],[-280,33]],[[263071,300321],[-38,5088]],[[179762,293446],[-4058,-181]],[[175704,293265],[-2642,-5],[-586,89],[-362,1122],[-386,245]],[[171728,294716],[266,2870],[-339,971],[-382,2958]],[[263071,300321],[-494,-473]],[[262577,299848],[-380,581]],[[262197,300429],[-35,1724]],[[270530,303060],[-303,-446],[112,-1814],[-159,-1241],[160,-3138]],[[270340,296421],[-326,1802]],[[270014,298223],[-319,2645],[-607,2239]],[[251938,300413],[-588,25],[-1,-1081],[-287,-277]],[[251062,299080],[-438,-16]],[[229051,303081],[-27,-98]],[[229024,302983],[-420,-2885],[-33,-1359],[-271,1490],[50,1869],[-342,-239],[-177,-1289],[-249,388],[-61,1401]],[[227521,302359],[-215,-289]],[[242867,300054],[0,-1626]],[[242867,298428],[-989,63]],[[241878,298491],[-9,1624]],[[254079,302441],[15,-7371]],[[254094,295070],[-915,185]],[[253179,295255],[72,3928]],[[268489,303391],[-191,-579],[-387,-2963],[106,-885]],[[268017,298964],[-130,-738]],[[267887,298226],[-343,98],[-450,1171]],[[267094,299495],[12,1605]],[[267106,301100],[49,2812]],[[189753,293991],[-1506,-3],[-6,-4849],[-1376,-18],[-349,1600],[-5,-14590]],[[186511,276131],[-3149,-34]],[[183362,276097],[0,16244]],[[267106,301100],[-728,2196]],[[238742,303127],[-74,-8950]],[[238668,294177],[-668,110]],[[238000,294287],[-287,2380]],[[237713,296667],[-388,1099],[22,1528]],[[256860,300492],[-290,-2959],[-338,-792],[-245,-1878]],[[255987,294863],[-144,1386],[-293,274]],[[255550,296523],[0,1620],[-291,55],[-9,3268],[-291,887]],[[268863,303636],[139,-2860],[323,-3556]],[[269325,297220],[-471,-581]],[[268854,296639],[-87,-160]],[[268767,296479],[-371,1043],[-216,-422],[-163,1864]],[[227521,302359],[-8,-8969]],[[227513,293390],[-1201,1]],[[226312,293391],[-170,619]],[[259335,300993],[56,-1317],[-280,-1720]],[[259111,297956],[-212,-1709],[70,-886],[-507,-2769]],[[258462,292592],[1,2075],[-386,811]],[[258077,295478],[-160,4081]],[[247114,300419],[-4,-8971]],[[247110,291448],[-285,-6],[1,-1092],[-449,-9]],[[246377,290341],[-133,6],[1,4822]],[[270014,298223],[-538,-798]],[[269476,297425],[-151,-205]],[[271631,300476],[-1005,-5255]],[[270626,295221],[-44,238]],[[270582,295459],[-242,962]],[[265023,299329],[-257,-2572],[-190,585]],[[264576,297342],[-271,24]],[[264305,297366],[-192,10]],[[260085,295669],[3,546],[-557,17],[-158,1641],[-262,83]],[[260826,302840],[-296,-1219],[-6,-4236],[-439,-1716]],[[267094,299495],[-351,-1180]],[[266743,298315],[-277,2223]],[[266466,300538],[-393,1647]],[[261226,302102],[134,-4629]],[[261360,297473],[95,-3169]],[[261455,294304],[-945,242]],[[260510,294546],[-581,51]],[[259929,294597],[156,1072]],[[235149,298399],[-2,-6961]],[[235147,291438],[-172,646]],[[234975,292084],[-223,645],[-660,-165]],[[234092,292564],[-504,-211]],[[233588,292353],[-6,48]],[[233582,292401],[-8,9261]],[[239724,299780],[-34,-6034]],[[239690,293746],[-694,-158]],[[238996,293588],[-328,589]],[[230599,298826],[-15,-6106]],[[230584,292720],[-1252,143]],[[229332,292863],[-306,203]],[[229026,293066],[-2,9917]],[[229026,293066],[-1224,262]],[[227802,293328],[-289,62]],[[237713,296667],[-606,-1072]],[[237107,295595],[-319,701],[-638,-836],[-276,1729]],[[276580,301791],[-335,-2181],[7,-1181],[-302,-3864]],[[275950,294565],[-336,-991]],[[275614,293574],[-478,40],[-285,2097]],[[274851,295711],[-106,1590]],[[171728,294716],[-240,-2194]],[[171488,292522],[-527,2873],[-607,2125],[-309,1675]],[[233582,292401],[-515,1393],[-746,743],[-269,-627]],[[232052,293910],[31,7042]],[[266466,300538],[-488,-4111]],[[265978,296427],[-652,2741]],[[265326,299168],[-187,781]],[[255550,296523],[-579,144],[-98,-1641],[-485,59]],[[254388,295085],[-294,-15]],[[262197,300429],[-36,-1811],[-801,-1145]],[[249746,298752],[0,-823]],[[249746,297929],[-780,-17]],[[248966,297912],[-952,5]],[[248014,297917],[-23,832]],[[278136,299832],[-261,-1730],[-65,-2062],[-295,-1491],[-382,-3556]],[[277133,290993],[-221,469],[-599,3177],[-363,-74]],[[232052,293910],[-3,-967]],[[232049,292943],[-1216,-1077]],[[230833,291866],[-249,854]],[[274851,295711],[-156,130],[-298,-1759],[-415,2480],[-367,85],[-287,1831]],[[272925,297467],[-517,-3023]],[[272408,294444],[-1070,-5441]],[[271338,289003],[-265,919]],[[271073,289922],[-257,2318],[43,1727],[-233,1254]],[[258077,295478],[-439,-1479],[-435,-2504],[-547,-1593]],[[256656,289902],[-109,9]],[[256547,289911],[-268,1111],[-470,3450],[178,391]],[[220521,300877],[16,-8165]],[[220537,292712],[-1467,9]],[[219070,292721],[-4,8150]],[[221976,298976],[5,-6234]],[[221981,292742],[-1444,-30]],[[224910,294004],[2,-1314]],[[224912,292690],[-1486,25]],[[223426,292715],[2,8125]],[[219070,292721],[-1453,-12]],[[217617,292709],[-6,8124]],[[217617,292709],[-1443,-46]],[[216174,292663],[-19,8111]],[[223426,292715],[-1445,27]],[[216174,292663],[-1446,-96]],[[214728,292567],[-27,8100]],[[213225,300675],[57,-8129]],[[213282,292546],[-1287,-1]],[[211995,292545],[12,3392]],[[214728,292567],[-1446,-21]],[[241176,300248],[-11,-1320],[-519,-4119],[192,-1475],[382,-1184]],[[241220,292150],[-1146,188]],[[240074,292338],[-391,56],[7,1352]],[[266743,298315],[382,-3066],[-30,-933]],[[267095,294316],[-707,-913]],[[266388,293403],[-414,1707]],[[265974,295110],[4,1317]],[[262719,294837],[-459,-1602]],[[262260,293235],[-776,49]],[[261484,293284],[-29,1020]],[[262577,299848],[-12,-3860],[270,14]],[[248014,297917],[76,-4059],[-205,-781],[1,-1557]],[[247886,291520],[-437,-568]],[[247449,290952],[-227,-1244],[-112,1740]],[[252513,297417],[69,-2402],[-508,-278]],[[252074,294737],[0,1098],[-967,-56]],[[251107,295779],[-45,3301]],[[241878,298491],[54,-3824],[-182,-2390],[74,-1398]],[[241824,290879],[-230,-523],[-374,1794]],[[244323,295808],[-11,-3253]],[[244312,292555],[-1484,172]],[[242828,292727],[39,5701]],[[264965,295106],[-389,2236]],[[265326,299168],[-46,-1734],[-315,-2328]],[[278269,287761],[-76,264]],[[278193,288025],[76,-264]],[[279011,295965],[-403,-3616],[-92,-2363],[-262,1132],[231,-2620],[-212,-589],[-375,805]],[[277898,288714],[-123,574]],[[277775,289288],[-642,1705]],[[195305,289204],[0,-8031]],[[195305,281173],[-1,-6538]],[[195304,274635],[-185,-4]],[[195119,274631],[-313,2178],[43,3573],[-198,582],[-595,5810],[0,10694]],[[267887,298226],[124,-662],[-175,-1445],[3,-2070]],[[267839,294049],[-421,-2128]],[[267418,291921],[-323,2395]],[[253179,295255],[-83,-4574]],[[253096,290681],[-1016,-26]],[[252080,290655],[-6,4082]],[[265974,295110],[21,-726],[-419,-926],[-105,-1288]],[[265471,292170],[-170,1415]],[[265301,293585],[-336,1521]],[[251107,295779],[-195,-539]],[[250912,295240],[-465,-211],[-350,-1146]],[[250097,293883],[-350,16],[-1,4030]],[[268767,296479],[-480,-2909]],[[268287,293570],[-448,479]],[[237107,295595],[1,-5232]],[[237108,290363],[-341,756],[-196,-1322],[-639,965],[-521,-443]],[[235411,290319],[-264,1119]],[[275614,293574],[-88,-2688],[-301,-779]],[[275225,290107],[-353,382],[-40,1052],[-800,-2861]],[[274032,288680],[-22,-72]],[[274010,288608],[-398,2352],[-785,2546]],[[272827,293506],[-419,938]],[[242828,292727],[23,-1854],[-369,-1417],[-65,-1108]],[[242417,288348],[-241,1667],[-352,864]],[[270582,295459],[-741,-3542]],[[269841,291917],[-395,3623],[30,1885]],[[259929,294597],[-147,0],[-210,-3806],[-384,39],[-157,-3572]],[[259031,287258],[-882,-28]],[[258149,287230],[-35,1334],[210,2007],[198,283],[-60,1738]],[[250097,293883],[-203,-504],[0,-2742]],[[249894,290637],[-533,-8]],[[249361,290629],[-5,2179],[-385,256],[-5,4848]],[[249361,290629],[-291,-1322]],[[249070,289307],[-1184,2213]],[[269841,291917],[-165,-789]],[[269676,291128],[-84,-4]],[[269592,291124],[-424,845],[-314,4670]],[[195119,274631],[-3726,22]],[[191393,274653],[0,1610]],[[191393,276263],[7,12672]],[[264305,297366],[79,-1214],[-282,-4275]],[[264102,291877],[-95,1]],[[264007,291878],[19,2058],[-215,1635]],[[265301,293585],[-113,-1287],[-385,-1433]],[[264803,290865],[-134,697],[-567,315]],[[238000,294287],[55,-4237],[-203,-2133],[-208,87],[128,-2330]],[[237772,285674],[-29,1]],[[237743,285675],[-635,-3]],[[237108,285672],[0,4691]],[[269592,291124],[-134,-694]],[[269458,290430],[-356,976],[-547,-1372]],[[268555,290034],[-268,3536]],[[256547,289911],[-602,-2120],[-102,-2362],[-288,-52]],[[255555,285377],[-818,64]],[[254737,285441],[-325,194],[-15,2539]],[[254397,288174],[-9,6911]],[[211995,292545],[-22,-7993]],[[211973,284552],[0,-8133]],[[211973,276419],[1,-8101]],[[211974,268318],[0,-1611],[-730,-3]],[[211244,266704],[-1105,-3]],[[210139,266701],[0,9724],[-254,-1],[-1,8241]],[[252080,290655],[-401,-9]],[[251679,290646],[-766,-8]],[[250913,290638],[-1,4602]],[[244988,295164],[-59,-1673],[289,734],[-25,-3356],[150,-2943],[-317,-598],[225,-984],[-128,-819]],[[245123,285525],[1,-135]],[[245124,285390],[-272,18]],[[244852,285408],[-481,19]],[[244371,285427],[-67,-3]],[[244304,285424],[8,7131]],[[264007,291878],[-125,-1789],[-179,18]],[[263703,290107],[-245,1867],[-67,2696]],[[258149,287230],[-73,-1530]],[[258076,285700],[-259,915],[-757,37],[2,-409]],[[257062,286243],[-403,2157],[-3,1502]],[[271073,289922],[-669,-320],[-229,1237],[-260,-547]],[[269915,290292],[-239,836]],[[254397,288174],[-931,-2937]],[[253466,285237],[-470,-87]],[[252996,285150],[100,5531]],[[250913,290638],[-58,-1637],[-291,-9],[-2,-1641],[-289,-10]],[[250273,287341],[4,3290],[-383,6]],[[246377,290341],[40,-3234]],[[246417,287107],[-592,20],[0,-1670]],[[245825,285457],[-702,68]],[[266388,293403],[-34,-4888]],[[266354,288515],[-753,-748]],[[265601,287767],[-17,902]],[[265584,288669],[-113,3501]],[[263703,290107],[-14,-676]],[[263689,289431],[-975,45],[-28,-605]],[[262686,288871],[-213,626]],[[262473,289497],[-213,3738]],[[277775,289288],[-200,-1209],[-345,-446],[-431,-3537]],[[276799,284096],[-357,-1958],[-73,1501]],[[276369,283639],[-170,-184],[-119,1854],[-263,408]],[[275817,285717],[-479,2444],[-113,1946]],[[175704,293265],[8,-6545],[-64,-13],[-10,-8499]],[[175638,278208],[-2839,-1564],[17,2580],[-320,834],[-131,1949],[82,972],[-206,4489],[-531,4208],[-222,846]],[[261484,293284],[160,-5558]],[[261644,287726],[11,-400]],[[261655,287326],[-1005,-14]],[[260650,287312],[-168,-13]],[[260482,287299],[28,7247]],[[260482,287299],[-991,-305]],[[259491,286994],[-460,264]],[[233588,292353],[-6,-56]],[[233582,292297],[-853,-556],[-398,-899],[-290,-1445]],[[232041,289397],[8,3546]],[[272827,293506],[-15,-5200],[98,-784]],[[272910,287522],[-478,-196],[-495,933],[-201,-1171]],[[271736,287088],[-363,872],[-35,1043]],[[267418,291921],[45,-835],[-297,-951],[-55,-1335]],[[267111,288800],[-431,-34]],[[266680,288766],[-326,-251]],[[202831,292590],[15,-6293]],[[202846,286297],[-1525,-4281],[1,-811],[-1146,18],[-2,-3253]],[[200174,277970],[-860,-3]],[[199314,277967],[-358,449],[43,2766],[-165,3253],[-161,393],[-104,4257],[-348,-19]],[[238996,293588],[-214,-3466],[-110,32],[-25,-4497]],[[238647,285657],[-84,3]],[[238563,285660],[-791,14]],[[268555,290034],[21,-284]],[[268576,289750],[-391,-1856],[-455,-1078]],[[267730,286816],[-127,1308],[-492,676]],[[183362,276097],[1,-8677]],[[183363,267420],[-4124,8475],[12,2285],[251,1897]],[[179502,280077],[536,715],[179,2808],[-146,2208]],[[191393,276263],[-1966,-35],[0,-192],[-2916,95]],[[226312,293391],[-10,-8053]],[[226302,285338],[-375,38]],[[225927,285376],[-1032,85]],[[224895,285461],[17,7229]],[[240074,292338],[-28,-6700]],[[240046,285638],[-697,10]],[[239349,285648],[-702,9]],[[265584,288669],[-611,417]],[[264973,289086],[-229,4]],[[264744,289090],[59,1775]],[[274010,288608],[-793,-2802]],[[273217,285806],[-307,1716]],[[179502,280077],[-3864,-1869]],[[227802,293328],[-42,-8197]],[[227760,285131],[-406,74]],[[227354,285205],[-1052,133]],[[229332,292863],[-28,-7781]],[[229304,285082],[-524,-54]],[[228780,285028],[-1020,103]],[[262473,289497],[-829,-1771]],[[232039,284934],[-231,5],[-115,-1982],[146,-674]],[[231839,282283],[-397,24]],[[231442,282307],[-615,60]],[[230827,282367],[1,2607]],[[230828,284974],[5,6892]],[[232041,289397],[-2,-4463]],[[230828,284974],[-612,11]],[[230216,284985],[-912,97]],[[219070,292721],[-5,-8097]],[[219065,284624],[-381,10]],[[218684,284634],[-1066,126]],[[217618,284760],[-1,7949]],[[220537,292712],[6,-8141]],[[220543,284571],[-433,-2]],[[220110,284569],[-1045,55]],[[234975,292084],[-31,-7088]],[[234944,284996],[-291,1575],[-562,-613]],[[234091,285958],[1,6606]],[[217618,284760],[-376,-124]],[[217242,284636],[-1070,-48]],[[216172,284588],[2,8075]],[[223426,292715],[8,-8203]],[[223434,284512],[-404,2]],[[223030,284514],[-1045,0]],[[221985,284514],[-4,8228]],[[224895,285461],[-2,-1035],[-413,38]],[[224480,284464],[-1046,48]],[[221985,284514],[-393,-1]],[[221592,284513],[-1049,58]],[[244304,285424],[-1696,42]],[[242608,285466],[-191,2882]],[[216172,284588],[-373,15]],[[215799,284603],[-1072,-39]],[[214727,284564],[1,8003]],[[206995,276387],[10,-9680]],[[207005,266707],[-196,-1]],[[206809,266706],[-3008,34]],[[203801,266740],[-1057,-19]],[[202744,266721],[2,17810],[100,1766]],[[213282,292546],[0,-7999]],[[213282,284547],[-1309,5]],[[214727,284564],[-369,-14]],[[214358,284550],[-1076,-3]],[[234091,285958],[-73,-393]],[[234018,285565],[-60,-960],[-377,12]],[[233581,284617],[1,7680]],[[242608,285466],[-1828,115]],[[240780,285581],[-734,57]],[[233581,284617],[-993,-40]],[[232588,284577],[-549,357]],[[235411,290319],[-5,-7248]],[[235406,283071],[-145,-6]],[[235261,283065],[-39,471]],[[235222,283536],[-278,1460]],[[249070,289307],[-205,-1883],[-209,-3399],[-189,-953]],[[248467,283072],[-1109,2439]],[[247358,285511],[-151,1938],[245,381],[-3,3122]],[[264744,289090],[-346,-257]],[[264398,288833],[-567,369],[-126,-463]],[[263705,288739],[-16,692]],[[275817,285717],[197,-1750],[-222,-2037],[-677,748]],[[275115,282678],[4,3610],[-520,96],[-567,2296]],[[247358,285511],[-237,-29],[-2,-1592],[-572,-19]],[[246547,283871],[-8,3240],[-122,-4]],[[269458,290430],[-641,-2764]],[[268817,287666],[-241,2084]],[[269915,290292],[98,-679],[-163,-3128],[52,-2327],[-122,-1900]],[[269780,282258],[-329,-1370]],[[269451,280888],[-242,1119]],[[269209,282007],[-81,3666],[-311,1993]],[[237108,285672],[0,-2572]],[[237108,283100],[-1702,-29]],[[271736,287088],[202,-924]],[[271938,286164],[-630,-2537]],[[271308,283627],[-251,828],[-618,-687],[-182,-1941]],[[270257,281827],[-477,431]],[[252996,285150],[-21,-1156]],[[252975,283994],[-1295,-58]],[[251680,283936],[-1,6710]],[[251680,283936],[-283,11]],[[251397,283947],[-1128,95]],[[250269,284042],[4,3299]],[[250269,284042],[-1132,-33],[-12,-840]],[[249125,283169],[-658,-97]],[[257062,286243],[14,-3977],[-399,14]],[[256677,282280],[-836,-103],[-284,801]],[[255557,282978],[-2,2399]],[[269209,282007],[-689,-991],[-95,755],[-402,-936]],[[268023,280835],[-353,3484]],[[267670,284319],[60,2497]],[[263705,288739],[-84,-3973]],[[263621,284766],[55,-1652]],[[263676,283114],[-539,-692]],[[263137,282422],[-449,518]],[[262688,282940],[-2,5931]],[[262688,282940],[-898,-37]],[[261790,282903],[-135,4423]],[[199314,277967],[-878,-18],[0,-1622],[-852,-5],[-2,-8136],[36,-4019]],[[197618,264167],[-857,-7],[-37,4023],[3,8134],[-307,3],[2,1614],[-576,1],[-4,3232],[-537,6]],[[264398,288833],[-62,-3686]],[[264336,285147],[-715,-381]],[[264973,289086],[-7,-4742],[-221,-293]],[[264745,284051],[2,1069],[-411,27]],[[265601,287767],[265,-1985],[29,-1347]],[[265895,284435],[-506,-1945]],[[265389,282490],[-646,23]],[[264743,282513],[2,1538]],[[267670,284319],[-205,1161],[-587,-1541]],[[266878,283939],[-198,4827]],[[266878,283939],[-137,-520]],[[266741,283419],[-297,-993]],[[266444,282426],[-403,800],[-146,1209]],[[275274,275950],[263,628]],[[275537,276578],[-263,-628]],[[275115,282678],[-128,-2424],[77,-2306]],[[275064,277948],[21,-1800],[-453,1074]],[[274632,277222],[-397,2101],[-304,486]],[[273931,279809],[-206,2389],[-508,3608]],[[273217,285806],[-382,-1361],[-117,-2127],[-399,-1752]],[[272319,280566],[-381,5598]],[[254737,285441],[-323,-2640],[122,-3923],[141,-1191],[-210,-1224]],[[254467,276463],[-114,140]],[[254353,276603],[-184,1820],[-373,-689],[-63,3380],[-367,2778],[100,1345]],[[261790,282903],[136,-2308]],[[261926,280595],[-1276,-335]],[[260650,280260],[0,7052]],[[260650,280260],[-288,-579],[2,-1890]],[[260364,277791],[-286,-278],[4,-1615],[-248,-23]],[[259834,275875],[-17,4870],[-320,8]],[[259497,280753],[-6,6241]],[[259497,280753],[-1025,-27]],[[258472,280726],[-231,1150],[-165,3824]],[[246547,283871],[-291,-1615],[175,-342],[-73,-2890]],[[246358,279024],[-674,12],[3,3264],[138,3157]],[[235222,283536],[-1204,-38]],[[234018,283498],[0,2067]],[[258472,280726],[-106,-860]],[[258366,279866],[-839,-31],[-2,-819],[-563,46]],[[256962,279062],[-281,-17],[0,1226]],[[256681,280271],[-4,2009]],[[202744,266721],[-672,-16],[-49,-2499],[301,-1532]],[[202324,262674],[-2142,-5]],[[200182,262669],[-8,15301]],[[272319,280566],[44,-2784]],[[272363,277782],[-442,-1977]],[[271921,275805],[-817,2977]],[[271104,278782],[-65,752],[269,4093]],[[273931,279809],[-121,-807]],[[273810,279002],[-90,-725],[-314,2440],[-742,-3662]],[[272664,277055],[-301,727]],[[248467,283072],[-232,-2682],[-637,-1400],[-479,-1603]],[[247119,277387],[-290,-1241]],[[246829,276146],[-463,2072]],[[246366,278218],[-8,806]],[[238701,271113],[-400,6]],[[238301,271119],[-149,1514],[-322,444],[-466,-2739],[-255,8]],[[237109,270346],[-1,3654]],[[237108,274000],[0,5599]],[[237108,279599],[0,3501]],[[237743,285675],[-72,-1365],[156,-1652],[-2,-3964],[475,-5512],[401,-2069]],[[238563,285660],[193,-3037],[29,-8285],[191,-5]],[[238976,274333],[-155,-3244]],[[238821,271089],[-120,24]],[[239516,277586],[89,-2415],[-250,-840],[-379,2]],[[239349,285648],[4,-5606],[141,-1],[22,-2455]],[[240779,280837],[-287,-13],[-146,-3236]],[[240346,277588],[-830,-2]],[[240780,285581],[-1,-4744]],[[242619,280157],[-575,-2639],[-400,30]],[[241644,277548],[0,1623],[-290,937],[-575,729]],[[242608,285466],[11,-5309]],[[234018,283498],[-3,-6187]],[[234015,277311],[-896,740],[-334,1437]],[[232785,279488],[-113,619]],[[232672,280107],[-84,4470]],[[246366,278218],[-28,-988],[-363,175],[-2,-2477],[-251,41],[-36,2444],[-221,12]],[[245465,277425],[-297,1279],[258,1421],[-227,255],[-6,1864],[185,934],[-62,1883],[-223,-1603],[31,1932]],[[268023,280835],[-29,-951]],[[267994,279884],[-750,-2311]],[[267244,277573],[-503,5846]],[[244371,285427],[-163,-2146],[-308,-2022],[-90,-2138]],[[243810,279121],[-368,-2106],[-400,-900]],[[243042,276115],[-26,3010],[-397,1032]],[[255557,282978],[-142,-817],[-5,-3254],[-143,-3],[2,-3233]],[[255269,275671],[-569,-21],[-233,813]],[[244852,285408],[-216,-2699],[-7,-2066],[-283,-3112]],[[244346,277531],[-420,5],[-116,1585]],[[225927,285376],[-30,-8275]],[[225897,277101],[-4,-879]],[[225893,276222],[-1133,26]],[[224760,276248],[-282,40]],[[224478,276288],[2,8176]],[[245465,277425],[-76,-261]],[[245389,277164],[-175,-453],[-903,-2]],[[244311,276709],[35,822]],[[227354,285205],[-18,-8168]],[[227336,277037],[-185,1]],[[227151,277038],[-1254,63]],[[264743,282513],[-219,-2967]],[[264524,279546],[-235,1091]],[[264289,280637],[-264,580],[-349,1897]],[[254353,276603],[-497,-1834],[-41,-1059],[323,-1231]],[[254138,272479],[-1368,-35]],[[252770,272444],[91,5016]],[[252861,277460],[114,6534]],[[228780,285028],[-17,-8117]],[[228763,276911],[-135,15]],[[228628,276926],[-1292,111]],[[230216,284985],[-6,-3141]],[[230210,281844],[-31,-4996]],[[230179,276848],[-1416,63]],[[230827,282367],[0,-512],[-617,-11]],[[232672,280107],[-600,940],[-233,1236]],[[218684,284634],[-13,-8157]],[[218671,276477],[-1432,44]],[[217239,276521],[3,8115]],[[210139,266701],[-717,-2]],[[209422,266699],[-123,-1]],[[209299,266698],[-2294,9]],[[220110,284569],[-7,-8139]],[[220103,276430],[-1432,47]],[[217239,276521],[0,-67]],[[217239,276454],[-1432,21]],[[215807,276475],[-8,8128]],[[215807,276475],[-1432,-36]],[[214375,276439],[-17,8111]],[[214375,276439],[-24,-1]],[[214351,276438],[-2378,-19]],[[221592,284513],[0,-8235]],[[221592,276278],[-48,0]],[[221544,276278],[-1441,152]],[[223030,284514],[0,-8234]],[[223030,276280],[-51,1]],[[222979,276281],[-1387,-3]],[[224478,276288],[-1448,-8]],[[271104,278782],[-447,-786]],[[270657,277996],[-226,1046],[-174,2785]],[[266444,282426],[-235,-3362]],[[266209,279064],[-288,518]],[[265921,279582],[-345,931],[-187,1977]],[[251397,283947],[0,-6509]],[[251397,277438],[-1123,-9]],[[250274,277429],[-5,6613]],[[250274,277429],[-14,-1]],[[250260,277428],[-1136,16],[0,1060]],[[249124,278504],[1,4665]],[[252861,277460],[-1464,-22]],[[235261,283065],[11,-1603]],[[235272,281462],[1,-2617]],[[235273,278845],[-795,-2144]],[[234478,276701],[-463,610]],[[267244,277573],[-756,-2456]],[[266488,275117],[-124,3123],[-155,824]],[[264289,280637],[-142,-524],[-197,-2955],[-99,3]],[[263851,277161],[-538,-506]],[[263313,276655],[-159,-301]],[[263154,276354],[0,1215]],[[263154,277569],[-17,4853]],[[237108,279599],[-280,902],[-87,-872],[-299,1007],[-286,-1037],[-341,13],[-543,1850]],[[249124,278504],[-150,-881]],[[248974,277623],[-206,-33],[-579,-3455]],[[248189,274135],[-495,8],[0,1630],[-575,8],[0,1606]],[[256681,280271],[-69,-2498],[-191,-1960],[-869,-125],[4,-3255],[-143,-9]],[[255413,272424],[-143,-6],[-1,3253]],[[263154,277569],[-1076,448]],[[262078,278017],[-152,2578]],[[265921,279582],[1,-27]],[[265922,279555],[-184,34],[-659,-3026]],[[265079,276563],[-284,2687],[-271,296]],[[231442,282307],[2,-8954]],[[231444,273353],[-1048,21]],[[230396,273374],[-217,3474]],[[270657,277996],[-80,-1269]],[[270577,276727],[-329,-341],[-291,-3111],[55,-642]],[[270012,272633],[0,-5]],[[270012,272628],[-338,-491],[-153,1147]],[[269521,273284],[74,1606],[-301,1073],[-437,275]],[[268857,276238],[507,2501],[87,2149]],[[232785,279488],[1,-3857],[404,-2322]],[[233190,273309],[-1746,44]],[[268857,276238],[-59,1856],[-542,1928],[-262,-138]],[[237108,274000],[-848,-1143],[-402,1182]],[[235858,274039],[-244,1]],[[235614,274040],[-342,532],[1,4273]],[[197618,264167],[24,-1497]],[[197642,262670],[0,-8383],[-2345,-24]],[[195297,254263],[7,20372]],[[259834,275875],[18,-769],[-399,-590]],[[259453,274516],[-479,386],[-118,1013],[-485,-1586]],[[258371,274329],[-5,5537]],[[241644,277548],[-1,-1627]],[[241643,275921],[-577,18],[2,-798],[-433,-2]],[[240635,275139],[-285,12],[-4,2437]],[[273810,279002],[98,-1654]],[[273908,277348],[8,-2098]],[[273916,275250],[-11,-827]],[[273905,274423],[15,-90]],[[273920,274333],[-20,-184]],[[273900,274149],[-60,-391]],[[273840,273758],[-438,-2518],[192,-2128]],[[273594,269112],[-42,-1026],[-431,800]],[[273121,268886],[-76,2025]],[[273045,270911],[44,2084],[-425,4060]],[[265079,276563],[-41,-438]],[[265038,276125],[-259,143],[-399,-2644]],[[264380,273624],[-384,781]],[[263996,274405],[-145,2756]],[[262078,278017],[222,-1817]],[[262300,276200],[-162,-699],[-765,-79],[10,-1076],[-289,-21]],[[261094,274325],[-155,1623],[-575,1843]],[[256962,279062],[29,-2257],[255,-3763]],[[257246,273042],[-260,-2156],[4,-3296]],[[256990,267590],[-755,-8],[-206,1771],[-614,2276]],[[255415,271629],[-2,795]],[[243042,276115],[-252,-2319],[-86,-1941]],[[242704,271855],[-773,7]],[[241931,271862],[-288,2425],[0,1634]],[[268650,272453],[-454,-2106]],[[268196,270347],[-296,-908],[-412,5134]],[[267488,274573],[-244,3000]],[[268857,276238],[-273,-3364],[66,-421]],[[258371,274329],[-238,-1220]],[[258133,273109],[-631,1134],[-256,-1201]],[[274213,271739],[154,-1026],[-395,-1964],[241,2990]],[[273840,273758],[261,-1594],[-185,-2613],[-322,-439]],[[273920,274333],[-20,-184]],[[273916,275250],[-11,-827]],[[274414,275982],[264,-153],[280,-1525],[-294,-989],[-167,-1799],[-139,1959],[56,2507]],[[274160,276707],[170,-315],[46,-4156],[-277,1436],[-122,1905],[183,1130]],[[274632,277222],[33,-1172],[-536,816],[-157,-984],[-64,1466]],[[265516,275419],[-478,706]],[[265922,279555],[-53,-2958],[-353,-1178]],[[266488,275117],[0,-942]],[[266488,274175],[-328,-2106]],[[266160,272069],[-649,44]],[[265511,272113],[5,3306]],[[234478,276701],[5,-3100]],[[234483,273601],[0,-4335]],[[234483,269266],[-1322,-45]],[[233161,269221],[-81,1801],[110,2287]],[[244311,276709],[-53,-2457]],[[244258,274252],[-441,-8],[-351,-1304],[-29,-1625],[-344,-1797]],[[243093,269518],[-234,271],[-155,2066]],[[235614,274040],[-175,-434],[-956,-5]],[[271921,275805],[37,-1771],[275,-2845]],[[272233,271189],[-961,-1642]],[[271272,269547],[-98,1564],[-427,592]],[[270747,271703],[140,2716],[-310,2308]],[[250260,277428],[-1,-6571]],[[250259,270857],[-1135,-31]],[[249124,270826],[0,2438],[-150,4359]],[[246829,276146],[-140,-526],[-66,-2601],[-184,267],[-97,-2398]],[[246342,270888],[-114,-1301],[-411,-1386],[-315,625]],[[245502,268826],[-2,115]],[[245500,268941],[-62,69]],[[245438,269010],[-314,191],[117,1426]],[[245241,270627],[337,223],[252,2167],[-256,411],[68,1606],[-306,123],[53,2007]],[[263154,276354],[-211,-1787],[-562,-838]],[[262381,273729],[-81,2471]],[[200182,262669],[-2540,1]],[[273045,270911],[-142,208],[-547,-2636]],[[272356,268483],[-123,2706]],[[261094,274325],[1,-3262]],[[261095,271063],[-1173,-45],[-180,787]],[[259742,271805],[-289,2711]],[[249124,270826],[0,-3253]],[[249124,267573],[-1393,50]],[[247731,267623],[-42,2293],[500,4219]],[[240635,275139],[6,-4082],[-110,-1625]],[[240531,269432],[-347,19]],[[240184,269451],[-691,9]],[[239493,269460],[-75,1632],[-597,-3]],[[267488,274573],[-96,548],[-482,-3351]],[[266910,271770],[-422,2405]],[[252770,272444],[-27,-1509]],[[252743,270935],[-1345,-64]],[[251398,270871],[-1,6567]],[[251398,270871],[-1139,-14]],[[247731,267623],[-1360,-26]],[[246371,267597],[-29,3291]],[[245500,268941],[-62,69]],[[245241,270627],[-1027,-144]],[[244214,270483],[-102,1786],[146,1983]],[[263996,274405],[-106,-4613]],[[263890,269792],[-3,-599]],[[263887,269193],[-267,9],[-340,1832]],[[263280,271034],[-27,-2]],[[263253,271032],[60,5623]],[[270747,271703],[-157,186]],[[270590,271889],[-578,744]],[[227151,277038],[5,-4409]],[[227156,272629],[-469,-48],[-452,-1537]],[[226235,271044],[-342,5178]],[[228628,276926],[2,-5287]],[[228630,271639],[-1087,-1713]],[[227543,269926],[-107,-742],[-280,1303]],[[227156,270487],[0,2142]],[[230396,273374],[193,-555]],[[230589,272819],[-1430,-4745]],[[229159,268074],[-124,-407],[-405,3972]],[[255415,271629],[-143,-188],[4,-2272],[-284,-8],[4,-2362],[-126,-263]],[[254870,266536],[-1130,-22]],[[253740,266514],[-126,1159],[208,569],[68,3760],[248,477]],[[263253,271032],[-736,-37]],[[262517,270995],[98,588],[-330,1226],[96,920]],[[217239,276454],[-26,-8133]],[[217213,268321],[-224,-2]],[[216989,268319],[-1200,8]],[[215789,268327],[18,8148]],[[218671,276477],[-13,-8190]],[[218658,268287],[-436,22]],[[218222,268309],[-1009,12]],[[220103,276430],[-15,-8194]],[[220088,268236],[-232,-5]],[[219856,268231],[-1198,56]],[[215789,268327],[-226,-12]],[[215563,268315],[-1212,-2]],[[214351,268313],[0,8125]],[[214351,268313],[-211,4]],[[214140,268317],[-1427,-23]],[[212713,268294],[-739,24]],[[265511,272113],[-316,-756],[-183,-1475]],[[265012,269882],[-430,1091]],[[264582,270973],[-206,1238],[4,1413]],[[221544,276278],[-6,-8068]],[[221538,268210],[-230,15]],[[221308,268225],[-1220,11]],[[224760,276248],[1,-3983],[-213,-701]],[[224548,271564],[-1040,-3414]],[[223508,268150],[-541,29]],[[222967,268179],[12,8102]],[[226235,271044],[225,-2721]],[[226460,268323],[-392,-1293]],[[226068,267030],[-565,-1869]],[[225503,265161],[-119,1166],[-213,-723],[-623,5960]],[[222967,268179],[-215,-7]],[[222752,268172],[-1214,38]],[[191393,274653],[-1,-12959]],[[191392,261694],[-1985,-98],[1,-3801],[-565,-10],[0,-1773]],[[188843,256012],[-5480,11408]],[[269521,273284],[-686,-1046]],[[268835,272238],[-185,215]],[[262517,270995],[-386,-1847],[16,-1277]],[[262147,267871],[-360,-24],[-203,1604],[-424,-24]],[[261160,269427],[-65,1636]],[[259742,271805],[-223,-444],[6,-3714]],[[259525,267647],[5,-1554],[-546,-20]],[[258984,266073],[-309,-26],[-4,1611],[-286,-16]],[[258385,267642],[-7,3608],[-245,1859]],[[241931,271862],[-1,-2445]],[[241930,269417],[-1399,15]],[[268196,270347],[-120,-1132]],[[268076,269215],[-774,-4371]],[[267302,264844],[-222,1408],[-144,2418]],[[266936,268670],[128,1356],[-154,1744]],[[264582,270973],[-5,-1325],[-687,144]],[[195297,254263],[-3928,9]],[[191369,254272],[23,7422]],[[258385,267642],[-117,-1603]],[[258268,266039],[-1141,-46]],[[257127,265993],[-137,1597]],[[235858,274039],[-247,-3594],[-55,-4247],[247,15]],[[235803,266213],[165,-2415]],[[235968,263798],[-1351,24]],[[234617,263822],[-133,12],[-1,5432]],[[244214,270483],[8,-2105],[-240,-3867]],[[243982,264511],[-59,1623],[-511,-1824],[-304,1856]],[[243108,266166],[-15,3352]],[[266936,268670],[-756,231]],[[266180,268901],[-20,3168]],[[237109,270346],[75,-4024]],[[237184,266322],[-1381,-109]],[[233161,269221],[87,-951]],[[233248,268270],[-1739,-1463]],[[231509,266807],[-6,123]],[[231503,266930],[-162,2702],[-752,3187]],[[269315,266119],[-168,-187]],[[269147,265932],[-152,1040],[-160,5266]],[[269521,273284],[-206,-7165]],[[270012,272628],[143,-2844],[-121,-4705]],[[270034,265079],[-575,986]],[[269459,266065],[-144,54]],[[238301,271119],[215,-817],[-12,-1665],[522,-3202]],[[239026,265435],[-240,-345],[-1,-1274]],[[238785,263816],[-1220,-19]],[[237565,263797],[-381,2525]],[[231503,266930],[-1231,-4027]],[[230272,262903],[-620,348]],[[229652,263251],[-493,4823]],[[227156,270487],[-696,-2164]],[[270590,271889],[127,-3675],[608,-624]],[[271325,267590],[-175,-616]],[[271150,266974],[-403,-4200]],[[270747,262774],[-221,704]],[[270526,263478],[-177,1370],[-315,231]],[[253740,266514],[-294,-3348],[252,-2067]],[[253698,261099],[-1047,-27]],[[252651,261072],[-25,3649]],[[252626,264721],[117,6214]],[[269147,265932],[-285,-745]],[[268862,265187],[-233,1642],[-442,1367],[-111,1019]],[[261160,269427],[-51,-2452],[-440,-328],[-199,-2179]],[[260470,264468],[-371,2],[3,1617],[-263,0],[-26,1492],[-288,68]],[[266180,268901],[-4,-1685]],[[266176,267216],[-979,51]],[[265197,267267],[-185,2615]],[[271272,269547],[173,-1187]],[[271445,268360],[-120,-770]],[[243108,266166],[-323,-822]],[[242785,265344],[-856,1]],[[241929,265345],[1,4072]],[[257127,265993],[-143,-9],[6,-2440]],[[256990,263544],[-1655,-26]],[[255335,263518],[-332,-39],[-133,3057]],[[229652,263251],[-593,-1974]],[[229059,261277],[-293,2871],[-669,-2188]],[[228097,261960],[2,1607],[-452,1892],[172,815],[-272,611],[-4,3041]],[[225503,265161],[144,-1411],[-855,-2936]],[[224792,260814],[-81,738],[-490,-430]],[[224221,261122],[-713,7028]],[[245502,268826],[-127,-1816],[-313,-1032],[-167,-1704]],[[244895,264274],[-271,-484],[77,-1751]],[[244701,262039],[-172,-288]],[[244529,261751],[-462,332]],[[244067,262083],[-85,2428]],[[272356,268483],[444,-3810]],[[272800,264673],[248,-709],[-50,-2336],[-442,1524]],[[272556,263152],[-244,2510],[-518,507],[-349,2191]],[[239493,269460],[179,-3272],[-322,2],[-3,-1287],[-321,532]],[[273103,263918],[241,-619],[-261,-1765],[-124,1738],[144,646]],[[273429,267956],[229,-1122],[-211,-969],[-18,2091]],[[273121,268886],[209,-711],[80,-2196],[219,-966],[-158,-953],[-438,1416],[-233,-803]],[[263887,269193],[-34,-3123]],[[263853,266070],[-27,-877],[-408,18]],[[263418,265211],[-156,2]],[[263262,265213],[18,5821]],[[263262,265213],[-700,78]],[[262562,265291],[-449,1252]],[[262113,266543],[34,1328]],[[265197,267267],[107,-2251]],[[265304,265016],[-1157,121],[0,-795]],[[264147,264342],[-294,1728]],[[252626,264721],[-415,-683],[-803,-568]],[[251408,263470],[-10,7401]],[[246371,267597],[-50,-4881]],[[246321,262716],[-773,1409],[-653,149]],[[251408,263470],[-92,-39]],[[251316,263431],[-1040,-418]],[[250276,263013],[-17,7844]],[[250276,263013],[-235,-98]],[[250041,262915],[-702,-302]],[[249339,262613],[-25,4964],[-190,-4]],[[228097,261960],[-913,-2937]],[[227184,259023],[-236,2294],[-214,-718]],[[226734,260599],[-666,6431]],[[268862,265187],[-531,-2010]],[[268331,263177],[-444,-557]],[[267887,262620],[-507,1246]],[[267380,263866],[-78,978]],[[241929,265345],[-139,-2434]],[[241790,262911],[-715,10],[-2,-1631],[-985,-12]],[[240088,261278],[65,2739],[214,1718],[-183,3716]],[[240088,261278],[187,-1588],[292,-495],[230,-1479]],[[240797,257716],[-541,-2780],[-190,-402]],[[240066,254534],[-710,332]],[[239356,254866],[-1,3236],[-281,-4],[-4,3279],[-287,5],[2,2434]],[[262113,266543],[-202,-2490],[-1,-1443]],[[261910,262610],[38,-331]],[[261948,262279],[-247,-1122],[-557,79],[-1,-1623]],[[261143,259613],[-925,-27]],[[260218,259586],[239,3100],[13,1782]],[[234617,263822],[-104,-1184],[69,-2704],[234,-2043]],[[234816,257891],[-383,-1878]],[[234433,256013],[-270,786],[-111,1768],[-372,550]],[[233680,259117],[-7,1203],[-351,1944],[-118,1559],[44,4447]],[[267380,263866],[-842,-12]],[[266538,263854],[-369,127]],[[266169,263981],[7,3235]],[[273082,261033],[-133,-2580],[-38,2027],[171,553]],[[272823,261759],[40,-1068],[-396,-433]],[[272467,260258],[-390,846]],[[272077,261104],[-418,1229],[-343,2022],[41,1842],[-207,777]],[[272556,263152],[267,-1393]],[[218222,268309],[-10,-7269]],[[218212,261040],[-111,-2492],[-1121,-108]],[[216980,258440],[1,1757]],[[216981,260197],[8,8122]],[[216981,260197],[-1417,9]],[[215564,260206],[-1,8109]],[[215564,260206],[-1425,-1]],[[214139,260205],[1,8112]],[[214139,260205],[-86,1]],[[214053,260206],[-1251,7]],[[212802,260213],[-89,1]],[[212713,260214],[0,8080]],[[212713,260214],[-1472,-6]],[[211241,260208],[3,6496]],[[219856,268231],[-1,-7250]],[[219855,260981],[-1643,59]],[[233680,259117],[-1054,-950],[-246,-706]],[[232380,257461],[15,2779],[-147,-648]],[[232248,259592],[-249,2566],[-298,601],[38,1653],[-230,2395]],[[222752,268172],[-19,-11396]],[[222733,256776],[-311,-1069],[-354,1218],[-198,-944],[-249,1262]],[[221621,257243],[-334,1575]],[[221287,258818],[21,9407]],[[221287,258818],[-1085,65]],[[220202,258883],[-344,21],[-3,2077]],[[224221,261122],[-255,-235],[-56,-1438],[-589,-2355]],[[223321,257094],[-276,-434]],[[223045,256660],[-312,116]],[[260218,259586],[-114,-1]],[[260104,259585],[-994,-4]],[[259110,259581],[-7,3224],[-142,-9],[23,3277]],[[259110,259581],[-134,-3309]],[[258976,256272],[-231,290],[-9,1358],[-330,-1424],[-4,1398],[-276,-34]],[[258126,257860],[-1,2419],[142,7],[1,5753]],[[247731,267623],[274,-3564],[26,-1966]],[[248031,262093],[-342,-655]],[[247689,261438],[-106,-329],[-1263,-25]],[[246320,261084],[1,1632]],[[249339,262613],[-284,-111]],[[249055,262502],[-612,-242]],[[248443,262260],[-412,-167]],[[266169,263981],[-1,-930],[-528,-12]],[[265640,263039],[-382,825]],[[265258,263864],[46,1152]],[[225328,255832],[-536,4982]],[[226734,260599],[-1152,-3886]],[[225582,256713],[-254,-881]],[[272077,261104],[-207,-2290],[-271,-705]],[[271599,258109],[-852,4665]],[[232248,259592],[-1251,-3816]],[[230997,255776],[-725,7127]],[[209299,266698],[-217,-16660]],[[209082,250038],[-2270,-8220]],[[206812,241818],[27,3208],[-30,21680]],[[206812,241818],[-175,-639]],[[206637,241179],[-655,3287],[-500,980],[-452,2433],[-137,1784],[-466,1523],[-267,2269],[-357,1834]],[[203803,255289],[-2,11451]],[[203803,255289],[-617,1714],[-455,4718],[-407,953]],[[211241,260208],[-789,7]],[[210452,260215],[-226,1786],[-294,419],[-120,2210],[-127,-359],[-263,2428]],[[210452,260215],[261,-433],[176,-3774],[535,32],[186,-1031],[512,-16]],[[212122,254993],[-1599,-11260]],[[210523,243733],[-1441,6305]],[[262562,265291],[-9,-2748],[-135,18]],[[262418,262561],[-508,49]],[[255335,263518],[-42,-2446],[-142,-14],[4,-2674],[-156,-741],[132,-1479],[-365,-603],[-167,-1944]],[[254599,253617],[-506,-1945]],[[254093,251672],[-63,1221],[229,2447],[-147,-275],[95,2172],[-484,2051],[-25,1811]],[[237565,263797],[235,-2648],[-112,-2155]],[[237688,258994],[-417,-313]],[[237271,258681],[-296,953],[-858,614]],[[236117,260248],[-149,3550]],[[244067,262083],[-416,-314],[-35,-1776],[-277,-170],[-1,-3574],[-157,-1570],[81,-1640]],[[243262,253039],[-258,530],[-178,-1296],[-48,1873]],[[242778,254146],[7,11198]],[[269459,266065],[0,-2384],[-247,7],[-4,-2375]],[[269208,261313],[-295,-710]],[[268913,260603],[-583,-23],[1,2597]],[[264147,264342],[212,-842],[-100,-3841]],[[264259,259659],[-425,-12]],[[263834,259647],[-269,0]],[[263565,259647],[-156,2805],[9,2759]],[[270526,263478],[-236,-999],[1,-5623]],[[270291,256856],[-262,1105]],[[270029,257961],[-821,3352]],[[258126,257860],[-564,-26]],[[257562,257834],[-384,25],[-188,2000],[3,2240]],[[256993,262099],[-3,1445]],[[263565,259647],[-754,-29]],[[262811,259618],[-348,-20],[-45,2963]],[[242778,254146],[-219,178]],[[242559,254324],[-305,2653]],[[242254,256977],[-195,277],[-241,2436],[-28,3221]],[[265258,263864],[-181,-812],[-39,-2866]],[[265038,260186],[-69,-497],[-710,-30]],[[252692,256194],[-1093,-40]],[[251599,256154],[-283,-4]],[[251316,256150],[0,7281]],[[252651,261072],[41,-4878]],[[246320,261084],[-2,-1627]],[[246318,259457],[-1160,-19]],[[245158,259438],[-408,1159],[-49,1442]],[[227703,254041],[-519,4982]],[[229059,261277],[365,-3474]],[[229424,257803],[-1329,-4514]],[[228095,253289],[-182,-662],[-210,1414]],[[266538,263854],[73,-1664]],[[266611,262190],[-131,-3052]],[[266480,259138],[-414,-483]],[[266066,258655],[-411,1022],[-15,3362]],[[267887,262620],[-7,-2008]],[[267880,260612],[-912,139],[0,1414],[-357,25]],[[266066,258655],[-13,-4419]],[[266053,254236],[-962,80]],[[265091,254316],[4,2024]],[[265095,256340],[-57,3846]],[[236117,260248],[245,-1198],[-44,-6786]],[[236318,252264],[-313,1644],[-176,1815],[-632,881],[-381,1287]],[[239356,254866],[-430,-7],[-146,-1627],[-240,7],[-65,-1704]],[[238475,251535],[-133,-175]],[[238342,251360],[-234,2339],[-88,3955],[-332,1340]],[[271599,258109],[109,-1596]],[[271708,256513],[-299,-2289]],[[271409,254224],[-861,806]],[[270548,255030],[-29,1448],[-228,378]],[[256993,262099],[-405,-644],[-234,-1414],[-90,-2314],[-724,-4799]],[[255540,252928],[-525,-297]],[[255015,252631],[-416,986]],[[251316,256150],[-565,11]],[[250751,256161],[-705,0]],[[250046,256161],[-5,6754]],[[229993,252193],[-569,5610]],[[230997,255776],[-230,-1047]],[[230767,254729],[-774,-2536]],[[268913,260603],[84,-3784]],[[268997,256819],[-88,-1964]],[[268909,254855],[-525,11],[-61,691],[-839,350]],[[267484,255907],[-15,965]],[[267469,256872],[411,3740]],[[242254,256977],[-1212,-1624],[-245,2363]],[[250046,256161],[-146,0]],[[249900,256161],[-376,-7]],[[249524,256154],[-46,1959],[-425,1319],[2,3070]],[[262811,259618],[-6,-2207]],[[262805,257411],[-584,-282],[-45,579]],[[262176,257708],[-228,4571]],[[262176,257708],[-117,-3881]],[[262059,253827],[-919,118]],[[261140,253945],[3,5668]],[[249524,256154],[-188,2]],[[249336,256156],[-474,-1],[3,-814],[-378,9]],[[248487,255350],[-44,6910]],[[267469,256872],[-538,70]],[[266931,256942],[-451,2196]],[[244529,261751],[-61,-2123],[-259,460],[229,-1495],[-276,-598],[18,-3120],[-205,749],[175,-2364],[-388,-522],[182,-1099]],[[243944,251639],[-102,-1383],[173,-932],[-202,-1255]],[[243813,248069],[-73,-541]],[[243740,247528],[12,447]],[[243752,247975],[-182,929]],[[243570,248904],[129,2677],[-437,1458]],[[248487,255350],[-226,-1014]],[[248261,254336],[-568,265]],[[247693,254601],[-4,6837]],[[257562,257834],[96,-2877],[-99,-436],[7,-2858]],[[257566,251663],[-178,1282],[-1848,-17]],[[245158,259438],[-12,-4903]],[[245146,254535],[-217,450],[-648,-955],[-50,-1687],[-287,-704]],[[191369,254272],[-1713,-9],[-813,1749]],[[225328,255832],[-812,-3459]],[[224516,252373],[-177,743],[-194,2530],[-443,142],[-381,1306]],[[247693,254601],[-46,0]],[[247647,254601],[-802,-13]],[[246845,254588],[-237,-7]],[[246608,254581],[0,4882],[-290,-6]],[[270029,257961],[-328,-1873],[-203,-243]],[[269498,255845],[-501,974]],[[226342,249372],[-760,7341]],[[227703,254041],[-1361,-4669]],[[220202,258883],[-12,-9165]],[[220190,249718],[-1597,-26]],[[218593,249692],[-12,8143],[-1602,88]],[[216979,257923],[1,517]],[[254093,251672],[-73,-563]],[[254020,251109],[-140,-343],[-854,-8],[-285,-550]],[[252741,250208],[-49,5986]],[[272538,253809],[-20,-18]],[[272518,253791],[20,18]],[[272206,254211],[-81,132]],[[272125,254343],[81,-132]],[[272895,258076],[-221,-2947],[-140,1837],[361,1110]],[[272467,260258],[359,-497],[69,-954],[-372,-537],[-14,-3438],[142,-738],[-530,300]],[[272121,254394],[-413,2119]],[[232380,257461],[233,-3410],[-191,-919],[-110,-3298]],[[232312,249834],[-586,-39],[-742,-2204]],[[230984,247591],[-246,5282],[29,1856]],[[215564,260206],[-1,-10640]],[[215563,249566],[-1463,119]],[[214100,249685],[-47,10521]],[[214100,249685],[-245,18]],[[213855,249703],[-113,1973],[-687,2489],[-254,-616]],[[212801,253549],[1,6664]],[[237271,258681],[4,-1923],[-170,-1045],[14,-5133]],[[237119,250580],[-252,-651]],[[236867,249929],[-549,2335]],[[216979,257923],[-19,-8365]],[[216960,249558],[-1397,8]],[[212801,253549],[-158,-489],[-521,1933]],[[265095,256340],[-399,-66]],[[264696,256274],[-805,-62]],[[263891,256212],[-57,3435]],[[263891,256212],[-578,-53]],[[263313,256159],[-423,45],[-85,1207]],[[261140,253945],[-191,-1283],[-485,462],[-142,-1410]],[[260322,251714],[-224,22]],[[260098,251736],[6,7849]],[[260098,251736],[-1120,-77]],[[258978,251659],[-2,4613]],[[246608,254581],[-1058,-7],[-230,-518]],[[245320,254056],[-174,479]],[[238342,251360],[-866,-337]],[[237476,251023],[-357,-443]],[[266931,256942],[-267,-2339]],[[266664,254603],[-217,-427]],[[266447,254176],[-394,60]],[[234433,256013],[126,-728]],[[234559,255285],[-1328,-6123]],[[233231,249162],[-511,-2377]],[[232720,246785],[-160,1025],[32,1830],[-280,194]],[[221621,257243],[-4,-7538]],[[221617,249705],[-1427,13]],[[270548,255030],[135,-1217],[-559,-1966],[-260,400]],[[269864,252247],[-282,1361],[-84,2237]],[[258978,251659],[17,-3690]],[[258995,247969],[-561,3]],[[258434,247972],[-835,6]],[[257599,247978],[-33,3685]],[[218593,249692],[-762,-76]],[[217831,249616],[-871,-58]],[[236867,249929],[-914,-1226]],[[235953,248703],[-290,477]],[[235663,249180],[-783,1632]],[[234880,250812],[-186,3541],[-135,932]],[[263313,256159],[-12,-3258]],[[263301,252901],[-768,-60],[-14,-3409]],[[262519,249432],[-296,57]],[[262223,249489],[-201,1664],[37,2674]],[[229346,250051],[-672,-2227]],[[228674,247824],[-579,5465]],[[229993,252193],[-647,-2142]],[[242559,254324],[-409,-313],[69,-6633],[-201,52]],[[242018,247430],[-298,679],[-277,-1715],[-308,-248]],[[241135,246146],[-630,-114]],[[240505,246032],[-16,6745],[-423,1757]],[[223045,256660],[-5,-9678]],[[223040,246982],[-1093,-7]],[[221947,246975],[-331,2],[1,2728]],[[224516,252373],[110,-2638],[233,-1105]],[[224859,248630],[-17,-2012]],[[224842,246618],[-1446,-2]],[[223396,246616],[-356,366]],[[267484,255907],[289,-2604],[-29,-1804]],[[267744,251499],[-329,-678],[-91,-2266]],[[267324,248555],[-270,35]],[[267054,248590],[-114,4038],[-276,1975]],[[269864,252247],[216,-986],[1,-1604],[213,-1377]],[[270294,248280],[-791,53],[-15,-4065],[756,-203],[-181,-4018]],[[270063,240047],[-569,247]],[[269494,240294],[-47,4436],[-166,-9],[13,2675],[-283,1029],[-221,3071]],[[268790,251496],[-78,1759],[195,-14],[2,1614]],[[226342,249372],[-12,-642]],[[226330,248730],[-1471,-100]],[[272538,253809],[99,-1698],[-281,-1545],[-109,1279],[124,2060],[147,-114]],[[272121,254394],[4,-51]],[[272206,254211],[155,-844],[-204,-1997],[71,-2599],[-325,802]],[[271903,249573],[-591,1665]],[[271312,251238],[97,2986]],[[264696,256274],[-167,-1562],[-391,-949],[-69,-1200],[-328,-1574],[-68,-1447]],[[263673,249542],[-96,10]],[[263577,249552],[15,3293],[-291,56]],[[265091,254316],[-12,-4797]],[[265079,249519],[-315,12]],[[264764,249531],[-724,18]],[[264040,249549],[-367,-7]],[[252741,250208],[18,-2159]],[[252759,248049],[-1139,-6]],[[251620,248043],[-21,8111]],[[250751,256161],[23,-9759]],[[250774,246402],[-565,1]],[[250209,246403],[-23,1870]],[[250186,248273],[3,6262],[-287,-6],[-2,1632]],[[250186,248273],[-850,-146]],[[249336,248127],[0,8029]],[[251620,248043],[-141,-1624]],[[251479,246419],[-705,-17]],[[249336,248127],[-206,-4]],[[249130,248123],[-300,-5]],[[248830,248118],[0,1358],[-237,-5],[-309,1881],[-23,2984]],[[268790,251496],[-833,9]],[[267957,251505],[-213,-6]],[[234880,250812],[-269,-1952],[-727,-4046]],[[233884,244814],[-145,1530],[-209,-879]],[[233530,245465],[-193,-34],[-106,3731]],[[213855,249703],[556,-1561],[548,-266],[329,-1468],[180,-3868],[116,-913]],[[215584,241627],[-1029,49],[-1,-1089],[-570,23],[-1,-5857],[-623,-16],[0,-4293]],[[213360,230444],[-2433,11417]],[[210927,241861],[-404,1872]],[[271312,251238],[-472,-2257]],[[270840,248981],[-349,502],[-197,-1203]],[[245320,254056],[101,-734],[-2,-5262]],[[245419,248060],[-324,3]],[[245095,248063],[-1282,6]],[[240505,246032],[-431,-220]],[[240074,245812],[-1233,93],[-383,-267]],[[238458,245638],[138,2981],[-121,2916]],[[230984,247591],[-297,-1132],[-306,-3133],[-307,-918]],[[230074,242408],[-150,659]],[[229924,243067],[-83,1791],[-230,1423],[-92,2593],[-173,1177]],[[267054,248590],[-504,85]],[[266550,248675],[-277,858]],[[266273,249533],[181,2384],[-7,2259]],[[246845,254588],[1,-6513]],[[246846,248075],[-54,0]],[[246792,248075],[-721,-7]],[[246071,248068],[-652,-8]],[[247647,254601],[2,-6508]],[[247649,248093],[-244,-5]],[[247405,248088],[-559,-13]],[[248830,248118],[-1181,-25]],[[243570,248904],[-74,-473]],[[243496,248431],[-155,-910],[-26,-2268]],[[243315,245253],[-1107,9]],[[242208,245262],[-190,2168]],[[266273,249533],[3,-822],[-452,71]],[[265824,248782],[-746,72],[1,665]],[[228674,247824],[-526,-1799],[-157,-2555]],[[227991,243470],[-863,2198],[-567,666]],[[226561,246334],[-231,2396]],[[255287,234666],[-1,83]],[[255286,234749],[1,-83]],[[255015,252631],[47,-4598]],[[255062,248033],[-100,-2449],[293,-2293],[342,-1258],[-72,-3553]],[[255525,238480],[118,-709],[-472,-3244],[-776,-834],[-363,138],[618,1003],[-446,2270],[13,2456],[-99,3217],[-227,556]],[[253891,243333],[-3,423]],[[253888,243756],[51,358]],[[253939,244114],[171,4893],[-90,2102]],[[262223,249489],[73,-1396]],[[262296,248093],[-1354,-67]],[[260942,248026],[7,3775],[-627,-87]],[[257599,247978],[-271,46]],[[257328,248024],[-1052,38]],[[256276,248062],[-1214,-29]],[[263577,249552],[-524,-184]],[[263053,249368],[-534,64]],[[260942,248026],[-27,-3]],[[260915,248023],[-1496,-67]],[[259419,247956],[-424,13]],[[238458,245638],[-203,-3553],[-301,-2557],[116,-1802],[-122,-774]],[[237948,236952],[-67,-1096],[157,-1846]],[[238038,234010],[-535,-29]],[[237503,233981],[99,13117],[-126,3925]],[[269494,240294],[-114,46]],[[269380,240340],[-346,136]],[[269034,240476],[-18,2136],[-493,493],[-222,1907],[-346,637]],[[267955,245649],[2,5856]],[[267955,245649],[-134,-371]],[[267821,245278],[-66,1821],[-380,53],[-51,1403]],[[253891,243333],[-3,423]],[[253939,244114],[-283,-5327],[-10,-2293],[-805,175]],[[252841,236669],[-46,6489]],[[252795,243158],[-36,4891]],[[272307,246842],[-203,-3711],[-81,2743],[284,968]],[[271903,249573],[306,-2479],[-160,-4072],[-292,-203]],[[271757,242819],[-831,2065]],[[270926,244884],[0,3896],[-86,201]],[[237503,233981],[-603,-19]],[[236900,233962],[97,1937],[-94,1644],[125,1714]],[[237028,239257],[58,2123],[-200,796],[-363,6258],[-570,269]],[[235663,249180],[-268,-876],[313,-9030]],[[235708,239274],[21,-669],[-542,-18]],[[235187,238587],[-329,77]],[[234858,238664],[56,883],[-384,657],[-240,1922],[-168,-357],[-46,2247],[-192,798]],[[229924,243067],[-953,-3232]],[[228971,239835],[-534,-1857]],[[228437,237978],[-325,5186],[-121,306]],[[209922,237143],[-279,-6],[-3006,4042]],[[210927,241861],[-1005,-4718]],[[232720,246785],[-683,-1234]],[[232037,245551],[-850,-766]],[[231187,244785],[-203,2806]],[[221947,246975],[2,-4279]],[[221949,242696],[-1761,-8]],[[220188,242688],[2,7030]],[[220188,242688],[-2353,-80]],[[217835,242608],[-4,7008]],[[217835,242608],[0,-7787]],[[217835,234821],[-2223,5]],[[215612,234826],[279,1284],[-229,1216],[263,2566],[-18,1121],[-323,614]],[[264040,249549],[-12,-7240]],[[264028,242309],[-1345,402]],[[262683,242711],[300,3247],[70,3410]],[[264764,249531],[114,-3092],[-22,-4394]],[[264856,242045],[-554,176]],[[264302,242221],[-274,88]],[[267013,241274],[-88,36]],[[266925,241310],[88,-36]],[[266550,248675],[98,-2368],[249,-1172],[-274,-444],[-99,-1221],[356,-2142]],[[266880,241328],[-709,260]],[[266171,241588],[-368,135]],[[265803,241723],[21,7059]],[[265803,241723],[-735,253]],[[265068,241976],[-212,69]],[[262683,242711],[-3,0]],[[262680,242711],[-384,5382]],[[270926,244884],[-366,-1369],[-37,-1852],[123,-1709],[-124,-3745]],[[270522,236209],[-335,-64],[-107,1022],[-17,2880]],[[237028,239257],[-1320,17]],[[233530,245465],[-89,-6609]],[[233441,238856],[-666,83],[-646,2258]],[[232129,241197],[-92,4354]],[[244740,241602],[-76,124]],[[244664,241726],[-138,1864],[-596,-161],[213,1884],[-298,-207],[-105,2422]],[[245095,248063],[-355,-6461]],[[243752,247975],[-256,456]],[[226561,246334],[-375,-2253],[-241,-2998]],[[225945,241083],[-211,-3685]],[[225734,237398],[-625,1109]],[[225109,238507],[-245,3502],[174,1353],[-6,1659],[-190,1597]],[[267821,245278],[-326,-1351],[-1,-2847]],[[267494,241080],[-481,194]],[[266925,241310],[-45,18]],[[244664,241726],[-233,-2740],[-196,-267]],[[244235,238719],[-602,5]],[[243633,238724],[-154,6]],[[243479,238730],[63,3797],[-227,2726]],[[250209,246403],[-2,-4881]],[[250207,241522],[-565,12],[0,-2448],[-406,-1072]],[[249236,238014],[-349,2359],[-75,1498]],[[248812,241871],[318,6252]],[[248812,241871],[-426,-21],[-726,869]],[[247660,242719],[-255,5369]],[[242208,245262],[112,-1502],[-109,-3720],[-661,-627],[-124,-1004]],[[241426,238409],[-387,12]],[[241039,238421],[5,125]],[[241044,238546],[92,1719],[-1,5881]],[[262680,242711],[-189,-1959]],[[262491,240752],[-656,31],[-11,-813],[-591,47]],[[261233,240017],[-142,13]],[[261091,240030],[7,4056],[-466,837]],[[260632,244923],[283,3100]],[[247660,242719],[35,-9077]],[[247695,233642],[-97,120]],[[247598,233762],[-55,1170],[-290,-154]],[[247253,234778],[-284,1435],[-176,2313],[-1,3039]],[[246792,241565],[0,6510]],[[255286,234749],[1,-83]],[[256955,236440],[0,-65]],[[256955,236375],[0,65]],[[256232,239600],[16,-2077],[-262,-1642],[-543,-650],[107,1726],[233,526],[-258,997]],[[256276,248062],[-334,-1385],[-81,-3537],[371,-3540]],[[257287,236666],[-332,-291]],[[256955,236440],[333,330]],[[257288,236770],[-1,-104]],[[257328,248024],[-38,-10998]],[[257290,237026],[-1052,-1037],[665,1910],[-226,962],[-136,-1053],[-250,2450],[-59,-658]],[[252795,243158],[-1315,0]],[[251480,243158],[-1,3261]],[[246792,241565],[-957,-12]],[[245835,241553],[167,1301]],[[246002,242854],[-21,4096],[90,1118]],[[257288,236770],[-1,-104]],[[258411,236876],[-1,-356]],[[258410,236520],[1,356]],[[258434,247972],[-17,-10056]],[[258417,237916],[-166,1066],[-410,-2043],[-551,87]],[[246002,242854],[-1125,-260],[-120,-1038]],[[244757,241556],[-17,46]],[[260632,244923],[-55,-1607],[-562,869],[-66,-1633]],[[259949,242552],[-537,37],[7,5367]],[[259949,242552],[-196,-1239],[99,-2458],[-315,-2141]],[[259537,236714],[-9,-2239]],[[259528,234475],[-1118,2045]],[[258411,236876],[815,-134],[-426,1780],[-383,-606]],[[231187,244785],[-45,-4378],[221,-3089],[-139,-1696]],[[231224,235622],[12,736],[-414,181]],[[230822,236539],[-165,3013],[-358,1437],[-319,392],[94,1027]],[[223396,246616],[1,-7872]],[[223397,238744],[-946,25]],[[222451,238769],[-503,-4],[1,3931]],[[225109,238507],[-674,263]],[[224435,238770],[-1038,-26]],[[251480,243158],[0,-1086]],[[251480,242072],[-990,-2],[-283,-548]],[[228437,237978],[-499,-1008]],[[227938,236970],[-97,304]],[[227841,237274],[-634,1522],[-437,-1264],[-263,727],[-303,2900],[-259,-76]],[[234858,238664],[-878,-2778]],[[233980,235886],[-396,1125],[-143,1845]],[[241044,238546],[-396,8],[-9,-943],[-990,-261]],[[239649,237350],[2,3244],[421,9],[2,5209]],[[239649,237350],[0,-383]],[[239649,236967],[-708,-8],[1,1629],[-283,7],[1,-1638],[-712,-5]],[[269034,240476],[-293,114]],[[268741,240590],[-1247,490]],[[232129,241197],[72,-7162]],[[232201,234035],[-806,-383]],[[231395,233652],[-171,1970]],[[243479,238730],[216,-1918],[-535,412],[-328,-898]],[[242832,236326],[-172,208],[-256,-1508]],[[242404,235026],[-95,2568],[-194,809],[-689,6]],[[261091,240030],[-143,0],[-5,-2437],[-1018,73],[-388,-952]],[[271757,242819],[498,-308],[-34,-3431],[-155,926],[-295,-107]],[[271771,239899],[-322,203],[-925,-5549]],[[270524,234553],[-2,1656]],[[252841,236669],[-233,-1277],[-178,1270],[-575,-702],[-371,1452]],[[251484,237412],[-4,4660]],[[230822,236539],[-952,-1550]],[[229870,234989],[-278,410],[-621,4436]],[[245835,241553],[-210,-1460],[-15,-2061],[278,-2141]],[[245888,235891],[-360,-439]],[[245528,235452],[-338,30]],[[245190,235482],[-277,639],[124,2784],[-183,-36],[-97,2687]],[[249236,238014],[203,-4319],[261,-907]],[[249700,232788],[-283,-440]],[[249417,232348],[-471,-67],[-254,868],[-304,-894],[-309,779]],[[248079,233034],[-384,608]],[[264302,242221],[-267,-2074],[-54,-1701],[-693,-1753]],[[263288,236693],[-375,1330],[-2,1097],[-281,268],[-139,1364]],[[222451,238769],[6,-3969]],[[222457,234800],[-1261,75]],[[221196,234875],[-1009,-7]],[[220187,234868],[1,7820]],[[220187,234868],[-1627,-38]],[[218560,234830],[-725,-9]],[[265068,241976],[85,-2795],[-178,-1],[-97,-4623]],[[264878,234557],[-479,557],[-1297,-62]],[[263102,235052],[186,1641]],[[251484,237412],[-1134,-2305],[-141,1298]],[[250209,236405],[-2,5117]],[[266171,241588],[21,-1291],[-370,-1383],[42,-1369],[-274,-2432]],[[265590,235113],[-266,-1103],[-213,-2775]],[[265111,231235],[-234,65]],[[264877,231300],[1,3257]],[[209945,215738],[-23,21405]],[[213360,230444],[686,-3232]],[[214046,227212],[-190,-2193],[-356,427],[-421,-724],[-394,-4187],[-190,-3082],[-26,-2697],[-288,-495],[-452,-3923],[-784,1354],[-338,2103],[-458,443],[-204,1500]],[[245190,235482],[-472,-15],[-483,3252]],[[215612,234826],[-8,-9436]],[[215604,225390],[-988,210],[-570,1612]],[[247253,234778],[-437,-1708],[-207,515]],[[246609,233585],[-184,-840],[-537,3146]],[[267013,241274],[105,-135],[78,-2865],[203,-1638]],[[267399,236636],[-213,-2319]],[[267186,234317],[-334,-5]],[[266852,234312],[-283,815],[-979,-14]],[[250209,236405],[34,-1301],[-543,-2316]],[[268741,240590],[-104,-715],[226,-2818],[-101,-1193],[-315,-129]],[[268447,235735],[-586,1763],[-462,-862]],[[209945,215738],[-500,620],[-308,933],[-500,3116],[-209,112],[-481,2313],[-467,5014],[-27,4955],[-481,3934],[-34,2231],[-301,2213]],[[233980,235886],[192,-3310]],[[234172,232576],[-466,-2513],[-754,2533],[-380,-1252],[-368,-202]],[[232204,231142],[-3,2893]],[[227841,237274],[-343,-3901],[-438,-2646]],[[227060,230727],[-169,-807]],[[226891,229920],[-1289,6177]],[[225602,236097],[132,1301]],[[262491,240752],[-511,-7566]],[[261980,233186],[-763,18]],[[261217,233204],[16,6813]],[[263102,235052],[119,-3212],[349,-2174]],[[263570,229666],[-1288,56],[-50,-791]],[[262232,228931],[-307,1350],[55,2905]],[[269380,240340],[4,-8336]],[[269384,232004],[-309,-3002],[110,-639]],[[269185,228363],[-359,-2063]],[[268826,226300],[-394,1903]],[[268432,228203],[15,7532]],[[272248,234159],[-9,-2722],[-434,369]],[[271805,231806],[-186,99],[91,1895],[-113,886],[151,2028],[471,-633],[29,-1922]],[[272388,234172],[-135,-12]],[[272253,234160],[-2,2672],[137,-2660]],[[271771,239899],[387,-696],[23,-1979],[-488,-402],[1,-1429],[-265,-959],[92,-1411]],[[271521,233023],[-998,-79]],[[270523,232944],[1,1609]],[[270523,232944],[0,-816]],[[270523,232128],[-259,0]],[[270264,232128],[-880,-124]],[[261213,230026],[7,-1939]],[[261220,228087],[-832,3622],[181,87],[319,-1693],[325,-77]],[[261217,233204],[-4,-3056]],[[261213,230148],[-256,-46],[-113,1656],[-199,-122],[-386,1289],[-6,-1143],[-725,2693]],[[229870,234989],[-428,-2537]],[[229442,232452],[-640,-2031]],[[228802,230421],[-160,3871],[-704,2678]],[[236900,233962],[5,-1513]],[[236905,232449],[-444,185],[-185,-1246],[-288,179]],[[235988,231567],[-421,-17],[-380,7037]],[[224435,238770],[11,-6720]],[[224446,232050],[-926,-12]],[[223520,232038],[-1061,-74],[-2,2836]],[[225602,236097],[-347,-5926]],[[225255,230171],[-325,-1870]],[[224930,228301],[-484,3749]],[[245308,223867],[-799,1569],[36,945],[-274,2263]],[[244271,228644],[604,288]],[[244875,228932],[202,-2332],[251,-831],[-20,-1902]],[[244559,230559],[-645,-478],[-352,1661],[-258,-1459],[-367,543]],[[242937,230826],[126,1509],[-231,3991]],[[243633,238724],[170,-1018],[53,-2472],[406,-1498],[39,-2365],[258,-812]],[[245528,235452],[-237,-4825]],[[245291,230627],[-330,-692]],[[244961,229935],[-402,624]],[[235988,231567],[8,-4160]],[[235996,227407],[-1499,-99]],[[234497,227308],[-325,5268]],[[239649,236967],[279,-441],[96,-4141],[287,-11],[13,-1373],[-300,-819]],[[240024,230182],[-368,260],[-1652,-19]],[[238004,230423],[34,3587]],[[241039,238421],[19,-7239]],[[241058,231182],[-312,-1023]],[[240746,230159],[-722,23]],[[242404,235026],[-397,-2818]],[[242007,232208],[-408,-1799],[-382,1123],[-159,-350]],[[268432,228203],[-222,-845]],[[268210,227358],[-526,3596],[-439,645],[-59,2718]],[[228802,230421],[-812,-4931]],[[227990,225490],[-930,5237]],[[231395,233652],[-274,-1644],[130,-1237]],[[231251,230771],[-412,482],[-916,-965]],[[229923,230288],[-71,1867],[-410,297]],[[242937,230826],[-38,-675]],[[242899,230151],[-457,1472],[-435,585]],[[226432,226825],[-346,-1970]],[[226086,224855],[-87,1789],[-744,3527]],[[226891,229920],[-512,-2621],[53,-474]],[[246609,233585],[-25,-1023]],[[246584,232562],[-762,-995],[-135,-866]],[[245687,230701],[-396,-74]],[[266852,234312],[-10,-6935],[145,-1216]],[[266987,226161],[-200,-2815]],[[266787,223346],[-399,936],[-283,2980],[-405,1944],[-589,2029]],[[264877,231300],[-794,-652],[8,-1736],[-255,55]],[[263836,228967],[-266,699]],[[247598,233762],[-477,-3687],[-248,-295],[-10,-2337]],[[246863,227443],[-319,-37]],[[246544,227406],[-91,2727],[131,2429]],[[218560,234830],[1,-12368]],[[218561,222462],[3,-3801],[-131,-3065],[-135,-246]],[[218298,215350],[-586,2295],[-155,1738],[-559,1472],[-109,1937],[-428,2706],[-230,-539],[-627,431]],[[221196,234875],[-9,-4031]],[[221187,230844],[-585,153],[-126,-5326],[-4,-3217]],[[220472,222454],[-273,-4]],[[220199,222450],[-1638,12]],[[223520,232038],[7,-6644]],[[223527,225394],[-721,2115],[-1182,235]],[[221624,227744],[-252,18],[4,3078],[-189,4]],[[268210,227358],[-114,-1168]],[[268096,226190],[-1109,-29]],[[272842,223332],[13,0]],[[272855,223332],[-13,0]],[[272837,223331],[-14,0]],[[272823,223331],[-64,-213]],[[272759,223118],[-215,-625],[-556,-55]],[[271988,222438],[-4,2546]],[[271984,224984],[-177,2427],[99,1442],[-322,1680],[221,1273]],[[272248,234159],[350,-6434],[-19,-1080],[258,-3314]],[[272388,234172],[216,-5656],[-351,5644]],[[238004,230423],[-370,-3472]],[[237634,226951],[-15,2086],[-480,948],[-234,2464]],[[232204,231142],[-439,1364],[375,-6984]],[[232140,225522],[-575,-1123]],[[231565,224399],[-195,1521],[-119,4851]],[[247737,223730],[-329,24],[-91,1327],[-454,2362]],[[247598,233762],[-7,-4806],[112,-2059],[203,-840],[-169,-2327]],[[248125,213951],[70,748]],[[248195,214699],[-70,-748]],[[248079,233034],[-93,-5082],[223,493],[141,-926]],[[248350,227519],[-169,-1242],[4,-1676],[243,-2463],[7,-2735]],[[248435,219403],[-412,1680],[32,1883],[-166,601]],[[247889,223567],[-152,163]],[[262232,228931],[-64,-3572]],[[262168,225359],[-1,-32]],[[262167,225327],[-471,-1559]],[[261696,223768],[-261,-97],[30,2044],[-245,2372]],[[261213,230026],[0,122]],[[249417,232348],[-288,-1735],[-365,-1099]],[[248764,229514],[-363,-244],[-62,-812],[282,-1441]],[[248621,227017],[-271,502]],[[271521,233023],[-209,-1367],[211,19],[-61,-1459],[280,-1434],[17,-2305]],[[271759,226477],[-575,-58],[-356,-1657],[-304,-536]],[[270524,224226],[-1,7902]],[[237634,226951],[-209,-1156],[251,-2060]],[[237676,223735],[-488,-232],[-947,-2205]],[[236241,221298],[-10,6070],[-235,39]],[[234522,223522],[-12,-43]],[[234510,223479],[12,43]],[[234497,227308],[188,-999],[-40,-2779]],[[234645,223530],[-248,563],[-164,2138],[-76,-1074],[334,-1692],[-100,-2415]],[[234391,221050],[-400,-946],[-152,1095]],[[233839,221199],[-128,697],[-451,-247]],[[233260,221649],[-1120,3873]],[[249700,222967],[-38,168]],[[249749,222685],[-49,282]],[[249760,222644],[-11,41]],[[249662,223135],[98,-491]],[[249979,228312],[58,-697]],[[250037,227615],[219,-583],[-251,-835],[182,-672]],[[250187,225525],[-339,382],[73,-1088]],[[249921,224819],[-580,0],[296,-1820]],[[249637,222999],[-31,137]],[[249606,223136],[-17,-11]],[[249589,223125],[-854,2530],[-114,1362]],[[248764,229514],[179,-1315],[188,485],[62,-1578],[278,-40],[74,2258],[374,1265],[60,-2277]],[[246544,227406],[-360,598],[-279,-303]],[[245905,227701],[-207,1351],[-11,1649]],[[229923,230288],[145,-1541]],[[230068,228747],[-848,-6121]],[[229220,222626],[-748,-86]],[[228472,222540],[-488,2914]],[[227984,225454],[6,36]],[[242899,230151],[-21,-3786]],[[242878,226365],[-34,-727],[-509,-1743],[181,-15],[-22,-1563],[-530,-1558],[-885,887]],[[241079,221646],[6,8528],[-339,-15]],[[270524,224226],[-18,-8]],[[270506,224218],[-216,2191],[-389,132],[-406,1491]],[[269495,228032],[311,620],[458,3476]],[[269495,228032],[-310,331]],[[224930,228301],[-647,-3579]],[[224283,224722],[-370,-472]],[[223913,224250],[-386,1144]],[[243094,222650],[507,-1497],[-373,-1379],[-504,1635],[370,1241]],[[244961,229935],[-86,-1003]],[[244271,228644],[-426,-208],[-645,-3854]],[[243200,224582],[80,1698],[-402,85]],[[231565,224399],[21,-2330],[-178,-21]],[[231408,222048],[-241,599]],[[231167,222647],[-226,618],[-208,2751],[-251,273],[-414,2458]],[[245905,227701],[-338,-3548]],[[245567,224153],[-211,-1645]],[[245356,222508],[-48,1359]],[[221624,227744],[-7,-5221]],[[221617,222523],[-1145,-69]],[[227984,225454],[-780,-2865],[-98,357]],[[227106,222946],[-308,893],[-366,2986]],[[241079,221646],[-915,2301],[-643,1244],[-860,-33],[-722,-624],[-263,-799]],[[226086,224855],[-251,-1276],[-617,-1664]],[[225218,221915],[-189,1265],[72,1338],[-818,204]],[[261985,223666],[47,-1027],[-349,843],[302,184]],[[262167,225327],[153,-1172],[-624,-387]],[[263836,228967],[267,-1311],[-501,150],[-1029,-3275],[-405,828]],[[231167,222647],[-368,-2222],[-114,-1978],[-813,-2987]],[[229872,215460],[-51,299]],[[229821,215759],[273,1332],[-648,4505],[-226,1030]],[[245356,222508],[-369,-725]],[[244987,221783],[-279,-1858],[-257,1227],[-396,-628],[-7,2090],[-205,-84],[-21,2141],[-622,-89]],[[270506,224218],[-1,-4598]],[[270505,219620],[-384,-936],[-50,1175],[-543,18]],[[269528,219877],[-418,-93],[-2,1071],[-275,504]],[[268833,221359],[-7,4941]],[[268833,221359],[-783,495]],[[268050,221854],[-36,3076],[82,1260]],[[247232,214624],[0,134]],[[247232,214758],[0,-134]],[[248242,218852],[-13,-1967]],[[248229,216885],[-87,-464]],[[248142,216421],[53,-1722]],[[248125,213951],[-368,-1498],[-122,993]],[[247635,213446],[-258,3162],[-145,-1654]],[[247232,214954],[0,261]],[[247232,215215],[0,103]],[[247232,215318],[15,317]],[[247247,215635],[13,86]],[[247260,215721],[55,1625],[-668,4635],[-413,1833],[-106,1452],[-208,-1075],[-353,-38]],[[247889,223567],[32,-2068],[-180,-981],[501,-1666]],[[222150,222529],[-533,-6]],[[223913,224250],[-73,-520]],[[223840,223730],[-339,-2416],[-158,1139],[-1193,76]],[[249173,217874],[111,-1305],[-399,135],[288,1170]],[[249760,222644],[-11,41]],[[249749,222685],[-49,282]],[[249637,222999],[-31,137]],[[249372,222960],[-16,-479]],[[249356,222481],[-255,-314],[203,-1847],[362,-1191],[-111,-778],[530,-230],[375,-1687],[141,832],[308,-3040],[-51,-1666],[-254,-1183],[-172,580],[-446,-2430],[421,3793],[-138,1557],[-368,-602],[-133,2619],[-305,1183],[-511,-71],[-60,606]],[[248892,218612],[-160,571]],[[248732,219183],[-297,220]],[[249589,223125],[-217,-165]],[[234522,223522],[-12,-43]],[[236241,221298],[-46,-111]],[[236195,221187],[-276,34]],[[235919,221221],[-211,269],[-540,-841],[124,4279],[-301,699],[-199,-2304],[-147,207]],[[227106,222946],[-578,-5085]],[[226528,217861],[-680,52],[-139,1116]],[[225709,219029],[23,814],[-514,2072]],[[271988,222438],[9,-2348],[241,-1825]],[[272238,218265],[-390,-928]],[[271848,217337],[-291,1592],[-5,2835],[246,455],[-91,1669],[277,1096]],[[271759,226477],[138,-1241],[-266,-1803],[-119,-4400],[73,-1266]],[[271585,217767],[-204,-13],[-96,2167],[-186,605],[-594,-906]],[[233260,221649],[-107,-2625],[-243,-15],[-79,-1781],[-212,-962],[-275,622],[-264,-1152]],[[232080,215736],[-403,3185],[-269,3127]],[[228472,222540],[-171,-902],[-100,-3633]],[[228201,218005],[-1039,-5115]],[[227162,212890],[-322,2085]],[[226840,214975],[-363,2441],[51,445]],[[247232,214624],[0,134]],[[247232,214954],[0,261]],[[247232,215318],[15,317]],[[244928,217715],[211,-933],[-106,-1819],[-306,1568],[201,1184]],[[246757,215344],[-84,-582]],[[246673,214762],[-79,239]],[[246594,215001],[-200,-1714]],[[246394,213287],[-354,101]],[[246040,213388],[-298,518],[376,1325],[-332,809],[-84,1095],[-260,-2776],[-234,825],[15,1953],[-358,1999],[122,2647]],[[247260,215721],[-525,940],[22,-1317]],[[225709,219029],[-760,-6052]],[[224949,212977],[-1107,2536]],[[223842,215513],[-2,8217]],[[223842,215513],[-1,-2983]],[[223841,212530],[-1697,17]],[[222144,212547],[6,9982]],[[272759,223118],[386,-4323]],[[273145,218795],[-132,-298],[16,-2699],[-744,-89],[-47,2556]],[[272837,223331],[-14,0]],[[272855,223332],[309,-4535]],[[273164,218797],[-14,-2]],[[273150,218795],[-308,4537]],[[232080,215736],[-73,-613]],[[232007,215123],[-254,-1542],[-959,-3418]],[[230794,210163],[-922,5297]],[[229821,215759],[-780,-3735]],[[229041,212024],[-105,760]],[[228936,212784],[-735,5221]],[[222144,212547],[-1943,-93]],[[220201,212454],[-2,9996]],[[220201,212454],[-1549,-37]],[[218652,212417],[-301,1679],[-53,1254]],[[235183,217123],[-168,-987],[-897,-3581],[738,3847],[327,721]],[[234707,216436],[-103,255],[-320,-2118]],[[234284,214573],[-491,4941],[46,1685]],[[234391,221050],[302,-994],[-118,-528],[193,-1648],[-61,-1444]],[[236195,221187],[-1084,-2978],[545,2519],[263,493]],[[234284,214573],[-259,-341],[-244,-3555],[-457,-2355],[-295,-718]],[[233029,207604],[-168,76],[-313,2527],[-238,32],[-6,1604],[-193,733],[-104,2547]],[[269528,219877],[10,-5016],[-370,-17],[1,-3162]],[[269169,211682],[-610,-874]],[[268559,210808],[-4,-27]],[[268555,210781],[11,1181],[-229,1768],[-631,424],[-130,2752]],[[267576,216906],[349,3016],[125,1932]],[[271585,217767],[74,-1764]],[[271659,216003],[-47,-5893],[-823,-7]],[[270789,210103],[-996,7]],[[269793,210110],[-470,1716],[-154,-144]],[[226840,214975],[-1288,-6319]],[[225552,208656],[-603,4321]],[[274192,206960],[-19,0]],[[274173,206960],[19,0]],[[274038,206958],[-133,1]],[[273905,206959],[-39,-1]],[[273866,206958],[-329,-17],[-54,-3299]],[[273483,203642],[-228,3745],[-313,-578],[-517,1780]],[[272425,208589],[33,1991],[-410,2090],[-148,1729]],[[271900,214399],[73,2025],[-125,913]],[[273145,218795],[71,-1438],[822,-10399]],[[273164,218797],[-14,-2]],[[228017,208315],[-310,1140],[-438,-2084]],[[227269,207371],[-501,3616],[394,1903]],[[228936,212784],[-919,-4469]],[[272425,208589],[-133,-1746]],[[272292,206843],[-680,-113],[4,-8038]],[[271616,198692],[-837,-36]],[[270779,198656],[10,11447]],[[271659,216003],[241,-1604]],[[230794,210163],[-40,-5356]],[[230754,204807],[-187,-17]],[[230567,204790],[-105,612]],[[230462,205402],[-405,-38]],[[230057,205364],[-229,273]],[[229828,205637],[-8,-8]],[[229820,205629],[-3,31]],[[229817,205660],[-203,3106],[-295,2552],[-278,706]],[[225150,203636],[-1,663],[-1297,-17]],[[223852,204282],[-11,8248]],[[225552,208656],[258,-1776]],[[225810,206880],[-660,-3244]],[[231528,203108],[198,1338],[-526,-948],[-443,705]],[[230757,204203],[-3,604]],[[233029,207604],[-514,-1808],[-270,336],[-408,-941],[-74,-1321],[716,1769],[-1754,-5264],[803,2733]],[[226700,204666],[-381,956],[-250,-542]],[[226069,205080],[-259,1800]],[[227269,207371],[-569,-2705]],[[229828,205637],[-8,-8]],[[229817,205660],[1,-375]],[[229818,205285],[-753,-2127],[109,-1486]],[[229174,201672],[-68,-398],[-684,1260]],[[228422,202534],[5,4145],[-122,1447],[-288,189]],[[223852,204282],[-1657,-123]],[[222195,204159],[-37,-4]],[[222158,204155],[-14,8392]],[[222158,204155],[-1965,141]],[[220193,204296],[8,8158]],[[220193,204296],[2,-8383]],[[220195,195913],[-275,-20]],[[219920,195893],[-228,1634],[-299,5632],[-269,1346],[-138,3111],[-290,2181],[-44,2620]],[[268559,210808],[-4,-27]],[[269793,210110],[391,-3170],[-256,-2281]],[[269928,204659],[-433,507],[-598,-8]],[[268897,205158],[-149,697],[-6,3294],[-183,1659]],[[270779,198656],[-274,-620]],[[270505,198036],[2,3100]],[[270507,201136],[2,765],[-428,978],[-153,1780]],[[228422,202534],[-599,-3072]],[[227823,199462],[-496,1216],[-66,1281],[-333,364],[-228,2343]],[[273483,203642],[-949,-51],[-367,555],[125,2697]],[[273866,206958],[152,-4434],[384,-6703],[460,-6126],[-21,-546]],[[274841,189149],[-1029,-223]],[[273812,188926],[17,9773]],[[273829,198699],[-61,3007],[-285,1936]],[[274038,206958],[411,-2425],[-276,2427]],[[274192,206960],[437,-3794],[144,-2446],[-167,-836],[-12,3069],[-288,-3646],[-72,101],[-11,3804],[-174,605],[153,1506],[-297,1636]],[[226409,193289],[-981,20]],[[225428,193309],[-276,-3]],[[225152,193306],[-2,10330]],[[226069,205080],[-235,-508],[782,-8928],[-25,-123]],[[226591,195521],[-240,-1164],[58,-1068]],[[273829,198699],[-2213,-7]],[[229435,196419],[-34,-86]],[[229401,196333],[30,1032]],[[229431,197365],[4,-946]],[[229989,197536],[539,1175],[-1215,-4810]],[[229313,193901],[29,366]],[[229342,194267],[112,1478],[226,125],[309,1666]],[[230757,204203],[-190,587]],[[229467,200563],[-293,1109]],[[229818,205285],[138,-1955],[593,-2863],[-702,-2229],[-380,2325]],[[230125,204170],[-68,1194]],[[230462,205402],[-19,-1857],[-318,625]],[[227823,199462],[-461,-4167]],[[227362,195295],[-76,-648],[-695,874]],[[270507,201136],[-552,2],[0,-813],[-1166,-24]],[[268789,200301],[108,4857]],[[223852,204282],[-6,-10982]],[[223846,193300],[-1632,-504],[-15,3243]],[[222199,196039],[-4,8120]],[[225152,193306],[-1306,-6]],[[222199,196039],[-2004,-126]],[[229467,200563],[-206,-609],[192,-1783]],[[229453,198171],[-927,-863],[295,-1303]],[[228821,196005],[-626,-2605]],[[228195,193400],[-52,240]],[[228143,193640],[-159,1151],[-622,504]],[[268308,195427],[-9,-1]],[[268299,195426],[9,1]],[[270505,198036],[-139,-2611]],[[270366,195425],[-1519,30]],[[268847,195455],[-374,-12]],[[268473,195443],[316,4858]],[[271616,198692],[0,-1636],[277,2],[94,-2170],[192,-1069],[303,-12],[-262,-959],[585,-3549],[246,-3711]],[[273051,185588],[-1173,63]],[[271878,185651],[-1368,-4]],[[270510,185647],[-6,9777],[-138,1]],[[273812,188926],[-11,-3355]],[[273801,185571],[-750,17]],[[228693,189439],[13,358]],[[228706,189797],[-13,-358]],[[229222,193536],[-326,-2723],[39,1456],[287,1267]],[[228195,193400],[229,-263],[-76,-1380]],[[228348,191757],[-205,1883]],[[228490,190446],[-134,1236]],[[228356,191682],[444,2664],[-7,-1493],[-303,-2407]],[[229313,193901],[29,366]],[[229311,195731],[-328,-1201],[-162,1475]],[[229453,198171],[-22,-806]],[[229401,196333],[-90,-602]],[[223846,193300],[13,-13096]],[[223859,180204],[1,-1601],[-436,25]],[[223424,178628],[-1056,72],[-103,855],[-232,-1006]],[[222033,178549],[-140,1379],[71,2611],[-322,2960],[-327,370],[-463,2627],[-155,3393],[-154,197],[-278,2896],[-345,911]],[[228348,191757],[8,-75]],[[228490,190446],[-3,-28]],[[228487,190418],[-15,-156]],[[228472,190262],[-134,-1330],[-231,1091],[-604,-773]],[[227503,189250],[-412,475],[-458,1287],[12,1137]],[[226645,192149],[-236,1140]],[[268308,195427],[-9,-1]],[[268847,195455],[7,-2885]],[[268854,192570],[-198,-1538],[342,-1334],[-115,-2958],[-287,863],[-300,2065],[148,2365],[29,3410]],[[270510,185647],[-1388,-18]],[[269122,185629],[467,3253],[-294,1838],[49,-1786],[-175,308],[19,1798],[-334,1530]],[[225428,193309],[8,-14809]],[[225436,178500],[-811,49]],[[224625,178549],[3,1455],[-769,200]],[[226645,192149],[-378,-2056],[-22,-4641]],[[226245,185452],[-328,-1],[5,-6979]],[[225922,178472],[-486,28]],[[228250,184343],[-70,94]],[[228180,184437],[70,-94]],[[228402,187096],[249,1941],[-343,-3973],[94,2032]],[[228693,189439],[13,358]],[[228487,190418],[-15,-156]],[[227948,186969],[214,-388],[-199,-2526]],[[227963,184055],[-1437,-47],[-281,1444]],[[227503,189250],[288,8],[157,-2289]],[[275241,183987],[-902,23]],[[274339,184010],[-271,5],[-3,1572],[-264,-16]],[[274841,189149],[341,-3281],[59,-1881]],[[275339,183990],[-31,-2]],[[275308,183988],[31,2]],[[273051,185588],[-176,-2846],[396,-2050],[334,-3158]],[[273605,177534],[-628,-17],[1,-1638],[-277,-12],[2,-1650],[-824,23]],[[271879,174240],[-2,5716]],[[271877,179956],[1,5695]],[[271877,179956],[-1371,-46]],[[270506,179910],[4,5737]],[[268884,180868],[-11,1]],[[268873,180869],[11,-1]],[[270506,179910],[-2,-2429]],[[270504,177481],[-549,21],[3,3302],[-874,53]],[[269084,180857],[-345,1646],[240,735],[143,2391]],[[274339,184010],[6,-6562]],[[274345,177448],[1,-1562],[-580,-3038]],[[273766,172848],[42,3614],[-203,1072]],[[227901,178788],[-37,1]],[[227864,178789],[9,1767],[307,3881]],[[228250,184343],[-349,-5555]],[[227963,184055],[-251,-4476],[-258,-852],[114,2439],[-407,-1627],[-336,1829],[200,-2388],[-320,-89]],[[226705,178891],[-582,-1386]],[[226123,177505],[-201,967]],[[275676,178510],[-28,1]],[[275648,178511],[28,-1]],[[275339,183990],[-31,-2]],[[275241,183987],[343,-5477]],[[275584,178510],[-145,-585]],[[275439,177925],[-1,-410]],[[275438,177515],[-1093,-67]],[[269628,172609],[-7,-1]],[[269621,172608],[7,1]],[[270504,177481],[-3,-3270]],[[270501,174211],[-551,16],[0,-506]],[[269950,173721],[0,-130]],[[269950,173591],[-1,-995],[-273,11]],[[269676,172607],[-254,2093],[-338,6157]],[[268884,180868],[-11,1]],[[224625,178549],[159,-3917],[135,10],[-13,-5059]],[[224906,169583],[-1481,40]],[[223425,169623],[-1,9005]],[[271879,174240],[-1378,-29]],[[223425,169623],[-158,-2060],[-441,-1923]],[[222826,165640],[-276,5054],[-494,3303],[54,2886],[-77,1666]],[[227998,166171],[-12,1]],[[227986,166172],[12,-1]],[[228016,167093],[52,-920]],[[228068,166173],[-55,-2]],[[228013,166171],[-73,1392]],[[227940,167563],[76,-470]],[[228016,167093],[-141,1392]],[[227875,168485],[-65,3026]],[[227810,171511],[31,176]],[[227841,171687],[175,-4594]],[[227841,171687],[-58,4800],[50,1667]],[[227833,178154],[31,635]],[[227901,178788],[-82,-3294],[22,-3807]],[[227619,175770],[-62,-1844],[-237,-795]],[[227320,173131],[22,-2788],[212,-1258],[78,-2921]],[[227632,166164],[-1163,-35],[-267,256]],[[226202,166385],[-78,3149]],[[226124,169534],[-1,7971]],[[226705,178891],[360,-136],[284,-872],[340,626],[-70,-2739]],[[226124,169534],[-934,41]],[[225190,169575],[-284,8]],[[276009,173064],[-4,0]],[[276005,173064],[4,0]],[[275994,173067],[-63,2]],[[275931,173069],[-9,1]],[[275922,173070],[-37,2]],[[275885,173072],[-22,0]],[[275863,173072],[-26,-266],[-2071,42]],[[275438,177515],[375,-1551],[181,-2897]],[[275676,178510],[-28,1]],[[275584,178510],[-145,-585]],[[273766,172848],[-167,-3535],[-1729,10]],[[271870,169323],[9,4917]],[[269903,169694],[11,1]],[[269914,169695],[-11,-1]],[[269628,172609],[-7,-1]],[[269950,173591],[197,-1158],[100,-2595],[-427,921],[-144,1848]],[[271870,169323],[-1374,16]],[[270496,169339],[-105,2644],[304,1032],[-368,4],[-94,-803],[-283,1505]],[[276009,173064],[-4,0]],[[275994,173067],[-63,2]],[[275922,173070],[-37,2]],[[275863,173072],[173,-517],[58,-7156],[-69,-4426]],[[276025,160973],[-424,253],[-1823,-65]],[[273778,161161],[-12,11687]],[[273778,161161],[4,-1335]],[[273782,159826],[-1083,-119],[-9,4915],[-814,-69]],[[271876,164553],[-6,4770]],[[270224,168130],[277,-3878],[-101,-153],[-176,4031]],[[271876,164553],[5,-1689],[-271,-30],[4,-1925],[-522,237]],[[271092,161146],[-65,2473],[-474,1226],[-124,2786],[67,1708]],[[269914,169695],[-11,-1]],[[225190,169575],[-740,-9780]],[[224450,159795],[-249,-323],[-357,2361],[-856,1101],[54,932],[-216,1774]],[[226202,166385],[-130,-3036],[396,-281],[0,-1592]],[[226468,161476],[1,-5174]],[[226469,156302],[-921,-316],[-541,1945],[-163,1244],[-394,620]],[[228232,162657],[-37,0]],[[228195,162657],[37,0]],[[227998,166171],[-12,1]],[[228159,164435],[-24,128]],[[228135,164563],[-188,861]],[[227947,165424],[66,747]],[[228068,166173],[91,-1738]],[[227684,164584],[-2,-1373]],[[227682,163211],[-57,-570]],[[227625,162641],[156,-4]],[[227781,162637],[-161,-1600],[-220,-469],[-932,908]],[[227632,166164],[52,-1580]],[[272238,151333],[13,1]],[[272251,151334],[-13,-1]],[[273782,159826],[19,-5213]],[[273801,154613],[0,-3238]],[[273801,151375],[-1312,-39]],[[272489,151336],[-461,1867],[-228,-193],[-395,1936],[-191,1815],[-122,4385]],[[228287,156177],[-113,-1804],[-350,-1094],[6,-1266],[-410,861],[-516,2813],[-435,615]],[[227781,162637],[266,-4006],[-45,-1341],[285,-1113]],[[228232,162657],[-37,0]],[[276025,160973],[-123,-6439]],[[275902,154534],[-491,-343],[-1072,2],[-538,420]],[[275887,153137],[-181,-2634],[-305,-2456],[-117,-2922],[81,-1855],[-329,-2502]],[[275036,140768],[-16,1]],[[275020,140769],[-149,-433]],[[274871,140336],[3,-77]],[[274874,140259],[-199,601],[-388,-1467],[-445,274]],[[273842,139667],[-42,3489],[1,8219]],[[275902,154534],[-15,-1397]],[[274871,140336],[3,-77]],[[275036,140768],[-16,1]],[[275491,142866],[-401,-4416],[-362,-2015],[523,3742],[240,2689]],[[272251,151334],[-13,-1]],[[273842,139667],[-118,-686],[-512,-438],[-244,1966],[102,2255],[184,-1642],[296,-971],[166,920],[-246,1771],[-349,147],[-259,2833],[-188,3420],[234,599],[-210,869],[-82,-1356],[-127,1982]],[[267576,216906],[-181,85],[-177,1931],[-468,2015],[37,2409]],[[233545,583163],[470,-1],[0,7179],[546,-266],[367,-1412],[396,-7637],[-21,-1976],[288,-1125],[438,-310]],[[245498,568092],[407,1053],[402,-2818],[1697,311],[722,-2325],[297,673],[566,-549],[-1155,-3041],[-1287,-1848],[-816,-1938],[-809,-2999]],[[244050,541402],[0,-11146]],[[242235,539623],[262,1550],[296,-1143],[509,151],[748,1221]],[[245789,538230],[7,-8017]],[[244050,541402],[832,1558],[406,334],[672,1956],[311,-1206],[-365,-2639],[91,-1053],[-208,-2122]],[[245789,538230],[629,1480],[422,-1520]],[[246668,543604],[119,-491],[-601,-1771],[482,2262]],[[254361,554779],[386,-1343],[-682,-275],[51,-770],[-806,-2719]],[[253310,549672],[-198,1604],[-595,-3]],[[252517,551273],[244,1548],[576,1487],[1024,471]],[[252129,567028],[638,1076],[-743,-3451],[-872,-1784],[142,-551],[-582,-1037],[-166,1627],[1583,4120]],[[251344,546531],[128,1308],[718,2354],[11,-1815],[317,-391],[169,-3174]],[[253310,549672],[-511,-4124],[-63,2158],[-506,612],[-29,1852],[316,1103]],[[256406,536544],[1,-6252]],[[256407,530292],[-349,-1],[-4,-3236],[-348,4]],[[253820,544308],[634,-392],[509,-1456],[171,-1720],[674,-4188],[598,-8]],[[257802,530287],[-1395,5]],[[256406,536544],[265,725],[573,-1784],[182,767],[315,-1250],[489,2628],[901,2228],[763,318]],[[258234,522812],[-689,-1999],[491,3712],[-698,206],[-249,-2796],[-468,641],[-361,-1503],[-267,-2116]],[[255011,510600],[-34,-2168],[-371,-346]],[[254679,502703],[345,2967],[570,1286],[473,4865],[330,489],[143,1897],[235,8],[-572,-6085],[-44,-1741],[-319,-1641],[-155,-2072]],[[266291,525882],[-781,768]],[[265510,526650],[490,1336],[-121,1234],[374,-217],[304,-1926],[-266,-1195]],[[264534,537282],[192,-119],[-169,-2149],[-263,1387],[240,881]],[[264771,527003],[-281,50]],[[264490,527053],[-48,-2]],[[264442,527051],[-19,1612],[-346,2],[-1,1612],[-2086,1],[-3,1628],[-347,-5]],[[261640,541399],[788,243],[-207,-1485],[-13,-3740],[568,-816],[557,744],[103,-1308],[702,1641],[226,-1324],[215,-3356],[-110,-1628],[279,286],[140,-1587],[477,-2056],[-594,-10]],[[263518,523913],[579,-847],[-387,-679],[-192,1526]],[[264771,527003],[-281,50]],[[264442,527051],[-1182,1275],[-230,-2015],[-35,-1966],[-708,3125],[-1172,1762],[-254,-167],[-380,-2334],[-589,11]],[[263048,514103],[-754,-309],[-259,1733]],[[262035,515527],[484,1049],[-316,238],[-233,2467],[498,2960],[580,1140]],[[261221,512584],[62,1278],[458,1591],[294,74]],[[260809,522685],[124,-2642],[-358,-487],[234,3129]],[[259619,509895],[-266,698],[189,945],[77,-1643]],[[260516,504530],[-484,-12]],[[259309,504590],[9,2169],[372,1309],[375,-215],[515,4334],[144,-2358],[-222,-3318],[14,-1981]],[[260516,504530],[127,-152],[342,4121],[-150,-4480],[236,2087]],[[266792,512571],[208,-2838],[-312,125],[-6,-2477],[298,-1300]],[[266298,493143],[-35,-2126],[-276,-1071],[-460,39],[-182,-1553]],[[266573,485031],[572,4601],[580,621],[347,1131],[524,-1430],[297,-2969],[77,-2649]],[[269259,474627],[236,-3606],[-157,-1606],[-122,-4884],[-353,82],[-169,1029]],[[268236,461261],[-80,-1234],[-498,-1330],[-248,-2668],[-87,-2522]],[[267323,453507],[-275,1113],[-676,-161]],[[266582,447887],[26,6]],[[266536,447880],[30,6]],[[267323,453507],[-736,-4608],[-57,-1020]],[[276369,283639],[51,-2897],[155,-81],[-317,-2464],[-721,-1619]],[[275274,275950],[-210,1998]],[[278269,287761],[-76,264]],[[276907,282488],[-285,-1501],[-132,340],[309,2769]],[[277898,288714],[355,-1067],[-412,-2026],[-412,-58],[-522,-3075]],[[61945,65039],[-273,273]],[[61672,65312],[273,-273]],[[64909,48285],[736,-2763],[362,-391],[488,-1482],[554,-3197],[-24,-2084],[243,12],[55,-1737],[491,-2285],[-473,-3219],[-429,-1374],[-452,-185],[-605,-2496],[-405,-3858],[-627,2125],[-104,1501],[90,4218],[-292,5440],[-196,1716],[344,2264],[318,3335],[-188,1774],[-22,2014],[136,672]],[[55029,84761],[232,-813],[-50,-4138],[-317,-1725],[-532,857],[-340,1190],[-70,1626],[168,1566],[391,1358],[518,79]],[[53118,80469],[25,-1794],[-232,-683],[-127,-1603],[-75,1953],[409,2127]],[[61945,65039],[564,-356],[-456,-1900],[-525,1011],[-688,11],[160,2281],[672,-774]],[[61752,60573],[247,-292],[244,-1961],[-83,-859],[-351,-533],[-258,3325],[201,320]],[[62905,54516],[44,-1245],[-350,-600],[8,965],[298,880]],[[62814,62496],[341,-2480],[438,902],[263,-353],[321,-1916],[311,-600],[36,-1558],[-161,-1021],[-712,-1317],[-390,412],[-55,3221],[-459,617],[-171,1326],[59,2293],[179,474]],[[58972,75139],[409,-3431],[-19,-1219],[215,22],[315,-3032],[-404,-786],[-271,1419],[-580,-705],[-493,5220],[435,169],[393,2343]],[[996993,632383],[817,-1163],[91,-906],[715,-2639],[-620,1211],[-351,1710],[-879,1732],[227,55]],[[950,635992],[99,-1643],[-281,619],[182,1024]],[[7984,636500],[-23,-2275],[-307,-73],[-67,2101],[397,247]],[[8255,636861],[429,-729],[-176,-971],[-344,386],[91,1314]],[[8792,637399],[78,-1228],[-422,750],[344,478]],[[2944,637533],[354,-28],[110,-1138],[763,-730],[-472,-573],[-85,-1947],[-423,-823],[-299,1293],[443,1084],[-738,1715],[347,1147]],[[5406,633633],[-183,-598],[-329,1038],[-855,-380],[1116,1264],[255,737],[16,1940],[428,-501],[-230,-1193],[22,-1774],[-240,-533]],[[996377,638802],[311,-784],[-244,-853],[-67,1637]],[[7153,639094],[-123,-3160],[551,52],[-111,-1993],[-621,-692],[-248,-1116],[-149,1715],[-276,-2445],[-149,1181],[345,1636],[-141,1180],[574,-355],[-294,2579],[642,1418]],[[999634,639522],[333,-975],[-327,-1865],[-356,430],[-110,1602],[460,808]],[[8394,641129],[361,-843],[-150,-1151],[-356,-113],[145,2107]],[[993962,641501],[134,-1164],[-300,-1591],[4,-1345],[-561,-90],[-112,-1517],[-310,1266],[482,1562],[297,123],[366,2756]],[[15681,641867],[-88,-644],[552,-599],[499,441],[599,-277],[-1373,-851],[-663,468],[-397,-613],[-511,1117],[345,752],[244,-725],[793,931]],[[18717,646240],[354,-1060],[-312,-984],[-542,-452],[87,1790],[413,706]],[[13937,646817],[445,-1871],[-209,-1713],[-378,-563],[294,-1046],[-846,-838],[-954,-1616],[-415,665],[-937,-680],[1038,1800],[664,138],[756,1388],[293,1606],[-346,796],[247,1637],[348,297]],[[983194,648582],[-58,-2897],[-305,734],[-723,157],[686,1802],[400,204]],[[23639,652034],[278,-453],[-114,-1345],[-515,-1145],[-82,1788],[433,1155]],[[26147,655623],[247,-1330],[-168,-813],[-713,1495],[634,648]],[[980647,657671],[765,-147],[436,-2390],[462,-235],[-708,-1136],[-317,775],[-432,-1614],[-470,872],[166,1668],[-517,-336],[77,1140],[-541,-71],[552,1546],[527,-72]],[[28035,654543],[906,4624],[-94,1472],[528,2186],[746,66],[-272,830],[81,1805],[502,2014],[613,648],[608,-970],[-156,-2372],[-1194,-2675],[-517,-3466],[-1751,-4162]],[[36358,673363],[-391,-2467],[-196,1415],[587,1052]],[[34798,676523],[212,-3286],[496,2734],[387,-122],[70,-1818],[-314,-391],[-519,-2697],[580,1301],[182,-1595],[-674,-869],[-156,-1539],[-279,591],[46,-1877],[-401,265],[-1841,-3579],[-466,-1377],[-652,1241],[1054,2460],[1095,1206],[-225,1759],[468,337],[-151,1493],[938,464],[-874,524],[-341,2033],[352,1704],[1013,1038]],[[26198,724966],[755,-263],[-288,-1191],[-467,1454]],[[25148,736553],[-442,-1992],[-390,1137],[832,855]],[[39421,678834],[125,-1114],[-549,-30],[-135,746],[559,398]],[[36826,680387],[730,-1661],[-578,-1781],[-480,150],[-103,2381],[431,911]],[[38083,681762],[-169,-1483],[356,-62],[-384,-1861],[-335,2175],[179,1214],[353,17]],[[45572,685391],[687,-1487],[-645,-37],[-42,1524]],[[46952,694607],[167,-1890],[-230,-1028],[-301,1739],[364,1179]],[[42854,695877],[634,14],[266,-1568],[336,-4089],[372,437],[215,-1478],[-488,52],[-124,932],[-254,-1722],[-453,-779],[-609,441],[-826,-359],[-642,-1585],[-62,-1249],[-802,-1375],[-569,492],[-278,2147],[72,1348],[583,1047],[405,3984],[356,1064],[528,-514],[981,2495],[359,265]],[[48298,698203],[503,-1314],[-281,-971],[-458,2013],[236,272]],[[54720,699114],[34,-1697],[-430,-1611],[396,3308]],[[53769,699716],[-57,-3065],[-690,-2054],[15,3270],[392,-758],[86,2465],[254,142]],[[52387,701641],[20,-2213],[-523,1390],[503,823]],[[51367,702388],[94,-1872],[270,219],[342,-2313],[-186,-1094],[-922,1412],[40,2470],[362,1178]],[[52632,703466],[225,-1137],[-483,351],[258,786]],[[56429,729876],[0,-164]],[[56429,729712],[1,-1271]],[[56430,728441],[-377,-902],[0,-1576],[-688,44],[0,-1691],[-884,0],[-2,-1609],[-853,-47],[-11,-3153],[262,-17],[12,-6313],[-174,-1752],[844,0],[1,-4664]],[[54560,706761],[-221,3583],[-466,487],[-226,-1331],[-227,543],[-128,-1791],[-941,-1953],[-502,-2559],[-203,1961],[-156,-2246],[-321,-160],[-388,1335],[-213,-1550],[-895,-1527],[-527,87],[101,2154],[312,2133],[-634,501],[-315,-1612],[37,-2336],[-533,-3433],[-423,296],[235,-2134],[-319,-953],[-327,1503],[-197,-2494],[-614,575],[-125,3742],[-386,953],[-195,-965],[304,-1471],[136,-4091],[-323,1731],[-86,-1650],[-582,-104],[-228,2389],[-557,961],[-44,-1927],[533,-1473],[-912,-2585],[204,4150],[-78,1484],[292,977],[935,318],[218,2402],[379,1261],[396,-106],[-126,1804],[846,4218],[1241,3632],[1202,1198],[763,131],[637,709],[-430,-1918],[671,-3199],[315,-565],[-272,3532],[663,-283],[157,-1434],[615,-516],[79,1328],[-802,1925],[-146,1183],[588,5125],[1474,4921],[1403,2354],[1201,3895]],[[131840,702693],[477,-1814],[-260,-3591],[-338,3444],[121,1961]],[[133475,712615],[472,-2306],[365,-3908],[-109,-3956],[-237,-2723],[-412,-1256],[-725,1926],[513,3110],[-666,-3077],[-841,2748],[552,2915],[-269,716],[-19,1677],[520,1253],[-148,1905],[1004,976]],[[60957,762087],[579,2152],[206,3039]],[[61742,767278],[1862,118],[1,-5313],[-2648,4]],[[51410,765657],[-524,-4199],[-535,-542],[51,2808],[1008,1933]],[[50362,766039],[-742,-1613]],[[49620,764426],[-84,1634],[826,-21]],[[55886,766355],[508,-1408],[386,-3700]],[[56780,761247],[192,-1494],[-550,-1757],[-437,893],[-941,6038],[-709,1488],[71,1756],[-304,-417],[-190,-2035],[-311,-514],[-283,1932],[-661,238],[-84,2398],[-286,617],[-1293,-3499]],[[50994,766891],[-530,-524]],[[50464,766367],[-1,3048],[447,4],[154,1512],[-5,3289],[475,13],[-1,1619],[475,67],[154,1547],[2,3270],[484,-4],[7,3225],[637,43],[12,3203],[445,89],[14,3067],[183,1579],[477,25],[0,3225],[492,-12],[187,1563],[7,3225],[507,4],[6,1610],[466,16],[198,3194],[2957,4],[8,-1469],[509,-22],[-8,1633],[498,0],[-1,1661],[983,-7],[4,-1637],[3363,-86]],[[64599,804865],[7,-22904],[-456,-40],[-3,-1619],[-951,22],[-1,-1609],[-472,19],[-265,-3261],[-958,50],[-2,-1622],[-474,33],[7,-3299],[225,-22],[8,-3864]],[[61264,766749],[-1094,-1968],[-1643,-2597],[-487,694],[-101,1404],[-594,1396],[199,3649],[-345,-1592],[-443,-553],[-69,-2804],[-801,1977]],[[61034,724293],[684,-546],[-930,-219],[246,765]],[[56429,729876],[0,-164]],[[71634,804882],[114,-1587],[1,-6528],[-371,-12],[-9,-6508],[-349,-18],[4,-6265],[-357,2],[-2,-1646],[-479,-10],[4,-3277],[-474,-9],[9,-1643],[-817,-49],[14,-3240],[-942,-29],[6,-3278],[148,-20],[-1,-6355],[154,-1634],[923,0]],[[69210,762776],[7,-3471],[-452,-1843],[-737,-1056],[-774,-256],[-138,-1018],[-764,-799],[5,-5901],[-324,-916],[-689,-542],[-207,-2415],[-364,-3],[218,-1278],[-365,-813],[-334,533],[-169,-1391],[-664,236],[-689,-3490],[-376,-3218],[1106,-40]],[[63500,735095],[-534,-3229],[-497,991],[-283,-2643],[-165,1250],[-876,-3730],[-514,1840],[-92,-1738],[-418,-1466],[296,-1221],[-476,-272],[-290,1208],[-837,-1435],[-237,-1294],[834,518],[-97,-1512],[-773,886],[47,-1061],[-586,328],[-1007,-4054],[729,1416],[657,-1055],[-889,-5668],[-359,2476],[4,-2388],[-569,564],[-201,-1660],[-1171,-915],[-207,-1647],[-123,1992],[-209,-168],[97,-2311],[-194,-2336]],[[56430,728441],[767,-812],[-200,4018],[209,1634],[848,4197],[641,1528],[417,1983],[585,1663],[449,-1863],[-119,2913],[-249,-206],[-34,2059],[291,6723],[197,1491],[338,172],[-417,2930],[210,2814],[594,2402]],[[61742,767278],[-122,1251],[-356,-1780]],[[64599,804865],[4288,-12],[2747,29]],[[65700,709070],[-505,743],[539,1338],[-34,-2081]],[[70400,724037],[-203,-1087],[-508,-19],[711,1106]],[[68718,724702],[-248,-2013],[-522,-1694],[196,2303],[574,1404]],[[69851,724354],[-436,-1711],[-362,958],[373,1309],[425,-556]],[[72264,735888],[653,-276],[179,-1133],[-749,-602],[-369,-1913],[-212,2137],[498,1787]],[[71588,750055],[467,-1112],[219,-1969],[-712,1537],[26,1544]],[[72121,750653],[752,-1609],[143,801],[402,-896],[-318,-1580],[497,-23],[268,1873],[865,-1804],[-645,-1899],[255,-25],[-10,-2224],[879,340],[-526,-3652],[-487,209],[-629,1356],[-203,-635],[516,-1217],[-217,-2411],[-309,-183],[-529,1368],[-252,-544],[428,-942],[-369,-902],[-532,226],[-639,-2935],[-448,348],[323,-1679],[-994,-4198],[-692,-436],[210,1779],[607,2267],[-321,-122],[144,1970],[-434,-1663],[-185,436],[447,2279],[-692,794],[-670,-678],[120,-1421],[343,1135],[575,213],[-522,-3914],[-671,1507],[-37,3723],[-598,1836],[85,2427],[257,1668],[757,2434],[973,102],[64,-1861],[627,-4463],[-146,2063],[78,2795],[-204,1554],[706,-247],[-927,1791],[7,1470],[588,1559],[420,-1165],[70,-2442],[173,2478],[786,-908],[-90,1984],[526,-1432],[-620,2635],[25,690]],[[72294,752633],[298,-243],[385,-2001],[-772,1279],[-524,168],[436,1600],[177,-803]],[[74768,758553],[203,-1495],[404,602],[-150,-1955],[513,1173],[-64,-2164],[-263,-1096],[-683,1715],[168,-2076],[-474,81],[-333,-1022],[-38,2484],[-167,-2623],[-421,-227],[-1,-1319],[-1063,2147],[-115,1830],[591,-260],[-305,1148],[155,946],[718,-477],[-71,2281],[416,1422],[495,-330],[341,-2521],[144,1736]],[[73815,761335],[866,1186],[-377,-3031],[-416,471],[-73,1374]],[[72145,766667],[-257,-165],[-279,-2562],[-648,-1819],[-613,-91],[-175,-2212],[-343,-44],[106,-2403],[-387,-650],[216,-848],[-603,-2221],[-49,-1387],[-356,1779],[54,-1574],[-325,275],[-478,-1769],[-794,237],[-110,-2260],[-820,-2014],[-130,-1038],[-600,883],[68,-2348],[-395,-579],[8,-1505],[-775,384],[-34,-2432],[-520,654],[-902,-2724],[-22,-1053],[572,813],[-196,-1902],[142,-997]],[[69210,762776],[1368,8],[-4,1620],[1015,10],[-8,2250],[405,-14]],[[71986,766650],[159,17]],[[127092,749125],[-107,-525]],[[126985,748600],[107,525]],[[125289,753706],[-418,-538]],[[124871,753168],[418,538]],[[124853,753145],[-548,-606],[-395,-1297],[-254,1284]],[[123656,752526],[58,1721]],[[123714,754247],[93,682]],[[123807,754929],[27,-1188],[797,113],[222,-709]],[[124293,757146],[750,-2547],[-1015,763],[-163,962],[428,822]],[[124853,768717],[212,-1953],[1164,-2450],[371,-2181],[919,-3383],[-234,-797],[807,-4371]],[[128092,753582],[-944,-4191]],[[127148,749391],[-329,-1604]],[[126819,747787],[-267,-754]],[[126552,747033],[-348,2791],[-601,2743],[-35,3375],[303,711],[-120,1531],[-569,-3645],[-842,2824],[-590,340],[-225,2827],[-376,2538],[-7,5750]],[[123142,768818],[1711,-101]],[[122508,768865],[608,-35]],[[123116,768830],[93,-1237],[-284,-3190],[-328,1968],[-89,2494]],[[125029,711856],[427,56],[-445,-1309],[18,1253]],[[123927,716625],[1,1610]],[[123928,718235],[-1,-1610]],[[130216,719801],[107,-2063],[755,-2315],[-337,-626],[254,-2100],[-618,-805],[-299,1242],[210,718],[-488,1319],[-280,-690],[-164,3076],[325,413],[163,1718],[372,113]],[[129378,721918],[250,-1134],[-116,-2167],[-589,-788],[-541,1882],[182,1807],[814,400]],[[130831,716911],[-489,1839],[73,2204],[-143,1693],[379,-777],[303,-2037],[326,197],[294,-2758],[-436,-1557],[-307,1196]],[[128816,728558],[1033,-4174],[-771,-1663],[-361,265],[62,2359],[-148,3100],[185,113]],[[126153,727422],[-66,1104],[447,-558],[-459,-4949],[-272,-4761],[207,396],[-145,-3602],[-197,615],[-111,3651],[-136,-5807],[-278,1260],[-135,3642],[146,2920],[525,49],[-191,2101],[-591,341],[100,963],[-331,2219],[-28,2428],[338,-758],[185,2186],[563,-1046],[429,-2394]],[[126097,733937],[1280,-1597],[902,-116],[343,-1458],[135,-4906],[-200,-1131],[-500,1925],[-370,3180],[208,-4438],[379,-383],[50,-1490],[-321,-1688],[-659,1031],[14,-897],[-617,-308],[-202,4527],[181,2218],[-303,119],[-132,1682],[-636,2448],[448,1282]],[[130329,738612],[337,-2561],[-337,-2230],[902,-864],[-219,-3192],[699,-1259],[104,-3850],[709,243],[1430,-3886]],[[133954,721013],[215,-2256],[-268,-1574],[-450,60],[-522,-1243],[216,-2328],[-366,57],[-534,1418],[-527,-1313],[-52,-1739],[-416,-1188],[273,-1077],[-70,-1917],[-375,-1020],[-347,1785]],[[130731,708678],[461,1375],[54,2694],[202,40],[-10,3932],[574,625],[-464,526],[-186,2188],[-505,719],[-71,1280],[-436,1390],[254,2614],[-501,-62],[-115,1369],[-778,1724],[-462,2944],[355,-607],[-84,2467],[-160,-1289],[-1098,1537],[-631,1283]],[[127130,735427],[606,1116],[481,-957],[392,2691],[952,1778],[768,-1443]],[[126819,747787],[-267,-754]],[[120135,747679],[-911,-75]],[[119224,747604],[-113,-8]],[[119111,747596],[-67,-5]],[[119044,747591],[175,3135],[916,-3047]],[[118825,752542],[435,-1596],[-323,-3068],[-279,1218],[167,3446]],[[127130,735427],[-12,1829],[1070,643],[-784,626],[-296,2733],[132,1559],[-542,1078],[246,1825],[1153,-2770],[-708,2710],[-429,722],[25,2218]],[[127092,749125],[56,266]],[[128092,753582],[283,-2841],[560,-2991],[879,-6389],[515,-2749]],[[124853,753145],[18,23]],[[125289,753706],[-147,-677],[908,-5880],[23,-2256],[-213,92],[-809,7066],[78,-1904],[-258,510],[590,-4994],[507,-2211],[51,-2144],[-521,218],[645,-2298],[-310,-1473],[-532,1666],[52,-3416],[-404,-716],[-196,-1446],[-545,-1275],[-190,2104],[51,2518],[366,839],[-3,1567],[-686,5962],[70,2065],[-287,4181],[127,722]],[[121078,751604],[-275,-1102]],[[120803,750502],[345,-330],[594,2364],[321,432]],[[122063,752968],[1024,-1345],[153,-1323],[-236,-1608],[-621,1179],[756,-2767],[-774,-493],[-453,1349],[-1420,2800]],[[120492,750760],[-345,-2996]],[[120147,747764],[-1106,4388],[167,2241],[347,-765],[278,1062],[445,-194],[426,1507],[913,-2103],[-539,-2296]],[[121729,756782],[0,-124]],[[121729,756658],[0,124]],[[123714,754247],[-96,-1670],[-340,1775],[-157,4018],[686,-3441]],[[120619,759891],[-327,4038],[-329,1992],[900,1274],[-791,545],[-394,2927],[235,-3862],[-190,-2032],[-886,1580],[-102,2460],[-279,-1505],[-689,1343],[-390,-1137],[761,-460],[670,-1418],[-346,-493],[775,-1580],[-470,-1770],[538,847],[341,-512],[456,-4298],[-640,-1196],[-13,909],[-620,-1129],[-299,1069],[42,-2620],[-717,2665],[-654,322],[-1471,4078],[-935,3744]],[[114795,765672],[1165,1936]],[[115960,767608],[1943,4721],[681,110],[264,1748]],[[118848,774187],[1665,-1619],[530,-1279],[325,-2198],[-479,-4537],[582,-819],[408,-1530],[232,-2152],[-489,-12]],[[121622,760041],[48,-2295],[-405,960],[-824,-873],[178,2058]],[[122913,775799],[-901,-103]],[[122012,775696],[-90,222]],[[121922,775918],[-935,7001]],[[120987,782919],[676,1289],[684,-1897],[571,-2466],[-201,-2534],[196,-1512]],[[121729,756782],[0,-124]],[[123142,768818],[-26,12]],[[122508,768865],[-496,6831]],[[122913,775799],[197,-1218],[722,-594],[60,-1056],[546,-1130],[415,-3084]],[[121922,775918],[-144,-2315],[-359,301],[514,-2662],[-51,-2482],[722,-6540],[-70,-1017],[303,-3963],[-99,-2100],[-512,-56],[-321,1677],[-283,3280]],[[118848,774187],[35,3836],[479,-24],[182,1767],[-318,752],[1118,1161],[643,1240]],[[120877,738496],[390,-2216],[136,-2451],[-166,-1458],[-605,-381],[12,6413],[233,93]],[[122849,727161],[-438,-147],[77,1437],[-514,245],[-60,2351],[447,1679],[-481,1224],[98,2801],[-465,-185],[-451,2135],[588,60],[-327,842],[146,1990],[629,564],[-76,-1197],[394,257],[557,-1676],[491,7],[-82,-2391],[464,-6886],[222,-4906],[-140,-7130]],[[123927,716625],[-394,1362],[-697,5371],[278,1647],[-447,-368],[182,2524]],[[119111,747596],[-67,-5]],[[119342,746836],[-118,768]],[[120135,747679],[12,85]],[[120492,750760],[1454,-3708],[395,-1834],[350,1018],[503,16],[258,-5147],[-689,-337],[-264,1058],[-1794,4643],[718,-3300],[32,-2583],[-442,-1626],[-366,435],[-451,2590],[538,-1592],[-959,3723],[85,790],[-518,1930]],[[40063,839903],[771,-536],[-860,-2772],[-124,3412],[213,-104]],[[40964,844347],[884,-2223],[78,-1915],[441,-2171],[-39,-1740],[-705,2419],[-1774,1536],[91,1825],[445,2301],[579,-32]],[[42066,848667],[903,-976],[562,-1663],[-706,-1821],[-339,-2285],[-563,-2],[-711,2401],[-621,812],[15,1297],[651,1761],[809,476]],[[46154,848898],[568,1],[10,-1610],[528,1],[19,-1676],[523,-12],[-3,-1547],[3176,0]],[[50975,844055],[-396,-2136],[-20,-6445],[-125,-25],[-7,-6437],[383,-5],[-10,-4748],[1058,-39]],[[51858,824220],[180,-1451],[604,-215],[-1456,-2220],[-979,-2588],[-900,-571],[-1213,-1602],[-1235,662],[-494,709],[-1854,-1999],[-659,648],[-690,-2756],[-940,669],[31,-2392],[-390,-2165],[-92,-1943],[-1046,-1523],[-745,776],[-936,-1159]],[[39044,805100],[-171,1112],[663,830],[-1128,3201],[-12,-2176],[-520,182],[-235,2567],[116,849],[-614,571],[-206,2123],[418,1187],[-482,1394],[-545,-1187],[-96,2644],[1074,795],[-527,599],[-413,1924],[1381,582],[-440,3023],[250,2550],[1109,5288],[620,2101],[570,-118],[933,3976],[823,-896],[964,-4031],[-209,4581],[-456,1793],[11,1197],[848,640],[79,1725],[725,1785],[524,-1399],[777,464],[611,2670],[668,1252]],[[46897,791982],[260,-1285],[-269,-665],[9,1950]],[[36192,795959],[181,-1952],[581,363],[562,-947],[-124,-4413],[449,-2402],[-1266,-1162],[-486,-2126],[-685,2000],[-493,-131],[-1055,2670],[-324,-89],[-643,1570],[-207,2198],[273,857],[1285,-624],[56,1282],[1009,2111],[904,-187],[-17,982]],[[17304,799216],[127,-1745],[803,-2158],[617,-183],[448,-1365],[-1029,65],[-1000,3083],[-322,373],[356,1930]],[[39655,805231],[135,-1106],[641,589],[-100,-1482],[648,41],[525,-808],[140,-1889],[-483,-1833],[-425,-534],[212,-1308],[-375,-571],[-318,-2845],[-422,135],[-776,2413],[439,1980],[-611,-774],[-640,997],[1251,2977],[-199,1359],[401,589],[-43,2070]],[[49028,771386],[-724,158],[-208,-907],[-383,2903],[195,2895],[687,2210],[-440,2484],[-274,3082],[-346,1471],[-415,3726],[137,1138],[-768,3115],[394,1259],[285,3791],[-130,577],[-402,-4189],[-433,-1001],[310,-2534],[-69,-3036],[-405,-1085],[-1628,-2447],[-1521,-851],[-1011,789],[-258,2086],[267,429],[-760,1956],[-694,3087],[-88,1177],[383,1597],[-109,1291],[397,379],[-183,1458],[364,50],[277,1573],[410,342],[229,1752],[701,-118],[-15,-3249],[424,240],[608,2498],[-385,1562],[-1050,843],[630,147],[399,1002],[-599,266],[-481,-1345],[-126,3490],[-457,-1833],[194,-1308],[-1242,-569],[-216,1520],[-537,-627],[-175,927],[-743,-457]],[[51858,824220],[3536,-32],[11,1610],[2034,-6],[-4,1618],[4083,202],[1,-1838],[5892,-29],[3388,4],[-14,1716],[962,60],[3,1570],[903,-11],[192,1616]],[[72845,830700],[-2,-16190]],[[72843,814510],[-1303,45],[-15,-5422],[125,-21],[-16,-4230]],[[50464,766367],[-102,-328]],[[49620,764426],[-138,-1468],[-1062,-1905],[-96,1293],[-1035,446],[861,1205],[617,1650],[-307,160],[-106,3181],[674,2398]],[[91002,847056],[9,-3988],[146,-1795],[7,-11469],[-1548,27],[56,-1647],[46,-12768],[-726,13],[-1,-927],[-3493,32]],[[85498,814534],[-2027,-32],[-140,995]],[[83331,815497],[-404,601],[-736,-459],[-672,-2022],[-282,-2604],[-1336,126],[-327,2166],[-16,-1517],[-1058,-1636]],[[78500,810152],[-3,1152],[-1003,21],[-4,3165],[-4647,20]],[[72845,830700],[0,8044]],[[72845,838744],[3088,-82],[11,1347],[6637,9993],[4096,-25],[11,2587],[2946,186]],[[89634,852750],[1354,59],[14,-5753]],[[86653,868811],[757,-1569],[2146,14]],[[89556,867256],[86,-6324],[-8,-8182]],[[72845,838744],[1580,8236],[-1,2534],[-535,-83],[-516,926],[-152,2433],[36,3161],[1704,93],[23,3109],[497,-4],[22,3291],[619,95],[96,1432],[589,58],[151,-985],[624,-419],[1536,6612],[4539,-401],[2996,-21]],[[85498,814534],[-38,-10730],[-759,-83],[1,-2090]],[[84702,801631],[-828,17],[8,1987]],[[83882,803635],[-434,1931],[-461,-308],[-1061,1669],[-902,2471],[707,3049],[1129,2748],[471,302]],[[97244,787641],[-970,-3439],[64,996],[906,2443]],[[87222,789210],[-180,-1772],[-422,-410],[602,2182]],[[86635,788749],[223,2200],[233,-961],[-456,-1239]],[[86658,791573],[-368,-3115],[-331,1166],[699,1949]],[[89188,794370],[360,-14],[-242,-1523],[503,637],[-807,-2688],[-814,-3927],[157,-1241],[-672,-1392],[-694,-249],[129,1479],[1250,4306],[686,2953],[144,1659]],[[86770,795107],[-72,-1859],[-323,817],[395,1042]],[[90857,797012],[511,-366],[-56,-1276],[665,500],[124,-712],[-949,-1371],[-533,-1467],[-219,828],[596,1566],[-651,-377],[-24,893],[536,1782]],[[87021,792777],[237,3392],[601,-294],[-413,-4995],[-425,1897]],[[84911,786500],[233,323],[68,9012],[-286,661]],[[84926,796496],[584,1622],[519,-1019],[524,1881],[285,-1347],[30,-1922],[-996,-2869],[605,-1030],[-718,-2215],[-215,-2677],[-633,-420]],[[92921,798974],[-9,-545],[-1146,-2071],[-222,1208],[1377,1408]],[[88340,800844],[382,-576],[-511,-770],[129,1346]],[[84952,800675],[-2,141]],[[84950,800816],[2,-141]],[[86236,802132],[283,-1843],[-420,600],[137,1243]],[[84952,797243],[-2,3142]],[[84950,800385],[697,2105],[-36,-2998],[388,2501],[244,-2671],[-389,-1481],[-418,814],[-484,-1412]],[[86677,805210],[324,-2117],[-624,-286],[300,2403]],[[87480,803390],[-299,-138],[-586,2075],[324,2591],[505,2085],[122,1742],[-770,-3524],[-194,-1549],[-274,1236],[-413,-4415],[-943,-1986]],[[84952,801507],[-250,124]],[[91002,847056],[976,234],[64,648],[2681,18],[1,-1651],[1594,-292],[4038,-37],[350,-2273],[-454,-2972],[436,-1269],[-270,-2840],[731,-302],[296,1951],[1174,-336],[-16,-1588],[538,-65],[-11,-1550],[467,-24],[-41,-6434],[413,-697],[4,-4218],[2304,16]],[[106277,823375],[-1,-28115]],[[106276,795260],[-590,822],[-1600,-31],[4,1610],[-3846,-34],[-2014,-8871],[13,-855]],[[98243,787901],[-1022,2714],[47,774],[-1004,-33],[-277,1650],[-683,426],[369,3141],[18,2628],[-611,-1565],[-178,-1401],[-660,-2022],[-456,1505],[-715,1071],[-573,-359],[943,3800],[-1115,-764],[259,1691],[-925,-1558],[532,2101],[-1009,-888],[-678,62],[-94,801],[1014,956],[446,1115],[-1049,-704],[-517,1833],[318,3213],[1053,57],[-177,903],[-745,-283],[-1115,-3389],[-359,1426],[-193,-1467],[-586,-1116],[-377,408],[6,3472],[-279,-1340],[36,-2946],[-407,-423]],[[71986,766650],[159,17]],[[71670,777076],[234,-1111],[-578,-409],[344,1520]],[[79473,776784],[-278,-2074],[90,2387],[188,-313]],[[75949,796147],[-337,-1236],[224,2635],[113,-1399]],[[84952,800675],[-2,141]],[[84952,801507],[-2,-1122]],[[84952,797243],[-26,-747]],[[84911,786500],[-1246,807],[241,1474],[-372,-167],[-386,-2037],[-206,3701],[-28,-2396],[-481,-1666],[-173,-1732],[-183,2620],[-198,-5326],[-848,3357],[-38,-1545],[419,-800],[-370,-1104],[-68,-1569],[-635,-858],[207,3841],[-673,-5212],[-363,1475],[21,-2088],[-388,-20],[-756,-4011],[-73,2111],[-348,-2231],[-660,934],[-173,-858],[-798,-888],[-19,1049],[-622,715],[205,2741],[545,1203],[719,24],[16,1316],[737,963],[-66,842],[764,2927],[-371,25],[-1227,-2967],[-387,246],[-630,2275],[461,4880],[786,3381],[112,2715],[231,475],[102,3025],[-411,3227],[967,1254],[994,2799],[846,1832],[515,-1977],[449,-352],[796,1052],[345,-814],[1491,-887],[199,-646]],[[78500,810152],[-529,-2655],[-888,-709],[-892,-2927],[269,-2258],[-403,43],[-549,-1340],[-154,-1303],[-581,-1608],[-230,-3803],[-475,-1478],[-1034,410],[707,-1448],[308,-1772],[-382,-2913],[-286,-680],[-1150,-274],[-158,-989],[796,2],[-164,-2224],[-453,-1067],[-563,295],[228,1314],[-337,1411],[32,-1983],[-397,-2577],[-671,-197],[278,-1966],[-1055,-1700],[-60,-2764],[-263,-488],[166,-2860],[276,1050],[1025,35],[413,-1681],[604,-1165],[58,-1233]],[[110730,776964],[-495,571],[-783,1959],[461,898]],[[109913,780392],[89,-474],[542,2604],[-420,3603],[332,1618],[530,-2532],[165,177],[-480,2635],[-360,838],[-174,-1871],[-464,-2242],[-1472,-2407],[-1544,735],[-1623,2726],[527,2089],[-370,3153],[-376,-856],[438,-1616],[-624,-1272],[-2761,2302],[-2697,-711],[-928,-990]],[[106276,795260],[0,-1588],[1342,-1612],[173,1644],[1330,-2348],[802,2853],[1723,322],[-346,-4919],[404,-1740],[965,-1648],[226,-2564],[2839,-9770],[299,-4811],[-73,-1471]],[[114795,765672],[-74,1821],[-694,2541],[-828,1292],[164,1473],[-569,-631],[-2064,4796]],[[106279,946180],[-1,-49413]],[[106278,896767],[-929,-2456],[-130,-1601],[-1321,-3359],[-906,419],[-784,-1692],[-450,407],[-348,-3372],[-325,-1449],[-654,-436],[-1189,-2953],[59,-3793],[-686,-1989],[-822,655]],[[97793,875148],[-204,2150],[357,3326],[-316,718],[514,846],[-159,1080],[-964,-156],[-338,-900],[-1243,1394],[-887,-1195],[-579,221],[-638,-953],[-287,1202],[374,853],[-1289,1884],[-166,1203],[399,1801],[-515,869],[-625,-618],[-460,-1403],[-1060,-1320],[-1074,-10],[-601,-1159],[-3102,6],[49,-11364],[273,317],[853,-2473],[548,-2656]],[[50975,844055],[10,4776],[491,30],[-58,4948],[549,10],[4,1425],[1102,13],[-16,1635],[486,23],[-4,1682],[645,-27],[-89,4840],[-627,-25],[-61,12985],[569,33],[-9,3217],[558,13],[-5,6310],[540,-19],[-5,4867],[-576,-8]],[[54479,890783],[-5,8106],[1752,-15],[3,3093],[2984,34],[5,6544],[2342,37],[1,-3290],[1183,54],[7,3236],[1193,13],[-3,-1577],[601,61],[1,-1630],[1167,-18],[135,4836],[1805,-29],[9,2778],[1841,-6],[168,1643],[-10,6647],[-438,-21],[-10,1684],[-1233,59],[3,4809],[170,1665],[-625,-6],[17,1605],[-634,-27],[7,1645],[-620,11],[151,4212]],[[66446,936936],[6419,-3],[8315,-30],[7299,19],[3887,5],[-10,9096],[4663,309],[4791,-300],[4469,148]],[[97793,875148],[-1158,-1861],[-1436,-203],[-263,-1097],[-803,-486],[-476,-1290],[-577,796],[-731,-1428],[-434,44],[-567,-2104],[-1792,-263]],[[106278,896767],[-1,-73392]],[[79659,983425],[-186,-1457],[-394,1372],[580,85]],[[47581,977020],[610,-136],[635,1731],[830,26],[1623,2411],[1469,3493],[883,527],[-302,-3710],[454,-2621],[-62,3461],[379,971],[-494,2434],[-541,45],[1261,3273],[1370,1209],[-524,-1007],[415,-852],[3298,1404],[1420,2118],[705,1934],[1322,4592],[408,808],[628,-1392],[914,-472],[118,-1342],[1297,-97],[154,-1576],[-590,-1821],[-1263,-1269],[607,-390],[-400,-1319],[1303,-54],[455,606],[-99,1673],[703,1368],[285,1695],[248,-1304],[705,927],[682,-1755],[-272,-1974],[1375,-2190],[693,2096],[1211,87],[987,692],[971,-831],[278,-2575],[299,2682],[990,-1071],[-562,-2518],[6,-1533],[1009,-524],[-1483,-682],[2475,170],[-500,-2281],[1552,-378],[327,-1080],[240,1607],[1279,271],[-194,-2495],[904,1574],[844,524],[665,1465],[1963,-425],[887,-1703],[687,50],[281,-1515],[1082,464],[877,-2131],[2068,-1578],[1438,784],[1494,-1037],[432,637],[1637,-3240],[1773,-386],[359,911],[3399,1866],[1397,-1343],[1103,-2166],[387,-1504],[1266,-1052],[1132,-2959],[449,853],[588,-630],[-1,-21361]],[[66446,936936],[-2,524],[-2610,-22],[-7,1899],[-2541,-186],[-16,1669],[-3117,28],[-4016,91],[-18,1253],[-1129,59],[26,-1251],[-2705,21],[-18,1269],[-1182,3],[11,-1280],[-1329,46],[-6,1283],[-2021,165],[0,-1272],[-4957,-97],[16,-3782],[-2411,69]],[[38414,937425],[-1696,2109],[-331,1546],[-1319,2644],[530,804],[402,3101],[39,5653],[2425,-416],[2905,1305],[906,1070],[1221,2916],[1185,4350],[538,5905],[-330,649],[1231,3476],[365,2385],[846,2065],[658,2578],[522,-1587],[-930,-958]],[[54479,890783],[-578,0],[-10,-1617],[-6226,43],[-4789,-36],[-2,3199],[-592,6],[1,3250],[-769,-9],[7,6455],[-205,26],[-5,6430],[-226,1957]],[[41085,910487],[1578,205],[202,-2555],[-310,-1226],[120,-2178],[-264,-1027],[216,-1764],[590,-1196],[375,540],[1137,-445],[966,699],[320,-1177],[667,-159],[982,798],[546,-2005],[189,2045],[811,3513],[796,-959],[609,527],[-496,1902],[-1494,1020],[-695,-1271],[195,3234],[-840,3465],[-836,788],[-421,2411],[385,1580],[446,30],[876,-3094],[-153,-2498],[447,-1913],[932,-1943],[1113,1832],[1075,-3147],[1510,331],[132,1770],[-332,2163],[-931,-161],[-461,1240],[-884,-262],[-254,-1861],[-716,-284],[-1100,3517],[232,3055],[871,1517],[-974,1716],[-1121,-1075],[-1025,-154],[-390,1249],[-528,-563],[-2240,1824],[-398,5492],[-677,3577],[-1096,2080],[-2353,5735]],[[46592,855663],[132,-1524],[-911,379],[779,1145]],[[20847,858392],[154,-1917],[1767,-2170],[1395,2515],[527,-233],[506,-1478],[154,-2243],[1092,-1044],[302,-1308],[1484,-327],[899,-741],[-444,-2851],[-1263,664],[-756,-2937],[125,-925],[-598,-398],[121,1508],[-580,2032],[-993,769],[95,1587],[-981,2254],[-776,1164],[-1179,-1499],[-406,-1269],[-853,1089],[-307,2233],[515,5525]],[[40155,909679],[-378,-812],[-1697,-1707],[2075,2519]],[[50525,879793],[-440,-60],[-575,-2906],[-898,82],[-597,-1411],[-710,-398],[-195,-1163],[-840,-1617],[-253,-2635],[-445,-1194],[-161,3173],[-951,2836],[-459,-1140],[679,-1515],[9,-1792],[-1367,2870],[-2018,-58],[-2018,-2251],[-808,901],[-2508,1784],[-688,2790],[278,1486],[-107,1445],[-748,1760],[-608,2843],[665,-528],[574,1254],[301,1828],[875,-777],[601,-2903],[499,-323],[641,1345],[-382,829],[-829,195],[-166,-711],[-668,2577],[-1942,1613],[-1533,482],[-1421,2817],[-464,461],[785,2442],[579,22],[-1,1594],[845,1740],[325,-909],[992,2482],[419,1887],[1043,1672],[644,-1027],[1215,98],[319,783],[-1042,1554],[505,1845],[720,1193],[1099,506],[107,-679],[853,2834],[830,668]],[[46154,848898],[640,3384],[127,1617],[836,-1042],[-393,-958],[1743,358],[1079,995],[1027,4968],[-512,5797],[-74,2808],[-782,2761],[-730,205],[138,2075],[1090,-246],[769,2178],[52,1989],[-320,1964],[-701,1681],[382,361]],[[129336,693546],[270,-1010],[-141,-1955],[-386,2864],[257,101]],[[133465,694933],[144,-1619],[-433,-1116],[-420,1401],[709,1334]],[[129051,698432],[384,-3029],[-187,-665],[-381,868],[234,1060],[-50,1766]],[[128271,699419],[265,-2151],[-73,-1620],[898,-5179],[112,-1526],[-465,199],[-650,4105],[-450,3522],[52,2603],[311,47]],[[132791,699517],[330,-1553],[-34,-2741],[-744,304],[318,2136],[-199,1261],[329,593]],[[127590,701351],[341,-1447],[-98,-960],[-490,-120],[13,2204],[234,323]],[[126996,702605],[286,-601],[-587,-1676],[301,2277]],[[127349,703974],[-507,-707],[254,1440],[253,-733]],[[126550,705223],[399,-333],[-240,-1814],[-293,1014],[134,1133]],[[127577,705503],[193,-1280],[-213,-947],[-253,1520],[273,707]],[[126975,710441],[673,-1209],[-593,136],[47,-1542],[-470,1638],[343,977]],[[127739,711890],[119,-2595],[-287,1329],[168,1266]],[[132952,712558],[-518,-394],[514,1289],[4,-895]],[[127378,716539],[386,-260],[-15,-2495],[-236,369],[-705,-1255],[-241,-1211],[-256,709],[518,3076],[549,1067]],[[126879,720141],[451,-580],[749,57],[385,-2788],[-192,-1469],[384,-1822],[434,266],[497,-1761],[457,-2620],[47,-3196],[267,734],[169,-1960],[371,-1718],[-850,2044],[-552,-1434],[684,586],[160,-2342],[298,487],[445,-2791],[-464,-922],[454,-352],[205,1480],[89,-3147],[-430,-827],[396,-512],[100,-2502],[-397,-59],[420,-1193],[-182,-2479],[-613,702],[-449,4336],[-562,-35],[258,2640],[-329,-710],[132,1822],[-300,-502],[-724,2251],[-726,264],[28,1948],[514,-22],[-360,1667],[235,2818],[-438,-873],[-449,796],[644,3530],[-239,1458],[-150,5160],[-813,306],[-187,1878],[133,1386]],[[133954,721013],[796,-683],[442,-1861],[433,-443],[117,-1890],[501,-840],[397,491],[279,-2136],[-1,-1873],[-414,-2628],[68,-3449],[429,-5569],[-359,-1662],[-236,-2416],[-441,-2702],[-867,-2699],[-213,1932],[-286,-2060],[-268,663],[-208,4192],[490,1686],[-537,-477],[-156,1948],[582,2169],[-76,7458],[-887,5088],[-486,-470],[-72,869],[-949,-2430],[-397,-118],[344,-1651],[-544,-5283],[-589,1664],[-115,2845]],[[312327,9345],[187,-606]],[[312514,8739],[-15,-1700]],[[312499,7039],[-350,67]],[[312149,7106],[17,912]],[[312166,8018],[43,812]],[[312209,8830],[118,515]],[[312084,13311],[6,-1330]],[[312090,11981],[-147,-92]],[[311943,11889],[-157,1158]],[[311786,13047],[223,739]],[[312009,13786],[75,-475]],[[312224,10808],[178,-1248]],[[312402,9560],[-75,-215]],[[312209,8830],[-202,84]],[[312007,8914],[-56,275]],[[311951,9189],[-19,1837]],[[311932,11026],[292,-218]],[[313107,15065],[-14,-2951]],[[313093,12114],[-156,-32]],[[312937,12082],[5,365]],[[312942,12447],[-35,2686]],[[312907,15133],[200,-68]],[[312774,6524],[70,-1308]],[[312844,5216],[-339,-41]],[[312505,5175],[62,1491]],[[312567,6666],[207,-142]],[[312709,10760],[26,-1200]],[[312735,9560],[-333,0]],[[312224,10808],[123,646]],[[312347,11454],[362,-694]],[[315123,11876],[54,-128]],[[315177,11748],[78,-1804]],[[315255,9944],[-163,-1769]],[[315092,8175],[-119,1033]],[[314973,9208],[-63,762]],[[314910,9970],[144,1736]],[[315054,11706],[69,170]],[[314670,11208],[37,-329]],[[314707,10879],[60,-642]],[[314767,10237],[-199,-737]],[[314568,9500],[-72,1128]],[[314496,10628],[174,580]],[[314052,6833],[264,-476]],[[314316,6357],[-19,-702]],[[314297,5655],[-318,75]],[[313979,5730],[73,1103]],[[312567,6666],[-68,373]],[[312514,8739],[144,137]],[[312658,8876],[116,-2352]],[[312942,12447],[-192,449]],[[312750,12896],[-16,-18]],[[312734,12878],[-7,2191]],[[312727,15069],[180,64]],[[314923,14259],[-51,-292]],[[314872,13967],[-106,119]],[[314766,14086],[83,583]],[[314849,14669],[74,-410]],[[313370,8907],[-65,-415]],[[313305,8492],[-209,83]],[[313096,8575],[-80,-29]],[[313016,8546],[-82,705]],[[312934,9251],[27,1093]],[[312961,10344],[345,-244],[64,-1193]],[[313305,8492],[-14,-2846]],[[313291,5646],[-154,398]],[[313137,6044],[-41,2531]],[[314464,12205],[-98,-1501]],[[314366,10704],[-105,-151]],[[314261,10553],[-75,982]],[[314186,11535],[35,730]],[[314221,12265],[129,637]],[[314350,12902],[114,-697]],[[314016,15105],[-14,-2136]],[[314002,12969],[-54,8]],[[313948,12977],[-196,-375]],[[313752,12602],[-27,1007]],[[313725,13609],[25,1393]],[[313750,15002],[266,103]],[[313604,15086],[-4,-1775]],[[313600,13311],[-8,-956]],[[313592,12355],[-45,-184]],[[313547,12171],[-454,-57]],[[313107,15065],[497,21]],[[314264,15070],[-76,-2600]],[[314188,12470],[-186,499]],[[314016,15105],[248,-35]],[[315464,13512],[1,-2420]],[[315465,11092],[-66,435]],[[315399,11527],[-159,1610]],[[315240,13137],[-103,1306]],[[315137,14443],[122,139]],[[315259,14582],[205,-1070]],[[314938,14054],[76,-2458]],[[315014,11596],[-176,-329]],[[314838,11267],[34,2700]],[[314923,14259],[15,-205]],[[315375,10330],[63,-1609]],[[315438,8721],[6,-426]],[[315444,8295],[-234,-827]],[[315210,7468],[-116,640]],[[315094,8108],[-2,67]],[[315255,9944],[120,386]],[[313784,8891],[255,-1302]],[[314039,7589],[13,-756]],[[313979,5730],[-242,-149]],[[313737,5581],[-39,3312]],[[313698,8893],[16,20]],[[313714,8913],[70,-22]],[[315465,11092],[-90,-762]],[[315177,11748],[222,-221]],[[313725,9098],[-11,-185]],[[313698,8893],[-269,126]],[[313429,9019],[231,2603]],[[313660,11622],[65,-2524]],[[314361,14912],[31,-1700]],[[314392,13212],[-42,-310]],[[314221,12265],[-33,205]],[[314264,15070],[97,-158]],[[312306,11771],[41,-317]],[[311932,11026],[-107,569]],[[311825,11595],[118,294]],[[312090,11981],[216,-210]],[[312937,12082],[24,-1738]],[[312934,9251],[-27,-13]],[[312907,9238],[-172,322]],[[312709,10760],[41,2136]],[[315183,5666],[-140,-215]],[[315043,5451],[-34,1224]],[[315009,6675],[174,-1009]],[[312505,5175],[-359,-115]],[[312146,5060],[3,2046]],[[314634,8728],[-21,-892]],[[314613,7836],[-92,-362]],[[314521,7474],[-160,1419]],[[314361,8893],[201,525]],[[314562,9418],[72,-690]],[[312295,14640],[81,-1252]],[[312376,13388],[-70,-1617]],[[312084,13311],[211,1329]],[[312007,8914],[159,-896]],[[312146,5060],[-281,902],[86,3227]],[[315210,7468],[60,-309]],[[315270,7159],[221,-1460]],[[315491,5699],[-308,-33]],[[315009,6675],[81,1384]],[[315090,8059],[4,49]],[[314186,11535],[-217,-675]],[[313969,10860],[-21,2117]],[[311825,11595],[-39,1452]],[[312009,13786],[157,1825]],[[312166,15611],[129,-971]],[[313137,6044],[-273,-821]],[[312864,5223],[152,3323]],[[314838,11267],[-131,-388]],[[314670,11208],[-8,753]],[[314662,11961],[28,1347]],[[314690,13308],[76,778]],[[313547,12171],[113,-549]],[[313429,9019],[-59,-112]],[[314973,9208],[-339,-480]],[[314562,9418],[6,82]],[[314767,10237],[143,-267]],[[314776,6994],[-112,-1631]],[[314664,5363],[-367,292]],[[314316,6357],[205,1117]],[[314613,7836],[163,-842]],[[312679,13385],[55,-507]],[[312376,13388],[303,-3]],[[315090,8059],[-314,-1065]],[[314662,11961],[-198,244]],[[314392,13212],[143,201]],[[314535,13413],[155,-105]],[[312679,13385],[-109,1773]],[[312570,15158],[157,-89]],[[313752,12602],[-160,-247]],[[313600,13311],[125,298]],[[314496,10628],[-130,76]],[[313604,15086],[146,-84]],[[315240,13137],[-117,-1261]],[[315054,11706],[-40,-110]],[[314938,14054],[199,389]],[[315043,5451],[-379,-88]],[[312864,5223],[-20,-7]],[[312658,8876],[249,362]],[[314001,9350],[196,-57]],[[314197,9293],[164,-400]],[[314039,7589],[-38,1761]],[[313784,8891],[217,459]],[[313969,10860],[-244,-1762]],[[313737,5581],[-446,65]],[[314261,10553],[-64,-1260]],[[312166,15611],[404,-453]],[[315579,8262],[226,-900]],[[315805,7362],[-150,-1087]],[[315655,6275],[-385,884]],[[315444,8295],[135,-33]],[[314535,13413],[108,1311]],[[314643,14724],[206,-55]],[[318309,12804],[169,-865],[-544,829],[375,36]],[[316158,12801],[-233,-1215]],[[315925,11586],[-15,-114]],[[315910,11472],[23,1756]],[[315933,13228],[225,-427]],[[315714,13936],[-106,-833]],[[315608,13103],[-144,409]],[[315259,14582],[455,-646]],[[315655,6275],[-164,-576]],[[315910,11472],[-22,-197]],[[315888,11275],[-160,-130]],[[315728,11145],[-34,41]],[[315694,11186],[-86,1917]],[[315714,13936],[219,-708]],[[315888,11275],[293,-1349]],[[316181,9926],[-216,-625]],[[315965,9301],[-242,492]],[[315723,9793],[5,1352]],[[315723,9793],[-144,-1531]],[[315438,8721],[211,2085]],[[315649,10806],[45,380]],[[315649,10806],[-184,286]],[[316256,11347],[-331,239]],[[316158,12801],[154,393],[-56,-1847]],[[316256,11347],[125,-1005],[-200,-416]],[[315965,9301],[-160,-1939]],[[316936,9055],[328,-560],[-757,-908],[-91,684],[520,784]],[[318661,1986],[376,-1084],[-740,-782],[24,1182],[340,684]],[[314361,14912],[282,-188]]],"transform":{"scale":[0.0003589261789261791,0.0000537148685138684],"translate":[-179.1473399999999,17.67439566600018]}}
},{}],9:[function(require,module,exports){
module.exports={"type":"Topology","objects":{"countries":{"type":"GeometryCollection","bbox":[-180,-89.99892578124998,180.00000000000003,83.59960937500006],"geometries":[{"type":"Polygon","id":533,"arcs":[[0]]},{"type":"Polygon","id":4,"arcs":[[1,2,3,4,5,6,7]]},{"type":"MultiPolygon","id":24,"arcs":[[[8,9,10,11]],[[12,13,14]]]},{"type":"Polygon","id":660,"arcs":[[15]]},{"type":"Polygon","id":8,"arcs":[[16,17,18,19,20]]},{"type":"MultiPolygon","id":248,"arcs":[[[21]],[[22]],[[23]]]},{"type":"Polygon","id":20,"arcs":[[24,25]]},{"type":"MultiPolygon","id":784,"arcs":[[[26]],[[27]],[[28]],[[29]],[[30,31,32,33,34],[35]]]},{"type":"MultiPolygon","id":32,"arcs":[[[36]],[[37,38]],[[39]],[[40,41,42,43,44,45]]]},{"type":"MultiPolygon","id":51,"arcs":[[[46]],[[47,48,49,50,51],[52]]]},{"type":"Polygon","id":16,"arcs":[[53]]},{"type":"MultiPolygon","id":10,"arcs":[[[54]],[[55]],[[56]],[[57]],[[58]],[[59]],[[60]],[[61]],[[62]],[[63]],[[64]],[[65]],[[66]],[[67]],[[68]],[[69]],[[70]],[[71]],[[72]],[[73]],[[74]],[[75]],[[76]],[[77]],[[78]],[[79]],[[80]],[[81]],[[82]],[[83]],[[84]],[[85]],[[86]],[[87]],[[88]],[[89]],[[90]],[[91]],[[92]],[[93]],[[94]],[[95]],[[96]],[[97]],[[98]],[[99]],[[100]],[[101]],[[102]],[[103]],[[104]],[[105]],[[106]],[[107]],[[108]],[[109]],[[110]],[[111]],[[112]],[[113]],[[114]],[[115]],[[116]],[[117]],[[118]],[[119]],[[120]],[[121]],[[122]],[[123]],[[124]],[[125]],[[126]],[[127]],[[128]],[[129]],[[130]],[[131]],[[132]],[[133]],[[134]],[[135]],[[136]],[[137]],[[138]],[[139]],[[140]],[[141]],[[142]],[[143]],[[144]],[[145]],[[146]],[[147]],[[148]],[[149]],[[150]],[[151]],[[152]],[[153]],[[154]],[[155]],[[156]],[[157]],[[158]],[[159]],[[160]],[[161]]]},{"type":"Polygon","id":36,"arcs":[[162]]},{"type":"MultiPolygon","id":260,"arcs":[[[163]],[[164]],[[165]]]},{"type":"MultiPolygon","id":28,"arcs":[[[166]],[[167]]]},{"type":"MultiPolygon","id":36,"arcs":[[[168]],[[169]],[[170]],[[171]],[[172]],[[173]],[[174]],[[175]],[[176]],[[177]],[[178]],[[179]],[[180]],[[181]],[[182]],[[183]],[[184]],[[185]],[[186]],[[187]],[[188]],[[189]],[[190]],[[191]],[[192]],[[193]],[[194]],[[195]],[[196]],[[197]],[[198]],[[199]],[[200]],[[201]],[[202]],[[203]],[[204]],[[205]],[[206]],[[207]],[[208]],[[209]]]},{"type":"Polygon","id":40,"arcs":[[210,211,212,213,214,215,216,217,218]]},{"type":"MultiPolygon","id":31,"arcs":[[[219,220,-49]],[[-53]],[[221,222,-52,223,224],[-47]]]},{"type":"Polygon","id":108,"arcs":[[225,226,227]]},{"type":"Polygon","id":56,"arcs":[[228,229,230,231,232,233,234]]},{"type":"Polygon","id":204,"arcs":[[235,236,237,238,239]]},{"type":"Polygon","id":854,"arcs":[[240,-239,241,242,243,244]]},{"type":"MultiPolygon","id":50,"arcs":[[[245]],[[246]],[[247]],[[248]],[[249]],[[250]],[[251,252,253]]]},{"type":"Polygon","id":100,"arcs":[[254,255,256,257,258,259]]},{"type":"Polygon","id":48,"arcs":[[260]]},{"type":"MultiPolygon","id":44,"arcs":[[[261]],[[262]],[[263]],[[264]],[[265]],[[266]],[[267]],[[268]],[[269]],[[270]],[[271]],[[272]],[[273]],[[274]],[[275]]]},{"type":"Polygon","id":70,"arcs":[[276,277,278,279,280]]},{"type":"Polygon","id":652,"arcs":[[281]]},{"type":"Polygon","id":112,"arcs":[[282,283,284,285,286]]},{"type":"MultiPolygon","id":84,"arcs":[[[287]],[[288]],[[289,290,291]]]},{"type":"Polygon","id":60,"arcs":[[292]]},{"type":"Polygon","id":68,"arcs":[[293,-46,294,295,296]]},{"type":"MultiPolygon","id":76,"arcs":[[[297]],[[298]],[[299]],[[300]],[[301]],[[302]],[[303]],[[304]],[[305]],[[306]],[[307]],[[308]],[[309]],[[310]],[[311]],[[312]],[[313,314,315,316,-42,317,-297,318,319,320,321]]]},{"type":"Polygon","id":52,"arcs":[[322]]},{"type":"MultiPolygon","id":96,"arcs":[[[323,324]],[[325,326]]]},{"type":"Polygon","id":64,"arcs":[[327,328]]},{"type":"Polygon","id":72,"arcs":[[329,330,331]]},{"type":"Polygon","id":140,"arcs":[[332,333,334,335,336,337]]},{"type":"MultiPolygon","id":124,"arcs":[[[338]],[[339]],[[340]],[[341]],[[342]],[[343]],[[344]],[[345]],[[346]],[[347]],[[348]],[[349]],[[350]],[[351]],[[352]],[[353,354]],[[355]],[[356]],[[357]],[[358]],[[359]],[[360]],[[361]],[[362]],[[363]],[[364]],[[365]],[[366]],[[367]],[[368]],[[369]],[[370]],[[371]],[[372]],[[373]],[[374]],[[375]],[[376]],[[377]],[[378]],[[379]],[[380]],[[381]],[[382,383]],[[384]],[[385]],[[386]],[[387]],[[388]],[[389]],[[390]],[[391]],[[392]],[[393]],[[394]],[[395]],[[396]],[[397]],[[398]],[[399]],[[400]],[[401]],[[402]],[[403]],[[404]],[[405]],[[406]],[[407]],[[408]],[[409]],[[410]],[[411]],[[412]],[[413]],[[414]],[[415]],[[416]],[[417]],[[418]],[[419]],[[420]],[[421]],[[422]],[[423]],[[424]],[[425]],[[426]],[[427]],[[428]],[[429]],[[430]],[[431]],[[432]],[[433]],[[434]],[[435]],[[436]],[[437]],[[438]],[[439]],[[440,441,442,443]],[[444]],[[445]],[[446]],[[447]],[[448]],[[449]],[[450]],[[451]],[[452]],[[453]],[[454]],[[455]],[[456]],[[457]],[[458]],[[459]],[[460]],[[461]],[[462]],[[463]],[[464]],[[465]],[[466]],[[467]],[[468]],[[469]],[[470]],[[471]],[[472]],[[473]],[[474]],[[475]],[[476]],[[477]],[[478]],[[479]],[[480]],[[481]],[[482]],[[483]]]},{"type":"Polygon","id":756,"arcs":[[-217,484,-215,485,486,487]]},{"type":"MultiPolygon","id":152,"arcs":[[[488]],[[489]],[[490]],[[491]],[[492]],[[493]],[[494]],[[495]],[[496]],[[-38,497]],[[498]],[[499]],[[500]],[[501]],[[502]],[[503]],[[504]],[[505]],[[506]],[[507]],[[508]],[[509]],[[510]],[[511]],[[512]],[[513]],[[514]],[[515]],[[516]],[[517]],[[-45,518,519,-295]]]},{"type":"MultiPolygon","id":156,"arcs":[[[520]],[[521]],[[522]],[[523]],[[524]],[[525]],[[526]],[[527]],[[528]],[[529]],[[530]],[[531]],[[532,533,534,535,536,537,538,539,540,541,-329,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,-2,557,558,559,560,561,562]]]},{"type":"MultiPolygon","id":384,"arcs":[[[563,564]],[[-244,565,566,567,568,569]]]},{"type":"Polygon","id":120,"arcs":[[-337,570,571,572,573,574,575]]},{"type":"Polygon","id":180,"arcs":[[576,577,578,-227,579,580,-12,581,-15,582,-335]]},{"type":"Polygon","id":178,"arcs":[[-583,-14,583,584,-571,-336]]},{"type":"Polygon","id":184,"arcs":[[585]]},{"type":"MultiPolygon","id":170,"arcs":[[[586]],[[587,-320,588,589,590,591,592]]]},{"type":"MultiPolygon","id":174,"arcs":[[[593]],[[594]],[[595]]]},{"type":"MultiPolygon","id":132,"arcs":[[[596]],[[597]],[[598]],[[599]],[[600]],[[601]],[[602]],[[603]]]},{"type":"Polygon","id":188,"arcs":[[604,605,606,607]]},{"type":"MultiPolygon","id":192,"arcs":[[[608]],[[609]],[[610]],[[611]],[[612]],[[613]],[[614]]]},{"type":"Polygon","id":531,"arcs":[[615]]},{"type":"MultiPolygon","id":136,"arcs":[[[616]],[[617]],[[618]]]},{"type":"Polygon","id":-99,"arcs":[[619,620]]},{"type":"Polygon","id":196,"arcs":[[-620,621]]},{"type":"Polygon","id":203,"arcs":[[622,623,-219,624]]},{"type":"MultiPolygon","id":276,"arcs":[[[625,626]],[[627]],[[628]],[[629]],[[630,631,-625,-218,-488,632,633,-230,634,635,636]],[[637]]]},{"type":"Polygon","id":262,"arcs":[[638,639,640,641]]},{"type":"Polygon","id":212,"arcs":[[642]]},{"type":"MultiPolygon","id":208,"arcs":[[[643]],[[644]],[[645]],[[646]],[[647]],[[648]],[[649]],[[650]],[[651]],[[652]],[[653]],[[-637,654]]]},{"type":"Polygon","id":214,"arcs":[[655,656]]},{"type":"Polygon","id":12,"arcs":[[657,658,659,660,661,662,663,664]]},{"type":"MultiPolygon","id":218,"arcs":[[[665]],[[666]],[[667]],[[668]],[[669]],[[670]],[[671]],[[672]],[[673,674,-590]]]},{"type":"Polygon","id":818,"arcs":[[675,676,677,678,679,680]]},{"type":"MultiPolygon","id":232,"arcs":[[[681]],[[682]],[[683,-641,684,685]]]},{"type":"MultiPolygon","id":724,"arcs":[[[686]],[[687]],[[688]],[[689]],[[690]],[[691]],[[692]],[[693]],[[694]],[[695]],[[696]],[[697,-25,698,699,700,701]]]},{"type":"MultiPolygon","id":233,"arcs":[[[702]],[[703]],[[704]],[[705,706,707]]]},{"type":"Polygon","id":231,"arcs":[[-640,708,709,710,711,712,-685]]},{"type":"MultiPolygon","id":246,"arcs":[[[713]],[[714]],[[715]],[[716]],[[717]],[[718]],[[719]],[[720,721,722,723]]]},{"type":"MultiPolygon","id":242,"arcs":[[[724]],[[725]],[[726]],[[727]],[[728]],[[729]],[[730]],[[731]],[[732]],[[733]],[[734]],[[735]],[[736]],[[737]],[[738]],[[739]],[[740]],[[741]],[[742]]]},{"type":"MultiPolygon","id":238,"arcs":[[[743]],[[744]],[[745]],[[746]],[[747]],[[748]]]},{"type":"MultiPolygon","id":250,"arcs":[[[749]],[[750]],[[-315,751,752]],[[753]],[[754]],[[755]],[[756]],[[757]],[[758]],[[759,-633,-487,760,761,762,763,-699,-26,-698,764,-232]]]},{"type":"MultiPolygon","id":234,"arcs":[[[765]],[[766]],[[767]],[[768]],[[769]]]},{"type":"MultiPolygon","id":583,"arcs":[[[770]],[[771]],[[772]],[[773]],[[774]]]},{"type":"Polygon","id":266,"arcs":[[-585,775,776,-572]]},{"type":"MultiPolygon","id":826,"arcs":[[[777]],[[778]],[[779,780]],[[781]],[[782]],[[783]],[[784]],[[785]],[[786]],[[787]],[[788]],[[789]],[[790]],[[791]],[[792]],[[793]],[[794]],[[795]],[[796]],[[797]],[[798]],[[799]],[[800]]]},{"type":"Polygon","id":268,"arcs":[[-224,-51,801,802,803]]},{"type":"Polygon","id":831,"arcs":[[804]]},{"type":"Polygon","id":288,"arcs":[[805,806,-564,807,-566,-243]]},{"type":"Polygon","id":324,"arcs":[[808,-569,809,810,811,812,813]]},{"type":"Polygon","id":270,"arcs":[[814,815]]},{"type":"MultiPolygon","id":624,"arcs":[[[816]],[[817]],[[818]],[[819]],[[820]],[[821]],[[822,823,-813]]]},{"type":"MultiPolygon","id":226,"arcs":[[[824,-573,-777]],[[825]]]},{"type":"MultiPolygon","id":300,"arcs":[[[826]],[[827]],[[828]],[[829]],[[830]],[[831]],[[832]],[[833]],[[834]],[[835]],[[836]],[[837]],[[838]],[[839]],[[840]],[[841]],[[842]],[[843]],[[844]],[[845]],[[846]],[[847]],[[848]],[[849]],[[850]],[[851]],[[852]],[[853]],[[854]],[[855]],[[856]],[[857]],[[858]],[[859]],[[860]],[[861]],[[862]],[[863]],[[864]],[[865,-19,866,-257,867]]]},{"type":"Polygon","id":308,"arcs":[[868]]},{"type":"MultiPolygon","id":304,"arcs":[[[869]],[[870]],[[871]],[[872]],[[873]],[[874]],[[875]],[[876]],[[877]],[[878]],[[879]],[[880]],[[881]],[[882]],[[883]],[[884]],[[885]]]},{"type":"Polygon","id":320,"arcs":[[-290,886,887,888,889,890]]},{"type":"Polygon","id":316,"arcs":[[891]]},{"type":"Polygon","id":328,"arcs":[[892,-322,893,894]]},{"type":"MultiPolygon","id":344,"arcs":[[[895]],[[896]],[[-535,897]]]},{"type":"Polygon","id":334,"arcs":[[898]]},{"type":"MultiPolygon","id":340,"arcs":[[[899,900,901,-888,902]],[[903]],[[904]]]},{"type":"MultiPolygon","id":191,"arcs":[[[905]],[[906]],[[-279,907,908]],[[909]],[[910]],[[911]],[[912]],[[913]],[[914]],[[915]],[[916]],[[917]],[[918,-281,919,920,921]]]},{"type":"MultiPolygon","id":332,"arcs":[[[922]],[[-656,923]],[[924]]]},{"type":"Polygon","id":348,"arcs":[[925,926,927,-922,928,-212,929]]},{"type":"MultiPolygon","id":360,"arcs":[[[930]],[[931]],[[932]],[[933]],[[934,935,936,937]],[[938]],[[939]],[[940]],[[941]],[[942]],[[943]],[[944]],[[945]],[[946]],[[947]],[[948]],[[949]],[[950]],[[951]],[[952]],[[953]],[[954]],[[955]],[[956]],[[957]],[[958]],[[959]],[[960]],[[961]],[[962]],[[963]],[[964]],[[965]],[[966]],[[967]],[[968]],[[969]],[[970]],[[971]],[[972]],[[973]],[[974]],[[975]],[[976]],[[977]],[[978]],[[979]],[[980]],[[981]],[[982]],[[983]],[[984]],[[985]],[[986]],[[987]],[[988]],[[989]],[[990]],[[991]],[[992]],[[993]],[[994]],[[995]],[[996]],[[997]],[[998]],[[999]],[[1000]],[[1001]],[[1002]],[[1003]],[[1004]],[[1005]],[[1006]],[[1007]],[[1008]],[[1009]],[[1010]],[[1011]],[[1012]],[[1013]],[[1014]],[[1015]],[[1016]],[[1017]],[[1018]],[[1019]],[[1020]],[[1021,1022,1023]],[[1024]],[[1025]],[[1026]],[[1027]],[[1028]],[[1029]],[[1030]],[[1031]],[[1032]],[[1033]],[[1034]],[[1035]],[[1036]],[[1037]],[[1038]],[[1039]],[[1040]],[[1041]],[[1042]],[[1043]],[[1044]],[[1045]],[[1046]],[[1047]],[[1048]],[[1049]],[[1050]],[[1051]],[[1052]],[[1053]],[[1054]],[[1055]],[[1056]],[[1057]],[[1058]],[[1059]],[[1060]],[[1061]],[[1062,1063]],[[1064]],[[1065,1066]],[[1067]],[[1068]],[[1069]]]},{"type":"Polygon","id":833,"arcs":[[1070]]},{"type":"MultiPolygon","id":356,"arcs":[[[1071]],[[1072]],[[1073]],[[1074]],[[1075]],[[1076]],[[1077]],[[1078]],[[1079]],[[1080]],[[1081]],[[1082]],[[1083]],[[1084,-549,1085,-547,1086,-545,1087,-543,-328,-542,1088,-254,1089,1090,1091,1092,-554,1093,-552,1094,-550]]]},{"type":"MultiPolygon","id":-99,"arcs":[[[1095]],[[1096]],[[1097]]]},{"type":"Polygon","id":86,"arcs":[[1098]]},{"type":"MultiPolygon","id":372,"arcs":[[[1099]],[[1100,-780]]]},{"type":"MultiPolygon","id":364,"arcs":[[[1101]],[[-48,-223,1102,1103,-5,1104,1105,1106,1107,1108,-220]]]},{"type":"Polygon","id":368,"arcs":[[-1108,1109,1110,1111,1112,1113,1114]]},{"type":"Polygon","id":352,"arcs":[[1115]]},{"type":"Polygon","id":376,"arcs":[[1116,1117,1118,1119,-677,1120,1121,1122,1123]]},{"type":"MultiPolygon","id":380,"arcs":[[[1124]],[[1125]],[[1126]],[[1127]],[[1128]],[[1129]],[[1130]],[[1131,1132,-761,-486,-214],[1133]]]},{"type":"Polygon","id":388,"arcs":[[1134]]},{"type":"Polygon","id":832,"arcs":[[1135]]},{"type":"Polygon","id":400,"arcs":[[1136,1137,-1119,1138,-1117,1139,-1113]]},{"type":"MultiPolygon","id":392,"arcs":[[[1140]],[[1141]],[[1142]],[[1143]],[[1144]],[[1145]],[[1146]],[[1147]],[[1148]],[[1149]],[[1150]],[[1151]],[[1152]],[[1153]],[[1154]],[[1155]],[[1156]],[[1157]],[[1158]],[[1159]],[[1160]],[[1161]],[[1162]],[[1163]],[[1164]],[[1165]],[[1166]],[[1167]],[[1168]],[[1169]],[[1170]],[[1171]],[[1172]],[[1173]]]},{"type":"Polygon","id":-99,"arcs":[[-1092,1174,-556]]},{"type":"MultiPolygon","id":398,"arcs":[[[1175]],[[1176]],[[1177]],[[-560,1178,1179,1180,1181,1182]]]},{"type":"MultiPolygon","id":404,"arcs":[[[1183]],[[1184,1185,1186,1187,1188,-711]]]},{"type":"Polygon","id":417,"arcs":[[-559,1189,1190,-1179],[1191],[1192],[1193]]},{"type":"MultiPolygon","id":116,"arcs":[[[1194]],[[1195]],[[1196,1197,1198,1199]]]},{"type":"MultiPolygon","id":296,"arcs":[[[1200]],[[1201]],[[1202]],[[1203]],[[1204]],[[1205]],[[1206]],[[1207]],[[1208]],[[1209]],[[1210]],[[1211]],[[1212]],[[1213]],[[1214]],[[1215]],[[1216]],[[1217]],[[1218]]]},{"type":"MultiPolygon","id":659,"arcs":[[[1219]],[[1220]]]},{"type":"MultiPolygon","id":410,"arcs":[[[1221]],[[1222]],[[1223]],[[1224]],[[1225]],[[1226]],[[1227]],[[1228]],[[1229]],[[1230]],[[1231,1232]]]},{"type":"Polygon","id":-99,"arcs":[[1233,-17,1234,1235]]},{"type":"MultiPolygon","id":414,"arcs":[[[1236]],[[1237,-1111,1238]]]},{"type":"Polygon","id":418,"arcs":[[1239,-1199,1240,1241,-540]]},{"type":"Polygon","id":422,"arcs":[[-1123,1242,1243]]},{"type":"Polygon","id":430,"arcs":[[-568,1244,1245,-810]]},{"type":"Polygon","id":434,"arcs":[[-680,1246,1247,1248,-659,1249,1250]]},{"type":"Polygon","id":662,"arcs":[[1251]]},{"type":"Polygon","id":438,"arcs":[[-485,-216]]},{"type":"MultiPolygon","id":144,"arcs":[[[1252]],[[1253]],[[1254]]]},{"type":"Polygon","id":426,"arcs":[[1255]]},{"type":"MultiPolygon","id":440,"arcs":[[[1256,1257]],[[-286,1258,1259,1260,1261]]]},{"type":"Polygon","id":442,"arcs":[[-634,-760,-231]]},{"type":"Polygon","id":428,"arcs":[[1262,-287,-1262,1263,-707]]},{"type":"Polygon","id":446,"arcs":[[-537,1264]]},{"type":"Polygon","id":663,"arcs":[[1265,1266]]},{"type":"Polygon","id":504,"arcs":[[-664,1267,1268]]},{"type":"Polygon","id":492,"arcs":[[1269,-763]]},{"type":"Polygon","id":498,"arcs":[[1270,1271]]},{"type":"MultiPolygon","id":450,"arcs":[[[1272]],[[1273]],[[1274]]]},{"type":"MultiPolygon","id":462,"arcs":[[[1275]],[[1276]]]},{"type":"MultiPolygon","id":484,"arcs":[[[1277]],[[1278]],[[1279]],[[1280]],[[1281]],[[1282]],[[1283]],[[1284]],[[1285]],[[1286]],[[1287]],[[1288]],[[1289]],[[1290]],[[1291]],[[1292,-291,-891,1293,1294]]]},{"type":"MultiPolygon","id":584,"arcs":[[[1295]],[[1296]],[[1297]],[[1298]],[[1299]]]},{"type":"Polygon","id":807,"arcs":[[-258,-867,-18,-1234,1300]]},{"type":"Polygon","id":466,"arcs":[[1301,-245,-570,-809,1302,1303,-661]]},{"type":"MultiPolygon","id":470,"arcs":[[[1304]],[[1305]]]},{"type":"MultiPolygon","id":104,"arcs":[[[1306]],[[1307]],[[1308]],[[1309]],[[1310]],[[1311]],[[1312]],[[1313]],[[1314]],[[1315]],[[1316]],[[1317]],[[1318]],[[1319]],[[1320]],[[1321]],[[1322]],[[1323]],[[-1242,1324,1325,-252,-1089,-541]]]},{"type":"Polygon","id":499,"arcs":[[1326,-1235,-21,1327,-908,-278]]},{"type":"Polygon","id":496,"arcs":[[-562,1328]]},{"type":"MultiPolygon","id":580,"arcs":[[[1329]],[[1330]],[[1331]],[[1332]],[[1333]],[[1334]]]},{"type":"Polygon","id":508,"arcs":[[1335,1336,1337,1338,1339,1340,1341,1342],[1343],[1344]]},{"type":"MultiPolygon","id":478,"arcs":[[[1345]],[[1346,1347,1348,-662,-1304]]]},{"type":"Polygon","id":500,"arcs":[[1349]]},{"type":"Polygon","id":480,"arcs":[[1350]]},{"type":"MultiPolygon","id":454,"arcs":[[[-1345]],[[-1344]],[[-1341,1351,1352]]]},{"type":"MultiPolygon","id":458,"arcs":[[[1353]],[[1354]],[[1355]],[[-1064,1356]],[[1357]],[[1358]],[[1359,1360]],[[-1067,1361,-326,-325,1362]],[[1363]]]},{"type":"Polygon","id":516,"arcs":[[1364,-332,1365,1366,-10]]},{"type":"MultiPolygon","id":540,"arcs":[[[1367]],[[1368]],[[1369]],[[1370]],[[1371]],[[1372]]]},{"type":"Polygon","id":562,"arcs":[[1373,1374,-240,-241,-1302,-660,-1249]]},{"type":"Polygon","id":574,"arcs":[[1375]]},{"type":"MultiPolygon","id":566,"arcs":[[[1376]],[[1377,-575,1378,-236,-1375]]]},{"type":"Polygon","id":558,"arcs":[[1379,-608,1380,-900]]},{"type":"Polygon","id":570,"arcs":[[1381]]},{"type":"MultiPolygon","id":528,"arcs":[[[1382]],[[1383]],[[1384]],[[-234,1385]],[[1386]],[[1387]],[[1388]],[[1389,-635,1390,-235]],[[1391]],[[1392]],[[1393]],[[1394]]]},{"type":"MultiPolygon","id":578,"arcs":[[[1395]],[[1396]],[[1397]],[[1398]],[[1399]],[[1400]],[[1401]],[[1402]],[[1403]],[[1404]],[[1405]],[[1406]],[[1407]],[[1408]],[[1409]],[[1410]],[[1411]],[[1412]],[[1413]],[[1414]],[[1415,-724,1416,1417]],[[1418]],[[1419]],[[1420]],[[1421]],[[1422]],[[1423]],[[1424]],[[1425]],[[1426]],[[1427]],[[1428]]]},{"type":"Polygon","id":524,"arcs":[[-1088,-544]]},{"type":"Polygon","id":520,"arcs":[[1429]]},{"type":"MultiPolygon","id":554,"arcs":[[[1430]],[[1431]],[[1432]],[[1433]],[[1434]],[[1435]],[[1436]],[[1437]],[[1438]],[[1439]],[[1440]],[[1441]],[[1442]]]},{"type":"MultiPolygon","id":512,"arcs":[[[1443]],[[1444,1445,1446,-32]],[[-36]],[[-35,1447]]]},{"type":"Polygon","id":586,"arcs":[[-1175,-1091,1448,-1106,-3,-557]]},{"type":"MultiPolygon","id":591,"arcs":[[[1449]],[[1450]],[[1451]],[[1452]],[[-592,1453,-606,1454]]]},{"type":"Polygon","id":612,"arcs":[[1455]]},{"type":"Polygon","id":604,"arcs":[[-319,-296,-520,1456,-674,-589]]},{"type":"MultiPolygon","id":608,"arcs":[[[1457]],[[1458]],[[1459]],[[1460]],[[1461]],[[1462]],[[1463]],[[1464]],[[1465]],[[1466]],[[1467]],[[1468]],[[1469]],[[1470]],[[1471]],[[1472]],[[1473]],[[1474]],[[1475]],[[1476]],[[1477]],[[1478]],[[1479]],[[1480]],[[1481]],[[1482]],[[1483]],[[1484]],[[1485]],[[1486]],[[1487]],[[1488]],[[1489]],[[1490]],[[1491]],[[1492]],[[1493]],[[1494]],[[1495]],[[1496]],[[1497]],[[1498]],[[1499]],[[1500]],[[1501]],[[1502]],[[1503]],[[1504]]]},{"type":"MultiPolygon","id":585,"arcs":[[[1505]],[[1506]]]},{"type":"MultiPolygon","id":598,"arcs":[[[1507]],[[1508]],[[1509]],[[1510]],[[1511]],[[1512]],[[1513]],[[1514]],[[1515]],[[1516]],[[1517]],[[1518]],[[1519]],[[1520]],[[1521]],[[1522]],[[1523]],[[1524]],[[1525]],[[1526]],[[-1023,1527,1528]],[[1529]],[[1530]],[[1531]],[[1532]],[[1533]]]},{"type":"Polygon","id":616,"arcs":[[1534,-1259,-285,1535,1536,-623,-632,1537,-627,1538]]},{"type":"MultiPolygon","id":630,"arcs":[[[1539]],[[1540]],[[1541]]]},{"type":"MultiPolygon","id":408,"arcs":[[[1542]],[[1543,1544,-1233,1545,-533]]]},{"type":"MultiPolygon","id":620,"arcs":[[[1546]],[[1547]],[[1548]],[[1549]],[[1550]],[[1551]],[[1552]],[[1553]],[[1554,-701]]]},{"type":"Polygon","id":600,"arcs":[[-318,-41,-294]]},{"type":"MultiPolygon","id":275,"arcs":[[[-676,1555,-1121]],[[-1118,-1139]]]},{"type":"MultiPolygon","id":258,"arcs":[[[1556]],[[1557]],[[1558]],[[1559]],[[1560]],[[1561]],[[1562]],[[1563]],[[1564]],[[1565]],[[1566]],[[1567]],[[1568]],[[1569]],[[1570]],[[1571]],[[1572]],[[1573]],[[1574]],[[1575]],[[1576]]]},{"type":"Polygon","id":634,"arcs":[[1577,1578]]},{"type":"Polygon","id":642,"arcs":[[1579,1580,-260,1581,-927,1582,-1271]]},{"type":"MultiPolygon","id":643,"arcs":[[[1583]],[[1584]],[[1585]],[[1586]],[[1587]],[[1588]],[[1589]],[[1590]],[[1591]],[[1592]],[[1593]],[[1594]],[[1595]],[[1596]],[[1597]],[[1598]],[[1599]],[[1600]],[[1601]],[[-1260,-1535,1602,-1257,1603]],[[1604]],[[1605]],[[1606]],[[1607]],[[1608]],[[1609]],[[1610]],[[1611]],[[1612]],[[1613]],[[1614]],[[1615]],[[1616]],[[1617]],[[1618]],[[1619]],[[1620]],[[1621]],[[1622]],[[1623]],[[1624]],[[1625]],[[1626]],[[1627]],[[1628]],[[1629]],[[1630]],[[1631]],[[1632]],[[1633]],[[1634]],[[1635]],[[1636]],[[1637]],[[1638]],[[1639]],[[1640]],[[1641]],[[1642]],[[1643]],[[1644]],[[1645]],[[1646]],[[1647]],[[1648]],[[1649]],[[1650]],[[-1544,-563,-1329,-561,-1183,1651,-225,-804,1652,1653,-283,-1263,-706,1654,-721,-1416,1655]],[[1656]],[[1657]],[[1658]],[[1659]],[[1660]],[[1661]],[[1662]],[[1663]],[[1664]],[[1665]],[[1666]],[[1667]],[[1668]],[[1669]],[[1670]],[[1671]],[[1672]],[[1673]],[[1674]],[[1675]],[[1676]],[[1677]],[[1678]],[[1679]],[[1680]],[[1681]],[[1682]],[[1683]],[[1684]],[[1685]]]},{"type":"Polygon","id":646,"arcs":[[1686,-228,-579,1687]]},{"type":"Polygon","id":732,"arcs":[[-1349,1688,-1268,-663]]},{"type":"MultiPolygon","id":682,"arcs":[[[1689]],[[1690]],[[1691]],[[-1238,1692,-1578,1693,-33,-1447,1694,1695,-1137,-1112]]]},{"type":"Polygon","id":729,"arcs":[[1696,-686,-713,1697,-333,1698,-1247,-679]]},{"type":"Polygon","id":728,"arcs":[[-712,-1189,1699,-577,-334,-1698]]},{"type":"Polygon","id":686,"arcs":[[-1303,-814,-824,1700,-816,1701,-1347]]},{"type":"Polygon","id":702,"arcs":[[1702]]},{"type":"MultiPolygon","id":239,"arcs":[[[1703]],[[1704]]]},{"type":"MultiPolygon","id":654,"arcs":[[[1705]],[[1706]]]},{"type":"MultiPolygon","id":90,"arcs":[[[1707]],[[1708]],[[1709]],[[1710]],[[1711]],[[1712]],[[1713]],[[1714]],[[1715]],[[1716]],[[1717]],[[1718]],[[1719]],[[1720]],[[1721]],[[1722]],[[1723]],[[1724]],[[1725]],[[1726]],[[1727]]]},{"type":"MultiPolygon","id":694,"arcs":[[[1728]],[[-1246,1729,-811]]]},{"type":"Polygon","id":222,"arcs":[[-902,1730,-889]]},{"type":"Polygon","id":674,"arcs":[[-1134]]},{"type":"Polygon","id":-99,"arcs":[[1731,-709,-639,1732]]},{"type":"Polygon","id":706,"arcs":[[-1185,-710,-1732,1733]]},{"type":"MultiPolygon","id":666,"arcs":[[[1734]],[[1735]]]},{"type":"Polygon","id":688,"arcs":[[-1582,-259,-1301,-1236,-1327,-277,-919,-928]]},{"type":"MultiPolygon","id":678,"arcs":[[[1736]],[[1737]]]},{"type":"Polygon","id":740,"arcs":[[-752,-314,-893,1738]]},{"type":"Polygon","id":703,"arcs":[[1739,-930,-211,-624,-1537]]},{"type":"Polygon","id":705,"arcs":[[-921,1740,-1132,-213,-929]]},{"type":"MultiPolygon","id":752,"arcs":[[[1741]],[[1742]],[[1743]],[[1744]],[[1745]],[[1746,-1417,-723]]]},{"type":"Polygon","id":748,"arcs":[[-1337,1747]]},{"type":"Polygon","id":534,"arcs":[[-1266,1748]]},{"type":"Polygon","id":690,"arcs":[[1749]]},{"type":"Polygon","id":760,"arcs":[[-1114,-1140,-1124,-1244,1750,1751]]},{"type":"MultiPolygon","id":796,"arcs":[[[1752]],[[1753]],[[1754]]]},{"type":"Polygon","id":148,"arcs":[[-1699,-338,-576,-1378,-1374,-1248]]},{"type":"Polygon","id":768,"arcs":[[-238,1755,-806,-242]]},{"type":"MultiPolygon","id":764,"arcs":[[[1756]],[[1757]],[[1758]],[[1759]],[[1760]],[[1761]],[[1762]],[[1763]],[[1764]],[[-1241,-1198,1765,-1361,1766,-1325]]]},{"type":"MultiPolygon","id":762,"arcs":[[[-1192]],[[1767]],[[-1190,-558,-8,1768]]]},{"type":"MultiPolygon","id":795,"arcs":[[[1769]],[[-6,-1104,1770,-1181,1771]]]},{"type":"MultiPolygon","id":626,"arcs":[[[1772,-936]],[[-938,1773]],[[1774]]]},{"type":"MultiPolygon","id":776,"arcs":[[[1775]],[[1776]],[[1777]]]},{"type":"MultiPolygon","id":780,"arcs":[[[1778]],[[1779]]]},{"type":"MultiPolygon","id":788,"arcs":[[[1780]],[[1781]],[[-1250,-658,1782]]]},{"type":"MultiPolygon","id":792,"arcs":[[[1783]],[[-802,-50,-221,-1109,-1115,-1752,1784]],[[1785,-868,-256]]]},{"type":"MultiPolygon","id":158,"arcs":[[[1786]],[[1787]]]},{"type":"MultiPolygon","id":834,"arcs":[[[1788]],[[1789]],[[1790]],[[-1187,1791,-1342,-1353,1792,-580,-226,-1687,1793]]]},{"type":"Polygon","id":800,"arcs":[[-1794,-1688,-578,-1700,-1188]]},{"type":"MultiPolygon","id":804,"arcs":[[[1794]],[[1795,-1580,-1272,-1583,-926,-1740,-1536,-284,-1654]]]},{"type":"Polygon","id":858,"arcs":[[1796,-43,-317]]},{"type":"MultiPolygon","id":840,"arcs":[[[1797]],[[1798]],[[1799]],[[1800]],[[1801]],[[1802]],[[1803]],[[1804]],[[1805]],[[1806]],[[1807]],[[1808]],[[1809]],[[1810]],[[1811]],[[1812]],[[1813]],[[1814]],[[1815]],[[1816]],[[1817]],[[1818]],[[1819]],[[1820]],[[1821]],[[1822]],[[1823]],[[1824]],[[1825]],[[1826]],[[1827]],[[1828]],[[1829]],[[1830]],[[1831]],[[1832]],[[1833]],[[1834]],[[1835]],[[1836]],[[1837]],[[1838]],[[1839]],[[1840]],[[1841]],[[1842]],[[1843]],[[1844]],[[1845]],[[1846]],[[1847]],[[1848]],[[1849]],[[1850]],[[1851]],[[1852]],[[1853]],[[1854]],[[-355,1855,-1295,1856,-441]],[[1857]],[[1858]],[[1859]],[[1860]],[[1861]],[[1862]],[[1863]],[[1864]],[[1865]],[[1866]],[[1867]],[[1868]],[[1869]],[[1870]],[[1871]],[[1872]],[[1873]],[[1874]],[[1875]],[[1876]],[[1877]],[[1878]],[[1879]],[[1880]],[[1881]],[[1882]],[[1883]],[[1884]],[[1885]],[[1886]],[[1887]],[[1888]],[[1889]],[[1890]],[[1891]],[[1892]],[[1893]],[[1894]],[[1895]],[[1896]],[[1897]],[[1898]],[[1899]],[[1900]],[[1901]],[[1902]],[[1903]],[[1904]],[[1905]],[[1906]],[[1907]],[[1908]],[[1909]],[[1910]],[[1911]],[[1912]],[[1913]],[[1914]],[[1915]],[[1916]],[[1917]],[[1918]],[[1919]],[[1920]],[[1921]],[[1922]],[[1923]],[[-443,1924,-383,1925]]]},{"type":"MultiPolygon","id":860,"arcs":[[[-1193]],[[-1194]],[[-1191,-1769,-7,-1772,-1180],[-1768]]]},{"type":"Polygon","id":336,"arcs":[[1926]]},{"type":"MultiPolygon","id":670,"arcs":[[[1927]],[[1928]],[[1929]]]},{"type":"MultiPolygon","id":862,"arcs":[[[1930]],[[1931]],[[1932]],[[1933]],[[-894,-321,-588,1934]]]},{"type":"MultiPolygon","id":92,"arcs":[[[1935]],[[1936]],[[1937]]]},{"type":"MultiPolygon","id":850,"arcs":[[[1938]],[[1939]],[[1940]]]},{"type":"MultiPolygon","id":704,"arcs":[[[1941]],[[1942]],[[1943]],[[1944]],[[1945]],[[1946]],[[1947]],[[1948,-1200,-1240,-539]]]},{"type":"MultiPolygon","id":548,"arcs":[[[1949]],[[1950]],[[1951]],[[1952]],[[1953]],[[1954]],[[1955]],[[1956]],[[1957]],[[1958]],[[1959]],[[1960]],[[1961]],[[1962]]]},{"type":"MultiPolygon","id":876,"arcs":[[[1963]],[[1964]]]},{"type":"MultiPolygon","id":882,"arcs":[[[1965]],[[1966]]]},{"type":"MultiPolygon","id":887,"arcs":[[[1967]],[[1968]],[[1969]],[[1970]],[[1971,-1695,-1446]]]},{"type":"MultiPolygon","id":710,"arcs":[[[1972]],[[-1338,-1748,-1336,1973,-1366,-331,1974],[-1256]]]},{"type":"Polygon","id":894,"arcs":[[-1352,-1340,1975,-1365,-9,-581,-1793]]},{"type":"Polygon","id":716,"arcs":[[-1975,-330,-1976,-1339]]}]},"land":{"type":"MultiPolygon","arcs":[[[0]],[[1390,228],[1770,1181,1651,221,1102],[3,1104],[1084],[1086,545],[1085,547],[1094,550],[1093,552],[1092,554],[535,1264,537,1948,1196,1765,1359,1766,1325,252,1089,1448,1106,1109,1238,1692,1578,1693,33,1447,30,1444,1971,1695,1137,1119,677,1696,683,641,1732,1733,1185,1791,1342,1973,1366,10,581,12,583,775,824,573,1378,236,1755,806,564,807,566,1244,1729,811,822,1700,814,1701,1347,1688,1268,664,1782,1250,680,1555,1121,1242,1750,1784,802,1652,1795,1580,254,1785,865,19,1327,908,279,919,1740,1132,761,1269,763,699,1554,701,764,232,1385,1389,635,654,630,1537,625,1538,1602,1257,1603,1260,1263,707,1654,721,1746,1417,1655,1544,1231,1545,533,897]],[[15]],[[21]],[[22]],[[23]],[[26]],[[27]],[[28]],[[29]],[[36]],[[38,497]],[[39]],[[1796,43,518,1456,674,590,1453,606,1380,900,1730,889,1293,1856,441,1924,383,1925,443,353,1855,1292,291,886,902,1379,604,1454,592,1934,894,1738,752,315]],[[53]],[[54]],[[55]],[[56]],[[57]],[[58]],[[59]],[[60]],[[61]],[[62]],[[63]],[[64]],[[65]],[[66]],[[67]],[[68]],[[69]],[[70]],[[71]],[[72]],[[73]],[[74]],[[75]],[[76]],[[77]],[[78]],[[79]],[[80]],[[81]],[[82]],[[83]],[[84]],[[85]],[[86]],[[87]],[[88]],[[89]],[[90]],[[91]],[[92]],[[93]],[[94]],[[95]],[[96]],[[97]],[[98]],[[99]],[[100]],[[101]],[[102]],[[103]],[[104]],[[105]],[[106]],[[107]],[[108]],[[109]],[[110]],[[111]],[[112]],[[113]],[[114]],[[115]],[[116]],[[117]],[[118]],[[119]],[[120]],[[121]],[[122]],[[123]],[[124]],[[125]],[[126]],[[127]],[[128]],[[129]],[[130]],[[131]],[[132]],[[133]],[[134]],[[135]],[[136]],[[137]],[[138]],[[139]],[[140]],[[141]],[[142]],[[143]],[[144]],[[145]],[[146]],[[147]],[[148]],[[149]],[[150]],[[151]],[[152]],[[153]],[[154]],[[155]],[[156]],[[157]],[[158]],[[159]],[[160]],[[161]],[[162]],[[163]],[[164]],[[165]],[[166]],[[167]],[[168]],[[169]],[[170]],[[171]],[[172]],[[173]],[[174]],[[175]],[[176]],[[177]],[[178]],[[179]],[[180]],[[181]],[[182]],[[183]],[[184]],[[185]],[[186]],[[187]],[[188]],[[189]],[[190]],[[191]],[[192]],[[193]],[[194]],[[195]],[[196]],[[197]],[[198]],[[199]],[[200]],[[201]],[[202]],[[203]],[[204]],[[205]],[[206]],[[207]],[[208]],[[209]],[[245]],[[246]],[[247]],[[248]],[[249]],[[250]],[[260]],[[261]],[[262]],[[263]],[[264]],[[265]],[[266]],[[267]],[[268]],[[269]],[[270]],[[271]],[[272]],[[273]],[[274]],[[275]],[[281]],[[287]],[[288]],[[292]],[[297]],[[298]],[[299]],[[300]],[[301]],[[302]],[[303]],[[304]],[[305]],[[306]],[[307]],[[308]],[[309]],[[310]],[[311]],[[312]],[[322]],[[1361,326,323,1362,1065]],[[338]],[[339]],[[340]],[[341]],[[342]],[[343]],[[344]],[[345]],[[346]],[[347]],[[348]],[[349]],[[350]],[[351]],[[352]],[[355]],[[356]],[[357]],[[358]],[[359]],[[360]],[[361]],[[362]],[[363]],[[364]],[[365]],[[366]],[[367]],[[368]],[[369]],[[370]],[[371]],[[372]],[[373]],[[374]],[[375]],[[376]],[[377]],[[378]],[[379]],[[380]],[[381]],[[384]],[[385]],[[386]],[[387]],[[388]],[[389]],[[390]],[[391]],[[392]],[[393]],[[394]],[[395]],[[396]],[[397]],[[398]],[[399]],[[400]],[[401]],[[402]],[[403]],[[404]],[[405]],[[406]],[[407]],[[408]],[[409]],[[410]],[[411]],[[412]],[[413]],[[414]],[[415]],[[416]],[[417]],[[418]],[[419]],[[420]],[[421]],[[422]],[[423]],[[424]],[[425]],[[426]],[[427]],[[428]],[[429]],[[430]],[[431]],[[432]],[[433]],[[434]],[[435]],[[436]],[[437]],[[438]],[[439]],[[444]],[[445]],[[446]],[[447]],[[448]],[[449]],[[450]],[[451]],[[452]],[[453]],[[454]],[[455]],[[456]],[[457]],[[458]],[[459]],[[460]],[[461]],[[462]],[[463]],[[464]],[[465]],[[466]],[[467]],[[468]],[[469]],[[470]],[[471]],[[472]],[[473]],[[474]],[[475]],[[476]],[[477]],[[478]],[[479]],[[480]],[[481]],[[482]],[[483]],[[488]],[[489]],[[490]],[[491]],[[492]],[[493]],[[494]],[[495]],[[496]],[[498]],[[499]],[[500]],[[501]],[[502]],[[503]],[[504]],[[505]],[[506]],[[507]],[[508]],[[509]],[[510]],[[511]],[[512]],[[513]],[[514]],[[515]],[[516]],[[517]],[[520]],[[521]],[[522]],[[523]],[[524]],[[525]],[[526]],[[527]],[[528]],[[529]],[[530]],[[531]],[[585]],[[586]],[[593]],[[594]],[[595]],[[596]],[[597]],[[598]],[[599]],[[600]],[[601]],[[602]],[[603]],[[608]],[[609]],[[610]],[[611]],[[612]],[[613]],[[614]],[[615]],[[616]],[[617]],[[618]],[[620,621]],[[627]],[[628]],[[629]],[[637]],[[642]],[[643]],[[644]],[[645]],[[646]],[[647]],[[648]],[[649]],[[650]],[[651]],[[652]],[[653]],[[656,923]],[[665]],[[666]],[[667]],[[668]],[[669]],[[670]],[[671]],[[672]],[[681]],[[682]],[[686]],[[687]],[[688]],[[689]],[[690]],[[691]],[[692]],[[693]],[[694]],[[695]],[[696]],[[702]],[[703]],[[704]],[[713]],[[714]],[[715]],[[716]],[[717]],[[718]],[[719]],[[724]],[[725]],[[726]],[[727]],[[728]],[[729]],[[730]],[[731]],[[732]],[[733]],[[734]],[[735]],[[736]],[[737]],[[738]],[[739]],[[740]],[[741]],[[742]],[[743]],[[744]],[[745]],[[746]],[[747]],[[748]],[[749]],[[750]],[[753]],[[754]],[[755]],[[756]],[[757]],[[758]],[[765]],[[766]],[[767]],[[768]],[[769]],[[770]],[[771]],[[772]],[[773]],[[774]],[[777]],[[778]],[[780,1100]],[[781]],[[782]],[[783]],[[784]],[[785]],[[786]],[[787]],[[788]],[[789]],[[790]],[[791]],[[792]],[[793]],[[794]],[[795]],[[796]],[[797]],[[798]],[[799]],[[800]],[[804]],[[816]],[[817]],[[818]],[[819]],[[820]],[[821]],[[825]],[[826]],[[827]],[[828]],[[829]],[[830]],[[831]],[[832]],[[833]],[[834]],[[835]],[[836]],[[837]],[[838]],[[839]],[[840]],[[841]],[[842]],[[843]],[[844]],[[845]],[[846]],[[847]],[[848]],[[849]],[[850]],[[851]],[[852]],[[853]],[[854]],[[855]],[[856]],[[857]],[[858]],[[859]],[[860]],[[861]],[[862]],[[863]],[[864]],[[868]],[[869]],[[870]],[[871]],[[872]],[[873]],[[874]],[[875]],[[876]],[[877]],[[878]],[[879]],[[880]],[[881]],[[882]],[[883]],[[884]],[[885]],[[891]],[[895]],[[896]],[[898]],[[903]],[[904]],[[905]],[[906]],[[909]],[[910]],[[911]],[[912]],[[913]],[[914]],[[915]],[[916]],[[917]],[[922]],[[924]],[[930]],[[931]],[[932]],[[933]],[[936,1773,934,1772]],[[938]],[[939]],[[940]],[[941]],[[942]],[[943]],[[944]],[[945]],[[946]],[[947]],[[948]],[[949]],[[950]],[[951]],[[952]],[[953]],[[954]],[[955]],[[956]],[[957]],[[958]],[[959]],[[960]],[[961]],[[962]],[[963]],[[964]],[[965]],[[966]],[[967]],[[968]],[[969]],[[970]],[[971]],[[972]],[[973]],[[974]],[[975]],[[976]],[[977]],[[978]],[[979]],[[980]],[[981]],[[982]],[[983]],[[984]],[[985]],[[986]],[[987]],[[988]],[[989]],[[990]],[[991]],[[992]],[[993]],[[994]],[[995]],[[996]],[[997]],[[998]],[[999]],[[1000]],[[1001]],[[1002]],[[1003]],[[1004]],[[1005]],[[1006]],[[1007]],[[1008]],[[1009]],[[1010]],[[1011]],[[1012]],[[1013]],[[1014]],[[1015]],[[1016]],[[1017]],[[1018]],[[1019]],[[1020]],[[1023,1021,1527,1528]],[[1024]],[[1025]],[[1026]],[[1027]],[[1028]],[[1029]],[[1030]],[[1031]],[[1032]],[[1033]],[[1034]],[[1035]],[[1036]],[[1037]],[[1038]],[[1039]],[[1040]],[[1041]],[[1042]],[[1043]],[[1044]],[[1045]],[[1046]],[[1047]],[[1048]],[[1049]],[[1050]],[[1051]],[[1052]],[[1053]],[[1054]],[[1055]],[[1056]],[[1057]],[[1058]],[[1059]],[[1060]],[[1061]],[[1062,1356]],[[1064]],[[1067]],[[1068]],[[1069]],[[1070]],[[1071]],[[1072]],[[1073]],[[1074]],[[1075]],[[1076]],[[1077]],[[1078]],[[1079]],[[1080]],[[1081]],[[1082]],[[1083]],[[1095]],[[1096]],[[1097]],[[1098]],[[1099]],[[1101]],[[1115]],[[1124]],[[1125]],[[1126]],[[1127]],[[1128]],[[1129]],[[1130]],[[1134]],[[1135]],[[1140]],[[1141]],[[1142]],[[1143]],[[1144]],[[1145]],[[1146]],[[1147]],[[1148]],[[1149]],[[1150]],[[1151]],[[1152]],[[1153]],[[1154]],[[1155]],[[1156]],[[1157]],[[1158]],[[1159]],[[1160]],[[1161]],[[1162]],[[1163]],[[1164]],[[1165]],[[1166]],[[1167]],[[1168]],[[1169]],[[1170]],[[1171]],[[1172]],[[1173]],[[1175]],[[1176]],[[1177]],[[1183]],[[1194]],[[1195]],[[1200]],[[1201]],[[1202]],[[1203]],[[1204]],[[1205]],[[1206]],[[1207]],[[1208]],[[1209]],[[1210]],[[1211]],[[1212]],[[1213]],[[1214]],[[1215]],[[1216]],[[1217]],[[1218]],[[1219]],[[1220]],[[1221]],[[1222]],[[1223]],[[1224]],[[1225]],[[1226]],[[1227]],[[1228]],[[1229]],[[1230]],[[1236]],[[1251]],[[1252]],[[1253]],[[1254]],[[1266,1748]],[[1272]],[[1273]],[[1274]],[[1275]],[[1276]],[[1277]],[[1278]],[[1279]],[[1280]],[[1281]],[[1282]],[[1283]],[[1284]],[[1285]],[[1286]],[[1287]],[[1288]],[[1289]],[[1290]],[[1291]],[[1295]],[[1296]],[[1297]],[[1298]],[[1299]],[[1304]],[[1305]],[[1306]],[[1307]],[[1308]],[[1309]],[[1310]],[[1311]],[[1312]],[[1313]],[[1314]],[[1315]],[[1316]],[[1317]],[[1318]],[[1319]],[[1320]],[[1321]],[[1322]],[[1323]],[[1329]],[[1330]],[[1331]],[[1332]],[[1333]],[[1334]],[[1345]],[[1349]],[[1350]],[[1353]],[[1354]],[[1355]],[[1357]],[[1358]],[[1363]],[[1367]],[[1368]],[[1369]],[[1370]],[[1371]],[[1372]],[[1375]],[[1376]],[[1381]],[[1382]],[[1383]],[[1384]],[[1386]],[[1387]],[[1388]],[[1391]],[[1392]],[[1393]],[[1394]],[[1395]],[[1396]],[[1397]],[[1398]],[[1399]],[[1400]],[[1401]],[[1402]],[[1403]],[[1404]],[[1405]],[[1406]],[[1407]],[[1408]],[[1409]],[[1410]],[[1411]],[[1412]],[[1413]],[[1414]],[[1418]],[[1419]],[[1420]],[[1421]],[[1422]],[[1423]],[[1424]],[[1425]],[[1426]],[[1427]],[[1428]],[[1429]],[[1430]],[[1431]],[[1432]],[[1433]],[[1434]],[[1435]],[[1436]],[[1437]],[[1438]],[[1439]],[[1440]],[[1441]],[[1442]],[[1443]],[[1449]],[[1450]],[[1451]],[[1452]],[[1455]],[[1457]],[[1458]],[[1459]],[[1460]],[[1461]],[[1462]],[[1463]],[[1464]],[[1465]],[[1466]],[[1467]],[[1468]],[[1469]],[[1470]],[[1471]],[[1472]],[[1473]],[[1474]],[[1475]],[[1476]],[[1477]],[[1478]],[[1479]],[[1480]],[[1481]],[[1482]],[[1483]],[[1484]],[[1485]],[[1486]],[[1487]],[[1488]],[[1489]],[[1490]],[[1491]],[[1492]],[[1493]],[[1494]],[[1495]],[[1496]],[[1497]],[[1498]],[[1499]],[[1500]],[[1501]],[[1502]],[[1503]],[[1504]],[[1505]],[[1506]],[[1507]],[[1508]],[[1509]],[[1510]],[[1511]],[[1512]],[[1513]],[[1514]],[[1515]],[[1516]],[[1517]],[[1518]],[[1519]],[[1520]],[[1521]],[[1522]],[[1523]],[[1524]],[[1525]],[[1526]],[[1529]],[[1530]],[[1531]],[[1532]],[[1533]],[[1539]],[[1540]],[[1541]],[[1542]],[[1546]],[[1547]],[[1548]],[[1549]],[[1550]],[[1551]],[[1552]],[[1553]],[[1556]],[[1557]],[[1558]],[[1559]],[[1560]],[[1561]],[[1562]],[[1563]],[[1564]],[[1565]],[[1566]],[[1567]],[[1568]],[[1569]],[[1570]],[[1571]],[[1572]],[[1573]],[[1574]],[[1575]],[[1576]],[[1583]],[[1584]],[[1585]],[[1586]],[[1587]],[[1588]],[[1589]],[[1590]],[[1591]],[[1592]],[[1593]],[[1594]],[[1595]],[[1596]],[[1597]],[[1598]],[[1599]],[[1600]],[[1601]],[[1604]],[[1605]],[[1606]],[[1607]],[[1608]],[[1609]],[[1610]],[[1611]],[[1612]],[[1613]],[[1614]],[[1615]],[[1616]],[[1617]],[[1618]],[[1619]],[[1620]],[[1621]],[[1622]],[[1623]],[[1624]],[[1625]],[[1626]],[[1627]],[[1628]],[[1629]],[[1630]],[[1631]],[[1632]],[[1633]],[[1634]],[[1635]],[[1636]],[[1637]],[[1638]],[[1639]],[[1640]],[[1641]],[[1642]],[[1643]],[[1644]],[[1645]],[[1646]],[[1647]],[[1648]],[[1649]],[[1650]],[[1656]],[[1657]],[[1658]],[[1659]],[[1660]],[[1661]],[[1662]],[[1663]],[[1664]],[[1665]],[[1666]],[[1667]],[[1668]],[[1669]],[[1670]],[[1671]],[[1672]],[[1673]],[[1674]],[[1675]],[[1676]],[[1677]],[[1678]],[[1679]],[[1680]],[[1681]],[[1682]],[[1683]],[[1684]],[[1685]],[[1689]],[[1690]],[[1691]],[[1702]],[[1703]],[[1704]],[[1705]],[[1706]],[[1707]],[[1708]],[[1709]],[[1710]],[[1711]],[[1712]],[[1713]],[[1714]],[[1715]],[[1716]],[[1717]],[[1718]],[[1719]],[[1720]],[[1721]],[[1722]],[[1723]],[[1724]],[[1725]],[[1726]],[[1727]],[[1728]],[[1734]],[[1735]],[[1736]],[[1737]],[[1741]],[[1742]],[[1743]],[[1744]],[[1745]],[[1749]],[[1752]],[[1753]],[[1754]],[[1756]],[[1757]],[[1758]],[[1759]],[[1760]],[[1761]],[[1762]],[[1763]],[[1764]],[[1769]],[[1774]],[[1775]],[[1776]],[[1777]],[[1778]],[[1779]],[[1780]],[[1781]],[[1783]],[[1786]],[[1787]],[[1788]],[[1789]],[[1790]],[[1794]],[[1797]],[[1798]],[[1799]],[[1800]],[[1801]],[[1802]],[[1803]],[[1804]],[[1805]],[[1806]],[[1807]],[[1808]],[[1809]],[[1810]],[[1811]],[[1812]],[[1813]],[[1814]],[[1815]],[[1816]],[[1817]],[[1818]],[[1819]],[[1820]],[[1821]],[[1822]],[[1823]],[[1824]],[[1825]],[[1826]],[[1827]],[[1828]],[[1829]],[[1830]],[[1831]],[[1832]],[[1833]],[[1834]],[[1835]],[[1836]],[[1837]],[[1838]],[[1839]],[[1840]],[[1841]],[[1842]],[[1843]],[[1844]],[[1845]],[[1846]],[[1847]],[[1848]],[[1849]],[[1850]],[[1851]],[[1852]],[[1853]],[[1854]],[[1857]],[[1858]],[[1859]],[[1860]],[[1861]],[[1862]],[[1863]],[[1864]],[[1865]],[[1866]],[[1867]],[[1868]],[[1869]],[[1870]],[[1871]],[[1872]],[[1873]],[[1874]],[[1875]],[[1876]],[[1877]],[[1878]],[[1879]],[[1880]],[[1881]],[[1882]],[[1883]],[[1884]],[[1885]],[[1886]],[[1887]],[[1888]],[[1889]],[[1890]],[[1891]],[[1892]],[[1893]],[[1894]],[[1895]],[[1896]],[[1897]],[[1898]],[[1899]],[[1900]],[[1901]],[[1902]],[[1903]],[[1904]],[[1905]],[[1906]],[[1907]],[[1908]],[[1909]],[[1910]],[[1911]],[[1912]],[[1913]],[[1914]],[[1915]],[[1916]],[[1917]],[[1918]],[[1919]],[[1920]],[[1921]],[[1922]],[[1923]],[[1926]],[[1927]],[[1928]],[[1929]],[[1930]],[[1931]],[[1932]],[[1933]],[[1935]],[[1936]],[[1937]],[[1938]],[[1939]],[[1940]],[[1941]],[[1942]],[[1943]],[[1944]],[[1945]],[[1946]],[[1947]],[[1949]],[[1950]],[[1951]],[[1952]],[[1953]],[[1954]],[[1955]],[[1956]],[[1957]],[[1958]],[[1959]],[[1960]],[[1961]],[[1962]],[[1963]],[[1964]],[[1965]],[[1966]],[[1967]],[[1968]],[[1969]],[[1970]],[[1972]]]}},"arcs":[[[30583,59015],[1,-16],[-13,9],[-17,35],[-17,27],[4,29],[4,10],[18,-27],[17,-50],[3,-17]],[[70802,73289],[-14,-3],[-20,13],[-8,21],[-3,3],[-16,-13],[-31,-18],[-52,-45],[1,-12],[34,-46],[8,-15],[4,-5]],[[70705,73169],[-30,-22],[-66,-50],[-43,-41],[-11,-2],[-26,17],[-38,21],[-11,-1],[-89,-3],[-81,-8],[-35,-10],[-63,-9],[-40,-3],[-25,-16],[-28,-21],[-29,-13],[-21,-5],[-26,-19],[-17,-39],[-49,-57],[-27,-28],[-14,-31],[-15,-3],[-27,5],[-21,-34],[-23,-48],[-42,-70],[-22,-29],[-13,-46],[10,-24],[34,-35],[15,-34],[8,-27],[16,-68],[10,-68],[14,-29],[5,-50],[3,-30],[-8,-22],[-7,-24],[0,-23],[9,-23],[8,-21],[4,-17],[-5,-18],[-16,-29],[-8,-29],[-17,-48],[-27,-33],[-18,-24],[-19,-51],[-31,-57],[-13,-47],[-14,-26],[-14,-14],[4,-25],[12,-32],[20,-35],[-1,-56],[-1,-40],[1,-48],[-11,-41],[-57,-39],[-54,-17],[-66,-1],[-25,6],[-20,9],[-72,44],[-29,-26],[-6,-63],[52,-103],[22,-57],[24,-95],[18,-50],[-7,-46],[-47,-52],[-47,-49],[-61,-11],[-37,-17],[-19,-26],[-13,-108],[-14,-39],[1,-47],[-13,-53],[-19,-35],[-14,-55],[4,-107],[7,-180],[-26,-56],[-29,-58],[-30,-41],[-29,-19],[-24,7],[-20,36],[-11,29],[-21,25],[-21,-5],[-22,-23],[-34,8],[-29,23],[-15,-3],[-9,-23],[-31,-49],[-77,-74],[-31,-6],[-14,-19],[5,-30],[14,-25],[24,-18],[1,-20],[-21,-18],[-18,-20],[-40,-25],[-46,-10],[-47,15],[-25,33],[-29,3],[-26,-24],[-27,-40],[-30,-86],[-8,-15],[-8,-13],[-19,-19],[-28,-30],[-14,-63],[-17,-112],[4,-61],[2,-104],[-7,-74],[-12,-48],[2,-38],[19,-43],[-8,-28],[-15,-32],[-15,-17],[-60,-33],[-82,-44],[-54,-29],[-81,-43],[-24,-10],[-49,-4],[-25,7],[-34,1],[-51,-1],[-36,-12],[-35,-21],[-26,-27],[-15,-27],[-5,-13],[-36,22],[-112,40],[-303,-52],[-29,10],[-103,60],[-133,78],[-83,48],[-106,63]],[[66900,69042],[73,156]],[[66973,69198],[63,135],[63,136],[63,134],[7,47],[1,92],[-16,122],[-27,56],[-87,23],[-65,17],[-72,18],[-9,7],[-8,95],[3,43],[-4,82],[0,63],[11,105],[0,46],[-33,202],[-18,112],[-19,116],[-4,37],[0,45],[43,107],[14,23],[26,54],[16,28],[-3,19],[-28,12],[-42,1],[-23,16],[-17,29],[-7,42],[11,75],[-11,145],[23,72],[21,51],[68,7],[-24,57],[-11,33],[-8,9],[-2,15],[3,16],[18,5],[12,19],[19,27],[10,11],[2,33],[9,23],[14,28],[11,33],[-3,38],[10,46],[5,28],[7,25],[-6,36],[-6,31],[-1,36],[11,9],[13,14],[3,28],[7,36],[6,29],[9,23],[1,23],[-5,38]],[[67017,72361],[23,5],[9,-20],[12,-28],[34,-50],[21,-15],[28,-8],[33,7],[27,10],[13,-3],[29,-36],[35,-52],[11,-23],[5,-35],[10,-11],[22,35],[21,12],[20,-7],[21,-4],[22,13],[9,9],[38,45],[34,35],[21,21],[8,70],[9,40],[14,24],[-5,28],[-6,23],[-6,29],[6,16],[14,7],[34,0],[60,32],[50,31],[46,26],[21,4],[20,-4],[9,7],[2,25],[12,26],[25,21],[49,44],[42,66],[15,50],[10,73],[20,113],[22,124],[8,54],[10,42],[37,35],[39,26],[59,5],[70,3],[15,67],[9,57],[12,30],[16,24],[6,5],[38,-35],[58,-54],[67,-27],[34,-13],[14,2]],[[68478,73357],[85,13],[67,-21],[35,-58],[34,-14],[34,28],[21,5],[8,-18],[17,-8],[26,3],[15,-16],[1,-16]],[[68821,73255],[2,-18],[19,-44],[35,-53],[30,-13],[40,41],[14,-5],[6,14],[4,30],[25,28],[44,27],[25,23],[9,20],[15,5],[16,-5],[12,7],[4,18],[5,8],[8,7],[7,3],[14,-5],[25,-34],[36,-62],[24,-29],[10,5],[14,19],[17,34],[4,48],[-8,62],[6,50],[20,39],[37,23],[54,9],[33,-5],[13,-20],[16,-11],[21,-2],[19,22],[18,48],[1,58],[-16,69],[4,22],[7,10],[21,25],[29,52],[28,68],[27,82],[33,50],[40,20],[48,-22],[57,-64],[21,-79],[-14,-93],[-1,-52],[11,-10],[20,3],[27,15],[18,0],[8,-13],[0,-26],[-10,-40],[-11,-111],[-7,-96],[-7,-94],[-6,-84],[11,-64],[16,-98],[18,-65],[19,-21],[19,-7],[19,6],[39,41],[59,78],[57,47],[83,27],[28,82],[38,55],[88,81],[47,31],[28,6],[34,-15],[8,-5],[7,-4],[17,-7],[4,-25],[-5,-26],[-19,-22],[-6,-17],[8,-13],[26,-5],[56,30],[35,19],[25,8],[10,24],[16,25],[25,2],[26,-13],[22,-8],[38,7],[20,-21],[28,-41],[12,-26],[4,-6]],[[56657,45580],[6,-75],[6,-105],[4,-76],[5,-33],[1,-18],[-5,-20],[-4,-45],[-8,-40],[-4,-28],[4,-51],[-3,-74],[-3,-78],[-1,-75],[10,-134],[-1,-41],[-13,-70],[-10,-53],[-6,-62],[-2,-32],[24,-91],[-1,-18],[-18,-6],[-15,-1],[-58,0],[-83,0],[-82,0],[-83,0],[-76,0],[-72,0],[-64,0],[0,-90],[0,-185],[0,-185],[0,-185],[0,-185],[0,-184],[0,-185],[0,-185],[0,-185],[0,-133],[17,-177],[30,-193],[12,-18],[31,-35],[43,-73],[24,-54],[49,-95],[65,-122],[63,-108],[55,-96]],[[56494,41681],[-87,-34],[-123,-47],[-83,-32],[-101,-39],[-68,-25],[-83,-30],[-14,0],[-22,21],[-49,4],[-57,-29],[-45,-7],[-33,13],[-33,25],[-32,38],[-55,14],[-78,-11],[-76,8],[-73,24],[-52,10],[-32,-5],[-33,8],[-36,22],[-30,36],[-36,77],[-28,73],[-8,10],[-9,12],[-8,3],[-80,2],[-76,2],[-44,0],[-106,0],[-106,1],[-107,0],[-106,0],[-106,1],[-106,0],[-107,0],[-106,1],[-56,0],[-53,-6],[-58,-7],[-8,3],[-14,9],[-9,16],[-31,42],[-28,32],[-36,53],[-24,58],[-20,19],[-36,10],[-27,10],[-21,3],[-39,-28],[-29,-27],[-20,-26],[-36,-30],[-30,-31],[-52,4],[-12,-4],[-29,2],[-27,26],[-28,-2],[-31,-34],[-45,-13]],[[53261,41906],[11,218],[11,96],[0,116],[-7,298],[-7,41],[-5,48],[27,36],[14,28],[19,50],[13,69],[16,153],[58,352],[27,345],[35,163],[13,183],[96,236],[24,145],[50,72],[70,75],[51,135],[24,94],[28,179],[-1,187],[18,250],[-4,72],[-26,99],[-5,71],[-24,70],[-27,53],[-12,94],[-45,149],[-13,99],[-21,71],[-4,88],[-11,93],[-22,92],[-22,105],[0,32],[14,40],[12,13],[-4,-20],[-8,-23],[2,-19],[84,184],[6,36],[-3,41],[-1,49],[4,57],[-80,340],[-64,316],[-10,159],[-84,210],[-33,137],[-19,96],[-15,36],[6,18],[21,5],[49,22],[65,24],[61,56],[17,24]],[[53630,48464],[32,5],[33,-15],[12,11],[7,1],[77,0],[32,4],[59,-1],[38,-5],[21,-6],[58,-10],[72,2],[26,5],[94,4],[93,3],[84,3],[93,-1],[70,0],[33,-20],[29,-38],[13,-34],[7,-15],[9,-37],[16,-28],[5,-45],[-4,-60],[2,-72],[9,-85],[20,-89],[29,-93],[13,-73],[-4,-55],[9,-58],[22,-61],[16,-32],[10,-24],[25,-94],[46,-149],[35,-111],[12,-14],[17,5],[38,11],[37,2],[27,-23],[11,4],[40,45],[39,13],[42,18],[22,19],[25,0],[68,-36],[13,-2],[55,0],[55,21],[8,149],[0,30],[14,56],[17,49],[2,47],[-1,64],[12,78],[37,62],[59,29],[34,6],[54,17],[81,18],[30,-3],[2,-8],[-17,-108],[0,-35],[6,-35],[14,-20],[84,-2],[78,-2],[89,-7],[66,-5],[9,-5],[7,-8],[10,-53],[-3,-104],[-15,-152],[6,-142],[27,-132],[2,-203],[-9,-121],[-12,-153],[-4,-173],[12,-72],[25,-76],[39,-79],[30,-102],[22,-126],[8,-79],[-6,-33],[0,-56],[7,-81],[-8,-53],[-21,-27],[-7,-36],[11,-69],[2,-63],[9,-24],[6,-18],[10,-2],[22,22],[26,42],[20,18],[30,-2],[41,-12],[73,-4],[22,7],[67,57],[18,4],[27,-5],[38,-17],[38,-4],[19,18],[1,23],[6,30],[11,11]],[[53392,48525],[-4,16],[-12,57],[7,54],[7,41],[-8,82],[-18,74],[-20,93],[-6,18]],[[53338,48960],[16,30],[25,66],[11,34],[28,8],[11,23],[8,39],[3,22],[32,18],[39,33],[22,35],[22,22],[13,1],[10,-9],[25,-61],[21,-39],[7,-9]],[[53631,49173],[-5,-10],[-30,-25],[-33,-24],[-43,-97],[-22,-42],[-6,-11],[-20,-23],[-14,-20],[1,-11],[9,-12],[10,-21],[-1,-159],[-4,-156],[-6,-14],[-27,-5],[-36,-11],[-12,-7]],[[32499,62339],[-44,-29],[2,17],[35,40],[13,-3],[-6,-25]],[[55573,76351],[11,-13],[23,-57],[15,-50],[30,-17],[16,-19],[22,-30],[10,-30],[15,-91],[2,-55],[-5,-26]],[[55712,75963],[-3,-6],[-14,-90],[3,-46],[0,-30],[-11,-12],[-7,-19],[12,-74],[-2,-32],[1,-37],[22,-83],[13,-26],[11,-12],[15,-77],[9,-13],[36,7],[17,-9],[7,-18],[2,-12]],[[55823,75374],[-3,-43],[9,-33],[12,-35],[0,-20],[-8,-34],[-14,-40],[-19,-15],[-21,-13],[-10,-31],[-5,-33],[-10,-24],[-5,-27],[-9,-55],[-2,-19],[-15,-20],[-22,-8],[-19,-2],[-14,-9],[-6,-19],[-13,-15],[-8,-7],[0,-16],[10,-35],[10,-28],[0,-23],[-5,-6],[-16,3],[-3,-8],[-2,-26],[-4,-21],[-7,-13],[-12,-15],[-21,5],[-19,22],[-11,6],[-6,0]],[[55555,74717],[-1,52],[-9,41],[-31,99],[-102,96],[-24,43],[-11,36],[-10,35],[10,1],[10,-9],[13,-11],[5,18],[-6,37],[-26,87],[-2,24],[13,74],[21,82],[-1,99],[7,75],[-8,49],[-3,60],[15,79],[14,20],[8,25],[1,85],[-31,39],[-35,8]],[[55372,75961],[1,28],[5,46],[-3,15],[3,26],[-9,35],[-14,25],[14,44],[19,53],[18,42],[22,45],[15,42],[16,36],[14,11],[6,-7],[4,-16],[-1,-47],[5,-17],[9,-12],[20,6],[22,12],[30,25],[5,-2]],[[55725,86428],[-2,-13],[-23,-4],[-10,13],[-21,-2],[-3,6],[8,12],[17,8],[22,-3],[12,-17]],[[55461,86513],[2,-13],[-11,3],[-8,-5],[-6,-15],[-12,5],[-5,23],[9,34],[22,2],[9,-34]],[[55552,86607],[9,0],[3,5],[15,-4],[23,-22],[4,-12],[16,-6],[5,-13],[-18,-39],[-11,0],[-8,4],[-15,-4],[-8,-7],[-3,-16],[0,-34],[-65,-7],[-15,10],[-20,77],[4,20],[14,8],[12,2],[1,-41],[18,4],[5,27],[1,20],[-4,9],[-12,8],[-7,13],[10,21],[18,9],[16,-28],[12,-4]],[[50473,76326],[-7,-4],[-26,-23],[-14,-8],[-14,-5],[-10,2],[-6,14],[1,21],[-3,19],[-1,10],[3,27]],[[50396,76379],[9,15],[12,12],[18,-4],[39,-18],[9,-16],[0,-11],[-7,-18],[-3,-13]],[[64979,65770],[0,-20],[-28,6],[-7,-10],[-24,5],[-22,14],[15,24],[40,28],[17,-26],[9,-21]],[[64615,65834],[-5,-4],[-4,31],[0,9],[13,15],[7,-26],[-11,-25]],[[64814,65816],[-21,-3],[-18,22],[39,29],[11,13],[11,27],[9,-23],[-10,-36],[-7,-16],[-14,-13]],[[65129,65923],[-3,-12],[-8,1],[-19,11],[-7,16],[13,19],[5,1],[8,-20],[11,-16]],[[65638,66618],[18,-46],[2,-318],[5,-22]],[[65663,66232],[-10,-4],[-11,-24],[-13,-37],[-17,-20],[-14,-21],[-14,-27],[-11,-6],[-16,34],[-10,35],[2,8],[8,2],[3,18],[-5,27],[-10,9],[-13,1],[-13,-11],[-13,-24],[-8,-24],[-1,-50],[4,-57],[-1,-27],[-7,-34],[-2,-50],[5,-39],[4,-23],[1,-19],[-13,-62],[11,-11],[36,-5],[11,-41],[7,-29],[-2,-17],[-26,-13],[-31,-14],[-23,4],[-42,-18],[-22,-29],[7,-19],[7,-13],[4,-39],[-7,-54],[-11,-53],[-15,-66],[-17,-75],[-23,-114],[-19,-90],[-2,-64],[0,-42],[-2,-84]],[[65329,64921],[-19,-46],[-4,-2],[-22,6],[-7,2],[-21,5],[-33,8],[-42,11],[-51,13],[-56,14],[-59,15],[-62,16],[-62,16],[-60,15],[-56,14],[-50,13],[-43,10],[-32,9],[-21,5],[-8,2],[-23,6],[-13,31],[-15,38],[-15,37],[-15,38],[-16,38],[-15,38],[-15,37],[-16,38],[-15,38],[-15,38],[-15,37],[-16,38],[-15,38],[-15,37],[-16,38],[-15,38],[-15,38],[-10,25],[-6,28],[-1,75],[0,16]],[[64324,65832],[10,30],[5,-21],[12,-29],[19,7],[9,-5],[7,-103],[14,-37],[18,-15],[59,-8],[36,14],[73,67],[38,25],[105,-5],[84,-28],[131,-16],[26,4],[70,54],[44,48],[26,14],[17,46],[11,60],[10,39],[13,19],[12,33],[9,55],[25,54],[97,133],[57,113],[5,36],[32,55],[24,59],[117,171],[23,70],[14,79],[1,6]],[[65577,66856],[10,3],[14,-12],[2,-59],[-5,-56],[-1,-59],[-2,-32],[11,-26],[18,-11],[8,1],[6,13]],[[65613,66366],[9,-2],[11,15],[2,25],[-3,13],[-12,2],[-5,-22],[-2,-31]],[[32069,20324],[31,-13],[61,10],[32,0],[14,-5],[6,-7],[42,11],[18,-1],[-5,-25],[-38,-24],[-16,10],[-82,-2],[-36,-25],[-15,0],[-36,-36],[-26,23],[-7,21],[18,29],[18,1],[12,12],[9,21]],[[30929,20245],[2,130],[2,175],[1,156],[0,152],[0,158],[1,157],[0,169],[1,171]],[[30936,21513],[16,-25],[65,-118],[17,-48],[10,-56],[-26,35],[-27,-20],[-13,-34],[-12,-36],[0,-26],[9,-23],[27,-19],[64,-7],[5,-7],[37,-141],[19,-32],[22,-25],[51,-72],[49,-77],[58,-74],[62,-57],[57,-43],[54,-52],[58,-73],[63,-54],[67,-37],[69,-32],[105,13],[32,-4],[20,-23],[-20,-64],[-26,-51],[-35,-21],[-36,-8],[-34,1],[-33,10],[-31,-6],[-29,-21],[-31,-11],[-32,-2],[-31,-18],[-32,-13],[-32,11],[-84,51],[-55,12],[-185,20],[-59,12],[-59,18],[-31,0],[-45,-11],[-35,1],[-10,-11]],[[32812,29278],[3,-36],[-15,4],[-34,35],[-12,33],[-2,14],[35,-15],[16,-14],[9,-21]],[[32597,39035],[7,-16],[0,-16],[23,-35],[47,-51],[44,-100],[41,-148],[38,-109],[36,-71],[33,-50],[31,-29],[16,-24],[2,-18],[28,-38],[54,-57],[35,-57],[14,-57],[54,-60],[93,-60],[67,-29],[42,2],[61,-48],[79,-100],[48,-69],[17,-39],[52,-62],[128,-129],[57,-33],[27,-29],[16,-38],[16,-11],[15,14],[33,-13],[49,-42],[38,-50],[49,-110],[16,-45],[7,-39],[-2,-35],[-16,-37],[-27,-40],[-8,-17],[-1,-16],[-7,-34],[-23,-71],[-6,-33],[-1,-24],[-15,-27],[-38,-49],[-8,-24],[-2,-26],[-5,-15],[-5,-7],[-8,-25],[-6,-43],[0,-55],[4,-67],[-1,-21],[-8,-12],[-5,-15],[-2,-31],[-7,-23],[-13,-15],[-4,-16],[3,-19],[-9,-19],[-23,-18],[-13,-27],[-5,-35],[-13,-32],[-19,-27],[-7,-37],[11,-68],[121,23],[99,-25],[117,-65],[77,-23],[39,20],[28,-3],[18,-26],[25,-5],[31,15],[26,-11],[21,-38],[18,9],[17,57],[19,41],[22,26],[26,8],[33,-10],[25,-21],[19,-31],[21,1],[23,33],[11,40],[-1,46],[9,33],[19,20],[13,27],[6,34],[23,21],[38,8],[20,16],[2,26],[11,24],[21,22],[14,27],[8,33],[13,21],[17,8],[20,69],[21,129],[13,174],[5,248]],[[34829,37110],[21,0],[10,-19],[16,-9],[17,21],[14,9],[23,1],[12,24],[15,3],[10,-12],[9,-16],[20,-3],[16,-40],[18,-13],[7,-46],[12,-121],[21,-72],[21,-81],[1,-36],[-12,-37],[-2,-53],[-7,-128],[-3,-48],[7,-32],[3,-45],[-11,-55],[-22,-82],[-22,-22],[-5,-1],[-29,-48],[-21,-18],[-12,12],[-13,-20],[-16,-53],[-18,-24],[-34,-14],[-10,-6],[-19,2],[-17,-13],[-14,-29],[-15,-10],[-16,7],[-15,-11],[-13,-28],[-7,-30],[-2,-33],[-13,-22],[-23,-12],[-8,-16],[1,-23],[-10,-18],[-40,-18],[-28,-33],[-18,-47],[-19,-30],[-29,-18],[-40,-48],[-5,-30],[15,-27],[5,-24],[-4,-21],[-12,-3],[-21,15],[-15,4],[-8,-10],[-5,-17],[1,-25],[-8,-17],[-15,-9],[-9,-21],[-4,-32],[-19,-41],[-35,-49],[-26,-66],[-20,-84],[-23,-55],[-26,-26],[-19,-37],[-9,-49],[-28,-75],[-47,-102],[-41,-70],[-38,-38],[-21,-43],[-5,-48],[-24,-54],[-44,-61],[-13,-28]],[[33997,34453],[-10,-22],[-1,-39],[-18,-52],[-33,-64],[-11,-55],[15,-70],[2,-84],[-6,-34],[-15,-11],[-3,-22],[8,-32],[0,-43],[-7,-52],[-15,-60],[-24,-67],[-5,-46],[12,-22],[6,-24],[0,-26],[-5,-37],[-10,-49],[-15,-36],[-20,-23],[-6,-30],[8,-36],[1,-37],[-6,-39],[4,-38],[12,-37],[-1,-42],[-21,-86]],[[33833,33138],[-6,-53],[14,-228],[-8,-32],[-14,-37],[-16,-2],[-19,6],[-13,-23],[-9,-100],[-25,-218],[4,-51],[21,-84],[7,-53],[6,-41],[5,-76],[-12,-34],[-11,-6],[-14,-19],[16,-93],[13,-43],[38,-87],[144,-122],[60,-72],[68,-97],[37,-100],[3,-83],[-54,-124],[-6,-103],[11,-73],[20,-68],[52,-88],[39,-32],[52,4],[9,-25],[5,-21],[8,-178],[-1,-67],[-15,-61],[-100,-282],[-86,-172],[-31,-94],[-11,-102],[-27,-48],[-148,-154],[-230,-137],[-186,-71],[-42,-24],[-299,-78],[-58,-11],[-75,7],[-61,-10],[-68,21],[-61,25],[-34,61],[-41,7],[-11,-30],[20,-78],[-9,-94],[11,-53],[24,-11],[23,-27],[21,-37],[-35,-4],[13,-29],[15,-18],[-2,-61],[-13,-148],[-34,-32],[-9,-9],[-11,-31],[-21,-142],[-7,-92],[9,-59],[41,-124],[-15,-81],[-26,-44],[-112,-90],[-45,-36],[-70,-25],[-114,-4],[-42,6],[-97,82],[-73,49],[-66,39],[-64,23],[9,12],[4,21],[-18,12],[-13,3],[-42,-43],[-18,-43],[-5,-38],[-1,-92],[8,-76],[30,-189],[3,-103],[-14,-130],[20,-76],[24,-34],[56,-34],[21,-23],[24,3],[7,-9],[-4,-16],[-14,-33],[1,-35],[42,-10],[43,7],[46,16],[11,24],[0,50],[-53,9],[6,18],[41,21],[53,33],[27,7],[18,-23],[12,-21],[16,-54],[9,-71],[1,-86],[-7,-81],[-7,-28],[-14,-35],[-95,-44],[-26,12],[-25,61],[-8,63],[-21,42],[-46,34],[-45,-10],[-45,-59],[-44,-19],[-15,-53],[110,-87],[52,-24],[17,1],[17,-11],[-15,-32],[-16,-20],[-79,-44],[-34,-31],[-41,-60],[-57,-132],[-17,-28],[-9,-34],[-6,-91],[19,-150],[-20,-63],[12,-70],[-6,-47],[-20,-67],[-80,-106],[-14,-78],[28,-45],[-2,-40],[-9,-37],[-33,1],[-120,24],[-44,-39],[-41,-49],[-11,-23],[-14,-14],[-83,-26],[-16,-17],[-88,-185],[-38,-114],[-45,-112],[-12,-47],[-3,-66],[7,-59],[6,-44],[16,-56],[33,-64],[170,-260],[35,-23],[181,-28],[40,-36],[23,-58],[9,-51],[-10,-128],[-11,-41],[-20,-36],[-43,-47],[-51,-25],[14,-18],[21,2],[46,16],[19,-16],[15,-50],[-28,-21],[-9,-24],[-20,-38],[-105,-148],[-56,-45],[-52,-59],[-70,-61],[-27,-34],[-37,-73],[-56,-79],[-61,-170],[-2,-33],[9,-22],[-34,-298],[-12,-35],[-24,-37],[-65,-62],[-31,-7],[-41,35],[-23,38],[-22,63],[-28,66],[-1,-23],[9,-40],[-6,-42],[-70,-19],[-18,-20],[63,9],[43,-13],[18,-15],[16,-32],[15,-38],[-12,-21],[-35,-18],[-44,-32],[-53,-58],[-29,-68],[-13,-48],[-14,-98],[-4,-64],[-22,-50],[-35,-44],[2,-11],[24,23],[18,7],[16,-59],[22,-119],[10,-82],[-2,-25],[-6,-33],[-45,-9],[-39,2],[-29,-15],[15,-15],[27,6],[37,-36],[41,15],[19,-23],[13,-22],[63,-172],[55,-106],[27,-63],[-13,-29]],[[30988,21683],[-5,38],[-36,10],[-35,11],[-58,27],[-78,41],[-79,0],[-62,35],[-69,39],[-145,3],[-128,3],[-131,2],[-84,2],[-56,1],[-14,14],[5,49],[-21,35],[-30,43],[-37,31],[-18,40],[-21,46],[12,41],[17,99],[1,43],[-16,31],[-5,43],[5,20],[14,16],[9,70],[-7,70],[-11,62],[-14,27],[-19,13],[-14,3],[-31,-23],[-51,5],[-17,-8],[-25,-25],[-35,-37],[-20,13],[-6,39],[-13,34],[-8,30],[-6,50],[-11,63],[-20,76],[-32,61],[-2,54],[-6,69],[16,67],[-9,56],[-20,66],[6,69],[20,38],[6,48],[90,8],[-3,65],[15,52],[17,48],[14,21],[32,19],[38,28],[22,31],[10,28],[6,37],[2,38],[-6,83],[7,25],[23,33],[40,30],[17,79],[-9,68],[-23,55],[-28,24],[-2,56],[13,53],[16,57],[20,65],[-1,46],[17,27],[50,59],[17,59],[18,16],[20,7],[1,33],[-15,33],[-2,41],[2,45],[4,61],[24,23],[34,49],[9,32],[1,42],[-10,87],[-8,62],[-5,23],[-15,42],[-12,26],[19,34],[34,35],[15,51],[-13,43],[-20,23],[-6,66],[7,84],[15,25],[51,13],[5,43],[39,61],[-1,58],[-25,36],[-24,58],[-18,51],[-60,28],[-64,15],[-8,48],[2,28],[30,-11],[48,10],[36,2],[26,5],[29,7],[27,-20],[27,12],[11,77],[17,40],[3,38],[-18,31],[-31,9],[-137,24],[-4,31],[1,51],[5,52],[0,26],[12,23],[15,47],[10,32],[-10,41],[-22,60],[16,28],[1,34],[-5,32],[-23,36],[-20,51],[0,53],[24,14],[15,16],[4,33],[-9,41],[-32,12],[-43,25],[-14,21],[-12,44],[9,123],[-4,74],[-4,41],[10,31],[15,29],[-7,66],[-13,34],[5,27],[12,27],[10,33],[10,8],[13,-19],[23,11],[28,27],[3,31],[-5,45],[-21,113],[-19,70],[4,26],[7,26],[-5,97],[1,58],[2,171],[2,59],[-19,60],[3,56],[13,41],[13,55],[9,49],[10,22],[17,11],[3,27],[-7,21],[-22,31],[-5,39],[5,30],[10,18],[17,0],[12,42],[4,53],[2,24],[-9,31],[-7,73],[-7,41],[8,18],[11,6],[18,-10],[14,5],[2,22],[1,24],[5,16],[12,53],[13,67],[3,47],[-5,126],[7,30],[13,26],[19,25],[25,21],[30,30],[38,11],[15,33],[11,44],[3,36],[-15,25],[-19,30],[-9,76],[-5,70],[-2,88],[-19,75],[-20,85],[-5,76],[6,41],[8,66],[-8,30],[-10,53],[10,42],[13,65],[-2,33],[-10,79],[-9,44],[9,48],[15,44],[11,23],[-2,38],[5,32],[22,21],[20,38],[14,5],[18,0],[11,11],[5,30],[3,33],[28,41],[16,38],[29,8],[15,41],[0,52],[-3,53],[10,62],[-11,93],[1,50],[-12,41],[3,44],[-6,28],[-18,11],[-6,35],[8,17],[17,14],[20,27],[15,129],[8,39],[7,46],[-1,24],[10,35],[12,53],[19,50],[11,36],[11,47],[3,28],[13,14],[16,4],[19,9],[7,17],[-1,25],[-1,56],[-6,89],[-3,114],[3,75],[12,76],[11,41],[-3,31],[-3,35],[-21,19],[-20,-17],[-14,5],[-18,40],[-6,43],[3,58],[15,36],[5,46],[-8,14],[-18,30],[-17,105],[2,89],[-17,23],[-7,70],[-18,25],[-6,52],[-6,53],[2,24],[18,7],[11,42],[-8,24],[-14,20],[-17,-2],[-16,25],[-21,101],[-16,55],[5,82],[3,64],[7,54],[3,43],[13,21],[12,-10],[11,5],[11,35],[11,21],[0,18],[-7,19],[-3,33],[8,39],[13,90],[21,100],[9,37],[-2,31],[5,15],[14,-16],[40,17],[14,44],[5,40],[13,22],[-6,31],[-17,10],[-10,14],[4,36],[6,82],[-1,61],[-15,128],[-12,128],[8,43],[27,58],[20,26],[4,33],[20,151],[2,82],[13,46],[9,85],[36,74],[10,49],[15,5],[7,15],[19,55],[25,56],[22,28],[5,44],[10,60],[21,100],[12,70],[16,25],[19,92],[8,53],[21,22],[17,6],[16,-25],[16,5],[16,31],[36,22],[17,12],[7,31],[0,55],[-15,41],[-31,79],[-27,87],[-3,28],[0,30],[5,38],[13,43],[32,71],[-4,51],[-23,187],[-9,51],[-16,96],[2,38],[15,105],[12,43],[18,8],[10,14],[3,19],[-12,23],[-5,30],[-6,43],[-17,15],[-9,35],[0,52],[15,68],[17,19],[6,30],[18,27],[17,22],[13,39],[57,48],[44,38],[88,71],[60,49],[5,34],[5,23],[28,174],[36,224],[22,140],[-52,104]],[[31334,38697],[10,27],[29,71],[6,57],[12,24],[53,58],[9,38],[5,43],[11,30],[20,7],[37,27],[39,25],[12,35],[11,61],[10,67],[7,17],[13,-2],[21,-17],[11,-26],[55,-81],[25,-46],[24,-6],[46,9],[9,-2],[119,-2],[18,-4],[42,-20],[23,-16],[16,-8],[27,-25],[22,-82],[13,-66],[9,-57],[20,-102],[14,-38],[4,19],[12,110],[16,65],[21,72],[44,169],[15,25],[17,13],[11,1],[12,-13],[17,0],[11,13],[113,2],[118,2],[3,-1],[5,-29],[20,-63],[22,-34],[4,-9]],[[62653,75239],[-11,-10],[-10,5],[0,24],[8,9],[8,0],[8,-9],[-3,-19]],[[62913,74254],[-48,4],[-41,-25],[-15,5]],[[62809,74238],[-10,44],[-9,36],[-26,93],[7,38],[-15,21],[-35,40],[-9,16],[5,22],[4,41],[-4,33],[-9,10],[-18,1],[-21,-8],[-43,-32],[-29,20],[-18,21],[-9,17],[-23,-14],[-5,7],[-1,42],[-7,23],[-13,27],[-13,13],[-46,-27],[-27,-9]],[[62435,74713],[-10,25],[-48,81],[-44,63],[-31,25],[-31,-2],[-48,-13],[-18,5],[-41,28],[-35,32],[5,13],[7,10],[-9,42],[-19,67],[2,22],[-6,29],[-7,22],[27,53],[13,42],[3,42],[-8,43],[-18,77],[-11,23],[-20,21],[-18,34],[-4,25]],[[62066,75522],[14,5],[43,0],[41,9],[32,16],[47,13],[19,12],[23,6],[68,-13],[25,10],[77,2],[2,5],[-10,16],[0,7],[46,10],[7,8]],[[62500,75628],[6,-26],[17,-29],[19,-12],[10,-16],[0,-12],[-33,-15],[-2,-7],[2,-7],[10,-4],[46,-36],[27,-1],[14,-11],[7,-22],[22,-29],[18,-29],[1,-10],[-4,-15],[-49,-56],[-6,-19],[-1,-20],[22,-61],[32,-67],[46,-50],[63,-55],[1,-34],[-10,-41],[-9,-27],[-4,-19],[-7,-7],[-64,1],[-9,-6],[-4,-8],[-1,-7],[23,-12],[36,-43],[20,-42],[21,-19],[24,-33],[19,-31],[30,-41],[34,14],[44,-36],[2,-25],[-3,-21],[-28,-24],[-3,-10],[0,-8],[3,-12],[17,-19],[19,-29],[22,-43],[-10,-13],[-20,-2],[-16,5],[-6,-8],[1,-14],[20,-33],[4,-24],[-1,-41],[1,-53]],[[62491,75476],[9,-7],[6,7],[1,15],[-2,14],[-7,4],[-9,-3],[-1,-16],[3,-14]],[[2576,43576],[-12,-5],[-14,27],[28,21],[8,11],[34,-6],[-20,-8],[-24,-40]],[[5002,3963],[-87,-13],[-206,26],[-54,21],[-30,22],[-56,20],[-14,11],[0,23],[-9,15],[-19,13],[-9,13],[-17,8],[277,-13],[108,-19],[20,-14],[195,-60],[-53,-9],[-46,-44]],[[6115,4547],[-25,-4],[-22,31],[-108,63],[-64,42],[-42,33],[-18,23],[21,0],[158,-70],[24,-27],[118,-48],[-42,-43]],[[5426,4844],[-29,-5],[-745,67],[-143,21],[-34,13],[-14,11],[-3,8],[6,22],[17,16],[185,25],[207,-19],[250,-48],[172,-38],[89,-34],[37,-26],[5,-13]],[[7241,5741],[-51,-2],[-65,6],[-50,14],[-114,20],[-29,38],[-134,31],[-62,10],[21,37],[142,-49],[175,-49],[141,-30],[26,-26]],[[33407,5562],[-11,-124],[1,-56],[-16,-45],[-28,-23],[-55,-39],[-40,-23],[-87,-38],[-400,34],[-180,31],[-75,40],[-12,18],[-23,61],[-21,19],[-159,-13],[-97,-19],[-17,-10],[-26,-38],[-14,-8],[-259,81],[-273,95],[-113,49],[-39,22],[-11,14],[25,20],[26,12],[29,8],[30,2],[22,-7],[22,-14],[14,-51],[14,-8],[38,-14],[961,7],[80,2],[166,15],[89,21],[33,29],[-80,7],[-32,22],[-27,41],[-6,38],[9,28],[106,14],[16,10],[-28,16],[1,37],[63,14],[25,31],[124,39],[196,-21],[47,-56],[-13,-37],[-9,-36],[-1,-57],[80,-9],[25,-20],[24,-26],[-29,-1],[-28,-6],[-23,-27],[-20,-35],[-14,-16]],[[41355,5876],[38,-12],[40,27],[-6,27],[23,45],[33,-50],[219,-51],[71,-50],[-29,-12],[-22,2],[-64,-5],[-109,-44],[-117,42],[-209,29],[-63,22],[-49,68],[88,56],[21,-6],[135,-88]],[[41016,5948],[-48,-6],[-19,15],[23,38],[34,33],[63,3],[60,-22],[-6,-21],[-13,-2],[-94,-38]],[[31618,5715],[-26,-2],[-14,3],[-14,12],[-12,47],[-137,37],[-16,21],[-9,46],[-23,18],[-178,82],[-15,17],[-10,25],[33,10],[70,-18],[127,-5],[28,-8],[26,-14],[142,-3],[72,-7],[40,-65],[81,-19],[11,-38],[10,-68],[-110,-50],[-25,-7],[-51,-14]],[[31316,6075],[-48,-28],[-202,13],[-69,9],[-39,15],[36,60],[27,20],[25,8],[56,33],[88,7],[67,-5],[113,-26],[-29,-25],[-19,-9],[-18,-38],[12,-34]],[[40573,6151],[-32,-21],[-675,36],[-33,7],[9,43],[92,7],[52,8],[72,19],[53,33],[18,1],[317,-77],[111,-32],[13,-15],[3,-9]],[[5819,5871],[-347,-22],[-141,19],[-294,63],[-403,114],[-110,36],[-72,31],[-70,39],[-16,43],[10,62],[13,51],[21,31],[86,39],[43,42],[87,44],[25,33],[37,2],[70,-4],[69,-9],[65,-11],[63,-19],[144,-62],[100,-61],[144,-72],[143,-81],[80,-30],[77,-45],[74,-61],[14,-21],[31,-27],[19,-26],[19,-22],[19,-11],[15,-24],[-3,-26],[-12,-15]],[[30462,5944],[-60,-2],[-120,5],[-120,20],[-31,10],[-44,32],[-14,17],[-12,21],[-1,33],[32,114],[59,68],[56,39],[174,91],[23,11],[159,43],[62,23],[97,48],[534,186],[122,27],[55,-20],[31,-19],[-16,-22],[-72,-53],[-34,-32],[-87,-65],[-188,-109],[-133,-82],[-171,-113],[-40,-40],[-81,-95],[15,-42],[-27,-58],[-107,-28],[-61,-8]],[[96566,6830],[-34,-43],[-39,-19],[-123,16],[-86,-36],[-95,-13],[-45,19],[-20,35],[-10,47],[0,17],[27,7],[127,-33],[53,-29],[29,1],[76,38],[63,48],[16,23],[21,8],[27,-17],[13,-52],[0,-17]],[[37438,6445],[36,-2],[146,6],[146,-2],[89,-7],[26,-16],[23,-32],[26,-50],[24,-55],[27,-45],[16,-79],[25,-29],[43,-73],[6,-59],[-13,-128],[-21,-52],[-56,-50],[-64,5],[-29,-2],[-28,-10],[-11,-7],[-4,-10],[74,-43],[9,-16],[1,-19],[-10,-13],[-10,-8],[-1573,-260],[-61,-13],[-61,-27],[-20,-23],[-20,-18],[-1219,-49],[-11,3],[-11,10],[-31,50],[-6,79],[7,31],[61,30],[23,17],[103,117],[53,55],[25,46],[13,-3],[47,-27],[35,-8],[68,11],[67,33],[29,18],[29,-6],[5,-28],[12,-9],[162,88],[147,98],[144,111],[73,66],[18,19],[12,28],[-10,28],[-13,25],[-12,10],[-12,4],[-75,18],[23,29],[22,35],[14,39],[5,47],[-3,24],[3,18],[34,15],[23,24],[16,28],[-26,8],[-12,22],[23,49],[21,52],[21,28],[56,55],[163,138],[59,74],[17,26],[386,120],[63,12],[121,16],[56,4],[158,-12],[74,-12],[128,-32],[189,-61],[71,-27],[71,-34],[68,-43],[67,-52],[13,-16],[6,-29],[2,-28],[-3,-27],[-18,-56],[-26,-39],[-311,-37],[-41,-15],[-22,-30],[-16,-30],[36,-11]],[[8550,7294],[81,-29],[-142,9],[-62,40],[40,16],[40,-3],[35,-21],[8,-12]],[[8223,7275],[-22,-2],[-241,44],[-47,13],[82,27],[54,4],[146,-66],[39,-8],[-11,-12]],[[96411,7303],[105,-42],[275,4],[229,-39],[21,-40],[-65,-21],[-101,-53],[-65,-17],[-55,0],[-112,22],[-146,-3],[-31,-31],[-71,-31],[-82,-54],[-22,44],[-33,42],[-82,88],[-6,14],[45,17],[22,29],[47,39],[-5,24],[-39,26],[-15,22],[26,36],[58,16],[75,-15],[34,-48],[-6,-21],[-1,-8]],[[8723,7484],[-116,-7],[-64,15],[-16,44],[18,9],[148,-20],[54,-11],[20,-13],[-10,-12],[-34,-5]],[[8547,7418],[-17,-9],[-121,5],[-25,8],[-11,9],[-168,13],[-76,41],[-15,13],[30,20],[57,12],[23,16],[145,14],[23,-8],[13,-22],[66,-43],[17,-28],[7,-17],[36,-8],[16,-16]],[[9276,7510],[-104,-25],[-27,7],[9,36],[-16,25],[-4,12],[9,17],[61,0],[172,-27],[23,-38],[-123,-7]],[[8518,7651],[113,-8],[74,6],[77,-14],[18,-16],[-14,-13],[-83,-4],[-40,-22],[-47,-3],[-71,16],[-64,35],[37,23]],[[8269,7617],[-118,-8],[-48,16],[-12,15],[10,13],[183,13],[20,-16],[6,-10],[-41,-23]],[[9003,7690],[3,-8],[-42,5],[-63,33],[-12,11],[28,11],[36,-10],[33,-20],[17,-22]],[[9225,7699],[-33,-46],[-87,24],[-37,30],[21,39],[40,12],[52,-14],[19,-5],[25,-40]],[[9253,7922],[-57,-8],[-71,36],[-54,29],[-18,25],[-3,8],[0,10],[16,6],[115,-21],[72,-85]],[[95268,8313],[-50,-74],[-35,2],[-20,14],[36,41],[34,18],[21,5],[14,-6]],[[9656,8230],[-31,-3],[-53,14],[-140,46],[-30,23],[21,23],[50,16],[38,-5],[95,-43],[29,-31],[17,-23],[4,-17]],[[95548,8736],[-37,0],[-22,17],[-7,40],[1,13],[72,48],[58,12],[-31,-72],[-11,-12],[-23,-46]],[[13225,8961],[-44,-32],[-86,21],[7,23],[78,20],[53,-13],[-8,-19]],[[13592,8880],[-31,-12],[-116,29],[-68,6],[-31,17],[-20,14],[-6,15],[-32,22],[62,44],[49,14],[47,-3],[10,-22],[90,-26],[70,-1],[7,-24],[-3,-34],[-28,-39]],[[14620,8857],[-42,-10],[-83,38],[-27,18],[-24,31],[-19,6],[-7,7],[-11,80],[25,9],[53,-11],[102,-42],[71,-12],[24,-32],[-24,-56],[-38,-26]],[[17572,9121],[-136,-16],[-37,18],[-10,22],[6,23],[277,125],[49,-17],[14,-8],[-83,-62],[-37,-22],[-6,-8],[20,-8],[6,-7],[-16,-17],[-47,-23]],[[16792,9152],[-58,-6],[-18,1],[-18,13],[-5,9],[30,30],[29,13],[9,10],[-40,101],[37,3],[43,20],[83,-2],[72,-18],[13,-15],[9,-25],[-31,-51],[-19,-18],[-108,-45],[-28,-20]],[[16512,9356],[49,-57],[19,-38],[11,-39],[-199,-96],[-9,-10],[-9,-50],[5,-11],[8,-8],[1,-19],[-17,-6],[-340,-38],[-159,35],[-22,23],[-5,36],[19,7],[35,5],[-9,16],[-22,29],[-2,24],[48,61],[23,16],[-90,57],[-11,13],[-12,4],[-44,-7],[-43,3],[15,23],[12,37],[38,33],[28,5],[28,-4],[132,-1],[130,-17],[131,-12],[215,-11],[46,-3]],[[44275,9281],[-13,-126],[4,-26],[11,-26],[49,-70],[4,-52],[-2,-20],[-20,-29],[-69,7],[-22,15],[-8,10],[-36,122],[-21,29],[-32,25],[-123,23],[-118,-8],[29,28],[178,39],[45,29],[28,34],[13,52],[31,65],[49,30],[31,3],[16,-53],[0,-50],[-24,-51]],[[97178,9444],[-38,-12],[-51,37],[-12,12],[50,70],[-4,23],[7,19],[19,14],[12,-2],[29,-77],[20,-32],[-28,-31],[-4,-21]],[[14908,9627],[74,-16],[25,-25],[33,-18],[33,-10],[31,-27],[18,-48],[16,-15],[49,-32],[17,-28],[-3,-14],[-93,-11],[-31,4],[-29,-9],[-9,-17],[1,-18],[16,-13],[34,-12],[34,2],[63,14],[28,-3],[32,-15],[32,-2],[84,46],[21,8],[21,-2],[115,-54],[24,-27],[-17,-15],[-14,-22],[6,-15],[55,-22],[23,-28],[14,-11],[-3,-24],[-8,-29],[1,-33],[-28,-18],[-13,0],[-60,18],[-187,10],[-60,15],[-92,65],[-36,4],[-37,16],[-57,46],[-99,37],[-63,45],[2,38],[-9,27],[-12,11],[-12,6],[-36,9],[-35,-2],[-18,-11],[-29,-28],[-32,-5],[-25,6],[-5,6],[-1,74],[-27,10],[-23,30],[-4,40],[10,37],[35,45],[40,5],[40,-7],[41,9],[65,7],[74,-4]],[[29478,9586],[-27,-11],[-17,6],[-31,29],[4,23],[14,15],[10,17],[60,62],[44,7],[36,-13],[-39,-59],[-10,-41],[-44,-35]],[[20961,9696],[-33,-26],[-62,6],[-48,43],[-19,58],[-2,20],[13,15],[31,14],[120,-130]],[[29346,9735],[-40,-75],[-7,-9],[-40,-18],[14,-20],[11,-10],[7,-24],[23,-33],[28,-21],[-23,-59],[-34,-26],[-369,160],[-28,26],[-14,19],[-11,30],[-1,30],[9,24],[13,14],[33,17],[34,1],[75,-32],[10,5],[14,28],[40,1],[9,24],[-55,8],[-44,24],[-29,24],[-8,19],[99,33],[251,-42],[38,-14],[17,-19],[14,-26],[-36,-59]],[[23945,9838],[-47,0],[-31,21],[-10,14],[19,21],[11,2],[57,-36],[12,-15],[-11,-7]],[[24677,9687],[-51,-14],[-46,6],[17,132],[26,33],[-7,24],[-47,66],[-33,75],[16,17],[86,27],[99,-5],[39,-32],[12,-40],[-5,-29],[-32,-53],[33,-18],[7,-36],[-7,-44],[-32,-52],[-30,-31],[-45,-26]],[[23603,9985],[-53,-3],[-15,13],[16,28],[128,47],[52,28],[8,-4],[7,-9],[22,-56],[2,-14],[-167,-30]],[[45526,9977],[-19,-14],[-40,1],[-38,28],[-16,41],[-1,29],[17,33],[27,9],[15,-11],[36,-71],[19,-45]],[[69016,10195],[-14,0],[7,23],[37,41],[28,50],[17,8],[31,-44],[-7,-37],[-41,-27],[-58,-14]],[[46525,10268],[-22,-13],[-37,5],[-47,29],[-15,22],[-5,20],[13,29],[11,8],[24,-4],[42,-37],[29,-40],[7,-19]],[[69421,10415],[-35,-74],[-13,2],[-15,43],[13,27],[16,16],[28,-8],[6,-6]],[[22752,10418],[-23,-61],[2,-60],[68,4],[30,114],[64,21],[31,-68],[-30,-55],[15,-31],[18,-22],[32,-1],[29,33],[13,24],[11,26],[19,58],[61,54],[135,8],[71,-34],[-48,-86],[-115,-50],[-74,-52],[25,-14],[25,-7],[23,2],[65,27],[160,50],[61,37],[22,-6],[0,-62],[21,-42],[-12,-93],[-69,-17],[-71,-8],[18,-41],[-4,-17],[-6,-13],[-178,17],[-31,-6],[-31,-12],[-31,2],[-62,31],[-32,-1],[-64,-14],[-65,-6],[-93,1],[-68,5],[-64,33],[-67,9],[-75,1],[-79,38],[-66,15],[-95,39],[-25,15],[-25,8],[-45,-3],[-346,59],[-51,-1],[-33,-8],[-33,3],[-67,29],[-14,31],[7,29],[15,13],[30,13],[480,69],[50,19],[37,-2],[28,-59],[42,-62],[14,1],[14,7],[47,51],[86,-16],[48,23],[33,45],[97,52],[61,-10],[57,-22],[27,-54]],[[49179,10821],[-30,-13],[-39,3],[-30,17],[-21,34],[-5,13],[3,22],[-2,11],[38,6],[14,-14],[6,-11],[66,-68]],[[33180,10914],[-28,-4],[-38,10],[-33,20],[-11,23],[16,19],[30,12],[47,-4],[22,-24],[5,-22],[-6,-24],[-4,-6]],[[49296,11078],[30,-19],[47,3],[45,-15],[-7,-20],[-26,-26],[-22,-56],[-22,-27],[-66,-55],[-49,-15],[-11,31],[1,32],[4,25],[2,18],[-46,24],[-3,33],[-9,19],[-134,66],[-23,19],[10,11],[138,6],[81,-12],[60,-42]],[[29526,11154],[43,-51],[-40,-40],[-142,-75],[-83,-29],[-84,-22],[-380,-69],[-27,0],[-26,9],[-15,15],[-25,57],[3,29],[34,27],[35,18],[60,16],[229,36],[23,12],[19,27],[6,31],[8,24],[15,11],[16,0],[30,-23],[55,-93],[18,13],[16,25],[3,80],[16,6],[49,-22],[30,-23],[1,45],[21,14],[22,-5],[22,-10],[48,-33]],[[33127,11111],[-23,0],[-20,12],[-17,35],[-5,17],[9,38],[16,9],[92,5],[28,-20],[1,-34],[-10,-25],[-71,-37]],[[48362,11202],[-73,-34],[-6,15],[-24,20],[-48,56],[54,4],[49,24],[27,-10],[6,-6],[15,-69]],[[50843,11176],[-94,-15],[-21,17],[-11,34],[13,20],[123,68],[33,-6],[11,-6],[8,-26],[-11,-41],[-14,-20],[-37,-25]],[[49088,11213],[-45,-1],[-13,15],[-2,12],[58,83],[32,21],[62,16],[40,-5],[26,-18],[8,-33],[0,-49],[-15,-26],[-151,-15]],[[30084,11367],[14,-17],[60,16],[21,-17],[4,-12],[-27,-42],[-32,-28],[-37,-2],[-27,71],[-3,18],[27,13]],[[70000,11156],[-20,-1],[-25,7],[-32,42],[-18,30],[-7,31],[3,61],[16,30],[26,12],[11,-28],[4,-32],[8,-22],[33,-29],[16,-25],[5,-14],[6,-29],[-5,-20],[-21,-13]],[[51257,11244],[-45,-13],[-51,29],[-14,20],[-15,53],[-2,20],[12,13],[40,15],[66,-6],[25,-24],[9,-43],[-8,-37],[-17,-27]],[[57460,11301],[-18,-22],[-51,4],[-39,-21],[-31,8],[-98,35],[-11,45],[-3,20],[8,35],[88,73],[35,7],[50,-10],[22,-21],[14,-41],[39,-83],[-5,-29]],[[50360,11373],[-24,-73],[-15,2],[-15,43],[-31,46],[-11,32],[-1,43],[22,25],[80,16],[27,-10],[13,-55],[-45,-69]],[[33011,11534],[-42,-1],[-19,16],[-7,10],[5,23],[16,21],[49,-16],[12,-41],[-14,-12]],[[29170,11677],[49,-14],[72,-63],[24,-32],[7,-19],[-6,-13],[-33,-15],[-25,-77],[-50,-27],[-116,17],[-128,31],[-10,6],[-11,27],[-2,31],[14,39],[22,20],[95,24],[7,14],[14,39],[24,8],[11,-3],[42,7]],[[54506,11516],[-18,-37],[-87,51],[-51,16],[-13,9],[-12,31],[-3,13],[10,20],[28,32],[59,26],[93,13],[91,-10],[15,-16],[-86,-54],[-26,-94]],[[30004,11694],[-60,-24],[-40,19],[-120,36],[-50,66],[5,35],[23,21],[36,11],[73,-22],[37,-23],[96,-119]],[[32778,11680],[-24,-4],[-24,53],[-13,82],[-77,119],[-20,62],[14,15],[21,5],[56,-17],[34,-23],[38,-49],[46,-44],[9,-37],[-7,-42],[-29,-11],[1,-31],[-17,-60],[-8,-18]],[[30541,11987],[-8,-70],[46,25],[17,-5],[40,-26],[81,-151],[18,-48],[33,-140],[40,-104],[100,-183],[49,-100],[26,-58],[3,-78],[31,-22],[7,-32],[10,-107],[7,-125],[7,-237],[-4,-56],[-43,-88],[-18,-63],[-23,-42],[-27,-30],[-141,-125],[-17,-62],[-237,-53],[-134,-22],[-52,24],[-53,6],[-66,-8],[-191,-7],[-144,-18],[-19,7],[-13,23],[-14,16],[-38,-3],[-31,9],[-30,19],[-33,36],[-14,21],[-8,23],[64,60],[33,13],[33,4],[67,-13],[67,-20],[147,-16],[204,-4],[56,6],[67,19],[62,55],[-30,21],[-31,13],[-30,3],[-30,-4],[-84,-34],[-65,-20],[-65,-12],[-69,20],[-64,56],[-2,18],[220,43],[20,7],[40,27],[13,24],[6,23],[-148,40],[-31,-1],[-30,-7],[-67,17],[-64,47],[-59,57],[-22,5],[-21,-17],[-143,-150],[-12,-1],[-54,11],[-68,30],[-62,10],[-40,-8],[-15,-12],[39,-34],[33,-30],[10,-24],[-101,-75],[-27,-10],[-43,7],[-16,9],[-31,40],[-30,10],[-65,-8],[-34,3],[-34,18],[-32,26],[-30,14],[-36,29],[-26,20],[-8,29],[3,28],[11,16],[2,15],[-8,27],[5,19],[12,18],[54,34],[65,7],[63,-43],[42,-13],[19,-1],[7,2],[5,12],[-1,22],[-12,42],[-1,29],[14,24],[19,9],[20,6],[13,3],[41,-15],[29,-16],[59,-46],[49,-32],[19,-3],[14,11],[13,18],[-59,46],[-6,30],[3,26],[36,15],[22,2],[104,-27],[56,-9],[55,-3],[114,31],[-61,35],[-132,30],[-25,21],[-18,34],[97,31],[99,-1],[177,-41],[59,20],[55,58],[32,15],[125,-5],[101,27],[16,-3],[15,-8],[97,-97],[13,5],[10,19],[3,34],[1,34],[-3,35],[-12,22],[-16,-3],[-17,-10],[-28,9],[-28,18],[-29,8],[-100,11],[-71,18],[-37,14],[-34,28],[-5,31],[36,71],[138,76],[65,25],[66,6],[32,-5],[76,-32],[12,2],[11,8],[-73,53],[-65,41],[-33,31],[-26,12],[-109,12],[-57,-31],[-27,-5],[-27,3],[-160,74],[-9,8],[-23,28],[-12,21],[-7,35],[3,35],[5,23],[24,91],[13,72],[-7,59],[-25,32],[-36,22],[-33,35],[-9,24],[-6,28],[-1,36],[9,32],[14,34],[18,17],[34,17],[133,39],[270,49],[30,-25],[43,-52],[14,-21],[15,-104],[0,-29]],[[24851,12213],[-3,-1],[-6,0],[-4,0],[-4,-1],[-3,-1],[-3,-1],[-1,0],[0,2],[-2,2],[-3,5],[-2,5],[-1,5],[1,7],[3,3],[0,4],[0,5],[1,5],[1,5],[0,2],[1,2],[2,1],[5,0],[3,-1],[5,0],[3,-1],[3,-2],[4,-5],[3,-6],[0,-3],[1,-3],[0,-4],[1,-5],[1,-4],[-1,-7],[-2,-7],[-2,-1],[-1,0]],[[33151,12230],[-11,-16],[-35,10],[-20,11],[-34,28],[19,17],[37,-4],[30,-20],[14,-26]],[[31292,12807],[-55,-11],[-41,12],[1,44],[-11,5],[-4,10],[52,33],[39,8],[47,-5],[20,-15],[7,-14],[-36,-36],[-6,-14],[-13,-17]],[[95786,12937],[-24,-16],[-15,5],[-15,34],[16,53],[-6,69],[3,17],[39,-39],[7,-21],[16,-32],[3,-17],[-16,-32],[-8,-21]],[[31288,13309],[-13,-4],[-31,2],[-20,13],[26,41],[-3,28],[23,11],[26,-10],[18,-35],[3,-15],[-29,-31]],[[73839,13275],[-48,-15],[-8,8],[-1,9],[-72,55],[-12,45],[7,31],[59,-3],[70,-27],[37,-69],[-32,-34]],[[63484,13373],[-46,-14],[-21,6],[-2,13],[-1,14],[2,15],[16,12],[78,1],[31,-10],[9,-7],[1,-21],[-3,-6],[-64,-3]],[[95361,13351],[-5,-35],[-14,8],[-20,28],[-20,69],[18,7],[23,-12],[9,-34],[8,-18],[1,-13]],[[74039,13382],[-32,-14],[-25,3],[-29,31],[12,21],[30,13],[38,-7],[10,-11],[26,-7],[-30,-29]],[[31114,12975],[-29,-37],[-23,-11],[-21,10],[-21,5],[-15,-14],[-16,-58],[-19,-29],[-20,-15],[-12,6],[-12,0],[-19,-13],[-24,-5],[-23,6],[-22,37],[-32,44],[-6,14],[-5,36],[1,36],[14,29],[73,98],[24,44],[21,50],[23,44],[44,81],[22,29],[111,84],[30,19],[33,-5],[8,-44],[-16,-22],[-53,-56],[-11,-79],[1,-29],[5,-8],[20,-10],[14,-11],[18,-24],[21,-14],[-45,-41],[-30,-21],[-21,-26],[-40,-25],[-17,-16],[26,-6],[38,-21],[10,-18],[-5,-14]],[[73702,13472],[-30,-18],[-24,3],[-16,19],[-3,12],[15,38],[12,-2],[8,-20],[38,-32]],[[77456,13554],[-26,-7],[-27,16],[-13,31],[-3,10],[42,8],[56,-30],[-29,-28]],[[95169,13549],[-15,-27],[-13,3],[-58,69],[7,30],[-8,25],[1,23],[2,8],[71,-105],[13,-26]],[[77851,13699],[-37,-7],[-14,15],[-2,9],[27,33],[33,10],[-3,-38],[-4,-22]],[[31501,13709],[-62,-65],[-9,4],[-5,7],[1,11],[20,24],[4,70],[41,26],[16,-9],[-14,-30],[9,-26],[-1,-12]],[[76836,13804],[32,-15],[57,2],[20,-23],[4,-24],[-1,-14],[-23,-21],[-150,-14],[-24,22],[26,61],[28,20],[31,6]],[[75722,13935],[-37,-8],[-38,8],[-19,27],[-4,12],[15,19],[54,3],[38,-17],[8,-17],[2,-8],[-19,-19]],[[31709,13915],[-60,-22],[-31,8],[-2,23],[8,31],[29,16],[-5,46],[18,19],[9,35],[38,26],[54,-12],[-8,-45],[-1,-16],[-32,-12],[-8,-7],[-7,-30],[1,-43],[-3,-17]],[[78050,14010],[-121,-14],[-10,15],[-45,2],[-16,12],[-6,28],[15,47],[24,32],[37,33],[18,7],[76,10],[55,-14],[39,-40],[11,-32],[-6,-21],[-71,-65]],[[78721,14144],[-17,-14],[-45,8],[-10,12],[-4,55],[-3,16],[-17,15],[-73,28],[-8,40],[10,18],[27,4],[67,-36],[15,-26],[-2,-41],[1,-13],[21,-27],[33,-28],[5,-11]],[[32412,14480],[-44,-26],[-23,0],[27,64],[26,2],[41,36],[11,-5],[-22,-30],[-16,-41]],[[34100,14650],[-24,-2],[-30,17],[-4,30],[0,16],[23,13],[14,2],[81,47],[36,11],[-16,-28],[2,-26],[-13,-23],[-69,-57]],[[32450,14706],[-27,-60],[40,1],[28,21],[29,9],[25,-30],[-52,-23],[-50,-40],[-20,-21],[-22,-9],[-28,3],[-28,-4],[-25,-39],[-26,-18],[-8,15],[-10,9],[-56,14],[-26,20],[-23,14],[-25,6],[13,36],[15,31],[85,42],[-8,13],[-6,17],[67,21],[2,21],[-4,24],[21,16],[20,24],[14,7],[42,-3],[29,-33],[-12,-33],[26,-51]],[[32687,14732],[-20,-23],[-16,-4],[-15,10],[-20,-35],[-40,11],[-16,9],[10,5],[7,15],[22,31],[38,79],[7,25],[-31,41],[-5,13],[7,24],[11,17],[26,19],[34,0],[17,-16],[0,-29],[58,-27],[-10,-56],[-22,-35],[-3,-42],[-33,-19],[-6,-13]],[[32791,14932],[-26,-2],[7,31],[23,21],[38,14],[-24,-35],[-7,-16],[-11,-13]],[[33931,14945],[11,-8],[9,4],[9,8],[9,19],[33,27],[31,3],[-10,-28],[74,-50],[-6,-39],[14,-32],[-30,-10],[-24,-33],[21,-13],[12,-28],[-25,-7],[-54,16],[-28,-3],[3,26],[-9,10],[-33,-5],[-14,-57],[-10,-5],[-12,9],[9,37],[-14,6],[-14,-1],[-42,-27],[-12,-1],[-25,32],[79,42],[-33,21],[-7,26],[5,36],[-29,-5],[-28,-14],[-13,-2],[-11,12],[4,26],[23,43],[18,45],[36,22],[21,17],[28,8],[12,16],[26,1],[15,-37],[-1,-22],[-12,-24],[-6,-61]],[[34062,15087],[4,-10],[56,5],[15,-14],[-31,-20],[-8,4],[-27,-6],[-76,15],[-18,23],[67,12],[18,-9]],[[33152,15053],[-35,-20],[-21,6],[-33,24],[45,7],[4,70],[22,27],[43,-16],[-26,-36],[-9,-28],[9,-24],[1,-10]],[[34480,15244],[-24,-26],[-61,39],[-16,25],[7,19],[98,17],[26,-9],[12,-40],[-42,-25]],[[0,3253],[447,8],[89,-8],[94,-25],[207,-2],[194,-11],[50,-33],[65,-20],[137,17],[110,8],[89,2],[823,-46],[843,-81],[172,-26],[154,-61],[162,9],[957,-47],[148,-1],[586,-49],[1026,-114],[89,-4],[97,3],[-51,62],[-96,56],[-129,40],[84,12],[184,1],[-37,29],[-101,16],[-366,19],[-1463,144],[-32,9],[-21,12],[-38,13],[-60,14],[-223,8],[-61,13],[-29,16],[15,7],[17,-3],[340,12],[38,17],[2,11],[-18,8],[-59,10],[-137,48],[-44,21],[23,33],[28,14],[105,11],[31,22],[-20,40],[-241,80],[-162,29],[-107,-20],[-203,-1],[-251,-10],[-68,11],[-70,32],[-82,57],[-42,14],[-80,48],[-106,46],[-561,111],[-98,30],[-702,175],[-29,30],[-18,32],[324,-71],[61,0],[72,18],[55,-5],[75,18],[84,9],[219,-56],[442,-88],[118,-31],[63,-22],[52,-7],[51,-16],[63,9],[38,-8],[92,5],[419,10],[166,-9],[195,-42],[75,-71],[56,-32],[107,25],[90,30],[173,25],[56,-10],[93,-37],[105,-62],[445,17],[187,-3],[133,-28],[485,93],[75,20],[111,65],[-91,20],[-65,7],[-25,33],[44,13],[140,18],[272,28],[161,27],[86,70],[369,109],[117,48],[108,79],[-242,157],[-232,136],[74,42],[73,33],[35,26],[29,37],[-76,45],[-71,33],[-117,32],[-440,77],[-150,33],[60,51],[80,39],[169,17],[1079,60],[1087,74],[27,37],[-144,44],[-123,11],[-45,13],[-17,28],[-1,38],[-14,6],[-46,4],[-196,44],[-41,17],[-65,41],[-17,32],[39,82],[60,35],[104,19],[75,7],[225,-2],[88,11],[37,11],[-7,39],[-25,18],[-1,24],[38,14],[47,-1],[13,29],[-26,47],[-67,25],[-176,43],[-400,64],[-155,50],[-89,38],[-74,44],[-75,21],[-52,23],[11,28],[-24,44],[-29,8],[-127,-19],[-227,10],[-278,41],[-192,47],[-251,127],[-99,63],[73,44],[80,28],[334,64],[50,23],[68,58],[-112,24],[-95,-2],[-84,16],[-342,4],[-193,-8],[-162,72],[-121,71],[-34,36],[-26,64],[41,94],[34,67],[-4,83],[9,113],[58,38],[45,7],[105,-87],[90,-7],[131,17],[83,45],[44,17],[81,4],[156,-20],[71,8],[80,-4],[251,-58],[55,-27],[30,-21],[9,-30],[31,-31],[107,-15],[299,17],[78,-7],[212,-86],[180,-90],[62,-23],[102,-16],[36,14],[31,34],[97,42],[218,52],[52,52],[-29,28],[-84,30],[-51,10],[-28,34],[2,47],[17,45],[57,11],[104,-61],[130,-57],[45,-9],[35,3],[65,20],[78,15],[149,-122],[88,-9],[110,0],[21,19],[-13,32],[-18,35],[-23,5],[-3,32],[48,30],[33,13],[-13,22],[-53,33],[-31,6],[-28,14],[9,23],[35,10],[49,34],[-15,39],[2,51],[-20,27],[-116,53],[-169,87],[-157,39],[-350,-31],[-124,20],[-81,23],[-88,30],[103,32],[108,22],[32,20],[41,40],[48,29],[39,8],[128,-15],[289,-108],[61,-12],[198,-50],[55,-2],[68,11],[-55,48],[-61,34],[-145,96],[16,46],[94,76],[245,6],[107,27],[139,58],[179,96],[154,12],[192,30],[65,-22],[164,-93],[103,-32],[35,-3],[37,3],[-97,115],[63,15],[80,13],[66,29],[49,24],[168,111],[150,31],[426,48],[146,-44],[123,-5],[27,13],[25,59],[65,115],[55,41],[185,43],[145,-2],[104,-47],[97,-31],[89,-14],[90,1],[134,27],[178,9],[83,14],[96,-26],[236,-9],[183,-37],[113,-1],[153,36],[83,5],[299,59],[234,12],[177,-26],[286,16],[290,-12],[117,-21],[652,13],[518,55],[71,19],[111,60],[61,55],[41,17],[87,6],[149,-12],[205,-41],[176,15],[337,-23],[32,19],[32,104],[55,165],[47,49],[77,-13],[233,-94],[5,-40],[-24,-29],[-38,-11],[-11,-80],[31,-23],[52,7],[33,-35],[-73,-60],[-52,-34],[-33,-15],[-23,-115],[-31,-38],[-4,-42],[50,0],[50,17],[44,5],[140,30],[255,35],[84,17],[48,6],[31,23],[-43,57],[-14,47],[26,39],[-7,67],[-24,68],[49,50],[46,-11],[79,8],[45,-25],[69,-22],[66,-11],[63,-45],[21,-98],[-19,-100],[-65,-73],[-121,-66],[-137,-105],[29,-50],[71,17],[309,-5],[199,8],[125,-12],[158,-27],[125,-39],[149,-8],[93,15],[87,-20],[339,84],[138,48],[79,-24],[128,20],[71,-18],[133,30],[84,3],[97,-12],[296,-6],[22,-55],[90,-83],[73,-32],[93,14],[67,25],[106,-9],[153,35],[153,-11],[64,6],[29,23],[25,51],[-47,28],[-134,36],[-123,74],[-55,16],[-88,-9],[-41,13],[-44,24],[57,29],[70,93],[-29,84],[-33,18],[-81,-3],[-98,-30],[-39,21],[-64,11],[-25,78],[-68,146],[-36,42],[-108,38],[-93,19],[-90,24],[-27,58],[17,79],[108,17],[104,-8],[58,-15],[67,-6],[77,-16],[50,-23],[40,-13],[75,-1],[260,22],[35,15],[31,28],[55,7],[51,-4],[74,17],[-85,23],[-91,44],[-137,53],[-115,29],[-209,20],[-107,-7],[-67,11],[-239,-6],[-65,21],[-46,58],[-65,137],[-18,73],[44,27],[29,30],[71,2],[103,-11],[34,-14],[25,-43],[-25,-44],[-33,-23],[20,-21],[105,-6],[52,-13],[45,-5],[97,20],[142,8],[71,-20],[85,-15],[125,24],[445,-13],[54,-6],[54,-40],[46,-24],[49,10],[145,-46],[77,-36],[79,-18],[67,-5],[75,9],[98,30],[81,12],[58,-11],[123,-6],[94,-36],[73,15],[77,41],[244,29],[163,-8],[298,-74],[69,-7],[136,44],[44,72],[-6,81],[39,19],[33,-9],[60,56],[82,-5],[51,-10],[31,36],[28,77],[97,6],[70,-12],[92,-49],[0,-41],[-38,-43],[-63,-108],[39,-62],[59,6],[75,-13],[91,27],[58,1],[101,-93],[68,-5],[53,5],[172,84],[50,9],[61,-38],[89,-89],[78,-51],[114,-32],[99,-9],[116,-42],[64,-35],[146,0],[62,-15],[176,-72],[160,36],[83,33],[40,61],[-20,91],[-7,92],[24,38],[42,7],[191,-103],[-12,62],[-16,47],[-49,82],[7,61],[41,19],[80,-32],[96,-16],[79,-36],[155,-128],[50,-112],[105,-28],[73,5],[83,18],[111,16],[86,-5],[79,21],[24,-61],[-74,-88],[-29,-57],[24,-15],[45,13],[37,18],[129,-9],[104,40],[89,14],[84,42],[69,-4],[53,-7],[72,-33],[69,18],[41,-7],[56,-2],[297,145],[67,-3],[85,8],[107,35],[83,15],[68,-1],[121,53],[193,-7],[98,28],[191,32],[128,37],[228,98],[92,58],[100,129],[63,129],[70,171],[-34,111],[-37,49],[-31,54],[-73,111],[-20,139],[7,131],[-26,123],[-26,91],[-54,152],[-66,99],[-77,133],[0,121],[-19,95],[-46,68],[-20,54],[36,11],[33,17],[89,21],[213,-37],[19,54],[54,40],[38,50],[-13,77],[-47,31],[-56,65],[26,52],[45,0],[22,57],[-17,56],[21,70],[41,90],[28,33],[-51,54],[-48,70],[12,54],[24,57],[29,80],[40,57],[26,19],[-7,20],[-61,20],[-56,4],[-101,-36],[-16,7],[-5,19],[-6,39],[10,95],[16,90],[14,13],[40,11],[38,69],[35,4],[22,-23],[7,-91],[12,-21],[-4,-44],[18,-15],[22,28],[41,14],[16,-31],[15,-15],[7,26],[-5,74],[-7,30],[-5,48],[9,23],[10,37],[-17,78],[6,29],[37,47],[18,9],[35,0],[63,-31],[30,-2],[22,14],[14,30],[11,98],[-27,35],[0,31],[16,20],[28,68],[42,4],[41,-6],[40,13],[-14,28],[-12,43],[45,20],[29,7],[77,-27],[30,-15],[28,35],[-9,34],[-30,19],[-5,30],[7,38],[48,-19],[11,8],[13,34],[-8,17],[-6,22],[63,5],[9,9],[13,27],[19,9],[56,-1],[12,14],[6,30],[-31,7],[-39,29],[-6,80],[9,57],[35,50],[42,34],[78,-30],[60,7],[24,-30],[33,-8],[8,34],[-15,30],[-10,49],[96,58],[31,-9],[38,14],[-14,45],[21,57],[27,8],[19,-50],[26,-10],[29,12],[71,58],[35,9],[35,3],[36,34],[9,40],[20,28],[62,38],[25,27],[55,95],[-10,24],[16,20],[163,86],[80,8],[133,52],[81,61],[51,25],[45,68],[55,11],[128,47],[96,77],[133,53],[62,-5],[25,-16],[16,-63],[26,-77],[40,-38],[-15,-34],[-38,4],[-41,-8],[-9,38],[15,28],[-15,25],[-37,-6],[-49,-13],[-33,-19],[-43,-41],[-34,-23],[-113,-61],[-74,-88],[-53,-93],[-32,-63],[-47,-5],[-11,-23],[19,-18],[15,-8],[35,-7],[-6,-27],[-24,-8],[3,-21],[25,-32],[5,-46],[-29,-7],[-44,49],[-50,5],[-39,23],[-25,33],[-24,-7],[-18,-47],[11,-52],[-21,-31],[-24,14],[-9,62],[-23,11],[-32,1],[-77,-67],[-28,-2],[-14,-34],[-45,-38],[-29,-31],[-71,-102],[-40,-43],[-76,-24],[-30,3],[-18,10],[-27,7],[-28,1],[-9,-27],[44,-88],[-24,-30],[-53,2],[-26,25],[-21,-24],[-17,-23],[-17,-34],[26,-72],[41,-33],[30,-5],[11,-27],[-65,-11],[-44,-63],[-20,-44],[-23,-38],[3,-44],[34,-66],[46,-47],[46,-4],[60,15],[14,13],[59,7],[26,46],[19,3],[17,-8],[27,-2],[15,30],[20,11],[28,-8],[54,1],[15,-27],[-17,-30],[-33,-42],[-31,23],[-27,-4],[-15,-22],[29,-47],[-11,-42],[-24,-42],[-29,27],[-4,45],[-40,27],[-39,12],[-26,-47],[-41,-13],[-6,-54],[-17,-50],[-24,15],[-9,62],[-67,50],[-35,7],[-70,-13],[-24,1],[-28,-11],[-20,-42],[29,-31],[10,-42],[-1,-31],[-6,-12],[-5,-26],[32,-37],[1,-50],[-25,0],[-21,15],[-81,131],[-51,58],[-22,51],[-53,12],[-38,1],[-46,-21],[18,-24],[9,-36],[-28,-15],[-35,-56],[-23,-48],[-14,-10],[-18,-28],[75,-61],[11,-24],[4,-41],[-24,-22],[-56,-9],[-99,43],[-43,1],[-15,30],[-22,-4],[-13,-51],[-16,-45],[-24,-30],[7,-46],[19,-11],[-15,-19],[-31,-15],[-21,-18],[46,-17],[9,-15],[2,-22],[-72,-16],[-47,-4],[-28,18],[-26,-9],[-17,-29],[-5,-39],[5,-48],[9,-34],[7,-13],[8,-29],[-43,-74],[-5,-16],[-3,-34],[21,-31],[16,-46],[-23,-23],[-25,-47],[26,-9],[44,-2],[48,6],[72,41],[20,7],[9,-16],[6,-25],[-18,-24],[-130,-68],[-24,-29],[33,-16],[67,-3],[26,-22],[-16,-24],[-24,-23],[-28,-54],[23,-20],[72,-32],[131,-42],[97,-14],[-22,48],[-3,61],[68,49],[35,16],[162,29],[44,-1],[34,-13],[-13,-25],[-37,9],[-65,-17],[-100,-53],[-18,-23],[7,-42],[85,-34],[27,-27],[-37,-81],[6,-52],[43,-57],[57,-65],[28,-43],[43,-25],[70,-61],[38,-61],[12,-140],[57,-116],[67,-53],[8,-46],[-22,-46],[-57,27],[-32,-27],[-12,-49],[40,-34],[64,-42],[138,4],[4,-46],[-32,-27],[-25,-34],[-31,-19],[-52,-12],[-13,-42],[22,-57],[72,26],[53,3],[55,-10],[17,-77],[65,-95],[16,-45],[-12,-43],[-40,-13],[-25,-34],[-36,-30],[-41,-15],[-76,-79],[-33,-8],[-14,-16],[65,-8],[45,-2],[97,64],[37,-14],[24,-42],[12,-49],[-24,-42],[-169,-25],[-82,-23],[-88,-66],[101,-31],[74,11],[37,-12],[51,-23],[56,12],[44,24],[33,-1],[31,-12],[4,-41],[4,-72],[7,-54],[-18,-36],[-88,-26],[-64,1],[-2,-76],[96,-57],[60,30],[53,-15],[0,-91],[41,-101],[36,-6],[30,46],[38,0],[15,-54],[-17,-91],[-29,-50],[-78,21],[-44,16],[-35,-34],[-58,-29],[-51,-4],[-45,45],[-52,34],[-83,17],[-78,8],[26,-39],[35,-23],[14,-69],[28,-72],[65,19],[90,-41],[56,-43],[24,-57],[-31,-92],[-51,-33],[-32,-16],[-56,35],[-39,0],[-41,-16],[-14,-42],[-27,-20],[144,-3],[45,-11],[33,-38],[-52,-50],[-95,8],[-41,-19],[-35,-36],[142,-22],[59,12],[93,38],[22,-38],[-37,-38],[-48,-61],[-100,-19],[-75,-1],[-98,22],[-26,13],[-41,7],[3,-37],[26,-26],[66,-94],[11,-36],[-21,-50],[-58,-37],[-65,-15],[-54,33],[-39,91],[-50,27],[-51,8],[-30,-4],[3,-46],[12,-49],[-20,-35],[-44,18],[-57,-16],[-53,-27],[-48,-30],[98,-15],[65,-2],[46,-46],[-17,-23],[-88,-10],[-86,-20],[-117,-50],[86,-21],[81,1],[57,-5],[47,-9],[13,-27],[-29,-30],[-192,-74],[-201,-91],[-74,-29],[-77,-16],[-179,-78],[-113,-36],[-318,-55],[-497,-139],[-169,-99],[-50,-76],[-32,-11],[-95,-26],[-95,-12],[-251,-8],[-257,37],[-208,8],[-113,-12],[-386,66],[-49,-3],[-60,-12],[-48,0],[-36,9],[-78,4],[-263,-26],[-27,-41],[33,-76],[96,-92],[160,-163],[86,-34],[53,-37],[100,-43],[224,-3],[306,-33],[174,-31],[-6,-60],[-105,-115],[-65,-44],[-155,-80],[-213,-40],[-163,12],[-289,65],[-362,60],[-538,56],[-118,27],[-139,26],[-79,-27],[-60,-25],[-133,-3],[39,-22],[537,-155],[458,-113],[54,-29],[65,-20],[-6,-72],[-26,-57],[-90,-50],[-234,-3],[-293,-40],[-146,-1],[-145,39],[-309,113],[-189,84],[-132,96],[-91,76],[-102,75],[7,-47],[18,-47],[50,-58],[73,-63],[5,-26],[-35,-3],[-53,30],[-45,-28],[-16,-33],[19,-44],[28,-42],[93,-94],[80,-25],[106,-57],[258,-106],[44,-36],[78,-78],[16,-59],[76,-58],[52,-9],[47,2],[16,50],[-3,61],[20,15],[74,15],[193,-21],[821,-12],[78,-35],[31,-45],[21,-93],[-87,-112],[-59,-48],[-97,-29],[-88,-23],[-133,-9],[-275,8],[-269,0],[209,-54],[203,-44],[282,8],[112,12],[97,21],[41,-37],[77,-78],[45,-25],[31,-26],[43,-85],[17,-50],[42,-58],[30,-49],[44,-33],[75,-15],[82,28],[159,13],[154,-45],[99,-14],[132,37],[105,52],[221,47],[41,20],[60,16],[91,-4],[36,-12],[46,-51],[43,-70],[63,-35],[67,-25],[38,-3],[126,-22],[164,21],[73,-21],[12,-40],[39,-32],[49,-11],[665,-180],[229,-35],[353,-18],[274,-2],[38,-11],[53,-35],[-105,-24],[-112,-3],[-169,9],[-60,-5],[-129,10],[-67,-7],[-61,11],[-91,-25],[-166,-19],[37,-27],[62,-6],[126,-10],[172,5],[15,-43],[-158,-11],[-336,-8],[-35,-7],[-26,-22],[50,-11],[31,-12],[16,-31],[-36,-79],[56,-55],[39,-9],[41,8],[71,-22],[69,-30],[146,-2],[173,40],[85,-1],[228,25],[207,-4],[289,48],[48,-1],[44,-6],[-80,-44],[-355,-110],[-127,-21],[-51,-14],[29,-54],[46,-56],[94,-60],[59,-89],[57,-19],[110,41],[27,-31],[5,-61],[-29,-49],[-37,-28],[-26,-27],[-17,-36],[46,-31],[123,-19],[163,-7],[151,-1],[93,-9],[341,194],[137,93],[67,40],[56,29],[288,119],[67,36],[76,53],[141,8],[193,86],[171,66],[68,13],[51,5],[60,14],[150,-5],[107,11],[190,42],[145,27],[154,23],[174,4],[463,44],[132,-19],[146,-46],[95,1],[125,14],[86,18],[39,-53],[20,-69],[-42,-64],[-70,-40],[-19,-66],[95,-33],[108,10],[206,32],[164,42],[45,28],[64,-8],[109,35],[136,146],[171,147],[144,94],[93,110],[77,63],[86,48],[58,24],[132,5],[189,76],[275,86],[211,-41],[223,-63],[110,51],[87,9],[74,22],[74,18],[53,45],[71,38],[54,55],[271,27],[284,36],[38,13],[37,-8],[98,11],[125,30],[172,10],[90,-4],[82,82],[164,17],[175,32],[73,24],[57,6],[1413,63],[61,31],[124,25],[47,61],[-190,25],[-58,26],[-65,7],[-38,-9],[-164,7],[-1303,94],[-27,8],[-45,57],[9,104],[-39,82],[-91,22],[-94,-2],[-119,-10],[-314,-44],[-125,-4],[-335,68],[-221,77],[-145,25],[-104,52],[-97,40],[-7,91],[23,85],[187,246],[117,118],[78,9],[71,53],[73,119],[59,56],[135,66],[59,17],[212,81],[58,2],[95,-13],[108,73],[329,156],[75,58],[91,36],[266,132],[238,64],[118,18],[144,40],[160,59],[139,57],[497,109],[298,29],[203,32],[144,-19],[143,6],[123,28],[57,24],[83,59],[276,-28],[178,40],[74,4],[78,18],[-31,21],[-28,3],[-28,28],[-37,57],[37,73],[28,37],[82,45],[43,64],[40,94],[135,185],[38,26],[86,8],[73,-5],[83,2],[210,-48],[39,19],[67,54],[56,68],[120,100],[23,30],[-10,49],[-180,-21],[-136,-33],[-131,18],[-17,28],[28,21],[49,8],[19,34],[-45,28],[-81,16],[-36,21],[3,51],[20,75],[44,21],[36,31],[96,105],[57,32],[164,29],[190,-44],[44,12],[46,59],[-47,90],[-36,34],[0,30],[100,-14],[93,-20],[109,4],[129,90],[181,75],[88,31],[78,18],[42,76],[62,144],[46,75],[-1,45],[-14,37],[-47,-10],[-43,-5],[-101,38],[-125,61],[-38,68],[-18,61],[39,33],[38,20],[41,5],[73,-25],[93,-62],[46,-24],[53,-46],[40,4],[47,64],[38,85],[32,26],[49,28],[54,41],[-24,40],[-58,21],[-8,24],[25,27],[47,5],[59,-58],[80,-39],[55,-13],[47,-32],[74,-108],[89,-179],[41,-2],[78,16],[84,7],[56,51],[12,128],[22,58],[-8,59],[-38,60],[-33,44],[6,33],[28,24],[37,8],[64,24],[99,-28],[54,-5],[81,16],[84,35],[86,25],[67,-19],[29,-64],[-33,-65],[-54,-48],[-49,-59],[-13,-64],[2,-35],[47,-9],[416,8],[55,-6],[72,0],[78,-21],[132,8],[118,23],[56,0],[97,-21],[69,-44],[143,13],[40,14],[39,59],[41,11],[48,-48],[15,-110],[22,-52],[61,-47],[60,40],[39,48],[94,93],[107,71],[82,42],[200,70],[99,44],[194,60],[250,32],[446,108],[147,12],[240,28],[123,30],[125,23],[77,80],[175,-61],[60,-7],[82,48],[90,119],[131,-49],[75,-77],[93,-60],[208,-104],[66,-24],[138,-21],[37,17],[65,69],[67,100],[42,42],[61,35],[69,55],[-18,30],[-39,10],[-36,15],[9,30],[122,7],[64,-101],[66,-34],[80,-32],[186,26],[159,2],[138,-20],[68,3],[61,76],[99,28],[56,-34],[35,-112],[127,-31],[266,-51],[30,13],[33,59],[23,72],[54,12],[69,39],[37,-6],[52,-47],[-18,-114],[-29,-105],[35,-85],[31,-47],[40,-8],[67,-2],[82,6],[51,-4],[261,42],[32,94],[42,107],[103,136],[40,-10],[31,-14],[70,-67],[42,-34],[9,-49],[-46,-47],[13,-31],[46,-25],[148,-41],[48,8],[71,42],[72,86],[39,98],[61,-5],[59,-20],[41,-51],[0,-97],[57,-66],[46,-42],[120,-45],[128,-12],[90,-26],[146,10],[71,30],[46,8],[80,24],[84,57],[52,23],[192,52],[145,57],[154,102],[150,61],[230,31],[64,13],[88,-1],[217,73],[82,42],[46,15],[52,52],[28,102],[22,63],[-4,61],[-20,80],[-46,71],[-47,104],[21,119],[37,49],[96,54],[95,11],[108,-7],[94,-11],[8,-51],[-41,-55],[-52,-54],[-31,-23],[11,-46],[68,-7],[149,10],[43,-42],[106,-184],[26,-87],[37,-25],[58,12],[125,-1],[87,13],[71,1],[37,-9],[38,-42],[72,-49],[72,36],[52,17],[63,-4],[99,-57],[99,-133],[107,-67],[7,43],[-14,53],[44,47],[53,79],[77,103],[61,105],[15,145],[29,119],[49,57],[48,37],[75,38],[92,8],[88,86],[62,35],[130,47],[163,46],[114,132],[39,16],[58,21],[107,8],[173,42],[54,6],[91,33],[80,78],[58,22],[104,-3],[88,44],[74,2],[68,22],[10,49],[-32,33],[-1,43],[38,56],[30,21],[90,-4],[75,-48],[55,-2],[14,-27],[-48,-35],[-32,-60],[55,-53],[49,-36],[59,7],[71,32],[70,-23],[31,-49],[0,-76],[15,-41],[49,36],[27,76],[-8,97],[3,60],[117,97],[46,73],[-82,15],[-58,-10],[-32,27],[-37,73],[101,61],[116,-2],[67,-52],[144,-83],[80,2],[72,-13],[15,26],[-27,122],[3,68],[-60,38],[-17,87],[25,91],[71,51],[97,24],[208,140],[55,30],[137,29],[160,14],[199,50],[355,-34],[95,-21],[59,-28],[57,-45],[74,-74],[107,-94],[139,-30],[39,-29],[51,-80],[-55,-53],[-45,-4],[-87,30],[-60,33],[-42,-13],[41,-55],[45,-34],[7,-46],[-24,-66],[-164,-130],[98,-37],[59,30],[54,55],[55,25],[37,10],[130,2],[74,22],[56,-16],[55,-35],[81,-35],[116,-38],[143,-147],[111,15],[60,32],[171,10],[147,-66],[83,-23],[240,-20],[143,-42],[91,50],[61,20],[128,10],[65,-10],[178,-54],[315,-55],[217,-29],[191,-1],[91,-24],[166,-26],[63,-20],[159,16],[74,21],[70,47],[39,-11],[27,-59],[-15,-101],[29,-69],[23,-69],[33,-57],[21,-49],[-15,-41],[-46,-37],[-64,-79],[4,-69],[27,-44],[-32,-53],[24,-74],[4,-45],[-22,-36],[-50,-22],[-85,-3],[-44,-21],[-7,-55],[22,-41],[49,-22],[14,-44],[-7,-66],[-22,-56],[-45,-26],[-49,-6],[-91,11],[-66,38],[-42,-33],[-31,-34],[-95,-78],[-44,-51],[-41,-55],[108,-31],[79,-55],[172,5],[55,25],[73,26],[39,-5],[24,-56],[-14,-89],[-3,-69],[-87,-190],[-29,-32],[-41,-52],[-48,-41],[-39,-20],[-75,-60],[-46,-109],[-50,-90],[-73,-154],[-42,-165],[-18,-99],[-28,-103],[-62,-177],[-40,-30],[-69,-72],[20,-49],[54,-4],[66,-11],[89,-37],[118,76],[62,48],[13,96],[-13,97],[38,57],[87,78],[205,56],[42,6],[68,19],[60,70],[53,69],[93,45],[77,72],[12,51],[32,11],[96,50],[25,37],[30,28],[21,63],[8,118],[24,89],[47,118],[38,86],[37,54],[99,29],[43,33],[57,73],[39,44],[-5,90],[22,83],[61,50],[78,92],[98,13],[74,48],[79,-33],[95,-46],[161,14],[76,-21],[59,25],[52,71],[19,87],[61,50],[69,-1],[114,86],[118,77],[96,19],[77,60],[55,102],[59,79],[73,75],[20,133],[46,67],[85,59],[71,32],[298,100],[229,66],[231,82],[71,-1],[93,45],[153,2],[40,4],[53,93],[114,86],[71,28],[90,74],[73,7],[103,-13],[87,-20],[78,-1],[113,62],[176,10],[54,30],[38,26],[249,87],[93,-17],[132,15],[80,-4],[76,-11],[96,-3],[166,31],[70,20],[132,76],[146,18],[64,20],[82,17],[67,-30],[48,-26],[29,-6],[39,-5],[95,30],[79,-8],[101,-33],[67,-27],[35,0],[62,24],[76,60],[71,24],[67,-15],[46,-25],[81,-34],[126,5],[120,13],[101,28],[87,30],[80,-46],[92,-17],[149,81],[57,-18],[39,-21],[32,-10],[39,-68],[142,13],[126,57],[108,43],[105,28],[83,39],[122,148],[-2,46],[17,28],[26,12],[194,-1],[60,12],[79,39],[137,-30],[131,-47],[34,5],[53,1],[93,-29],[105,-57],[93,-15],[385,-142],[218,-35],[110,-47],[28,-16],[32,-48],[58,-5],[46,19],[61,-73],[148,-55],[154,-27],[100,43],[170,122],[52,56],[-10,122],[89,136],[151,67],[188,35],[116,30],[154,28],[74,-29],[38,-21],[57,-25],[68,-76],[106,-172],[79,-62],[69,-5],[60,-10],[63,-39],[90,-121],[-54,-108],[-46,-40],[-196,-46],[-86,-37],[-75,-23],[-21,-90],[31,-42],[81,21],[95,10],[74,18],[68,28],[59,40],[140,21],[91,34],[82,20],[57,35],[58,-5],[58,-34],[46,3],[124,-11],[58,25],[51,2],[52,-19],[54,-26],[54,-7],[70,16],[98,42],[125,46],[117,15],[28,-1],[24,-9],[-117,-54],[-187,-71],[-100,-69],[59,-29],[352,77],[160,58],[142,26],[35,19],[116,90],[42,24],[125,32],[163,34],[124,39],[84,40],[63,4],[49,-29],[63,-33],[62,8],[76,31],[53,72],[31,53],[57,18],[73,16],[59,-18],[96,-38],[67,-20],[58,-151],[136,-133],[49,-35],[119,13],[128,-52],[55,6],[52,16],[47,-10],[70,32],[73,167],[67,163],[66,72],[40,30],[50,14],[77,34],[104,10],[77,-14],[167,-12],[136,41],[154,-7],[76,48],[82,7],[111,-41],[32,-29],[61,-42],[15,-41],[16,-74],[30,-2],[103,73],[56,13],[106,117],[56,-30],[127,-50],[51,-15],[100,-85],[51,18],[42,40],[124,-4],[116,-35],[48,-29],[59,-50],[37,-12],[29,14],[240,-19],[104,-37],[79,-45],[278,-21],[107,-46],[64,22],[127,-7],[52,-39],[46,-43],[101,-37],[55,7],[78,30],[78,41],[78,0],[37,-35],[13,-88],[58,2],[64,40],[56,-10],[20,-61],[-30,-82],[-71,-113],[-29,-95],[-59,-86],[10,-41],[59,-20],[59,61],[132,42],[69,55],[119,20],[117,-19],[83,-73],[154,-123],[6,-44],[13,-46],[-5,-41],[-23,-47],[82,-55],[73,-9],[59,5],[247,-53],[118,21],[106,0],[126,8],[97,-2],[77,-9],[91,19],[74,26],[36,-16],[15,-137],[5,-81],[42,-31],[44,31],[32,41],[195,-19],[78,-2],[74,-22],[75,-51],[72,22],[43,31],[58,20],[17,51],[7,85],[-2,83],[34,15],[35,-15],[46,-40],[105,-124],[80,-81],[34,-38],[49,-31],[99,-75],[136,-31],[133,-60],[155,4],[121,-77],[82,60],[43,14],[63,-16],[76,-52],[60,-12],[205,-86],[110,-30],[41,-63],[54,-60],[0,-61],[24,-77],[123,-61],[48,-59],[59,-78],[107,-293],[56,-52],[81,5],[76,-76],[24,10],[3,31],[-69,198],[-5,107],[54,61],[127,17],[98,-114],[90,-69],[60,-12],[120,3],[113,73],[86,-26],[138,-9],[179,-43],[77,8],[137,-19],[167,-61],[95,-23],[20,-25],[44,-41],[22,-50],[24,-46],[58,-52],[58,-9],[115,-44],[241,-136],[87,-40],[51,-29],[25,35],[7,72],[44,15],[47,-107],[49,-81],[22,-71],[-51,-58],[-74,12],[-52,0],[-53,-97],[-22,-165],[49,3],[36,15],[8,-61],[-22,-51],[-44,-20],[-76,39],[-93,27],[-102,10],[-99,49],[-39,3],[-41,-3],[53,-51],[55,-46],[125,-40],[156,-62],[4,-38],[-37,-47],[-46,-100],[-142,-86],[-83,62],[-98,15],[-49,-37],[-98,4],[-194,-14],[-76,79],[-119,43],[4,-36],[102,-130],[109,-30],[108,-35],[26,-33],[-49,-31],[-66,5],[-83,-61],[-158,10],[-75,-3],[-44,-25],[-39,-9],[31,-22],[38,-60],[-54,-51],[-50,-25],[-51,12],[-56,-20],[-27,56],[-2,122],[-32,109],[-34,4],[-54,-13],[-17,-93],[38,-161],[26,-50],[-21,-45],[-36,-14],[73,-136],[62,-94],[38,-30],[3,-46],[-30,-20],[-83,18],[-41,-9],[-46,6],[-77,20],[-66,6],[-66,-26],[-56,2],[-50,85],[-44,20],[-36,-26],[-28,-101],[-57,-31],[-58,-46],[-41,-50],[-20,-198],[-34,-41],[-51,2],[-39,-16],[-49,16],[-64,9],[-214,-67],[34,-35],[54,5],[188,-10],[80,-36],[13,-89],[32,-38],[63,-41],[48,-20],[18,-31],[-20,-60],[-27,-56],[-59,-61],[17,-31],[64,-10],[27,-137],[-42,-61],[20,-51],[5,-51],[-43,-47],[-33,-24],[-11,-50],[64,-29],[47,-10],[66,-5],[45,-54],[58,-82],[42,-69],[3,-112],[41,-67],[77,-43],[-2,-46],[54,-13],[53,-4],[19,-41],[-17,-50],[-89,-61],[-37,-44],[89,-7],[92,-46],[117,52],[62,56],[40,50],[30,-13],[3,-52],[36,-87],[151,-84],[84,-27],[81,-14],[71,2],[20,-50],[-22,-46],[-56,3],[-90,-8],[-66,38],[-47,33],[-412,-19],[-93,-15],[-111,-50],[-110,-24],[-169,-50],[-71,-30],[-185,117],[-60,86],[-25,5],[-44,-20],[-2,-61],[86,-133],[39,-35],[0,-35],[-25,-18],[-35,0],[-53,26],[-99,21],[-88,-41],[-108,-87],[23,-58],[29,-33],[-7,-39],[-121,-74],[-40,-4],[-25,-14],[30,-27],[66,-1],[7,-33],[-23,-26],[-109,-30],[7,-40],[59,-19],[77,7],[48,-29],[0,-46],[-49,-26],[-57,-19],[-392,-118],[-57,-32],[3,-43],[137,-11],[410,10],[27,-14],[-10,-34],[-23,-43],[23,-31],[61,-22],[2,-32],[-30,-13],[-61,-15],[-67,-4],[4,-35],[92,-31],[31,-4],[3,-118],[-3,-50],[-49,-25],[-18,-16],[-2,-41],[122,-28],[187,-127],[41,0],[74,-24],[119,-65],[42,-39],[68,-19],[9,-32],[42,-27],[166,-88],[22,-38],[-348,-73],[-350,-54],[32,-48],[378,5],[102,-30],[45,9],[26,32],[204,38],[207,25],[65,-18],[278,-141],[129,-53],[82,-20],[60,-5],[44,-21],[43,-45],[-10,-42],[18,-19],[29,-8],[55,-28],[63,10],[73,32],[51,-7],[92,-45],[-35,-35],[-20,-17],[-24,-32],[-23,-11],[-74,-7],[-41,0],[-42,6],[-4,-23],[51,-26],[74,-26],[480,-21],[137,-46],[135,25],[61,-8],[51,-15],[19,-46],[69,-15],[106,-36],[148,-18],[118,1],[145,-49],[73,-2],[45,-28],[330,-17],[49,-22],[38,-36],[78,-16],[85,-3],[464,-59],[174,-31],[40,2],[40,-6],[125,-26],[127,-14],[61,-36],[-99894,-48]],[[34575,15452],[17,-15],[70,1],[16,-4],[14,-25],[9,-43],[-23,-17],[-121,10],[-44,22],[-22,-1],[-49,-24],[-21,-24],[-82,-32],[-23,12],[-11,34],[-1,14],[8,9],[4,9],[-1,11],[22,29],[95,44],[126,16],[17,-16],[0,-10]],[[34427,15507],[-55,-54],[-26,2],[-54,41],[-15,21],[-3,9],[34,37],[97,-14],[22,-4],[1,-3],[2,-21],[-3,-14]],[[33193,15571],[-14,-6],[-18,5],[0,-10],[15,-13],[-16,-5],[-19,13],[-14,27],[10,25],[19,6],[37,-42]],[[32607,15512],[-12,-2],[5,24],[31,62],[58,29],[-7,-25],[-19,-31],[-56,-57]],[[33159,15806],[14,-7],[121,13],[38,-40],[43,2],[-103,-75],[-28,22],[-9,16],[-7,36],[-67,-9],[-22,7],[-27,-24],[-55,-10],[-19,0],[-24,26],[-1,26],[49,-1],[38,33],[11,34],[19,-9],[29,-40]],[[33503,15872],[-38,-4],[-26,33],[-12,23],[51,2],[23,-9],[12,-26],[-10,-19]],[[33656,15954],[-62,-26],[-32,27],[-7,10],[38,26],[20,-6],[8,-9],[23,-2],[12,-20]],[[33895,16179],[35,-16],[31,11],[17,-12],[12,-33],[-1,-12],[-47,5],[-43,-38],[-51,8],[-7,-31],[11,-17],[-14,-14],[-44,30],[-35,-11],[-11,-51],[-16,-10],[-8,-2],[-14,13],[-29,4],[-2,7],[-18,20],[-51,-22],[13,26],[68,69],[8,21],[79,40],[37,-9],[80,24]],[[34980,16532],[-12,-5],[-19,22],[-3,13],[20,26],[20,35],[7,4],[-5,-70],[-8,-25]],[[34676,16577],[-37,-16],[-13,22],[-7,37],[-19,23],[14,20],[199,-26],[-11,-13],[-96,-17],[-30,-30]],[[37300,16980],[61,-14],[31,-21],[8,-24],[36,-9],[5,-5],[7,-14],[4,-15],[-1,-20],[-62,48],[-86,3],[-20,34],[-44,-20],[-5,13],[0,17],[6,24],[28,-10],[32,13]],[[84331,44685],[0,-6],[-6,1],[0,6],[6,-1]],[[69244,23583],[-17,-5],[-5,19],[1,25],[-10,20],[-5,21],[4,21],[28,3],[28,-7],[8,-35],[-21,-48],[-11,-14]],[[69217,23554],[23,-4],[13,6],[62,76],[16,2],[-2,-59],[16,-26],[-20,-6],[-38,2],[-9,-33],[39,-42],[19,-6],[15,0],[29,10],[23,15],[36,36],[22,13],[41,1],[21,34],[10,10],[24,-1],[21,-13],[13,-31],[7,-37],[-5,-37],[-15,-36],[-26,-22],[6,-26],[-7,-13],[-13,-1],[-12,6],[-16,31],[-20,16],[-48,-1],[-22,-2],[-3,-23],[-12,-18],[-12,-10],[-16,4],[-3,-10],[9,-24],[21,-32],[36,-21],[21,-5],[3,42],[26,4],[23,-12],[16,-30],[-13,-10],[-12,-16],[-3,-21],[-23,-23],[-13,-2],[-44,11],[-26,25],[-6,18],[-16,7],[-18,-23],[-19,-5],[-37,19],[-35,31],[-22,12],[-33,8],[-19,-71],[-26,-30],[-33,-3],[-16,6],[-9,28],[2,29],[5,29],[11,29],[6,32],[-2,30],[-12,22],[6,39],[-12,31],[4,23],[20,16],[-9,13],[-10,4],[-7,18],[-6,22],[7,41],[12,39],[-2,45],[19,42],[17,47],[12,19],[15,3],[7,-13],[3,-26],[-6,-17],[14,-7],[4,-55],[-9,-22],[-1,-22],[-19,-46],[5,-37],[37,-16]],[[64398,25092],[-20,-6],[-18,12],[-11,32],[23,27],[12,-19],[9,-20],[5,-26]],[[32856,61657],[-9,-23],[-31,9],[-6,29],[-1,20],[19,41],[22,-18],[9,-19],[6,-4],[0,-17],[-3,-12],[-6,-6]],[[32848,61966],[-4,-15],[-23,28],[-7,51],[1,11],[3,6],[9,-10],[12,-4],[8,-17],[1,-50]],[[94132,20328],[-9,-23],[-3,26],[17,114],[17,20],[-3,-60],[-19,-77]],[[90931,26844],[-13,-59],[-21,10],[-22,-10],[-13,40],[0,10],[16,-10],[6,13],[4,17],[5,4],[4,24],[14,29],[8,0],[9,-38],[3,-30]],[[90953,26934],[-17,0],[-7,5],[-3,28],[-11,13],[6,9],[2,18],[7,20],[13,-22],[10,-71]],[[91139,27240],[-15,-5],[-6,2],[1,30],[-2,13],[13,27],[20,-13],[7,-20],[-19,-17],[1,-17]],[[90289,28348],[32,-2],[18,14],[16,-2],[19,-33],[22,-18],[16,3],[13,-6],[12,-24],[30,-20],[14,-13],[11,-20],[13,-16],[81,-54],[57,-26],[71,12],[21,15],[21,22],[17,-20],[17,-32],[-3,34],[6,30],[17,23],[20,15],[32,-2],[31,7],[14,13],[14,2],[19,-17],[19,-9],[13,22],[21,51],[12,18],[55,-16],[15,0],[27,53],[17,-1],[51,-42],[22,-53],[-3,-97],[2,-34],[4,-34],[2,-67],[-6,-67],[-1,-52],[3,-52],[-3,-98],[8,-64],[-4,-44],[0,-21],[7,-19],[4,-22],[-3,-28],[3,-32],[-3,-27],[-11,4],[-4,21],[2,26],[-2,22],[-6,19],[-20,22],[6,13],[10,12],[-7,29],[-13,-24],[-8,-33],[5,-11],[-8,-9],[-17,-38],[-12,-51],[-5,-50],[1,-52],[-10,-40],[-14,-39],[-3,-49],[1,-91],[11,-83],[7,-113],[-10,-15],[-30,-7],[-14,-15],[-24,56],[-15,59],[11,24],[24,-14],[8,13],[2,16],[-2,14],[-30,33],[-33,15],[-11,-19],[4,-55],[-3,-13],[-24,-21],[-12,80],[-31,60],[1,-29],[13,-50],[-1,-21],[-5,-29],[-13,-10],[-5,-23],[0,-32],[-5,-51],[-20,-23],[-48,57],[-4,-19],[1,-17],[25,-33],[-12,-25],[-8,-29],[-14,-76],[-23,-64],[-11,-4],[-37,10],[-42,54],[-38,-6],[-62,4],[-40,-20],[-9,59],[-8,21],[3,18],[32,13],[33,-1],[-6,23],[-8,8],[-15,-5],[-41,19],[-29,-8],[-19,27],[-34,97],[-20,45],[-12,18],[-13,9],[-9,14],[-61,221],[-8,51],[-11,129],[48,-62],[18,-39],[9,-50],[16,60],[-3,20],[-43,73],[-6,21],[-2,25],[-10,-25],[-17,-3],[7,51],[-6,51],[-51,111],[-39,105],[-38,130],[-3,16],[-1,28],[-18,87],[-10,65],[-4,56],[17,114],[3,64],[27,-29],[63,-37]],[[91176,28504],[-14,-44],[-17,28],[-2,13],[21,10],[7,-1],[5,-6]],[[90217,28509],[-10,-47],[-11,60],[12,8],[9,21],[2,-3],[-2,-39]],[[91201,28624],[26,-34],[15,-38],[-20,-31],[-14,-6],[-9,36],[-29,-13],[-31,3],[-23,27],[-3,14],[14,14],[38,-1],[36,29]],[[91110,28941],[50,-104],[25,-17],[8,-11],[-2,-46],[-11,-19],[20,-26],[-3,-17],[-4,1],[-24,-35],[-29,-17],[-9,12],[-8,17],[-6,23],[-37,91],[4,25],[-8,38],[-18,-3],[-12,23],[20,22],[26,61],[18,-18]],[[89979,28734],[-8,-2],[-6,32],[3,47],[-14,45],[8,46],[-1,50],[5,22],[16,24],[3,43],[14,2],[25,-33],[9,-85],[-4,-51],[9,-46],[-8,-40],[-21,-32],[-30,-22]],[[90364,29671],[10,-28],[2,-11],[-24,22],[-39,-5],[24,40],[20,-8],[7,-10]],[[90412,29749],[-42,-38],[-15,17],[1,29],[3,13],[36,2],[17,-23]],[[88220,31256],[67,-14],[26,21],[32,-17],[22,-56],[-16,-27],[-15,-4],[-49,22],[-46,-17],[-13,-23],[-9,-51],[-40,-28],[-18,31],[-48,22],[-17,-32],[-34,9],[-32,-14],[-43,8],[-46,57],[-14,26],[11,47],[16,34],[126,49],[67,41],[55,-7],[15,-9],[14,-21],[-10,-38],[-1,-9]],[[92649,36038],[-24,-158],[-7,3],[-9,24],[1,91],[10,58],[24,-10],[5,-8]],[[92622,36108],[-6,-9],[-12,55],[-4,56],[5,51],[14,11],[10,-4],[-11,-94],[4,-66]],[[81439,36835],[-7,-24],[-54,180],[-15,122],[10,23],[10,6],[32,-170],[10,-39],[0,-40],[4,-12],[10,-46]],[[92521,37009],[-7,-16],[-13,29],[-8,102],[6,59],[14,55],[3,30],[-6,62],[42,71],[10,37],[4,48],[-15,52],[-12,10],[10,29],[12,15],[9,6],[7,-6],[5,-101],[17,-36],[-3,-50],[-58,-259],[-16,-97],[-1,-40]],[[91984,38311],[10,-15],[8,2],[8,-9],[-3,-38],[13,-42],[6,-30],[-10,-24],[-6,-8],[-15,20],[-42,121],[7,40],[24,-17]],[[91809,38984],[-8,-1],[-7,10],[6,23],[1,32],[10,-10],[7,-45],[-9,-9]],[[91646,39059],[-10,-18],[-6,42],[1,44],[10,15],[5,-58],[0,-25]],[[82068,39868],[-17,-45],[-19,9],[-3,23],[13,37],[22,45],[7,-28],[-3,-41]],[[91400,40154],[-6,-6],[-10,0],[-13,10],[12,75],[6,-39],[12,-32],[-1,-8]],[[91370,40236],[-6,-3],[-7,6],[5,24],[7,19],[10,14],[-3,-52],[-6,-8]],[[90632,41341],[6,-55],[12,-42],[-5,-28],[-7,-21],[-18,19],[-12,51],[-21,41],[-5,23],[25,-2],[12,8],[5,9],[8,-3]],[[88738,41984],[-11,-10],[-3,24],[14,24],[9,34],[19,-30],[3,-30],[-31,-12]],[[88751,42296],[-21,-51],[-11,7],[-10,-27],[-20,-13],[-12,0],[-22,-13],[-4,16],[4,51],[19,56],[18,35],[46,16],[36,25],[4,-4],[26,-65],[-38,-8],[-15,-25]],[[88081,42754],[-12,-27],[-15,28],[-3,29],[-12,8],[6,27],[6,7],[6,33],[16,-39],[1,-43],[7,-23]],[[87941,42840],[-17,-2],[-4,3],[-3,25],[5,23],[18,6],[7,-6],[-6,-49]],[[88017,42845],[-5,-4],[0,48],[8,24],[4,-50],[-7,-18]],[[84610,42971],[-11,-17],[-10,5],[0,23],[-11,24],[6,28],[4,14],[9,-2],[3,-23],[12,-26],[-2,-26]],[[84777,43444],[-18,-36],[-12,29],[7,58],[12,20],[10,-10],[-1,-45],[2,-16]],[[87975,43891],[12,-24],[13,2],[12,53],[7,-8],[5,-13],[4,-23],[-17,-40],[-8,-7],[-7,-22],[-12,-73],[1,-24],[11,-25],[27,-23],[13,11],[5,-3],[-5,-36],[-11,-27],[-36,12],[-32,-4],[-52,26],[-27,3],[-8,10],[16,21],[10,28],[-5,67],[4,84],[30,41],[14,42],[20,26],[13,-3],[-2,-26],[5,-45]],[[87843,43879],[-7,-6],[-25,11],[0,21],[3,15],[7,10],[16,41],[11,-24],[5,-49],[-10,-19]],[[87871,45159],[-44,-43],[24,58],[51,52],[8,12],[-2,-25],[-26,-43],[-11,-11]],[[86238,45115],[23,-14],[10,-19],[7,-21],[1,-25],[-29,-11],[-52,37],[-51,-31],[-15,0],[-10,22],[8,61],[19,-9],[16,22],[-3,67],[-9,37],[27,68],[12,13],[12,0],[11,-48],[2,-51],[13,-48],[8,-50]],[[86282,45290],[37,-5],[45,43],[21,-18],[9,4],[33,41],[21,11],[15,31],[14,-33],[32,-38],[11,-40],[13,-19],[5,-12],[-20,-42],[-3,-45],[-21,3],[-25,-74],[-95,-124],[-85,106],[-37,71],[-24,99],[-5,82],[-10,51],[4,14],[5,6],[7,-1],[25,-56],[12,-15],[16,-40]],[[87943,45288],[-20,-35],[-1,26],[10,21],[25,84],[11,20],[6,11],[5,31],[1,46],[14,7],[-11,-105],[-40,-106]],[[86831,45332],[-6,-9],[-22,89],[6,27],[-9,46],[15,5],[12,34],[4,-16],[1,-63],[9,-36],[-10,-77]],[[89771,44956],[-7,-70],[-14,-54],[-1,-32],[3,-45],[22,-33],[18,-21],[10,-58],[31,-81],[-1,-56],[16,-69],[16,-137],[4,-121],[16,-80],[-10,-172],[11,-70],[15,-58],[18,-116],[13,-106],[19,-30],[38,-36],[41,40],[28,53],[31,13],[43,28],[31,-71],[17,-80],[74,-104],[42,-68],[32,-38],[30,-49],[-3,-50],[-7,-39],[7,-61],[4,-71],[-6,-86],[22,-130],[7,-103],[23,-101],[-2,-104],[-4,-40],[-3,-58],[18,-72],[17,-54],[24,-58],[33,-89],[23,-17],[20,-2],[-3,-90],[41,-179],[22,-147],[-15,-197],[-14,-114],[3,-56],[53,-137],[30,-25],[-6,-65],[-4,-101],[24,-78],[27,-58],[30,-35],[29,-28],[38,-28],[48,-12],[25,-44],[13,-35],[39,-12],[17,7],[22,14],[14,-24],[11,-31],[21,-86],[44,-85],[30,-14],[18,-43],[24,-11],[22,-6],[30,-33],[49,-76],[45,-12],[20,-21],[44,-83],[17,-44],[18,-66],[-22,-6],[-21,13],[-13,-64],[29,-90],[35,-63],[41,-67],[40,-94],[10,-72],[11,-29],[13,-101],[35,-59],[2,-108],[18,-149],[19,-135],[14,-40],[17,-65],[18,8],[14,21],[28,-64],[15,-28],[8,16],[-17,123],[11,72],[10,9],[16,2],[18,-58],[26,-62],[47,-55],[38,-52],[11,2],[-4,40],[1,59],[15,9],[14,-29],[25,-91],[5,-188],[0,-158],[17,-162],[24,-43],[16,-40],[28,-54],[18,-51],[23,-23],[74,-108],[20,-13],[32,-2],[40,-49],[19,-45],[43,-169],[20,-59],[43,-59],[19,-19],[29,-40],[10,-59],[3,-35],[17,-62],[25,-75],[38,-41],[34,-91],[2,-148],[18,-73],[12,-32],[27,-30],[11,-24],[-23,-195],[22,-391],[-12,-122],[22,-121],[52,-210],[12,-74],[7,-87],[34,-111],[-2,-169],[13,-80],[-3,-105],[-40,-112],[-31,-139],[-1,-118],[-20,-229],[-14,-61],[-10,-95],[-43,-230],[-2,-90],[6,-108],[-7,-103],[-11,-71],[-10,-130],[-44,-202],[-63,-150],[-4,-114],[-8,-50],[-13,-62],[-39,-69],[-23,-29],[-9,-40],[-22,0],[0,-13],[15,-12],[-7,-21],[-58,-36],[-40,-47],[-40,-113],[-17,-60],[-21,-57],[-13,-27],[-6,-28],[-8,-72],[-21,-13],[-18,-21],[8,-68],[-9,-78],[-3,-53],[-10,-34],[-11,12],[-10,-5],[-12,-19],[19,-5],[11,-9],[-39,-76],[-36,-78],[-10,-51],[-15,-65],[-14,-144],[-11,-83],[8,-58],[-2,-11],[-8,-4],[-5,7],[-17,-20],[-4,-20],[7,-25],[4,-8],[-2,-12],[-6,-13],[-16,0],[-19,-21],[-53,-213],[-23,-57],[-27,-87],[-10,-79],[-8,-86],[-10,-145],[-9,-103],[-21,-99],[-7,-71],[-3,-135],[10,-103],[-7,-54],[0,-52],[-8,-49],[-34,-11],[-28,-40],[-40,-65],[-23,-24],[-51,-18],[-99,8],[-189,-24],[-37,-15],[-70,-45],[-68,-70],[-66,-94],[-149,-256],[-117,-28],[-22,0],[-18,7],[-21,-16],[0,-32],[19,-33],[14,-31],[25,43],[11,-12],[4,-79],[1,-50],[-8,-27],[-15,-20],[-17,13],[-2,27],[-22,65],[-26,57],[-25,18],[-14,-19],[-23,-20],[-20,72],[-20,63],[-28,7],[-24,-1],[-19,27],[-39,43],[8,33],[10,35],[22,13],[-6,48],[-12,39],[-30,10],[-21,-7],[-12,-30],[-16,-54],[-64,-67],[-32,37],[-36,55],[18,-4],[36,2],[30,49],[13,31],[15,66],[-19,46],[-18,34],[-26,30],[-98,-102],[-21,-15],[-19,-20],[34,-17],[20,5],[21,-30],[-34,-42],[-26,-12],[-34,-25],[-63,-66],[-80,-136],[-35,-40],[-41,-31],[-56,37],[-31,8],[-40,56],[-67,38],[-63,74],[-44,38],[-31,8],[-43,-16],[-73,67],[-56,7],[-36,-67],[-29,4],[-18,10],[-59,110],[-56,55],[-107,28],[-66,76],[-49,146],[-94,167],[-25,62],[-12,60],[-1,47],[13,90],[17,89],[3,50],[-35,167],[-50,159],[-23,49],[-62,106],[-57,79],[-15,42],[-4,21],[27,-10],[12,32],[19,11],[14,-43],[17,-8],[0,72],[10,35],[-7,15],[-5,14],[-25,16],[-28,-24],[-21,-31],[-28,-26],[-11,-28],[-29,-1],[-12,-7],[-58,-53],[-36,-1],[-57,18],[18,73],[23,43],[19,50],[30,173],[-5,151],[-15,61],[-48,125],[-22,76],[-27,80],[-13,-47],[-8,-48],[-26,-70],[-13,-157],[-50,-239],[-35,-3],[-30,10],[-52,-28],[-35,-33],[-32,0],[-18,-10],[-23,8],[37,187],[31,-5],[35,7],[15,-3],[23,2],[18,86],[11,96],[-7,62],[-3,64],[7,73],[3,53],[43,174],[37,89],[42,72],[-5,68],[-14,85],[-4,65],[20,20],[19,41],[-22,187],[-14,55],[-22,55],[0,-71],[2,-70],[-30,-89],[-40,-64],[-26,-60],[-25,-136],[-32,-115],[-30,-43],[-27,-9],[-27,-18],[-42,-45],[-42,-39],[-30,-50],[-26,-27],[-86,-230],[-40,-76],[-8,-31],[-16,-26],[3,-37],[13,-24],[13,-102],[-8,-22],[-14,11],[-35,57],[-22,-21],[-18,-23],[-46,105],[-20,24],[-24,42],[-26,36],[-11,5],[-19,-8],[2,28],[13,23],[11,6],[21,-34],[24,-30],[14,-2],[6,12],[-23,118],[-15,104],[-7,30],[-19,106],[-9,30],[-40,74],[-43,88],[-11,104],[-16,67],[-20,42],[-31,38],[-85,14],[-35,107],[-21,133],[16,9],[19,2],[7,41],[-5,63],[-84,79],[-40,83],[-34,35],[-31,14],[-42,-3],[-53,3],[-126,131],[-30,4],[-90,-41],[-31,7],[-137,179],[-91,86],[-30,15],[-39,15],[-32,-21],[-22,-19],[-46,-22],[-182,14],[-156,-28],[-105,-19],[-67,-24],[-112,-107],[-133,-103],[-108,-49],[-99,-65],[-66,-19],[-84,-8],[-179,32],[-61,-24],[-97,-120],[-29,-29],[-55,-33],[-141,-155],[-65,-33],[-42,-11],[-36,-32],[-32,-66],[-45,-183],[-27,-86],[-61,-138],[-39,-46],[-40,6],[-44,-48],[-38,51],[-31,9],[-50,-4],[-174,-58],[-25,68],[-32,10],[-60,-3],[-90,20],[-164,-25],[-79,-28],[-31,-25],[-58,16],[-99,-23],[-35,-39],[-26,-34],[-51,-154],[-56,-51],[-47,-1],[-51,-12],[-105,-148],[-106,-144],[-36,-15],[-40,-24],[-52,-12],[-26,-13],[-122,37],[-77,4],[-97,22],[-83,71],[-64,40],[-73,155],[-44,58],[-80,70],[-23,-2],[-19,-19],[-33,49],[-1,64],[-9,54],[1,142],[5,167],[29,-38],[23,-36],[49,2],[44,62],[25,92],[21,103],[-3,110],[-15,193],[10,41],[15,16],[5,96],[4,296],[-11,111],[-68,226],[-45,196],[-32,89],[-28,143],[-23,198],[-7,100],[-7,185],[8,105],[-4,61],[-28,167],[-64,156],[-10,58],[0,61],[-15,71],[-51,143],[-52,123],[-9,60],[-10,249],[-19,114],[-89,287],[-104,248],[-29,102],[-13,34],[8,4],[11,-13],[13,-25],[7,-2],[6,21],[-1,47],[4,26],[9,-14],[11,-53],[33,-138],[10,-70],[42,-21],[13,18],[15,36],[5,97],[-21,44],[-20,19],[-32,72],[-21,115],[-33,107],[0,38],[15,28],[25,-15],[23,-62],[25,-57],[-4,-100],[-4,-27],[2,-23],[9,-22],[12,-17],[13,25],[11,58],[7,-7],[18,-133],[14,-37],[27,-41],[24,32],[11,28],[-4,94],[7,91],[-4,67],[-61,177],[-56,218],[-34,109],[-28,164],[-18,56],[-24,92],[-1,104],[2,71],[19,151],[18,79],[56,181],[3,78],[0,59],[8,90],[0,63],[-8,59],[-23,100],[31,177],[45,226],[18,33],[28,31],[5,-47],[-13,-157],[19,-81],[-6,-92],[18,15],[27,18],[21,48],[11,46],[51,184],[30,69],[41,50],[85,61],[81,80],[39,77],[49,66],[34,73],[32,49],[166,183],[28,34],[36,4],[44,-6],[40,10],[43,-42],[31,-5],[77,46],[41,40],[71,89],[31,25],[72,28],[82,37],[98,154],[70,-10],[63,-15],[51,46],[119,28],[66,39],[124,102],[33,35],[50,73],[44,91],[43,123],[27,110],[11,57],[26,90],[17,71],[14,34],[48,48],[71,135],[23,28],[4,43],[-15,24],[-19,15],[-13,143],[-12,99],[-1,69],[5,66],[28,103],[19,44],[28,51],[25,16],[21,45],[34,44],[15,45],[21,91],[19,69],[15,-3],[28,-160],[19,-85],[35,-100],[32,-148],[27,-67],[13,-44],[10,-20],[3,28],[-3,33],[13,112],[-6,79],[2,31],[6,12],[13,-8],[25,-44],[13,-16],[9,3],[-1,72],[13,45],[-5,31],[-22,-2],[-9,39],[-18,44],[-21,32],[-24,74],[-8,28],[10,14],[15,-2],[13,31],[5,42],[-11,69],[12,25],[22,-7],[36,-109],[16,11],[13,44],[23,12],[24,-8],[15,-31],[32,-32],[42,4],[22,-8],[45,6],[22,-10],[-4,17],[-25,20],[-27,4],[-32,-2],[-14,21],[-5,55],[8,40],[5,17],[21,-7],[19,2],[2,53],[7,48],[11,39],[0,37],[-12,-10],[-28,-86],[-14,70],[-20,53],[4,77],[12,76],[18,10],[16,-12],[23,45],[13,34],[-3,28],[3,21],[16,-6],[62,-69],[12,-36],[13,14],[4,39],[-1,39],[-14,-6],[-32,4],[-7,22],[3,19],[-15,45],[21,30],[17,2],[13,20],[0,27],[4,12],[10,-17],[32,-7],[31,-35],[15,-8],[6,19],[2,41],[-39,41],[-1,40],[-17,47],[0,45],[24,39],[5,37],[15,15],[27,0],[19,32],[21,11],[6,70],[-1,48],[9,12],[21,-20],[-6,-55],[0,-53],[-6,-29],[8,2],[5,12],[9,35],[22,-14],[6,-37],[3,-37],[11,-12],[15,56],[21,15],[-1,71],[8,51],[2,38],[13,19],[3,40],[-10,28],[-6,51],[18,11],[18,-25],[13,-64],[8,-29],[11,16],[7,42],[22,25],[22,-34],[24,-48],[31,42],[28,77],[-5,47],[4,49],[35,25],[29,-18],[25,-52],[54,-39],[46,-56],[20,-36],[40,-58],[25,-60],[34,-107],[82,-131],[5,-23],[-11,-43],[-10,-56],[-12,-95],[-3,-139],[12,10],[12,50],[13,-10],[14,-32],[2,31],[-9,18],[-15,64],[0,34],[12,28],[19,32],[20,22],[13,18],[2,24],[18,23],[28,8],[16,-4],[118,-59],[29,-60],[3,-73],[11,-26],[7,46],[-2,100],[10,20],[31,-15],[22,-20],[30,-66],[6,-32],[13,-21],[4,30],[-6,43],[-4,50],[6,43],[36,3],[23,10],[-11,16],[-15,6],[-25,40],[-17,42],[27,42],[-1,10],[-25,-1],[-34,40],[-29,56],[22,103],[45,101],[25,34],[2,34],[12,62],[8,53],[2,42],[11,43],[28,41],[37,15],[18,16],[18,38],[16,46],[-34,90],[3,50],[6,59],[42,43],[22,112],[15,17],[33,-4],[13,11],[-2,89],[3,35],[14,14],[18,-12],[11,-39],[25,-36],[9,20],[-4,39],[-3,51],[23,11],[19,3],[1,41],[-3,33],[8,14],[48,7],[13,34],[7,29],[6,-16],[8,-66],[27,-38],[80,-1],[45,27],[19,-16],[30,-13],[32,31],[20,24],[33,-31],[11,-32],[8,69],[20,24],[20,14],[26,-12],[10,4],[-23,51],[1,46],[-1,69],[4,62],[8,45],[-55,91],[-55,14],[-40,-19],[-17,15],[-36,72],[-34,27],[-2,18],[41,52],[16,-9],[24,-49],[14,-17],[12,4],[7,38],[11,20],[20,-12],[62,-82],[34,-80],[18,21],[31,45],[29,-9],[17,-27],[25,-97],[20,-48],[48,-13],[24,-19],[25,-32],[33,3],[70,-12],[65,-62],[27,-39],[32,-11],[18,-15],[34,-5],[53,44],[24,-40],[11,-28],[48,-52],[53,-17],[37,54],[55,39],[38,60],[28,29],[27,49],[10,-2],[-22,-46],[-2,-26],[17,-11],[-2,-14],[-23,-35],[-29,-56],[1,-34],[11,-18],[13,8],[18,28],[23,16],[19,-23],[7,-80],[14,-53],[30,-7],[19,0],[19,74],[-10,63],[-12,14],[6,23],[48,104],[27,-3],[19,-102],[31,-53],[32,4],[17,-14],[14,-61],[-114,-251],[-5,-28],[15,-45],[6,-53],[-37,-128],[-14,-6],[-13,35],[-19,22],[-18,-16],[-18,-9],[-66,-71],[0,-183],[17,-109],[-10,-71],[-19,-126],[-22,-47],[-17,-30],[-57,-172],[-18,-41],[-19,-59],[6,-56],[7,-39],[22,-44],[83,-92],[38,-64],[66,-76],[15,-53],[9,-43],[47,-49],[34,-30],[10,8],[7,10],[8,0],[9,-6],[-2,-38],[-3,-21],[3,-27],[24,-34],[38,1],[22,8],[25,-36],[22,-24],[36,-48],[63,-58],[49,-38],[58,-140],[44,-81],[49,-59],[72,-41],[33,7],[54,-48],[53,-22],[28,-66],[9,-50],[3,-39],[26,-92],[54,-30],[69,-92],[57,-41],[14,-24],[25,-29],[48,-1],[84,46],[38,47],[51,74],[23,128],[14,103],[71,212],[20,105],[18,140],[15,87],[-5,95],[16,172],[36,237],[13,79],[-7,118],[-22,220],[10,76],[10,107],[-16,77],[-16,53],[-2,75],[17,140],[15,74],[16,96],[-9,182],[34,63],[13,32],[26,0],[12,-14],[3,36],[-10,34],[-4,39],[-8,20],[-16,7],[-13,21],[-19,22],[3,81],[33,156],[18,60],[11,-25],[14,-20],[2,45],[-5,46],[25,152],[27,207],[8,188],[44,36],[23,47],[13,55],[25,0],[17,-24],[-11,-41],[-4,-31],[47,-79],[16,-60],[7,-57],[9,-54],[4,-72],[0,-115],[6,-109],[17,-34],[15,-22],[22,-3],[31,-18]],[[89520,45676],[-23,-33],[-15,18],[-4,36],[2,16],[19,28],[21,-65]],[[89538,45972],[-17,-36],[-17,11],[-6,20],[6,29],[23,5],[11,-29]],[[89490,45993],[-7,-15],[-12,34],[14,40],[12,-19],[-7,-40]],[[54709,79837],[-2,-6],[-1,-21],[-11,-28],[-11,-35],[0,-32],[30,-109],[27,-66],[5,-25],[17,-19]],[[54763,79496],[-17,-25],[-3,-36],[-10,-16],[-3,-20],[4,-19],[0,-24],[6,-32],[-26,-7],[-30,1],[-11,-2],[-11,-9],[-10,5],[-28,30],[-16,7],[-11,-2],[-8,-13],[-15,-17],[-13,-12],[3,-11],[58,-27],[10,-42],[-11,-34],[-4,-17],[-14,-13],[-16,-12],[-20,-3],[-2,-18],[7,-54],[-6,-12],[-6,-17],[6,-45],[12,-3],[3,-10],[-2,-18],[-3,-19],[-4,-21],[-2,-9],[-8,-5],[-26,3],[-22,-18],[-44,-62]],[[54470,78838],[-16,-11],[-17,-25],[1,-55],[-2,-5],[-4,-11],[-53,19],[-2,0],[-35,-7],[-24,-26],[-30,-14],[-62,8],[-60,-10],[-14,-7],[-16,-5],[-14,-14],[-9,-21],[-14,-26],[-22,-21],[-23,-16],[-5,-13],[-8,-7],[-13,10],[-10,-1],[-13,7],[-42,7],[-47,12],[-22,12],[-25,9],[-27,8],[-25,2],[-12,3]],[[53805,78640],[-58,20],[-39,2],[-51,8],[-100,31],[-30,12],[-28,4],[-33,11],[-25,17],[-17,33],[-17,44],[-31,57],[-7,29],[10,25],[10,18],[-1,9],[-8,4],[-56,-25],[-54,-31],[-21,-1],[-20,7],[-27,1],[-27,-8],[-52,-5],[-31,-22],[-19,-45],[-11,-36],[-9,-11],[-18,-4],[-28,3],[-19,10],[-19,31],[-31,4],[-28,1],[-7,6]],[[52903,78839],[1,19],[-11,38],[-19,12],[-47,-71],[-13,-6],[-38,19],[-33,30],[-3,22],[-6,19],[-28,17],[-34,11],[-11,0]],[[52661,78949],[4,11],[4,18],[-3,14],[-8,15],[-4,16],[-1,16],[-3,12],[-1,12],[-3,9]],[[52646,79072],[23,70],[4,43],[-20,26],[-8,7]],[[52645,79218],[7,6],[28,-5],[18,15],[10,14],[25,-14],[36,-27],[18,-18],[7,-14],[4,-12],[-2,-20],[8,-8],[17,-3],[12,-6],[-4,-27],[-1,-22],[16,3],[20,17],[16,30],[9,30],[8,71],[2,6],[12,-6],[49,4],[23,-14],[37,-2],[-1,-11],[7,-18],[16,-25],[8,-16],[17,-3],[26,9],[15,9],[6,-6],[24,6],[21,20],[5,16],[22,11],[28,25],[40,19],[130,21],[5,16],[-2,36],[4,5],[16,-9],[27,-8],[20,-13],[13,-17],[12,0],[19,11],[25,8],[24,-17],[7,-19],[-4,-10],[0,-15],[8,-12],[19,-21],[25,-18],[13,2],[4,17],[5,41],[2,44],[-6,25],[-13,6],[-16,2],[-9,5],[3,14],[13,36],[0,47],[-29,55],[-25,52],[0,18],[15,31],[23,25],[51,41],[17,8],[20,7],[30,17],[15,18],[9,18],[14,99],[4,4],[4,6],[52,-34],[5,5],[9,6],[17,26],[3,19],[0,38],[2,35],[3,11]],[[53837,79934],[8,-4],[22,-18],[18,-21],[17,-52],[39,-13],[49,-2],[18,23],[16,6],[18,-7],[38,-8],[5,41],[22,44],[10,15],[28,-1],[7,32],[6,90],[6,10],[21,-2],[20,-16],[6,-14],[11,2],[14,9],[16,5],[26,-9],[55,-41],[28,-15],[18,3],[16,-1],[65,-63],[45,-9],[41,0],[13,19],[18,16],[18,-2],[16,-8],[31,-28],[14,-7],[19,-4],[14,-6],[13,-48],[7,-13]],[[62809,74238],[-54,17],[-96,37],[-26,20],[-25,51],[-15,25],[-23,32],[-18,12],[-13,23],[-8,32],[-12,30],[-20,35],[-45,118],[-5,13]],[[62449,74683],[-10,19],[-4,11]],[[63492,75947],[25,-34],[45,-90],[63,-147],[15,-42],[10,-48],[9,-59],[14,-52],[64,-130],[28,-48],[45,-63],[16,-14],[21,-3],[39,-1],[35,-24],[18,-17],[18,-25],[16,-28],[17,-77],[-62,25],[-62,-4],[-36,-16],[-34,-22],[-32,-32],[-21,-62],[-17,-142],[-25,-134],[0,-61],[12,-59],[-2,-29],[-11,-12],[-15,-25],[-19,-122],[-10,-25],[-12,-15],[-3,15],[0,32],[-27,28],[-14,-32],[-10,-67],[-20,-71],[-1,-13],[5,-219]],[[63574,73983],[-8,1],[-57,-22],[-12,7],[-48,101],[-10,11],[-21,4],[-13,17],[-10,27],[-5,20],[-51,55],[-7,20],[-1,17],[7,16],[9,14],[24,13],[29,12],[9,8],[5,15],[0,23],[-5,23],[-41,42],[-5,18],[-1,22],[2,23],[6,18],[34,25],[18,25],[-11,28],[-36,65],[-43,71],[-29,1],[-33,-21],[-53,-61],[-30,-26],[-38,-43],[-42,-48],[-34,-50],[-21,-42],[-38,-18],[-19,-36],[-64,-105],[-18,1]],[[62500,75628],[60,76],[17,15],[40,-14],[81,-50],[-5,-28],[8,-16],[19,-22],[35,-21],[31,-12],[15,10],[24,8],[30,-25],[28,-32],[14,-13],[7,-3],[22,10],[25,41],[10,50],[3,23],[-15,33],[-31,36],[-34,31],[-22,28],[-14,54],[-14,6],[-4,7],[-2,19],[0,26],[5,20],[14,8],[14,3],[13,19],[16,38],[7,20]],[[62897,75973],[30,-12],[4,-33],[5,-7],[12,4],[21,14],[16,-11],[21,-40],[30,-42],[16,-28],[6,-19],[15,-19],[22,-23],[17,-34],[15,-81],[16,-19],[57,-31],[19,-6],[56,-11],[19,8],[29,69],[25,72],[24,15],[44,35],[25,33],[11,35],[25,67],[15,38]],[[58487,50460],[-6,-15],[-25,-108],[-5,-16],[2,-10],[11,-20],[-6,-34],[-3,-9],[-4,-32],[2,-29],[6,-11],[17,-14],[25,-10],[29,-24],[19,-5],[5,-17],[-1,-31],[5,-28],[0,-48],[-6,-43],[-30,-20],[-15,-22],[-5,-11],[4,-12],[2,-18],[-28,-42],[-29,-56],[-7,-37],[-6,-44],[-8,-29],[-23,-40],[-22,-82],[-11,-54],[-56,-128],[-49,-63],[-15,-22],[-87,4]],[[58167,49280],[-7,86],[-13,118],[-30,106],[-3,44],[1,86],[0,120],[-2,65],[1,48],[4,82],[-1,49],[-19,56],[-25,60],[-13,30],[-1,24],[0,22]],[[58059,50276],[4,32],[10,35],[10,4],[27,-14],[27,-30],[15,-68],[11,-10],[21,0],[52,9],[13,-1],[24,16],[23,29],[7,30],[5,67],[5,120],[12,1],[33,-43],[7,-2],[7,1],[12,21],[14,18],[10,-1],[38,20],[21,-36],[13,-11],[7,-3]],[[51581,81091],[0,3],[38,17],[17,-33],[28,-1]],[[51664,81077],[4,-11],[31,-30],[10,-25],[23,-23],[-19,-29],[3,-14],[7,-13],[25,-8],[13,-19],[1,-30],[5,-48],[-52,-49],[-15,-53],[-1,-11]],[[51699,80714],[-2,2],[-6,17],[-10,0],[-21,8],[-31,-49],[-14,-40],[-8,-30],[-12,-24],[-2,-25],[1,-11],[-4,-14],[0,-14],[17,-28],[5,-16],[21,-50],[-7,-19],[-5,-19],[-6,-15],[-7,-9]],[[51608,80378],[-22,1],[-28,-6],[-19,-10],[-10,0],[-20,25],[-22,37],[-15,18],[-6,16],[-18,6],[-25,19],[-18,20],[-15,13],[-21,6],[-17,-1],[-6,34],[-2,39],[-14,26],[20,102],[-12,10],[-13,-8],[-18,-25],[-9,-29],[-5,-25],[-31,-24],[-49,-9],[-53,9],[-8,6],[-3,7],[0,9],[3,14],[10,17],[2,24],[-10,20],[-6,8],[3,20],[7,25],[1,14],[-36,44],[-26,8],[-26,1],[-19,5],[-11,-2],[-8,-12],[-9,-9],[-6,11],[-11,76],[-9,11],[-33,13],[-44,5],[-12,14],[-7,34],[-4,41],[-15,40],[-7,10],[-13,17],[-24,-7],[-28,-23],[-16,-6],[-7,-3],[-22,23],[-25,35],[-20,37],[-5,21],[6,25],[-7,19],[-11,35],[-3,27]],[[50701,81276],[121,97],[73,50],[35,15]],[[50930,81438],[8,-50],[7,-16],[8,-10],[11,-2],[12,12],[18,13],[28,-6],[21,-12],[7,-12],[14,-12],[19,-3],[39,23],[37,34],[10,24],[4,22]],[[51173,81443],[22,-14],[19,-3],[9,6],[-6,35],[16,18],[17,9],[8,-15],[16,-16],[13,0],[34,40],[7,-8],[8,-14],[1,-11],[2,-12],[7,-5],[27,2],[13,22],[11,14],[8,-10],[4,-26],[7,-35],[32,-39],[27,-11],[33,8],[13,7],[9,-6],[8,-21],[19,-23],[40,-17],[13,-9],[8,-16],[-2,-23],[-19,-56],[-3,-17],[3,-5],[-4,-11],[-25,-37],[-2,-14],[8,-21],[7,-18]],[[50998,58580],[-11,-37],[-18,-76],[-1,-60],[42,-126],[5,-13],[11,-20],[6,-23],[5,-62],[3,-70],[3,-47],[20,-66],[2,-27],[-14,-99],[-4,-10],[-3,-3],[-22,8],[-10,-10],[-11,-34],[-8,-34],[0,-13],[19,-63],[-12,-89],[-12,-56],[-23,-32],[-20,-8],[-14,-15],[-8,-20],[1,-64],[-29,-58],[-16,-41],[-8,-25],[3,-75],[-10,-77],[-19,-60],[-40,-13],[-35,-7],[-11,-153],[0,-97],[-3,-100],[-6,-40],[3,-57],[-3,-128],[-4,-102],[6,-27],[3,-60],[0,-61],[9,-43],[9,-37],[0,-20],[-5,-12],[-4,-16],[0,-145],[1,-43],[-2,-28],[-8,-22],[3,-74],[6,-47],[6,-34],[-6,-29],[-5,-38],[-7,-97],[-1,-33]],[[50751,55512],[-116,-24],[-130,-39],[-55,-25]],[[50450,55424],[-3,19],[46,26],[-9,75],[-29,90],[-11,16],[-6,45],[7,29],[-4,20],[-2,60],[-14,67],[26,2],[0,215],[0,205],[0,175],[0,139],[-5,166],[-1,122],[-1,161],[-9,50],[-40,85],[-11,44],[-1,59],[-9,60],[-1,105],[0,123],[-4,19],[-43,59],[-60,82],[-46,63],[-4,5],[-4,16],[6,186],[10,24],[14,77],[8,62]],[[50250,58175],[6,0],[10,20],[7,30],[8,-7],[14,-5],[6,10],[-1,23],[4,23],[11,10],[3,21],[0,24],[9,6],[15,-1],[13,8],[10,12],[14,48],[7,17],[2,12],[8,11],[21,4],[16,-3],[11,-28],[71,24],[35,-14],[69,121],[16,36],[21,86],[7,33]],[[50663,58696],[7,59],[-14,109],[1,19],[28,23],[36,19],[14,1],[9,9],[13,24],[22,17],[12,-6],[8,-3],[75,-144],[33,-73],[9,-37],[17,-27],[25,-16],[23,-37],[17,-53]],[[50060,60432],[-4,-27],[0,-47],[-5,-75],[-6,-89],[24,-59],[29,-62],[8,-24],[-8,-62],[5,-36],[16,-60],[26,-76],[26,-79],[19,-10],[17,-6],[11,-14],[15,-14],[16,-9],[13,-17],[9,-17],[11,-48],[30,-32],[21,-32],[-8,-16],[-26,6],[-25,14],[-3,-23],[-1,-89],[4,-74],[5,-10],[25,-13],[59,-96],[53,-91],[18,-24],[30,-9],[33,-4],[14,9],[32,46],[17,5],[16,-2],[8,-7],[15,-37],[15,-57],[4,-41],[-1,-23],[-5,-8],[-27,-11],[-11,-9],[-3,-12],[4,-28],[5,-18],[29,-81],[41,-110],[13,-28]],[[50250,58175],[-72,-6],[-26,-16],[-16,0],[0,13],[-2,8],[-90,45],[-64,27]],[[49980,58246],[-64,29],[-3,-27],[-10,-18],[-13,-2],[-10,5],[-6,-22],[-11,-28],[-15,-13],[-15,-18],[-8,-15],[-6,0],[-14,36],[-20,3],[-36,-6],[-17,10],[-22,5],[-53,-8],[-84,15],[-14,-8],[-4,-6],[-83,-2],[-92,-2],[-77,-1],[-68,-2],[0,6],[-22,1],[-2,-12],[-19,-144],[-2,-78],[10,-48],[11,-31],[13,-13],[1,-18],[-10,-22],[1,-23],[12,-24],[3,-25],[-6,-26],[1,-63],[9,-100],[1,-65],[-9,-29],[4,-51],[17,-71],[3,-31]],[[49251,57304],[-6,-14],[-14,-18],[-14,0],[-16,43],[-7,20],[-13,44],[-12,44],[-15,19],[-14,18],[-18,56],[-18,27],[-18,-8],[-27,11],[-54,13],[-58,-4],[-25,-13],[-23,-20],[-61,-45],[-24,-22],[-18,-56],[-20,1],[-21,18],[-13,26],[-27,-6],[-27,25],[-26,48],[-19,16],[-24,36],[-7,67],[-15,47],[-14,65],[-21,30],[-24,15],[-34,-3],[-22,26],[-17,38]],[[48465,57848],[5,33],[8,47],[0,46],[6,73],[-4,92],[-6,64],[19,27],[21,24],[13,44],[14,97],[6,85],[-4,31],[-7,25],[-6,37],[-3,44],[4,39],[16,36],[20,30],[14,14],[38,15],[48,23],[27,25],[20,25],[11,20],[12,42],[18,31],[14,33],[2,89],[0,51],[-10,28],[-6,24],[70,70],[1,50],[-10,55],[-14,44],[-5,39],[20,45],[17,34],[12,28],[28,44],[29,12],[26,-17],[77,-103],[14,-7],[16,8],[20,27],[26,22],[10,69],[-1,102],[6,46],[14,9],[44,-20],[12,-1],[13,7],[9,17],[0,33],[-2,29],[14,95],[27,71],[53,88],[17,18],[19,9],[95,-61],[16,15],[23,151],[26,14],[31,3],[21,13],[10,11],[46,57],[80,78],[43,33],[8,13],[31,55],[41,64],[26,12],[36,5],[23,-10],[6,-18],[8,-10],[47,27],[68,-43],[58,-42]],[[75541,64232],[-17,-3],[-8,17],[4,24],[-5,78],[14,8],[7,-1],[5,-22],[3,-42],[-3,-59]],[[75520,64419],[-10,-47],[-5,34],[4,43],[4,24],[3,0],[6,-25],[-2,-29]],[[75319,64616],[-30,-40],[10,239],[22,-89],[6,-48],[-8,-62]],[[75432,64736],[-13,-17],[-12,14],[-16,56],[8,71],[5,11],[7,-23],[11,-50],[7,-38],[3,-24]],[[75215,64567],[-48,-20],[-25,6],[46,151],[-1,68],[-7,55],[-24,44],[-1,32],[-11,43],[-5,51],[26,16],[21,-29],[3,-16],[4,-42],[11,-43],[36,-88],[0,-55],[-10,-132],[-15,-41]],[[75178,65070],[4,-25],[-15,15],[-12,17],[-7,23],[12,12],[18,-42]],[[75714,64503],[3,-22],[0,-191],[3,-81],[8,-68],[2,-25],[-9,-21],[-8,-4],[-8,33],[-19,24],[-28,27],[-11,18],[-15,-7],[-19,-40],[-8,-38],[3,-52],[6,-52],[14,-29],[1,-33],[5,-42],[7,-39],[4,-42]],[[75645,63819],[-5,0],[-16,53],[-15,58],[-39,110],[-12,197],[-1,97],[-26,114],[-18,158],[-7,41],[9,51],[2,19],[-5,-4],[-14,-26],[-17,63],[-11,56],[-46,117],[-13,52],[-1,50],[-19,-50],[-27,-36],[-27,-54],[-18,-16],[-57,-10],[-33,72],[-47,175],[-7,40],[6,103],[-11,97],[0,52],[-3,34],[-8,-8],[-4,-23],[2,-36],[-3,-31],[-41,6],[-39,14],[34,-51],[36,-12],[19,-46],[3,-36],[-1,-40],[-19,-29],[-17,-18],[3,-38],[21,-47],[-26,-14],[-6,-31],[-1,-43],[13,-39],[5,-29],[-3,-26],[12,-29],[18,-60],[5,-42],[-7,-60],[-10,-23],[-16,-23],[-39,-75],[-19,-86],[-16,-40],[-20,-7],[-7,18],[-17,22],[0,42],[5,33],[33,81],[-18,-11],[-21,-23],[-31,-43],[-11,53],[-6,50],[0,61],[25,91],[-29,-45],[-8,-57],[4,-67],[-4,-47],[-11,-62],[-15,-37],[-25,-24],[-11,-37],[-17,-27],[0,54],[-5,71],[-18,168],[-4,-36],[9,-104],[0,-68],[-14,-54],[-27,-57],[-21,-8],[-12,8],[-19,36],[-20,51],[-4,82],[-8,45]],[[74736,64569],[1,54],[-2,51],[-21,136],[-15,69],[2,23],[-1,9],[-6,90],[-9,55],[-5,59],[22,84],[-9,14],[-25,11],[-23,14],[-6,22],[10,83],[-12,32],[-17,33],[-5,13],[-6,17],[-8,42],[16,87],[21,102],[4,39],[4,67],[1,25],[-2,26],[-23,29],[-40,12],[-28,25],[-17,37],[-14,15],[-17,-11],[-22,14],[-18,37],[-16,45],[2,21],[4,28],[29,116],[11,4],[25,-22],[10,-1],[16,46],[23,131],[33,0],[29,-5],[19,-6],[20,4],[20,10],[11,17],[6,21],[-2,18],[-25,25],[-9,18],[-7,52],[-8,20],[-48,3],[-26,24],[-14,21],[-24,72],[-31,52],[-29,13],[-12,17],[-6,27],[4,39],[9,36],[6,40],[23,52],[27,46],[13,31],[17,33],[2,19],[-3,20],[-14,20],[-10,7],[-1,12],[6,35],[14,4],[28,-31],[28,-50],[17,-45],[0,-35],[11,-6],[11,-2],[19,-15],[19,5],[12,-9],[8,3],[3,20],[-9,30],[-7,22],[8,21],[9,4],[10,-5],[13,-19],[10,-40],[2,-61],[21,-55],[29,-40],[22,-18],[27,-13],[23,13],[12,38],[-5,35],[3,31],[9,17],[15,-1],[11,-25],[31,-132],[-6,-59],[7,-161],[-8,-106],[1,-23],[4,-18],[5,-7],[9,0],[38,-20],[32,-22],[37,-20],[52,-16],[32,5],[17,1],[32,-5],[86,9],[70,2],[29,-15],[23,-6],[79,11],[80,5],[43,-34],[47,-55],[26,-41],[5,-23],[-3,-20],[-9,-11],[-16,-1],[-37,27],[-7,-8],[1,-55],[-1,-8],[-8,-50],[-23,-110],[-4,-49],[-5,-13],[-5,-7],[-18,-2],[-14,-8],[-5,-18],[-9,-37],[-6,-38],[-9,-12],[-20,21],[-13,-3],[-16,-9],[-16,-21],[-11,-27],[-13,-9],[-37,5],[-7,-4],[-5,-19],[-4,-24],[-29,-56],[-11,-91],[-8,-59],[1,-46],[25,-119],[17,-155],[6,-16],[6,-5],[2,3],[0,33],[1,38],[8,10],[10,-8],[10,-34],[11,-62],[12,-24],[18,-7],[21,14],[16,28],[6,31],[-4,59],[-1,45],[9,42],[36,64],[6,19],[-3,54],[0,51],[14,3],[18,-8],[23,25],[7,0],[10,-26],[16,4],[12,-110],[13,-97],[0,-47],[2,-99],[5,-81],[9,-19],[10,-43],[10,-51],[7,-28],[5,-92],[7,-66],[8,-209],[3,-40]],[[57940,77040],[-7,-139],[-27,-65],[-40,22],[-52,-18],[-27,-73],[-16,-22],[-14,-26],[-9,-95],[-2,-156],[-19,-19],[-18,-6],[-75,-137],[43,-39],[19,-29],[32,-82],[44,-93],[9,-45]],[[57781,76018],[-37,10],[-13,-3],[-9,-14],[-17,3],[-22,0],[-22,-17],[-13,-6],[-17,15],[-31,45],[-19,31],[-14,8],[-14,-9],[-50,-11],[-12,-18],[-24,-21],[-23,-9],[-34,-7],[-17,1],[-10,-10],[-9,-29],[-5,-29],[-5,-12],[-42,-14],[-9,-17],[-3,-16],[1,-16]],[[57311,75873],[-34,16],[-26,-11],[-6,-12],[-5,-18],[3,-19],[10,-19],[9,-49],[3,-50],[-6,-29],[-19,-20],[-40,-22],[-38,10],[-17,-8],[-28,-3],[-27,-6],[-40,-21],[-36,-12],[-33,42],[-39,28],[-41,17],[-14,-12],[-6,-10],[-34,37],[-15,13],[-8,14],[-14,49],[-8,2],[-28,-18],[-27,1],[-17,3],[-48,-2],[-7,-34],[-6,-5],[-10,-4],[-26,2],[-33,-25],[-35,-15],[-28,-1],[-28,8],[-17,-5],[-37,-3],[-23,-36],[-37,2],[-30,6]],[[56365,75654],[4,11],[6,144],[15,64],[-1,13],[-3,10],[-13,11],[-10,34],[-20,91],[-11,19],[-32,19],[-28,27],[-23,34],[-43,86]],[[56206,76217],[22,9],[6,17],[22,47],[2,23],[-2,13],[-14,23],[-10,50],[7,46],[1,24],[-7,23],[7,29],[16,16],[10,5],[41,3],[26,59],[16,19],[16,33],[7,12],[7,26],[3,26],[-33,38],[-11,27],[-14,31],[-20,21],[-39,37],[-16,37],[-7,48],[-10,37],[-12,23],[-2,20],[-5,23],[-1,47],[9,62],[6,21],[14,7],[36,33],[1,42],[7,26],[11,15],[10,10]],[[56306,77325],[20,-24],[47,-39],[23,-29],[-1,-18],[-11,-17],[-20,-17],[-12,-23],[-4,-28],[4,-20],[14,-17],[85,23],[86,-12],[115,-39],[77,-13],[57,18],[105,-32],[97,-30],[94,-9],[52,23],[37,32],[32,60],[79,78],[76,45],[99,35],[67,13],[9,-13],[85,-72],[37,0],[31,-13],[11,-19],[8,-5],[40,18],[18,-40],[28,-55],[48,-29],[42,-16],[14,-2],[45,1]],[[64057,66752],[-9,-44],[-9,16],[-21,76],[6,53],[-10,76],[5,22],[26,11],[6,-4],[-8,-24],[15,-43],[2,-70],[-3,-69]],[[29714,64050],[-8,-42],[-30,-81],[-65,-20],[-73,-4],[-5,22],[-2,20],[5,30],[0,12],[-3,12],[26,13],[18,37],[27,7],[34,-27],[19,-1],[27,29],[22,63],[13,-8],[-5,-62]],[[29745,64231],[-37,-28],[-3,33],[18,27],[22,-32]],[[29711,64763],[17,-9],[9,1],[32,-17],[19,-24],[4,-10],[-10,-21],[-29,40],[-26,5],[-36,-1],[-14,8],[10,43],[24,-15]],[[29387,64639],[-20,-18],[5,30],[37,51],[21,44],[11,16],[5,12],[16,17],[8,28],[-2,24],[-17,38],[0,27],[6,20],[29,9],[-8,-29],[12,-82],[-39,-103],[-33,-31],[-31,-53]],[[29428,64932],[6,-10],[-17,-23],[-40,28],[-9,-2],[-8,31],[-3,22],[2,21],[24,-16],[12,-30],[33,-21]],[[29211,65031],[-2,-15],[-35,115],[-44,28],[-26,28],[6,15],[17,7],[3,37],[-7,39],[-24,80],[-13,54],[-6,12],[-1,45],[27,-70],[12,-62],[18,-61],[13,-105],[35,-36],[25,-51],[2,-60]],[[28982,65351],[-12,-4],[-21,16],[-48,70],[-23,6],[8,39],[17,-14],[39,-60],[15,-30],[25,-23]],[[29325,65707],[-22,-63],[-12,6],[7,78],[15,12],[6,0],[6,-33]],[[28428,65811],[1,-13],[-28,-36],[20,-26],[19,56],[15,-46],[8,-86],[-1,-15],[1,-12],[3,-17],[1,-24],[-16,-75],[-54,8],[-2,63],[-8,12],[-13,91],[-17,29],[-24,74],[14,19],[18,-6],[10,9],[25,7],[16,10],[12,-22]],[[29081,65783],[2,-30],[-19,6],[-28,-11],[-9,0],[6,20],[19,27],[1,26],[-24,37],[-27,92],[-13,22],[-6,35],[-23,38],[5,20],[4,4],[16,-9],[35,-134],[2,-12],[59,-131]],[[28514,66252],[-31,-12],[-23,11],[-5,10],[9,16],[21,13],[34,1],[15,-15],[2,-7],[-22,-17]],[[28404,66075],[0,-70],[3,-52],[-3,-19],[-30,-34],[-8,-20],[-28,-20],[-17,-27],[-9,45],[-17,27],[-2,47],[-13,-16],[-19,10],[-30,35],[-19,48],[27,8],[5,-30],[22,37],[-5,19],[-4,3],[-7,36],[32,94],[7,60],[-15,98],[14,6],[36,-34],[16,-34],[0,-46],[16,-35],[21,-86],[27,-50]],[[28708,66524],[46,-65],[39,-24],[42,-82],[18,-29],[4,-26],[-7,-120],[-10,-73],[2,-63],[-10,18],[-10,42],[-17,24],[-5,12],[29,3],[3,66],[14,51],[-2,54],[-34,59],[-24,53],[-36,16],[-34,52],[-20,7],[-24,-10],[9,31],[6,41],[4,8],[17,-45]],[[28196,67240],[34,-18],[18,2],[11,12],[49,-5],[41,17],[6,-30],[-1,-16],[-86,-15],[-78,-45],[-43,-31],[-21,-3],[-15,16],[-52,93],[14,-10],[38,-52],[24,10],[22,34],[4,26],[-4,13],[10,41],[29,-39]],[[28548,66764],[-6,-5],[-24,58],[-19,17],[30,41],[13,35],[0,76],[7,42],[-2,36],[7,37],[-9,42],[-26,33],[-50,131],[-79,32],[-41,1],[22,21],[21,-2],[32,-13],[39,-6],[23,-39],[22,-51],[21,-20],[8,-14],[-1,-15],[3,-13],[27,-24],[26,-39],[8,-113],[-36,-54],[-6,-164],[-10,-30]],[[55279,77689],[10,1],[25,16],[29,9],[21,-10],[10,-9],[2,-13],[-6,-45],[-12,-48],[-19,-51],[-20,-47],[-5,-25],[-1,-40],[-3,-31],[3,-18],[6,-16],[23,-12],[29,-32],[26,-41],[32,-46],[10,-18],[0,-18],[-9,-14],[-28,-5],[-29,4],[-11,4],[-10,-5],[-7,-11],[4,-12],[29,-57],[35,-82],[2,-35],[-4,-27],[-8,-19],[-15,3],[-11,15],[-16,-1],[-13,-4],[-17,-30]],[[55331,76919],[-8,2],[-14,-5],[-10,-6],[-14,9],[-15,6],[-6,-9],[-3,-18],[9,-31],[17,-49],[-2,-37],[-14,-4],[-12,31],[-11,5],[-12,-1],[-28,-37],[-21,-30],[-5,-21],[-8,-23],[-2,-17],[1,-56],[-38,-9],[-8,-8],[-4,-17],[3,-72],[3,-38],[21,-60],[1,-18],[-3,-13],[-15,-23],[-7,-9],[-5,-2]],[[55121,76359],[-25,15],[-12,7],[-50,53],[-22,29],[-35,38],[-22,22],[-11,33],[-17,7],[-20,-10]],[[54907,76553],[-23,24]],[[54884,76577],[16,12],[4,12],[-2,15],[-7,21],[-62,90],[-30,61],[-5,22],[0,59],[-7,14],[-46,27],[-51,76],[-52,75],[-7,21],[-27,56],[-33,52],[-26,33],[-22,37],[-24,52],[-12,79],[-11,70],[-7,27],[-15,10],[-47,83],[-40,48],[0,53],[7,87],[7,98],[10,14],[18,8],[21,-3],[18,-13],[36,-67],[20,-26],[17,-11],[20,29],[25,60],[21,31],[73,-11],[35,46],[58,-61],[23,-9],[14,8],[18,-3],[40,-18],[9,-7],[12,1],[30,23],[10,-3],[34,-46],[18,0],[20,20],[13,17],[40,-13],[22,8],[19,1],[20,-8],[18,-11],[18,-9],[49,-5],[23,-29],[9,-29],[0,-17],[2,-19],[14,-18],[29,-10],[18,2]],[[32546,62140],[-4,-1],[-3,5],[-3,9],[-2,8],[1,5],[2,-2],[18,-5],[-2,-7],[-3,-7],[-4,-5]],[[57818,84183],[38,-50],[9,-2],[21,20],[4,1],[44,2],[20,-18],[15,-34],[14,-27],[15,-7],[42,34],[24,11],[15,0],[55,-31],[25,-17],[6,-15],[1,-18],[-7,-27],[-6,-29],[17,-34],[19,-23],[41,38],[15,11],[17,0],[22,15],[16,21],[15,7],[30,-5],[53,5],[61,-33],[6,-11],[31,-39],[11,-20],[10,-6],[16,-19],[22,-12],[16,4],[7,-7],[7,-15],[0,-26],[-2,-73],[-11,-22],[-11,-17],[-3,-14],[1,-16],[17,-32],[23,-49],[5,-29],[0,-21],[-30,-64],[-11,-14],[-7,-32],[-4,-31],[3,-13],[51,-51],[38,-27],[9,-13],[1,-9],[-21,-54],[-2,-14],[31,-23],[17,-35],[15,-57],[29,-56],[62,-48],[46,-32],[9,-15],[3,-17],[-3,-38],[-12,-46],[-8,-26],[19,-10],[47,3],[58,-9],[69,-51],[1,-23],[-8,-21],[5,-22],[8,-18],[60,-57],[6,-17],[1,-28],[-2,-20],[-17,-4],[-18,-10],[-30,-24],[-12,-34],[-49,-48],[-30,-21],[-24,-1],[-57,10],[-21,23],[-8,22],[-22,9],[-29,1],[-40,-4],[-9,-6],[-6,-26],[-17,-45],[-13,-26],[11,-15],[16,-33],[25,-41],[25,-37],[8,-22],[0,-16],[-12,-19],[2,-38],[25,-50],[-9,-8],[-2,-61],[0,-66],[7,-15],[13,-13],[11,-24],[19,-55],[2,-14]],[[58823,81855],[-53,4],[-63,-2],[-36,-32],[-14,8],[-24,8],[-28,-18],[-37,-54],[-25,-33],[-25,-47],[-8,-25],[-15,-47],[-14,-53],[8,-37],[11,-35],[3,-37],[5,-30],[-15,-21],[-9,-31],[-26,5],[-33,30],[-6,43],[-25,29],[-17,16],[-27,2],[-43,-14],[-56,-10],[-42,-3],[-24,-15],[-34,-15],[-13,17],[-19,49],[-16,48],[-10,21],[-10,6],[-11,-1],[-13,-16],[-10,-15],[-14,-6],[-22,-12],[-15,-18],[-18,-44],[-11,3],[-12,10],[-13,50],[-19,11],[-30,1],[-37,11],[-30,15],[-11,-4],[-18,-21],[-19,-3],[-42,19],[-8,-9],[-11,-28],[-14,-27],[-11,-2],[-7,7],[4,47],[-25,17],[-41,3],[-29,-7],[-14,2],[-8,9],[-35,80],[-19,5],[-34,-4],[-50,9],[-57,18],[-31,7],[-17,18],[-35,6],[-95,34],[-39,6],[-57,0],[-87,8],[-56,-5],[-25,-11],[-30,-7],[-51,-6],[-20,1],[-32,-4],[-37,-9],[-11,-17],[-12,-36],[-43,-64],[-41,-42],[-7,-4],[-25,23],[-20,7],[-23,3],[-17,-7],[-11,-11],[2,-49],[-3,-4]],[[56556,81519],[-18,58],[2,53],[10,30],[12,27],[-5,40],[12,54],[1,39],[-6,17],[-10,19],[-26,21],[-12,17],[-37,23],[-36,27],[-6,18],[2,11],[6,18],[28,52],[29,51],[20,20],[101,65],[16,23],[4,38],[0,28],[-2,50],[-6,70],[-8,49],[-19,92],[-53,189],[-32,196]],[[56523,82914],[21,-12],[48,-4],[39,14],[20,1],[17,-4],[27,8],[24,3],[13,-18],[22,-15],[45,22],[40,28],[40,-3],[6,14],[10,69],[13,15],[49,-7],[18,13],[19,34],[29,21],[24,0],[25,24],[12,-16],[6,-29],[-8,-22],[4,-9],[17,-12],[30,0],[19,10],[4,13],[0,24],[-4,22],[-13,19],[-24,10],[-16,1],[-3,12],[6,26],[14,48],[18,43],[11,17],[2,15],[-2,26],[0,47],[16,67],[22,49],[29,16],[35,9],[23,23],[12,28],[4,23],[5,19],[12,9],[86,-5],[13,42],[7,12],[17,13],[11,15],[-4,12],[-22,7],[-52,7],[-10,14],[3,17],[14,44],[13,56],[7,44],[1,26]],[[57387,83909],[7,7],[42,8],[14,9],[36,60],[28,10],[71,-15],[33,1],[9,-2],[33,-2],[3,6],[15,59],[14,17],[56,78],[38,32],[24,8],[8,-2]],[[25596,61879],[-21,-81],[-2,23],[9,60],[12,21],[8,22],[2,26],[10,-13],[-3,-26],[-15,-32]],[[25569,62168],[-13,-11],[11,34],[1,21],[16,89],[10,-1],[3,-8],[-28,-124]],[[25307,60996],[-12,0],[-49,6],[-33,-7],[-1,3],[2,143],[5,222],[3,162],[3,159],[2,119],[3,162],[3,140]],[[25233,62105],[-1,50],[8,39],[24,17],[29,-34],[13,-15],[11,8],[14,21],[18,62],[43,126],[18,89],[17,18],[25,3],[21,-6]],[[25473,62483],[-15,-65],[15,-9],[14,7],[32,-3],[13,-71],[-4,-61],[-30,-158],[-4,-55],[-14,-81],[19,-54],[-18,-72],[-6,-46],[-1,-69],[9,-132],[-15,-190],[-25,-83],[-16,-32],[-28,-83],[-37,-24],[-51,-133],[-9,-35],[5,-38]],[[32019,70445],[-25,-20],[-7,2],[-5,7],[26,19],[21,46],[7,-3],[-17,-51]],[[33844,40227],[6,96],[-6,82],[-5,22],[-82,99],[-74,90],[-97,117],[-125,-3],[-130,-3],[-123,-53],[-122,-52],[-57,-24],[-116,-49],[-68,-23],[-18,-94],[-26,-142],[-27,-83],[-30,-87],[-43,-122],[0,-149],[0,-141],[-31,-199],[-25,-169],[-25,-164],[-17,-112],[-6,-29]],[[31334,38697],[-46,-20],[-61,-21],[-35,2],[-24,5],[-7,13],[-17,20],[-2,22],[-1,32],[5,57],[-2,79],[-19,92],[1,29],[-2,45],[-10,85],[-25,43],[-6,70],[-3,62],[-21,78],[-3,98],[0,85],[-32,98],[-34,105],[-27,14],[-7,12],[-3,30],[-1,47],[2,28],[21,46],[1,7],[-4,9],[-54,69],[-14,20],[-4,24],[0,22],[13,23],[7,16],[-13,49],[1,44],[-8,19],[1,15],[8,12],[35,14],[11,45],[0,37],[-5,27],[-33,66],[0,12],[34,92],[25,61],[6,13],[-2,13],[-6,16],[-15,23],[-21,26],[-16,31],[-22,46],[-28,40],[-20,39],[-10,33],[0,34],[-3,56],[-13,90],[-4,61],[-6,68],[-5,44],[-4,42],[-9,46],[-5,34],[7,24],[8,18],[-1,12],[-52,49],[-9,13],[-12,98],[-38,88],[-5,66]],[[30691,41759],[0,26],[-3,41],[-12,32],[-17,22],[-5,27],[5,28],[34,55],[18,9],[5,28],[11,22],[32,81],[19,53],[18,32],[22,23],[9,18],[-5,57],[2,39],[7,24],[22,26],[20,20],[4,9],[-2,15],[-18,29],[-37,26],[-24,-3],[-15,23],[-8,19],[-49,238],[-8,55],[1,21],[32,118],[13,38],[23,56],[-4,22],[-40,92],[-12,43],[0,44],[4,53],[23,28],[7,44],[5,42],[10,14],[10,24],[12,35],[18,31],[11,23],[3,64],[9,18],[25,21],[3,16],[-6,44],[-13,46],[-10,22],[-13,113],[-15,56],[6,22],[10,29],[10,56],[3,66],[-3,242],[1,47],[12,34],[19,38],[15,15],[15,24],[-1,46],[10,27],[11,34],[-37,133],[-32,118],[-31,110],[-35,127],[-24,84],[-29,105],[-25,91],[-35,125]],[[30672,45534],[33,2],[65,-4],[63,-23],[42,-9],[18,-19],[4,-31],[12,-14],[13,5],[16,2],[34,32],[28,20],[24,26],[13,24],[30,85],[24,47],[22,17],[44,6],[13,-13],[18,2],[15,48],[24,54],[46,67],[23,18],[15,23],[25,4],[22,24],[106,169],[43,44],[26,8],[22,10],[38,24],[94,24],[61,10],[19,-24],[22,7],[18,38],[16,12],[11,-1],[16,-45],[8,-47],[-5,-37],[1,-52],[7,-69],[-4,-61],[-23,-81],[-11,-32],[-3,-34],[2,-45],[10,-74],[19,-103],[3,-76],[-13,-49],[-6,-43],[1,-36],[5,-25],[8,-14],[5,-29],[1,-43],[11,-41],[21,-40],[8,-38],[-4,-37],[2,-23],[6,-9],[5,8],[8,10],[7,-4],[15,-51],[2,-10],[8,-42],[2,-32],[22,-17],[23,-14],[13,-17],[26,-50],[22,-33],[27,-27],[9,-44],[17,-65],[46,-25],[54,-13],[34,-14],[42,35],[27,-5],[29,-24],[12,-16],[21,-33],[33,-44],[27,-16],[19,24],[18,9],[14,-10],[7,-47],[7,-32],[16,-24],[34,-61],[20,-25],[22,1],[44,-40],[48,-39],[25,-7],[25,6],[16,-15],[6,-47],[42,-95],[19,-37],[24,-32],[59,1],[18,-10],[27,9],[79,16],[15,5],[45,-41],[53,-60],[36,-46],[24,-26],[13,-42],[11,-43],[5,-47],[-7,-46],[-10,-19],[-3,-30],[4,-45],[18,-41],[6,-49],[10,-88],[11,-27],[7,-271],[-36,-2],[-50,-4],[15,-25],[41,-101],[39,-93],[6,-149],[4,-94],[5,-133],[3,-79],[96,-7],[110,-8],[133,-10],[116,-9],[12,1],[20,11],[13,14],[9,-1],[1,-32],[-3,-40],[0,-47],[-33,-91],[-2,-30],[5,-121],[12,-97],[6,-89],[13,-28],[39,-46],[60,-86],[24,-12],[20,12],[12,-35],[3,-57],[33,-159],[20,-100],[10,-36],[16,-18],[-3,-13],[-13,-5],[-6,-19],[-18,-113],[-24,-148],[-16,-105],[14,-1],[1,-29],[3,-44],[-18,-6],[-5,-16],[-21,-85],[-27,-112],[-27,-116],[-17,-69],[28,-51],[47,-84],[-7,-24],[-20,-12],[-17,-8],[-13,-32],[-7,-23],[-19,-8]],[[36531,35848],[-19,-26],[4,137],[10,45],[11,34],[14,21],[10,-29],[-8,-67],[-25,-81],[3,-34]],[[36504,36634],[-5,-7],[-18,72],[35,69],[12,-28],[-9,-55],[-10,-38],[-5,-13]],[[37427,38082],[0,-30],[-11,15],[-31,-12],[-11,23],[42,97],[8,-14],[6,-18],[5,-25],[-5,-16],[-3,-20]],[[37741,38512],[9,-16],[-16,2],[-18,-14],[-28,-13],[-11,24],[24,32],[9,24],[6,-5],[8,-17],[17,-17]],[[39193,44081],[-9,-33],[-11,5],[-5,22],[-8,22],[4,18],[8,10],[20,-2],[1,-42]],[[39237,44298],[-10,-12],[-2,36],[29,47],[4,54],[15,-25],[4,-28],[0,-12],[-40,-60]],[[37639,50149],[-28,-56],[9,65],[-4,45],[3,35],[19,34],[6,5],[-2,-41],[1,-13],[-4,-74]],[[37532,51083],[-18,-27],[-5,-15],[-15,11],[3,16],[4,-2],[5,47],[25,-6],[1,-24]],[[35602,51017],[-30,-11],[38,144],[34,67],[1,133],[36,118],[34,49],[47,14],[26,-72],[-32,-205],[-9,-1],[-43,-108],[-48,-75],[-54,-53]],[[36214,51711],[26,-3],[37,11],[24,27],[28,5],[27,-3],[92,-30],[55,-9],[20,-9],[20,-14],[14,-15],[4,-32],[-14,-51],[-10,-53],[-9,-75],[-7,-16],[-12,4],[7,-67],[-2,-27],[-6,-26],[-15,-54],[-22,-69],[-7,-14],[-17,-24],[-14,-31],[3,-29],[7,-29],[-8,-36],[-27,-53],[-16,-13],[-14,-6],[-14,6],[-23,53],[-3,-42],[-6,-42],[-8,-24],[-31,3],[-17,23],[-28,25],[-5,-69],[-18,-47],[-17,-15],[-27,-10],[-16,-20],[-30,16],[-27,31],[-16,3],[-12,-25],[-63,-5],[-29,-26],[-18,8],[-26,52],[-5,34],[-15,70],[-14,84],[-10,75],[8,66],[17,-3],[20,-9],[4,4],[1,21],[-4,18],[-32,-3],[-21,39],[-3,60],[4,124],[2,26],[15,36],[4,31],[-3,34],[6,61],[13,52],[52,67],[59,24],[172,-65]],[[35929,51767],[-76,-113],[-25,37],[-6,22],[5,21],[-1,9],[8,39],[43,32],[21,5],[27,-10],[5,-27],[-1,-15]],[[36265,51778],[-73,-18],[-34,29],[8,24],[25,38],[30,28],[28,12],[28,-15],[8,-33],[-2,-32],[-18,-33]],[[36183,51997],[12,-30],[-40,-120],[-21,-18],[-24,-3],[-31,36],[-48,-3],[-15,9],[-1,52],[20,56],[40,-3],[69,45],[39,-21]],[[35992,51923],[-5,-85],[-50,36],[4,87],[24,24],[20,46],[7,56],[1,77],[8,14],[6,5],[6,-5],[3,-116],[2,-70],[-26,-69]],[[36068,52069],[-30,-19],[-5,18],[0,72],[8,40],[38,11],[4,12],[11,7],[7,-25],[-1,-41],[-32,-75]],[[36028,52959],[-28,-26],[-16,10],[-15,69],[5,57],[20,19],[16,-4],[6,-8],[14,-93],[-2,-24]],[[34310,52961],[8,-5],[19,-5],[44,-22],[58,-25],[15,8],[10,18],[2,51],[2,36],[-13,32],[-16,37],[-15,45],[-18,13],[2,23],[12,24],[12,14],[6,16],[8,60],[5,11],[5,2],[6,-2],[12,-15],[45,-48],[20,7],[76,13],[11,27],[16,7],[28,27],[11,2],[9,-7],[12,6],[18,25],[8,3],[3,-28],[11,-30],[14,-27],[7,-6],[24,9],[12,-8],[5,-25],[2,-22],[10,-19],[12,0]],[[34828,53183],[7,-8],[12,-11],[10,-28],[22,-22],[39,-30],[18,-1],[17,-9],[11,-10],[11,17],[40,48],[19,26],[13,20],[10,19],[7,5],[5,-11],[4,-16],[15,-9],[33,-17],[15,-6],[21,16],[19,25],[9,9],[13,-25],[9,-37],[7,-15],[13,3],[28,-5],[20,-12],[12,1],[17,17],[9,31],[25,29],[23,27],[13,36],[19,59],[7,26],[1,43],[28,124],[10,23],[6,40],[11,45],[0,39],[8,36],[16,32],[11,20],[19,54],[13,50],[32,112],[3,32],[13,19],[4,24],[14,30],[14,24],[6,34],[11,37],[23,27],[9,12]],[[35652,54182],[26,99],[3,45],[24,2],[37,-52],[30,-75],[40,-243],[6,-225],[17,-118],[46,-245],[3,-45],[7,-55],[15,-58],[16,-96],[1,-18],[-11,-26],[16,-2],[14,-15],[9,-61],[11,-41],[21,-56],[43,-19],[33,-7],[37,-31],[27,-41],[21,-138],[-7,-87],[2,-61],[-11,-24],[-30,-40],[-7,-22],[-62,-103],[-14,-49],[-33,-65],[-33,-125],[-48,-114],[-17,-29],[-26,-7],[-16,-17],[-37,-93],[-51,-31],[-4,-54],[-29,-124],[-26,-67],[-16,-23],[-41,-122],[-5,-54],[0,-94],[-28,-57],[-28,-37],[-4,-80],[-12,-27],[-11,-18],[-58,21],[-91,-88],[-30,-21],[98,-5],[32,-46],[69,31],[83,110],[32,24],[65,75],[27,50],[48,60],[10,26],[27,29],[15,-36],[1,-23],[-22,-44],[6,-28],[14,-36],[5,-49],[2,-37],[9,-66],[30,-88],[1,-30],[-4,-38],[14,-32],[15,-19],[51,-95],[39,53],[25,15],[15,23],[33,14],[27,-22],[51,-32],[37,34],[75,78],[-23,-138],[-17,-127],[-13,-51],[-13,-138],[-13,-37],[-10,-42],[17,15],[14,20],[18,53],[14,92],[55,247],[16,22],[45,28],[78,197],[31,-1],[19,-45],[19,-27],[4,54],[27,22],[-28,27],[-5,24],[-2,40],[19,55],[-12,48],[40,61],[-3,45],[14,38],[18,39],[21,19],[3,33],[13,14],[10,4],[20,-37],[22,44],[21,17],[9,-7],[12,-20],[12,-8],[10,4],[26,28],[24,-46],[15,-10],[-4,26],[-8,23],[6,20],[11,12],[36,-11],[19,-20],[21,-38],[28,-3],[23,4],[14,-21],[23,0],[11,-32],[35,-46],[7,-31],[28,-16],[27,-19],[28,-5],[28,5],[1,-40],[21,-11],[26,9],[21,-48],[53,-37],[38,-56],[24,10],[27,-15],[30,-121],[6,-87],[13,12],[12,39],[16,71],[29,23],[14,-27],[30,-44],[25,-47],[11,-31],[19,-5],[-16,-38],[16,4],[19,27],[17,-55],[13,-61],[2,-61],[-12,-35],[-10,-22],[-12,-44],[-13,-7],[-14,-14],[16,-32],[10,-30],[24,82],[16,23],[23,13],[13,-59],[2,-55],[-38,-23],[0,-44],[-12,-24],[-7,-29],[-6,-59],[-8,-50],[-23,-218],[0,-36],[27,38],[52,112],[16,118],[20,117],[22,37],[14,0],[20,-13],[1,-38],[-3,-22],[-22,-58],[-9,-32],[9,-32],[50,97],[22,33],[19,-6],[38,44],[76,9],[5,51],[16,22],[41,-6],[82,-45],[29,-38],[43,-34],[23,-41],[96,-76],[69,-8],[34,34],[43,-35],[23,-41],[44,-21],[45,-12],[35,29],[88,10],[112,42],[66,-10],[75,-28],[54,-71],[45,-41],[27,-40],[44,-41],[94,-111],[33,-65],[58,-87],[59,-37],[32,-91],[25,-42],[61,-154],[71,-108],[47,-109],[90,-69],[35,-115],[61,-14],[26,-17],[32,-49],[44,-27],[56,8],[63,-6],[50,23],[120,-43],[19,-21],[24,-49],[44,-182],[26,-202],[13,-154],[30,-120],[16,-226],[14,-71],[1,-54],[12,-13],[7,-152],[-3,-61],[-11,-80],[-1,-35],[2,-23],[-5,-33],[-2,-32],[12,-72],[0,-57],[-15,-70],[-21,-181],[-53,-302],[-51,-173],[-71,-178],[-47,-93],[-18,-10],[-17,19],[12,-50],[-11,-43],[-47,-131],[-46,-86],[-49,-150],[-4,-3],[-62,-58],[-37,-47],[-47,-85],[-43,-135],[-9,-18],[-16,10],[0,-69],[-37,-108],[-11,-16],[0,30],[7,24],[3,25],[-1,29],[-10,-21],[-22,-82],[7,-59],[-16,-90],[-60,-257],[-75,-217],[-17,-66],[-62,-146],[-45,-70],[-12,-1],[-15,6],[-7,112],[-36,68],[-10,12],[-15,-72],[-12,-20],[-18,-4],[19,-31],[6,-36],[-19,-73],[-1,-66],[-34,-72],[-20,-53],[-10,-67],[-7,-62],[16,17],[7,-13],[5,-19],[-3,-29],[-11,-54],[2,-134],[-4,-30],[11,-33],[12,56],[6,-16],[-32,-359],[13,-162],[4,-183],[15,-179],[16,-160],[1,-13],[-22,-185],[-28,-184],[-17,-149],[-11,-161],[-11,-78],[-4,-79],[13,-188],[4,-35],[-34,-84],[-37,-41],[-21,-40],[-45,-151],[-25,-224],[-1,-118],[12,-249],[-9,-102],[-14,-67],[-17,-45],[-44,-53],[-39,-131],[-17,-137],[-27,-50],[-5,-76],[-21,-83],[-56,-124],[-36,-36],[-18,-34],[-11,-72],[-35,-119],[-25,-154],[6,-53],[1,-8],[9,-178],[-3,-46],[-34,-49],[-128,-92],[-34,-38],[-77,-156],[-4,-37],[3,-52],[12,-30],[-13,-33],[-15,-59],[-22,4],[-127,0],[-69,-19],[-36,4],[-16,14],[-18,23],[-6,30],[10,46],[-6,27],[-19,-1],[-20,-13],[-4,-27],[1,-20],[8,-28],[4,-35],[-8,-30],[-40,-4],[-46,-28],[-56,-12],[-45,-20],[-21,26],[21,12],[29,-6],[32,21],[-7,25],[-45,32],[-51,-19],[-28,-39],[-61,4],[-75,-29],[-12,-30],[2,-57],[15,-13],[14,-26],[-14,-24],[-13,-11],[-79,-27],[-73,-112],[-31,-14],[-27,-49],[-3,-42],[-8,-26],[-18,-1],[-38,23],[-50,1],[-35,-18],[-183,-182],[-66,-72],[-75,-148],[-126,-166],[-67,-99],[-12,-26],[-11,-1],[-21,-21],[9,-17],[14,-2],[-6,-57],[-26,-40],[-50,-103],[-11,7],[16,54],[-25,2],[-36,20],[-15,-22],[9,-54],[-14,-22],[-24,-3],[-23,6],[-24,39],[11,-70],[51,-18],[22,-16],[8,-27],[-40,-126],[-34,-17],[-3,-17],[18,0],[10,-35],[-12,-141],[-16,-26],[-10,-1],[-10,-24],[14,-46],[13,-33],[-2,-65],[-5,-54],[0,-52],[17,-101],[6,-104],[7,-37],[4,-42],[-11,-39],[6,-63],[-19,-107],[10,-154],[-4,-144],[-8,-76],[-12,-59],[-29,-76],[-1,-77],[-62,-71],[-69,-99],[-63,-118],[-69,-166],[-80,-252],[-73,-360],[-89,-272],[-36,-98],[-48,-109],[-64,-128],[-86,-128],[-94,-114],[-34,-52],[-33,-72],[-8,30],[7,49],[-4,37],[-1,48],[19,9],[28,-30],[14,20],[11,21],[34,12],[65,125],[48,47],[28,79],[4,42],[-1,85],[16,22],[35,-8],[7,24],[-3,27],[6,59],[48,52],[22,63],[-7,160],[8,7],[20,-25],[9,11],[10,70],[-5,36],[-23,10],[-79,-79],[-26,3],[-4,62],[-39,29],[-15,52],[-4,35],[-14,14],[1,-61],[4,-59],[34,-69],[-8,-28],[-17,-32],[-11,-71],[1,-92],[-9,28],[-12,16],[-5,-99],[-23,-38],[-7,-38],[6,-43],[-12,-30],[-58,-80],[-58,-55],[-13,-26],[-6,-61],[-9,-63],[-26,-55],[-21,-110],[1,-47],[7,-69],[11,-46],[-18,-31],[-23,-59],[-19,-67],[-46,-251],[-40,-151],[-31,-74],[-44,-78],[-125,-196]],[[35174,32406],[-7,3],[-18,16],[-16,18],[-3,13],[-2,19],[2,70],[0,190],[5,36],[8,23],[25,33],[23,48],[27,61],[25,49],[-9,33],[-21,31],[-36,26],[-36,45],[-31,57],[-14,60],[-13,65],[-13,51],[-4,24],[-12,9],[-20,27],[-12,24],[-18,14],[-32,15],[-34,27],[-41,63],[-30,71],[-15,46],[-16,33],[-85,54],[-39,65],[-15,-20],[-23,19],[-23,32],[-7,23],[-9,25],[-9,28],[-6,27],[-23,47],[-30,51],[-13,14],[-6,-4],[-7,-19],[-4,-19],[-11,-13],[-14,-23],[-15,-29],[-18,-19],[-22,-6],[-14,1],[-3,11],[-1,39],[5,89],[-12,35],[-17,36],[-20,50],[-64,104],[-87,150],[-31,46],[-29,3],[-27,-5],[-24,-20],[-19,-69],[-7,-11],[-47,2],[-47,11],[-16,42]],[[34829,37110],[1,82],[38,123],[10,57],[-4,32],[11,114],[28,196],[9,127],[-10,61],[-1,42],[15,36],[6,11],[-35,43],[-20,40],[-24,29],[-27,23],[-13,-10],[-14,-13],[-26,-21],[-31,-36],[-15,-14],[-28,-13],[-31,-11],[-26,7],[-22,8],[-14,23],[-7,49],[0,42],[-5,61],[-16,34],[-6,27],[-1,33],[2,36],[5,26],[-3,33],[-7,23],[2,40],[-4,55],[-11,34],[-6,40],[0,40],[-8,40],[-1,44],[8,40],[2,40],[-8,29],[-16,17],[-12,45],[-1,60],[-13,32],[-14,27],[-16,0],[-24,15],[-21,-2],[-34,2],[-15,9],[-9,21],[-21,29],[-12,49],[-14,10],[-21,-15],[-8,-19],[-8,-27],[-15,-30],[-19,1],[-20,-17],[-20,-2],[-25,-3],[-26,15],[-31,17],[-27,11],[-26,-11],[-17,10],[-23,5],[-26,4],[-20,31],[-22,17],[-12,-6],[-16,-19],[-16,4],[-21,15],[-8,36],[1,23],[5,23],[8,32],[-4,35],[1,30],[4,27],[4,30],[-3,29],[-1,30],[-2,29],[-2,30],[11,44],[9,36],[-6,31],[2,21],[7,34],[10,42],[-1,78],[-9,46],[-9,12],[-2,14],[5,18],[-5,19],[-2,19],[5,16],[-7,33],[-13,10],[-5,9],[-4,36],[-4,42],[2,33],[-7,28],[-9,17],[-9,31],[-9,23],[-4,32],[-6,42]],[[30672,45534],[-26,-1],[-46,12],[-34,2],[-29,-31],[-43,-37],[-19,-10],[-15,-1],[-14,4],[-16,20],[-23,45],[-17,-17],[-13,-20],[0,98],[0,147],[1,129],[0,104],[0,121],[0,85],[12,32],[8,36],[-9,49],[2,44],[6,31],[8,30],[-19,-15],[-8,-8],[-10,-23],[-23,-31],[-16,-31],[-19,-25],[-24,-56],[-20,-30],[-21,-20],[-34,-65],[-28,-13],[-74,-10],[-78,0],[-71,0],[-11,1],[1,54],[2,38],[-25,40],[-1,50],[-7,34],[-8,42],[-17,26],[-23,11],[-39,23],[-58,24],[-56,2],[-54,-3],[33,84],[33,84],[-1,73],[-27,64],[-14,39],[-22,55],[-28,38],[-15,50],[1,30],[-2,20],[-11,12],[-10,18],[-15,20],[-17,27],[0,27],[-6,28],[-11,34],[0,27],[-9,41],[-11,30],[-10,21],[-16,28],[1,23],[12,12],[4,27],[-1,27],[-13,16],[-15,9],[-21,48],[-14,25],[-10,15],[-5,17],[5,12],[7,17],[1,26],[-3,25],[0,22],[10,7],[10,-4],[11,14],[13,5],[16,3],[8,15],[-1,27],[-10,52],[-9,22],[-4,31],[8,62],[5,39],[18,41],[54,89],[49,60],[23,6],[18,23],[11,34],[3,37],[-3,33],[-9,48],[-10,60],[-9,34],[8,40],[13,55],[26,83],[25,89],[2,26],[3,54],[12,111],[6,60],[-3,24],[5,20],[16,16],[37,16],[25,33],[38,62],[33,67],[26,21],[49,61],[28,39],[10,13],[28,28],[49,10],[41,10],[23,18],[33,8],[23,21],[25,0],[48,22],[16,31],[14,38],[18,33],[22,8],[24,-6],[29,1],[35,10],[17,-25],[7,-31],[22,-31],[15,2],[15,6],[21,-26],[14,3],[9,15],[2,38]],[[30565,49403],[5,20],[10,117],[17,194],[15,176],[18,195],[17,201],[18,204],[15,167],[12,143],[8,88],[12,116],[5,101],[5,29],[-3,25],[-11,35],[0,15],[2,21],[-2,17],[-11,19],[-8,12],[-7,16],[-3,23],[-6,23],[-2,24],[-8,19],[-2,24],[5,23],[3,24],[-3,23],[-3,27],[-6,25],[-9,16],[-23,17],[-22,41],[-26,37],[-34,70],[-7,33],[0,90],[1,99],[2,148],[1,76],[19,4],[17,2],[18,5],[15,6],[14,10],[10,14],[13,9],[10,-3],[9,12],[11,11],[11,9],[15,8],[14,-18],[8,-18],[9,-9],[9,2],[6,-2],[6,-14],[8,-1],[12,2],[11,4],[5,4],[0,9],[-2,16],[-4,15],[3,24],[0,28],[1,35],[-9,20],[-8,37],[-10,31],[-15,20],[-13,8],[-12,-13],[-11,-2],[-8,11],[-13,1],[-14,4],[-14,4],[-27,-8],[-10,10],[-13,1],[-15,-11],[1,144],[0,135],[0,95],[14,-2],[17,17],[24,3],[20,18],[10,1],[20,-9],[21,-18],[21,-3],[55,0],[58,0],[65,0],[66,0],[56,0],[18,-1],[-10,32],[-12,41],[4,32],[6,32],[7,17],[18,-18],[14,-55],[13,-41],[12,-21],[15,-2],[16,7],[17,17],[29,76],[28,65],[15,22],[16,20],[11,7],[16,-2],[14,-18],[9,-31],[31,-108],[24,-81],[9,-51],[0,-124],[-1,-109],[3,-15],[4,-4],[53,26]],[[31423,52547],[71,-133],[53,-98],[23,-31],[13,-9],[30,6],[37,13],[17,14],[20,31],[32,43],[26,23],[10,3],[10,-7],[22,-26],[12,-48],[-11,-55],[2,-34],[23,2],[18,57],[13,45],[27,36],[26,52],[18,50],[22,29],[32,35],[26,22],[24,-2],[18,23],[23,44],[16,35],[11,12],[22,-3],[28,5],[28,43],[25,51],[13,87],[9,78],[8,15],[9,13],[10,8],[26,5],[45,41],[31,42],[30,9],[9,11],[10,39],[6,68],[-4,41],[-55,13],[-35,0],[-59,10],[-28,17],[-6,12],[-1,13],[6,30],[5,55],[-8,74],[-29,118],[-21,115],[-3,80],[1,85],[1,55],[-15,43],[-81,137],[-28,65],[-9,44],[-32,83],[8,25],[18,-1],[16,-22],[14,-45],[11,-11],[14,0],[75,1],[17,-8],[11,-16],[9,-19],[14,-53],[14,-26],[30,1],[46,1],[26,5],[16,-15],[19,-12],[41,28],[12,0],[12,-12],[44,-96],[25,-40],[21,-53],[31,0],[26,45],[7,154],[8,45],[13,13],[15,1],[18,24],[20,32],[17,10],[72,-34],[20,17],[72,40],[74,53],[21,65],[31,18],[24,49],[20,-6],[30,-2],[18,9],[9,9],[11,23],[16,64],[21,25],[25,26],[17,30],[15,38],[6,33],[0,26],[-8,50],[-11,47],[-11,16],[-8,6]],[[33127,54839],[25,11],[21,-16],[32,-3],[14,13],[21,-6],[26,33],[17,-11],[11,0],[10,-25],[7,-29],[25,-35],[-3,-54],[-4,-47],[-3,-55],[-2,-42],[-10,-42],[-16,-40],[-4,-16],[-2,-21],[10,-13],[18,-4],[23,-1],[16,-13],[20,-2],[25,-34],[11,-21],[1,-16],[-7,-38],[-3,-35],[6,-22],[7,-16],[19,-79],[10,-27],[8,-9],[2,-16],[-7,-28],[-8,-37],[-18,-39],[-3,-30],[-14,-19],[-35,-46],[6,-72],[2,-37],[-1,-28],[-12,-38],[-20,-113],[-7,-56],[-7,-129],[1,-44],[9,-58],[20,-130],[11,-21],[26,-30],[3,-88],[-2,-92],[-1,-36],[4,-15],[12,-7],[8,-11],[1,-27],[0,-28],[19,-17],[17,-10],[16,-39],[28,-61],[11,-11],[6,-25],[24,-51],[36,-18],[37,-23],[14,-32],[15,-26],[11,-1],[10,4],[16,22],[12,20],[22,-2],[26,4],[5,16],[2,20],[-5,52],[9,16],[22,9],[4,28],[5,15],[6,18],[7,3],[9,-11],[15,-6],[15,-9],[9,-18],[14,-1],[16,3],[6,12],[5,19],[3,43],[10,1],[21,10],[21,19],[29,3],[27,-1],[14,13],[12,27],[25,78],[12,18],[14,14],[12,-3],[24,13],[19,19],[8,-5],[15,-40],[8,-9],[11,-2],[37,-21],[19,7],[21,12],[21,5],[15,-9],[10,12],[12,8]],[[33474,59378],[-8,-11],[-25,23],[-9,28],[-1,88],[15,8],[29,-70],[17,-25],[-18,-41]],[[81951,54665],[32,0]],[[81983,54665],[7,-19],[17,-67],[11,-67],[3,-102],[13,-44],[-2,-9],[-8,-7],[-12,-3],[-21,10],[-18,15],[-15,110],[-7,63],[1,75],[-1,45]],[[81951,54665],[-23,-25],[-22,-31],[-22,-27],[-11,-22],[4,-29],[5,-66],[3,-51],[8,-20],[6,-21],[-2,-22],[-14,-43],[8,-8],[-10,-56],[-14,-42],[-19,-34],[-13,-7],[-10,14],[-17,37],[-18,52],[-8,30],[-26,4],[-10,24],[0,29],[-8,34],[-10,37],[-15,28],[-21,22],[-8,16]],[[81684,54488],[31,-1],[34,10],[35,30],[33,37],[28,43],[27,47],[27,38],[43,44],[15,-4],[0,-31],[-6,-36]],[[75453,67833],[-2,-13],[-8,-34],[-5,-38],[4,-31],[18,-37],[23,-29],[30,-3],[28,12],[11,-5],[15,-49],[11,-43],[-15,-44],[-7,-39],[-3,-27],[1,-12],[9,-22],[11,-38],[1,-34],[-6,-23],[-15,-12],[-15,3],[-12,0],[-16,-4],[-25,-13],[-22,-16],[-43,3],[-17,34],[-8,0],[-39,-44],[-43,7],[-77,-14],[-32,-4],[-33,5],[-17,9],[-31,32],[-29,22],[-28,-20],[-11,-4],[-23,-54],[-50,-17],[-49,-13],[-15,7],[-28,3],[-1,12],[1,13],[-7,9],[-11,10],[-20,4],[-25,14],[-14,12],[-51,-18],[-30,28],[-34,39],[-17,16],[-6,60],[-6,20],[-14,20],[-7,24],[6,24],[34,46],[2,11]],[[74691,67578],[16,85],[22,31],[21,43],[16,68],[31,71],[34,72],[24,58],[16,28],[32,29],[27,17],[18,39],[23,22],[23,10],[34,-5],[33,-14],[35,-20],[4,-16],[-3,-28],[-5,-28],[0,-14],[5,-8],[35,-6],[42,5],[24,-4],[53,-26],[16,-18],[16,-15],[16,3],[20,30],[21,26],[13,4],[9,-9],[17,-24],[35,-23],[31,-17],[10,-17],[-3,-70],[1,-24]],[[57016,41593],[-6,-29],[-4,-41],[5,-31],[11,-42],[16,-36],[13,-22],[14,-53],[15,-67],[19,-53],[56,-119],[7,-43],[7,-42],[36,-82],[5,-27],[-2,-55],[36,-166],[24,-97],[21,-18],[64,-103],[57,-83],[66,-56],[49,-37],[24,-27],[12,-26],[10,-50],[5,-86],[1,-56],[53,2],[43,-5],[15,-11],[6,-16],[-2,-37],[1,-54],[2,-45],[-4,-47],[-4,-55],[-2,-69],[7,-27],[42,-87],[17,-56],[19,-85],[11,-27],[9,-11],[38,-10],[97,-35],[60,-33],[48,-33],[19,-9],[10,-9],[3,-8],[-6,-75],[2,-23],[6,-22],[8,-17],[10,-10],[36,-8],[22,-45],[13,-21]],[[58156,39058],[-65,-11],[-32,-38],[-19,-67],[-30,-49],[-40,-32],[-42,-21],[-45,-12],[-47,-58],[-51,-103],[-26,-66],[-1,-27],[-11,-23],[-22,-19],[-12,-24],[-3,-28],[-11,-13],[-21,1],[-14,-20],[-8,-41],[-18,-25],[-28,-9],[-24,-24],[-20,-37],[-15,-20],[-11,0],[-17,-31],[-27,-73],[-5,-34],[-37,-275],[-21,-32],[-40,-57],[-32,-68],[-14,-40],[-15,-18],[-74,-33],[-28,-18],[-33,-26],[-8,-23],[-8,-85],[-23,-122],[-19,-89],[-12,-79],[-21,-97],[-18,-32],[-21,-30],[-27,-15],[-37,-9],[-33,3],[-26,-2],[-36,-34],[-34,-2],[-53,20],[-44,19],[-19,4],[-38,63],[-25,-1],[-37,5],[-21,15],[-20,32],[-42,64],[-42,51],[-37,31],[-34,14],[-32,-13],[-26,-13],[-10,-7],[-19,-27],[-20,-50],[-17,-79],[-6,-48],[-19,-103],[-25,-123],[-11,-36],[-14,-26],[-22,-23],[-70,-98],[-35,-111],[-22,-32],[-27,-15],[-23,-9],[-12,-18],[-14,-56],[-12,-20],[-14,-7],[-40,6],[-13,6],[-107,-11],[-32,18],[-23,7],[-36,-23],[-16,15],[-12,46],[-6,93],[2,79],[20,60],[16,44],[16,57],[3,25],[-4,23],[-3,47],[-2,48],[-23,105],[-28,140],[-38,155],[-11,43],[-24,68],[-88,128],[-13,17]],[[55550,37570],[0,15],[-1,124],[0,165],[0,165],[0,166],[0,165],[0,165],[0,165],[0,165],[0,165],[0,140],[63,0],[78,0],[94,0],[41,0],[2,22],[0,102],[0,235],[0,235],[0,235],[-1,235],[0,235],[0,235],[0,235],[0,235],[0,116],[71,7],[83,24],[134,39],[124,47],[82,28],[96,33],[33,6],[9,-4],[13,-12],[45,-117],[28,-90],[6,-38],[5,-4],[13,6],[15,15],[45,89],[10,23],[29,43],[35,44],[32,31],[32,27],[15,-7],[17,-22],[15,-14],[73,108],[33,25],[85,19],[12,-3]],[[56349,58133],[20,-72],[9,-25],[81,-169],[16,-41],[40,-123],[25,-83],[28,-119],[3,-65],[-4,-55],[-6,-158],[-7,-45],[-36,-85],[-1,-38],[7,-32],[11,-13],[7,-16],[-4,-73],[12,-29],[27,-19],[67,-13],[35,-11],[28,-15]],[[56707,56834],[13,-7],[7,-26],[-11,-84],[8,-53],[23,-45],[23,-19],[23,-11],[78,-28],[32,-31],[43,-99],[54,-91],[13,-48],[-3,-43],[-16,-53],[3,-22],[24,-53],[29,-54],[51,-60],[90,-95],[41,-63],[14,-48],[23,-52],[32,-48],[21,-36],[-15,-104],[5,-34],[8,-29],[18,-41],[8,-53],[18,-65],[23,-30],[36,-11],[20,-31],[40,-52],[40,-45],[16,-31],[11,-27],[9,-33],[4,-32],[1,-70],[7,-87],[21,-60],[19,-44]],[[57611,54786],[-80,51],[-12,1],[-14,-9],[-42,-63],[-13,-7],[-15,5],[-38,8],[-127,49],[-98,48],[-30,17],[-52,17],[-35,-33],[-32,-111],[-10,-22],[-51,-33],[-24,9],[-59,-30],[-91,46],[-33,-10],[-26,-23],[-65,-50],[-40,-29],[-46,-26],[-44,-40],[-30,-22],[-29,0],[-26,23],[-28,19],[-35,4],[-35,-11],[-31,-45],[-12,-31],[-26,-85],[-31,-137],[-12,-27],[-4,-3],[-7,-11],[-143,68],[-61,16],[-42,-21],[-52,38],[-23,7],[-10,-12],[-29,17],[-48,47],[-45,19],[-40,-6],[-25,15],[-20,46],[-26,83],[-46,83],[-62,66],[-39,50],[-16,33],[-33,19],[-52,3],[-49,-32],[-71,-104],[-66,-212],[-36,-81],[-30,-21],[-7,-51],[15,-81],[3,-94],[-10,-158],[4,-116]],[[55169,53846],[-16,19],[-15,54],[-7,11],[-43,-25],[-23,-22],[-12,-21],[-9,-3],[-14,29],[-10,5],[-18,-5],[-17,1],[-11,3],[-8,-2],[-20,17],[-75,45],[-13,15],[-15,-2],[-38,-39],[-21,-11],[-62,-24],[-66,-11],[-25,-1],[-17,-17],[-12,-25],[-7,-53],[-13,-93],[-6,-25],[1,-37],[-4,-62],[-1,-56],[2,-37],[-19,-75],[-22,-92],[-19,-78],[-19,-79]],[[54495,53150],[-13,54],[-8,63],[-4,73],[2,19],[-5,22],[0,4],[-7,55],[7,38],[-5,40],[-16,39],[-14,30],[-8,27],[-7,12],[-15,4],[-21,14],[-27,59],[-27,57],[-34,74],[-27,63],[-33,78],[-31,72],[-19,69],[-7,40],[9,4],[13,1],[6,7],[0,19],[-14,54],[-6,70],[-12,42],[-35,66],[-35,49],[-11,26],[-6,36],[-13,231],[-6,65],[-10,29],[-8,13],[-3,16],[1,41],[5,37],[-1,14],[10,32],[0,213],[-5,11],[-6,18],[-10,-1],[-11,2],[-11,31],[-9,39],[3,28],[9,23],[11,20],[13,17],[39,34],[11,17],[7,21],[4,29],[23,109],[33,109],[15,23],[14,72],[20,88],[8,42],[6,41],[10,33],[37,54],[28,96]],[[54299,56177],[31,-5],[31,-16],[40,-7],[31,18],[20,37],[45,30],[52,35],[7,51],[16,27],[17,23],[6,3],[2,-17],[10,-53],[23,-53],[32,-58],[9,4],[20,44],[51,27],[12,12],[36,64],[43,41],[10,4],[16,11],[43,42],[31,-5],[50,7],[83,20],[60,6],[30,8],[8,9],[11,62],[10,17],[22,26],[44,93],[29,79],[8,26],[1,2],[6,5],[12,33],[-12,34],[-49,69],[0,10],[-3,12],[3,9],[19,29],[26,32],[27,12],[70,-2],[61,7],[14,-2],[47,16],[32,15],[33,34],[75,-4],[62,85],[18,16],[8,13],[3,13],[29,34],[33,70],[25,62],[7,45],[71,150],[25,-3],[12,19],[28,100],[8,19],[14,6],[16,11],[13,30],[12,44],[0,55],[-5,44],[0,21],[7,20],[11,19],[54,54],[13,26],[9,24],[15,4],[16,-2],[10,14],[12,25],[37,33],[35,26],[36,-11],[29,-13],[25,-16],[11,-4]],[[33392,77153],[-37,-20],[-32,1],[-22,19],[-1,8],[51,-8],[19,5],[39,32],[-17,-37]],[[31590,77357],[-14,-21],[4,20],[17,51],[11,7],[-18,-57]],[[31455,77581],[-38,-31],[15,78],[12,24],[15,-8],[-2,-47],[-2,-16]],[[33066,78046],[-12,-4],[-2,8],[-18,24],[-1,12],[15,11],[32,-6],[-12,-30],[-2,-15]],[[29529,78102],[-34,-12],[-11,5],[37,56],[42,13],[-34,-62]],[[29565,78034],[-22,-11],[-36,11],[-41,-15],[-11,0],[30,42],[46,27],[46,80],[13,2],[-18,-91],[-3,-33],[-4,-12]],[[30270,78843],[-25,-5],[6,20],[35,36],[25,20],[15,0],[-24,-44],[-32,-27]],[[33026,78308],[9,-4],[38,28],[20,-1],[-1,-20],[-32,-22],[-15,-17],[18,-15],[0,-10],[-22,-25],[-11,-27],[9,-26],[36,26],[14,0],[20,-6],[19,8],[11,13],[63,99],[3,13],[-68,-20],[-8,13],[45,61],[-4,31],[23,51],[20,30],[15,16],[22,16],[15,-24],[5,-43],[37,6],[37,-9],[26,-18],[5,-10],[0,-17],[-9,-29],[-15,-25],[30,-31],[-4,-13],[-48,-36],[-28,-35],[-25,-44],[-50,-51],[-80,-36],[-25,0],[-30,11],[-30,-3],[-29,-13],[-29,1],[-13,-7],[-14,1],[-11,14],[-23,41],[-12,27],[-12,130],[4,68],[20,63],[29,43],[17,34],[72,200],[14,45],[17,39],[31,39],[40,64],[12,14],[23,6],[23,-4],[-7,-23],[2,-23],[26,-89],[0,-18],[-15,-71],[-27,-116],[-7,-63],[4,-19],[-11,-32],[-12,-25],[-47,-45],[-24,-11],[-22,-17],[-54,-58]],[[32274,78610],[8,-8],[13,15],[15,47],[41,-12],[22,-21],[12,4],[12,-2],[23,-28],[44,-22],[46,4],[70,13],[8,5],[72,11],[72,5],[25,-12],[9,-12],[5,-14],[-41,-38],[-41,-44],[-58,-44],[-7,-21],[4,-39],[-1,-40],[11,-4],[7,-13],[-15,-13],[-59,-6],[-17,4],[-21,16],[-7,39],[-25,-6],[-7,5],[35,32],[-16,42],[-18,-3],[-11,19],[1,27],[16,13],[5,14],[-22,-13],[-17,-24],[-21,-9],[-22,-22],[33,-6],[-17,-17],[-17,-3],[-81,32],[-20,12],[-26,34],[-19,45],[11,2],[3,8],[-2,7],[-28,6],[-45,-2],[-25,12],[1,79],[-8,22],[-28,18],[-42,5],[-4,30],[13,44],[21,39],[16,37],[18,31],[46,62],[-1,-46],[4,-40],[-30,-79],[52,-79],[6,-17],[5,-21],[-4,-19],[-8,-18],[20,-8],[6,-15]],[[32801,79080],[10,-11],[18,1],[12,-4],[-17,-21],[-33,-3],[-16,9],[23,110],[27,26],[56,71],[22,22],[21,9],[21,-5],[-22,-43],[-30,-2],[-28,-35],[-18,-40],[-23,-22],[-15,-27],[-8,-35]],[[34937,79171],[-14,-21],[-14,1],[2,18],[17,34],[8,24],[1,15],[3,11],[13,13],[11,23],[-5,-43],[-22,-75]],[[32081,79427],[-7,-42],[-25,-36],[-12,-2],[-5,3],[6,23],[0,40],[20,6],[7,-4],[16,12]],[[32090,79469],[-32,-30],[14,45],[6,11],[5,5],[5,-4],[2,-27]],[[15712,79927],[-11,-15],[-7,2],[-5,10],[-18,102],[8,-3],[24,-31],[-5,-12],[18,-31],[4,-21],[-8,-1]],[[15730,80003],[-4,-7],[-43,41],[-29,54],[-12,32],[57,-81],[29,-26],[2,-13]],[[29247,77766],[40,22],[82,85],[61,30],[80,89],[57,17],[11,20],[9,73],[6,26],[26,73],[33,61],[26,84],[47,54],[71,45],[66,98],[36,30],[35,22],[15,40],[21,23],[58,46],[64,13],[64,38],[50,21],[30,36],[44,19],[132,104],[36,49],[48,99],[41,51],[14,54],[60,87],[62,116],[30,82],[46,46],[89,132],[47,52],[20,6],[53,47],[34,48],[54,49],[97,60],[91,72],[123,63],[144,93],[117,50],[82,7],[100,24],[35,-3],[156,-40],[74,-50],[85,-106],[13,-27],[2,-39],[-45,19],[-40,1],[28,-22],[47,-65],[-3,-81],[-26,-73],[-79,-36],[-20,-29],[-16,-47],[-16,-18],[-39,-22],[-21,-30],[-62,-49],[-28,-6],[-32,11],[-78,47],[-47,44],[-24,-24],[-20,-26],[-46,9],[-21,-11],[-34,12],[-71,-56],[20,-6],[56,32],[19,-4],[42,-41],[100,-45],[26,-29],[25,-95],[16,-15],[35,10],[39,47],[32,25],[63,20],[-13,-31],[48,3],[48,-42],[-18,-30],[-24,-59],[-16,-116],[-49,-78],[-64,-76],[16,-19],[19,-11],[41,22],[28,-1],[31,-15],[-10,-59],[-11,-40],[7,-38],[18,-71],[25,-16],[10,-92],[14,-50],[-2,-40],[25,-25],[4,-41],[92,-12],[19,-16],[63,-15],[12,-12],[12,-22],[-63,-49],[51,-36],[47,-59],[38,12],[16,-2],[42,-36],[12,-19],[6,-16],[21,4],[31,14],[54,-4],[59,-20],[-5,-32],[-9,-21],[46,7],[28,-23],[10,11],[7,14],[57,38],[73,79],[9,-9],[3,-30],[10,-49],[28,-34],[33,-8],[45,26],[18,-22],[22,-43],[20,-57],[-1,-20],[-26,-17],[-24,-26],[99,-10],[10,-11],[10,-22],[-10,-22],[-9,-11],[-18,13],[-33,-12],[-28,-29],[-31,-16],[-20,-2],[-22,-14],[-20,-20],[-20,-6],[-65,-52],[-66,-33],[-69,-54],[-71,-34],[-73,-40],[-16,-4],[-19,2],[-41,-40],[-21,6],[-21,-7],[-25,9],[-16,16],[13,-42],[3,-39],[-6,-16],[-12,-20],[-42,3],[-16,14],[-20,21],[-9,33],[-21,24],[-13,-33],[1,-25],[-16,-33],[-18,57],[-34,-21],[-14,-61],[7,-17],[10,-46],[-16,-25],[-12,7],[-25,-68],[-31,-25],[-31,-70],[-37,-52],[-11,-36],[-62,-81],[-24,2],[-17,-2],[-26,-34],[-5,-68],[-11,9],[-12,-2],[-6,-22],[-9,-3],[-23,20],[-27,-11],[-21,15],[-27,100],[-14,35],[-26,12],[-6,-22],[-10,-20],[-25,41],[-18,153],[0,37],[26,129],[64,116],[-21,4],[-56,-81],[6,20],[9,20],[19,33],[29,31],[39,17],[27,3],[18,17],[27,30],[5,16],[-24,-18],[-39,-18],[10,23],[10,13],[209,208],[42,34],[84,44],[12,28],[-12,19],[33,-17],[-3,-23],[-5,-18],[-2,-29],[3,-28],[34,-14],[27,-52],[-13,71],[25,40],[96,54],[80,6],[25,25],[-68,17],[-81,-9],[-50,19],[-70,-12],[-73,11],[-22,-15],[-19,-34],[-23,15],[-12,2],[-11,12],[24,58],[74,87],[46,75],[12,15],[10,31],[-24,-5],[-22,-12],[-15,34],[-27,47],[-2,-20],[13,-57],[-51,-101],[-34,-7],[-44,-47],[-62,-41],[-73,-78],[-95,-66],[-19,-1],[-43,55],[12,24],[11,34],[-11,-10],[-7,-14],[-25,-24],[21,-45],[-11,-17],[-30,-22],[-27,-32],[-25,-22],[-20,28],[-54,-35],[-46,-9],[-10,17],[-3,28],[-16,7],[-30,-8],[-11,15]],[[31354,77862],[-13,7],[-12,6],[-10,5],[-6,-8],[-5,-11],[-7,-8],[-14,11],[-9,21],[-15,22],[-6,16],[3,19],[7,18],[3,22],[-7,25],[-7,14],[-5,16],[2,16],[9,7],[9,10],[3,20],[-6,22],[-15,8],[-12,-3],[-18,5],[-17,13],[-12,16],[-8,9],[-7,0],[-8,8],[-5,15],[0,25],[3,15],[4,12],[1,15],[-2,10],[-1,8],[2,10],[3,20],[-5,15],[-1,52],[-1,96],[-1,74],[0,92],[-1,68],[-1,95],[0,89],[-2,85],[-35,49],[-45,62],[-39,41],[-21,5],[-13,-6],[-5,-17],[-29,-17],[-52,-19],[-44,-29],[-17,0],[-14,5],[-18,14],[-12,22],[-5,37],[4,51],[-27,11],[-26,10],[-17,-35],[-16,-30],[-31,-64],[-44,-91],[-24,-50],[-43,-87],[-38,-77],[-8,-80],[-8,-75],[-32,-57],[-19,-52],[-8,-58],[-7,-54],[-1,-44],[5,-24],[-2,-19],[-10,-22],[-21,-38],[-4,-37],[-12,-18],[-36,-36],[-30,-53],[-1,-30],[4,-25],[1,-16],[-6,-11],[-12,1],[-13,-4],[-10,-22],[0,-32],[-8,-23],[-9,-5],[-8,17],[-9,24],[-11,3],[-17,-17],[-21,-26],[-19,-2],[-34,17],[-26,-51],[-27,-111],[-116,-1],[-115,0],[-116,0],[-116,-1],[-115,0],[-116,0],[-115,0],[-65,-1],[-13,0]],[[14974,80272],[8,-52],[-34,9],[-12,10],[0,25],[6,23],[26,-8],[6,-7]],[[34846,80408],[-43,-34],[-10,-13],[-12,-7],[-9,11],[-12,35],[2,12],[12,2],[7,-5],[1,-11],[5,-6],[9,0],[32,35],[16,5],[6,-6],[-4,-18]],[[34974,80497],[20,-37],[11,-10],[-72,-41],[-8,-2],[-5,4],[-1,38],[4,29],[5,5],[16,-18],[17,36],[13,-4]],[[15513,80374],[4,-12],[-62,45],[-27,27],[-10,19],[-6,11],[-32,28],[-5,13],[7,10],[21,-6],[35,-21],[32,-35],[43,-79]],[[14822,80417],[-11,-2],[-18,7],[-19,16],[-35,44],[-3,10],[3,9],[9,7],[3,11],[-8,32],[27,20],[25,-17],[11,-20],[13,-36],[6,-41],[1,-28],[-4,-12]],[[32833,80122],[-117,-8],[-92,36],[-69,17],[-67,31],[-146,100],[-16,35],[-14,43],[-28,39],[-30,32],[-154,98],[-13,34],[31,23],[36,10],[31,-1],[104,-38],[130,-34],[56,-26],[64,-38],[62,-47],[140,-125],[24,-10],[63,-61],[23,-46],[11,-38],[-14,-19],[-15,-7]],[[15284,80661],[-7,-5],[-7,66],[9,23],[2,12],[-1,12],[15,-29],[6,-20],[2,-27],[0,-8],[-19,-24]],[[15226,80700],[-3,-30],[-17,49],[-28,105],[4,24],[12,35],[11,2],[18,-16],[16,-29],[3,-11],[10,-30],[5,-27],[-11,-33],[-20,-39]],[[34573,81059],[-9,-6],[-9,0],[-8,7],[-1,11],[8,23],[21,12],[17,-3],[-1,-12],[-9,-19],[-9,-13]],[[14667,81013],[138,-72],[138,-35],[102,-42],[62,-13],[22,-9],[15,-15],[17,-36],[29,-85],[23,-55],[46,-94],[37,-67],[8,-27],[-8,-8],[1,-16],[28,-65],[52,-59],[41,-28],[86,-45],[53,-45],[16,-30],[23,-30],[9,-21],[19,-76],[35,-73],[36,-139],[7,11],[4,42],[4,9],[8,5],[7,-17],[6,-36],[23,-87],[-7,-26],[-7,-3],[-31,12],[-10,-15],[-15,-32],[-10,-13],[-6,6],[-90,31],[-55,29],[-72,45],[-87,47],[-50,33],[-41,33],[-29,29],[-5,24],[1,11],[56,77],[23,42],[9,31],[5,34],[-3,41],[-3,-3],[-5,-40],[-8,-34],[-10,-28],[-6,-9],[-67,-14],[-54,4],[-27,-33],[-8,-4],[-15,11],[-33,44],[-47,36],[5,9],[31,19],[16,26],[-3,5],[-11,-2],[-10,6],[-19,34],[-10,10],[-23,-16],[-10,-1],[-9,23],[13,53],[1,13],[-24,-20],[-8,7],[-7,17],[-7,7],[-19,-3],[-21,15],[-7,-6],[-3,-23],[-7,-6],[-31,39],[-8,1],[-15,-29],[-5,-2],[-9,13],[-4,71],[2,21],[4,7],[28,16],[79,18],[7,13],[-60,-7],[-15,10],[-17,24],[-17,0],[-9,8],[-10,18],[-25,64],[-17,17],[-29,10],[-15,12],[-6,-5],[-6,-19],[-9,-11],[-19,-7],[-19,5],[-14,18],[-8,22],[-4,25],[8,33],[0,14],[-3,15],[-7,12],[-9,10],[-5,-5],[-1,-20],[-5,-14],[-17,-11],[-13,19],[-9,27],[-11,19],[-57,0],[-27,-25],[-13,-2],[-13,6],[-2,13],[12,35],[-3,47],[-3,12],[-27,7],[-4,12],[15,57],[9,11],[12,4],[53,4],[17,-8],[26,-34],[-1,13],[-9,39],[-2,24],[18,26],[-17,8],[-63,6],[1,-17],[5,-24],[-37,-21],[-28,-4],[-26,4],[-21,12],[-37,51],[-23,51],[1,27],[13,29],[16,19],[39,18],[51,1],[57,-23],[143,-104]],[[34594,81530],[-20,-58],[-14,-28],[-13,-9],[-28,-8],[-59,-9],[-25,-8],[-3,-39],[4,-20],[8,-16],[11,-4],[24,9],[9,-1],[7,-8],[6,-15],[3,-20],[0,-25],[-4,-31],[-20,-73],[-25,-40],[-33,-33],[-7,-12],[-5,-15],[-4,-48],[-16,-38],[-52,-96],[-20,-22],[0,-17],[-8,-46],[-16,-36],[-43,-85],[-10,-30],[-5,-24],[1,-33],[-2,-15],[-10,-28],[-14,-27],[-3,-13],[6,-23],[5,-8],[1,-22],[-4,-34],[18,22],[40,78],[31,47],[20,16],[15,21],[15,46],[20,44],[19,15],[9,-9],[7,-21],[-1,-28],[-10,-33],[0,-10],[24,24],[41,21],[15,-3],[30,-30],[26,3],[40,18],[7,-8],[-7,-27],[-15,-26],[-37,-36],[-90,-72],[-28,-49],[5,2],[20,21],[20,11],[21,2],[9,-7],[-3,-14],[-3,-37],[-54,-74],[13,3],[62,33],[39,-46],[52,16],[31,15],[0,-9],[6,-20],[0,-33],[3,-5],[15,11],[3,12],[-1,58],[5,6],[10,-9],[6,-15],[2,-42],[-7,-43],[-9,-39],[-23,-57],[3,-24],[-6,-27],[5,-1],[23,25],[1,10],[-2,24],[3,11],[19,26],[31,31],[11,4],[4,-7],[-2,-19],[10,5],[20,28],[18,16],[17,6],[18,19],[19,32],[20,27],[21,21],[9,2],[-3,-35],[4,-40],[1,-34],[4,-7],[17,36],[9,13],[11,6],[12,-3],[87,13],[27,-9],[30,-24],[37,-36],[14,-33],[3,-42],[-4,-29],[-27,-37],[-24,-24],[-14,-24],[-5,-25],[-5,-15],[-16,-20],[-72,-59],[17,-2],[41,13],[28,3],[1,-9],[-11,-16],[-21,-17],[-2,-8],[1,-11],[22,-12],[29,6],[24,-9],[-3,-14],[-19,-46],[-5,-28],[-26,-25],[-50,-37],[-13,-15],[3,-3],[46,28],[24,7],[14,0],[17,27],[26,9],[26,-17],[39,46],[14,6],[24,-5],[15,8],[26,32],[20,15],[4,-1],[4,-13],[2,-36],[-5,-32],[-6,-21],[-21,-45],[-13,-16],[-12,-6],[-21,2],[-9,-7],[-20,-35],[-35,-36],[-22,-14],[14,-20],[5,-37],[-8,-12],[-37,-12],[-2,-6],[-13,-8],[-31,-13],[21,-6],[39,9],[4,-6],[-5,-27],[-11,-27],[-46,-70],[0,-7],[7,-35],[9,-26],[11,-18],[26,-1],[19,8],[27,47],[62,146],[55,41],[45,45],[11,-9],[5,-11],[-2,-11],[-23,-37],[-12,-31],[-31,-94],[-12,-45],[-6,-47],[1,-81],[4,-14],[9,-19],[19,17],[31,40],[20,38],[15,63],[10,24],[10,-1],[10,-13],[2,-30],[8,-42],[6,-41],[-4,-46],[-5,-25],[-63,-186],[6,-33],[2,-20],[-2,-22],[-20,-89],[-19,-55],[-11,-24],[-12,-15],[-15,-5],[-13,8],[-11,21],[-10,11],[-9,1],[-17,-4],[-42,-45],[-9,-3],[-6,6],[-8,24],[6,120],[4,40],[-9,30],[9,52],[1,19],[-6,7],[-10,-4],[-17,-26],[-22,-47],[-23,-42],[-42,-57],[-18,-11],[-8,2],[-8,8],[-12,24],[1,22],[5,29],[17,68],[34,101],[28,72],[5,31],[-7,13],[-7,27],[-11,78],[-13,64],[-16,28],[-41,32],[-7,-8],[-4,-43],[-48,-124],[-8,-54],[-6,-20],[-9,-14],[-21,-17],[6,29],[22,64],[-3,6],[-28,-51],[-21,-29],[-26,-7],[-16,2],[-15,-8],[-65,-122],[-3,-40],[-11,-33],[-32,-60],[-17,-21],[-24,-4],[-21,11],[-15,-2],[-33,-19],[-38,-8],[-16,4],[-10,7],[-19,24],[-2,16],[1,10],[10,25],[22,32],[18,11],[45,16],[33,24],[25,35],[12,21],[47,110],[60,39],[29,31],[21,40],[3,14],[-30,-20],[-15,-5],[-25,7],[-11,14],[-34,-4],[-47,6],[-7,-10],[-6,-54],[-6,-28],[-7,-9],[-11,-6],[-21,-6],[-55,19],[-11,11],[-14,8],[-60,-18],[-13,2],[12,12],[60,40],[6,112],[-3,18],[-17,-16],[-28,-16],[-20,5],[-9,10],[-8,-9],[-19,-59],[-12,-7],[-17,-3],[-38,-21],[-73,-15],[-14,-15],[-49,5],[-145,33],[-52,-3],[-62,19],[-12,9],[-87,-3],[-26,4],[2,25],[-3,6],[-25,-27],[-23,-18],[-29,-15],[-91,-26],[-49,-6],[-28,18],[-11,19],[-17,59],[-12,74],[0,13],[6,26],[19,36],[87,94],[69,96],[30,49],[28,18],[46,41],[2,5],[-45,-5],[-32,11],[-32,5],[-62,-11],[-62,0],[0,21],[29,40],[62,68],[6,1],[-19,-32],[-5,-24],[8,-16],[9,-10],[36,-4],[8,14],[12,73],[27,85],[14,61],[25,47],[13,7],[11,-9],[37,-11],[38,-43],[12,-3],[4,3],[-14,13],[-11,20],[-5,19],[14,59],[16,17],[3,12],[-32,0],[-26,16],[-8,27],[1,47],[9,28],[21,37],[25,25],[15,-6],[30,-34],[18,10],[-3,10],[-27,53],[-9,39],[1,19],[59,187],[29,100],[40,153],[9,24],[20,45],[9,12],[25,0],[16,6],[-23,19],[-8,14],[-1,15],[6,15],[9,12],[31,24],[22,40],[13,48],[-2,16],[-7,16],[0,9],[17,10],[42,56],[5,11],[16,75],[19,33],[17,17],[28,21],[86,52],[51,46],[34,-3],[10,-32],[49,-21],[9,23],[-12,28],[10,11],[40,10],[7,-4],[12,-16],[-2,-14]],[[14465,81493],[-4,-9],[-11,0],[-18,10],[-13,21],[-16,66],[2,12],[5,12],[25,24],[10,-3],[3,-18],[15,-39],[5,-11],[0,-46],[-3,-19]],[[34622,81733],[-14,-1],[-3,7],[6,22],[15,26],[20,7],[-6,-38],[-18,-23]],[[27949,81769],[-12,-4],[-26,4],[-22,15],[-13,18],[86,51],[18,-7],[0,-9],[-13,-27],[-3,-18],[-6,-14],[-9,-9]],[[13603,81774],[-5,-1],[-9,12],[-7,19],[-4,51],[3,20],[3,8],[24,-32],[-5,-77]],[[14342,82027],[-21,-7],[7,31],[2,18],[-4,17],[-3,33],[-1,79],[21,49],[33,1],[-1,-25],[-14,-111],[-7,-51],[-5,-19],[-7,-15]],[[14184,82090],[-9,-26],[-37,63],[-13,18],[-28,67],[-5,29],[1,17],[5,6],[9,-4],[8,-8],[53,-74],[15,-35],[1,-53]],[[14079,82368],[-4,-5],[-11,8],[-11,15],[-19,43],[-6,18],[-4,29],[3,5],[9,-3],[5,-5],[30,-70],[8,-35]],[[27574,82227],[-19,-8],[-58,16],[-24,11],[-71,41],[-135,61],[-46,31],[-10,22],[25,48],[13,19],[15,12],[143,22],[55,-11],[65,-97],[38,-66],[15,-52],[0,-26],[-6,-23]],[[13402,82485],[28,-53],[8,-48],[-3,-56],[-45,-22],[-23,17],[-11,-3],[-15,-17],[19,-7],[26,-28],[23,-36],[32,-6],[44,-25],[-33,-45],[-5,-26],[41,-72],[4,-18],[13,-4],[30,6],[4,-6],[0,-15],[-19,-42],[2,-8],[17,-7],[32,0],[8,-41],[-30,-38],[-55,49],[-25,48],[-14,45],[-17,25],[-52,57],[-78,121],[-21,18],[-20,48],[-6,23],[1,15],[7,9],[24,5],[0,24],[-90,42],[-10,8],[-12,30],[7,4],[49,-5],[53,14],[33,11],[13,13],[27,17],[11,-1],[28,-20]],[[14291,82338],[13,-184],[-1,-59],[-19,-38],[-13,-65],[-15,-29],[-15,39],[-1,64],[-4,51],[-5,24],[6,95],[-6,-7],[-18,-41],[-19,-3],[-34,47],[-17,38],[-3,40],[-22,42],[-3,15],[2,16],[19,42],[7,28],[7,58],[7,23],[18,-3],[31,-27],[33,-28],[30,-39],[22,-99]],[[14120,82440],[-2,-4],[-28,0],[-8,6],[-5,12],[-2,19],[4,22],[17,42],[1,18],[3,8],[12,-22],[5,-19],[3,-82]],[[27795,82548],[-1,-17],[-18,3],[-9,10],[-8,15],[-2,12],[7,11],[21,-7],[10,-27]],[[13931,82469],[-6,-2],[-18,7],[-60,98],[-43,35],[-29,48],[-30,31],[18,50],[16,-6],[56,-41],[44,-39],[25,-26],[53,-110],[-4,-16],[-22,-29]],[[13823,82925],[-8,-21],[-20,-32],[-13,-13],[-6,6],[-18,4],[-19,32],[-14,13],[-10,1],[-5,-12],[-1,-15],[3,-20],[-2,-9],[-6,2],[-5,9],[-6,16],[-1,17],[4,17],[13,24],[42,47],[13,9],[14,-2],[23,-22],[5,-7],[17,-44]],[[13151,83022],[26,-34],[61,22],[11,-4],[12,-13],[12,-28],[14,-42],[3,-46],[-5,-17],[-11,-18],[-98,-73],[-2,-7],[2,-7],[9,-7],[19,1],[77,18],[5,13],[5,57],[11,31],[0,23],[-7,55],[1,22],[54,5],[33,20],[35,38],[8,-1],[-5,-68],[-5,-21],[-33,-84],[-19,-73],[-9,-73],[-2,-120],[-8,-41],[-15,-25],[-93,-43],[-48,2],[-43,40],[-20,27],[15,33],[10,2],[30,-7],[24,-12],[10,0],[-2,7],[-66,63],[-49,28],[-14,32],[-1,24],[-4,14],[-38,86],[-8,34],[-5,48],[0,49],[10,80],[4,8],[16,-1],[27,-9],[66,-8]],[[13631,83225],[-6,-1],[-3,12],[2,25],[9,42],[4,9],[36,-7],[5,-3],[1,-8],[-2,-13],[-12,-19],[-34,-37]],[[13729,83392],[23,37],[50,64],[27,47]],[[13829,83540],[3,-46],[-40,-76],[-52,-38],[-11,12]],[[33057,84123],[3,-14],[-43,10],[-15,9],[-1,9],[2,15],[8,17],[20,13],[11,-7],[23,-17],[3,-11],[-11,-24]],[[28103,84184],[-14,-8],[-10,1],[2,19],[14,38],[8,34],[2,28],[6,25],[10,22],[11,11],[15,-1],[4,-70],[-5,-32],[-10,-28],[-14,-22],[-19,-17]],[[27784,84220],[-14,-4],[-17,8],[9,42],[14,18],[36,17],[7,11],[11,6],[17,0],[19,15],[21,32],[7,4],[-14,-46],[-16,-34],[-80,-69]],[[28073,84254],[-23,-58],[-18,-56],[-25,-106],[-15,-3],[-13,25],[37,123],[1,14],[-1,12],[-11,18],[-11,-21],[-52,-139],[-13,-22],[-11,-13],[-9,-2],[-22,3],[-44,-40],[74,165],[1,13],[-14,8],[-6,-5],[-60,-104],[-34,-40],[-23,13],[-6,10],[2,13],[59,104],[54,75],[22,48],[9,44],[4,33],[0,36],[3,10],[3,-2],[3,-14],[1,-38],[-12,-77],[-10,-38],[-12,-32],[5,-7],[22,18],[18,38],[15,57],[9,50],[10,80],[3,-3],[4,-16],[10,-11],[15,-7],[9,-10],[6,-26],[7,-12],[23,-10],[9,-8],[6,-29],[-1,-16],[3,-9],[7,-5],[-8,-31]],[[27911,84479],[-9,-7],[-7,0],[7,51],[-8,18],[-1,9],[4,9],[5,2],[11,-16],[6,-17],[2,-16],[0,-16],[-4,-11],[-6,-6]],[[27814,84547],[-7,-10],[-14,11],[0,29],[13,22],[10,-1],[10,-12],[-3,-15],[-9,-24]],[[32849,84996],[23,-17],[6,-63],[-44,4],[-50,42],[-10,31],[1,5],[7,5],[13,-7],[12,11],[13,3],[29,-14]],[[27856,84974],[-4,-5],[-12,4],[-5,-38],[-4,-3],[-9,23],[7,20],[-1,14],[2,10],[12,23],[7,5],[4,-2],[4,-29],[-1,-22]],[[30789,85852],[-17,-42],[-23,5],[-8,-8],[-6,-1],[10,39],[1,27],[-5,27],[8,13],[30,1],[0,-31],[4,-11],[7,-6],[-1,-13]],[[27698,86188],[-9,-2],[-2,7],[7,24],[12,3],[13,26],[12,-9],[-4,-15],[-16,-22],[-13,-12]],[[27760,86273],[-29,-4],[13,34],[10,16],[12,11],[24,4],[16,-14],[-15,-25],[-31,-22]],[[32109,86616],[-10,-40],[-32,15],[-50,30],[-20,20],[-7,22],[0,30],[15,5],[37,3],[32,-42],[9,-6],[26,-37]],[[31046,86544],[-25,-5],[-12,12],[0,35],[8,26],[29,55],[25,62],[15,14],[31,-10],[18,-17],[18,-30],[8,-22],[-7,-34],[-22,-29],[-25,-21],[-61,-36]],[[28185,86824],[-38,-6],[0,8],[16,24],[59,20],[44,6],[-10,-20],[-26,-16],[-45,-16]],[[31991,87192],[-7,-7],[-6,2],[-21,30],[-28,13],[-10,12],[-84,63],[-9,28],[-2,22],[28,11],[56,10],[49,-1],[46,-13],[9,-14],[24,-26],[-6,-30],[-2,-40],[-10,-19],[-15,-14],[-12,-27]],[[24154,87467],[-11,-1],[-26,29],[-5,15],[33,9],[23,-26],[-2,-12],[-12,-14]],[[31936,87487],[6,-5],[7,6],[6,-5],[4,-16],[6,-12],[17,-14],[5,-11],[0,-11],[-14,-16],[-9,0],[-66,37],[-18,39],[-1,19],[7,18],[10,8],[13,0],[16,-10],[11,-27]],[[27904,87794],[22,-16],[36,-52],[14,-26],[4,-36],[-10,-48],[-5,-44],[-13,-34],[-25,-42],[-22,-50],[-20,-56],[-15,-38],[-13,-18],[-14,-10],[-14,-1],[-23,21],[-30,41],[-24,26],[-31,18],[-17,23],[-3,23],[-1,76],[1,37],[4,32],[7,25],[16,34],[44,75],[26,29],[16,7],[43,-6],[18,2],[14,9],[15,-1]],[[31993,87879],[53,-6],[33,2],[14,-9],[13,-28],[-17,-40],[-19,-16],[-31,-4],[-50,13],[-17,8],[-16,22],[7,15],[25,5],[4,7],[-6,12],[0,10],[7,9]],[[29444,87913],[-15,-5],[-55,7],[-69,27],[-35,25],[2,8],[15,4],[18,-4],[29,-17],[80,-9],[25,-10],[8,-16],[-3,-10]],[[30462,87873],[-20,-2],[-37,4],[-40,12],[-23,14],[-19,29],[-4,33],[-38,48],[-42,16],[-23,33],[24,3],[34,-8],[49,-14],[45,-19],[64,-42],[21,-40],[21,-28],[7,-22],[-6,-10],[-13,-7]],[[27222,88107],[11,-17],[3,-24],[-4,-32],[-7,-30],[-10,-27],[-25,-44],[-76,-77],[-28,-42],[-22,-25],[-124,-111],[-16,-6],[-16,2],[-34,17],[-34,3],[-90,-45],[-4,8],[-4,48],[-9,27],[-40,57],[-2,13],[0,16],[3,13],[45,54],[101,193],[24,10],[49,-22],[24,-7],[17,1],[72,41],[68,-5],[63,24],[29,0],[23,-4],[13,-9]],[[28367,88404],[24,-25],[24,2],[14,-20],[32,-63],[3,-10],[-1,-21],[-17,-26],[-18,-13],[-37,-20],[-42,-9],[-23,14],[-64,58],[-59,68],[-19,38],[8,16],[25,11],[51,11],[83,-6],[16,-5]],[[28700,88360],[-29,-6],[-38,13],[-38,25],[-85,80],[64,54],[102,-63],[31,-40],[-7,-63]],[[28432,88704],[-20,-26],[-59,9],[-8,8],[-2,10],[9,12],[61,12],[26,1],[14,-4],[1,-4],[-22,-18]],[[26411,89435],[10,-7],[11,4],[20,29],[44,82],[13,7],[18,-1],[65,-53],[24,-29],[13,-41],[14,-16],[51,-21],[49,-7],[65,-21],[23,-16],[51,-78],[6,-5],[59,-32],[89,-72],[23,-10],[87,-24],[32,-17],[30,-27],[34,-49],[39,-77],[31,-123],[2,-24],[-3,-14],[-12,-16],[-50,-50],[4,-9],[48,4],[105,31],[65,-23],[22,-3],[5,1],[24,39],[25,-6],[38,-38],[24,-30],[10,-23],[-2,-13],[-25,-5],[60,-22],[53,-35],[-11,-23],[-57,-51],[-57,-45],[-67,-66],[-17,-11],[-9,0],[-37,12],[-54,32],[-164,73],[-51,15],[-64,9],[-9,17],[-16,110],[-29,19],[-99,23],[-29,13],[-2,22],[7,38],[-14,19],[-33,-1],[-33,-8],[-53,-26],[-25,-24],[-9,-25],[-6,-55],[-7,-26],[-18,-35],[-82,-88],[-33,-27],[-33,-7],[-13,-9],[-22,-32],[-33,-80],[-14,-24],[-21,-23],[-46,-36],[-46,-29],[-77,-33],[-42,-11],[-29,11],[-20,76],[-41,223],[-7,15],[-8,9],[-10,4],[-138,-29],[-76,3],[-75,-50],[-19,-3],[-39,1],[-27,8],[-7,6],[-5,21],[2,23],[9,25],[34,66],[28,41],[13,13],[129,74],[31,24],[16,25],[0,25],[-6,33],[-23,80],[-5,73],[0,36],[8,55],[33,135],[11,66],[20,234],[11,67],[16,62],[15,37],[42,73],[31,30],[41,20],[8,-2],[8,-9],[15,-31],[56,-29],[18,-28],[12,-31],[7,-40],[-7,-18],[-26,-27],[-5,-11],[1,-9],[51,-42],[38,-102]],[[26479,89616],[-15,-6],[-15,3],[-13,17],[-11,30],[-17,22],[-39,28],[-7,11],[-11,37],[-2,37],[-9,34],[0,16],[7,25],[33,6],[26,-10],[5,-7],[8,-14],[6,-18],[31,-47],[18,-38],[25,-78],[0,-15],[-7,-16],[-13,-17]],[[26743,89744],[35,-23],[36,-13],[57,-6],[8,-5],[0,-11],[-8,-16],[-19,-22],[-14,0],[-31,15],[-12,7],[-13,17],[-6,2],[-9,-6],[-2,-7],[4,-10],[-5,-2],[-39,6],[-6,6],[3,18],[27,27],[-23,8],[-8,10],[-35,-17],[-19,-4],[-30,12],[-4,60],[-3,23],[-14,15],[-9,16],[-13,12],[-27,12],[-23,30],[-4,14],[3,10],[13,14],[79,-30],[48,-29],[46,-36],[23,-26],[2,-17],[-5,-17],[-14,-17],[11,-20]],[[26910,90024],[28,-7],[21,1],[4,-9],[-22,-28],[-13,-5],[-25,20],[-18,25],[-5,15],[-2,16],[4,3],[28,-31]],[[19974,90440],[35,-5],[45,1],[-8,-44],[-17,-29],[-14,-8],[-6,16],[-26,35],[-9,34]],[[32588,90469],[-34,-15],[-19,19],[13,6],[19,23],[26,20],[11,17],[43,7],[15,0],[5,-6],[-24,-26],[-55,-45]],[[20028,90668],[-14,-48],[-6,5],[-9,23],[-20,11],[-21,25],[0,55],[8,25],[-2,35],[22,21],[16,-25],[5,-42],[-4,-20],[16,-22],[7,-5],[4,-17],[-2,-21]],[[19676,91003],[31,-6],[23,4],[17,-23],[7,-23],[-2,-8],[-8,-4],[-49,26],[-18,16],[-6,14],[5,4]],[[29549,90889],[-135,-1],[-74,4],[-29,9],[-26,13],[-29,45],[-19,45],[-1,20],[5,17],[7,11],[91,15],[74,-19],[64,-22],[83,-4],[25,-9],[9,-6],[7,-11],[9,-53],[1,-28],[-2,-21],[-60,-5]],[[19632,91008],[-10,-2],[-38,34],[8,30],[35,-31],[5,-18],[0,-13]],[[25945,90861],[-11,-1],[-19,9],[-43,35],[-9,15],[-4,17],[0,21],[3,20],[14,42],[-26,33],[-6,19],[3,10],[14,26],[4,16],[14,22],[37,44],[37,-10],[32,-36],[9,-24],[-3,-26],[3,-37],[8,-49],[3,-36],[-4,-22],[-14,-41],[-12,-20],[-16,-18],[-14,-9]],[[28979,91199],[145,-51],[14,-19],[7,-16],[4,-19],[0,-38],[-3,-15],[-14,-36],[-1,-12],[11,-123],[-1,-67],[-10,-56],[-21,-45],[-31,-34],[-24,-20],[-105,-48],[-75,-12],[-79,-2],[-100,-13],[-46,3],[-24,5],[-17,10],[-19,30],[-23,51],[-18,58],[-23,102],[0,12],[21,83],[29,56],[50,82],[57,81],[14,14],[26,14],[64,23],[54,-6],[23,3],[29,10],[33,3],[53,-8]],[[28060,91124],[-23,-6],[-30,30],[0,17],[6,41],[55,10],[24,-24],[11,-24],[-43,-44]],[[20961,91247],[-16,-2],[-28,9],[-43,21],[-31,21],[-21,23],[-3,16],[16,9],[24,4],[57,-3],[28,-8],[36,-34],[7,-19],[2,-12],[-5,-11],[-23,-14]],[[29199,91214],[-21,-4],[-32,36],[-66,40],[-25,30],[-1,14],[2,22],[8,27],[23,30],[24,5],[35,-7],[25,-21],[27,-59],[19,-29],[5,-21],[-9,-10],[1,-10],[4,-6],[-1,-11],[-8,-16],[-10,-10]],[[21709,91351],[-11,-1],[-16,10],[-90,35],[-11,11],[10,15],[33,19],[22,19],[17,30],[51,-16],[19,-14],[8,-12],[3,-17],[-3,-41],[-17,-9],[-15,-29]],[[22162,91478],[-9,-18],[-11,-6],[-22,-21],[-8,-3],[-13,14],[-11,22],[-4,3],[-7,0],[-14,-15],[-7,1],[-5,9],[-3,19],[0,28],[7,44],[1,16],[-4,12],[3,12],[10,10],[12,4],[30,-4],[23,-17],[12,-23],[23,-18],[7,-13],[-10,-56]],[[22223,91597],[-6,-34],[-34,9],[-15,12],[-13,28],[-2,8],[3,10],[14,25],[9,9],[23,-11],[10,-14],[8,-23],[3,-19]],[[24863,91716],[-23,-6],[-14,24],[-12,5],[-5,16],[-24,3],[2,25],[7,12],[22,10],[17,-4],[17,-25],[8,-20],[7,-25],[-2,-15]],[[27997,91500],[-19,-4],[-23,11],[-8,19],[-4,19],[4,10],[10,9],[13,21],[18,32],[27,22],[60,21],[8,7],[27,58],[9,9],[30,6],[3,8],[-10,14],[0,14],[10,15],[15,12],[39,10],[35,-2],[9,-4],[7,-10],[11,-27],[1,-6],[-16,-24],[-42,-36],[-26,-31],[-5,-10],[-3,-13],[-9,-15],[-31,-38],[-20,-36],[-21,-20],[-56,-19],[-43,-22]],[[24944,91831],[6,-36],[-24,-49],[-8,-8],[-10,-4],[-9,6],[-28,38],[-8,24],[10,12],[22,15],[15,7],[20,-6],[6,10],[8,-9]],[[28612,91672],[-35,-7],[-26,4],[-17,13],[-13,19],[-16,46],[6,22],[2,38],[3,15],[6,7],[37,14],[21,-2],[32,-15],[69,-4],[18,-14],[4,-8],[-1,-10],[-4,-12],[-34,-35],[-17,-24],[-12,-29],[-23,-18]],[[21897,91818],[-23,-5],[-4,1],[2,16],[-2,8],[-6,5],[20,13],[3,10],[-7,7],[-27,14],[-8,13],[2,11],[10,10],[19,-2],[41,-18],[19,-26],[8,-20],[-13,-3],[-11,-8],[-11,-16],[-12,-10]],[[23468,91920],[37,-39],[0,-19],[-5,-31],[-11,-24],[-16,-16],[-23,-8],[-29,-1],[-13,7],[10,24],[7,8],[1,21],[-5,35],[-6,22],[-16,12],[-12,1],[-3,-12],[5,-23],[-4,-30],[-13,-38],[-9,-17],[-18,9],[-8,14],[2,23],[-4,22],[4,22],[12,34],[17,22],[21,12],[26,-1],[29,-13],[24,-16]],[[11377,91921],[-23,-21],[-37,22],[-9,11],[42,30],[19,-1],[39,-18],[14,-15],[-45,-8]],[[31134,91901],[-7,-4],[-72,26],[-6,21],[36,24],[29,12],[22,2],[22,-4],[21,-25],[-25,-23],[-20,-29]],[[28325,92001],[14,-29],[3,-15],[-20,-17],[-74,-33],[-46,-28],[-22,-7],[-31,7],[-37,-14],[-15,2],[17,23],[58,67],[49,7],[16,14],[14,-5],[8,12],[1,17],[17,13],[16,0],[32,-14]],[[27936,92043],[11,-33],[7,-11],[-11,-15],[-41,-32],[-92,-12],[-46,14],[22,-44],[4,-19],[-6,-8],[-20,2],[-31,13],[-19,15],[-4,18],[-7,4],[-9,-10],[-8,2],[-19,27],[-14,9],[-92,16],[-4,7],[5,12],[14,18],[20,5],[52,-7],[4,4],[4,22],[4,9],[36,-3],[22,5],[13,-11],[12,-26],[17,5],[26,-4],[28,9],[43,23],[33,9],[46,-13]],[[22933,91959],[9,-7],[16,6],[12,19],[8,4],[12,-4],[39,-34],[29,-35],[32,-25],[50,-23],[110,-73],[32,-49],[34,-77],[31,-58],[26,-41],[29,-32],[46,-36],[41,26],[18,7],[15,-11],[14,-27],[-7,-12],[-18,-16],[-29,-17],[-42,-2],[-20,-5],[-32,-29],[-26,-34],[-36,-11],[-67,-57],[-37,-22],[-55,-5],[-114,44],[-71,-6],[-58,9],[-64,48],[-51,26],[-97,39],[-6,6],[-4,13],[-2,20],[-5,14],[-6,7],[-16,-1],[-15,-14],[-30,-11],[-46,2],[-20,9],[-15,12],[-8,15],[-1,17],[-5,13],[-7,9],[-16,0],[-26,-8],[-10,-11],[5,-13],[-4,-8],[-46,0],[-18,8],[-34,24],[-15,24],[-19,43],[2,11],[12,26],[16,19],[103,10],[48,11],[53,29],[61,52],[13,15],[1,11],[-4,12],[-19,30],[-7,20],[6,9],[25,1],[-13,12],[-11,16],[-4,10],[1,16],[19,4],[24,-8],[47,-47],[18,-9],[32,-7],[-34,32],[-35,67],[-4,24],[1,13],[9,36],[8,14],[11,10],[33,21],[53,14],[28,2],[27,-11],[24,-23],[54,-37],[8,-15],[-1,-7],[-20,-10],[-3,-9],[8,-14]],[[25857,92230],[32,-4],[30,5],[22,-5],[13,-16],[9,-17],[5,-18],[-12,-13],[-49,-11],[-34,6],[-35,15],[-17,-7],[-41,11],[-20,14],[-17,21],[0,13],[43,14],[17,12],[54,-20]],[[22136,92451],[-3,-5],[-60,22],[-23,12],[-8,10],[-5,19],[-3,28],[12,14],[27,-1],[28,-11],[44,-31],[-12,-10],[-1,-20],[5,-20],[-1,-7]],[[29247,77766],[-15,-2],[-26,2],[-39,-19],[-50,-41],[-62,-73],[-109,-158],[-7,-17],[-16,-30],[-40,-31],[-36,-34],[-10,-35],[-17,-16],[-60,-91],[-34,-76],[-31,-81],[-34,-90],[-71,-1],[-53,1],[-92,0],[-78,1],[-94,0],[-67,1],[-73,-4],[-35,-24],[-43,-32],[-47,-35],[24,-78],[7,-31],[-2,-99],[5,-11],[5,-14],[1,-26],[4,-12],[9,-9],[9,-11],[7,-15],[2,-15],[-7,-26],[-27,-36],[-38,-31],[-76,-56],[-87,-64],[-76,-57],[-59,-43],[-121,-38],[-96,-30],[-69,-22],[-64,-61],[-71,-67],[-59,-57],[-66,-63],[-63,-60],[-70,0],[-49,45],[-45,46],[-31,82],[-2,96],[11,63],[10,28],[19,18],[38,31],[34,62],[28,38],[27,38],[16,66],[20,160],[3,32],[28,110],[32,121],[15,56],[-17,145],[-12,111],[-11,102],[-13,115],[-11,104],[-11,99],[-11,99],[-11,96],[-8,70],[-10,82],[-58,58],[-44,41],[-73,66],[-60,55],[-54,51],[34,102],[-3,17],[-13,20],[-25,34],[-15,3],[-26,-8],[-41,-21],[-18,7],[-15,36],[-16,46],[-6,36],[-2,47],[-9,42],[6,23],[1,11],[0,14],[-7,9],[-12,4],[-40,-18],[-18,-2],[-11,-10],[-17,-21],[-17,-2],[-29,49],[-31,54],[-13,75],[-14,77],[-54,46],[-54,46],[-54,46],[-54,46],[-53,46],[-54,46],[-54,46],[-54,46],[-19,16],[-49,40],[-69,57],[-80,65],[-79,65],[-70,57],[-49,40],[-18,16],[-48,39],[-61,45],[-65,-23],[-79,-62],[-46,-36],[-34,-26],[-24,-16],[-51,-14],[-26,2],[-63,9],[-35,-11],[-25,11],[-13,36],[-15,23],[-63,-11],[-80,8],[-38,-4],[-15,15],[-12,40],[-21,5],[-35,-9],[-49,-51],[-47,-27],[-36,0],[-36,27],[-58,53],[-41,60],[-47,21],[-35,-5],[-14,-30],[-18,0],[-13,51],[-11,40],[-23,17],[-41,39],[-29,20],[-45,26],[-15,4],[-29,4],[-28,2],[-34,-7],[-23,-32],[-28,-14],[-40,-7],[-27,14],[-13,33],[-57,30],[-99,26],[-58,22],[-15,18],[-8,20],[-2,31],[0,1],[-26,80],[-10,67],[-5,80],[1,27],[-5,8],[-18,18],[-60,11],[-1,-96],[-1,-121],[-66,0],[-118,0],[-119,0],[-118,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-119,0],[-118,0],[-118,0],[-119,0],[-118,0],[-119,0],[-28,0]],[[15892,80064],[-11,21],[-27,26],[-10,0],[-11,-8],[-7,-12],[-6,-27],[-4,-8],[-4,1],[-3,7],[-8,37],[2,16],[9,20],[-1,7],[-20,-6],[-8,5],[-4,10],[1,42],[-11,23],[13,10],[32,8],[34,1],[9,18],[10,43],[-24,-40],[-14,-4],[-44,15],[-29,-2],[-4,8],[2,9],[6,9],[4,31],[7,85],[9,31],[3,16],[-2,4],[-38,-59],[-3,-19],[4,-16],[-4,-33],[-18,-10],[-10,5],[-20,-28],[-6,-3],[-91,50],[-10,6],[-15,23],[-23,40],[-7,34],[9,28],[8,14],[10,0],[10,-10],[21,-47],[8,-29],[22,4],[35,37],[8,14],[-35,-14],[-15,1],[-15,15],[-16,30],[-8,34],[0,107],[5,20],[17,16],[11,25],[-1,11],[-10,22],[-15,16],[-15,9],[-4,-3],[23,-46],[0,-18],[-26,-46],[-4,-13],[0,-45],[-3,-9],[-21,-13],[-23,-35],[-39,-12],[-36,4],[-20,17],[-61,86],[-22,36],[0,30],[-42,107],[0,23],[-14,33],[-16,5],[-4,32],[33,68],[21,58],[2,18],[-1,28],[-5,62],[5,27],[-21,-36],[-4,-26],[5,-27],[-3,-30],[-12,-43],[-21,-45],[-42,-21],[-74,12],[-8,6],[-5,15],[-4,66],[-5,-8],[-8,-35],[-7,-51],[-9,-11],[-15,-1],[-12,8],[-9,17],[-19,2],[-34,-14],[-17,6],[-19,0],[-40,15],[-47,4],[-12,11],[1,22],[8,11],[49,10],[48,23],[47,12],[-2,11],[-21,4],[-108,-26],[-34,4],[-6,4],[-1,26],[13,24],[21,23],[6,18],[-12,7],[-20,-5],[-9,14],[10,55],[-9,55],[-13,-52],[-19,-29],[-91,-13],[-15,-15],[-12,0],[-58,28],[-25,17],[-23,25],[-42,57],[-33,37],[-1,67],[7,43],[15,49],[59,104],[21,19],[18,7],[87,9],[65,13],[12,7],[-95,7],[-85,-5],[-29,-16],[-37,-67],[-9,-28],[-10,-21],[-7,0],[-12,7],[-4,9],[-6,22],[-19,34],[-9,40],[-5,59],[1,26],[10,34],[28,66],[-36,-2],[4,55],[13,61],[34,35],[34,26],[31,34],[55,22],[18,-46],[47,-14],[13,-21],[17,-38],[20,-36],[25,-35],[7,-3],[-11,30],[-40,65],[-2,23],[-10,25],[-52,36],[-10,14],[-9,36],[-4,23],[6,23],[53,69],[13,37],[0,17],[-5,19],[-11,34],[-3,0],[3,-51],[-2,-20],[-6,-22],[-8,-17],[-12,-11],[-114,-158],[-12,-9],[-42,-14],[-22,-17],[-12,-22],[-19,-58],[-25,-115],[-30,-93],[-25,121],[-46,92],[89,92],[2,14],[-8,49],[2,15],[8,21],[23,32],[-1,3],[-26,-12],[-41,-71],[-16,-22],[-8,-3],[-1,41],[22,109],[18,105],[6,30],[16,30],[-15,-2],[-72,-47],[-24,29],[-20,153],[-36,59],[-60,49],[-59,22],[-13,43],[-12,53],[16,62],[26,29],[23,13],[23,-6],[1,-22],[-15,-61],[20,-6],[81,-74],[17,-6],[34,28],[18,-1],[44,-23],[15,-28],[42,-54],[-6,32],[-46,66],[-25,22],[-45,4],[-28,-11],[-12,3],[-24,17],[-21,28],[-21,61],[-5,29],[1,21],[5,19],[9,17],[17,13],[26,7],[7,8],[-32,35],[-15,0],[-52,-51],[-10,-5],[-5,10],[-4,1],[-15,-25],[-12,-11],[-42,-79],[-7,-37],[-2,-57],[-5,-35],[-7,-14],[-50,-27],[-28,-55],[-34,48],[-38,45],[-25,80],[-45,14],[-52,45],[-20,41],[28,82],[41,63],[6,74],[6,16],[70,19],[46,37],[-47,4],[-29,-6],[-52,-26],[-57,51],[-29,47],[-10,40],[10,34],[2,34],[5,47],[5,20],[12,26],[25,17],[22,53],[9,38],[44,111],[16,48],[31,67],[61,105],[-20,-6],[-10,-9],[-9,1],[-9,11],[-9,24],[-8,35],[-5,-16],[-1,-66],[-6,-57],[-11,-39],[-30,-80],[-18,-31],[-12,29],[10,50],[17,40],[3,54],[-16,65],[-10,53],[-4,40],[-1,36],[3,33],[7,35],[11,39],[-1,4]],[[13882,84036],[3,36],[-3,37],[-9,29],[-11,26],[-33,-16],[-55,23],[-18,62],[-48,20],[-25,44],[-53,22],[-42,15],[-32,25],[-38,30],[-38,32],[-29,25],[-21,-2],[-48,-4],[-2,55],[-15,33],[5,29],[-26,15],[-40,22],[12,56],[8,42],[-34,12],[-51,18],[17,38],[13,31],[-20,45],[-39,75],[-30,54],[-39,83],[-34,74],[-28,60],[-24,41],[-33,74],[-43,84],[-41,66],[6,42],[-40,54],[-36,54],[-41,62],[-40,30],[-29,22],[-41,31],[-22,28],[-9,24],[-9,17],[-9,23],[-4,27],[-9,17],[-50,40],[-15,26],[-35,29],[-29,12],[-11,10],[-35,88],[6,31],[4,32],[-4,16],[-59,67],[-29,28],[-30,29],[-63,-37],[-65,-39],[-45,-14],[-62,-19],[20,-41],[-8,-31],[-20,-14],[-32,2],[-1,-103],[-31,-74],[-65,-1],[-35,-25],[-52,-38],[-42,-30],[-44,-49],[-23,7],[10,44],[-17,74],[-13,61],[-29,32],[-48,53],[-37,40],[-52,57],[-36,40],[-37,41],[-50,55],[-20,71],[-46,26],[-48,27],[-40,52],[14,51],[16,62],[0,37],[-43,-3],[-65,-3],[-58,-3],[-43,-44],[-40,-40],[-62,32],[-71,35],[-20,-46],[-66,23],[-66,24],[0,168],[0,168],[0,169],[0,168],[0,168],[0,169],[0,168],[0,168],[0,169],[0,168],[0,168],[0,169],[0,168],[0,168],[0,169],[0,168],[0,168],[0,168],[0,169],[0,168],[0,168],[0,169],[0,168],[0,168],[0,169],[0,168],[0,168],[0,169],[0,168],[0,168],[0,169],[0,168]],[[10833,91964],[39,-9],[126,-19],[119,11],[221,-61],[137,-114],[111,-57],[45,-38],[72,-34],[169,-75],[53,-7],[98,-36],[61,5],[104,-9],[71,-28],[140,-79],[29,-7],[8,6],[-49,78],[-8,7],[-56,29],[-67,14],[-5,6],[-12,27],[4,11],[14,5],[50,-1],[29,5],[4,11],[-21,2],[-25,11],[-30,18],[-17,17],[61,115],[21,-11],[32,26],[58,-17],[10,10],[7,58],[9,14],[16,11],[80,10],[99,-10],[11,5],[-10,39],[-1,16],[6,35],[6,18],[12,10],[46,-8],[15,-17],[15,-30],[16,-17],[49,-17],[6,-11],[-19,-45],[-19,-24],[-41,-62],[-3,-16],[63,28],[71,38],[60,22],[51,4],[36,12],[22,21],[16,22],[31,70],[21,12],[87,-4],[21,2],[13,7],[-2,8],[-19,11],[-25,3],[0,5],[9,12],[14,6],[42,8],[29,-25],[19,-2],[63,28],[98,74],[39,21],[34,3],[29,-13],[22,3],[29,42],[12,23],[17,19],[73,43],[46,10],[29,-8],[33,-18],[28,-7],[37,5],[27,-2],[13,8],[47,50],[15,0],[14,-14],[24,-36],[0,-18],[-31,-44],[-225,-126],[-69,-54],[-34,-20],[-36,-11],[-69,-9],[-27,-11],[-46,-10],[-109,-17],[-21,-9],[-14,-10],[-39,-66],[-18,-22],[-38,-33],[-41,-20],[-58,-7],[-36,-31],[-42,-60],[-33,-42],[-39,-36],[-42,-46],[-11,-25],[13,-32],[7,-10],[42,-18],[16,4],[-15,17],[-35,25],[-5,9],[9,7],[166,-19],[36,19],[12,16],[-2,9],[-45,3],[-10,15],[-7,29],[-2,23],[4,17],[10,22],[49,35],[52,15],[40,20],[22,19],[60,32],[23,27],[13,20],[2,10],[-11,7],[9,18],[43,16],[20,1],[61,-15],[11,-12],[-6,-31],[8,2],[24,39],[13,13],[14,3],[13,-5],[14,-13],[8,-38],[1,-63],[3,-25],[16,43],[11,20],[59,93],[40,51],[46,50],[65,37],[152,61],[85,17],[43,15],[21,13],[14,17],[24,19],[4,-2],[-9,-39],[-6,-12],[-56,-24],[-5,-19],[6,-29],[9,-19],[13,-9],[23,6],[33,23],[41,34],[89,86],[8,16],[22,69],[51,31],[92,35],[22,22],[-80,19],[-17,13],[-3,8],[15,19],[-36,20],[-14,12],[1,36],[11,25],[24,24],[14,5],[36,-15],[30,-18],[104,-85],[42,-42],[25,-33],[58,-102],[26,-59],[21,-61],[21,-44],[20,-27],[100,-107],[52,-45],[44,-28],[49,-22],[57,-16],[38,-2],[60,46],[1,29],[-26,50],[-27,35],[4,21],[35,40],[-3,14],[8,42],[24,-8],[10,1],[13,15],[17,29],[22,24],[27,19],[7,12],[-26,9],[-16,0],[-12,4],[-8,8],[11,9],[57,22],[11,22],[19,14],[23,5],[15,-6],[16,-17],[1,-28],[-7,-46],[-2,-37],[18,-87],[16,-19],[63,-25],[-4,-22],[-72,-91],[-16,-23],[-7,-17],[2,-14],[13,-12],[24,-9],[63,-3],[18,8],[122,3],[22,6],[19,18],[28,44],[31,14],[10,12],[19,52],[10,61],[9,26],[14,16],[19,5],[48,-6],[22,5],[88,-5],[88,4],[92,-11],[58,-12],[54,-20],[104,-46],[41,-26],[145,-113],[43,-23],[79,-22],[274,-49],[34,-13],[72,-51],[50,-30],[59,-29],[73,-25],[144,-37],[24,-13],[26,-3],[30,5],[132,-22],[35,1],[25,-4],[31,-15],[45,-6],[-2,11],[-51,59],[2,9],[21,1],[64,-10],[15,17],[21,-1],[49,-8],[53,-18],[56,-28],[68,-24],[104,-60],[57,-50],[55,-62],[29,-43],[6,-24],[11,-12],[17,0],[7,-9],[-16,-53],[-9,-14],[-12,-9],[-49,-11],[-136,13],[-25,-43],[-76,-37],[-13,-16],[-4,-11],[6,-38],[-10,-12],[-62,-43],[-2,-12],[40,-18],[43,-30],[34,-7],[43,4],[54,-11],[65,-25],[45,-12],[25,2],[35,-4],[44,-12],[59,-4],[129,1],[39,-8],[54,-4],[105,1],[19,1],[33,21],[22,6],[38,1],[108,14],[38,0],[34,11],[45,23],[27,4],[10,-14],[19,-6],[27,2],[52,23],[120,71],[43,0],[32,22],[8,0],[8,-9],[30,-52],[9,-8],[20,-4],[20,-27],[20,-39],[16,-11],[113,-2],[39,-11],[12,-11],[13,-31],[7,-60],[5,-22],[16,-33],[11,-9],[10,9],[28,84],[10,13],[18,-4],[6,-5],[28,-62],[40,-46],[100,-84],[16,-31],[6,-23],[-6,-21],[-17,-18],[-27,-15],[-37,-11],[-34,4],[-32,19],[-10,1],[11,-17],[66,-70],[17,-28],[16,-18],[14,-10],[13,-15],[12,-21],[55,-56],[16,-27],[62,-84],[30,-33],[23,-19],[8,-1],[-5,15],[-79,111],[-41,70],[-5,17],[-3,26],[-2,85],[6,13],[28,11],[35,-39],[13,-5],[9,2],[5,10],[20,-9],[36,-29],[12,0],[-27,54],[-19,27],[-7,19],[18,28],[-10,14],[-45,41],[-24,42],[-21,65],[-2,25],[3,26],[-3,22],[-29,43],[-31,30],[-24,35],[-5,19],[3,50],[19,21],[36,29],[9,30],[-16,31],[-3,14],[10,-2],[70,15],[18,-5],[26,6],[35,19],[28,9],[36,-2],[20,5],[24,8],[13,9],[22,36],[12,5],[37,-3],[21,-8],[9,3],[-1,50],[7,18],[37,37],[39,4],[25,10],[30,20],[21,19],[21,29],[9,38],[-7,11],[-44,15],[-26,-8],[-59,-27],[-61,-34],[-24,-33],[-6,-41],[-12,-18],[-47,17],[-21,0],[-25,-7],[-27,-16],[-29,-25],[-42,-4],[-56,15],[-33,5],[-34,-26],[2,-20],[15,-28],[-15,-17],[-82,-6],[-21,4],[-44,-12],[-17,3],[-12,13],[-89,58],[-9,11],[22,47],[82,126],[9,8],[152,22],[91,23],[169,69],[32,6],[108,46],[45,12],[41,-8],[60,-24],[32,-21],[22,-26],[18,-37],[23,-81],[8,-69],[14,-26],[51,-48],[26,-18],[16,-6],[14,11],[9,2],[7,-4],[7,-31],[9,-3],[30,4],[32,-12],[5,-10],[-7,-37],[9,-16],[40,-34],[37,-12],[44,-6],[81,6],[68,16],[51,26],[42,-29],[84,-71],[50,-51],[41,-23],[84,-29],[19,-15],[31,-2],[43,12],[48,-5],[54,-21],[37,-9],[127,40],[20,2],[47,19],[31,6],[36,0],[27,5],[17,13],[68,-1],[122,-14],[84,-17],[49,-23],[41,-12],[32,-3],[31,4],[30,11],[32,20],[68,11],[11,5],[-1,11],[-14,17],[-39,32],[-27,31],[-5,20],[1,24],[8,14],[16,4],[26,-15],[34,-34],[98,-126],[24,-17],[13,-17],[90,-45],[42,-9],[50,29],[22,17],[11,17],[0,17],[4,24],[-5,14],[-13,20],[-36,26],[-59,34],[-53,10],[-48,-14],[-55,-29],[-23,12],[-68,81],[-17,31],[0,8],[31,-10],[2,10],[-19,40],[-12,13],[-39,62],[-5,18],[24,5],[11,7],[15,-1],[70,-37],[35,17],[83,23],[-33,36],[-7,35],[3,8],[27,5],[53,-29],[25,-4],[19,11],[19,1],[21,-10],[19,-15],[37,-43],[17,-26],[20,-39],[7,-6],[97,-3],[54,35],[-1,-12],[-12,-27],[-68,-105],[1,-13],[36,6],[17,8],[10,13],[9,29],[6,9],[101,49],[29,8],[-18,-53],[-37,-188],[-8,-65],[-8,-23],[-40,-72],[1,-25],[43,-61],[8,-17],[4,-50],[8,-9],[36,-1],[37,16],[44,11],[7,-11],[-24,-60],[1,-6],[42,16],[19,2],[8,-3],[31,-31],[3,-23],[0,-35],[-3,-24],[-11,-14],[-13,-6],[-16,-4],[-14,2],[-44,-5],[-26,6],[-25,19],[-18,5],[-21,-15],[-34,3],[-37,41],[-15,-4],[-5,-6],[0,-9],[17,-27],[132,-143],[20,-29],[4,-43],[3,0],[12,43],[-8,20],[-67,83],[-9,31],[3,8],[18,9],[96,-21],[38,4],[25,15],[13,18],[9,99],[17,63],[-10,57],[-26,90],[-21,54],[-47,53],[-5,20],[53,163],[9,14],[12,6],[42,2],[30,14],[47,-19],[26,-5],[33,17],[72,69],[28,21],[36,40],[43,59],[48,43],[76,40],[47,32],[10,12],[-44,2],[-10,6],[-9,30],[4,57],[-1,31],[-5,28],[-9,25],[-14,23],[-13,13],[-11,4],[-8,-2],[-4,-8],[-12,-54],[-15,-39],[-20,-21],[-43,-14],[-72,-10],[-30,19],[-4,16],[10,62],[25,27],[66,53],[42,42],[1,7],[-39,1],[-9,8],[-9,52],[3,20],[6,22],[27,16],[84,20],[65,23],[2,-8],[-52,-70],[-5,-16],[20,-16],[50,41],[32,34],[6,11],[-30,4],[-1,14],[5,26],[-2,17],[-33,22],[-40,-12],[-34,-23],[-28,-7],[-41,0],[-30,5],[-18,11],[-23,25],[-26,38],[-33,38],[-12,4],[-10,-4],[-22,-37],[-9,-4],[-130,52],[-56,28],[-26,22],[-34,13],[-39,4],[-32,11],[-24,16],[-19,23],[-15,31],[-27,38],[-62,77],[-16,49],[-2,19],[4,49],[58,82],[10,24],[20,17],[29,11],[21,4],[47,-11],[-28,26],[-3,13],[29,45],[-6,2],[-78,-34],[-20,2],[-28,21],[-52,75],[-1,47],[17,65],[5,38],[-15,33],[6,10],[16,9],[7,10],[-7,36],[11,20],[38,38],[36,33],[22,10],[19,-2],[19,-10],[21,-19],[34,-19],[26,-5],[19,10],[33,71],[11,18],[-11,8],[-63,0],[-28,5],[-16,7],[-11,27],[9,15],[62,50],[29,53],[86,73],[87,34],[43,11],[34,3],[15,-5],[18,-36],[4,-39],[47,-48],[38,-4],[24,7],[76,-2],[18,-14],[-1,-15],[-9,-24],[6,-21],[51,-40],[47,-28],[42,-34],[63,-72],[13,-21],[10,-22],[16,-80],[2,-31],[-6,-88],[-5,-17],[-16,-20],[5,-8],[50,-23],[39,-46],[21,-15],[49,-24],[9,-9],[12,-16],[28,-66],[46,-59],[3,-13],[-10,-28],[7,-9],[18,-10],[16,5],[14,21],[15,6],[17,-9],[12,-16],[17,-38],[25,-31],[-2,-10],[-12,-8],[-68,-8],[-37,6],[-35,15],[-25,16],[-22,24],[-9,-2],[-12,-20],[-25,-29],[-16,-27],[18,-12],[89,1],[19,-8],[23,-19],[-26,-31],[-60,-53],[-129,-103],[-38,-26],[9,-8],[14,-2],[45,5],[41,14],[51,-6],[22,-12],[-8,-11],[14,-17],[83,-42],[52,8],[53,40],[41,20],[51,-2],[14,-5],[-5,-10],[-38,-22],[-34,-25],[-3,-7],[42,10],[94,-16],[45,-4],[34,4],[31,-6],[29,-17],[9,-11],[-27,-6],[-25,0],[-22,-11],[-18,-20],[-13,-26],[-8,-33],[-19,-13],[-31,6],[-13,9],[7,13],[-9,2],[-25,-10],[-20,0],[-5,-9],[137,-104],[44,-92],[30,-37],[3,-10],[-20,-26],[-1,-19],[9,-56],[-4,-45],[-14,-78],[13,-25],[29,-22],[18,-27],[12,-10],[9,-22],[10,-14],[12,-6],[8,8],[5,20],[11,19],[31,34],[30,54],[5,17],[-5,42],[4,18],[28,64],[9,44],[8,69],[15,48],[32,40],[56,82],[20,16],[22,8],[40,-2],[28,-26],[39,-49],[49,-44],[90,-60],[25,-23],[51,-59],[21,-59],[15,-84],[13,-50],[10,-17],[5,-25],[-1,-34],[-4,-26],[-7,-19],[-11,-11],[-27,-4],[-34,6],[-9,8],[-18,40],[-7,2],[-31,-29],[-4,-16],[12,-54],[-2,-102],[3,-23],[33,-106],[55,-81],[138,-155],[8,-18],[15,-64],[7,-13],[9,-8],[11,-2],[15,6],[51,48],[44,51],[31,27],[18,2],[18,9],[21,17],[13,18],[7,19],[9,77],[8,37],[21,50],[8,14],[107,127],[9,16],[45,147],[17,67],[2,41],[-6,36],[3,30],[12,24],[13,16],[22,17],[13,24],[7,2],[19,0],[24,-16],[17,-3],[113,19],[0,9],[-66,31],[1,16],[5,21],[21,24],[26,7],[6,15],[0,19],[9,31],[-8,11],[-62,42],[-36,-2],[-9,5],[-31,35],[-11,50],[-1,20],[4,33],[4,9],[-2,15],[-8,20],[0,19],[6,16],[-4,19],[-14,22],[-6,18],[15,56],[1,17],[-15,24],[-10,9],[8,6],[25,2],[31,-7],[36,-18],[43,0],[52,17],[52,9],[91,-4],[21,-5],[90,-52],[70,-26],[32,3],[156,-11],[68,6],[35,-3],[68,-28],[-4,-24],[-30,-39],[-38,-8],[-34,-14],[32,-21],[92,-28],[22,-44],[6,-21],[-11,-18],[6,-10],[21,0],[55,16],[61,-10],[89,-35],[10,-7],[15,-27],[-2,-11],[-78,-67],[-41,-27],[-54,-27],[-1,-15],[75,-3],[58,-7],[27,-9],[14,-13],[19,-27],[3,-22],[-2,-29],[-6,-20],[-69,-59],[-31,-18],[-53,-21],[-23,-17],[-26,3],[-28,20],[-28,5],[-52,-17],[-29,1],[-13,-6],[-2,-13],[25,-37],[14,-14],[6,-11],[-11,-18],[3,-6],[8,-7],[47,-80],[10,-7],[10,4],[20,23],[13,9],[5,-1],[0,-12],[-22,-70],[-2,-19],[0,-17],[11,-35],[23,-38],[30,-35],[45,-46],[60,-49],[22,-24],[33,-56],[7,-22],[-9,-59],[-24,-97],[-15,-55],[-7,-14],[-45,-39],[-26,-9],[-42,1],[-14,-8],[-22,-31],[-30,-55],[-24,-35],[-17,-14],[-32,-17],[-50,-51],[-24,-20],[-86,-21],[-69,-68],[-28,-23],[-30,-12],[-32,-2],[-19,11],[-10,42],[-7,14],[-24,29],[-50,83],[-22,29],[-14,6],[-30,-5],[-14,3],[-33,26],[-11,17],[1,7],[25,9],[-11,14],[-43,37],[-18,20],[-2,6],[-43,26],[-43,7],[-53,-42],[-21,-29],[1,-9],[26,-11],[11,6],[22,26],[11,8],[33,-4],[28,-18],[10,-16],[4,-11],[75,-83],[26,-17],[12,-20],[8,-33],[16,-37],[36,-61],[39,-75],[8,-30],[-20,-14],[-10,-1],[-30,11],[-78,35],[-9,-1],[-20,-18],[-17,-42],[-5,-4],[-42,17],[-78,36],[-52,31],[-27,26],[-32,41],[-37,56],[-45,17],[-52,-20],[-76,-7],[-158,6],[-21,-5],[-8,-7],[14,-30],[-4,-9],[-10,-6],[-3,-9],[18,-32],[27,-23],[79,-30],[52,-25],[32,-22],[10,-19],[1,-20],[-15,-41],[-8,-15],[-183,-203],[-70,-82],[-35,-50],[-32,-33],[-27,-17],[-45,-9],[-62,-2],[-81,8],[-42,26],[-76,70],[-54,41],[-23,14],[-20,39],[-18,7],[-39,7],[-39,21],[-92,70],[-48,28],[-44,15],[-39,3],[-15,-4],[27,-36],[-12,-2],[-31,8],[-32,0],[-55,26],[-55,-4],[-39,5],[-48,14],[-51,7],[-82,0],[-29,-3],[-5,-7],[40,-31],[68,-37],[-9,32],[2,8],[23,11],[107,-19],[122,-42],[31,-4],[34,-15],[38,-25],[52,-51],[99,-116],[32,-29],[43,-27],[215,-40],[75,0],[149,-11],[79,-21],[22,-15],[7,-51],[-7,-26],[-43,-79],[-27,-58],[-168,-245],[-22,-57],[-9,-34],[-30,-34],[-76,-55],[-76,-46],[-46,-10],[-41,11],[-26,14],[-39,45],[-3,-4],[29,-72],[-7,-7],[-23,9],[-53,32],[-17,-6],[-10,-9],[-14,0],[-18,10],[-32,26],[-9,13],[-7,40],[-6,7],[-64,-23],[-10,-8],[26,-15],[9,-12],[25,-58],[2,-13],[-19,-8],[-61,23],[-7,-2],[30,-59],[12,-27],[1,-15],[-39,-66],[-25,-27],[-35,-10],[-21,6],[-24,17],[-18,-2],[-11,-22],[-20,-15],[-29,-9],[-37,4],[-45,17],[-120,62],[-37,9],[-70,9],[-9,9],[1,8],[10,8],[-3,7],[-15,6],[-15,-6],[-16,-16],[-28,-5],[-40,7],[-59,24],[-116,62],[-128,53],[-74,68],[28,-62],[-3,-20],[-14,-19],[-2,-18],[29,-44],[40,-15],[40,1],[1,7],[-16,11],[-15,16],[-7,24],[7,4],[36,-12],[23,-15],[177,-81],[53,-15],[40,-15],[11,-10],[-14,-20],[-71,-50],[-1,-8],[49,4],[59,45],[33,20],[32,13],[43,-22],[55,-56],[44,-32],[63,-18],[37,-19],[62,-53],[10,-27],[6,-111],[-2,-27],[-8,-27],[-14,-26],[-26,-15],[-38,-3],[-30,-11],[-65,-59],[-28,-9],[-117,18],[-45,16],[-21,-1],[-12,-13],[-12,-6],[-46,-5],[-8,-11],[3,-16],[9,-22],[11,-13],[18,-16],[26,-11],[53,-12],[6,-30],[-2,-10],[-18,-20],[-20,2],[-35,24],[-18,1],[-15,-13],[-21,-4],[-27,4],[-15,-10],[-3,-25],[-9,-19],[-31,-30],[-17,-22],[0,-18],[18,-12],[21,-28],[23,-45],[5,-19],[-15,5],[-19,18],[-24,29],[-36,27],[-80,35],[-15,-1],[8,-9],[53,-36],[20,-24],[3,-17],[-45,-38],[-1,-13],[12,-11],[3,-9],[-16,-18],[-26,-16],[-51,-2],[-4,-9],[19,-19],[6,-12],[-16,-16],[-11,-2],[-58,7],[15,-40],[9,-14],[18,-20],[32,-19],[1,-7],[-11,-16],[-19,-20],[-81,-59],[-56,-70],[-8,-22],[14,-45],[1,-12],[-15,-21],[-33,6],[-7,-8],[8,-22],[2,-31],[-5,-42],[-24,-66],[-43,-88],[-33,-81],[-23,-73],[-16,-36],[-31,-2],[-23,-23],[16,-12],[9,-14],[7,-21],[-7,-67],[-19,-111],[-13,-89],[3,-274],[-3,-121],[-9,-67],[-14,-37],[-24,-11],[30,-10],[20,-17],[9,-26],[8,-42],[12,-19],[13,3],[13,-4],[11,-12],[33,-59],[37,-17],[2,-33],[-15,-184],[0,-24],[17,46],[18,144],[23,63],[19,13],[77,8],[81,-16],[31,-2],[27,8],[28,-17],[6,-18],[8,-75],[8,-43],[48,-153],[23,-86],[29,-133],[10,-38],[59,-178],[11,-49],[5,-37],[-2,-26],[-11,-40],[-19,-54],[-18,-42],[-17,-28],[-18,-22],[-18,-14],[1,-3],[21,6],[20,15],[39,37],[15,8],[43,5],[1,-13],[-20,-28],[4,-2],[30,22],[64,31],[252,103],[59,9],[85,-19],[69,-43],[75,-56],[79,-41],[124,-38],[37,-18],[73,-19],[34,-21],[40,-52],[65,-67],[49,-42],[54,-39],[55,-73],[88,-164],[22,-20],[54,-27],[102,-35],[151,-81],[66,-32],[43,-13],[43,-22],[43,-32],[32,-35],[23,-38],[19,-25],[35,-28],[18,-19],[2,-30],[-42,-116],[-1,-10],[42,84],[24,24],[19,11],[39,-1],[59,-14],[53,0],[44,13],[39,6],[31,-1],[23,4],[14,10],[17,0],[68,-29],[27,-2],[99,-27],[63,10],[11,-5],[22,-36],[19,-3],[31,6],[31,-10],[51,-46],[23,-40],[23,-82],[2,-25],[-42,-190],[-13,-73],[-2,-65],[8,-36],[37,-62],[6,-17],[22,-91],[6,-39],[-3,-45],[-11,-75],[3,-56],[9,-85],[-3,-58],[-17,-31],[-11,-29],[-9,-54],[0,-21],[9,-40],[16,-23],[26,-25],[24,-38],[45,-92],[33,-51],[39,-75],[8,-38],[-11,-25],[-14,-17],[-32,-23],[-14,-17],[3,-4],[47,12],[27,-1],[23,-19],[19,-36],[32,-30],[43,-25],[44,-43],[74,-100],[13,-23],[19,-52],[26,-82],[13,-54],[1,-25],[-14,-25],[-49,-46],[-50,-81],[16,4],[32,34],[56,67],[30,13],[29,-7],[45,-20],[39,-27],[35,-36],[51,-95],[55,-76],[30,-65],[-9,41],[-20,48],[-51,76],[-22,39],[-5,19],[-2,21],[4,37],[10,55],[13,39],[16,22],[10,24],[6,25],[8,19],[44,33],[12,-3],[9,-41],[10,-8],[21,-6],[17,-15],[14,-21],[10,-23],[6,-22],[13,-73],[9,-34],[2,41],[11,65],[8,26],[27,39],[-2,17],[-11,22],[-56,97],[-1,24],[15,14],[11,26],[5,40],[12,28],[35,40],[30,62],[16,42],[12,23],[13,5],[-18,17],[-4,11],[-1,51],[-8,54],[-12,25],[-34,53],[-6,16],[-6,60],[4,30],[9,26],[-5,24],[-32,45],[-12,39],[-14,93],[-13,118],[-14,86],[-16,56],[-3,35],[9,14],[11,44],[10,10],[16,-2],[1,5],[-25,23],[-12,30],[1,11],[21,29],[-3,12],[-16,16],[-49,28],[18,10],[11,23],[-2,7],[-20,10],[-22,17],[-17,27],[-20,42],[-13,34],[-12,56],[-22,63],[-9,16],[-11,10],[-12,5],[0,10],[13,14],[210,106],[18,16],[103,59],[48,33],[48,48],[66,49],[32,31],[21,31],[105,122],[44,62],[26,53],[37,64],[49,75],[31,63],[13,54],[16,91],[4,82],[3,119],[-1,106],[-14,167],[-7,53],[-15,62],[-37,125],[-6,35],[-23,57],[-74,151],[-92,101],[-18,26],[-36,30],[-56,34],[-36,28],[-94,104],[-31,13],[-11,27],[-3,19],[4,50],[5,34],[7,26],[7,16],[52,77],[29,61],[20,34],[22,26],[41,34],[23,44],[-6,17],[-18,19],[-4,19],[31,47],[4,13],[-4,45],[6,10],[38,3],[54,-64],[13,5],[-17,18],[-21,43],[3,18],[40,47],[1,21],[-12,29],[-1,24],[23,55],[-6,12],[-65,11],[-11,16],[4,7],[31,19],[2,7],[-54,125],[-9,37],[23,46],[26,20],[-3,12],[-35,2],[-21,7],[-21,35],[8,23],[8,10],[20,54],[20,11],[-4,9],[-74,-23],[-35,19],[-35,-5],[-16,6],[6,19],[62,86],[29,47],[18,43],[10,28],[1,14],[-6,93],[3,26],[25,24],[37,44],[-51,41],[-32,39],[-21,20],[-16,19],[-21,40],[-15,53],[-17,106],[-3,58],[4,42],[7,21],[11,22],[47,41],[82,60],[64,24],[47,-13],[90,-15],[73,-34],[222,-86],[40,-38],[-37,-33],[5,-8],[84,62],[22,12],[19,3],[63,-24],[25,-4],[32,-20],[76,-66],[6,6],[-21,34],[12,15],[60,35],[62,29],[44,28],[47,37],[32,20],[16,2],[21,-11],[56,-49],[36,-25],[29,-26],[40,-47],[16,-10],[31,-32],[41,3],[13,-3],[4,-7],[7,-21],[4,-14],[0,-14],[-9,-42],[-30,-66],[13,-1],[18,14],[24,25],[19,9],[40,-20],[38,-32],[13,-17],[15,-28],[12,-15],[12,-27],[-1,-9],[-11,-14],[-46,-22],[9,-9],[53,14],[17,14],[11,24],[16,6],[63,-41],[9,-14],[-4,-11],[-10,-13],[-27,-14],[-24,-35],[-4,-15],[17,-11],[41,-4],[0,-9],[-24,-15],[-3,-20],[53,-71],[36,-32],[21,-5],[48,-2],[39,-12],[86,-40],[51,-8],[44,13],[29,2],[25,-16],[8,-11],[4,-23],[0,-34],[14,-24],[28,-14],[23,2],[31,27],[25,5],[9,20],[7,37],[8,20],[18,6],[15,-11],[9,-17],[16,-51],[4,-23],[-1,-20],[-8,-19],[-16,-20],[-23,-21],[-19,-31],[-22,-70],[-9,-46],[-2,-28],[1,-29],[4,-33],[9,-27],[21,-37],[1,-13],[2,-30],[-2,-14],[-12,-27],[-34,-26],[-46,-7],[-152,-1],[-41,6],[10,-24],[43,-8],[38,0],[145,-15],[20,-15],[17,-28],[12,-28],[12,-57],[2,-27],[-6,-31],[-15,-33],[-10,-44],[-5,-55],[8,-29],[78,-3],[15,-20],[-1,-15],[-28,-56],[-3,-15],[13,-38],[-2,-11],[-7,-11],[-8,-28],[-7,-46],[-9,-30],[-21,-22],[-11,-5],[-8,6],[-21,62],[-9,9],[-8,-6],[-4,-9],[0,-14],[-4,-14],[-7,-14],[-31,-23],[-50,-16],[1,-16],[34,-9],[43,-28],[25,-4],[38,22],[75,71],[31,19],[27,7],[30,1],[34,-5],[68,9],[17,-7],[20,-15],[25,-25],[17,-23],[9,-23],[15,-85],[21,-23],[4,-16],[2,-25],[-1,-49],[-23,-100],[-11,-36],[-31,-50],[-36,-23],[-64,-21],[-33,-18],[-25,-25],[-1,-13],[72,42],[79,20],[23,24],[17,22],[17,50],[32,130],[18,40],[25,7],[11,-14],[26,-76],[0,-19],[-7,-16],[-42,-74],[15,7],[43,70],[9,21],[5,32],[14,23],[5,-11],[13,-82],[0,-60],[3,-19],[-5,-56],[5,-10],[13,49],[4,37],[6,26],[7,16],[52,50],[61,40],[40,36],[33,17],[50,17],[31,33],[14,50],[12,35],[10,20],[33,34],[17,2],[17,-12],[20,-26],[21,-40],[13,-30],[4,-23],[4,-78],[4,0],[19,60],[3,21],[-2,23],[-6,22],[-20,49],[-7,31],[1,18],[22,11],[31,4],[5,8],[-23,21],[-1,11],[22,36],[13,1],[26,-5],[-5,18],[0,12],[7,5],[42,-11],[5,14],[36,1],[4,12],[-32,18],[-30,12],[-10,9],[-7,15],[-9,35],[2,9],[9,0],[14,-9],[9,18],[9,43],[9,18],[28,-21],[1,9],[-23,68],[4,13],[35,5],[21,-9],[55,-50],[11,6],[-9,14],[-28,29],[-26,19],[-23,9],[-17,16],[-19,45],[-3,18],[2,24],[13,50],[7,11],[14,8],[19,5],[21,-5],[44,-33],[7,11],[-23,17],[-13,17],[-6,21],[2,24],[19,49],[9,40],[39,109],[12,20],[12,12],[8,13],[31,3],[57,-39],[18,-23],[4,-32],[-30,-45],[-51,-33],[-16,-14],[10,-9],[49,27],[42,12],[34,0],[28,-53],[4,-73],[-16,-60],[21,30],[26,17],[22,-40],[2,-32],[12,-31],[24,-40],[25,-36],[-28,-37],[-33,-23],[7,-16],[46,-18],[6,-18],[-5,-24],[7,1],[32,36],[27,-5],[34,-79],[-25,-46],[-39,-21],[-30,-9],[-43,2],[-17,-7],[8,-15],[41,-1],[63,12],[47,19],[20,1],[22,-8],[7,-6],[-23,-13],[-1,-5],[8,-13],[18,-44],[-2,-10],[-17,-25],[27,-5],[38,12],[11,-14],[23,-52],[15,-53],[-64,-73],[-32,-15],[-48,-39],[-13,-31],[-28,-39],[18,0],[49,64],[24,15],[18,-4],[7,-11],[-3,-18],[16,3],[66,37],[28,7],[36,3],[3,-13],[-22,-89],[-38,-69],[-70,-42],[-24,-25],[-31,-40],[12,-7],[66,52],[45,21],[64,17],[28,-3],[51,-104],[28,-10],[24,5],[44,-30],[16,-29],[-4,-21],[-15,-13],[-7,-19],[18,-58],[-11,-33],[-32,-29],[-23,-14],[-24,-5],[-24,-25],[-10,-4],[-33,6],[11,-15],[16,-8],[26,-4],[30,8],[30,-1],[46,-19],[20,-23],[0,-6],[-10,-13],[-15,-42],[-10,-16],[9,-11],[23,-18],[17,-6],[23,6],[25,-8],[82,-99],[-4,-52],[-12,-39],[5,-44],[0,-55],[-44,-15],[-148,25],[-84,39],[-5,12],[24,26],[-21,2],[-24,-10],[-11,-10],[29,-41],[77,-36],[35,-44],[38,-4],[11,-8],[21,-25],[-6,-9],[-39,-3],[-30,-30],[19,-17],[69,-16],[49,-4],[25,-17],[-20,-19],[-58,-22],[-2,-33],[43,-14],[38,8],[16,-3],[11,-80],[7,-17],[-41,-14],[-1,-16],[28,-13],[45,-10],[15,-15],[3,-24],[9,-12],[26,-3],[29,30],[17,25],[25,-9],[1,-31],[30,-36],[10,-6],[9,-51],[24,45],[17,-9],[20,-2],[-7,-44],[-11,-34],[15,-22],[12,-32],[33,-43],[-9,-21],[-38,-45],[-20,-72],[-5,-24],[-20,-41],[-26,-40],[16,4],[60,73],[36,25],[78,13],[19,20],[29,9],[18,-23],[1,-42],[24,-14],[24,14],[22,-12],[-13,-26],[-71,-108],[-21,-44],[-6,-31],[24,43],[90,97],[9,14],[20,42],[18,27],[48,-10],[25,-19],[11,-55],[19,-59],[30,-66],[78,-31],[28,-6],[49,23],[7,30],[38,10],[27,-4],[9,-59],[29,-31],[28,-26],[27,-14],[40,-6],[22,-28],[0,-12],[-22,-30],[-22,-45],[-38,-31],[-53,-1],[-72,-20],[-3,-17],[-16,-19],[-39,-20],[-21,-14],[-35,-72],[-20,-31],[-24,-6],[-34,3],[-22,-6],[-16,-14],[-10,-19],[-7,-7],[-45,-20],[-82,-55],[-44,-2],[-26,7],[-21,-5],[-14,-15],[-39,-27],[-12,-16],[-7,-19],[-5,-38],[-5,-14],[-7,-8],[-33,8],[-37,25],[7,-27],[58,-44],[17,-25],[-16,-21],[-37,-34],[-4,-18],[15,-10],[-6,-15],[-20,-16],[2,-7],[2,-6],[51,23],[45,50],[29,50],[14,14],[58,19],[34,22],[49,39],[54,58],[58,76],[74,59],[91,42],[66,22],[42,1],[2,7],[-37,14],[-32,2],[-39,-10],[-12,24],[2,10],[12,17],[33,15],[161,-21],[55,-17],[60,-137],[14,-44],[4,-32],[-6,-20],[-24,-24],[-69,-48],[-9,-12],[-1,-7],[30,-10],[9,-13],[15,-52],[31,34],[58,83],[48,38],[40,11],[47,5],[17,-1],[6,-27],[25,-54],[23,-14],[45,-7],[40,-67],[15,-46],[14,-27],[-1,-19],[2,-15],[11,-23],[5,-19],[-3,-45],[-23,-77],[17,-71],[-7,-31],[-4,-51],[14,-33],[5,-20],[-13,-11],[-88,-28],[-35,-1],[-9,-17],[27,-5],[48,1],[59,-17],[27,-19],[11,-27],[-3,-21],[-17,-16],[-33,3],[-32,15],[2,-14],[47,-35],[14,-17],[26,-22],[5,-30],[-6,-30],[-90,-120],[-73,-76],[-74,-67],[-119,-129],[-12,-6],[-21,-3],[-57,21],[-45,-5],[-85,-25],[-24,-15],[-47,-45],[-18,-6],[-51,-9],[-47,6],[-19,-7],[-23,-21],[-6,-12],[-7,-38],[-115,-168],[-31,-57],[-59,-61],[-65,-105],[-57,-43],[-19,-58],[-54,-36],[-100,-9],[-47,-10],[-55,16],[-42,-25],[-62,-8],[-30,6],[-121,-57],[-31,54],[-23,21],[-68,3],[-55,22],[-50,4],[-48,10],[-32,0],[-33,-6],[-52,2],[-29,-30],[-96,9],[-41,27],[-34,5],[-44,-5],[-43,-20],[-94,22],[-100,-19],[-87,13],[-24,13],[-138,-35],[-53,20],[-48,-54],[-32,11],[-35,-8],[-12,11],[-23,-8],[-15,-29],[-20,-3],[-33,-52],[-56,-41],[-82,-226],[-7,-87],[-31,-59],[-27,-8],[-22,-1],[-141,-44],[-63,-34],[18,-27],[-21,-21],[-33,-8],[-36,-25],[-24,-28],[-11,-39],[-72,-64],[-84,-147],[-40,-108],[-49,-78],[-34,-30],[-25,-5],[-25,10],[-41,36],[-30,4],[-76,51],[-177,52],[27,-19],[23,-32],[47,-8],[47,0],[99,-63],[48,-22],[30,-19],[25,-43],[-18,-84],[-19,-69],[-24,-53],[-85,-137],[-41,-46],[-72,-163],[-74,-77],[-40,-47],[-42,-74],[-99,-56],[-37,-15],[-34,8],[-41,-46],[-49,-28],[-15,-42],[-117,-114],[-45,-15],[-39,-30],[-11,-51],[-34,-32],[-10,-23],[-29,-72],[-53,-94],[-66,-15],[-24,-32],[-27,-53],[-39,-36],[-77,17],[18,-22],[69,-34],[7,-51],[-34,-12],[-72,-68],[-98,-117]],[[23116,93857],[-45,-6],[-41,40],[-2,38],[3,21],[5,18],[15,16],[43,18],[19,-13],[7,-17],[6,-6],[28,-14],[13,-16],[-2,-19],[-8,-28],[-10,-18],[-11,-8],[-20,-6]],[[18188,93659],[18,-7],[32,6],[47,19],[60,15],[74,13],[19,-15],[12,3],[22,24],[4,16],[-3,18],[1,40],[12,23],[44,50],[23,18],[37,9],[89,-6],[84,-28],[112,-28],[165,-71],[52,-30],[5,-26],[-29,-55],[-71,-79],[-57,-28],[-22,-18],[37,-12],[24,-20],[36,29],[27,33],[38,27],[13,3],[3,-6],[-7,-14],[-2,-14],[1,-13],[4,-8],[23,-4],[13,5],[50,38],[49,59],[75,38],[20,19],[65,16],[-1,12],[3,44],[-22,19],[-77,40],[-37,48],[8,37],[42,-5],[115,-4],[24,-5],[111,-62],[39,-39],[31,-19],[65,-28],[22,-23],[16,-9],[5,-10],[-5,-10],[-2,-23],[12,-8],[42,-9],[12,-9],[16,-30],[19,-50],[17,-55],[27,-103],[54,-137],[18,-86],[7,-16],[12,-11],[34,-16],[27,-22],[31,-7],[7,2],[8,19],[20,31],[94,59],[5,9],[-11,14],[-3,9],[1,7],[20,5],[-66,75],[-43,71],[-27,89],[-4,25],[-4,55],[-9,15],[-15,13],[-6,17],[2,21],[-3,18],[-17,37],[-67,261],[0,26],[9,19],[24,11],[38,2],[13,6],[-15,10],[-25,27],[-3,13],[17,26],[86,-11],[62,-24],[106,-55],[11,3],[12,28],[22,17],[34,-6],[96,-40],[112,-71],[74,-36],[53,-48],[35,-45],[23,-35],[1,-13],[-5,-14],[5,-19],[16,-22],[8,-20],[7,-43],[15,-56],[3,-28],[99,-250],[19,-45],[12,-20],[69,-97],[37,-70],[3,-48],[5,-13],[2,-22],[-2,-30],[-8,-25],[-14,-22],[-14,-30],[-22,-67],[-1,-16],[15,-23],[97,-79],[59,-95],[28,-16],[74,-59],[81,-34],[27,-15],[26,-21],[7,-1],[16,4],[4,6],[1,9],[-22,45],[-2,17],[11,3],[83,-76],[45,-31],[61,-32],[105,-74],[15,-6],[57,7],[15,-5],[10,-7],[4,-10],[2,-44],[16,-21],[90,9],[25,-2],[16,-7],[13,-14],[20,-47],[17,-92],[1,-33],[-8,-56],[-13,-20],[-17,-7],[-48,7],[-33,17],[-18,23],[-16,48],[-7,10],[-7,-10],[-16,-45],[-10,-19],[-13,-14],[-24,4],[-35,19],[-66,50],[-23,12],[-15,-2],[-31,-17],[-49,-31],[-20,-23],[8,-15],[6,-19],[3,-22],[-2,-17],[-6,-10],[-16,-13],[-34,-2],[-49,9],[-39,18],[-68,46],[-15,6],[-21,-10],[-8,-14],[13,-19],[34,-24],[42,-41],[11,-8],[11,0],[4,-7],[5,-22],[-2,-38],[-21,-76],[-2,-18],[9,4],[57,75],[29,21],[65,32],[27,24],[82,7],[30,-13],[18,-23],[1,-10],[-21,-27],[-4,-14],[-1,-17],[2,-15],[5,-13],[14,-13],[26,6],[8,-4],[14,-13],[9,-20],[0,-29],[-19,-62],[-34,-21],[-105,-37],[-36,-20],[-70,-14],[-26,-18],[-17,-5],[-74,2],[-85,-11],[-98,23],[-69,10],[-79,36],[-30,-9],[-31,-24],[-148,28],[-18,20],[6,13],[35,43],[2,9],[-1,8],[-68,7],[-75,23],[-75,11],[-57,-3],[-37,8],[-36,19],[-19,17],[-4,16],[0,17],[3,34],[-5,24],[-16,18],[-34,17],[-33,-2],[-28,-18],[-26,-35],[-50,-96],[-24,-16],[-65,-70],[-24,-17],[-117,-27],[-140,-11],[-52,-22],[-49,-40],[-60,-39],[-146,-48],[-135,-27],[-142,-12],[-105,-18],[-31,9],[-47,-3],[-51,-27],[-57,-5],[-219,-10],[-100,-17],[-55,-5],[-44,2],[-30,8],[-28,23],[-30,37],[-60,97],[-17,41],[6,70],[-4,40],[-20,88],[-4,7],[-105,33],[-70,10],[-104,2],[-128,-4],[-127,10],[-68,12],[-67,19],[-114,51],[-7,5],[-8,17],[-12,28],[-28,37],[-78,82],[-31,49],[-5,13],[-7,36],[-10,59],[-3,36],[9,22],[7,5],[162,43],[284,47],[261,32],[118,-3],[69,-15],[70,-7],[126,-3],[160,-22],[31,2],[72,15],[21,12],[113,-2],[22,8],[20,13],[-26,25],[-108,55],[-286,97],[-70,21],[-100,22],[-58,3],[-74,-12],[-28,0],[-72,-19],[-69,-12],[-131,-12],[-189,-8],[-26,2],[-39,15],[-28,4],[-185,-11],[-165,15],[-188,149],[-32,46],[7,18],[23,20],[93,58],[34,13],[139,31],[138,38],[110,35],[53,12],[52,2],[42,11],[-9,11],[-34,13],[0,18],[18,8],[69,10],[72,-11],[37,3],[10,13],[-10,9],[-69,21],[-331,-59],[-155,-5],[-107,-26],[-59,1],[-70,25],[-10,8],[-1,10],[22,34],[75,20],[38,57],[-41,1],[-134,-12],[-59,5],[-79,22],[-23,26],[-10,18],[-2,23],[3,63],[6,34],[5,8],[98,105],[62,22],[43,33],[1,13],[-10,14],[-40,34],[-17,17],[-9,17],[7,25],[23,36],[67,57],[162,114],[82,48],[79,26],[110,55],[284,91],[254,92],[93,-24],[27,-19],[12,-16],[10,-23],[9,-29],[12,-63],[1,-32],[-2,-33],[-6,-29],[-9,-27],[-19,-32],[-29,-38],[-60,-65],[-7,-19]],[[20753,93847],[-14,-3],[-26,14],[-39,29],[-63,60],[-75,59],[-12,36],[-19,26],[-96,63],[-62,26],[-48,13],[-7,17],[33,51],[37,41],[23,15],[70,13],[236,27],[54,1],[56,-13],[78,-56],[32,-6],[20,-13],[17,-21],[9,-21],[0,-44],[-8,-64],[-11,-25],[-47,-82],[-49,-46],[-10,-29],[-20,-23],[-35,-29],[-24,-16]],[[27906,94270],[47,-7],[300,14],[63,-11],[189,-64],[48,-21],[25,-28],[21,-45],[10,-10],[69,-26],[28,-32],[10,-17],[14,-38],[31,-22],[36,-12],[11,-11],[-5,-48],[15,-22],[33,-27],[13,-18],[-26,-22],[-61,-13],[-170,13],[-228,31],[-133,-9],[-67,-14],[-161,-49],[-51,-8],[-51,-1],[-89,40],[-32,22],[-11,16],[-21,49],[-17,58],[-9,48],[-10,37],[-31,12],[-90,14],[-30,20],[-14,17],[-13,27],[0,27],[7,25],[6,6],[11,1],[-25,29],[-9,33],[-1,46],[4,29],[7,13],[17,8],[39,5],[58,-1],[81,-33],[64,-4],[98,-27]],[[25947,92747],[11,-12],[64,16],[54,18],[84,45],[50,15],[152,0],[26,-9],[-11,-26],[-7,-8],[5,-11],[17,-16],[33,-17],[13,16],[9,37],[23,153],[9,46],[5,44],[-1,41],[-11,26],[-39,16],[-53,-3],[-28,4],[-33,8],[-25,13],[-16,17],[-31,52],[-24,28],[-60,52],[-28,17],[14,21],[55,23],[33,23],[39,65],[23,11],[84,-9],[114,-51],[72,-44],[19,-5],[0,8],[-18,21],[-82,54],[-38,40],[-17,29],[8,12],[46,13],[6,14],[-63,17],[-31,0],[-26,-12],[-28,-1],[-51,22],[-14,13],[-30,38],[-15,34],[-17,21],[-7,16],[-3,51],[2,30],[7,26],[12,22],[33,39],[19,12],[35,5],[76,-20],[203,-71],[-5,23],[-227,96],[-81,24],[-20,35],[122,133],[111,31],[56,38],[91,2],[85,-25],[1,7],[-38,46],[3,12],[48,27],[89,32],[108,26],[22,13],[28,9],[51,9],[127,3],[71,-3],[95,-20],[55,-35],[17,-21],[30,-69],[24,-95],[35,-40],[56,-21],[39,-24],[22,-26],[6,-32],[-10,-39],[7,-40],[25,-41],[20,-24],[42,-26],[1,-14],[-13,-16],[-28,-23],[-70,-69],[-90,-76],[-64,-66],[-3,-20],[133,104],[42,-4],[2,-15],[-28,-50],[-33,-45],[-33,-29],[6,-11],[63,-50],[-11,-9],[-31,5],[-12,-5],[-9,-9],[-6,-14],[0,-20],[5,-25],[-1,-18],[-6,-13],[7,-5],[18,2],[16,10],[27,34],[88,93],[57,34],[18,4],[52,-23],[13,1],[-58,72],[-5,18],[12,26],[7,9],[32,20],[26,10],[15,-4],[24,-36],[11,-25],[19,-11],[44,14],[28,30],[36,-20],[54,-48],[-5,-48],[0,-49],[3,-35],[65,-65],[44,-28],[9,-1],[-2,10],[-9,22],[-24,21],[-23,34],[-20,40],[12,95],[34,50],[32,-13],[43,-29],[34,-2],[53,3],[108,-58],[58,-1],[-5,23],[-44,12],[-64,31],[-101,38],[-46,44],[-8,20],[1,22],[6,20],[10,16],[20,17],[97,50],[69,22],[51,7],[87,-1],[100,-9],[55,-14],[62,-36],[79,-35],[28,-6],[33,0],[38,8],[36,-3],[114,-52],[30,-27],[18,-32],[14,-32],[8,-31],[-3,-24],[-95,-108],[-41,-18],[-28,-41],[-40,-77],[-35,-42],[-3,-8],[7,-2],[21,19],[36,53],[26,46],[47,38],[78,45],[68,22],[58,-2],[49,-6],[39,-11],[24,-10],[7,-7],[16,-34],[-1,-23],[-10,-26],[-19,-29],[-84,-33],[-47,-25],[-29,-10],[-87,-9],[4,-10],[65,-14],[71,4],[-1,-16],[-34,-44],[-11,-38],[9,-31],[-1,-26],[-26,-53],[-28,-48],[10,-7],[66,69],[18,76],[27,66],[31,37],[23,14],[74,5],[40,39],[35,12],[15,1],[29,-15],[-1,-15],[-43,-70],[-92,-112],[38,13],[25,27],[34,26],[38,40],[25,-36],[39,-27],[23,-61],[38,-29],[23,-23],[-3,39],[-33,77],[9,31],[25,16],[79,65],[55,-22],[34,-19],[17,5],[43,-3],[69,-10],[67,-19],[66,-25],[50,-31],[35,-34],[21,-24],[8,-14],[12,-34],[-9,-23],[-50,-53],[-27,-24],[-27,-11],[-73,11],[-23,-7],[-24,-16],[-76,-73],[-42,-32],[-41,-20],[-10,-10],[89,1],[24,21],[21,41],[39,42],[74,19],[103,-41],[52,2],[39,41],[44,28],[17,6],[9,-3],[33,-30],[10,-26],[0,-60],[-5,-18],[-29,-46],[-73,-68],[-47,-25],[-52,-14],[-57,-23],[-20,-19],[-20,-26],[-20,-18],[-25,-14],[33,-22],[12,1],[13,13],[33,50],[24,23],[14,4],[14,-2],[14,-10],[14,-18],[-1,-43],[-42,-171],[7,0],[26,47],[74,178],[18,36],[36,36],[80,54],[63,29],[70,24],[37,9],[43,-6],[28,-28],[37,-5],[46,7],[30,-4],[33,-11],[29,-20],[48,-24],[110,-44],[14,-10],[12,-16],[12,-25],[-1,-24],[-15,-23],[-18,-15],[-22,-5],[-23,-13],[-42,-34],[-13,-6],[-66,-14],[-61,-7],[-38,-14],[-73,-37],[-101,-68],[1,-16],[40,-8],[33,10],[45,47],[42,18],[66,15],[91,12],[39,-2],[7,-2],[5,-11],[3,-20],[-15,-26],[-17,-12],[-47,-58],[31,-15],[42,-7],[24,16],[22,36],[25,19],[27,4],[24,9],[21,15],[5,9],[-30,19],[-2,11],[12,28],[22,30],[23,19],[17,2],[57,-21],[39,-35],[98,-107],[12,-21],[34,-79],[7,-35],[-6,-25],[-8,-15],[-10,-5],[-22,-1],[-130,33],[-60,-4],[-26,-9],[-21,-14],[-16,-17],[-12,-21],[-23,-12],[-82,0],[-47,-12],[-80,-28],[-28,-16],[-7,-20],[49,4],[81,26],[75,8],[127,-59],[41,-9],[23,9],[28,2],[101,-4],[35,-7],[51,-22],[78,-49],[15,-14],[9,-15],[2,-16],[0,-39],[-8,-13],[-27,-9],[-112,10],[-35,9],[-42,-11],[-34,4],[-44,15],[-48,28],[-72,-26],[-58,17],[-59,-15],[-117,-62],[13,-11],[160,53],[31,-3],[51,-20],[80,-38],[23,-16],[0,-60],[-12,-41],[-25,-45],[-37,6],[-85,28],[-35,4],[-26,-4],[-34,-19],[-17,0],[-137,36],[-31,2],[-3,-4],[6,-7],[125,-56],[92,-6],[57,-10],[34,-17],[16,-13],[2,-37],[30,-38],[28,-15],[18,-1],[30,14],[30,2],[25,-9],[31,-21],[37,-6],[33,-13],[26,-2],[71,6],[31,-8],[8,-7],[-13,-12],[-66,-29],[-10,-28],[37,-36],[20,-28],[-1,-20],[-20,-47],[-5,-19],[6,-2],[48,38],[7,-4],[5,-53],[6,3],[16,43],[-7,58],[28,23],[88,18],[-15,-91],[-2,-47],[-39,-79],[-32,-25],[1,-6],[23,-10],[14,-1],[14,13],[33,60],[66,64],[12,1],[0,-23],[-9,-42],[31,-20],[29,19],[16,17],[37,-2],[17,-8],[5,-19],[-17,-79],[3,-19],[39,-52],[4,3],[-8,25],[-8,62],[8,28],[32,34],[65,50],[25,10],[15,-7],[24,-24],[-8,-14],[-26,-15],[-19,-27],[-13,-39],[14,-21],[53,-2],[54,32],[30,-16],[37,-42],[66,-67],[39,18],[47,-51],[-64,-40],[20,-86],[-82,4],[-46,-7],[-31,8],[-34,-3],[31,-20],[59,-9],[6,-25],[46,0],[35,5],[63,-1],[4,30],[41,17],[23,19],[20,-12],[57,-12],[77,-59],[-34,-35],[-9,-33],[-12,-28],[-6,-25],[-14,-17],[-109,-99],[18,-1],[46,24],[91,35],[50,15],[36,-10],[18,0],[16,13],[30,-15],[62,-13],[71,81],[43,-16],[40,-50],[86,-89],[45,-51],[15,-23],[-2,-23],[-41,-25],[-20,-5],[-55,46],[-50,24],[-31,-3],[-30,-18],[10,-9],[121,-71],[21,-52],[2,-23],[-81,-35],[-26,-2],[-57,17],[-32,31],[-28,11],[-37,3],[-12,-6],[41,-52],[-4,-16],[-21,-10],[-11,-25],[81,-46],[61,-46],[9,-19],[-41,-13],[-29,-4],[-62,7],[-35,10],[-9,-11],[35,-24],[14,-16],[10,-23],[7,-22],[1,-20],[-28,-17],[-35,-46],[-14,-48],[-31,-5],[-13,9],[-42,-15],[-55,21],[-20,22],[-61,90],[-1,-10],[15,-46],[-3,-27],[-64,-20],[0,-7],[39,-15],[48,-11],[-8,-42],[1,-181],[-11,-64],[-23,-56],[-34,-53],[-36,35],[-15,36],[-12,18],[-17,15],[-23,7],[-23,0],[-25,-32],[-28,28],[-26,33],[10,88],[11,44],[-4,-1],[-16,-20],[-36,-64],[-23,-79],[-31,30],[-28,38],[-22,38],[-37,43],[-36,51],[-19,60],[-8,13],[-21,50],[-8,14],[-8,5],[-17,31],[6,33],[28,40],[26,28],[42,28],[50,16],[22,36],[28,66],[30,46],[33,26],[-16,4],[-42,-22],[-30,-32],[-35,-54],[-32,-34],[-84,-40],[-30,-8],[-36,-4],[-78,5],[-18,14],[9,38],[56,68],[-9,5],[-20,-24],[-27,-17],[-23,-9],[-34,3],[-41,43],[-19,13],[-39,15],[-16,14],[-66,104],[-13,28],[-7,27],[-21,23],[-35,18],[-8,-3],[13,-23],[0,-20],[-30,-12],[-31,4],[-33,21],[-3,-28],[35,-51],[1,-64],[-10,-6],[-24,-4],[-16,8],[-53,48],[-50,33],[-36,18],[-4,-13],[23,-57],[27,-57],[44,-47],[69,-56],[32,-32],[-25,-46],[-22,-14],[-13,-5],[-42,0],[-77,25],[-37,28],[-52,67],[-87,69],[-19,-1],[-61,-28],[9,-4],[40,-2],[29,-9],[69,-55],[6,-23],[-18,-25],[1,-32],[20,-39],[20,-25],[41,-18],[20,-2],[8,-11],[-25,-87],[-2,-24],[7,-10],[9,0],[52,35],[22,9],[19,2],[22,-10],[26,-22],[14,-23],[5,-23],[7,-15],[52,-24],[-5,-12],[-53,-37],[-3,-5],[11,-3],[33,-22],[31,-34],[19,-41],[4,-21],[0,-19],[4,-11],[16,-2],[7,7],[7,-1],[9,-10],[8,-32],[19,-92],[10,-26],[5,0],[3,92],[9,15],[33,-16],[47,-36],[34,-32],[4,-15],[-25,-29],[5,-13],[19,-19],[17,7],[12,33],[22,32],[25,22],[48,-18],[39,-48],[6,-16],[26,-21],[22,11],[44,-54],[-21,-25],[-45,-36],[-5,-12],[11,2],[87,1],[23,-15],[5,-28],[-38,-76],[-35,6],[-47,2],[-24,-4],[4,-10],[65,-35],[18,-29],[25,-30],[12,-25],[-1,-11],[-10,-17],[5,-6],[44,-11],[28,10],[34,4],[30,-3],[3,-11],[-5,-28],[-31,-25],[9,-7],[36,8],[17,-12],[21,-62],[25,-48],[-20,-11],[-22,-5],[3,-61],[14,-64],[1,-60],[-5,-54],[-20,-12],[-22,1],[-8,14],[-53,161],[-13,29],[-16,25],[-56,70],[2,-11],[14,-32],[12,-48],[16,-96],[8,-61],[-4,-23],[-11,-6],[-3,-11],[5,-17],[43,-63],[21,-38],[15,-39],[13,-26],[13,-14],[-3,-11],[-19,-9],[-32,-4],[-16,5],[-58,36],[-8,-11],[32,-133],[-1,-32],[-16,-11],[-20,13],[-24,38],[-36,42],[-49,46],[-47,37],[-11,-1],[-7,-11],[-7,-2],[-9,7],[-16,28],[-16,18],[-68,62],[-7,0],[7,-18],[6,-41],[-7,-8],[-18,3],[-34,18],[-23,40],[-28,70],[-16,26],[-1,-17],[8,-67],[-1,-22],[-17,-6],[-8,6],[-7,18],[-6,29],[-17,23],[-25,15],[-14,16],[-7,29],[-5,6],[-45,-6],[-23,20],[-65,81],[-59,88],[-38,46],[-14,12],[20,-57],[22,-84],[6,-39],[-10,-1],[-22,17],[-113,108],[-69,51],[-39,9],[-63,6],[-14,-28],[34,-62],[33,-47],[32,-32],[50,-61],[46,-79],[19,-25],[62,-34],[33,-9],[34,-2],[3,-12],[-16,-23],[-4,-14],[75,-35],[28,-20],[27,-32],[15,-8],[65,-82],[16,-14],[58,-26],[19,-17],[32,-53],[20,-27],[28,-64],[21,-29],[52,-32],[22,-10],[10,-12],[-7,-29],[-6,-12],[-30,-20],[5,-28],[17,-50],[-1,-31],[-18,-12],[-37,-14],[-19,1],[-28,12],[-35,20],[-70,50],[-105,35],[-39,18],[-13,17],[-20,10],[-260,48],[-44,12],[-27,15],[-25,22],[-100,49],[-12,11],[-67,85],[-49,100],[-17,13],[-54,13],[-45,-8],[-30,-11],[-46,4],[-30,16],[-63,45],[-64,23],[-56,39],[-29,14],[3,10],[41,58],[-12,0],[-73,-45],[-26,14],[-43,35],[-32,35],[-66,97],[-38,35],[5,8],[43,3],[34,-3],[23,8],[44,39],[19,25],[2,14],[-37,4],[-8,7],[-7,16],[-17,21],[-27,25],[-31,10],[-107,-9],[-19,11],[0,17],[21,47],[12,19],[3,10],[-4,3],[-14,-2],[-62,-42],[-14,3],[-24,45],[-15,51],[-11,17],[-14,6],[-51,50],[-72,95],[-27,30],[-30,27],[-21,11],[3,14],[46,79],[2,12],[-40,-4],[-59,16],[-28,-20],[-18,-1],[-21,11],[-12,-4],[-11,-65],[-9,-16],[-12,-9],[-11,2],[-9,11],[0,15],[-9,79],[-21,12],[-58,3],[-13,6],[-14,15],[-12,27],[-10,40],[-12,22],[-13,3],[-11,-3],[-8,-10],[-18,-6],[-28,-3],[-1,-15],[27,-28],[25,-40],[25,-52],[-15,-35],[-55,-18],[-48,-5],[-41,7],[-32,12],[-44,29],[-63,-9],[-15,-76],[-13,-4],[-60,1],[-24,-6],[-80,-42],[-25,-6],[-18,5],[-18,-11],[-27,-24],[-37,-2],[-47,19],[-39,8],[-33,-3],[-33,12],[-34,25],[-29,11],[-36,-2],[-9,4],[-54,55],[-17,22],[-35,68],[-7,27],[-1,29],[3,21],[13,32],[13,76],[12,25],[17,23],[32,29],[120,51],[24,20],[-1,14],[-27,62],[0,16],[9,9],[19,37],[9,10],[21,6],[44,-19],[37,-7],[50,-3],[83,-25],[115,-49],[66,-33],[50,-50],[36,-49],[5,-25],[-16,-38],[-9,-11],[1,-13],[9,-15],[29,-21],[7,8],[-3,26],[6,22],[15,17],[1,23],[-11,28],[-13,24],[-17,21],[-74,70],[-7,23],[25,11],[108,-24],[42,6],[16,27],[17,19],[18,10],[37,4],[51,-13],[25,-2],[23,5],[29,15],[42,50],[28,11],[41,8],[31,1],[56,-20],[35,0],[-3,34],[-23,63],[-28,66],[-23,22],[-57,41],[-68,78],[-34,49],[-9,24],[4,16],[12,24],[123,86],[97,86],[42,44],[21,31],[21,22],[22,14],[47,16],[13,22],[3,36],[8,32],[44,85],[33,23],[51,16],[33,20],[41,70],[-4,17],[-19,13],[-14,20],[-62,182],[-42,89],[-49,76],[-45,94],[-73,92],[-1,24],[13,28],[-6,6],[-76,-40],[-18,-2],[-29,17],[-20,22],[-16,38],[1,20],[11,19],[15,47],[0,24],[-5,22],[-6,16],[-9,9],[-23,6],[-38,2],[-13,-8],[43,-71],[-7,-17],[-54,-7],[-24,3],[-22,8],[-20,14],[-63,74],[-13,27],[4,20],[-5,11],[-13,-7],[-17,0],[-24,7],[-5,8],[44,40],[3,12],[-21,13],[-30,3],[-8,12],[10,12],[41,22],[15,14],[-25,11],[-13,1],[-28,-24],[-42,-48],[-30,-18],[-41,22],[-27,8],[-18,-5],[-28,-38],[-61,-27],[-109,-65],[-46,-20],[-51,4],[-9,13],[0,22],[4,18],[6,14],[2,18],[-4,73],[9,21],[17,12],[32,12],[81,-15],[37,3],[27,17],[26,24],[27,33],[5,31],[-28,50],[-10,11],[-72,39],[-40,14],[-35,6],[-26,11],[-16,17],[-15,27],[-1,18],[2,24],[15,17],[64,20],[0,4],[-53,15],[-25,-2],[-21,-16],[-27,-37],[-16,-11],[-48,22],[-29,3],[-19,11],[-11,10],[7,10],[24,11],[41,32],[3,18],[-29,28],[-15,7],[-60,10],[-72,-10],[-28,5],[-12,32],[-7,37],[-4,44],[-13,75],[-14,39],[-19,4],[-88,-16],[-20,0],[-15,6],[-57,50],[-24,18],[-13,4],[-42,53],[-16,10],[-19,26],[-22,42],[-24,13],[-26,-17],[-26,-23],[-26,-30],[-14,-26],[-2,-21],[16,-16],[91,-28],[24,-18],[19,-30],[15,-36],[10,-43],[-1,-32],[-11,-22],[-20,-19],[-57,-30],[-58,-17],[-59,-5],[-28,4],[-152,59],[-27,0],[-35,8],[-79,24],[-43,3],[-76,20],[-128,11],[-25,-9],[34,-27],[30,-14],[25,0],[37,-24],[48,-47],[28,-29],[22,-34],[1,-12],[-23,-23],[-178,122],[-109,-42],[-51,-16],[-43,-3],[-54,17],[-121,59],[-46,20],[-16,3],[-106,-25],[-91,-1],[-185,24],[-67,17],[-18,17],[-22,8],[-40,0],[-105,19],[-97,-43],[-116,40],[-35,23],[-11,16],[-33,66],[-5,36],[10,32],[9,22],[10,12],[-64,-37],[-22,-6],[-29,-1],[-87,13],[-14,-7],[5,-12],[23,-19],[2,-12],[-48,-8],[-73,9],[-33,-4],[-14,-5],[-33,-30],[-14,-7],[-17,3],[-77,67],[-62,43],[-73,16],[-33,14],[-18,16],[-100,137],[-14,29],[-32,107],[-10,23],[-13,15],[25,3],[95,-13],[91,0],[50,-8],[57,-27],[76,-19],[53,-4],[87,7],[98,18],[11,14],[-63,24],[-57,31],[-52,41],[-31,17],[-53,11],[-146,8],[-137,27],[-93,37],[-77,41],[-31,22],[-11,18],[-12,54],[-13,90],[-12,61],[-12,31],[-1,27],[26,57],[74,63],[2,10],[-15,3],[-31,16],[-10,23],[-4,37],[0,32],[3,25],[13,33],[32,57],[46,71],[49,65],[9,22],[4,58],[7,43],[6,30],[11,22],[31,43],[38,41],[60,34],[5,13],[1,18],[3,13],[6,9],[149,110],[68,45],[57,29],[69,21],[195,43],[101,12],[127,-3],[233,-24],[28,-17],[7,-9],[10,-24],[-7,-16],[-64,-52],[-80,-44],[-53,-38],[-88,-86],[-24,-30],[-110,-173],[-26,-28],[-15,-23],[-11,-63],[4,-22],[17,-36],[59,-79],[16,-36],[0,-34],[-7,-81],[-1,-41],[3,-39],[12,-56],[22,-73],[51,-74],[79,-74],[59,-50],[59,-36],[69,-54],[15,-26],[-32,-29],[-74,-44],[-98,-19],[-52,-18],[-65,-39],[-82,-30],[-32,-19]],[[22221,94438],[235,-123],[33,10],[71,6],[73,19],[102,15],[63,27],[26,8],[45,5],[25,0],[70,-15],[29,-11],[15,-11],[16,-19],[28,-49],[4,-18],[-1,-5],[-26,-30],[-17,-13],[-36,-12],[-30,-4],[-27,-21],[-29,5],[-9,-19],[4,-12],[8,-6],[15,1],[17,8],[33,-4],[18,-13],[15,-21],[-11,-20],[-59,-27],[-87,-31],[-105,-98],[-56,-41],[-11,-13],[-6,-13],[2,-24],[2,-10],[16,-4],[51,34],[34,16],[33,9],[60,0],[25,-5],[44,-20],[41,-32],[9,-11],[-4,-11],[-17,-12],[-2,-8],[39,-15],[43,-43],[3,-26],[-19,-26],[-5,-18],[9,-8],[21,5],[51,29],[55,15],[22,-2],[14,-6],[14,-40],[12,-45],[2,-37],[-9,-31],[-13,-23],[-33,-30],[-30,-11],[-16,0],[2,-5],[35,-25],[15,-19],[6,-19],[-2,-18],[-5,-16],[-41,-57],[2,-9],[12,-3],[26,-33],[3,-78],[-93,-24],[-22,-18],[-25,-28],[-29,-22],[-67,-22],[-33,-3],[-167,19],[-17,11],[-11,19],[-7,29],[-1,22],[2,16],[0,9],[-5,3],[-19,-16],[-19,-29],[11,-33],[52,-91],[10,-39],[2,-16],[-3,-13],[-59,-53],[-34,-18],[-36,-9],[-33,7],[-32,22],[-24,10],[-51,-1],[-15,11],[-15,22],[-35,76],[-50,54],[-42,61],[-108,89],[-56,53],[-75,86],[-31,19],[-26,8],[-51,6],[-12,11],[-19,29],[-32,22],[-11,3],[-19,-6],[-50,-20],[-63,22],[-14,15],[-8,25],[-8,14],[-21,13],[-18,31],[-119,63],[-71,72],[-14,26],[-2,10],[7,35],[17,39],[21,39],[14,16],[46,33],[37,8],[51,-4],[27,-8],[24,-22],[11,-26],[12,-18],[38,-19],[20,-15],[30,-36],[24,-43],[21,-14],[52,-5],[53,7],[114,27],[5,4],[7,16],[13,98],[8,0],[39,-45],[11,-5],[16,9],[10,23],[-1,10],[-24,53],[-15,23],[-13,15],[-14,4],[-31,-4],[-24,10],[-5,15],[4,19],[13,21],[14,12],[27,6],[32,-6],[44,-25],[28,-6],[40,7],[-51,15],[-70,58],[-30,11],[-36,-25],[-25,-9],[-47,-12],[-37,-2],[-156,89],[-9,9],[-11,23],[1,11],[16,17],[38,22],[58,13],[39,3],[34,-17],[49,-44],[43,-26],[4,9],[-8,26],[-20,38],[-14,10],[-34,11],[-33,26],[-15,20],[-8,20],[-1,22],[7,15],[13,8],[120,22],[83,-24],[53,-4],[22,30],[-7,6],[-28,-8],[-32,0],[-19,17],[-1,9],[25,23],[37,10]],[[22702,94394],[-80,-13],[-36,6],[-20,-16],[-15,-7],[-44,-3],[-90,29],[-24,10],[-9,9],[4,9],[16,8],[69,13],[25,10],[11,13],[17,11],[24,8],[65,8],[146,41],[72,5],[28,-3],[9,-11],[2,-10],[-4,-11],[-22,-28],[-30,-21],[-79,-46],[-35,-11]],[[24119,94562],[109,-27],[53,-18],[26,-12],[50,-40],[25,-12],[97,24],[68,8],[151,-10],[127,-34],[48,-24],[28,-23],[-7,-26],[-24,-41],[-27,-38],[-56,-61],[-47,-31],[-11,-14],[-8,-21],[-18,-29],[-50,-65],[-14,-11],[-71,-28],[25,-12],[11,-12],[-10,-28],[-45,-69],[-46,-63],[-33,-39],[-59,-55],[-32,-15],[-44,-5],[-263,48],[-66,-1],[-176,-25],[17,-12],[64,-19],[41,-20],[55,-63],[8,-16],[3,-18],[-2,-36],[-4,-9],[-87,-97],[-29,-71],[-18,-58],[-29,-16],[-98,24],[-32,0],[-110,-17],[-52,8],[8,88],[-8,95],[-16,90],[-82,161],[-9,29],[-6,31],[-3,33],[0,33],[6,67],[0,34],[-4,88],[-11,132],[-1,47],[1,19],[3,14],[18,19],[34,13],[17,2],[108,-40],[50,-13],[33,0],[2,5],[-30,8],[-27,18],[-46,51],[-20,44],[-5,14],[-1,16],[3,15],[6,15],[23,22],[18,10],[68,26],[69,15],[151,11],[42,-8],[66,29],[38,6],[67,-10]],[[16740,94534],[2,-2],[71,53],[44,3],[30,-5],[10,-6],[6,-11],[3,-23],[2,-58],[4,-7],[9,3],[16,14],[78,85],[33,23],[23,7],[96,13],[65,0],[71,-8],[54,-12],[88,-35],[69,-40],[63,-43],[212,-161],[90,-47],[35,-27],[15,-20],[13,-25],[4,-23],[-5,-21],[-10,-15],[-21,-13],[-130,-54],[-69,-16],[-67,-24],[-162,-84],[-111,-40],[-144,-78],[-272,-126],[-32,-25],[-15,-18],[-77,-143],[-29,-33],[-71,-34],[-89,-9],[-25,-9],[-5,-50],[-32,-82],[-15,-55],[-22,-148],[-5,-15],[-16,-28],[-28,-29],[-86,-35],[-64,-18],[-86,-15],[-21,10],[-21,24],[-22,2],[-13,-4],[-114,-103],[-109,-41],[-47,-38],[-33,-18],[-27,-5],[-44,3],[-32,17],[-29,27],[-22,28],[-56,118],[-24,40],[-21,20],[-55,72],[-15,14],[-209,91],[-101,51],[-25,18],[-23,11],[-130,-7],[-18,2],[-4,8],[15,27],[6,16],[2,17],[-2,27],[2,4],[49,27],[-8,5],[-5,10],[-4,15],[5,11],[15,6],[17,24],[21,43],[15,24],[22,16],[38,41],[27,17],[23,21],[1,9],[-10,8],[-3,16],[5,50],[-1,25],[5,22],[8,17],[11,11],[97,37],[4,10],[2,12],[-3,14],[-5,9],[-15,8],[-26,2],[-23,21],[-5,10],[9,29],[44,45],[14,22],[48,101],[86,63],[23,67],[65,72],[0,10],[-21,24],[-60,17],[-29,26],[-19,29],[-87,170],[-15,13],[-5,20],[-18,13],[4,12],[341,51],[235,16],[243,44],[68,2],[52,-8],[52,-23],[69,-40],[90,-39],[170,-58],[106,-12],[-42,-45],[-6,-14],[0,-10]],[[22957,94772],[-84,-34],[-18,13],[-8,12],[65,53],[28,14],[27,-16],[7,-13],[-3,-9],[-14,-20]],[[23526,94760],[-13,-2],[-25,3],[-93,26],[-16,10],[-4,8],[21,9],[8,10],[23,12],[42,0],[44,-29],[21,-27],[1,-12],[-9,-8]],[[21078,95066],[-53,-3],[-90,18],[-54,33],[-17,16],[2,8],[9,7],[13,22],[31,63],[12,17],[48,36],[36,10],[75,-3],[44,-19],[18,-12],[13,-15],[13,-32],[3,-21],[22,-24],[7,-14],[0,-14],[-6,-14],[-12,-13],[-29,-21],[-85,-25]],[[24016,95061],[18,-43],[3,-18],[1,-37],[-8,-49],[-5,-9],[-7,-4],[-4,-13],[0,-21],[-7,-12],[-15,-5],[-99,-10],[-62,2],[-91,-6],[-45,3],[-30,11],[-43,22],[-91,55],[-45,2],[-116,19],[-63,58],[-24,11],[-25,-18],[-7,4],[-6,12],[-7,20],[-12,10],[-48,-5],[-9,6],[-2,18],[0,15],[9,23],[51,65],[25,5],[31,12],[17,35],[-2,33],[48,49],[28,15],[51,34],[172,54],[48,4],[63,-4],[62,-17],[47,-28],[97,-70],[44,-43],[23,-43],[21,-25],[26,-54],[-9,-21],[-6,-28],[3,-14]],[[23311,95339],[-21,-19],[-23,-1],[-30,18],[-32,-7],[-45,-36],[-16,-22],[-12,-7],[-37,-7],[-16,6],[-15,19],[-14,32],[10,24],[35,16],[93,27],[26,13],[3,14],[6,9],[8,4],[62,-23],[29,-16],[22,-18],[-2,-8],[-31,-18]],[[16368,95475],[-22,-3],[-24,6],[5,15],[54,41],[3,11],[0,9],[-7,11],[14,15],[22,5],[7,-5],[2,-12],[-5,-36],[-6,-18],[-10,-14],[-14,-14],[-19,-11]],[[23742,95477],[-27,0],[-35,12],[-10,12],[-8,17],[-5,22],[-7,18],[-10,13],[-2,10],[6,9],[11,5],[27,2],[57,22],[11,-2],[8,-12],[7,-31],[9,-19],[22,-34],[10,-22],[-2,-6],[-7,-6],[-55,-10]],[[17131,95379],[-79,-37],[-57,4],[-75,27],[-61,9],[-21,10],[-3,9],[20,26],[26,21],[62,41],[105,78],[69,30],[67,21],[69,47],[38,21],[33,2],[33,-9],[4,-13],[-35,-64],[-25,-26],[-49,-67],[-93,-112],[-28,-18]],[[28038,95579],[3,-34],[-20,1],[-65,-22],[-52,-3],[-26,10],[-17,23],[41,43],[47,31],[57,47],[47,30],[23,-6],[22,-16],[-28,-47],[-30,-23],[-2,-34]],[[21603,95630],[58,-35],[3,-9],[-11,-6],[-75,-19],[-29,-15],[-25,-35],[-19,-16],[-101,-10],[-103,1],[20,33],[56,56],[-44,22],[-158,-38],[-60,24],[51,60],[-51,5],[-71,0],[-46,36],[16,42],[94,24],[122,20],[131,31],[103,-3],[40,-14],[14,-49],[12,-59],[18,-5],[55,-41]],[[21105,95957],[13,-3],[43,12],[27,2],[30,-22],[8,-14],[110,-36],[38,-16],[5,-10],[-13,-15],[-33,-20],[-31,-13],[-44,-11],[-222,-2],[-24,5],[-14,18],[-28,65],[-19,36],[-8,24],[5,14],[24,13],[82,21],[36,0],[23,-5],[9,-11],[-3,-14],[-14,-18]],[[22861,95890],[3,-26],[-4,-19],[-9,-14],[-1,-17],[9,-18],[37,-45],[12,-25],[2,-25],[-2,-17],[-23,-32],[-10,-43],[-1,-22],[14,-35],[0,-16],[-26,-28],[-54,-25],[8,-13],[117,-30],[9,-7],[0,-70],[20,-76],[-8,-1],[-28,24],[-52,28],[-63,-53],[7,-90],[42,-40],[12,-23],[-4,-13],[-35,-6],[-12,2],[-35,19],[-21,27],[-7,-1],[-6,-13],[4,-14],[24,-24],[11,-29],[-11,-8],[-36,-8],[-48,0],[-76,-13],[-38,-2],[-36,7],[-49,1],[-41,-3],[-24,6],[-23,14],[-26,-3],[-57,-35],[-89,11],[-80,3],[-16,11],[-18,23],[-35,70],[6,18],[86,9],[2,6],[-61,25],[-70,18],[-32,15],[7,27],[-2,7],[120,32],[88,62],[54,25],[4,12],[46,13],[106,7],[4,18],[-200,-10],[-274,-35],[-85,-18],[-71,10],[-300,-54],[-13,0],[-31,17],[-27,33],[19,22],[88,43],[44,37],[-5,21],[35,35],[56,5],[96,-29],[49,-29],[45,-14],[39,3],[41,20],[-11,3],[-69,-11],[-8,3],[-35,33],[-15,20],[-10,21],[-1,15],[21,28],[-79,9],[-29,19],[-14,24],[3,11],[25,28],[67,39],[-8,10],[-97,-1],[-22,5],[-42,24],[9,27],[39,39],[30,23],[19,7],[31,0],[73,-15],[21,-8],[56,-38],[14,-21],[-2,-21],[11,-15],[43,-22],[186,-115],[35,-27],[23,-12],[43,-9],[26,2],[20,8],[3,10],[-80,40],[-20,22],[-17,29],[7,9],[24,4],[58,-4],[69,8],[-76,12],[-50,16],[-52,1],[-64,26],[0,8],[16,9],[87,11],[17,5],[1,7],[-29,18],[-26,9],[-132,21],[-47,24],[-15,11],[-4,11],[17,28],[71,35],[51,17],[89,12],[71,-1],[40,-5],[94,-59],[45,-39],[77,7],[-22,40],[-15,45],[23,17],[64,29],[51,-15],[66,-40],[15,-13],[75,-25],[44,-8],[23,-13],[7,-17]],[[21881,95955],[-72,-2],[-33,6],[-2,11],[29,13],[95,22],[57,39],[21,5],[73,6],[43,-1],[55,-10],[-132,-49],[-134,-40]],[[19919,95654],[35,-1],[41,6],[46,-4],[21,-13],[15,-23],[0,-13],[-3,-10],[-6,-9],[-60,-58],[-14,-20],[19,-5],[10,3],[59,44],[45,13],[34,4],[57,-9],[22,-8],[15,-8],[9,-11],[22,-41],[16,-54],[2,5],[1,31],[3,23],[55,16],[1,5],[-20,13],[-16,18],[-12,33],[4,12],[12,14],[35,28],[42,17],[36,4],[137,-29],[54,-25],[21,-12],[8,-9],[12,-28],[23,-78],[-1,-25],[-10,-40],[-44,-76],[-7,-51],[-44,-127],[-31,-35],[-33,-24],[-138,-43],[-104,-43],[-26,-7],[-27,-1],[-86,15],[-99,27],[-57,-7],[-56,-20],[-36,-6],[-33,3],[-33,7],[-44,19],[23,8],[10,10],[-9,10],[-46,14],[-48,-32],[-139,-73],[-187,-25],[-58,-15],[-44,-19],[-22,-16],[-35,-38],[-53,-28],[-96,-31],[-123,-48],[-220,-49],[-138,-8],[-138,16],[-44,13],[-46,21],[-93,49],[-26,17],[-31,39],[18,25],[50,30],[75,26],[150,36],[135,58],[49,11],[130,9],[66,-5],[48,3],[31,8],[47,20],[68,42],[50,39],[12,18],[-16,17],[-25,2],[-81,-40],[-41,-13],[-44,-1],[-61,-14],[-60,-5],[-11,0],[-62,39],[-33,6],[-16,-4],[-14,-10],[-26,-28],[-16,-10],[-27,-8],[-107,-8],[-104,-14],[-23,9],[-14,16],[-3,10],[-1,33],[-7,14],[9,28],[12,21],[14,15],[71,43],[10,11],[-34,-2],[-80,-21],[-11,7],[-18,24],[-9,2],[-11,-10],[-6,-14],[-13,-58],[-13,-30],[-32,6],[-40,18],[-15,3],[-9,-6],[3,-10],[41,-50],[0,-17],[-26,-31],[-114,-51],[-44,-13],[-16,5],[-14,14],[-13,22],[-29,31],[-18,7],[-19,1],[-18,-7],[-17,-13],[-10,-15],[-10,-26],[-20,-21],[-13,-3],[-115,42],[-93,75],[-101,-11],[-46,2],[-138,28],[-17,17],[-10,22],[1,12],[6,12],[17,25],[35,37],[15,12],[21,10],[29,8],[73,4],[189,2],[37,5],[206,72],[24,12],[30,23],[7,10],[-1,6],[-254,-57],[-109,-13],[-166,10],[-31,9],[-8,16],[35,42],[18,16],[48,15],[114,21],[154,19],[100,0],[84,15],[51,17],[-170,-1],[-204,-8],[-30,5],[-58,23],[-3,16],[23,19],[9,15],[-17,33],[5,13],[38,27],[68,29],[42,5],[81,-11],[230,-10],[45,4],[-28,13],[-40,9],[-178,17],[-37,7],[-7,10],[-3,15],[2,19],[13,20],[55,42],[162,35],[64,5],[65,-3],[65,-15],[29,-14],[15,-16],[7,-16],[1,-26],[3,-11],[12,-17],[37,-42],[28,-13],[128,24],[53,6],[54,-8],[78,-24],[101,-75],[130,-77],[-1,-16],[-49,-26],[-10,-11],[7,-7],[50,-5],[46,4],[45,-6],[10,-7],[16,-28],[23,-49],[27,-37],[31,-24],[31,-13],[45,-1],[46,8],[74,-3],[381,-28],[23,5],[16,15],[9,26],[4,22],[-5,29],[-8,14],[-236,94],[-21,38],[116,54],[8,12],[2,17],[-4,21],[-15,21],[-62,39],[-55,6],[-82,38],[-12,10],[-11,15],[-8,21],[1,16],[11,12],[80,39],[33,21],[100,98],[46,39],[33,19],[34,11],[74,5],[77,-36],[17,-2],[7,-10],[-3,-17],[-10,-16],[-27,-29],[-7,-12],[2,-13],[19,-29],[6,-19],[4,-32],[3,-5],[47,-27],[42,-36],[20,-55],[-16,-19],[-35,-27],[-21,-22],[-7,-18],[5,-10],[27,-6]],[[25076,95914],[-13,-8],[-42,4],[-14,-8],[-22,5],[-31,16],[-36,32],[-41,48],[-32,41],[-1,12],[10,19],[32,13],[76,15],[52,0],[48,-31],[14,-11],[8,-13],[1,-12],[-4,-11],[-22,-24],[-10,-16],[0,-17],[5,-23],[9,-16],[13,-8],[0,-7]],[[18455,96049],[-42,-18],[-289,27],[-15,9],[-8,12],[52,33],[64,14],[146,11],[51,-13],[34,-15],[19,-12],[8,-24],[-20,-24]],[[23807,96147],[52,-5],[44,8],[38,-2],[56,-23],[53,-36],[40,-16],[13,-8],[5,-9],[6,-27],[0,-12],[-3,-10],[-18,-25],[-15,-30],[-30,-27],[-16,-20],[-14,-26],[31,15],[119,85],[77,-10],[117,7],[141,35],[67,5],[67,-3],[50,-10],[108,-47],[37,-22],[14,-16],[3,-11],[-22,-18],[-67,11],[-111,10],[-20,5],[-18,0],[-12,-6],[8,-25],[22,-5],[133,-6],[436,-78],[19,-25],[-5,-11],[-16,-12],[-31,-17],[-252,-18],[-143,16],[-120,26],[-41,-6],[35,-35],[72,-10],[61,-21],[25,-17],[128,-13],[21,-13],[40,-34],[33,-3],[33,-24],[27,-41],[13,-5],[39,7],[64,-36],[21,-19],[0,-14],[-15,-22],[-29,-31],[-73,-35],[-6,-11],[86,4],[16,-5],[101,-63],[13,-1],[8,6],[10,23],[-4,21],[-13,28],[4,21],[19,13],[19,7],[19,0],[21,-8],[102,-77],[131,37],[24,-17],[20,-30],[9,-5],[49,61],[30,15],[123,-73],[75,-16],[30,-15],[55,-18],[79,-6],[13,27],[-45,35],[26,15],[109,29],[58,-4],[107,42],[66,5],[40,0],[133,63],[31,10],[23,22],[52,-3],[141,-36],[40,3],[150,36],[56,8],[55,-1],[141,-21],[105,-22],[33,-12],[-12,-29],[6,-9],[13,-7],[35,-8],[131,-1],[57,-7],[46,-28],[10,-11],[-1,-11],[-45,-30],[7,-7],[45,-6],[100,-4],[22,-7],[21,-37],[21,-52],[0,-20],[-35,-35],[-95,-46],[-106,-39],[-7,-10],[34,-18],[35,-9],[27,2],[85,18],[19,-1],[38,-18],[18,-17],[17,-24],[-30,-22],[-121,-27],[-72,36],[-24,7],[-16,-3],[9,-15],[35,-28],[11,-18],[-12,-9],[-6,-18],[1,-26],[-3,-27],[-11,-42],[-5,-2],[-263,-8],[-32,-8],[-74,-29],[-56,-15],[-36,-2],[-36,5],[-96,31],[-64,-6],[-25,3],[-55,20],[-13,10],[-22,27],[-16,37],[1,22],[7,32],[-4,17],[-16,0],[-17,6],[-52,33],[-32,10],[-6,-6],[10,-25],[6,-8],[34,-19],[6,-21],[-14,-55],[-5,-8],[-34,-40],[-25,-12],[-68,-1],[-105,-28],[-50,-4],[-67,7],[-42,12],[-27,15],[-27,21],[-13,2],[-7,-46],[-13,-6],[-23,1],[-35,14],[-28,33],[-9,0],[-4,-19],[-7,-13],[-8,-6],[-74,-20],[-41,0],[-43,23],[-28,-2],[-36,-13],[-87,24],[-21,1],[18,-39],[-29,-6],[-62,1],[-103,13],[-64,-19],[-114,11],[-116,3],[-22,9],[-15,18],[-1,16],[6,23],[17,33],[28,45],[10,23],[-26,11],[-15,15],[-13,1],[-41,-17],[-27,-50],[-20,-14],[-9,12],[-7,30],[-9,15],[-11,-1],[-11,-8],[-11,-15],[-15,-6],[-22,4],[-7,-7],[6,-20],[2,-18],[-2,-16],[-18,-17],[-52,-24],[-31,-7],[-79,-4],[-48,7],[-96,29],[-53,1],[-64,48],[-51,11],[3,18],[22,32],[-1,9],[-69,-47],[-10,-15],[9,-34],[-10,-3],[-47,13],[-47,-10],[-12,3],[-32,25],[-57,26],[-25,28],[-39,90],[-20,59],[2,12],[29,16],[-4,13],[-36,34],[-39,28],[-12,19],[-5,20],[-5,28],[-1,21],[5,13],[22,42],[62,76],[8,14],[3,13],[-8,40],[-12,40],[-12,29],[-34,39],[-46,42],[-66,73],[-48,58],[-58,80],[-28,7],[-32,-3],[-70,-28],[-24,-13],[-5,-9],[-52,-2],[-148,7],[-56,9],[-42,-3],[-72,-20],[-77,4],[-48,56],[-110,31],[-33,17],[-22,24],[7,15],[63,14],[26,15],[12,12],[-62,-10],[-27,1],[-186,77],[-57,14],[-10,7],[-4,9],[0,11],[5,17],[55,-22],[25,-1],[39,6],[14,14],[-9,7],[-64,26],[-30,19],[-12,15],[12,20],[3,13],[21,8],[37,1],[48,10],[88,26],[59,10],[59,-2],[142,-27],[142,-34],[89,-26]],[[17902,96407],[21,-23],[2,-9],[-10,-9],[-33,-15],[-164,-51],[-32,-24],[12,-20],[59,-41],[60,-35],[13,-18],[-28,-17],[-55,5],[-20,-1],[-20,-8],[6,-16],[60,-52],[20,-28],[0,-14],[-11,-14],[-26,-19],[-40,-25],[-68,-19],[-148,-26],[-5,-21],[1,-15],[-3,-38],[-6,-18],[-17,-29],[-13,-14],[-22,-9],[-32,-6],[-40,0],[-67,26],[-30,16],[-42,35],[-8,24],[5,28],[11,45],[18,46],[25,46],[8,29],[-10,12],[-18,0],[-54,-19],[-35,-7],[-27,-13],[-20,-21],[-11,-22],[-6,-43],[-10,-23],[-29,-13],[-44,0],[-17,-7],[-8,-16],[6,-13],[43,-26],[6,-30],[-6,-18],[-46,-33],[-11,-11],[-29,-52],[-11,-13],[-24,-12],[-24,1],[-23,19],[-33,36],[-22,31],[-12,26],[-9,11],[-16,-8],[-19,-26],[0,-21],[4,-31],[-1,-19],[-28,-23],[4,-10],[49,-28],[6,-12],[0,-19],[-3,-9],[-20,1],[-16,-22],[-19,-17],[-49,-33],[-69,-4],[-57,-16],[-12,1],[-14,26],[-15,50],[-14,29],[-20,15],[-26,58],[-12,18],[-11,8],[-10,2],[-15,-12],[-33,-82],[-54,-21],[-29,-4],[-30,2],[-74,23],[-60,8],[-41,-9],[-68,-34],[-27,-9],[-37,4],[-16,13],[-14,21],[-1,12],[10,5],[17,24],[0,9],[-17,14],[0,11],[6,7],[-2,6],[-8,3],[-17,-3],[-61,-16],[7,17],[29,37],[71,72],[26,21],[16,6],[209,24],[15,7],[99,97],[28,22],[29,18],[143,58],[13,14],[22,40],[13,10],[31,16],[102,82],[94,59],[47,37],[65,37],[75,16],[227,28],[163,-37],[38,-2],[19,10],[17,17],[25,-7],[60,-5],[14,4],[25,19],[-17,11],[-73,19],[-5,10],[2,9],[26,23],[31,14],[90,11],[41,-3],[43,-15],[55,-32],[127,-56]],[[25046,96352],[-73,-33],[-37,1],[-212,67],[-43,33],[-8,23],[-2,32],[0,43],[9,30],[12,10],[25,10],[49,7],[46,-4],[70,-12],[70,-19],[92,-60],[34,-28],[7,-37],[0,-22],[-5,-17],[-10,-10],[-24,-14]],[[20956,96279],[-43,-10],[-84,23],[-56,10],[-45,42],[-49,57],[-39,62],[-14,37],[-28,22],[-10,36],[-51,57],[8,9],[48,8],[77,-11],[36,-20],[47,-34],[60,-54],[18,-24],[4,-33],[11,-17],[51,-4],[63,-43],[12,-17],[13,-34],[-1,-16],[-10,-34],[-18,-12]],[[23476,96654],[70,-22],[76,11],[81,2],[182,-10],[120,6],[31,-3],[47,-14],[25,-18],[23,-28],[-59,-18],[-50,-89],[-7,-5],[-54,-1],[-27,-7],[-159,13],[-438,5],[-19,11],[-58,53],[-4,21],[11,24],[12,16],[14,8],[128,39],[55,6]],[[21752,96599],[-39,-6],[-69,3],[-83,21],[-22,24],[-5,38],[1,22],[7,4],[51,5],[96,6],[78,-5],[88,-22],[36,-14],[18,-10],[22,-20],[8,-8],[5,-16],[-110,-4],[-52,-6],[-30,-12]],[[18380,96632],[-76,-19],[-51,0],[-89,28],[-103,84],[-14,30],[39,5],[28,9],[17,13],[34,15],[76,21],[10,-8],[-2,-18],[6,-16],[28,-4],[26,-11],[53,-36],[36,-7],[13,-8],[6,-12],[22,-21],[0,-11],[-30,-22],[-29,-12]],[[19317,96833],[223,-14],[9,-3],[1,-10],[-17,-33],[-25,-24],[-119,-30],[-153,-28],[-32,-13],[2,-8],[13,-10],[25,-12],[119,2],[29,-5],[10,-8],[6,-12],[4,-15],[0,-53],[-6,-30],[-17,-27],[-48,-20],[-86,-26],[-59,-11],[-46,4],[-46,-3],[-202,-48],[-62,-1],[-55,12],[-75,46],[-78,18],[-34,21],[-33,11],[-9,16],[-3,13],[6,11],[14,10],[4,9],[-13,25],[-6,24],[-22,35],[-4,20],[0,13],[4,14],[15,25],[8,5],[46,4],[60,13],[139,37],[305,47],[93,-4],[40,9],[75,4]],[[21388,96858],[-32,-12],[-37,7],[-6,7],[0,9],[3,10],[42,36],[38,12],[23,3],[18,-13],[10,-18],[-59,-41]],[[19495,97148],[49,-34],[17,1],[21,-6],[10,-9],[29,-43],[6,-21],[2,-27],[-5,-23],[-10,-19],[-27,-11],[-62,-8],[-87,11],[-75,-14],[-35,-2],[-93,9],[-24,7],[-52,26],[-40,11],[-16,-6],[-20,-23],[-37,-28],[-23,-7],[-68,4],[-103,48],[-118,-14],[-123,-28],[-48,-5],[-14,8],[-19,21],[3,11],[36,32],[82,33],[60,19],[118,28],[141,15],[52,17],[33,23],[92,37],[53,16],[73,13],[58,-1],[74,-30],[56,-15],[34,-16]],[[23276,97079],[66,-15],[113,7],[41,-11],[106,-39],[32,-23],[8,-17],[0,-9],[-35,-19],[-71,-28],[-17,-22],[63,-27],[32,-24],[15,-17],[0,-18],[-42,-48],[-31,-14],[-48,2],[-23,-5],[-60,-22],[-95,-21],[-129,-9],[-35,-13],[-65,-22],[-43,-3],[-14,12],[-6,18],[3,13],[9,15],[-21,15],[-92,28],[-54,39],[-8,13],[-2,11],[119,7],[52,8],[23,13],[4,7],[-23,3],[-82,26],[-138,16],[-7,19],[-57,36],[-6,35],[-12,10],[-39,15],[-6,5],[-12,22],[-1,12],[2,12],[71,23],[-10,16],[-54,61],[-14,34],[2,13],[34,18],[47,0],[124,-5],[59,-8],[59,-14],[65,-22],[97,-19],[31,-12],[58,-41],[7,-12],[-4,-13],[14,-12]],[[21270,97531],[65,-11],[77,-37],[73,-79],[4,-10],[0,-13],[-3,-16],[-9,-21],[-13,-12],[37,-15],[4,-8],[-3,-17],[4,-12],[23,12],[19,19],[5,12],[4,32],[57,17],[60,23],[28,5],[47,-5],[112,-56],[43,-5],[16,-7],[14,-13],[1,-14],[-23,-32],[-9,-20],[6,-13],[58,-11],[134,22],[117,-53],[65,-63],[47,-21],[8,-11],[-14,-11],[-13,-29],[-39,-22],[-8,-10],[21,-26],[1,-17],[-2,-22],[7,-13],[53,-14],[119,-93],[22,-26],[14,-32],[1,-11],[-17,-18],[-19,-51],[-10,-12],[-49,-10],[-88,-9],[-83,-17],[-88,22],[-87,34],[-26,22],[-22,28],[-5,10],[-9,44],[-4,9],[-37,24],[-32,37],[-63,3],[-147,38],[-63,8],[-64,-2],[-89,-15],[-17,4],[-15,11],[-14,18],[-3,14],[14,23],[-262,-29],[-75,-35],[-105,6],[-53,14],[-69,33],[-32,29],[-30,38],[-3,29],[24,20],[25,11],[26,4],[142,-23],[125,-11],[54,11],[25,32],[-30,16],[-120,7],[26,17],[101,16],[53,26],[-10,8],[-30,10],[-137,-2],[-48,9],[-3,9],[11,10],[77,51],[-3,10],[-33,16],[-29,22],[-11,3],[-68,-20],[-95,-75],[-22,-11],[-22,1],[-21,12],[1,16],[21,19],[44,58],[-4,21],[-42,14],[-114,-10],[-63,-1],[-9,17],[-3,30],[3,29],[15,45],[22,35],[13,12],[151,-7],[245,21],[71,2],[78,-21]],[[22558,97915],[6,-75],[-6,-38],[-14,-28],[-12,-7],[-17,0],[-76,21],[-23,13],[-1,11],[-8,21],[-50,27],[-95,-4],[-40,3],[-16,8],[-10,12],[-9,47],[2,17],[11,29],[7,7],[70,27],[20,2],[85,-10],[75,-1],[38,-7],[34,-17],[20,-26],[9,-32]],[[24476,98578],[36,-48],[134,-115],[61,-42],[103,-51],[13,-19],[1,-8],[-3,-28],[30,-10],[88,-16],[99,-28],[18,1],[34,17],[42,5],[54,-4],[26,-12],[19,-18],[8,-13],[1,-10],[-19,-19],[2,-8],[12,-8],[2,-11],[-20,-41],[5,-15],[50,-37],[45,-19],[89,-20],[58,2],[36,-13],[1,8],[-17,23],[-34,34],[-65,18],[-9,19],[-5,34],[6,22],[33,18],[27,6],[84,1],[45,-8],[80,-25],[8,-14],[4,-27],[3,-54],[-2,-12],[-67,-30],[-15,-21],[17,-6],[58,-5],[90,-19],[35,-2],[35,-44],[27,-41],[-20,-52],[-26,-82],[-21,-19],[-21,-28],[15,-6],[88,12],[18,4],[59,28],[86,-7],[29,-7],[15,-10],[26,-31],[22,-41],[16,3],[40,51],[15,12],[20,12],[9,-2],[40,-47],[91,-82],[31,-35],[6,-25],[-39,-29],[-30,-15],[-223,-62],[-99,-35],[-50,-28],[-25,-9],[-54,5],[-12,-5],[-16,-44],[-18,-19],[-46,-30],[-65,-55],[-38,-24],[-68,18],[-17,25],[-10,58],[-1,24],[2,13],[9,20],[29,49],[-3,6],[-14,-5],[-45,-24],[-18,-13],[-16,-23],[-8,-38],[7,-70],[-6,-28],[-18,-14],[7,-11],[53,-15],[9,-7],[6,-12],[3,-17],[-3,-16],[-16,-25],[-30,-10],[-38,11],[-82,61],[-36,-3],[-9,-7],[8,-22],[25,-48],[5,-41],[-12,-33],[-23,-53],[-16,-29],[-9,-3],[-41,-1],[-35,14],[-104,93],[-51,39],[-76,78],[-19,15],[-12,4],[-10,-33],[20,-31],[68,-72],[41,-53],[29,-43],[4,-19],[-9,-7],[-15,4],[-20,16],[-62,25],[-26,15],[-16,16],[-31,13],[-45,8],[-45,2],[-45,-5],[-8,-8],[50,-23],[18,-12],[13,-17],[9,-19],[-17,-13],[-63,-7],[-84,5],[-137,17],[-136,28],[-125,44],[-91,44],[-36,23],[-11,17],[34,16],[119,19],[119,13],[-19,11],[-217,25],[-71,4],[-38,-6],[-44,4],[-34,20],[-45,37],[-23,25],[3,10],[17,5],[99,-4],[13,3],[-49,19],[-157,37],[-59,33],[-11,12],[-4,13],[1,12],[59,25],[183,59],[62,9],[63,1],[44,16],[38,56],[189,20],[146,25],[12,7],[-109,-4],[-155,5],[-65,37],[-45,7],[-49,0],[-57,-12],[-98,-35],[-47,-9],[-107,-36],[-29,3],[-15,4],[-5,7],[19,24],[28,17],[-5,5],[-42,4],[-48,-1],[-34,-6],[-122,-32],[-55,-23],[-17,-3],[-59,38],[-95,20],[-21,16],[20,63],[27,13],[73,11],[217,57],[13,11],[20,29],[-50,-7],[-109,-27],[-90,-14],[-71,0],[-51,4],[-33,8],[-40,17],[-128,83],[-36,39],[-4,36],[-9,26],[-38,65],[276,-40],[107,-8],[208,-2],[10,3],[3,11],[-4,17],[2,13],[7,9],[77,23],[12,8],[-91,4],[-168,-39],[-59,0],[-67,56],[-71,-10],[-34,4],[-53,14],[-26,12],[-16,15],[-7,13],[2,10],[14,12],[62,16],[28,1],[73,-10],[55,1],[-18,17],[-79,43],[-70,47],[5,80],[57,17],[60,2],[58,-20],[77,-2],[56,-23],[37,-44],[44,1],[69,-8],[155,1],[-28,15],[-49,14],[-109,18],[-53,63],[-114,33],[-88,17],[1,15],[67,79],[80,28],[128,-10],[85,14],[108,28],[106,-13],[28,2],[16,8],[14,17],[0,15],[-14,14],[-34,17],[-135,2],[-60,7],[-23,9],[-7,14],[-4,14],[0,15],[4,9],[11,5],[33,6],[126,0],[76,8],[83,-10],[173,-39],[55,-20],[60,-34],[31,-30]],[[30697,99663],[227,-10],[73,4],[84,-26],[51,-3],[83,5],[61,-6],[226,-6],[47,-10],[-1,-11],[-48,-26],[-66,-25],[-423,-82],[-31,-13],[83,-4],[121,3],[94,9],[111,28],[37,2],[70,13],[137,38],[109,20],[49,-9],[42,-14],[28,-2],[15,11],[23,30],[14,11],[36,7],[22,-1],[35,-14],[40,-33],[36,-23],[20,0],[83,26],[41,3],[96,-9],[39,-12],[7,-12],[-25,-13],[-16,-11],[-6,-10],[14,-11],[58,-23],[83,-51],[-1,-19],[-45,-38],[1,-9],[214,40],[217,-18],[61,-12],[23,-15],[25,-24],[27,-34],[-19,-35],[-95,-55],[-98,-43],[-58,-38],[-88,-22],[-305,-92],[-149,-30],[-85,-30],[-39,-5],[-181,6],[-48,-16],[-26,-28],[-58,-13],[-84,-9],[-172,-7],[-39,-31],[-10,-21],[-17,-16],[-15,-8],[-492,-111],[-10,-18],[50,-8],[63,8],[717,134],[137,9],[128,-10],[-14,-31],[-181,-88],[-231,-80],[-115,-61],[-291,-104],[-237,-105],[-92,-52],[-122,-95],[-42,-23],[-51,-9],[-60,4],[-54,14],[-72,35],[-65,39],[-21,7],[13,-19],[126,-132],[-14,-25],[-232,-27],[-103,-23],[-53,-6],[-38,4],[-36,-2],[-36,-10],[-2,-10],[32,-11],[92,-9],[206,30],[33,-2],[52,-15],[3,-13],[-55,-42],[-166,-50],[21,-2],[48,-18],[-1,-16],[-52,-38],[-25,-12],[-160,-35],[-70,-8],[-62,4],[-281,77],[-99,11],[-94,19],[-69,-3],[-74,-22],[33,-12],[136,-21],[114,-4],[47,-9],[18,-14],[49,-51],[8,-27],[-11,-25],[-15,-18],[-18,-10],[-30,-5],[-111,3],[-41,-6],[-48,-15],[-61,-6],[-109,3],[-128,-22],[-67,-4],[-76,10],[-81,24],[-86,12],[-145,11],[12,-14],[51,-6],[104,-37],[50,-51],[47,-8],[96,-42],[69,-6],[72,-14],[102,18],[68,-3],[-14,-102],[-30,-10],[-164,0],[-79,15],[-34,15],[-76,17],[-68,-10],[-62,2],[-42,-10],[-67,1],[-174,-18],[-92,0],[-68,11],[-79,4],[-90,-4],[7,-12],[38,-4],[55,-19],[52,-29],[43,-13],[51,7],[52,14],[190,23],[84,3],[75,-10],[49,-12],[35,-15],[44,-40],[109,-5],[84,-13],[133,-58],[37,-4],[15,-15],[-28,-38],[-4,-22],[-92,-44],[-144,-12],[-158,4],[-113,-5],[-12,-6],[78,-11],[180,-51],[69,-28],[13,-16],[-100,-61],[-87,-122],[-29,-10],[-30,-3],[-77,2],[-98,-30],[-74,-6],[-134,11],[-154,-1],[-13,-19],[-7,-38],[1,-57],[9,-76],[-8,-56],[-26,-35],[-32,-26],[-58,-25],[-60,-16],[-44,-5],[-75,-1],[-213,-18],[-105,1],[-81,8],[-83,25],[-140,71],[-40,16],[-38,9],[1,-15],[42,-40],[35,-26],[28,-11],[-7,-12],[-62,-20],[-67,-8],[-81,0],[-2,-7],[27,-21],[35,-19],[24,-6],[61,6],[72,24],[44,8],[89,-6],[35,-9],[110,-54],[16,-2],[82,27],[118,1],[44,-21],[16,-43],[2,-34],[-12,-26],[27,-25],[67,-25],[52,-6],[37,14],[56,35],[24,8],[23,-2],[34,-25],[46,-48],[5,-56],[-38,-64],[-46,-42],[-180,-69],[-55,-27],[-43,-28],[-63,-26],[-123,-34],[-64,-6],[-140,-37],[-31,-2],[-45,6],[-9,18],[11,32],[15,30],[19,27],[0,23],[-39,35],[-28,16],[-27,9],[-54,-5],[-30,-10],[-33,-2],[-35,6],[-29,15],[-59,63],[-22,8],[-29,-2],[-25,9],[-23,20],[-38,19],[10,-15],[38,-35],[26,-36],[15,-35],[-7,-27],[-321,-16],[-138,8],[-28,25],[-66,103],[-14,-183],[-241,-30],[-56,5],[-93,20],[-121,50],[-50,33],[-20,32],[-15,18],[-9,3],[-30,-39],[-33,-81],[-83,21],[-104,20],[-38,80],[-2,-115],[-169,15],[-81,-4],[-23,100],[-4,112],[-33,-71],[14,-59],[5,-73],[-72,21],[-157,10],[-56,10],[7,96],[13,97],[202,96],[60,45],[44,18],[69,12],[89,7],[60,-6],[70,6],[82,17],[59,5],[11,6],[-17,9],[-63,62],[-23,14],[-23,6],[-45,3],[-45,27],[-25,24],[-28,32],[-43,62],[-44,69],[22,37],[72,30],[72,21],[73,11],[60,0],[73,-16],[103,-32],[59,-36],[74,-76],[49,-61],[39,-27],[177,-50],[59,-8],[70,4],[143,13],[70,14],[31,16],[16,23],[21,18],[63,41],[96,85],[54,68],[12,22],[11,28],[9,32],[-30,-17],[-167,-167],[-35,-30],[-97,-51],[-42,-8],[-66,2],[-89,23],[-104,-36],[-63,9],[-56,25],[0,118],[-71,95],[78,48],[65,29],[115,77],[26,1],[84,-12],[-46,17],[-45,26],[-100,-7],[35,166],[-67,-124],[-68,-65],[-42,-33],[-46,-18],[-176,-17],[43,61],[40,90],[-42,-34],[-99,-50],[-74,-27],[-61,-14],[-118,4],[-59,25],[17,62],[0,77],[36,35],[54,46],[59,61],[40,63],[158,29],[153,11],[128,34],[63,6],[60,-16],[244,-26],[100,-20],[44,-15],[33,-5],[34,22],[44,21],[152,-2],[42,3],[39,10],[47,20],[56,30],[8,15],[-38,-1],[-39,-8],[-58,-21],[-56,-12],[-57,2],[-115,19],[-200,3],[-102,8],[-47,9],[-27,12],[-23,19],[-20,25],[10,17],[41,10],[35,2],[57,-14],[63,-23],[69,-3],[-24,21],[-88,42],[-60,36],[-51,44],[-40,43],[-87,68],[-70,68],[-50,30],[-52,15],[-160,18],[-32,12],[-76,59],[-20,100],[-34,61],[32,77],[54,35],[318,-27],[135,4],[172,-10],[92,-19],[106,-47],[94,-53],[91,-36],[83,-48],[91,-73],[54,-34],[47,-22],[62,-18],[118,-23],[103,-7],[53,3],[57,16],[41,20],[-45,6],[-119,-3],[-82,11],[-47,23],[-50,31],[-79,59],[-60,39],[-131,63],[-97,62],[-78,60],[-7,25],[56,18],[69,13],[432,40],[258,48],[105,56],[12,13],[346,78],[244,29],[94,5],[85,13],[3,7],[-74,11],[-75,5],[-171,0],[-152,9],[-46,18],[10,28],[14,25],[46,40],[49,31],[209,88],[140,38],[41,25],[-302,-57],[-106,-41],[-106,-62],[-55,-19],[-39,5],[-35,-6],[-31,-16],[-25,-30],[-21,-44],[-19,-30],[-17,-16],[-43,-23],[-104,-44],[-242,-63],[-82,-16],[-70,-3],[-226,-35],[-68,-2],[-76,11],[33,31],[119,56],[32,25],[-77,-5],[-78,-16],[-172,-12],[-69,-23],[-66,-42],[-53,-26],[-40,-11],[-55,-6],[-202,-3],[-45,2],[-116,32],[-103,-11],[-43,2],[-78,23],[-23,14],[3,20],[45,37],[53,35],[170,78],[109,37],[158,31],[369,35],[17,26],[-374,-29],[-318,-36],[-52,-14],[-74,-35],[-235,-129],[-70,-33],[-106,-7],[-81,11],[-63,16],[-109,38],[-83,21],[-39,13],[-23,14],[-18,17],[-15,18],[27,16],[210,33],[284,-6],[128,7],[125,20],[186,51],[201,71],[40,22],[-74,5],[-54,-5],[-131,-26],[-208,-68],[-181,-24],[-448,-13],[-142,-19],[-63,4],[-47,19],[-52,34],[9,28],[107,31],[84,7],[15,7],[-119,30],[-11,15],[69,34],[148,50],[76,15],[137,10],[142,-5],[5,9],[-140,19],[-105,4],[-138,-14],[-369,-80],[-31,2],[-53,14],[15,20],[197,85],[6,13],[-141,-2],[-42,4],[-40,10],[-58,-9],[-75,-27],[-52,-12],[-31,4],[-78,33],[10,27],[62,35],[57,25],[77,23],[126,29],[90,10],[148,0],[70,13],[62,22],[78,36],[86,25],[140,20],[118,-6],[65,-18],[51,-31],[56,-24],[5,19],[46,24],[58,10],[69,-3],[61,-12],[79,-28],[63,-13],[30,0],[38,16],[99,1],[-2,6],[-32,17],[-40,12],[-352,82],[-10,18],[119,17],[74,21],[35,5],[87,43],[57,22],[105,25],[43,-7],[53,-22],[51,-14],[151,-13],[65,-14],[115,-81],[46,-26],[66,-27],[39,-10],[77,-6],[8,15],[-92,38],[-25,22],[11,18],[20,10],[28,1],[72,-17],[192,-56],[288,-67],[110,-15],[68,-24],[62,-29],[61,-20],[11,2],[-57,45],[-139,55],[-371,94],[-147,50],[-72,33],[-53,34],[-1,19],[50,21],[68,17],[85,7],[11,7],[-78,26],[-45,22],[1,16],[93,12],[57,-4],[108,-28],[91,-13],[15,8],[-94,75],[-9,17],[14,9],[33,10],[98,-5],[161,-37],[290,-18],[79,3],[-12,8],[-115,23],[-121,30],[-53,18],[-39,24],[-47,21],[-4,9],[75,16],[196,-3],[182,-24],[155,9],[97,-6],[39,-8],[70,-26],[224,-96],[23,-15],[26,-23],[27,-32],[38,-8],[74,21],[49,21],[-21,20],[-124,46],[-28,20],[-61,34],[-139,59],[-37,28],[-23,24],[383,22],[370,-20],[60,-14],[40,-19],[38,-30],[60,-30],[119,-46],[171,-29],[-33,20],[-127,51],[-58,35],[1,23],[10,18],[20,13],[144,47],[206,15],[24,-3],[161,-73],[76,-30],[53,-12],[2,5],[-74,34],[-56,18],[-6,12],[94,35],[59,9],[251,10],[28,-3],[24,-10],[59,-39],[22,-5]],[[52646,79072],[-12,-56],[-1,-44],[2,-20],[4,0],[22,-3]],[[52903,78839],[-13,-75],[-2,-41],[11,-26],[1,-21],[-3,-19],[-19,-2],[-25,11],[-21,32],[-17,-4],[-14,-8],[-7,-31],[-6,-36],[2,-21],[10,-15],[8,-34],[5,-43],[5,-20],[-5,-8],[-13,-6],[-11,5],[-20,52],[-9,20],[-15,3],[-27,-12],[-41,-29],[-17,0],[-14,6],[-13,24],[-11,47],[-4,30],[-8,-1],[-26,9],[-12,-12],[0,-48],[-3,-61],[-13,-38],[-37,-68],[-13,-29],[-6,-21],[-1,-18],[6,-32],[7,-30],[-6,-18],[-19,-9],[-14,19],[-5,32],[-30,45],[13,37],[-2,10],[-49,19],[-21,28],[-30,50],[-6,21],[2,69],[-2,17],[-4,8],[-14,0],[-20,-24],[-19,-36],[-38,-41],[-4,-8],[13,-40],[-1,-15],[-30,-63],[-6,-21],[-39,-39],[-18,-15],[-54,29],[-15,4],[-25,-20],[-34,-18],[-55,-19],[-21,14],[-9,13]],[[51950,78298],[-5,19],[-14,33],[-16,20],[-11,22],[-14,24],[-9,19],[12,64],[-9,22],[-5,32],[3,22],[-5,5],[-50,12],[-42,-4],[-29,-21],[-25,-35],[-3,-8],[2,-6],[12,-32],[-20,-35],[-32,-26],[-22,-3],[-10,5],[0,37],[18,13],[17,24],[5,34],[2,23],[-17,29],[2,17],[11,34],[6,29],[9,25],[34,42],[35,41],[5,45],[3,54],[5,13],[47,32],[11,13],[6,18],[37,60],[37,60],[7,20],[6,12],[0,10],[-4,7],[-18,5],[-6,19],[19,34],[24,21],[23,0],[9,-9],[-1,-11],[10,-12],[18,-4],[21,4],[22,13],[13,30],[7,23],[34,26]],[[52115,79258],[23,-13],[63,-4],[47,7],[29,18],[36,0],[24,-10],[4,1],[7,3],[6,9],[23,7],[3,8],[-1,8],[-4,4],[-28,-4],[-11,6],[-2,15],[9,25],[20,20],[18,5],[12,-5],[31,-38],[7,-2],[5,7],[6,4],[11,-7],[11,-24],[2,-4],[69,9],[15,0],[47,-42],[48,-43]],[[31229,19648],[-10,-1],[-25,11],[-36,4],[-5,5],[0,8],[4,9],[20,7],[60,-6],[8,-4],[2,-7],[-10,-19],[-8,-7]],[[31308,19713],[-10,-4],[-7,10],[-12,8],[-46,16],[-1,10],[5,14],[9,12],[18,13],[14,32],[7,-3],[6,-13],[11,-44],[14,-32],[-2,-11],[-6,-8]],[[31535,20029],[-22,-26],[-16,2],[-6,9],[-1,12],[3,12],[7,11],[16,14],[5,2],[24,-14],[-10,-22]],[[31366,20072],[-8,-22],[-17,-29],[-24,-23],[-23,-6],[-16,12],[-9,20],[-4,21],[-5,11],[-9,2],[-11,0],[-14,-8],[-29,-29],[-13,-8],[-9,-2],[-84,22],[-8,8],[-10,20],[-11,59],[-35,52],[54,29],[65,0],[125,-22],[49,-5],[39,-50],[6,-30],[1,-22]],[[30638,20207],[223,-57],[68,35],[55,-1],[16,-48],[-55,-49],[-5,-16],[8,-13],[57,-8],[14,-16],[13,-20],[-11,-31],[-1,-14],[6,-14],[42,-46],[18,-24],[9,-23],[3,-40],[-1,-32],[-9,-4],[-21,10],[-20,18],[-18,46],[-12,10],[-36,9],[-35,22],[-28,-1],[-25,10],[-23,-9],[-8,15],[-10,31],[0,14],[12,48],[0,13],[-7,1],[-26,-10],[-11,7],[-29,35],[-11,7],[-29,3],[-17,-62],[-1,-16],[17,-39],[33,-61],[-17,-1],[-47,19],[-13,11],[-14,31],[-28,18],[-10,11],[-3,13],[-1,40],[-6,6],[-40,-11],[-8,10],[-3,17],[-6,9],[-26,16],[-2,9],[11,12],[7,28],[10,104],[51,-22]],[[30280,20237],[13,-37],[4,-7],[35,-14],[15,9],[37,4],[23,14],[32,7],[38,-90],[-4,-28],[-30,-30],[-20,-6],[-19,9],[2,15],[-4,13],[-13,17],[-12,-1],[-19,-13],[-10,2],[-19,14],[-35,10],[-7,13],[0,19],[-7,9],[-36,30],[-23,26],[-20,4],[-7,-3],[-7,-13],[-17,-12],[-5,2],[-6,10],[-3,14],[7,29],[11,3],[49,-6],[30,-13],[27,0]],[[30169,20718],[62,-46],[40,0],[0,-28],[5,-49],[-6,-20],[-16,-21],[-9,-28],[-7,-5],[-45,35],[-47,48],[-24,-9],[-31,12],[-25,-3],[-16,-27],[-36,-14],[-7,54],[-33,51],[-33,41],[18,63],[22,10],[20,21],[81,-22],[42,-19],[45,-44]],[[29743,21035],[8,-46],[4,-9],[20,7],[34,4],[57,-17],[6,-6],[24,-51],[19,-22],[28,-47],[-28,-32],[-17,-45],[-1,-23],[-11,-14],[-17,-13],[-26,-27],[-31,-3],[-31,-14],[-15,-12],[-8,-1],[-10,7],[-11,13],[-4,15],[22,14],[28,50],[5,52],[-30,9],[-18,-7],[-14,0],[-15,16],[-9,-24],[-4,-24],[4,-36],[-3,-11],[-10,-7],[-26,14],[-26,24],[-2,14],[6,48],[-1,25],[-5,37],[-3,3],[-10,0],[-31,-7],[-31,46],[-16,49],[-57,14],[44,69],[67,10],[22,-35],[74,-24],[-4,37],[1,13],[10,16],[6,2],[9,-12],[14,-5],[7,-11],[6,-23]],[[29337,21357],[5,-5],[10,1],[16,-9],[58,-11],[52,-27],[27,-26],[35,-8],[29,-32],[13,-8],[15,-2],[39,-60],[2,-7],[44,-47],[2,-7],[-25,-3],[-51,22],[-25,1],[-19,7],[-4,4],[-4,27],[-5,13],[-49,63],[-21,14],[-35,12],[-40,-8],[-28,8],[-9,-3],[-40,50],[-40,42],[-17,50],[-25,38],[-1,11],[12,9],[27,-22],[27,-37],[15,-14],[10,-36]],[[30929,20245],[-41,0],[-12,-13],[-66,-19],[-112,29],[-28,26],[-38,58],[-13,-15],[-36,-25],[-36,-19],[-30,-2],[-28,24],[-6,12],[-6,3],[-60,-34],[-66,34],[-53,21],[-84,12],[-59,43],[-109,-4],[-19,14],[-7,42],[6,20],[23,11],[6,24],[24,-6],[30,-31],[9,1],[20,29],[30,26],[11,3],[54,-32],[22,4],[32,14],[5,12],[5,22],[9,13],[28,6],[27,-12],[3,-38],[-4,-41],[36,-11],[43,1],[30,-15],[4,25],[-48,65],[-20,40],[-26,24],[-35,12],[-28,75],[1,66],[-3,64],[62,36],[-14,55],[21,41],[25,16],[24,-153],[18,-54],[-23,-11],[-47,0],[27,-75],[43,-25],[37,-56],[1,-41],[20,-18],[50,-1],[34,8],[16,27],[19,8],[33,-33],[57,-25],[15,-17],[11,-30],[0,-31],[3,-17],[17,9],[23,42],[12,15],[14,7],[8,10],[1,12],[-42,31],[-220,141],[-28,56],[-18,71],[1,73],[16,23],[39,29],[72,41],[84,58],[10,11],[-1,37],[-10,25],[-33,18],[-35,4],[-33,-2],[-33,-7],[-60,-39],[-34,2],[-32,21],[-24,42],[-13,57],[0,36],[5,33],[15,34],[19,15],[18,-2],[17,8],[10,12],[8,16],[-3,13],[-6,12],[-27,24],[-10,23],[-23,38],[12,10],[41,6],[28,-26],[26,-30],[16,0],[15,12],[33,39],[28,49],[25,56],[21,34],[23,3],[69,-105],[24,-4],[80,57],[9,-4],[28,-28],[8,-12]],[[29405,21928],[-9,-6],[-30,14],[-16,12],[-24,30],[-3,31],[-11,38],[7,0],[25,-15],[10,-11],[13,-24],[40,-34],[5,-10],[-1,-13],[-6,-12]],[[29216,22102],[11,-112],[9,-16],[28,-8],[31,-57],[1,-16],[-37,-96],[-8,-69],[-43,5],[-19,68],[-27,66],[-10,77],[-15,66],[27,38],[26,-8],[1,50],[25,12]],[[29289,22305],[-1,-48],[-8,-15],[-8,-5],[-20,15],[-11,1],[-18,-25],[-16,-13],[-23,3],[-31,17],[-27,-72],[-13,-25],[-27,-33],[-3,39],[17,60],[8,40],[16,60],[31,-22],[44,22],[41,41],[34,0],[12,-22],[3,-18]],[[29082,22649],[-7,-53],[-23,5],[-7,13],[-4,34],[-7,16],[9,34],[7,37],[-2,29],[34,-2],[41,-7],[11,-8],[-12,-26],[-12,-15],[-25,-9],[-3,-48]],[[29151,22870],[-54,-46],[-16,19],[-39,0],[10,50],[4,37],[6,14],[2,32],[12,58],[32,-19],[24,-6],[33,-19],[36,-13],[10,-50],[-34,-23],[-26,-34]],[[29137,23711],[-3,-46],[-41,-88],[-35,-52],[-32,-41],[-21,0],[-17,20],[19,33],[24,32],[-8,42],[-7,12],[-10,5],[-17,22],[5,33],[10,15],[14,12],[12,-7],[54,23],[17,18],[32,4],[4,-37]],[[29312,23532],[2,-85],[-4,-85],[-11,-104],[2,-21],[12,-5],[4,-13],[-4,-55],[-7,-42],[-13,-35],[-7,-41],[-7,-9],[-30,-7],[-17,4],[-13,47],[-4,29],[1,38],[-16,51],[-1,19],[6,34],[14,16],[2,52],[6,15],[15,21],[2,9],[-1,8],[-5,1],[-61,-64],[-5,-18],[-3,-24],[-1,-84],[-10,-49],[-10,-9],[-28,-2],[-37,5],[-42,44],[-27,-12],[-6,54],[14,44],[51,-4],[8,77],[-16,18],[-18,32],[-10,28],[9,21],[30,31],[15,3],[15,-17],[36,13],[-2,49],[-32,22],[7,37],[41,35],[24,36],[2,41],[-10,40],[3,16],[20,34],[29,16],[13,-2],[26,-24],[24,-3],[5,-7],[5,-26],[15,-193]],[[29025,23753],[-32,-1],[-7,103],[36,148],[3,57],[-12,43],[-5,35],[3,14],[47,30],[14,-32],[18,-83],[33,-119],[-1,-114],[-18,-28],[-58,-29],[-21,-24]],[[29287,23852],[-6,-14],[-34,9],[-59,-15],[-25,52],[-11,83],[-8,18],[-14,47],[-8,31],[-15,48],[-6,51],[-3,15],[13,31],[62,29],[22,48],[19,-6],[-5,-98],[11,-33],[22,-28],[3,-11],[4,-35],[11,-54],[13,-25],[4,-15],[0,-14],[-5,-18],[15,-96]],[[29135,24286],[-20,-7],[-3,19],[-18,31],[16,21],[31,21],[24,-2],[22,-17],[3,-19],[-38,-25],[-9,-14],[-8,-8]],[[29357,25523],[-15,-26],[-27,-12],[-27,20],[-32,-9],[-3,43],[12,36],[24,43],[18,58],[-2,81],[14,18],[8,29],[31,18],[7,-61],[-8,-107],[20,-64],[3,-21],[-4,-25],[-19,-21]],[[29155,25984],[-7,-9],[-9,3],[-7,18],[-5,31],[10,12],[7,0],[9,-17],[4,-26],[-2,-12]],[[29546,26024],[-9,-7],[-8,1],[-8,20],[-3,26],[-18,39],[-5,18],[0,22],[10,32],[16,9],[10,-2],[13,-37],[3,-40],[4,-42],[-5,-39]],[[29726,26048],[-68,-46],[-33,15],[-13,34],[-7,29],[-7,48],[12,26],[24,37],[10,24],[4,28],[-2,27],[4,25],[14,9],[50,-28],[52,-43],[18,-29],[3,-23],[-22,-52],[-15,-42],[-24,-39]],[[29518,26270],[-14,-25],[-22,-4],[-33,-29],[-4,-25],[-1,-30],[23,-37],[11,-43],[14,-64],[10,-61],[-1,-19],[2,-31],[17,-50],[1,-22],[-1,-22],[-7,-41],[-5,-5],[-17,-4],[-1,-25],[-4,-8],[-46,-3],[-23,12],[2,74],[-29,30],[-20,49],[-23,85],[-19,27],[-22,67],[-33,58],[38,36],[-6,64],[22,22],[33,23],[25,-18],[22,6],[10,16],[-3,65],[7,52],[25,26],[26,3],[10,-29],[13,-28],[32,-23],[-1,-29],[-8,-40]],[[29497,26597],[6,-29],[-13,-4],[-19,5],[-10,-23],[-5,-4],[-45,20],[-7,9],[1,29],[48,3],[31,19],[4,-3],[9,-22]],[[29258,26723],[-39,-10],[-9,17],[0,15],[7,12],[20,7],[13,-9],[7,-15],[2,-12],[-1,-5]],[[29507,26874],[-21,-12],[-19,-3],[-20,9],[-35,-1],[-34,22],[-32,32],[-9,19],[3,26],[24,61],[22,116],[15,166],[-12,63],[1,26],[6,31],[2,33],[-1,32],[3,30],[24,64],[4,29],[0,31],[11,64],[-3,21],[-9,18],[7,16],[85,-47],[56,-11],[3,-49],[11,-38],[7,-68],[8,-16],[-4,-49],[-26,-21],[2,-45],[15,-43],[-22,-15],[-23,-9],[-6,-11],[-17,-10],[-20,-23],[6,-21],[26,-48],[29,-33],[16,-49],[21,-51],[-10,-33],[-19,-46],[-31,-31],[-27,-19],[3,-76],[-10,-31]],[[28110,32461],[-50,-12],[-2,3],[3,10],[11,18],[14,21],[3,1],[5,-2],[6,-4],[15,-14],[4,-10],[-1,-8],[-8,-3]],[[19644,36209],[-43,-18],[2,32],[11,27],[31,-16],[15,-3],[-16,-22]],[[30988,21683],[-157,54],[-35,30],[-30,3],[-57,-36],[-32,-88],[-16,-25],[-40,-23],[-40,-5],[-134,-85],[-48,-7],[-33,-23],[-32,-32],[-12,-70],[5,-42],[-36,-152],[-9,-85],[0,-43],[10,-70],[-13,-120],[-25,-27],[-59,-33],[-41,24],[-69,22],[-50,46],[-63,33],[-21,19],[-56,93],[-6,31],[-4,39],[30,56],[16,4],[46,-2],[39,9],[25,-30],[6,-65],[-10,-34],[-10,-22],[3,-16],[28,23],[14,145],[94,72],[31,42],[30,66],[5,18],[2,25],[-20,20],[-44,27],[-142,-137],[-64,-36],[-42,-40],[-50,-70],[-9,-21],[-11,-46],[-5,-52],[-49,24],[-76,74],[-15,27],[15,39],[23,31],[2,107],[6,38],[16,30],[29,33],[14,7],[12,-14],[2,-25],[48,2],[93,94],[38,3],[51,-22],[57,13],[11,10],[11,22],[-42,26],[-41,13],[-115,10],[-25,-10],[-34,-51],[-11,13],[-7,25],[-39,18],[-19,-4],[-18,-24],[3,-37],[-10,-41],[-36,-40],[-25,-63],[1,-49],[-1,-26],[-9,-14],[-19,-16],[-60,11],[-34,52],[-13,35],[-38,39],[83,47],[29,27],[27,61],[20,39],[-14,27],[-17,0],[1,-43],[-18,-36],[-38,17],[-57,-52],[-35,14],[-56,-16],[-28,28],[-6,36],[10,37],[-10,64],[-16,15],[-16,-4],[-7,38],[-17,66],[-8,18],[-8,31],[9,7],[19,-9],[17,-19],[26,-3],[57,-43],[24,10],[13,10],[5,36],[0,34],[10,0],[32,-43],[21,4],[36,-12],[19,5],[34,16],[54,48],[27,49],[14,7],[16,-7],[12,-14],[0,-34],[12,-32],[17,-26],[5,-32],[-3,-31],[-31,-44],[-6,-15],[11,-16],[12,8],[18,21],[10,30],[2,16],[1,22],[-1,27],[-25,76],[-3,18],[0,35],[28,32],[8,25],[2,48],[-15,33],[-61,77],[-101,76],[-12,-8],[-8,-14],[10,-10],[13,-5],[90,-63],[24,-37],[15,-10],[19,-24],[-5,-36],[-91,-35],[-72,-75],[-55,-46],[-37,17],[-18,47],[-19,60],[-28,35],[-16,-4],[-13,7],[-11,18],[-21,-15],[-49,42],[-13,18],[35,58],[39,-22],[9,165],[-12,37],[-51,41],[-24,-5],[-34,5],[-23,19],[-26,8],[-22,11],[-29,25],[-34,14],[-47,104],[-20,55],[-11,60],[72,2],[42,9],[10,26],[-15,47],[-20,38],[15,36],[21,27],[22,-12],[56,-61],[9,-42],[39,-125],[10,-12],[4,-11],[82,-71],[11,1],[-5,59],[23,81],[23,26],[11,0],[1,13],[-22,33],[11,45],[-7,1],[-19,-28],[-40,-140],[-24,-26],[-33,64],[-18,45],[-10,17],[4,71],[65,-14],[-22,23],[-77,42],[-19,20],[-14,7],[-25,49],[-32,41],[55,74],[27,52],[88,-27],[17,16],[-15,38],[-17,-12],[-27,24],[-43,72],[2,36],[7,67],[17,14],[36,14],[41,-22],[17,-17],[16,8],[-16,49],[-27,19],[-29,35],[3,39],[9,33],[8,35],[5,50],[-3,38],[8,18],[13,8],[1,15],[-26,-3],[-9,-49],[-3,-45],[-19,-35],[-7,-41],[-5,-48],[-10,-55],[-23,21],[-13,21],[-5,15],[3,28],[-6,175],[-1,147],[11,114],[32,45],[14,13],[13,-6],[20,1],[14,16],[-45,28],[-28,-16],[-20,-22],[-37,17],[-7,58],[-21,51],[-4,65],[2,93],[51,-8],[42,-18],[110,2],[90,-90],[40,12],[-2,18],[-30,22],[-19,51],[-11,14],[-6,31],[-1,35],[-23,129],[-9,-3],[-9,-44],[-18,-74],[-26,-36],[-40,-15],[-40,-8],[-34,14],[-8,31],[1,35],[-15,17],[-39,16],[-11,8],[-13,32],[19,49],[15,29],[18,-6],[18,-13],[23,-38],[22,-7],[25,30],[5,21],[-16,13],[-14,5],[-23,16],[-44,58],[22,59],[52,68],[16,16],[-14,57],[16,63],[-16,51],[-29,56],[-39,12],[-8,-16],[-2,-23],[6,-17],[-3,-12],[-9,0],[-50,12],[-33,37],[-54,34],[-7,26],[-6,39],[19,67],[-10,1],[-35,-52],[-53,-27],[-40,-9],[-17,-21],[-7,-17],[11,-10],[22,-3],[17,-64],[-4,-25],[-8,-16],[-19,-4],[-38,45],[-20,51],[0,40],[14,54],[61,74],[17,31],[36,34],[48,78],[41,43],[-20,36],[-21,53],[2,75],[84,30],[37,-13],[47,3],[26,18],[18,3],[40,21],[17,29],[4,22],[0,20],[-4,23],[-7,62],[7,21],[17,24],[22,8],[10,-2],[27,-22],[-6,-32],[-10,-39],[-22,-153],[-11,-35],[-17,-30],[12,-62],[-18,-44],[-76,-47],[-10,-2],[6,-17],[44,4],[34,10],[34,39],[11,60],[14,117],[18,17],[22,3],[11,-27],[-4,-62],[0,-60],[-28,-176],[-35,-71],[-4,-19],[2,-22],[27,3],[21,38],[15,49],[15,68],[-2,49],[5,30],[6,100],[11,50],[-1,71],[-19,26],[-26,16],[-7,43],[14,86],[50,-3],[48,58],[31,22],[18,-5],[62,-56],[12,-1],[-2,21],[-9,14],[-25,19],[-45,60],[-61,10],[11,78],[12,72],[30,9],[49,24],[94,107],[17,81],[4,91],[-45,23],[-48,60],[-39,31],[-35,40],[7,59],[5,97],[43,21],[20,132],[-29,102],[7,76],[38,64],[6,45],[11,49],[33,5],[1,27],[-3,49],[-22,58],[-1,80],[21,94],[33,-6],[6,4],[-23,57],[-19,63],[3,25],[18,21],[21,12],[23,-32],[33,-103],[5,26],[-13,105],[-11,130],[-35,-17],[-31,9],[-12,20],[-12,30],[11,35],[11,27],[23,33],[49,12],[35,42],[11,87],[-11,-9],[-19,-76],[-32,-26],[-16,4],[-19,14],[-38,67],[-21,15],[-20,2],[-17,-17],[-44,-117],[-19,-20],[-78,-9],[-28,14],[-31,17],[3,29],[10,31],[17,16],[1,17],[-24,5],[-28,32],[-13,41],[-5,73],[-25,116],[-5,83],[17,59],[38,232],[12,119],[20,104],[0,68],[52,63],[20,38],[45,211],[6,114],[-71,346],[-11,66],[-3,82],[17,136],[2,52],[-15,75],[-40,122],[-1,62],[17,64],[-16,80],[8,49],[9,39],[63,-21],[29,10],[15,23],[12,65],[6,103],[4,44],[5,64],[31,26],[11,61],[26,84],[26,238],[27,58],[27,68],[-11,100],[18,46],[15,34],[14,61],[19,58],[46,83],[11,101],[35,176],[7,112],[11,76],[-3,71],[21,86],[20,73],[7,40],[46,96],[8,77],[-17,52],[0,81],[-13,112],[30,41],[12,31],[39,179],[-3,70],[11,87],[-25,103],[-4,231],[-14,179],[-23,188],[2,105],[-15,131],[0,76],[11,171],[74,108],[15,121],[9,163],[-3,119],[-8,54],[-36,87],[-10,157],[7,41],[31,44],[21,61],[11,95],[23,75],[9,181],[18,143],[10,51],[30,63],[5,17],[5,48],[-2,113],[5,70],[23,136],[3,63],[26,141],[6,101],[12,53],[-5,60],[8,134],[-18,76],[-4,44],[22,137],[16,34],[24,64],[11,72],[2,45],[-32,227],[-4,78],[7,180],[11,116],[-3,93],[3,48],[6,59],[21,73],[5,52],[-7,21],[-26,27],[-21,66],[-2,65],[7,47],[2,67],[31,13],[17,37],[16,70],[20,169],[9,209],[12,125],[8,63],[7,130],[12,85],[2,78],[-2,60],[-30,304],[0,112],[13,174],[0,244],[-2,57],[-12,54],[-3,72],[-18,127],[-17,253],[0,134],[-7,114],[-16,30]],[[30439,41275],[11,7],[27,5],[27,0],[35,24],[37,44],[24,65],[10,60],[0,52],[-11,66],[-3,47],[13,22],[34,9],[27,44],[21,39]],[[80802,63359],[13,-26],[9,-37],[8,-68],[4,-63],[-28,-40],[-25,-16],[-50,-154],[-11,-48],[-8,-21],[-3,-21],[1,-21],[-13,-74],[-12,-91],[-7,-37],[-14,-28],[-19,-15],[-11,-2],[-11,-8],[-27,-49],[-30,-38],[5,-17],[0,-16],[-13,-18],[-14,3],[-42,-14],[-16,-28],[-16,-51],[-6,-7],[-25,-12],[-20,-5],[-33,36],[-16,11],[-44,15],[-43,24],[-30,28],[-61,69],[-7,123],[-11,67],[0,24],[4,206],[4,22],[8,20],[27,46],[31,37],[44,76],[33,35],[27,50],[-16,-2],[-12,6],[12,43],[12,23],[14,12],[29,-9],[27,9],[19,38],[19,8],[71,-12],[49,17],[24,35],[12,2],[36,-10],[14,-37],[-1,25],[1,23],[7,-2],[47,-45],[0,55],[3,15],[15,23],[7,-1],[19,-44],[17,-26],[23,-13]],[[80662,63993],[10,-20],[28,14],[5,-25],[-1,-12],[-9,-29],[-23,22],[-23,-5],[-16,2],[-5,14],[13,28],[21,11]],[[81289,64308],[-27,-12],[-6,2],[10,30],[24,21],[-1,-41]],[[81330,64286],[-6,-11],[-8,20],[-2,30],[-6,16],[14,21],[6,22],[15,-4],[7,-7],[-14,-23],[-3,-10],[-3,-54]],[[81542,64979],[3,-27],[-22,41],[-6,2],[-11,15],[-6,25],[17,1],[16,-30],[9,-27]],[[82828,65953],[-10,-34],[-16,5],[0,25],[-4,7],[5,23],[3,7],[18,-20],[4,-13]],[[83283,66507],[-21,-27],[-13,13],[0,35],[7,33],[-8,23],[7,27],[16,9],[5,-17],[9,-10],[3,-9],[0,-18],[-9,-30],[7,-16],[-3,-13]],[[83680,68021],[-24,-13],[-9,0],[0,42],[20,39],[8,-13],[5,-21],[0,-34]],[[83936,68939],[-1,-11],[-24,37],[-11,7],[5,21],[16,5],[13,-47],[2,-12]],[[84000,69062],[-2,-27],[-8,4],[-10,47],[6,12],[14,-3],[0,-33]],[[83970,69103],[-4,-12],[-34,33],[-37,7],[-13,29],[-2,46],[39,-2],[48,-41],[11,-21],[-8,-39]],[[83850,69983],[-23,-16],[-72,49],[-51,55],[-31,65],[-4,28],[35,-5],[35,-24],[8,-36],[14,-11],[9,-21],[65,-49],[10,-15],[5,-20]],[[86257,76345],[-8,20],[-14,6],[-25,29],[-18,31],[-13,34],[0,74],[-2,11],[-25,15],[-7,22],[-12,10],[-17,-6],[-12,7],[-10,12],[-12,1],[-10,-19],[-6,-41],[-17,-68],[-2,-40],[-7,-59],[-8,-74],[-6,-16],[-19,-2],[-7,-5],[-10,-25],[-12,-4],[-11,14],[-17,15],[-16,2],[-14,-15],[-17,-32],[-10,-26],[-3,-24],[-3,-30],[-17,-29],[-16,-15],[-32,-42],[-11,-18],[-23,0],[-25,2],[-34,-12],[-56,-6],[-33,9],[-41,-8],[-32,-14],[-4,-21],[1,-30],[6,-20],[8,-14],[13,-41],[14,-40],[21,-25],[9,-28],[1,-26],[-10,-32],[-16,-42],[-14,-27],[-10,1],[-17,16],[-11,19],[-26,7],[-64,-12],[-32,8],[-15,16],[-27,1],[-42,21],[-25,6],[-12,14],[-2,30],[-12,21],[-7,25],[-15,32],[-15,15],[-14,7],[-16,-19],[-16,-17],[-12,4],[-6,-5],[-7,-14],[-27,-30],[-6,-27],[-11,-56],[-7,-59],[-7,-21],[-10,-3],[-11,-18],[-24,-55],[-20,-51],[-31,-34],[-14,-31],[-7,-29],[-22,-40],[-32,-7],[-25,-12],[-15,-3],[-11,-16],[-9,-24],[-3,-10],[-15,0],[-14,-21],[-35,-48],[-28,-9],[-36,-31],[-31,-25],[-13,-13],[-4,-15],[-4,-19],[-16,-4],[-14,1],[-33,-44],[-17,-37],[-64,-79],[-26,-45],[-7,-58]],[[84544,74886],[-3,5],[-23,-51],[-45,-48],[-96,-10],[-30,34],[-11,-24],[-9,-31],[-25,-11],[-39,-2],[-22,-21],[-12,-23],[-54,-8],[-20,-31],[-34,-11],[-140,-135],[-30,-57],[-29,-66],[-21,-34],[-18,-23],[-16,-10],[-17,-23],[-16,-3],[-17,11],[-19,-4],[-12,-28],[10,-36],[-5,-16],[-37,-19],[-55,-13],[-23,-24],[-8,-14],[-12,-7],[-12,47],[-4,62],[23,15],[20,8],[116,86],[-14,64],[10,28],[26,45],[17,23],[-10,8],[-75,-15],[-44,1],[-22,5],[7,39],[-4,38],[-5,15],[38,44],[18,11],[13,-1],[-1,27],[-11,40],[12,52],[79,61],[19,55],[31,51],[58,128],[4,22],[16,60],[3,24],[-26,35],[-11,49],[-78,89],[-7,76],[-7,-3],[-12,-53],[-10,-18],[-36,-1],[-18,20],[-100,13],[-25,-34],[-23,-53],[-22,-38],[-23,-20],[-19,-35],[-81,-206],[-31,-16],[-144,-124],[-72,-49],[-56,-87],[-19,-52],[-17,-58],[-10,-88],[-51,-107],[-18,-23],[-18,-9],[-23,3],[-21,-7],[-35,10],[-43,-34],[-48,-29],[-42,73],[-30,19],[-48,-21],[-23,-33],[-47,-162],[-17,-93],[1,-38],[27,-116],[31,-64],[69,-74],[147,-51],[34,18],[37,0],[39,-48],[24,-80],[3,-55],[0,-19],[9,-16],[5,-27],[-15,-23],[-12,-12],[-10,-84],[0,-94],[12,-31],[32,-44],[49,-36],[45,-8],[86,17],[35,57],[-2,24],[1,32],[76,83],[43,74],[-7,19],[-8,13],[8,8],[23,5],[106,76],[83,-62],[47,-72],[47,-13],[33,-36],[37,-32],[49,-2],[41,-7],[13,30],[13,19],[14,-4],[17,-38],[47,-30],[43,2],[30,11],[18,-14],[-26,-49],[4,-79],[-20,-25],[-19,-40],[11,-26],[10,-12],[-1,-32],[-17,-18],[-32,-48],[-19,1],[-9,9],[-6,18],[-4,27],[-12,18],[-31,7],[-33,-6],[-73,-71],[-71,-57],[-75,-45],[-25,-28],[-18,-8],[-30,22],[-19,-2],[-4,-14],[24,-40],[6,-31],[-3,-23],[-13,-11],[-20,18],[-18,-25],[-8,-42],[0,-99],[-12,-22],[-33,-12],[-35,-32],[-13,15],[-5,17],[4,46],[-4,22],[-16,-1],[-25,-13],[-18,-31],[-6,-18],[24,-58],[23,-6],[6,-13],[-19,-29],[-45,-42],[-8,-36],[-13,-34],[-19,-27],[-13,-28],[-15,-15],[-25,-17],[-31,-68],[-23,-65],[-27,-32],[-21,-109],[-38,-58],[-14,-94],[10,-58],[41,1],[21,-21],[44,-76],[52,-49],[53,-28],[66,-71],[19,-29],[15,-61],[29,-174],[20,-86],[2,-46],[31,-85],[33,-146],[37,-127],[8,-100],[-13,-45],[1,-59],[37,-55],[85,-63],[13,-18],[17,-31],[0,-95],[13,-31],[12,-18],[51,-41],[21,-33],[23,-54],[6,-48],[3,-65],[-29,-2],[-23,7],[-91,84],[-24,3],[-33,-12],[-48,16],[-51,93],[-36,28],[-39,15],[-93,-81],[-24,6],[-7,-9],[-11,-14],[44,-17],[43,26],[42,39],[60,-21],[10,-35],[10,-59],[42,-40],[33,-18],[41,-52],[41,-83],[86,-95],[35,-90],[13,-59],[12,-83],[-30,-27],[-26,-4],[-41,-13],[-30,-29],[-31,-52],[-86,-82],[-17,-51],[-11,-44],[-21,-22],[-54,21],[-50,-2],[-56,-60],[-14,-24],[9,4],[9,8],[25,-9],[40,32],[38,-98],[76,16],[71,82],[27,1],[23,-13],[25,-32],[69,-142],[37,-16],[37,-33],[20,-4],[18,-10],[-49,-52],[-64,-113],[-28,-27],[-19,-30],[51,15],[37,54],[18,13],[15,-12],[7,-67],[-14,-205],[-18,-3],[-17,56],[-20,17],[-18,-11],[-33,0],[-13,-25],[-11,-36],[20,-7],[40,-62],[4,-33],[-11,-22],[-28,9],[34,-46],[-9,-48],[-11,-19],[-20,-12],[-12,-42],[18,-69],[18,-89],[2,-43],[-28,18],[-43,-54],[-23,-4],[-16,71],[-19,-11],[-13,-21],[-18,-77],[-21,-69],[-19,-19],[-22,5],[-18,-2],[5,-18],[19,-23],[0,-27],[-41,-85],[-7,-32],[1,-28],[-21,-34],[11,-57],[-6,-40],[-19,-54],[-19,-36],[-24,-58],[-29,-33],[-39,-122],[-11,-61],[-3,-63],[-13,-21],[-20,-28],[-24,14],[-1,42],[-10,4],[-6,27],[-2,35],[3,28],[-10,-8],[-6,-33],[-16,-27],[-16,11],[-18,22],[1,-32],[9,-31],[4,-32],[24,-6],[17,-37],[13,-55],[2,-21],[10,-25],[1,-21],[-23,-20],[-29,-36],[-35,-63],[-29,-42],[-26,0],[-15,5],[-23,24],[-26,10],[35,-85],[19,-15],[24,3],[23,32],[33,-3],[8,-49],[-9,-55],[-18,-72],[-3,-62],[22,-88],[1,-27],[-9,-13],[-26,23],[-21,29],[-22,-7],[-22,12],[-23,-10],[-10,-21],[7,-34],[20,-28],[12,-43],[-14,-15],[-58,10],[-14,-8],[-17,-47],[11,-71],[-13,-43],[-24,-11],[-32,-35],[-19,-8],[1,-15],[14,-16],[8,-21],[-18,-72],[-26,-23],[-42,12],[-32,-17],[-28,31],[-30,1],[-20,-39],[-2,-45],[-20,-4],[-11,3],[-15,-3],[2,-24],[8,-21],[41,-10],[7,-30],[2,-47],[-43,-80],[-18,-54],[-27,1],[-20,-44],[-11,-59],[-14,12],[-31,-9],[-10,-29],[8,-11],[1,-20],[-13,-67],[-14,-18],[-6,27],[-4,42],[-11,3],[-18,-39],[-22,-28],[-18,-11],[-14,26],[-34,13],[-13,-112],[-29,-40],[-13,-13],[-23,-4],[15,-15],[5,-29],[-9,-28],[-23,-6],[-13,-22],[-5,-100],[-14,-35],[-35,-3],[-26,24],[-8,-19],[-4,-17],[-14,-18],[-26,-5],[-59,-45],[-26,13],[-32,17],[-23,-17],[-7,-34],[-10,-27],[-32,0],[-26,33],[-26,24],[-29,-20],[-22,-42],[-27,-14],[-5,-26],[-12,-13],[-29,5],[-11,65],[-16,9],[-16,-32],[-6,-26],[-8,-19],[3,-53],[-16,-1],[-21,32],[-23,6],[-20,-30]],[[81740,64827],[-11,8],[-11,6],[-18,0],[-7,-8],[-13,-5],[-9,-16],[-1,-2]],[[81670,64810],[-23,11],[-29,44],[-20,73],[-26,39],[-12,35],[-4,62],[-5,29],[2,33],[7,29],[-28,-15],[-20,-27],[4,-34],[-5,-32],[-31,-16],[2,-14],[2,-14],[24,-43],[5,-36],[10,-20],[19,-56],[-1,-110],[11,-31],[-4,-30],[-7,-42],[-1,0],[-6,12]],[[81534,64657],[-9,-2],[-3,-14],[-1,-13]],[[81521,64628],[-1,-1],[-16,-9],[-14,-8],[-11,-11],[-17,-32],[-33,-8],[-16,76],[-23,-51],[-6,-104],[-9,-18],[-14,-15],[-26,37],[-23,-25],[-18,-25],[-8,-22],[-13,-25],[-25,24],[-21,36],[5,27],[-2,17],[-10,14],[-10,-2],[5,-35],[4,-67],[-10,-19],[-14,-15],[-31,12],[-21,25],[-26,21],[-22,4],[-5,-42],[-15,-35],[-13,-4],[-14,6],[-18,-37],[-8,-27],[-22,-29],[-58,-13],[-21,-29],[-27,5],[-21,-7],[-13,2],[-10,15],[-13,0],[-5,-47],[-33,-20],[-30,-5],[-33,-62],[-24,-37],[-17,-4],[-13,13],[-7,56],[-6,6],[-4,-52],[-6,-43],[-12,-24],[-38,-54],[-11,-54],[7,-49],[51,-12],[7,-27],[-5,-22],[-13,-19],[-3,-28],[55,-88],[2,-34],[-9,-19],[-10,-41],[-29,-35],[-62,-18],[-51,18],[-16,40],[1,28],[13,-8],[14,3],[-4,25],[-6,16],[-24,23],[-19,62],[4,51],[-11,40],[-11,33],[-12,21],[-6,25],[12,78],[-7,45],[22,56],[6,63],[39,22],[3,60],[-29,2],[-19,44],[-5,-18],[-15,-2],[-26,84],[-8,11],[-12,2],[6,-90],[-30,-33],[-25,-15],[-35,-6],[-20,-11],[-18,9],[4,27],[10,33],[-9,27],[-20,20],[-30,-1],[-21,6],[-20,-2],[-8,12],[-19,42],[-17,26],[-7,26],[7,31],[-6,18],[-32,2],[1,-43],[3,-52],[9,-39],[-6,-22],[-16,-15],[-17,42],[-8,10],[-9,-2],[-6,-41],[-15,-37],[-28,4],[-22,-23],[-26,-10]],[[79992,64232],[-18,30],[-30,49],[-12,6],[-33,-24],[-47,-9],[-10,25],[-23,-19],[-22,59],[-26,3],[-32,45],[-12,23],[-4,34],[-10,18],[-12,-3],[-14,18],[-23,18],[-18,11],[-9,-9],[-9,-4],[-2,23],[1,68],[-2,60],[-5,28],[-12,20],[-11,10],[-4,31],[4,61],[8,42],[15,7],[19,30],[9,42],[12,39],[-43,55],[-23,20],[-25,-9],[-31,-17],[-17,-4],[-8,7],[-18,50],[-10,8],[-22,3],[-19,0],[-11,-22],[-16,-7],[-17,-1],[-17,27],[-25,35],[-40,24],[-5,29],[-10,34],[-15,31],[-25,42],[-21,21],[-10,-13],[-14,-24],[-53,-50],[-24,-19],[-13,-14],[-10,-21],[-4,-51],[-5,-58],[-15,-29],[-15,-22],[-15,-2],[-15,1],[-15,-9],[-43,-58],[-20,5],[-17,32],[-7,24],[-19,-6],[-25,-27],[-11,-50],[-6,-46],[-6,-20],[-8,-6],[-8,-2],[-77,134],[-4,7],[-14,-28],[-13,-70],[-9,-14],[-6,6],[-32,90],[-8,9],[-7,-3],[-10,-30],[-20,-43],[-15,-26],[-1,-29],[-17,-26],[-19,-26],[-7,-2],[-13,10],[-17,34],[-12,36],[-30,35],[-34,30],[-23,23],[-13,6],[-12,-10],[-6,-15],[-8,-35],[-20,-58],[-19,-46],[-17,-30],[-13,-20]],[[78368,64734],[-10,19],[-19,15],[-22,1],[-28,-30],[-23,59],[-6,3],[-9,-5],[-10,-14],[-7,-33],[-7,-45],[-14,-29],[-13,-13],[4,-26],[7,-27],[-1,-24],[5,-38],[7,-38],[27,-61],[10,-33],[2,-27],[1,-100],[-1,-41],[-5,-80],[0,-46],[11,-21],[11,-25],[-1,-13],[-5,-5],[-15,-28],[-6,-3],[-11,11],[-13,9],[-10,11],[-12,17],[-27,-2],[-45,-27],[-9,8],[-7,15],[-3,32],[2,37],[-4,23],[-9,14],[6,66],[-16,26]],[[78093,64266],[3,8],[-6,72],[1,17],[-3,6],[-11,6],[-17,-11],[-51,-47],[-44,-87],[-20,-19],[-20,-8],[-24,15],[-27,10],[-37,-22],[-19,10],[-9,18],[-7,27],[4,34],[-2,25],[-16,13],[-17,11],[-10,32],[-5,36],[4,47],[3,50],[-9,23],[-26,12],[-64,23],[-57,12],[-24,-6],[-19,6],[-11,9],[-6,16],[0,22],[9,52],[11,51],[26,73],[2,51],[-2,59],[13,79],[23,59],[11,18],[-3,26],[-9,24],[-13,13],[-21,16],[-34,4],[-45,16],[-54,35],[6,67],[0,42],[-7,34],[-11,24],[-6,22],[10,60],[-13,65],[-14,27],[-15,33],[-2,37],[7,34],[37,73],[0,17],[-9,-1],[-10,-2],[-50,-26],[-6,16],[-18,10],[-37,2],[-43,-5],[-54,-26],[-50,-45],[-22,-32],[-20,-19],[-15,-7],[-19,14],[2,45],[34,82],[4,56],[-10,49],[-1,38],[-12,25],[-17,12],[-9,28],[0,80],[15,83],[24,26],[15,12],[4,17],[-8,57],[1,37],[15,72],[14,54],[28,-9],[12,13],[13,19],[15,33],[10,38],[12,89],[8,14],[35,-15],[10,11],[19,52],[18,64],[26,20],[18,2],[9,21],[-1,31],[-17,50],[-8,39],[2,24],[26,15],[6,29],[-4,63],[11,75],[6,89],[2,66],[0,50],[-3,53],[-4,96],[-11,84],[2,32],[-2,102],[-7,86],[-14,16],[-26,28],[-15,5],[-12,-10],[-5,-30],[-11,-28],[-15,6],[-6,29],[-10,37],[-30,175],[-4,50],[-5,51],[-10,25],[-11,14],[-25,59],[-13,25],[-6,4],[-14,-4],[-13,0],[-11,29],[-9,36],[-10,18],[-17,9],[-17,-3],[-10,-32],[-7,-17],[-12,-42],[-21,-57],[-10,-21]],[[77033,68097],[-9,11],[-40,60],[-19,16],[-27,-18],[-41,14],[-16,3],[-34,48],[-14,6],[-48,-32],[-11,-21],[-6,-1],[-13,11],[-11,15],[-1,9],[14,24],[1,16],[-1,16],[19,47],[51,91],[-8,37],[-21,75],[-2,36],[-9,17],[-25,-14],[-51,-67],[-7,7],[1,24],[-5,68],[16,20],[25,26],[19,28],[5,22],[-5,7],[-29,-9],[-11,16],[-18,62],[-14,25],[-12,13],[-42,-32],[-49,-45],[-54,-61],[1,-32],[-7,-8],[-10,-20],[-10,-28],[-9,-10],[-10,-1],[-20,8],[-38,32],[-40,26],[-9,-3],[-55,18],[-2,15],[-8,29],[-16,26],[-15,9],[-43,-56],[-48,-41],[-28,-49],[-23,-48],[-26,-10],[-1,-30],[-11,-27],[-20,-33],[-39,-42],[-27,-23],[-84,-21],[-30,-14],[-13,-22],[-14,-57],[-10,-52],[-24,-43],[-42,-57],[-50,-47],[-14,-31],[-2,-18],[6,-7],[6,-14],[0,-21],[-7,-23],[-32,-40],[-19,-19],[-18,-12],[-20,-3],[-20,6],[-6,6],[-7,-8],[-18,-9],[-16,-2],[-34,-45],[-19,0],[-24,10],[-31,7],[-22,0]],[[74691,67578],[-16,27],[-19,38],[-4,53],[22,142],[5,58],[-5,22],[-7,58],[-13,18],[-38,31],[-12,0],[-13,-20],[-12,-14],[-17,-13],[-42,-24],[-37,-12],[-9,-9],[-3,-16],[3,-20]],[[74474,67897],[-24,7],[-25,5],[-20,-3],[-49,-37],[-17,-4],[-19,4],[-25,1],[-48,-1],[-42,9],[-33,53],[-24,22],[-26,18],[-25,13],[-9,28],[-8,14],[-21,5],[-17,-10],[-10,-70],[-9,-14],[-21,-6],[-23,17],[-30,36],[-12,40],[-11,13],[-16,-17],[-1,-51],[-3,-35],[-19,-14],[-12,10],[-9,36],[-22,84],[-23,49],[-22,32],[-75,0],[-55,9],[-25,14],[-9,32],[9,65],[11,50],[0,12],[-10,6],[-15,4],[-60,-32],[-16,3],[-10,11],[-13,10],[-10,15],[-8,22],[-51,53],[-15,30],[-28,37],[-23,25],[-15,72],[-13,69],[-7,36],[-22,20],[-24,15],[-41,-30],[-33,-23],[-24,-3],[-35,71],[-29,77],[-33,66],[-22,34],[-39,3],[-45,37],[-59,85],[-43,64],[-74,70],[-17,30],[-6,25],[-10,50],[-16,47],[-52,20],[-59,15],[-63,-29],[-45,-141],[-22,-30],[-18,-2],[-15,36],[-13,37]],[[72502,69218],[-7,42],[-31,31],[-35,40],[-18,32],[-20,19],[-19,9],[-37,26],[-41,30],[-19,4],[-2,21],[6,46],[-4,43],[-12,18],[-19,-5],[-43,62]],[[72201,69636],[-3,3]],[[72198,69639],[-12,17],[-22,25],[-36,-1],[-27,-10],[-20,26],[-29,41],[-6,9]],[[72046,69746],[-8,15]],[[72038,69761],[-30,78],[-35,93],[-17,13],[-9,-7],[-11,-49],[-7,5],[-13,-3],[-15,-18],[-15,-4],[-10,5],[-4,12],[5,65],[-9,21],[8,45],[13,39],[-14,29],[-16,41],[-2,38],[9,47]],[[71866,70211],[4,41],[-3,14],[-13,23],[-50,111],[-3,12],[-9,37],[-3,56],[-7,40],[-8,30],[1,15],[6,7],[31,8],[29,4],[20,11],[10,-23],[4,-34],[5,-18],[19,-32],[22,-31],[22,4],[19,13],[17,51],[12,12],[14,2]],[[72005,70564],[0,4],[-1,33]],[[72004,70601],[5,80],[-2,32],[-6,29],[1,32],[-2,47],[-16,32],[-10,12],[-2,17],[6,32],[3,37]],[[71981,70951],[-5,27],[-1,4]],[[71975,70982],[-13,14],[-15,24],[-18,31],[-8,24],[-15,25],[-17,40],[-4,86],[-1,92],[-6,45],[-10,73],[1,24],[6,18],[50,59],[11,22],[1,18],[-2,25],[-9,29],[-20,22],[-28,36],[-26,37],[-43,23],[-52,28],[-13,28],[-12,66],[-22,102],[-23,109],[-18,66],[-1,33],[11,82],[-1,17],[-9,6],[-18,-10],[-14,-13],[-12,6],[-12,14]],[[71613,72283],[-2,5],[-1,2]],[[71610,72290],[-21,-9],[-42,-5],[-14,1],[-21,1],[-42,19],[-57,25],[-58,35],[-32,28]],[[71323,72385],[-11,10],[-26,29],[-19,25],[-3,66],[-14,-5],[-32,-24],[-38,-15],[-20,0],[-9,10],[-12,70],[-9,19],[-17,8],[-18,12],[-9,18],[-2,23],[8,26],[10,20],[1,123],[-6,44],[-5,36],[-14,46],[-12,28],[-19,26],[-29,27],[-26,10],[-32,-19],[-10,7],[-13,84],[-8,17],[-56,35],[-25,8],[-30,-11],[-16,-9],[-13,15],[-21,19],[-21,14],[-25,0],[-17,-8]],[[70802,73289],[8,11],[25,25],[20,29],[11,24],[-6,38],[-31,45],[-20,25],[-6,16],[5,50],[7,49],[-4,19],[-6,16],[-3,53],[-13,65],[-15,38],[-4,51],[-1,47],[18,75],[-7,32],[-18,29],[-64,52],[-66,34],[-25,-1],[-16,2],[-18,-30],[-11,-40],[-15,-4],[-28,17],[-19,26],[-13,53],[-11,68],[-6,21],[3,18],[7,17],[18,15],[3,16],[-3,19],[-14,25],[-15,34],[-23,72],[4,40],[4,57],[-1,30]],[[70453,74567],[23,7],[30,16],[14,25],[9,26],[2,16],[-9,63],[-12,27],[-1,22],[6,16],[8,29],[15,58],[15,37],[8,9],[18,9],[43,10],[47,26],[56,78],[19,22],[24,11],[18,-1],[3,10],[-12,48],[3,17],[7,14],[8,6],[39,-25],[30,3],[36,15],[77,85],[10,-2],[8,-11],[9,-51],[11,-108],[6,-14],[54,-1],[37,39],[16,9],[26,-6],[14,18],[14,13],[17,-45],[22,22],[23,34],[11,36],[16,38],[12,49],[5,46],[6,21],[13,22],[32,95],[24,24],[21,9],[55,-17],[28,2],[83,-12],[38,18],[27,18],[39,-3],[46,15],[62,118],[1,25],[4,27],[22,27],[28,24],[55,58],[113,91],[40,37],[17,-1],[42,23],[73,45],[20,56],[19,11],[86,10],[5,6],[3,10],[-5,40],[-5,35]],[[72280,76146],[6,10],[7,16],[-1,22],[-13,72],[-8,69],[-5,61],[1,23],[11,40],[13,36],[48,34],[32,10],[2,22],[-26,14],[-19,22],[-3,13],[1,14],[4,13],[32,25],[31,24],[37,-15],[8,10],[2,24],[-8,25],[-8,40],[-17,21],[-1,24],[11,43],[-15,79],[-16,70],[-27,119],[-18,34],[-10,55],[-11,29],[1,43],[2,30],[-3,59],[-5,65],[5,65],[10,43],[-3,17],[6,12],[15,4],[7,18],[-7,18],[-26,14],[-30,22],[-35,-3],[-36,-4],[-18,17],[-16,20],[-1,13],[22,35],[30,36],[47,16],[52,23],[26,18],[35,12],[40,5],[21,-3],[51,23],[82,44],[75,37],[24,22],[19,-22],[9,-49],[21,-25],[22,-12],[12,0],[37,19],[40,14],[16,-7],[20,-25],[23,-23],[12,2],[10,17],[11,35],[7,44],[1,47],[-4,29],[-8,10],[-36,17],[-35,28],[-4,25],[1,18],[9,44],[22,81],[23,112],[12,88],[38,131],[30,137],[49,197],[8,39],[4,62],[3,25],[17,14],[28,-13],[70,-45],[53,-38],[22,-13],[33,-13],[51,-16],[30,5],[25,9],[35,1],[53,-12],[17,0],[21,-2],[14,-19],[8,-43],[11,-19],[20,7],[43,38],[27,30],[34,43],[34,6],[36,10],[13,21],[13,51],[22,38],[3,48],[-7,34],[-16,56],[1,37],[-8,108],[-10,98],[11,78],[17,88],[7,27],[12,35],[16,42],[22,13],[63,9],[58,18],[30,18],[30,11],[19,14],[32,61],[15,36],[11,94],[-8,45],[6,40],[16,24],[21,24],[15,4],[30,7],[51,-3],[26,-11]],[[74256,80118],[26,-5],[16,8],[11,18],[17,6],[26,8],[26,11],[14,-2]],[[74392,80162],[3,-27],[-2,-20],[5,-28],[10,-19],[-3,-19],[-15,-12],[-14,-16],[-4,-21],[19,-26],[6,-26],[31,-15],[23,-17],[9,-16],[-2,-19],[-11,-20],[-11,-21],[-1,-13],[3,-15],[23,-10],[27,-16],[42,-22],[29,-39],[28,-11],[14,-39],[3,-56],[29,-28],[44,-40],[22,-7],[14,-23],[22,-27],[19,-9],[22,-4],[37,26],[42,2],[22,-14],[22,-55],[15,-17],[9,-16],[15,-14],[14,-2],[22,12],[14,24],[19,-5],[7,-16],[4,-27],[10,-33],[24,-25],[34,-15],[5,-12],[5,-34],[9,-23],[12,-30],[12,-56],[3,-45],[5,-25],[16,-41],[25,-66],[20,-55],[23,-11],[20,-18],[11,-41],[21,-77],[3,-51],[2,-38],[7,-17],[1,-21],[-17,-81],[-15,-37],[-2,-31],[10,-54],[14,-41],[2,-40],[-12,-29],[-20,-37],[-10,-21],[-16,-18],[-24,-71],[-10,-78],[-3,-40],[9,-29],[15,-32],[4,-28],[25,-62],[7,-39],[10,-1],[11,13],[27,0],[24,-13],[24,-29],[25,-15],[36,4],[19,-15],[20,-13],[43,-4],[32,0],[49,0],[40,-19],[70,-16],[43,2],[58,14],[35,-9],[105,-21],[62,-23],[39,-25],[27,-40],[32,-62],[25,-28],[67,-17],[46,-73],[36,-27],[60,-70],[43,-27],[51,-25],[83,10],[5,-9],[-6,-38],[-5,-52],[0,-38],[8,-19],[32,-12],[15,-18],[12,-36],[6,-22],[27,-109],[43,-162],[5,-62],[15,-40],[46,-63],[25,-47],[36,-50],[12,-46],[3,-59],[9,-15],[67,14],[57,9],[104,17],[142,-31],[147,-30],[130,-26],[64,-13],[145,-28],[81,36],[62,27],[29,-3],[120,-32],[71,-16],[88,-21],[62,-8],[50,0],[24,-8],[22,-14],[15,-20],[46,-99],[26,-45],[51,-33],[116,-38],[65,-23],[74,-26],[48,-40],[56,-47],[73,-60],[79,26],[86,29],[53,17],[0,-125],[77,-11],[24,2],[34,-28],[19,12],[18,27],[23,43],[32,19],[57,48],[13,12],[84,69],[125,84],[56,41],[17,9],[31,21],[22,14],[37,12],[52,7],[56,16],[126,30],[16,3],[72,12],[30,12],[45,-6],[59,-5],[39,-7],[52,6],[72,8],[57,-1],[29,10],[42,31],[29,25],[45,30],[55,32],[38,28],[26,19],[31,18],[8,23],[9,17],[16,30],[30,55],[23,48],[11,21],[25,48],[20,36],[27,49],[22,16],[27,13],[74,48],[14,10],[13,2],[26,39],[21,33],[15,25],[29,9],[16,18],[2,24],[-3,36],[-14,36],[-12,33],[-43,61],[-22,38],[-23,49],[-9,46],[-16,29],[-8,26],[3,30],[21,53],[8,33],[9,60],[20,89],[17,41],[19,41],[41,54],[37,10],[23,-11],[49,1],[34,-3],[24,-27],[27,-54],[31,-20],[95,-42],[41,-9],[29,-2],[43,-14],[14,-3],[22,-9],[18,10],[28,36],[35,40],[15,10],[27,17],[14,17],[24,45],[32,35],[38,53],[19,40],[4,25],[5,28],[11,15],[24,13],[26,4],[50,-24],[68,7],[15,3],[62,14],[27,11],[40,11],[30,44],[40,53],[29,29],[20,6],[24,30],[12,33],[-3,28],[-4,24],[14,44],[26,77],[24,36],[20,29],[13,46],[15,14],[20,5],[27,31],[20,7],[33,-15],[49,-4],[32,-2],[18,6],[6,17],[0,26],[10,58],[4,19],[9,9],[30,1],[21,-21],[14,-17],[19,-2],[20,11],[27,47],[45,27],[24,7],[42,22],[26,-8],[49,-6],[19,5],[21,-5],[18,32],[15,7],[32,-14],[20,-25],[37,-31],[47,-14],[39,7],[41,-13],[24,1],[11,13],[34,25],[8,35],[-4,34],[4,38],[-10,29],[-20,41],[-8,28],[-1,36],[-13,35],[-31,41],[-20,20],[-42,72],[-14,17],[-5,11],[-4,25],[-16,11],[-20,19],[-11,19],[-7,33],[-5,22],[-17,18],[-18,10],[-21,13],[-33,19],[-19,37],[-34,70],[-20,23],[-71,9],[-26,17],[-29,-6],[-18,-11],[-38,0],[-20,-7],[-26,-45],[-34,-60],[-27,-37],[-20,-37],[-9,-14],[-18,8],[-25,43],[-35,38],[-33,17],[-14,10],[-39,9],[-31,-3],[-38,-14],[-38,3],[-16,9],[-24,-1],[-44,-40],[-22,-45],[-27,-14],[-24,30],[-28,35],[-26,43],[-16,41],[-10,107],[32,32],[41,35],[3,57],[-1,63],[8,70],[37,64],[19,54],[3,33],[18,56],[17,58],[23,77],[44,135],[52,161],[26,80]],[[82411,80543],[57,-50],[37,-25],[62,-40],[65,-9],[61,-42],[32,-13],[17,0],[87,103],[73,88],[85,68],[62,9],[47,20],[31,31],[18,51],[6,71],[-13,43],[-30,15],[-8,15],[15,16],[11,29],[7,45],[17,42],[29,39],[15,44],[3,49],[17,48],[31,48],[17,45],[3,41],[16,50],[42,90],[28,102],[47,71],[76,72],[48,72],[19,71],[-2,63],[-22,54],[-4,56],[14,56],[-12,42],[-38,28],[-44,7],[-53,-14],[-29,17],[-6,49],[14,40],[34,30],[57,74],[78,118],[78,64],[117,19],[94,38],[96,40],[69,19],[12,-13],[37,-3],[64,6],[59,17],[55,27],[43,7],[32,-15],[18,0],[12,-2],[7,0],[14,11],[37,-20],[70,-61],[44,-27],[19,7],[20,-17],[21,-40],[27,-24],[48,-11],[48,-44],[20,-3],[6,25],[18,14],[29,4],[42,-22],[55,-47],[34,-21],[14,6],[15,-9],[12,-22],[1,-28],[-5,-14],[14,-23],[15,0],[25,-11],[19,-41],[17,-19],[13,-17],[2,-13],[1,-14],[-4,-11],[-6,-17],[-2,-19],[8,-21],[31,-16],[10,-15],[3,-21],[9,-22],[21,-26],[8,-22],[-5,-17],[6,-15],[11,-11],[2,-42],[1,-24],[17,-27],[3,-54],[12,-61],[40,-83],[13,-46],[-4,-53],[6,-25],[18,-13],[9,-22],[-1,-33],[7,-21],[6,-22],[-4,-34],[5,-31],[10,-18],[6,-33],[4,-42],[27,-66],[49,-90],[30,-70],[11,-50],[0,-41],[-10,-32],[-1,-23],[10,-15],[2,-20],[-3,-25],[16,-30],[54,-51],[-22,-79],[-5,-56],[2,-58],[14,-42],[24,-24],[15,-25],[5,-26],[29,-28],[52,-31],[66,-5],[80,20],[49,3],[18,-13],[6,-20],[-5,-28],[13,-17],[33,-9],[23,-17],[13,-26],[15,-7],[18,11],[17,-1],[18,-15],[11,5],[9,16],[16,0],[16,-1],[10,-37],[16,-21],[22,-5],[34,-46],[68,-131],[44,-46],[44,-15],[55,-3],[18,-50],[-15,-54],[-3,-45],[12,-16],[17,-52],[25,-31],[4,-24],[12,-27],[-5,-50],[-21,-73],[6,-63],[32,-51],[19,-50],[4,-48],[8,-29],[12,-10],[33,3],[55,18],[40,-3],[26,-24],[63,-1],[101,22],[64,7],[27,-9],[24,31],[21,70],[19,33],[18,-4],[29,22],[40,49],[35,24],[43,-2],[47,-3],[29,21],[27,43],[48,38],[101,50],[24,7],[11,-2],[34,-8],[30,-19],[28,-39],[4,-25],[-3,-33],[-6,-19],[-11,-22],[-11,-35],[7,-27],[16,-58],[13,-42],[15,-50],[-6,-17],[-9,-35],[-28,-58],[-15,-22],[-16,-22],[-28,-5],[-12,-5],[-14,-9],[-8,-21],[-10,-15],[-16,-29],[-1,-25],[7,-37],[4,-38],[-19,-34],[-14,-52],[-4,-16],[-7,-40],[-2,-13],[-4,-84],[-18,-57],[-26,-66],[6,-40],[4,-36],[-6,-18],[-1,-16],[-4,-35],[-8,-14],[-23,-22],[-14,-26],[3,-41],[-7,-35],[-10,-31],[-12,-20],[-15,-13],[-11,-11],[-8,-39],[-2,-30],[-8,-31],[5,-31],[-8,-26],[-23,-19],[-12,-11],[-12,-5],[-23,-29],[-20,-100],[-5,-58],[5,-51],[-28,-33],[-21,-26],[-13,10],[-14,8],[-32,12],[-16,7],[-33,17],[-51,21],[-51,25],[-31,13],[-25,11],[-19,17],[-16,31],[-16,-13],[-15,-36],[-24,-21],[-11,-40],[-10,-31],[-26,-40],[-11,-17],[-49,-28],[-12,-9],[-40,-6],[-14,-12],[-14,-25],[-4,-26],[10,-27],[16,-54],[7,-37],[11,-73],[36,-229],[-12,-39],[-11,-172],[3,-31],[-1,-48],[1,-36],[7,-8],[10,-13],[5,-20],[-1,-32],[-5,-23],[-8,-46],[-10,-67],[-11,-26],[-8,-20],[-6,-14],[-1,-47],[-4,-31],[-17,-11],[-18,-18],[-20,6],[-19,-3],[-22,-12],[-40,-14],[-24,-19],[-11,-14],[-8,-16],[-1,-16],[5,-8],[23,-6],[15,-30],[3,-32],[-16,-18]],[[49142,54797],[-7,-23]],[[49135,54774],[-37,15],[8,19],[36,-11]],[[49251,57304],[2,-28],[-5,-47],[1,-28],[8,-11],[-4,-37],[-16,-63],[-1,-37],[16,-12],[12,-39],[6,-67],[7,-23],[1,-14],[11,-163],[14,-164],[-9,-21],[-12,-6],[-8,-8],[-2,-15],[5,-23],[-3,-20],[-16,-14],[-33,-52],[-3,-21],[-9,-44],[-7,-27],[-11,-51],[-17,-132],[-7,-110],[-1,-34],[-7,-24],[-7,-34],[-37,-94],[-18,-77],[2,-34],[1,-33],[-6,-25],[1,-65],[5,-54],[6,-54],[27,-151],[14,-92],[8,-74],[8,-49],[7,-21],[3,-19],[39,-14],[7,-11],[11,-96],[-2,-44],[-7,-16],[0,-37],[-2,-46],[-6,-18],[-22,-2],[-14,-18],[-20,7]],[[49161,54798],[-2,12],[-11,4],[-29,26],[5,83],[-13,4],[-11,-11],[-20,-101],[-10,-17],[-146,52],[-31,42],[-38,9],[-66,-5],[-54,-12],[-16,-25],[137,15],[15,-3],[7,-16],[-173,-33],[-67,-20],[-19,6],[-15,32],[-72,4],[-15,-11],[-8,-23],[28,5],[44,1],[12,-18],[-139,-24],[-97,-45],[-41,-33],[-135,-110],[-83,-52],[-22,-20],[-37,-53],[-48,-34],[-54,-64],[-33,-14]],[[47904,54349],[-8,20],[-1,107],[-4,144],[2,55],[4,52],[0,42],[16,16],[5,18],[2,56],[16,51],[0,88],[5,19],[3,23],[-7,58],[-8,109],[-4,8],[-4,-5],[-9,-2],[-34,38],[-26,6],[-18,32],[-1,37],[-9,22],[-7,42],[-9,49],[-26,30],[-24,7],[-17,-7],[-20,2],[-23,17],[-16,18],[-16,36],[-14,28],[-11,-3],[-14,6],[-13,13],[-4,10],[56,114],[19,56],[2,33],[0,35],[6,35],[2,54],[-31,194],[-8,60],[-9,18],[-5,7]],[[47642,56197],[16,25],[22,-7],[33,-19],[7,19],[25,98],[0,37],[-3,25],[15,67],[11,26],[7,28],[-2,38],[-9,15],[-12,-3],[-14,9],[-21,22],[-11,20],[3,89],[2,27],[8,16],[12,5],[33,2],[26,-10],[24,-6],[12,0],[10,-26],[14,-27],[12,0],[4,20],[-3,88],[-8,46],[-18,45],[-46,38],[-1,53],[4,58],[10,22],[35,37],[-6,19],[-11,21],[-22,22],[5,69],[1,61],[-18,-6],[-19,-4],[-16,19],[-14,37],[-2,104],[0,119],[-3,53],[5,28],[17,26],[18,33],[6,22]],[[47780,57697],[8,0],[21,13],[20,29],[18,61],[24,49],[28,-3],[8,9],[10,1],[11,-32],[12,-24],[8,-1],[6,-47],[50,-19],[22,-13],[18,-34],[6,0],[8,7],[6,11],[1,13],[-8,31],[4,28],[8,24],[13,2],[19,7],[23,0],[16,-5],[7,25],[-6,69],[1,38],[3,32],[6,13],[25,-40],[23,-15],[16,-1],[5,8],[-7,44],[2,13],[6,8],[10,4],[29,18],[3,-3],[6,-70],[-3,-23],[6,-47],[8,-43],[-1,-18],[-6,-27],[-7,-25],[1,-10],[11,-17],[22,-18],[23,-4],[13,26],[13,20],[10,19],[3,27],[14,20],[42,26],[38,3],[9,-8]],[[54495,53150],[0,-4],[-2,-33],[-17,-22],[-10,-35],[-3,-49],[5,-60],[13,-70],[1,-41],[-5,-6],[-8,-13],[-9,-9],[-23,48],[-26,33],[-39,57],[-39,20],[-51,4],[-22,-7],[-15,21],[-22,25],[-12,6],[-17,-19],[-12,-1],[-14,8],[-29,-1],[-3,33],[-5,6],[-31,-3],[-9,27],[-5,-3],[-12,9],[-25,38],[-26,-25],[-55,3],[-70,-1],[-73,-1],[-66,2],[-67,1]],[[53692,53088],[-6,36],[-14,18],[-25,2],[-73,-7],[-56,6],[-18,4],[-20,10],[-47,8],[-58,-6],[-13,1],[-46,-1],[-106,10],[-58,-2],[1,-22],[-4,-16],[-3,-38]],[[53146,53091],[-64,0],[-85,0],[-80,0],[-54,0],[-91,0],[-31,27],[-9,16],[-2,19],[-1,13],[-7,4]],[[52722,53170],[6,135],[12,113],[5,105],[18,93],[-9,93],[-11,40],[-57,131],[26,50],[-34,-7],[-7,49],[-17,58],[10,10],[10,32],[31,-10],[-1,16],[-27,49],[3,25],[11,27],[-6,12],[-19,-29],[-14,1],[-10,19],[-8,3],[5,-38],[-11,-33],[-10,-12],[-18,2],[-14,8],[-4,19],[-13,15],[-38,24],[-31,30],[-7,79],[-12,35],[-6,39],[-3,44],[5,69],[-8,11],[-9,3],[-14,-3],[-13,4],[-15,38],[-13,14],[8,-69],[-9,-20],[-23,6],[-9,26],[-2,20],[10,84],[-4,2]],[[52376,54582],[8,44],[16,55],[20,69],[24,87],[16,153],[11,96],[10,87],[18,78],[17,53],[50,102],[37,77],[19,31],[14,26],[23,30],[24,35],[18,68],[15,64],[11,13],[15,12],[46,68],[29,43],[7,-22],[5,-26],[5,-13],[25,-8],[33,0],[19,8],[10,23],[11,61],[6,12],[8,3],[36,-43],[30,-61],[30,-61],[15,-21],[7,-24],[13,-111],[8,-28],[13,-11],[23,7],[24,20],[22,28],[21,37],[14,33],[6,24],[3,91],[5,20],[22,36],[36,60],[20,35],[-2,12],[-12,37],[-12,41],[12,42],[12,32],[45,109],[0,35],[3,44],[36,124],[21,164],[1,32],[21,79],[26,101],[50,16],[19,26],[22,44],[14,42],[7,40],[5,76],[9,87],[5,77],[15,70],[25,36],[43,30],[7,14],[6,47],[5,97],[1,59],[2,25],[6,44],[40,78],[17,122],[16,128],[46,154],[53,154],[25,41],[21,19],[24,2],[17,11],[57,77],[24,26],[18,27],[4,23],[2,34],[-6,79],[10,58],[6,90],[3,71],[-3,24],[-9,34],[-1,7],[-17,44],[-29,26],[-40,7],[-21,16],[-3,37],[-2,21],[-2,23],[-3,51],[-27,268]],[[53906,59376],[50,0],[61,-32],[15,-25],[8,-91],[21,-52],[39,-43],[24,-89],[9,-134],[21,-80],[5,-13],[24,-115],[6,-36],[1,-70],[-2,-47],[12,-58],[-18,-100],[-6,-61],[-2,-86],[11,-151],[18,-116],[19,-95],[21,-73],[34,-81],[37,-74],[34,-47],[-32,-27],[-61,-3],[-35,15],[-17,1],[-17,-10],[-65,-14],[-67,7],[-61,18],[-37,-3],[-29,-45],[-23,-67],[-22,-54],[8,-59],[16,-33],[32,-72],[28,-70],[15,-47],[56,-103],[55,-91],[11,-16],[15,-16],[9,-7],[30,-53],[41,-86],[38,-135],[27,-138],[26,-133],[12,-23],[18,-14],[2,-29],[-1,-42],[-6,-35],[-15,-46]],[[57611,54786],[10,-41],[15,-41],[48,-70],[15,-39],[12,-43],[7,-34],[15,-27],[21,-17],[18,-21],[11,-30],[16,-32],[32,-42],[15,-1],[18,-7],[15,-11],[17,3],[27,29],[32,47],[24,29],[59,-11],[33,-23],[26,-34],[20,3],[45,61],[23,65],[23,14],[35,-28],[29,-61],[25,-89],[17,-34],[25,-52],[48,-113],[63,-56],[24,-28],[8,-28],[5,-37],[1,-40],[8,-17],[17,6],[14,6],[16,-12],[11,-29],[6,-23],[6,-25]],[[58566,53853],[15,-15],[4,-32],[-11,-38],[-11,-34],[-14,-69],[-7,-70],[9,-23],[10,-20],[5,-20],[3,-23],[-1,-26],[-21,-98],[-12,-85],[0,-43],[28,-32],[37,2],[12,-20],[11,-31],[10,-15],[16,0],[11,-11],[4,-22],[12,-23],[11,-26],[-5,-33],[-1,-26],[-26,-70],[-60,-138],[-129,-256],[-1,0],[-43,-31],[-23,-47],[-15,-75],[-38,-63],[-29,-25],[-3,-16],[-2,-68],[3,-101],[-14,-46],[-20,-90],[-10,-56],[-8,-11],[-9,-28],[-5,-91],[-4,-31],[-14,-189],[4,-54],[-11,-90],[-1,-52],[-4,-60],[-8,-52],[1,-83],[4,-136],[-1,-18]],[[58215,51043],[-11,-12],[-19,-34],[-18,-23],[-14,-6],[-24,-59],[-19,-57],[-15,-55],[-4,-26],[3,-72],[2,-84],[-4,-37],[-7,-22],[-33,-46],[-21,-33],[-10,-17],[-6,-27],[10,-62],[1,-46],[7,-27],[26,-22]],[[58167,49280],[0,-28],[-10,-99],[-12,-96],[0,-36],[5,-49],[22,-111],[15,-81],[8,-49],[11,-56],[14,-87],[4,-42],[-3,-31],[-30,-109],[-3,-34],[8,-85],[9,-81],[14,-47],[33,-128],[25,-43],[45,-64],[40,-65],[16,-33],[14,-37],[28,-96],[17,-78],[9,-70],[22,-96],[20,-89],[26,-109],[19,-77],[8,-51]],[[58541,47123],[-48,-15],[-69,-22],[-77,-25],[-79,-25],[-79,-25],[-74,-23],[-68,-21],[-20,-12],[10,-61],[-5,-63],[-13,-49],[-21,-61],[-10,-24],[-22,-47],[-18,-33],[-36,-56],[-24,-32],[0,-29],[39,-136],[18,-97],[7,-88],[0,-50],[-2,-104],[-1,-123],[-3,-49],[11,-88],[-2,-68],[-27,-77],[-7,-75],[-13,-102],[-19,-141],[-13,-74],[8,-48],[6,-33],[7,-43],[14,-66],[17,-38],[9,-17],[54,-82],[22,-40],[35,-79],[25,-53],[35,-12],[42,-20],[24,-15],[16,7],[5,19],[-1,39],[-2,29],[4,23],[14,15],[37,2],[16,20],[13,5],[0,-87],[0,-83],[0,-101],[0,-116],[0,-95],[0,-101],[0,-117],[0,-13],[-6,-26],[-14,-9],[-20,22],[-1,24],[-5,43],[-9,22],[-12,7],[-20,-11],[-28,-32],[-36,-27],[-14,-16],[-25,2],[-27,15],[-20,35],[-6,54],[-17,54],[-24,80],[-12,32],[-16,37],[-16,4],[-18,11],[-11,54],[-10,68],[-6,27],[-11,34],[-15,21],[-34,27],[-47,38],[-58,48],[-28,2],[-32,9],[-19,22],[-11,19],[-13,66],[-18,78],[-51,93],[-12,103],[-10,15],[-18,-9],[-14,-13],[-5,-27],[-14,-93],[-8,-43],[-5,-11],[-11,-14],[-18,-13],[-27,-6],[-37,2],[-46,14],[-25,11],[-68,15],[-19,7],[-28,21],[-20,20],[-65,44],[-30,-6],[-14,31],[-13,15],[-18,29],[-8,40],[-11,86],[3,46],[8,51],[-9,14],[-12,0],[-17,-18],[-30,-10],[-55,-22],[-20,-13],[-22,-9],[-16,-9],[-42,-49],[-14,-6],[-25,18],[-12,26],[12,30],[5,37],[-8,72],[-13,34],[-37,24],[-14,2],[-6,41],[-10,37],[-21,7],[-10,4]],[[53630,48464],[-19,17],[-39,-11],[-19,-13],[-31,-48],[-46,-25],[-17,2],[-12,8],[-27,53],[-20,50],[-8,28]],[[53631,49173],[4,19],[14,-2],[4,-9],[7,-20],[12,-29],[21,-34],[22,-37],[11,-5],[17,19],[21,28],[30,20],[7,19],[4,40],[2,44],[3,51],[6,7],[11,5],[20,-15],[9,-15],[16,0],[10,14],[19,25],[25,10],[25,24],[25,31],[12,3],[12,-41],[11,-28],[2,-17],[-11,-34],[-12,-45],[10,-55],[3,-54],[-1,-32],[9,-14],[6,-6],[9,8],[17,-2],[21,-17],[21,2],[20,20],[37,81],[54,141],[44,88],[36,36],[24,43],[12,48],[21,33],[43,26],[32,29],[33,97],[44,174],[12,156],[7,94],[-4,326],[-3,107],[7,58],[16,40],[44,85],[30,70],[23,81],[44,186],[19,60],[8,26],[27,50],[37,43],[47,38],[73,129],[59,130],[-8,157],[13,129],[32,165],[11,175],[-11,184],[4,151],[31,175],[13,65],[4,106],[-1,169],[39,232],[37,138],[41,155],[15,94],[21,125],[-3,100]],[[53338,48960],[-4,13],[-10,16],[-21,51],[-20,63],[-5,29],[-6,17],[-1,64],[-30,75],[-77,135],[-8,40],[-65,124]],[[53091,49587],[17,89],[12,41],[15,28],[60,70],[9,-3],[42,-90],[13,-8],[14,3],[18,-4],[8,18],[2,23],[-13,26],[-2,28],[9,31],[5,33],[13,40],[2,19],[-14,20],[-28,32],[-19,30],[-8,28],[6,37],[15,30],[-1,16],[-13,27],[-10,29],[-10,18],[-29,11],[6,38],[10,57],[3,44],[-8,114],[1,21],[7,10],[17,-12],[17,-18],[46,25],[16,4],[13,-22],[19,-17],[106,47],[2,49],[6,44],[1,33],[-5,21],[-5,16],[-3,33],[0,35],[10,17],[34,42],[10,-1],[24,-23],[22,-36],[20,-76],[14,-65],[21,-79],[47,-32],[55,-21],[30,6],[42,67],[25,53],[7,28],[14,-15],[16,-69],[11,-27],[2,-25],[-7,-32],[7,-21],[30,-14],[26,14],[11,28],[20,37],[0,30],[-10,21],[0,27],[10,22],[11,59],[3,44],[10,27],[20,20],[7,17],[11,103],[-6,37],[0,31],[13,39],[2,65],[-5,105],[-4,73],[-4,76],[10,99],[10,104],[-2,26],[-14,32],[-17,29],[-43,23],[-16,38],[-13,40],[-9,13],[-48,16],[-11,22],[5,65],[4,96],[-2,67],[9,53],[9,40],[21,43],[12,50],[6,13],[40,8],[14,21],[11,21],[5,29],[14,47],[12,32],[1,22],[-2,30],[-12,59],[-15,50],[-8,17],[-18,116],[-16,28],[-32,15],[-60,13],[-36,-21],[-55,-39],[-42,-27],[-27,-16],[-16,5],[-8,18],[11,15],[5,35],[-7,51],[-10,46],[-6,65],[2,81],[11,76],[22,99],[1,40]],[[5628,39602],[-9,0],[-12,4],[-7,3],[-1,5],[3,16],[6,8],[12,-1],[8,-11],[1,-19],[-1,-5]],[[28301,53307],[-7,-13],[-14,23],[-5,29],[8,21],[12,-7],[5,-18],[1,-35]],[[30189,58676],[-10,-7],[-13,-16],[-37,-28],[-51,-27],[-67,-35],[-15,-37],[-65,-234],[-55,-47],[-20,-35],[-15,-44],[-33,-82],[-14,-62],[-36,-136],[-20,-170],[-7,-96],[-11,-138],[-16,-70],[-21,-66],[-23,-64],[-20,-70],[-17,-54],[-3,-19],[8,-15],[40,15],[16,16],[22,21],[13,-11],[14,-60],[15,-8],[15,8],[15,-15],[20,-150],[17,-128],[39,-79],[30,-62],[7,-55],[8,-77],[1,-38],[-9,-23],[-15,-47],[-4,-90],[-3,-30],[-2,-83],[2,-51],[8,-40],[13,-23],[27,-12],[25,-14],[14,-69],[20,-88],[22,-37],[32,-25],[22,9],[53,16],[45,-4],[67,-24],[25,1],[32,5],[56,48],[20,7],[23,-4],[33,-25],[19,-19],[23,-20],[33,-14],[22,2],[16,1],[10,-9],[53,-137],[46,-118],[40,-100],[43,-107],[3,-7],[20,14],[13,-6],[12,-22],[20,9],[29,40],[42,8],[56,-24],[74,0],[91,24],[57,25],[22,28],[37,-3],[44,-25],[24,-35],[3,-35],[9,-54],[-10,-55],[-28,-56],[-16,-72],[-3,-86],[-14,-64],[-26,-42],[-11,-60],[6,-80],[-3,-116],[-11,-153],[0,-91],[11,-30],[6,-43],[-1,-56],[4,-49],[14,-64],[20,-128],[16,-55],[14,-21],[15,-24],[42,-131],[10,-28],[-3,-24],[-4,-18],[-5,-11],[-44,-78],[-89,-170],[-8,-22],[1,-35],[26,23],[27,-19],[14,-4],[6,-14],[8,-46],[9,-7],[13,-20],[27,-48],[22,-51],[16,-24],[12,-23],[4,-33],[-5,-33],[14,-76],[9,-24],[5,-29],[-5,-29],[12,-35],[12,-67],[16,-83],[2,-45],[6,-21],[8,-62],[13,-57],[-3,-39],[5,-39]],[[30565,49403],[-15,42],[-21,40],[-20,25],[-9,31],[-11,65],[-17,22],[-11,17],[-11,-2],[-12,-18],[-18,-11],[-12,1],[-49,45],[-8,4],[32,102],[56,182],[36,116],[39,129],[21,65],[2,12],[0,16],[-8,25],[-20,11],[-22,19],[-14,31],[-19,14],[-15,22],[-27,22],[-17,20],[-20,7],[-16,37],[-58,71],[-15,6],[-16,-11],[-24,-11],[-23,-39],[-29,-12],[-27,0],[-14,23],[-13,9],[-18,31],[-31,25],[-23,17],[-14,-8],[-17,-36],[-19,-35],[-14,-22],[-19,2],[-23,-33],[-23,-11],[-23,-5],[-26,-12],[-29,20],[-24,17],[-11,8],[-10,-5],[-15,-18],[-27,-8],[-21,-2],[-15,9],[-13,31],[-22,16],[-24,19],[-5,41],[3,29],[10,44],[-5,45],[-10,70],[-5,29],[-7,25],[-12,9],[-23,-7],[-25,27],[-16,25],[-8,32],[9,58],[-8,51],[-15,27],[-10,49],[-15,39],[-19,20],[-20,-2],[-16,12],[-18,41],[-16,16],[-19,40],[-35,18],[-18,16],[-11,24],[-14,44],[2,25],[-7,24],[-6,43],[-12,64],[-13,36],[-14,28],[-11,23],[-17,34],[-21,20],[-18,22],[-7,31],[-6,25],[-9,-2],[-15,3],[-15,6],[-17,19],[-14,22],[-23,39],[-13,5],[-11,0],[-17,-38]],[[29087,51781],[-50,39],[-42,59],[-44,15],[-29,36],[-26,55],[-15,38],[-11,19],[-57,54],[-11,5],[-21,-25],[-7,-15],[-2,-43],[-2,-25],[-19,-15],[-30,3],[-21,16],[-14,2],[-3,-12],[-8,-5],[-17,3],[-25,12],[-23,16],[-31,34],[-14,-4],[-35,7],[-29,20],[-8,17],[-12,122],[-4,9],[-12,5],[-21,17],[-13,19],[-7,34],[-8,32],[-36,-7],[-57,42],[-40,41],[-37,44],[-55,88],[-21,22],[-26,27],[-16,43],[-25,44],[-9,12]],[[28094,52681],[-8,40],[-38,57],[19,74],[46,56],[60,-44],[7,87],[-22,76],[4,144],[7,29],[16,39],[20,26],[12,8],[21,-13],[13,29],[49,-13],[15,12],[10,20],[12,14],[15,35],[9,40],[7,16],[17,-6],[1,18],[9,23],[30,53],[-1,23],[-8,51],[2,19],[17,6],[21,14],[10,49],[14,42],[15,63],[17,4],[9,72],[22,64],[46,189],[-13,-4],[-11,-26],[-13,3],[-14,15],[4,85],[-8,10],[-23,-65],[-19,67],[-2,40],[8,40],[-1,27],[-31,-20],[2,25],[19,26],[9,27],[17,29],[7,44],[4,69],[7,74],[-5,36],[-9,31],[-8,137],[2,80],[-4,62],[-8,54],[-37,69],[59,80],[21,60],[-27,124],[-35,105],[-1,62],[10,-8],[11,2],[11,132],[-3,41],[-19,66],[-24,2],[-21,83],[-13,19],[-9,52],[-34,102],[-27,53]],[[28361,56007],[20,123],[17,23],[6,31],[-7,76],[2,17],[4,8],[4,-1],[8,-11],[13,-33],[11,-40],[9,-12],[13,13],[52,80],[-3,25],[5,51],[17,41],[19,14],[5,23],[-4,35],[-20,89],[-17,47],[-11,47],[-6,44],[-20,41],[8,39],[16,45],[5,8]],[[28507,56830],[8,-12],[23,-83],[37,-53],[38,-87],[16,-60],[12,-10],[11,-22],[-5,-16],[-12,-17],[-3,-35],[8,-19],[8,-12],[22,8],[12,40],[-8,178],[-13,89],[-15,27],[-13,35],[9,27],[24,12],[31,31],[115,170],[39,159],[30,58],[34,37],[41,-9],[33,20],[10,51],[-9,69],[-13,41],[12,61],[13,91],[-1,76],[16,46],[-6,18],[-23,-37],[-18,-16],[10,30],[33,76],[16,115],[13,48],[46,67],[10,32],[34,50],[56,108],[22,30],[108,-69],[34,4],[-6,-13],[-16,-4],[-23,-19],[-6,-41],[15,-44],[17,-12],[14,28],[14,80],[22,88],[6,92],[15,32],[24,11],[41,-18],[32,-19],[33,-3],[101,14],[164,240],[77,52],[47,50],[31,99],[8,74],[22,28],[24,0],[11,18],[3,23],[57,64],[33,8],[28,-1],[65,-56],[29,-98],[5,-68],[-40,-74],[-10,-32]],[[62163,44753],[19,-35],[-54,15],[-8,31],[-1,24],[20,-5],[24,-30]],[[62354,44883],[14,-79],[0,-60],[-6,-19],[-13,12],[-23,48],[-43,46],[20,4],[12,-4],[12,4],[8,26],[1,16],[11,12],[7,-6]],[[62073,44987],[-5,-8],[-25,33],[-15,8],[-21,53],[8,184],[7,24],[5,9],[12,4],[14,-23],[-4,-119],[19,-79],[12,-63],[-7,-23]],[[43247,60400],[-21,-22],[-15,10],[-15,23],[-7,33],[6,28],[29,33],[17,-11],[10,-51],[-4,-43]],[[43560,60562],[-8,-2],[-11,26],[2,36],[-1,9],[10,39],[20,-4],[6,-28],[0,-59],[-18,-17]],[[43487,60488],[-17,-53],[-36,4],[-19,22],[-22,66],[0,52],[8,44],[-1,39],[3,10],[11,-6],[2,-26],[34,-64],[12,-13],[25,-75]],[[43634,61196],[23,-11],[8,4],[15,-2],[16,-30],[3,-33],[-8,-40],[-30,-33],[-18,4],[-21,30],[12,60],[0,51]],[[43309,61418],[11,-17],[4,-12],[-17,-7],[-42,22],[-11,-13],[-11,-48],[-21,72],[2,27],[4,8],[30,-19],[51,-13]],[[43642,61439],[-9,-30],[-11,44],[-6,10],[-3,62],[16,19],[8,1],[0,-64],[5,-42]],[[43086,61530],[-22,-13],[-14,1],[-21,21],[7,22],[22,24],[15,5],[12,-43],[1,-17]],[[43008,61604],[-27,-11],[-12,5],[-3,46],[-6,30],[1,14],[63,59],[21,-10],[16,-47],[-11,-26],[-42,-60]],[[26766,58131],[7,-23],[8,-36],[3,-46],[36,-155],[28,-86],[62,-158],[26,-29],[45,-127],[16,-21],[9,-37],[46,-31],[13,-23]],[[27065,57359],[-1,-11],[-5,-11],[-7,-11],[-9,-8],[-22,24],[-22,26],[-11,-12],[-5,-34],[-8,-18],[-10,-7],[-4,-11],[-1,-116],[1,-108],[16,-3],[27,-38],[12,-22],[4,-20],[-4,-10],[-20,-24],[-19,-30],[-10,-38],[17,-60],[4,-41],[-1,-43],[-4,-21],[-38,-49],[-8,-18],[1,-12],[20,-34],[10,-33],[9,-40],[1,-34]],[[26978,56492],[-19,64],[-26,61],[-23,37],[-2,88],[-9,48],[-34,44],[-30,30],[-21,-6],[13,-50],[34,-65],[3,-25],[-1,-33],[-23,5],[-21,13],[-26,5],[-17,20],[-36,77],[26,66],[8,43],[-1,90],[-6,43],[-28,67],[-44,72],[-61,60],[-29,47],[-73,37],[-27,24],[-22,45],[-3,33],[8,50],[-20,63],[-86,125],[-48,45],[-11,27],[-7,9],[7,-86],[21,-52],[55,-48],[15,-29],[6,-36],[-32,-70],[-16,-18],[-5,-38],[-10,-12],[-11,22],[-45,110],[-86,53],[-16,32],[-32,101],[-14,91],[5,61],[35,96],[11,41],[-2,26],[1,37],[-13,26],[-33,35],[-21,27],[6,14],[38,37],[2,33],[0,11]],[[26182,58215],[6,2],[5,9],[4,9],[10,32],[9,18],[10,3],[13,-13],[47,-35],[53,-38],[75,-54],[31,34],[27,27],[18,-4],[41,-31],[24,-10],[15,3],[25,-45],[14,-34],[3,-23],[8,-13],[20,-2],[49,-23],[30,4],[27,25],[15,29],[5,46]],[[27066,64269],[-26,-31],[-55,-43],[-30,-1],[-30,16],[-20,36],[-12,35],[1,17],[19,-28],[16,-14],[13,9],[10,16],[-31,114],[2,24],[24,63],[65,-19],[11,-11],[10,-40],[14,-31],[17,-83],[2,-29]],[[28425,64488],[-11,-18],[-13,26],[-8,2],[-11,10],[-21,29],[-5,29],[17,2],[23,-5],[39,-16],[-4,-34],[-6,-25]],[[28367,64589],[-10,-2],[-27,24],[-9,20],[10,27],[2,29],[4,2],[4,-35],[22,-15],[1,-8],[13,-30],[-10,-12]],[[28326,64680],[-6,-10],[-15,22],[-22,9],[-13,33],[-12,13],[-1,12],[20,9],[14,-4],[16,-26],[9,-46],[10,-12]],[[28158,64834],[38,-13],[13,8],[13,2],[13,-5],[19,-48],[-16,-6],[-13,0],[-10,8],[-34,3],[-23,14],[-12,12],[-6,14],[18,11]],[[27958,64898],[1,-15],[-49,42],[-21,44],[-8,10],[13,1],[55,-72],[9,-10]],[[27267,65185],[73,-26],[59,7],[28,16],[-3,-16],[26,-40],[10,-3],[38,20],[99,8],[10,-11],[18,-39],[25,-24],[26,-18],[28,-5],[27,8],[26,-4],[32,-37],[10,-5],[28,10],[-8,-34],[48,-49],[36,-95],[25,-39],[28,-35],[23,-24],[25,-11],[79,5],[18,-3],[17,-14],[15,-5],[9,5],[151,-149],[48,-79],[30,-41],[63,-59],[25,-13],[14,7],[-3,14],[-18,33],[-3,12],[24,-11],[43,-67],[12,-24],[21,-23],[22,-17],[-11,-26],[-17,-3],[-34,11],[27,-43],[5,-31],[12,-3],[19,35],[11,29],[48,-75],[25,-34],[-6,-20],[-2,-20],[28,18],[11,-2],[10,-11],[12,-32],[26,-7],[27,1],[55,-27],[51,-54],[49,-11],[49,-2],[24,-28],[11,-39],[-12,-27],[-7,-28],[18,-35],[-39,-15],[-6,-21],[2,-23],[8,-12],[23,11],[33,-10],[51,-9],[35,8],[71,-24],[21,-13],[42,-44],[19,-30],[42,-79],[35,-31],[31,-8],[11,5],[10,-8],[9,-11],[8,-35],[-5,-37],[-17,-29],[-10,-22],[-44,-2],[-62,-10],[-60,-32],[-29,-26],[-14,-17],[-31,-15],[-2,13],[0,17],[-8,31],[-7,-28],[-12,-21],[-19,-17],[-73,-1],[-29,23],[-30,17],[-109,16],[-27,-1],[-73,-18],[-73,-9],[-31,-11],[-30,-16],[-59,0],[-70,-19],[-70,-3],[45,131],[95,125],[17,27],[13,35],[3,26],[-4,23],[-23,39],[-4,29],[-7,19],[-33,17],[-33,10],[-35,0],[-73,13],[-39,1],[-33,27],[-55,96],[-26,26],[-13,22],[-10,24],[-13,140],[-11,68],[-17,58],[-25,45],[-27,15],[-101,-38],[-24,5],[-23,13],[-154,91],[-63,50],[-26,25],[-22,35],[-23,58],[-25,52],[0,-21],[-4,-14],[-129,-6],[-20,12],[-13,14],[-10,21],[-7,42],[-12,35],[-4,-38],[-6,-34],[-17,-20],[-20,-3],[-24,46],[-104,10],[-9,7],[-34,45],[-30,56],[29,19],[60,26],[13,18],[8,21],[-5,33],[-12,24],[-13,14],[-13,9],[-18,4],[-232,5],[-13,-17],[-21,-37],[-41,-47],[-28,-48],[-10,-25],[-12,-18],[-29,-30],[-24,-46],[-30,-21],[-16,13],[-16,0],[-11,-12],[-13,-5],[-59,-6],[-9,-11],[-8,-34],[-10,-64],[-9,-21],[-30,-8],[-28,-18],[-58,-62],[-15,-9],[3,45],[-3,44],[-16,2],[-19,-7],[-15,-13],[-29,-32],[-14,-9],[-14,17],[3,21],[95,79],[11,6],[17,-6],[17,3],[13,22],[-16,105],[6,71],[22,55],[45,83],[21,27],[219,174],[22,9],[142,35],[22,12],[66,51],[69,21],[73,-16]],[[30902,58789],[-14,-8],[-54,56],[-44,90],[-1,47],[11,-4],[12,-18],[17,-64],[52,-42],[21,-57]],[[27397,62988],[9,-11],[11,7],[4,12],[42,-9],[7,-24],[-33,-1],[-14,-15],[-8,-3],[-28,4],[-4,55],[8,6],[6,-21]],[[27783,63195],[-2,-3],[-9,2],[-21,-23],[-8,1],[2,9],[4,7],[5,6],[5,2],[14,5],[7,1],[4,-6],[-1,-1]],[[27827,63197],[-13,-8],[-10,3],[22,24],[6,8],[5,4],[5,0],[7,-5],[0,-3],[-22,-23]],[[59445,72041],[-11,-4],[-17,16],[-10,5],[-10,-15],[-11,-11],[-10,-5],[-8,-2],[-14,-11],[-17,3],[-25,9],[-14,-22],[-3,3],[-2,55],[-9,23],[-11,13],[-16,-6],[-22,2],[-16,10],[-31,-16],[-26,-17],[-18,-17],[-14,1],[-24,16],[-18,17],[-2,14]],[[59086,72102],[17,-6],[30,12],[13,56],[4,65],[50,-19],[52,-9],[42,-4],[41,11],[126,69],[36,41],[23,14],[38,34],[40,19],[-25,-39],[-145,-174],[-10,-52],[7,-35],[20,-44]],[[59445,72041],[5,-11],[8,-33],[-32,-10],[-31,-3],[-18,4],[-17,-1],[-51,-95],[-28,-32],[-33,-19],[-33,-11],[-17,-1],[-15,-12],[-10,-22],[0,-22],[-5,-17],[-18,4],[-8,34],[-13,15],[-32,-8],[-16,1],[-52,33],[-16,13],[-10,28],[-27,101],[-4,75],[25,-19],[23,23],[23,38],[27,15],[16,-7]],[[54113,81139],[24,2],[24,14],[2,24],[-1,43],[2,7],[37,-13],[37,-19],[5,-44],[10,-21],[12,-20],[11,-9],[19,-1],[50,-26],[24,-5],[25,-18],[20,-19],[16,-3],[7,-21],[9,-13],[16,10],[60,15],[22,-20],[14,-21],[2,-6],[-7,-19],[-4,-14],[-6,-9],[-21,-10],[-11,-17],[-9,-17],[6,-18],[17,-12],[12,-3],[4,-13],[38,-56],[31,-72],[11,-12],[12,-2],[12,10],[15,24],[18,17],[15,9],[26,20],[1,13],[-22,49],[-13,40],[3,7],[28,-6],[48,-22],[73,-71],[13,0],[26,6],[28,11],[13,13],[5,-5],[4,-39],[-7,-21],[-34,-21],[2,-10],[9,-14],[15,-9],[18,-25],[13,-29],[11,-13],[12,-7],[30,16],[9,12],[3,9],[6,-2],[11,-14],[3,-9],[29,-16],[17,-20],[11,-9],[12,9],[47,-16],[13,-13],[4,-22],[-3,-13],[8,-35],[59,-83],[6,-42],[1,-17]],[[55231,80363],[-7,-1],[-16,-9],[-21,-3],[-22,1],[-17,-15],[-16,-25],[-17,-17],[-9,-16],[-5,-16],[-57,-45],[-8,-19],[-6,-26],[-3,-35],[-4,-31],[-9,-17],[-31,-14],[-8,-7],[-5,-16],[-18,-25],[-20,-23],[-37,-27],[-39,-8],[-52,9],[-30,10],[-15,-11],[-20,-35],[-21,-60],[-9,-45]],[[53837,79934],[-13,28],[-23,35],[-38,48],[-30,-2],[-11,12],[-5,18],[-12,30],[-14,22],[-17,8],[-24,27],[-33,58],[-30,41],[-28,-1],[-18,21],[-19,28],[-14,27],[-21,66],[-15,37],[-12,23],[-14,19],[-5,15],[17,35],[6,18],[7,13],[4,14],[0,10],[-15,35],[-20,25],[-30,25],[-19,32],[-8,29],[-2,16],[-13,21],[-10,32],[0,19],[2,6],[10,0],[11,-13],[16,-26],[13,-36],[8,14],[14,39],[27,44],[26,25],[24,2],[20,7],[16,13],[29,-5],[21,-9],[6,5],[9,23],[5,20],[46,11],[16,39],[8,-1],[11,6],[9,15],[10,6],[7,-8],[10,-4],[10,9],[15,44],[8,6],[40,7],[55,26],[28,23],[27,12],[29,23],[47,21],[2,9],[-21,22],[-8,14],[-5,15],[8,15],[10,5],[13,-6],[39,-10],[11,-9],[4,-23],[10,-20],[8,-3],[-3,-34],[12,-13],[18,-10],[12,2],[9,14],[3,9]],[[53948,82874],[-12,2],[-34,-6],[-34,9],[-7,34],[6,34],[-14,22],[-13,14],[-2,19],[2,20],[59,-54],[48,-48]],[[53947,82920],[-4,-18],[5,-28]],[[53134,83189],[-43,-1],[-16,23],[-17,6],[9,28],[12,11],[41,-19],[13,-36],[1,-12]],[[53808,83169],[7,-39],[-8,-19],[-31,32],[-32,0],[-18,-51],[-14,-2],[-49,46],[-7,23],[-2,18],[7,65],[-1,20],[15,22],[2,32],[27,34],[24,1],[8,-28],[11,-20],[40,-22],[6,-10],[4,-14],[-19,-27],[-6,-14],[6,-23],[30,-24]],[[52385,83359],[-11,-14],[-26,2],[-15,13],[5,14],[14,11],[11,2],[18,-7],[4,-21]],[[52705,83424],[2,-10],[40,-16],[17,-24],[19,-37],[2,-54],[-24,-38],[-20,-24],[76,9],[8,-22],[11,-24],[41,17],[103,-70],[63,34],[16,2],[14,-57],[-16,-57],[-55,-61],[13,-38],[17,-8],[52,8],[82,-37],[17,11],[67,86],[26,18],[88,14],[16,33],[35,33],[23,36],[55,70],[56,-13],[33,-13],[37,-7],[33,-74],[83,-81],[77,7],[27,-77],[12,-96],[24,-30],[20,-19],[63,-21],[2,-1]],[[53960,82793],[2,-13],[4,-48],[5,-39],[33,-157],[-1,-39],[-1,-10],[-11,-54],[-21,-45],[-28,-26],[-15,-28],[-3,-32],[35,-55],[72,-79],[29,-67],[-13,-56],[-5,-41],[6,-27],[11,-21],[18,-16],[7,-24],[-3,-33],[3,-23],[13,-16],[-1,-7],[-6,-23],[-9,-42],[-5,-30],[-21,-42],[7,-36],[16,-41],[12,-21],[4,-20],[-8,-48],[4,-12],[50,-35],[8,-16],[5,-33],[18,-72],[-15,-91],[-13,-50],[-28,-78],[-2,-8]],[[52115,79258],[-14,8],[-10,38],[3,58],[15,76],[4,56],[-7,35],[9,54],[25,71],[16,75],[9,78],[12,52],[23,36],[56,100],[5,8],[-2,50],[-15,7],[-22,15],[-56,18],[-52,11],[-24,14],[-21,38],[-13,1],[-25,-14],[-32,-9],[-22,8],[-15,-2],[-8,-7],[-4,6],[-6,33],[-12,8],[-18,8],[-12,-3],[-8,-16],[-12,-12],[-12,4],[-35,75],[-9,17],[-3,15],[-8,28],[-22,27],[-21,9],[-10,-3]],[[51762,80329],[1,35],[8,50],[8,26],[11,21],[11,15],[2,27],[-1,25],[-13,4],[-33,19],[-19,20],[-14,25],[-18,34],[-8,34],[-1,35],[3,15]],[[51664,81077],[16,89],[-12,26],[-14,13],[-17,6],[-8,13],[-2,14],[3,9],[19,-3],[6,9],[47,52],[2,10],[-6,6],[-9,3],[-2,11],[0,15],[25,75],[8,32],[1,23],[-1,22],[-15,35],[-14,28],[0,23],[-10,12],[-29,60],[0,23],[16,18],[23,11],[8,10],[13,6],[37,-17],[16,-16],[5,4],[14,16],[26,-3],[62,33],[9,16],[7,17],[1,7],[-24,32],[-1,12],[3,14],[7,10],[14,8],[16,14],[34,40],[11,35],[4,37],[1,29],[-10,22],[-9,14],[-13,-2],[-25,1],[-23,13],[-13,20],[-3,18],[6,11],[2,14],[-4,14],[2,11],[10,10],[74,-1],[5,11],[5,54],[18,81],[18,46],[3,19],[-1,108],[3,55]],[[51999,82535],[-13,26],[-27,28],[6,59],[9,45],[27,57],[22,15],[96,9],[105,-4],[44,-84],[-16,-44],[25,-20],[13,7],[9,38],[6,42],[9,13],[33,-32],[12,-21],[0,-69],[12,93],[-9,66],[6,63],[14,34],[12,21],[77,-23],[86,12],[32,-25],[73,-123],[24,-20],[31,-6],[-42,26],[-89,149],[-26,19],[-41,5],[-26,15],[-16,23],[-4,20],[1,150],[-16,22],[-20,8],[-12,-10],[-25,-1],[-5,34],[6,26],[51,17],[33,23],[2,41],[-22,32],[-25,58],[-30,56],[-3,64]],[[52408,83469],[52,-1],[13,-3],[78,-30],[19,-21],[24,-1],[44,20],[33,8],[12,-12],[18,-5],[4,0]],[[52307,83402],[-6,-12],[3,82],[30,86],[13,-2],[-13,-23],[-4,-16],[-5,-33],[2,-17],[70,-5],[-8,-15],[-71,-10],[-11,-35]],[[62012,58467],[-24,-77],[-31,-99],[-35,-112]],[[61922,58179],[-21,-1],[-17,6],[-12,19],[-24,21],[-27,2],[-26,-20],[-43,-24],[-40,-8],[-31,-13],[-27,-16],[-23,9],[-21,14],[-4,119],[-5,130],[0,101],[7,56],[7,22],[37,77],[13,32],[42,127],[37,110],[27,82]],[[61771,59024],[9,16],[11,15],[8,-4],[53,-79],[10,2],[17,25],[16,84],[12,31],[4,-1],[34,24],[31,26]],[[61976,59163],[4,-28],[47,-113],[15,-56],[16,-102],[-9,-56],[-12,-37],[-18,-34],[-62,-80],[-69,-52],[-44,-103],[-33,7],[5,-39],[12,-5],[19,8],[38,30],[34,14],[37,1],[33,-13],[23,-38]],[[32977,60627],[-26,-13],[-11,99],[-18,73],[3,45],[3,17],[38,-28],[12,-33],[7,-89],[-8,-71]],[[53155,83462],[50,-36],[33,2],[22,-14],[6,-23],[2,-51],[-24,-15],[-26,5],[-36,-19],[-117,83],[2,69],[4,27],[56,7],[28,-35]],[[52912,83437],[-19,-6],[-21,12],[-35,48],[-4,12],[18,-8],[23,-25],[18,-5],[25,-21],[-5,-7]],[[53485,83505],[-10,-9],[-43,7],[-48,-40],[-18,12],[7,26],[5,9],[16,11],[11,16],[4,25],[10,-14],[30,-5],[14,-8],[12,-12],[10,-18]],[[52794,83459],[-29,-8],[-14,14],[-28,5],[-9,89],[2,5],[14,-6],[47,-41],[16,-45],[1,-13]],[[52981,83381],[-12,-3],[-17,46],[-2,15],[20,30],[12,34],[33,52],[19,61],[7,-1],[-8,-55],[-43,-151],[-9,-28]],[[54190,83537],[-10,-10],[-46,17],[-56,39],[9,79],[14,34],[102,-88],[1,-33],[-14,-38]],[[52956,83876],[12,-30],[14,-64],[23,-72],[-10,-30],[7,-38],[-7,-41],[-44,-46],[-51,-2],[-52,22],[-74,44],[-6,24],[-10,13],[-20,74],[1,92],[37,11],[81,43],[18,-6],[20,-23],[23,-1],[32,32],[6,-2]],[[53518,83868],[-26,-24],[-6,1],[-9,34],[14,20],[8,17],[6,0],[8,-19],[5,-29]],[[52946,83976],[-5,-11],[-17,11],[-2,37],[6,34],[-7,30],[8,19],[25,-45],[7,-21],[-9,-25],[-6,-29]],[[53491,83977],[0,-58],[-7,-17],[-10,-11],[-28,-11],[-24,-17],[-22,-29],[-7,-41],[16,-30],[31,-16],[8,-58],[-26,-28],[-64,-28],[-7,-68],[2,-54],[-1,-39],[-5,-54],[-52,-24],[-34,82],[0,33],[-11,38],[-1,33],[-12,52],[-50,14],[-19,2],[-27,-9],[-6,3],[-33,72],[6,79],[-17,40],[-3,18],[1,20],[-14,16],[-18,9],[-8,44],[20,11],[48,-5],[15,3],[13,9],[39,73],[-1,16],[4,21],[42,8],[19,-28],[-3,-46],[2,-57],[26,-16],[10,-3],[10,43],[8,21],[10,12],[4,39],[-6,24],[-13,17],[48,49],[50,38],[29,2],[29,-9],[27,-13],[15,-11],[8,-18],[-18,-43],[-5,-23],[12,-77]],[[53070,84822],[-12,-13],[-38,19],[17,26],[42,13],[24,-4],[-27,-27],[-6,-14]],[[52408,83469],[-3,47],[-6,35],[-18,51],[27,12],[-5,100],[-10,52],[-75,53],[-60,51],[14,174],[6,46],[-23,91],[3,105],[9,164],[19,7],[14,-1],[53,-30],[22,-3],[15,-26],[18,-11],[13,28],[5,48],[42,62],[30,23],[20,11],[20,-25],[16,-28],[4,61],[12,117],[-40,19],[-33,-16],[-32,-74],[-29,-94],[-47,-8],[-37,-27],[-34,28],[-22,24],[0,35],[5,22],[39,76],[54,73],[53,-1],[39,23],[24,3],[72,-5],[38,16],[33,34],[73,141],[41,59],[82,21],[76,68],[22,1],[-36,-51],[-6,-19],[-4,-30],[25,-66],[-5,-40],[2,-78],[-24,-41],[-28,-87],[-12,-13],[-2,-101],[3,-25],[-4,-92],[28,-38],[29,-20],[99,1],[10,-16],[13,-29],[-9,-49],[-11,-36],[-28,-31],[-37,-23],[-23,-1],[-31,44],[-15,-14],[-15,-23],[-26,-119],[-12,-81],[-6,-7],[-15,12],[-25,1],[-31,-19],[16,-17],[17,-30],[-7,-15],[-28,-16],[-24,-32],[-11,-25],[-31,-29],[-19,-37],[9,-46],[4,-40],[9,-45],[-8,-35],[-38,-51],[-14,-45],[32,1],[21,-10],[12,-13],[12,-19],[-8,-23],[10,-59]],[[30064,62234],[1,95],[8,38],[-7,41],[-31,43],[-19,56],[-16,49],[3,7],[34,2],[12,18],[22,50],[5,41],[-2,31],[-15,36],[-6,39],[18,34],[24,49],[3,18],[0,19],[-28,52],[-2,22],[13,56],[-1,38],[-13,116],[-6,17]],[[30061,63201],[12,10],[8,34],[11,31],[14,17],[17,10],[32,-1],[44,-27],[13,1],[43,24],[35,14],[34,-16],[13,-21],[28,-33],[14,-10],[43,1],[12,-3],[37,-55],[30,-22],[18,-1],[32,21],[16,-1],[18,-47],[4,-67],[15,-61],[24,-39],[115,16],[25,-32],[-8,-27],[-17,-14],[-54,6],[-24,-3],[-5,-26],[0,-25],[32,-6],[31,-12],[32,-20],[33,-13],[36,-9],[36,-14],[61,-49],[66,-109],[18,-25],[12,-34],[-6,-43],[-24,-69],[-13,-22],[-20,-14],[-13,-28],[-13,-49],[-8,-4],[-9,2],[-16,28],[-12,42],[-32,39],[-38,-5],[-56,24],[-34,-12],[-34,-2],[-35,12],[-35,4],[-35,-15],[-34,-26],[-12,-16],[-22,-39],[-12,-15],[-82,-20],[-24,29],[-22,40],[-32,5],[-46,-30],[-28,-11],[-12,-14],[-3,-14],[0,-56],[-7,-33],[-45,-127],[-25,-90],[-10,-28],[-12,-6],[-23,52],[-14,19],[-17,9],[-7,27],[0,39],[-5,38],[-10,29],[-16,20]],[[52382,73120],[6,-31],[1,-29],[-27,-26],[-17,-16],[-21,-74],[-38,-50],[-7,-15],[1,-14],[26,-23],[8,-21],[5,-29],[-12,-103],[-7,-80],[-10,-104],[0,-39],[10,-48],[10,-37],[3,-42],[-3,-103],[12,-60],[9,-55],[-23,-68],[-9,-61],[-7,-87],[-2,-54],[-15,-51],[-19,-47],[-22,-30],[-26,-25],[-31,-34],[-25,-90],[-54,-74],[-11,-26],[-5,-60],[1,-83],[9,-66],[26,-97],[23,-107],[6,-55],[9,-20],[32,-35],[55,-48],[10,-19],[27,-74],[26,-133],[8,-88],[51,-70],[46,-64],[45,-57],[49,-62],[7,-19],[16,-130],[16,-129],[18,-143],[17,-143],[21,-169],[12,-95],[15,-116],[17,-136]],[[52644,69256],[-28,-29],[-30,-37],[22,-70],[43,-114],[26,-92],[9,-40],[21,-114],[16,-110],[4,-36],[7,-85],[-8,-235],[12,-297],[16,-149],[-25,-134],[-22,-128],[2,-64],[11,-101],[12,-74],[16,-39],[-3,-125],[-7,-46],[-48,-65],[-54,-60],[-15,-51],[-4,-57],[7,-46],[37,-102],[55,-153],[61,-168],[6,-43],[2,-119],[25,-150],[28,-66],[10,-49],[20,-35],[19,-26],[12,-3],[69,41],[117,-67],[111,-69],[8,-14],[24,-87],[40,-142],[30,-114],[26,-102]],[[53324,65390],[-144,-176],[-144,-176],[-144,-176],[-144,-176],[-143,-176],[-144,-175],[-144,-176],[-144,-176],[-95,-117],[-61,-103],[-76,-129],[-72,-128],[-56,-101],[-74,-130],[-37,-66],[-81,-146],[-25,-26],[-108,-43],[-99,-39],[-92,-36],[-63,-25],[-60,-24]],[[51174,62870],[-88,-34],[-63,-25],[-68,-26],[-11,-4],[-12,-1],[-9,1],[-19,14],[-23,34],[-15,18],[-4,27],[9,36],[11,32],[4,25],[8,19],[9,16],[1,22],[-8,36],[-7,50],[0,91],[0,30],[0,11],[-20,35],[-38,38],[-35,23],[-17,8],[-38,13],[-54,25],[-19,16],[-35,84],[-17,22],[-81,14],[-26,14],[-22,20],[-19,27],[-11,47],[-3,37],[-7,18],[-89,91],[-23,31],[-12,29],[0,43],[2,52],[-4,46],[-3,23],[-41,55],[-91,124],[-91,123],[-91,123],[-91,124],[-91,123],[-91,123],[-91,124],[-91,123],[-91,123],[-91,124],[-91,123],[-90,123],[-91,124],[-91,123],[-91,123],[-91,124],[-77,104],[-85,110]],[[48660,66241],[-63,81],[-63,80],[-67,86],[-44,53],[-52,64],[-52,63],[-52,64],[-53,64],[-52,64],[-52,63],[-52,64],[-53,64],[-52,63],[-52,64],[-52,64],[-53,63],[-52,64],[-52,64],[-52,64],[-53,63]],[[47587,67560],[0,118],[0,96]],[[47587,67774],[0,140],[0,122],[0,122],[0,84],[0,87],[2,40],[5,17],[28,28],[44,65],[17,28],[21,29],[74,88],[15,24],[72,101],[17,15],[38,10],[16,18],[22,41],[32,46],[21,22],[5,4],[13,3],[66,-14],[28,-10],[33,-9],[11,6],[9,15],[12,32],[3,38],[1,33],[2,15],[6,6],[14,-2],[20,-5],[39,2],[14,4],[45,7],[63,22],[51,28],[40,23],[43,58],[32,62],[32,93],[26,80],[53,50],[44,30],[25,12],[58,42],[48,64],[45,60],[35,8],[44,10],[10,11],[11,21],[1,38],[-14,26],[-16,14],[-11,15],[-11,3],[-6,18],[3,33],[2,31],[7,30],[-2,44],[-11,43],[-4,31],[1,31],[6,24],[16,16],[19,6],[26,-8],[46,11],[117,74],[8,23],[8,52],[8,45],[13,15],[6,4],[39,12],[56,17],[20,3],[61,-5],[44,-4],[71,-6],[50,-3],[44,-3],[56,-3],[14,11],[0,33],[-10,61],[6,38],[22,36],[27,40],[-13,48],[-22,32],[-30,39],[-15,16],[-27,47],[-17,53],[-11,113],[-21,63],[-15,78],[13,143],[-20,87],[-3,37],[0,44],[6,76],[-4,107],[-23,111],[11,37],[5,20],[-2,17],[-21,35],[-9,29],[4,27],[12,39],[-1,17],[-35,48],[-59,78],[-16,34],[-8,43]],[[49383,72064],[56,-11],[29,5],[67,51],[52,69],[41,36],[37,75],[32,48],[48,52],[136,111],[21,1],[45,-25],[39,8],[27,39],[29,93],[44,57],[57,58],[76,54],[50,51],[80,43],[199,28],[102,24],[70,-5],[70,80],[35,26],[152,6],[72,58],[272,0],[33,-19],[33,-32],[56,-75],[27,-17],[36,16],[84,72],[94,37],[51,42],[22,62],[44,23],[25,-47],[98,-48],[60,13],[26,15],[-9,71],[63,-19],[49,-34],[51,-69],[33,-14],[60,31],[125,16]],[[27741,50130],[-5,-22],[-27,2],[-7,7],[0,25],[6,81],[7,34],[22,32],[18,16],[23,-3],[25,-29],[-29,-55],[-16,-8],[-6,-7],[-11,-73]],[[24882,51071],[-11,-1],[-16,24],[12,45],[13,-11],[9,-13],[5,-17],[-12,-27]],[[25161,51318],[-33,-24],[-11,11],[-7,11],[-2,15],[19,35],[17,20],[16,41],[29,24],[9,-6],[5,-8],[2,-14],[-9,-33],[-18,-23],[-17,-49]],[[24907,51398],[-15,-1],[-43,56],[3,55],[17,37],[56,18],[23,-34],[-2,-66],[-19,-48],[-15,-9],[-5,-8]],[[24604,51577],[-28,-10],[-24,20],[-10,30],[-2,47],[2,15],[52,16],[17,-38],[0,-57],[-7,-23]],[[24840,51650],[-13,-17],[-52,20],[-16,33],[13,46],[11,18],[31,-17],[32,-51],[-6,-32]],[[24646,51857],[18,-37],[9,-106],[56,-112],[7,-62],[-5,-29],[2,-11],[27,-44],[18,-47],[-30,-108],[-62,-46],[-67,2],[-13,11],[-18,42],[-4,37],[11,35],[34,54],[53,48],[6,37],[-21,35],[-14,71],[-34,50],[-16,152],[-11,8],[-23,-21],[-11,18],[-2,10],[25,34],[5,25],[36,12],[15,-20],[9,-38]],[[28080,52564],[-15,-4],[-7,28],[19,32],[6,6],[-3,-62]],[[29087,51781],[-15,-20],[-16,-2],[-22,-7],[-30,20],[-12,0],[-1,-20],[20,-25],[19,-27],[7,-43],[11,-50],[28,-56],[17,-28],[1,-20],[-5,-37],[-1,-31],[9,-141],[-6,-8],[-11,-1],[-10,1],[-9,15],[-8,9],[-3,-22],[-8,-62],[-18,-142],[-16,-123],[-20,-44],[-28,-70],[-40,-95],[-56,-138],[-42,-64],[-33,-50],[-39,-58],[-50,-76],[-56,-42],[-78,-58],[-55,-42],[-41,-29],[-42,-30],[-56,-40],[-22,-38],[-36,-92],[-17,-44],[-15,-38],[-3,-18],[2,-11],[7,-18],[1,-19],[-10,-12],[-9,-2],[-4,9],[-3,21],[-9,22],[-11,6],[-6,-5],[0,-20],[-15,-94],[0,-46],[-6,-18],[0,-41],[-14,-38],[-6,-34],[-4,-29],[-12,-20],[-4,-31],[-11,-67],[-12,-52],[-9,-45],[-1,-34],[6,-23],[3,-19],[-6,-35],[-4,-25],[-15,-18],[-33,-42],[-13,-28],[-5,-32],[3,-28],[-1,-23],[-16,-9],[-5,-20],[-11,-35],[-12,-12],[-31,19],[-22,0],[-18,17],[-19,51],[-15,42],[-13,55],[-4,76],[-17,22],[-17,26],[-20,-7],[-24,-5],[-13,18],[-33,32],[-28,36],[-21,18],[-16,-9],[-10,-22],[-17,-39],[-25,-27],[-11,2],[-15,18],[-3,21],[12,33],[25,73],[-28,2],[-9,23],[-2,27],[-4,28],[5,35],[15,18],[22,-14],[15,-1],[10,32],[10,14],[11,11],[4,16],[-11,52],[-3,28],[3,16],[0,32],[-1,24],[-6,21],[-1,32],[-5,17],[-2,18],[0,21],[-7,10],[-8,11]],[[27687,49891],[6,8],[40,29],[17,29],[20,26],[18,41],[11,39],[28,180],[26,114],[-5,54],[-21,74],[-5,109],[2,33],[-3,25],[-14,-45],[4,-160],[-13,-72],[-17,-18],[-12,13],[7,117],[-13,-22],[-21,-79],[-34,-59],[-1,-19],[-9,-25],[-26,23],[-20,24],[-65,132],[-43,27],[-25,47],[-6,19],[-3,27],[26,27],[28,37],[2,82],[0,65],[-20,109],[9,144],[-5,56],[-23,119],[17,60],[60,44],[20,29],[13,95],[14,56],[27,-22],[21,2],[-28,21],[-24,85],[-3,39],[44,117],[24,30],[28,62],[25,93],[6,147],[-10,105],[-8,111],[15,28],[36,15],[30,36],[15,33],[36,-5],[41,51],[66,26],[91,58],[20,52],[-9,92]],[[59499,69886],[4,-18],[9,-48]],[[59512,69820],[23,-123],[20,-96],[25,-134],[8,-51],[3,-35],[36,-147],[21,-121],[16,-98],[21,-143],[10,-49]],[[59695,68823],[-15,-26],[-32,-93],[-33,-296],[-47,-231],[-5,-144],[-8,-52],[-23,-73],[-27,-72],[-49,37],[-79,126],[-46,120],[-49,77],[-47,103],[-13,73],[1,48],[-21,115],[-15,55],[-57,123],[-16,65],[-13,29],[-12,41],[-21,160],[-23,101],[-25,-28],[4,-43],[-22,-59],[-14,-68],[11,-56],[46,-85],[10,-37],[11,-80],[-2,-110],[7,-37],[35,-81],[13,-48],[7,-42],[12,-38],[34,-71],[50,-134],[47,-91],[35,-44],[14,-44],[3,-113],[-2,-55],[30,-101],[11,-52],[29,-42],[13,-48],[12,-78],[18,-231],[26,-56],[77,-303],[66,-192],[32,-144],[48,-174],[95,-383],[56,-118],[22,-66],[41,-51],[44,-74],[-42,7],[-10,-5],[-15,-12],[-7,-45],[-3,-37],[5,-194],[11,-98],[37,-188],[28,-56],[14,-36],[18,-27],[88,-63],[52,-136],[115,-170],[11,-48],[0,-10]],[[60241,64514],[-91,-1],[-91,0],[-91,0],[-91,0],[-91,0],[-91,0],[-92,0],[-91,0],[-91,0],[-91,0],[-91,0],[-91,0],[-91,0],[-92,0],[-91,0],[-91,0],[-52,0],[9,51],[6,37],[-7,25],[-17,6],[-12,-8],[-27,-107],[-14,-5],[-33,0],[-106,0],[-106,1],[-106,0],[-106,0],[-106,0],[-106,0],[-107,0],[-106,0],[-106,0],[-106,0],[-106,0],[-106,0],[-106,0],[-106,0],[-106,0],[-107,0]],[[56938,64513],[0,129],[0,130],[0,129],[0,129],[0,130],[0,129],[0,130],[0,129],[0,129],[0,130],[0,129],[0,129],[0,130],[0,129],[0,129],[0,130],[0,129],[0,129],[0,130],[0,129],[0,130],[0,129],[0,129],[0,130],[0,129],[0,129],[0,130],[0,129],[0,129],[0,130],[0,129],[0,129],[-2,25],[-15,87],[-14,112],[-16,138],[-2,44],[-25,141],[-3,41],[7,28],[42,119],[12,58],[11,70],[4,56],[-13,86],[-14,78],[-5,79],[-2,79],[21,53],[26,50],[10,30],[15,35],[11,16]],[[56986,70077],[21,-70],[43,-12],[142,62],[157,-62],[86,-24],[133,-54],[81,-95],[23,-12],[58,2],[38,-56],[152,-27],[81,-62],[46,-50],[28,-15],[24,2],[33,19],[42,35],[45,48],[94,125],[33,22],[22,-6],[27,2],[11,33],[14,23],[8,27],[15,31],[48,9],[98,54],[-11,-25],[-89,-61],[38,-8],[39,21],[45,13],[8,26],[6,48],[9,7],[30,-9],[92,-74],[23,-2],[65,41],[13,9],[21,-23],[48,-93],[-17,2],[-51,80],[-4,-40],[-29,-70],[36,-30],[30,-11],[16,-39],[10,-35],[29,15],[21,47],[-11,27],[-8,27],[10,1],[20,-23],[58,-89],[20,-19],[22,3],[48,26],[13,-4],[63,33],[8,-25],[10,-24],[51,27],[80,0],[66,29],[76,71],[6,11]],[[61150,60884],[11,-30],[8,3],[7,10],[4,21],[44,-42],[-3,-29],[-26,-1],[-30,12],[-28,-4],[-33,12],[-8,48],[21,-23],[11,6],[2,6],[-15,33],[-21,6],[1,26],[10,10],[6,12],[-13,35],[24,-8],[15,-21],[10,-25],[3,-57]],[[61132,61107],[9,-56],[-27,21],[-5,12],[12,22],[3,13],[8,-12]],[[60724,62214],[84,-333],[34,-196],[30,-206],[23,-308],[21,-157],[34,-78],[23,-146],[21,-6],[14,-40],[25,-138],[18,-51],[9,44],[-1,25],[-7,43],[7,54],[14,33],[31,-44],[18,-34],[5,-68],[7,-37],[33,-80],[28,-23],[37,-6],[30,-17],[25,-29],[46,-81],[104,-71],[85,-216],[49,-151],[163,-227],[28,-110],[15,-106],[34,5],[59,-117],[17,-89],[48,-32],[9,52],[23,-43],[9,-67]],[[61771,59024],[-24,60],[-18,52],[-26,63],[-24,29],[-26,35],[-26,83],[-26,91],[-39,75],[-73,107],[-67,136],[-51,142],[-33,74],[-14,19],[-68,47],[-47,65],[-37,53],[-22,15],[-22,2],[-47,-11],[-38,34],[-16,0],[-26,9],[-21,12],[-23,-14],[-49,-24],[-20,5],[-11,34],[-7,25],[-17,27],[-14,0],[-7,-24],[-51,-60],[-86,-33],[-20,2],[-15,24],[-44,103],[-12,17],[-10,2],[-20,12],[-18,20],[-17,42],[-16,24],[-18,-83],[-31,-144],[-17,-78],[-21,-100],[-7,-3],[-11,7],[-43,125],[-26,47],[-20,-5],[-15,-23],[-9,-41],[-10,-26],[-11,-10],[-23,5],[-36,20],[-37,-5],[-38,-28],[-5,-1]],[[60145,60055],[-9,166],[-6,110],[-6,118],[-6,110],[26,68],[13,65],[31,210],[13,41],[24,113],[4,32],[24,142],[-2,94],[-5,95],[13,56],[12,45],[-1,38],[6,89],[4,22],[14,2],[30,-12],[22,9],[26,0],[19,3],[12,27],[16,103],[10,21],[8,6],[23,19],[19,30],[16,22],[5,4],[17,3],[16,13],[8,14],[21,12],[20,-7],[14,13],[9,8],[11,1],[9,12],[4,18],[6,12],[16,27],[8,19],[3,20],[3,16],[7,26],[28,66],[24,38]],[[45031,67862],[-27,-94],[-34,35],[-8,12],[-7,19],[33,4],[33,47],[10,-23]],[[45722,68057],[-2,-45],[6,-45],[-1,-68],[-13,-36],[-35,-37],[-26,6],[-15,15],[-27,60],[-1,61],[25,41],[10,51],[64,-10],[6,10],[4,3],[5,-6]],[[45226,67984],[-11,-5],[-14,15],[-14,45],[10,34],[8,16],[13,-3],[23,-25],[8,-25],[0,-16],[-23,-36]],[[45462,68190],[-23,-131],[-22,-52],[-13,-17],[-32,-14],[-38,82],[-19,83],[-11,26],[17,21],[25,-3],[54,17],[11,7],[55,84],[55,10],[1,-27],[-60,-86]],[[46056,68069],[-38,-65],[-38,15],[-6,11],[38,16],[34,50],[22,110],[35,121],[7,52],[13,20],[19,2],[8,-4],[9,-27],[0,-61],[-10,-102],[-18,-89],[-75,-49]],[[45046,68256],[-7,-5],[-7,46],[-33,111],[20,50],[37,1],[15,-34],[5,-36],[-7,-21],[2,-42],[-4,-27],[-21,-43]],[[46190,68497],[-19,-38],[-21,13],[10,83],[9,25],[39,36],[32,15],[9,38],[11,15],[11,-23],[-9,-26],[-6,-84],[-22,-26],[-44,-28]],[[50442,74119],[-6,-8],[-18,8],[-28,0],[-1,23],[4,16],[5,17],[17,-33],[27,-6],[0,-17]],[[50401,74261],[-10,-35],[-42,12],[-10,15],[9,40],[13,5],[0,28],[13,29],[60,23],[14,-20],[3,-28],[-36,-61],[-14,-8]],[[50873,74763],[27,-19],[28,17],[15,-5],[15,-9],[3,-37],[-13,-41],[-18,-41],[-16,-45],[-13,-52],[-25,-31],[-23,-18],[-48,38],[-28,10],[-8,14],[-7,58],[-12,18],[-19,8],[-16,-14],[-21,-31],[-12,31],[-17,5],[-7,19],[0,23],[115,139],[33,31],[71,36],[11,-5],[-9,-22],[0,-9],[9,-10],[-2,-17],[-9,-14],[-4,-27]],[[51192,74793],[-5,-7],[-85,67],[-28,7],[-7,10],[1,35],[2,15],[57,7],[46,-24],[25,-67],[2,-11],[-8,-32]],[[49501,76847],[1,-20],[10,-28],[12,-10],[24,-14],[18,-2],[25,-7],[17,-16],[1,-24],[-5,-28],[-10,-25],[-6,-20],[6,-11],[9,-9],[9,-2],[7,3],[5,15],[9,19],[5,2],[0,-10],[4,-13],[31,-23],[67,-41],[26,-1],[22,-5],[6,-17],[43,-64],[10,2],[19,-1],[23,5],[16,12],[11,-2],[12,-13],[14,-11],[19,-20],[16,-26],[11,-9],[67,17],[15,-15],[16,0],[18,4],[39,-8],[32,2],[3,7],[3,57],[5,21],[7,5],[19,-4],[68,-34],[28,-21],[27,-17],[24,-2],[15,-11],[22,-55]],[[50473,76326],[43,-27],[19,-17],[7,-20],[9,-19],[13,-3],[18,19],[29,20],[48,-18],[54,-26],[23,-3],[1,13],[4,18],[9,8],[13,3],[19,9],[21,16],[21,6],[23,-11],[28,-10],[17,0]],[[50892,76284],[7,-36],[14,-14],[5,-31],[-24,-17],[-15,-2],[-4,-54],[6,-16],[14,-14],[4,-17],[3,-79],[-28,-48],[-40,-54],[-193,-173],[-46,-84],[-17,-19],[-143,-53],[-101,-57],[-48,-20],[-60,-98],[-28,-40],[23,-11],[26,-47],[-9,-21],[-38,-32],[-17,-10],[-9,5],[-9,-4],[-64,-170],[-58,-123],[-32,-53],[-32,-79],[-70,-206],[-1,-59],[35,-204],[19,-54],[28,-45],[53,-38],[12,-38],[-18,-36],[-52,-64],[-91,-86],[-39,-68],[-8,-66],[-27,-30],[-10,-92],[-16,-61],[-4,-20],[-17,-47],[-2,-33],[28,-47],[-14,-20],[-14,-9],[-32,-5],[-108,-6],[-87,-100],[-44,-89],[-39,-165],[-48,-98],[-21,-18],[-33,43],[-41,7],[-40,-15],[-20,-33],[-33,-19],[-32,16],[-68,9],[-31,-2],[-48,-27],[-41,18],[-69,9],[-150,-21],[-18,-11],[-19,-41],[-48,-70],[-72,-3],[-66,-45],[-16,-29],[-28,-79],[-9,-58],[-5,-1],[-7,14],[-11,-4],[-5,-45],[-25,-20],[-20,-7],[-51,36],[-42,54],[-22,3],[-36,84],[-16,54],[-11,57],[2,22],[-3,19],[-32,23],[-8,53],[24,68],[19,30],[12,8],[-29,-3],[-21,-44],[-27,71],[-109,138],[7,31],[-1,18],[-18,-37],[-13,-10],[-56,6],[-64,-17]],[[47942,73259],[-17,144],[-8,55],[-2,35],[17,82],[18,34],[24,69],[30,58],[31,13],[14,9],[11,44],[7,38],[-5,4],[-36,-8],[-66,159],[2,26],[8,38],[6,47],[1,38],[17,32],[26,32],[22,46],[11,46],[3,41],[-13,29],[-36,16],[-37,117],[-8,73],[-8,8],[-23,33],[-22,62],[-3,10],[23,11],[93,1],[20,13],[3,5],[17,49],[18,80],[4,49],[-6,20],[-31,49],[-1,15],[5,23],[18,25],[25,28],[14,25],[-3,19],[-8,20],[-1,18],[5,23],[1,79],[4,20],[-5,71],[-6,58],[-20,75],[4,17],[9,14],[29,26],[24,62],[35,51],[45,41],[31,46],[13,35],[9,10],[-3,16],[-6,24],[-18,23],[-23,13],[-26,0],[-16,4],[-4,19],[1,49],[-1,49],[-5,22],[-12,17],[-24,-5],[-20,14],[-16,3],[-9,-10],[-45,3],[-19,8],[-14,9],[-8,-5],[-5,-10],[-1,-15],[-3,-19],[-17,-18],[-37,-18],[-30,2],[-28,12],[-9,10],[-13,8],[-57,-10],[-7,7],[-19,-18],[-29,-22],[-16,-1],[-6,4],[-2,10],[-12,34],[3,18],[23,53],[-2,12],[-10,17],[-8,25],[-3,12],[-15,2],[-15,-13],[-60,-26],[-14,-9],[-26,-26],[-27,-39]],[[47561,76002],[-20,-8],[-8,12],[-2,91],[32,60],[22,37],[-10,7],[-24,-1],[1,29],[12,13],[11,31],[-13,14],[-10,20],[0,53],[3,22],[-3,23],[-49,-32],[-13,5],[0,40],[27,60],[3,18],[-32,9],[-24,30],[-14,26],[-16,38],[0,34],[16,79],[23,24],[20,14],[42,55],[57,-10],[36,11],[32,28],[19,7],[29,24],[-1,33],[-10,25],[9,23],[33,29],[37,37],[42,7],[43,34],[29,-22],[25,7],[29,-25],[38,-58],[56,-24],[45,19],[78,3],[40,-7],[70,14],[40,-5],[64,29],[51,-36],[97,-17],[58,-30],[162,-49],[59,-1],[82,28],[35,21],[32,-13],[47,24],[23,-4],[29,-35],[104,-46],[27,39],[20,9],[74,-24],[75,-49],[39,-3],[57,13],[46,32],[9,4]],[[56282,85611],[20,-14],[18,4],[18,10],[40,-9],[92,-71],[8,-19],[-54,-8],[-13,-22],[-13,-15],[-15,-5],[-27,-30],[-35,-29],[-8,-17],[-64,3],[-35,-11],[-29,-33],[-11,-62],[-21,-49],[-21,-18],[-22,-3],[-6,19],[3,18],[46,69],[10,23],[-23,10],[-20,24],[-42,28],[-8,22],[10,2],[10,7],[11,19],[5,21],[-34,64],[18,10],[21,-2],[22,-19],[24,22],[11,3],[17,-8],[17,42],[40,14],[20,13],[20,-3]],[[56484,85570],[-23,-6],[-55,41],[13,27],[15,11],[47,-17],[6,-42],[-3,-14]],[[56367,85729],[-23,-28],[-13,11],[-7,14],[-30,-65],[-33,-11],[-19,13],[2,24],[-19,63],[-29,19],[-40,1],[-30,26],[113,18],[12,30],[23,32],[17,3],[15,-7],[2,-25],[4,-10],[51,-13],[20,-41],[8,-50],[-24,-4]],[[57781,86108],[14,-18],[19,-29],[5,-17],[-6,-9],[-19,-9],[-4,-8],[-8,-15],[-22,-3],[-11,-11],[-14,-49],[-25,-81],[-38,-62],[-30,-34],[-14,-26],[-8,-31],[-2,-31],[29,-172],[0,-31],[-7,-31],[-5,-33],[4,-28],[19,-48],[20,-71],[8,-46],[14,-17],[13,-12],[3,-8],[-1,-8],[-6,-9],[-59,-24],[-8,-20],[-6,-23],[-25,-33],[-8,-31],[-5,-36],[-1,-13]],[[57597,84981],[-7,-2],[-39,8],[-42,23],[-19,18],[-18,-1],[-23,-11],[-79,-33],[-20,7],[-46,33],[-23,35],[-51,71],[-4,17],[-7,13],[-55,18],[-20,26],[-17,4],[-24,13],[-65,55],[-16,6],[-4,-10],[2,-13],[-4,-8],[-9,1],[-14,20],[-18,18],[-56,-34],[-20,-9],[-17,-2],[-88,-44],[-27,-24],[-11,2]],[[56756,85178],[2,23],[37,113],[7,89],[13,13],[4,12],[-6,29],[-38,18],[-15,-3],[-14,-30],[-14,-23],[-34,-13],[-29,23],[-67,32],[-18,41],[-4,42],[-35,40],[-15,48],[6,33],[32,22],[9,19],[-40,-3],[-9,5],[-2,17],[-18,58],[16,23],[7,22],[-13,19],[4,22],[10,22],[-6,50],[40,27],[40,19],[83,10],[-8,46],[34,2],[57,56],[56,-10],[82,38],[157,0],[22,22],[-4,22],[0,24],[30,-7],[49,4],[186,-46],[45,0],[63,-47],[34,-13],[101,0],[154,-21],[31,32],[3,9]],[[61922,58179],[-4,-23],[-12,-33],[-15,-33],[-13,-34],[-29,-95],[-1,-12],[4,-19],[15,-44],[17,-70],[9,-65],[7,-31],[20,-36],[28,-74],[15,-50],[31,-26],[11,-63],[23,-93],[25,-74],[25,-58],[27,-23],[11,-2],[57,-107],[44,-82],[11,-13],[79,-54],[90,-61],[73,-50],[92,-63],[92,-62],[85,-59],[120,-84],[97,-67],[77,-53],[16,-17],[91,0],[92,0],[95,0]],[[63327,56449],[-69,-137],[-77,-155],[-82,-162],[-52,-105],[-83,-166],[-69,-139],[-72,-151],[-64,-137],[-84,-189],[-54,-123],[-85,-192],[-53,-121],[-8,-7],[-77,9],[-74,9],[-95,12],[-10,-1],[-28,-11],[-17,-11],[-68,-33],[-13,-8],[-56,-52],[-58,-61],[-31,-47],[-23,-68],[-10,-48],[-11,-21],[-18,-19],[-121,-46],[-36,-6],[-56,-37],[-30,-61],[-9,-31]],[[61634,54134],[-41,1],[-71,-9],[-30,-10],[-15,-2],[-27,0],[-23,11],[-15,17],[-18,38],[-41,76],[-30,48],[-66,-55],[-59,-55],[-84,-77],[-47,-56],[-15,-56],[-37,-101],[-33,-63],[-12,-8],[-75,14],[-27,12],[-44,12],[-60,22],[-40,23],[-44,3],[-62,8],[-39,17],[-39,57],[-51,68],[-52,70],[-54,72],[-63,82],[-69,91],[-16,9],[-7,2],[-75,4],[-78,4],[-53,3],[-16,10],[-13,21],[-16,67],[-20,48],[-23,60],[-2,82],[6,90],[6,29],[-3,30],[0,40],[-12,38],[-77,43],[-13,-3],[-12,-16],[-15,-12],[-10,11],[-7,16],[0,27],[1,19]],[[59796,55006],[-4,11],[-25,41],[-23,53],[-14,58],[-13,48],[-7,108],[-17,66],[-16,81],[-25,154],[-11,53],[-20,36],[-21,33],[-22,68],[-57,61],[-21,47],[-38,81],[-10,41],[-2,41],[-12,38],[-21,43],[-66,93],[-18,12],[-24,10],[-34,9],[-46,21],[-40,36],[-19,26],[-4,18],[4,30],[14,51],[28,122],[19,83],[13,24],[36,6],[38,-3],[27,-6],[39,-1],[47,7],[18,28],[15,31],[6,21],[2,55],[0,43],[-3,167],[-2,102],[-2,116],[1,24]],[[59466,57293],[0,30],[11,124],[11,72],[7,37],[30,119],[5,38],[1,35],[-11,159],[19,75],[25,75],[21,32],[18,21],[8,-9],[20,-34],[27,-34],[13,7],[18,30],[14,31],[-2,56],[12,115],[-2,66],[13,83],[14,116],[7,73],[8,39],[39,81],[33,115],[22,83],[40,137],[21,49],[17,22],[25,14],[46,12],[33,12],[5,17],[3,28],[0,61],[7,105],[14,102],[17,78],[10,35],[11,34],[12,58],[16,124],[-1,84],[22,155]],[[56007,86467],[-24,-6],[-15,17],[6,12],[17,14],[18,-2],[4,-16],[-6,-19]],[[56064,86486],[-28,-20],[-10,5],[3,33],[16,15],[28,2],[-9,-35]],[[56159,86618],[35,-13],[15,5],[17,-30],[-29,-20],[-2,-24],[12,-14],[4,-22],[-29,0],[-13,18],[-6,23],[-13,16],[-18,13],[9,16],[5,24],[13,8]],[[56109,86599],[-20,-3],[-29,29],[-3,11],[11,6],[-8,23],[3,10],[22,-18],[12,-21],[-12,-5],[20,-22],[4,-10]],[[55958,86710],[-4,-27],[-19,3],[-19,-5],[-15,27],[-9,45],[3,9],[12,10],[9,-24],[42,-38]],[[55893,88272],[3,-11],[17,3],[21,20],[16,-9],[-2,-28],[-10,1],[-3,4],[-14,-16],[-2,-9],[-16,-7],[-29,28],[-18,45],[42,0],[-4,-11],[-1,-10]],[[56902,89280],[-42,-19],[-33,12],[-1,37],[21,18],[37,7],[52,-18],[7,-10],[-29,-7],[-12,-20]],[[58045,91602],[-18,-7],[-58,-28],[-35,-19],[-42,-14],[11,-18],[70,-4],[11,-6],[8,-9],[1,-15],[-7,-25],[-76,-134],[-2,-29],[25,-79],[35,-93],[104,-41],[78,-32],[51,-77],[82,-101],[44,-37],[2,-12],[-13,-70],[-53,-69],[-49,-59],[-51,-71],[-40,-60],[-44,-73],[-5,-23],[-1,-22],[8,-25],[55,-88],[22,-46],[26,-48],[22,-54],[13,-47],[22,-47],[14,-24],[23,-33],[28,-50],[9,-39],[42,-136],[4,-35],[-2,-25],[-18,-7],[-41,-4],[-44,-17],[-2,-5],[29,-32],[-26,-55],[-3,-79],[-28,-41],[-2,-10],[1,-8],[5,-6],[50,-11],[4,-11],[1,-23],[-5,-22],[-25,-16],[-27,-23],[-6,-22],[1,-19],[9,-33],[18,-38],[23,-24],[80,-22],[10,-19],[5,-26],[-2,-25],[-37,-50],[0,-19],[15,-47],[19,-44],[78,-48],[27,-27],[7,-21],[4,-34],[0,-37],[-6,-32],[-25,-42],[-57,-83],[-57,-33],[-4,-7],[18,-26],[101,-107],[66,-50],[89,-67],[57,-53],[18,-38],[25,-43],[28,-35],[20,-30],[8,-19],[-1,-21],[-27,-63],[-15,-49],[-27,-71],[-28,-50],[-69,-91],[-103,-113],[-24,-34],[-48,-59],[-82,-120],[-22,-26],[-67,-96],[-31,-30],[-24,-28],[-67,-90],[-72,-69],[-71,-63],[-21,-33],[-26,-24],[-31,-23],[-14,-14],[-71,-87],[-98,-120]],[[57721,86714],[-10,-2],[-26,-20],[-40,-5],[-17,-14],[-61,42],[-11,3],[-36,-11],[-34,-31],[-64,-9],[-32,-10],[-20,-14],[-4,33],[9,43],[14,29],[1,18],[-10,-1],[-21,-42],[-11,-49],[-21,-25],[-48,-10],[-47,39],[-23,0],[14,-28],[10,-31],[-1,-18],[-25,4],[-28,-19],[-25,-27],[-11,0],[-17,38],[-30,-18],[-26,-24],[-52,-7],[-31,-31],[-55,-22],[-30,1],[-69,-25],[-23,-40],[-20,-14],[-29,12],[-88,-19],[-84,-25],[-36,1],[-36,11],[-38,-35],[-40,-47],[-45,-16],[-16,6],[13,24],[29,25],[21,35],[2,28],[-13,12],[-19,3],[-24,30],[-23,64],[-13,3],[-6,-17],[-7,-49],[-7,-14],[-12,-11],[-15,-12],[-14,-5],[-51,1],[-7,24],[0,11],[9,32],[-7,6],[7,26],[12,-2],[14,4],[7,13],[0,16],[-20,4],[-1,11],[18,45],[2,12],[-7,3],[-11,-5],[-73,14],[-90,57],[-22,3],[-14,51],[-21,-6],[-32,-30],[-24,22],[-25,15],[-7,24],[0,34],[-2,41],[-7,47],[-5,68],[5,53],[20,39],[8,25],[9,64],[3,74],[-6,26],[2,17],[16,0],[-4,14],[-7,8],[-8,17],[7,9],[19,0],[2,6],[2,8],[-15,43],[-2,21],[-21,62],[-23,60],[-36,43],[13,71],[14,64],[-3,31],[-5,37],[-44,41],[-7,58],[-10,63],[4,38],[7,29],[14,29],[73,92],[4,48],[50,4],[-23,42],[-6,24],[-1,29],[71,19],[27,-16],[62,20],[55,38],[-1,20],[-8,18],[-12,35],[8,10],[21,-7],[-10,17],[2,18],[22,-7],[36,51],[1,39],[63,21],[71,79],[33,25],[32,18],[69,80],[29,3],[15,54],[58,72],[17,9],[27,64],[71,75],[45,95],[25,33],[8,36],[28,3],[25,27],[54,18],[53,-5],[22,-12],[21,4],[-2,32],[-15,20],[12,19],[28,14],[-2,32],[-7,20],[-23,25],[12,58],[2,63],[11,73],[-29,39],[-112,65],[-21,-2],[-24,8],[-26,50],[11,43],[2,16],[-11,-1],[-16,-21],[-36,-23],[-46,18],[-23,-4]],[[56709,89749],[-29,106],[-15,41],[-25,50],[-43,25],[-8,14],[-6,22],[-2,29],[-6,44],[3,36],[5,22],[19,14],[27,41],[5,30],[3,45],[12,40],[14,20],[-4,16],[-9,23],[-20,32],[-31,40],[-23,37],[-9,36],[-6,31],[1,29],[9,19],[29,25],[4,10],[-12,55],[-20,10],[-34,5],[-20,0],[-3,6],[-1,11],[4,22],[10,26],[9,16],[2,14],[-12,47],[-3,58],[4,45],[36,34],[2,12],[-46,36],[-33,41],[-10,24],[-38,4],[-23,69],[-35,34],[-33,30],[-20,13],[-117,42],[-46,8],[-55,25],[-41,31],[-35,20],[-30,24],[-42,23],[-12,19],[-45,37],[-21,23],[-74,45],[-3,18],[0,17],[-3,7],[-76,33]],[[55728,91610],[15,19],[59,1],[49,-17],[11,7],[6,16],[-21,61],[4,15],[22,20],[34,15],[54,2],[37,-2],[7,-2],[55,-67],[48,-65],[25,-28],[61,-79],[23,-46],[8,-32],[25,0],[86,-14],[72,-12],[20,-19],[50,4],[39,16],[68,21],[18,26],[23,27],[39,-4],[44,-22],[49,-28],[44,-13],[59,-21],[28,-27],[39,-7],[40,26],[24,73],[21,32],[30,24],[34,10],[27,4],[20,19],[28,40],[5,50],[-5,89],[5,30],[23,48],[31,128],[14,37],[17,22],[23,14],[42,39],[61,76],[16,7],[43,4],[54,-3],[49,-14],[5,1],[22,7],[39,24],[68,47],[43,13],[40,-1],[43,-52],[62,-58],[40,-28],[108,-53],[94,-34],[54,-114],[-27,-46],[-13,-16],[-46,-45],[-50,-64],[-4,-33],[17,-34],[20,-22]],[[98507,39346],[-2,-7],[-8,2],[-2,13],[5,7],[7,-5],[0,-10]],[[358,39937],[0,-1],[-1,0],[-2,2],[-2,4],[0,4],[0,4],[1,0],[2,-4],[1,-4],[1,-5]],[[407,40802],[-3,-5],[-8,6],[-6,8],[-1,8],[3,10],[6,6],[3,-2],[-2,-3],[-3,-4],[0,-11],[5,-6],[4,-2],[2,-5]],[[99579,40913],[0,-25],[-36,-16],[-12,20],[-8,4],[-21,-36],[-6,-15],[-2,-11],[-6,-6],[-39,-17],[-17,17],[12,12],[14,23],[14,-3],[15,22],[14,33],[21,8],[14,13],[24,-10],[19,-13]],[[56,40932],[0,-17],[-4,1],[-5,8],[-2,-4],[-2,-5],[-1,-12],[-1,-7],[-4,3],[0,11],[1,9],[2,12],[7,11],[9,-10]],[[344,41339],[-3,-10],[-15,17],[-6,12],[16,9],[8,-3],[0,-25]],[[99818,41415],[-2,-5],[-24,46],[0,19],[5,16],[9,15],[9,-26],[7,-44],[-4,-21]],[[281,41487],[-8,-8],[-6,2],[-7,9],[-4,16],[9,14],[13,-16],[3,-17]],[[486,41501],[-16,-6],[-14,25],[9,26],[13,-7],[7,-25],[1,-13]],[[99673,41630],[-14,-10],[-8,35],[11,35],[12,4],[6,-36],[-7,-28]],[[99521,41836],[0,-26],[8,-11],[8,-2],[21,-48],[31,-42],[19,-32],[1,-28],[-6,-29],[8,-51],[4,-54],[14,-86],[-20,-16],[-30,-2],[-7,-15],[-11,8],[-25,-6],[-25,-28],[-23,-38],[-27,0],[-30,-8],[-30,5],[-21,21],[-38,22],[-49,19],[-21,15],[-17,25],[-16,63],[-3,31],[3,30],[15,10],[12,15],[1,19],[6,14],[7,5],[3,9],[-5,32],[-1,29],[29,53],[31,45],[56,42],[34,-4],[52,33],[17,15],[16,-10],[9,-24]],[[99839,41839],[-10,-16],[-4,79],[9,0],[7,-8],[4,-20],[-6,-35]],[[290,41893],[-7,-20],[-6,7],[8,33],[1,14],[-12,18],[-1,12],[3,8],[15,-20],[9,-15],[1,-8],[-2,-15],[-9,-14]],[[99231,41965],[-15,-9],[8,45],[8,15],[5,3],[9,3],[-4,-32],[-11,-25]],[[99999,42071],[-21,-21],[-8,21],[10,50],[-99980,52],[99999,-102]],[[0,42174],[30,49],[9,7],[10,-45],[-12,-49],[-30,-43],[-7,-22],[0,103]],[[99999,42315],[-4,-1],[0,11],[-99995,19],[16,28],[12,5],[-8,-27],[0,-14],[-20,-21],[99999,0]],[[99999,42529],[-42,-77],[-15,-39],[-13,-44],[-36,-47],[-15,-63],[1,-64],[36,67],[40,54],[12,11],[13,0],[-1,-19],[-6,-18],[-5,-48],[11,-45],[-30,5],[-29,-4],[-35,-25],[-34,-11],[-13,-1],[-13,9],[-8,13],[-6,29],[-6,5],[-28,-1],[-40,-59],[-14,-50],[-16,-2],[-18,11],[-23,-38],[-26,-14],[-12,32],[-7,40],[-10,29],[-29,7],[4,36],[8,15],[7,21],[5,24],[14,-16],[14,-9],[16,18],[17,1],[17,53],[26,33],[37,26],[37,19],[19,3],[18,11],[32,50],[21,25],[24,15],[22,9],[20,-8],[17,5],[-99957,35],[9,15],[6,0],[-3,-13],[-12,-11],[99999,0]],[[99199,44639],[-10,-6],[-18,5],[-4,9],[6,2],[11,6],[14,-3],[3,-6],[-2,-7]],[[33421,21755],[-18,-11],[-5,5],[-5,22],[-1,28],[-2,12],[12,-4],[20,-22],[-1,-30]],[[33767,21882],[1,-50],[-22,16],[-8,24],[12,17],[11,-1],[6,-6]],[[33050,22012],[20,-8],[20,3],[-11,-59],[-9,-28],[-24,2],[-23,39],[-8,20],[26,15],[9,16]],[[33253,22199],[41,-11],[37,40],[25,13],[21,-9],[15,-24],[21,4],[61,25],[8,-9],[21,29],[19,-13],[14,-25],[-7,-30],[-17,-19],[-10,-26],[-13,-21],[-21,-19],[-16,-31],[-40,-73],[-57,-94],[-19,-8],[-40,-6],[-17,7],[-14,-2],[-12,-51],[-18,-38],[-9,-8],[-19,-4],[-8,-5],[-7,-14],[-50,3],[-35,24],[-41,52],[55,64],[48,-3],[39,43],[32,21],[13,22],[14,17],[0,22],[-11,10],[-14,-1],[-14,-10],[-34,-12],[-23,25],[15,10],[17,-1],[52,24],[10,10],[-16,33],[-31,21],[-26,34],[-4,13],[1,20],[-14,41],[15,2],[19,-26],[44,-36]],[[33302,22237],[-38,0],[-8,19],[1,47],[28,4],[29,-20],[-2,-20],[-10,-30]],[[33652,22309],[43,-33],[53,11],[22,-9],[13,-28],[-7,-26],[-17,4],[-15,-7],[3,-35],[10,-14],[56,-38],[10,-3],[-1,16],[-10,26],[-4,28],[9,24],[14,7],[64,11],[15,-11],[32,-66],[-30,-9],[-12,-28],[26,-12],[20,-19],[-11,-28],[-2,-14],[-46,-19],[-40,-13],[-19,-33],[-33,-24],[-96,-42],[11,-33],[1,-17],[-4,-43],[-133,52],[-18,-5],[36,-90],[-26,-16],[-26,10],[-24,-7],[-15,-65],[-38,42],[-32,58],[-1,33],[32,62],[-10,26],[73,83],[13,25],[23,14],[23,5],[10,11],[-1,20],[-10,35],[1,57],[58,77],[-8,49],[18,1]],[[65499,39550],[-40,-17],[-27,6],[-54,49],[-15,33],[-21,91],[5,32],[17,57],[38,23],[41,-9],[18,-15],[21,-67],[28,-67],[-4,-80],[-7,-36]],[[62549,44368],[-17,-5],[-8,15],[-5,36],[5,35],[1,28],[-14,49],[14,28],[12,-32],[6,-3],[18,-22],[-5,-42],[1,-13],[-8,-42],[0,-32]],[[34828,53183],[4,5],[10,4],[9,0],[14,42],[23,27],[40,145],[17,60],[2,33],[5,68],[-9,83],[4,24],[35,100],[15,55],[1,47],[4,34],[-4,18],[-8,5],[-13,44],[-9,37],[-23,37],[-16,39],[-27,88],[3,49],[-8,18],[-8,18],[1,23],[-6,55],[-7,52],[-2,33],[6,57],[-4,62],[-8,33],[-3,51],[2,45],[8,25],[-2,32],[34,100],[25,58],[23,41]],[[34956,54930],[20,30],[27,152],[19,54],[20,7],[109,-126],[51,-11],[103,-68],[38,-88],[86,-145],[45,-46],[1,-38],[-10,-60],[29,53],[45,-84],[13,-41],[14,-76],[-5,-49],[-6,-25],[-1,-19],[14,27],[7,21],[3,51],[10,63],[15,1],[12,-38],[24,-163],[9,-33],[4,-52],[-2,-24],[2,-21]],[[33103,60192],[-2,-33],[-7,-6],[-11,27],[-45,-4],[-7,25],[-1,11],[22,42],[-26,11],[-10,18],[-22,87],[2,26],[9,13],[15,2],[28,-28],[20,-40],[7,-1],[3,-11],[-4,-29],[12,-24],[5,-17],[12,-69]],[[32991,60996],[-15,-2],[-7,5],[-2,34],[12,24],[7,6],[10,-27],[3,-22],[-8,-18]],[[32891,61063],[-22,-26],[-11,8],[-14,50],[-9,138],[7,22],[5,9],[30,-17],[12,-19],[13,-13],[-7,-25],[4,-103],[-8,-24]],[[32964,61192],[-32,-6],[-22,5],[-5,41],[11,35],[-8,42],[5,25],[11,17],[18,-22],[3,-32],[11,-29],[51,-61],[-43,-15]],[[52633,76500],[-7,-84],[5,-25],[10,-18],[5,-19],[8,-225],[-2,-18],[-34,-91],[-7,-26],[-2,-113],[-6,-30],[-12,-30],[-21,-96],[-19,-43],[-51,53],[-30,22],[-14,25],[-10,17],[6,23],[14,23],[2,19],[-32,21],[-15,14],[0,24],[11,38],[-5,32],[-18,-2],[-15,5],[-1,17],[10,21],[14,27],[-1,30],[-16,13],[-15,25],[-6,33],[12,23],[18,15],[-13,34],[-10,1],[-7,7],[6,16],[14,24],[21,71],[28,33],[50,22],[14,9],[12,25],[14,16],[16,-2],[16,-9],[9,-11],[8,11],[6,31],[-4,27],[2,75],[9,42],[15,3],[13,-24],[-1,-20],[5,-49],[1,-32]],[[49672,78285],[-10,-50],[-18,46],[-25,41],[-5,37],[0,10],[29,-27],[29,-57]],[[51608,80378],[9,-19],[22,-9],[7,-7],[9,-13],[14,-5],[18,5],[12,18],[17,8],[17,-3],[10,-10],[19,-14]],[[51950,78298],[-23,-34],[-37,-31],[-5,-19],[1,-23],[4,-18],[21,-23],[22,-51],[15,-46],[31,-45],[8,-13],[-2,-11],[-9,-19],[-10,-63],[-13,-10],[-14,-4],[-39,-46],[-17,6],[-25,-1],[-17,-15],[1,-28],[16,-27],[9,-28],[4,-30],[18,-22],[24,-13],[14,-1],[9,-8],[6,-10],[10,-64],[-6,-16],[-13,-7],[-8,-26],[-16,-39],[-9,-31],[10,-27],[4,-20],[-5,-21],[7,-32],[19,-32],[50,-46],[47,-36],[15,-6],[63,23],[11,-2],[8,-28],[3,-19],[-7,-28],[-17,-40],[-19,-31],[-11,-27],[2,-24],[1,-32]],[[52081,77054],[-15,-10]],[[52066,77044],[-1,7],[-6,5],[-5,-3],[-4,-7],[-1,-12]],[[52049,77034],[-32,-21],[-23,-21],[-88,-127],[-41,-38],[-8,-22],[-8,-42],[-24,-36],[-22,-17],[-52,-18],[-53,-38],[-23,16],[-62,-1],[-38,46],[-74,29],[-24,67],[-33,4],[-22,-2],[-13,10],[-4,23],[0,22],[-23,-10],[-18,0],[-11,-9],[-8,-10],[-10,7],[-6,-3],[1,-13],[-22,-3],[-23,8],[-61,35],[-9,5],[-42,13],[-17,14],[-14,34],[-11,11],[-6,7],[-39,-17],[-14,-27],[-21,-32],[-146,-155],[-27,-64],[-31,-96],[-2,-44],[13,-143],[30,-74],[4,-18]],[[49501,76847],[45,17],[41,73],[39,263],[28,311],[20,58],[26,17],[-21,42],[-13,-21],[-5,-23],[-7,-12],[15,285],[11,105],[19,109],[39,-43],[32,-44],[17,-39],[21,-127],[15,-27],[24,-26],[-9,29],[-17,22],[-25,170],[-16,48],[-25,40],[-80,85],[-8,17],[-4,32],[27,-1],[23,-16],[-3,18],[-7,19],[-10,69],[-9,161],[1,28],[-4,34],[-26,7],[-20,2],[-22,13],[-110,95],[-37,98],[-39,72],[-9,32],[1,32],[20,67],[-18,43],[-17,8],[-15,21],[14,35],[11,23],[22,6],[30,-8],[28,-20],[21,-5],[-64,54],[-105,-18],[-23,7],[-19,12],[-7,40],[15,18],[13,34],[-15,23],[-20,9],[-31,-1],[-29,-7],[-7,14],[17,37],[-15,14],[-20,-7],[-29,-7],[-28,11],[-26,42],[-17,0],[-12,-5],[-18,16],[-19,4],[-13,-5],[-18,24],[-109,49],[-47,6],[-43,-22],[-24,7],[-18,32],[-14,52],[-70,41],[14,27],[32,6],[37,19],[14,23],[-29,28],[-22,7],[-9,10],[-9,24],[13,12],[9,-6],[26,-4],[45,6],[-16,25],[-18,6],[-8,6],[-36,3],[-17,-9],[-37,4],[-9,27],[-3,23],[11,51],[53,46],[131,51],[56,-7],[40,9],[47,31],[20,28],[67,16],[63,-29],[59,-109],[28,-37],[68,64],[102,-2],[21,-36],[8,30],[19,36],[15,-16],[8,-22],[107,6],[17,6],[-29,26],[-23,62],[-5,229],[-30,64],[-34,102],[-16,60],[-1,21],[5,30],[42,-1],[32,-8],[62,23],[30,-16],[-2,-47],[9,-60],[11,-28],[15,-33],[50,3],[54,-19],[68,-3],[99,-34],[42,20],[41,41],[78,27],[7,14],[-45,-6],[-42,26],[-5,29],[5,25],[16,58],[120,92],[85,28],[89,50],[45,52],[30,68],[10,14],[12,13],[-12,24],[8,256],[9,46],[17,38],[27,29],[40,32],[148,44],[22,17]],[[48139,87237],[5,-18],[-6,2],[-19,20],[-33,48],[-11,39],[-2,18],[8,-2],[7,-16],[31,-11],[8,-8],[0,-19],[10,-24],[2,-29]],[[48160,87445],[-6,-22],[-7,1],[-26,26],[-21,15],[-7,13],[-6,21],[12,2],[14,-4],[36,-20],[10,-20],[1,-12]],[[48003,87637],[25,-22],[9,-16],[-14,-15],[-18,-4],[-21,3],[-34,17],[-12,38],[24,-1],[28,7],[13,-7]],[[48158,87688],[-7,-77],[-12,0],[-20,22],[-15,4],[-5,-11],[1,-14],[8,-9],[24,-52],[2,-15],[-3,-7],[-23,15],[-57,67],[-44,110],[60,18],[43,-29],[48,-22]],[[48220,87706],[-13,-42],[-20,7],[-5,4],[-5,11],[3,31],[-1,45],[22,-37],[19,-19]],[[95272,54910],[3,-27],[-18,13],[-2,10],[10,10],[7,-6]],[[93975,55768],[-16,-14],[-20,6],[-6,47],[-10,13],[2,23],[15,19],[30,-15],[11,-34],[-7,-22],[1,-23]],[[92123,56074],[-2,-7],[-17,3],[-2,4],[1,3],[8,4],[1,10],[-4,2],[4,6],[6,1],[4,-7],[2,-9],[-1,-10]],[[92188,56124],[-4,-3],[-3,3],[1,14],[2,5],[4,1],[8,-4],[1,-4],[-9,-12]],[[88372,57315],[-21,-47],[-1,16],[6,28],[9,32],[8,19],[11,6],[8,-27],[-9,-23],[-11,-4]],[[53091,49587],[-27,51],[-24,95],[-27,58],[-58,94],[-15,69],[-66,153],[-95,152],[-69,133],[-10,29],[12,-3],[66,-66],[9,7],[7,15],[-28,34],[-27,28],[-26,17],[-26,-2],[-14,28],[-9,43],[-5,36],[-11,38],[-37,79],[-9,30],[-19,41],[12,6],[39,-40],[3,16],[-3,23],[-39,38],[-22,2],[-5,27],[3,30],[-28,115],[-29,85],[-4,41],[78,-186],[11,-4],[13,2],[33,21],[-6,25],[-15,26],[-14,-12],[-19,-2],[-9,11],[-5,19],[19,90],[-8,-4],[-6,-16],[-10,-8],[-16,-5],[-39,49],[-34,130],[-9,27],[-9,46],[-9,18],[-39,186],[15,-14],[18,-53],[35,11],[13,31],[12,-1],[12,7],[15,29],[45,128],[12,169],[-4,100],[-7,100],[15,32],[6,-21],[3,-36],[7,-26],[16,-23],[29,-7],[46,-36],[16,-24],[4,47],[53,40],[-16,14],[-47,-16],[-64,60],[-21,38],[-20,72],[-20,38],[1,33],[46,32],[12,-4],[5,-37],[12,-15],[5,5],[2,31],[0,86],[-14,122],[5,23]],[[52664,52437],[12,9],[11,16],[8,3],[16,-3],[8,-29],[4,-15],[15,-7],[13,-15],[11,4],[10,17],[13,4],[42,0],[38,-1],[75,0],[76,-1],[75,0],[57,-1],[0,70],[0,108],[-1,127],[0,122],[0,113],[-1,133]],[[49704,81042],[-24,-20],[-7,-23],[-6,-9],[-15,-6],[-15,-1],[-58,47],[-14,-2],[13,22],[37,17],[20,23],[47,-22],[22,-26]],[[48834,82558],[11,-11],[30,2],[-10,-24],[-32,-27],[-22,-26],[-26,-22],[-13,25],[-15,-1],[-22,49],[-4,72],[29,19],[41,-1],[33,-55]],[[48272,83000],[-23,3],[-17,-10],[-11,-10],[-10,2],[-30,-3],[-29,0],[-4,15],[5,46],[-6,12],[-27,6],[-10,11],[-16,31],[-3,15],[-2,20],[-16,26],[-20,19],[-12,1],[-23,-31],[-19,-31],[7,-15],[6,-20],[-11,-15],[-31,-34],[-5,-13],[-9,-7],[-15,10],[-37,-2],[-17,5],[-20,25],[-49,17],[-9,39],[-9,7],[-56,68],[-7,23],[7,13],[21,21],[70,34],[11,13],[2,12],[-21,14],[-18,15],[-6,10],[-1,9],[11,11],[21,1],[16,-5],[13,10],[24,10],[15,13],[14,33],[14,30],[1,16],[13,57],[6,14],[44,37]],[[47994,83578],[11,-21],[22,-5],[20,19],[23,59],[16,3],[18,-4],[35,7],[62,27],[28,1],[39,-14],[29,0],[26,-42],[14,-66],[32,-66],[43,-57],[1,-34],[-15,-19],[-32,-23],[1,-25],[20,12],[18,6],[44,-5],[15,-26],[10,-37],[6,-31],[-4,-34],[-11,11],[-12,30],[-13,14],[-16,7],[7,-41],[-3,-56],[7,-5],[21,-1],[-14,-56],[-28,-16],[-33,-6],[-8,-20],[-6,-26],[-17,-38],[-22,-22],[-28,4],[-28,18]],[[48581,83783],[-35,0],[-12,5],[-15,14],[-17,79],[6,28],[7,13],[7,11],[19,5],[18,-15],[7,-14],[15,-54],[3,-46],[-3,-26]],[[48297,84061],[10,-74],[10,-46],[0,-16],[-9,-22],[-45,-29],[-15,0],[0,7],[10,30],[-9,33],[4,26],[-4,4],[-9,-3],[-33,-41],[-11,-4],[-1,8],[8,34],[1,22],[5,14],[9,13],[11,10],[8,1],[9,-10],[27,28],[24,15]],[[48341,83994],[-6,-6],[-14,1],[-5,10],[-3,14],[0,26],[8,19],[36,28],[-16,10],[-1,7],[10,24],[39,36],[10,7],[10,-1],[-20,-65],[-48,-110]],[[48395,84299],[-111,-32],[-38,3],[-4,16],[8,10],[31,10],[13,77],[-47,36],[-3,10],[4,17],[5,7],[29,18],[12,4],[10,-2],[21,-21],[23,-43],[30,-7],[21,-19],[-4,-84]],[[48164,84438],[-16,-4],[-1,9],[28,39],[17,6],[6,-4],[-12,-22],[-22,-24]],[[47939,84657],[-24,-8],[-9,4],[-2,8],[6,20],[19,7],[13,-11],[2,-10],[-5,-10]],[[48255,84656],[-8,-7],[-10,1],[-11,10],[-13,27],[30,19],[13,-11],[4,-13],[0,-14],[-5,-12]],[[47986,84743],[-12,-3],[-15,3],[-10,9],[-9,35],[-2,22],[4,40],[-1,47],[32,2],[8,-7],[5,-142],[0,-6]],[[48293,84968],[-1,-26],[-5,-30],[7,-32],[1,-22],[12,-8],[7,-10],[52,-12],[49,4],[9,-10],[1,-15],[-8,-16],[-27,-30],[-33,-48],[-10,-10],[-11,-1],[-7,5],[-6,86],[-35,-11],[-29,1],[-16,10],[-11,20],[-22,52],[-65,21],[-18,28],[-6,17],[3,10],[13,21],[17,-7],[11,4],[6,10],[0,8],[-9,18],[0,6],[66,23],[5,37],[15,3],[16,-12],[23,-38],[6,-46]],[[47998,85070],[31,-32],[-25,-54],[-38,0],[-54,39],[0,8],[4,12],[8,10],[9,2],[13,-7],[19,11],[15,-4],[18,15]],[[48278,85462],[-36,-101],[-13,-2],[-13,-25],[-37,-28],[33,0],[9,-10],[0,-19],[-6,-12],[-43,-46],[-29,-18],[-31,-48],[-16,0],[-16,-31],[-13,-13],[-7,0],[-9,6],[-19,30],[35,30],[4,16],[24,18],[-2,5],[-39,24],[-15,17],[2,8],[18,19],[-9,2],[-6,10],[-10,4],[-4,10],[-1,24],[2,26],[12,11],[4,12],[5,3],[17,-6],[18,-20],[20,8],[24,-4],[1,5],[-18,49],[3,10],[10,12],[55,35],[68,60],[17,9],[5,-8],[7,-31],[-1,-41]],[[49136,85550],[2,-47],[-3,-15],[-7,-17],[-21,-33],[-55,-47],[-101,-108],[-60,-54],[-8,-26],[-4,-36],[35,-7],[14,-12],[-8,-18],[-53,-63],[-16,-58],[41,2],[33,11],[67,36],[62,27],[30,1],[59,-21],[13,-1],[25,10],[25,1],[170,-6],[47,12],[32,-15],[26,-37],[25,-68],[-1,-11],[-15,-31],[-28,-39],[-24,-54],[-7,-29],[-4,-32],[-8,-29],[-47,-138],[-47,-76],[-20,-55],[-26,-43],[-24,-27],[-26,-18],[-76,-20],[-21,-13],[-25,-24],[-27,-12],[31,1],[31,14],[56,5],[65,-46],[-6,-37],[-26,-30],[-59,-5],[-55,-65],[-25,-20],[-26,-10],[-33,3],[-60,17],[-26,18],[24,-30],[26,-15],[156,-37],[9,4],[49,39],[66,0],[126,-71],[36,-55],[52,-78],[28,-31],[21,-28],[12,-41],[25,-138],[27,-134],[37,-146],[16,-40],[22,-28],[110,-66],[24,-21],[43,-63],[41,-67],[38,-51],[41,-41],[-20,-22],[-14,-34],[11,-46],[16,-44],[33,-71],[30,-77],[-11,12],[-11,6],[-16,-1],[-15,3],[-28,24],[-27,30],[-53,-12],[-29,5],[-26,0],[49,-17],[53,-2],[117,-129],[40,-76],[23,-101],[-16,-46],[-25,-29],[-23,-34],[-22,-38],[65,-56],[14,2],[15,8],[13,19],[24,46],[12,16],[40,6],[34,-3],[34,-10],[30,3],[60,-20],[30,-18],[77,-80],[16,-44],[8,-57],[1,-63],[-13,-58],[-15,-52],[-9,-67],[-6,-25],[-9,-18],[-41,-54],[-27,-21],[-11,9],[-12,-1],[-1,-13],[12,-27],[1,-33],[-24,-24],[-25,-10],[-40,13],[-57,-45],[41,-23],[8,-25],[-10,-43],[-25,-20],[-29,-8],[-29,-2],[-24,-11],[-23,-20],[29,11],[20,-10],[13,-36],[11,-11],[57,-15],[34,0],[68,9],[32,-1],[12,-6],[0,-30],[-5,-75],[-9,-15],[-89,-62],[-19,-44],[-5,-26],[-52,4],[-24,-27],[-43,-19],[-32,-20],[-32,-25],[-27,-7],[-113,30],[-69,-3],[-93,-26],[-24,5],[-35,24],[-37,17],[-42,7],[-37,23],[23,-44],[-51,-42],[-23,-8],[-24,1],[-50,-12],[-46,6],[7,-30],[12,-26],[-9,-11],[-11,-3],[-87,20],[-13,-4],[-10,-18],[-32,9],[-31,31],[-33,21],[-34,10],[-28,-4],[-112,-48],[-23,-49],[-11,-69],[-16,-61],[-27,-47],[-31,-7],[-30,33],[-56,36],[-20,25],[-6,1],[-6,-9],[-22,-11],[-23,0],[-35,-10],[-62,-29],[-25,-20],[-53,-55],[-11,-15],[-19,-56],[-30,-9],[-27,35],[-31,13],[-32,-13],[-20,-18],[-9,15],[-1,31],[24,38],[64,28],[55,74],[28,45],[10,25],[14,16],[17,6],[9,28],[77,112],[7,25],[4,46],[6,44],[63,29],[30,93],[8,7],[88,17],[65,-1],[65,-18],[33,-2],[33,7],[26,25],[45,90],[25,40],[29,36],[27,41],[44,76],[-30,-26],[-36,-42],[-20,-24],[-66,-24],[-28,-25],[-50,-56],[-9,-5],[-75,14],[-56,72],[-35,30],[-15,4],[-15,-9],[-33,-9],[-33,1],[17,34],[23,19],[-51,13],[-15,10],[-16,23],[-40,4],[-19,-6],[-33,-31],[-51,-33],[-62,46],[-12,20],[0,39],[-9,31],[-17,10],[22,40],[26,27],[58,27],[89,62],[49,27],[46,46],[19,28],[14,39],[13,47],[20,39],[-19,9],[-9,29],[3,29],[8,26],[-7,33],[-14,34],[1,26],[3,29],[-35,-2],[-36,-9],[-32,-20],[-31,-27],[-27,-5],[0,22],[12,27],[31,38],[34,32],[12,25],[9,28],[17,23],[44,43],[83,48],[13,3],[33,-6],[32,7],[28,18],[29,4],[63,-51],[-19,78],[28,18],[41,-70],[15,-7],[32,10],[-13,12],[-14,1],[-19,10],[-15,23],[-27,71],[2,42],[17,44],[20,41],[-16,8],[-14,15],[-3,41],[5,35],[35,32],[10,48],[5,52],[-6,25],[-35,-4],[-17,-10],[-15,-16],[-16,1],[-43,59],[-25,44],[-44,93],[-6,56],[35,120],[55,77],[64,27],[-12,5],[-98,1],[-33,-10],[-30,-31],[-17,-10],[-17,-3],[-17,-16],[-15,-22],[-17,-14],[-33,4],[-16,-5],[-11,13],[-9,21],[-13,5],[-14,-6],[-29,-28],[-30,-17],[-36,18],[-48,33],[-9,-12],[-11,-31],[-6,-47],[-33,41],[-29,56],[-10,34],[0,39],[15,16],[17,-14],[25,93],[50,121],[18,35],[12,46],[-2,31],[-11,25],[-46,58],[0,48],[5,53],[13,32],[5,6],[62,-1],[-24,17],[-48,48],[1,17],[11,45],[-5,-5],[-10,-20],[-20,-50],[-12,-12],[-34,-12],[-6,-24],[-6,-7],[-17,-2],[-5,-23],[-4,-2],[-5,25],[0,41],[7,38],[13,29],[49,67],[-24,-21],[-55,-62],[-28,-40],[-7,-14],[-3,-12],[0,-13],[13,-72],[-4,-33],[-47,-219],[-9,-22],[-8,-11],[-8,-3],[-23,4],[-11,16],[0,19],[5,28],[19,104],[9,29],[13,27],[27,47],[0,3],[-19,-9],[-8,3],[-5,9],[3,139],[15,46],[6,67],[13,57],[15,42],[12,53],[17,24],[5,36],[19,39],[15,41],[-8,-4],[-96,-106],[-25,-20],[-33,5],[-26,12],[-20,26],[-9,48],[-24,1],[-21,9],[0,6],[27,27],[44,9],[41,42],[-37,29],[3,9],[32,24],[40,82],[9,75],[-20,35],[-7,23],[-38,26],[-7,33],[5,18],[12,18],[19,14],[30,14],[-27,14],[-10,17],[-8,24],[0,15],[14,63],[8,26],[16,33],[72,-2],[8,15],[8,1],[37,-14],[-6,15],[-60,79],[-5,15],[17,42],[1,19],[-2,21],[5,15],[19,8],[58,-1],[14,7],[-6,21],[-14,27],[-2,22],[3,20],[1,41],[2,17],[14,27],[11,8],[15,5],[32,-9],[12,-11],[14,-26],[10,3],[40,27],[12,4],[16,-32],[68,26],[91,11],[55,17],[58,6],[54,19],[57,-9],[2,-11],[-3,-15],[-14,-42]],[[49186,85680],[-3,-2],[-10,11],[-17,38],[27,7],[12,-5],[-5,-16],[-4,-33]],[[49120,85710],[-16,-7],[-15,0],[-25,33],[-9,25],[2,16],[10,5],[24,-8],[12,-28],[1,-18],[3,-7],[15,-7],[-2,-4]],[[49150,85846],[-3,-14],[21,0],[30,-12],[19,-2],[15,-15],[-8,-28],[-10,-8],[-10,-1],[-36,28],[-48,-12],[-10,4],[-6,7],[-2,10],[0,20],[-3,6],[-17,-19],[-8,2],[-4,9],[-2,19],[2,26],[10,38],[17,8],[26,-5],[29,-21],[9,-13],[0,-11],[-11,-16]],[[49291,85962],[-31,-1],[16,34],[19,9],[36,-4],[-6,-15],[-34,-23]],[[49241,85936],[-24,-14],[-10,12],[-2,37],[-29,16],[-14,10],[-10,18],[2,6],[19,8],[32,-34],[13,-28],[23,-8],[3,-4],[-3,-19]],[[49636,86714],[6,-40],[14,10],[22,-39],[11,0],[18,16],[-4,-36],[-18,-101],[-6,-17],[-3,-31],[-4,-6],[-6,-61],[-12,-21],[-11,-48],[-4,-5],[-16,19],[16,74],[6,43],[-4,22],[-9,20],[-24,1],[-20,-9],[-4,12],[-1,16],[-5,5],[-27,-1],[-7,4],[-6,15],[-1,12],[25,9],[22,-4],[34,24],[-21,78],[-28,7],[-6,8],[5,13],[15,7],[24,40],[14,6],[17,-1],[-2,-41]],[[49710,86701],[-7,-7],[-27,59],[20,67],[24,-2],[4,-18],[-2,-16],[-13,-2],[-1,-5],[4,-31],[0,-36],[-2,-9]],[[49784,86872],[0,-6],[-14,-49],[0,-18],[-23,2],[-4,5],[-4,28],[3,30],[3,8],[7,3],[7,-6],[12,15],[6,0],[7,-12]],[[62066,75522],[0,11],[-2,17],[-8,12],[-12,8],[-23,-3],[-20,8],[-15,21],[-3,17],[8,13],[-6,11],[-25,26],[-42,66],[-24,15],[-9,41],[-9,9],[-20,4],[-21,-4],[-5,-5],[-6,-7],[-17,-51],[-11,-18],[-29,9],[-23,12],[-19,6],[-37,5],[-43,1],[-28,-37],[-12,5],[-22,18],[-35,15],[-18,11]],[[61530,75758],[53,108],[16,65],[1,39],[0,49],[-27,102],[-24,144],[-25,151],[-19,45],[-81,52],[-19,59],[-62,77],[-87,33],[-17,14],[-76,96],[-59,62]],[[61104,76854],[13,37],[17,40],[18,9],[54,-15],[49,-18],[36,13],[42,-31],[39,-36],[39,-25],[77,-24],[28,-33],[34,-33],[130,-16],[10,5],[10,5],[44,12],[38,-3],[41,-39],[26,2],[28,6],[36,-21],[28,-24],[3,-24],[25,-35],[71,-53],[59,-30],[18,-22],[44,-35],[5,-11],[-1,-14],[-13,-26],[-3,-23],[6,-14],[18,-13],[37,-3],[13,17],[27,12],[27,22],[36,28],[49,26],[20,0],[19,-8],[13,-14],[22,-54],[22,75],[6,6],[20,-15],[35,-21],[25,-11],[13,-15],[38,-69],[61,4],[25,-11],[14,-11],[6,-13],[-10,-68],[-15,-71],[1,-17],[24,-26],[33,-29],[18,-22],[12,-20],[27,-16],[31,-9],[14,-2],[16,-17],[39,-32],[6,-8]],[[49302,80353],[-10,-38],[-26,13],[-2,10],[29,22],[6,0],[3,-7]],[[49980,58246],[18,-35],[4,-20],[-6,-75],[-13,-52],[-9,-49],[2,-24],[7,-25],[27,-38],[14,-25],[17,-38],[19,-37],[32,-48],[13,-9],[0,-13],[-5,-19],[-3,-179],[-2,-47],[-3,-23],[-3,-67],[-3,-10],[-6,1],[-6,-2],[-1,-14],[2,-13],[20,-10],[-5,-10],[-14,-9],[-7,-21],[3,-23],[-8,-18],[3,-13],[5,-9],[8,4],[23,31],[9,3],[12,-6],[22,-48],[0,-23],[-8,-79],[-9,-61],[-2,-81],[10,-46],[-2,-25],[-10,-21],[-22,-32],[2,-21],[10,-40],[19,-45],[37,-55],[19,-72],[1,-29],[-12,-29],[-13,-25],[-4,-37],[6,-241],[-30,-104],[0,-30],[3,-34],[8,-21],[15,-6],[12,-20],[-4,-74],[-7,-74],[-1,-37],[-4,-17],[-11,-14],[-4,-23],[3,-29],[-3,-22],[7,-28],[13,-35],[21,-86],[9,-7],[3,-18],[-2,-17],[8,-38],[24,-39],[25,-33],[20,-5],[5,-29],[13,-38],[10,-17],[15,-11],[13,-6],[0,-32]],[[50329,55350],[-22,-22],[-16,-33],[-12,-50],[-16,-55],[-55,-29],[-22,-1],[-114,-1],[-108,-109],[-61,-39],[-38,-61],[-51,-44],[-36,-53],[-74,-25],[-122,-83],[-38,-33],[-38,-58],[-63,-68],[-24,1],[-49,63],[-37,32],[-90,49],[-67,18],[-33,21],[-8,4]],[[49142,54797],[19,1]],[[46836,58988],[-8,-15],[-8,-34],[-8,-42],[-8,-28],[3,-18],[22,-36],[30,-51],[13,-7],[14,12],[22,41],[18,43],[17,22],[20,-2],[15,-30],[20,-68],[17,-62],[3,-6],[7,-10],[9,0],[9,15],[7,9],[8,28],[34,86],[26,23],[9,7],[18,13],[30,-21],[44,-35],[53,-42],[18,-8],[11,8],[16,57],[19,23],[28,27],[23,13],[13,2],[5,16],[2,24],[-2,24],[-15,44],[0,13],[8,8],[18,6],[24,-4],[26,-19],[22,-27],[12,-33],[13,-69],[10,-67],[27,-108],[0,-66],[-1,-77],[12,-15],[13,-6],[6,-11],[13,-59],[12,-18],[14,-4],[28,-38],[17,-14],[3,-12],[-1,-15],[-7,-20],[-10,-14],[-16,-26],[-13,-34],[-27,-81],[-1,-16],[6,-10],[11,-2],[12,5],[24,30],[20,-11],[19,-22],[6,-24],[2,-31],[-4,-40],[-1,-44],[7,-76],[9,-76],[10,-28],[62,-67],[6,-25],[3,-28],[-4,-38]],[[47642,56197],[-10,15],[-11,23],[-4,30],[-8,6],[-15,0],[-13,-17],[-6,-30],[-1,-36],[-2,-28],[-8,-16],[-17,-43],[-7,-40],[-10,-35],[-13,2],[-7,5],[-4,-9],[-21,-19],[-18,-6],[-5,20],[-10,16],[-12,32],[-14,25],[-25,18],[-10,-8],[-12,2],[-8,10],[1,16],[13,39],[8,35],[4,39],[0,37],[-7,53],[-12,41],[-2,24],[1,34],[-3,32],[-4,17],[-1,32],[-4,28],[-7,11],[-4,49],[2,49],[-10,19],[-16,14],[-9,19],[-6,22],[-5,6],[-5,-1],[-5,-14],[-5,-3],[-9,47],[-4,2],[-6,-11],[-72,-51],[-3,20],[-6,23],[-14,8],[-24,-18],[-14,-2]],[[47143,56730],[-21,6],[-10,-8],[-28,-69],[-17,-26],[-13,2],[-14,6],[-9,-5],[-7,8],[3,17],[7,21],[13,74],[35,75],[1,16],[-15,44],[-14,60],[-1,64],[-2,46],[-31,13],[-6,8],[-1,15],[8,42],[10,38],[1,17],[-2,14],[-19,41],[-29,75],[-28,84],[-23,72],[-19,33],[-18,47],[-7,30],[-19,11],[-55,-1],[-66,0],[-56,-1],[-3,-41],[-61,-27],[-38,32],[-42,-19],[-20,-20],[-6,-44],[-10,-47],[-9,-19],[-3,-22],[-6,-19],[-8,-22],[-9,-45],[-20,-64],[-21,-41],[-35,-22],[-11,-67],[-8,-25],[-14,-20],[-15,-13],[-13,8],[-16,5],[-16,-12]],[[46307,57055],[-3,17],[10,53],[-8,28],[-28,55],[-2,27],[-9,34],[-36,71],[-35,-4],[10,59],[-1,79],[-11,43],[3,44],[-7,-2],[-11,-31],[-18,10],[-38,47],[-18,46],[-3,38],[-4,15],[-11,-8],[-24,1],[-71,69],[-51,174],[-1,39],[7,67],[-1,19],[-23,-45],[-5,30],[-18,70],[-5,40],[-17,17],[-14,4],[-10,-14],[-14,-81],[-11,0],[-10,18],[2,61]],[[45821,58145],[12,30],[15,46],[46,192],[17,44],[10,15],[22,2],[42,25],[35,43],[17,17],[40,-4],[47,7],[61,41],[1,57],[-1,72],[-2,29],[-21,25],[-13,23],[-11,28],[-13,21],[0,21],[17,18],[10,10],[25,-1],[9,11],[6,18],[7,47],[2,49],[-16,66],[1,46]],[[46186,59143],[90,-6],[9,-5],[40,-9],[25,1],[15,-4],[7,-11],[-1,-19],[-5,-26],[5,-27],[14,-7],[7,8],[7,13],[9,11],[11,-7],[26,-40],[23,-10],[26,-22],[24,-11],[21,1],[16,-22],[30,-7],[39,28],[30,12],[43,3],[23,-9],[65,23],[32,-5],[19,-8]],[[45343,59368],[-2,49],[-15,111],[21,48],[22,29],[15,-23],[5,-45],[12,-31],[39,-20],[40,14],[24,-6],[-1,25],[8,33],[48,15],[50,9],[52,20],[41,-1],[12,6],[-3,8],[-36,10],[-78,-23],[-80,-7],[-60,-60],[-24,6],[-25,60],[-9,74]],[[45399,59669],[70,6],[86,-2],[93,-3],[43,-1],[23,81],[44,36],[45,13],[23,-4],[25,-12],[47,-66],[29,-16],[25,-15],[18,-32],[28,-33],[22,-8],[13,4],[22,13],[15,10],[47,4],[35,-37],[7,-41],[-6,-42],[-46,-22],[-65,-35],[-53,19],[-65,48],[-38,34],[-16,14],[-23,21],[-21,24],[-20,15],[-15,10],[-11,-13],[-6,-29],[-9,-32],[-12,-19],[-54,-11],[-49,-12],[-26,-10],[-17,-8],[-6,-97],[-55,1],[-54,1],[-57,-1],[-60,-2],[-16,-20],[-16,-32]],[[45584,58227],[-3,-16],[-16,2],[4,16],[-4,5],[5,49],[2,7],[8,-18],[1,-8],[3,-37]],[[45523,58213],[-22,-8],[-10,28],[-2,11],[12,10],[5,0],[9,21],[11,14],[5,5],[5,-1],[4,-46],[-5,-20],[-12,-14]],[[45631,58303],[0,-23],[-11,4],[-4,7],[7,43],[11,19],[12,-3],[4,-6],[-2,-16],[-6,-14],[-11,-11]],[[45582,58447],[-13,-18],[-13,9],[-7,16],[1,29],[15,41],[14,-6],[3,-71]],[[45679,58488],[-2,-13],[-16,11],[23,49],[15,8],[-1,-37],[-11,-8],[-8,-10]],[[45559,58687],[-15,-70],[-17,7],[-13,42],[-1,18],[36,6],[10,-3]],[[45821,58145],[-14,40],[11,76],[-12,-1],[-23,-61],[-12,-2],[2,72],[-13,3],[-15,-5],[-21,37],[-2,28],[1,40],[13,25],[-2,10],[-12,3],[-14,-6],[-8,11],[14,51],[49,43],[24,5],[26,9],[-14,37],[-30,15],[-24,-11],[-12,-26],[-15,-5],[-25,63],[1,31],[9,38],[14,16],[57,0],[22,21],[9,3],[8,20],[-2,12],[-9,1],[-21,-25],[-69,10],[-22,-15],[-38,-58],[-47,-31],[-34,13],[11,77],[-5,10],[-10,13],[-50,-25],[-38,35],[-15,43],[3,53],[17,36],[3,18],[-19,3],[-34,-22],[-77,86]],[[45357,58959],[16,6],[37,-9],[29,11],[21,18],[28,25],[27,9],[85,-12],[73,31],[55,56],[50,53],[66,-1],[70,0],[100,-1],[79,-1],[93,-1]],[[52664,52437],[2,13],[-25,35],[-18,3],[-16,11],[13,90],[17,80],[25,61],[13,14],[4,30],[20,99],[25,80],[-8,81],[6,136]],[[52426,54008],[7,-3],[41,2],[12,-30],[-1,-45],[-43,-131],[-8,-55],[-17,-46],[-14,-4],[-49,27],[-9,17],[-3,22],[5,52],[4,16],[23,10],[8,9],[13,56],[4,51],[10,39],[17,13]],[[56625,72312],[19,-4],[26,1],[6,3],[16,34],[20,1],[9,-34],[-20,-15],[-5,-9],[4,-7],[16,-13],[21,5],[1,-26],[4,-22],[11,-13],[11,-2],[26,4],[25,8],[25,17],[26,9],[79,-9],[28,-36],[53,-5],[50,-19],[26,13],[45,12],[7,-13],[-6,-82],[3,-24],[13,-11],[12,5],[16,27],[37,21],[39,0],[33,54],[10,3],[-6,-26],[-5,-63],[-7,-37],[-3,-29],[-22,-15],[-33,-3],[-61,6],[-60,-10],[-113,-28],[-113,-14],[-15,9],[0,37],[-3,25],[-7,18],[-35,15],[-33,26],[-130,36],[-31,14],[-50,-8],[-18,1],[-13,13],[-9,22],[-4,69],[7,69],[10,18],[5,-21],[13,-9],[12,21],[0,31],[6,29],[9,-12],[7,-45],[16,-12]],[[57548,72272],[-10,-32],[-11,27],[5,31],[-13,50],[24,74],[0,36],[18,18],[-4,-61],[-14,-49],[14,-40],[7,-46],[-16,-8]],[[56403,72689],[-3,-25],[-28,17],[-8,26],[-2,57],[8,28],[5,9],[13,-32],[27,-47],[-12,-33]],[[57734,72539],[-21,-12],[-6,2],[-9,26],[12,65],[-11,41],[-1,18],[17,24],[11,36],[27,40],[72,46],[17,5],[-1,-37],[-24,-92],[-21,-46],[6,-37],[-34,-11],[-34,-68]],[[57078,72806],[-13,-30],[-18,11],[7,11],[5,15],[0,22],[-5,13],[3,5],[17,-22],[4,-25]],[[57350,72917],[-22,-14],[-14,-29],[-17,21],[0,28],[18,-9],[13,16],[-4,18],[15,-9],[11,-22]],[[57738,72899],[-6,-9],[-14,26],[0,14],[14,16],[7,3],[2,-10],[0,-23],[-3,-17]],[[56815,73020],[0,-34],[-1,-12],[-57,-16],[5,38],[3,13],[19,-18],[7,9],[3,10],[21,10]],[[57050,72968],[-5,-9],[-21,37],[-8,21],[10,17],[31,-41],[-7,-25]],[[57485,72999],[-8,-1],[10,28],[29,38],[43,34],[14,3],[24,-21],[-44,-34],[-12,-18],[-32,-4],[-24,-25]],[[57183,73035],[-25,-4],[-8,4],[15,10],[11,10],[5,13],[25,23],[16,29],[18,-20],[-23,-13],[-34,-52]],[[56866,73111],[-5,-3],[-7,24],[-2,23],[3,13],[10,2],[13,-43],[-12,-16]],[[57505,73132],[-28,-8],[5,46],[-13,36],[21,-20],[14,-24],[7,-5],[-2,-15],[-4,-10]],[[57021,73195],[-22,-44],[-18,5],[-8,20],[12,42],[24,24],[11,-7],[-1,-31],[2,-9]],[[57096,73137],[-25,-22],[-17,32],[-10,50],[46,72],[11,-6],[6,-19],[-1,-65],[-10,-42]],[[56812,73228],[-11,-9],[-17,13],[5,32],[11,13],[13,-10],[2,-14],[-3,-25]],[[56787,73354],[-16,-17],[6,40],[-8,21],[7,17],[10,15],[5,-15],[9,-24],[-13,-37]],[[56928,73440],[-1,-60],[-8,1],[-4,9],[0,23],[3,36],[10,-9]],[[57056,73397],[-27,-3],[2,44],[10,11],[31,-22],[-1,-14],[-15,-16]],[[57230,73461],[-13,-2],[4,23],[25,40],[34,2],[32,20],[7,0],[-15,-31],[-25,-30],[-49,-22]],[[57015,73501],[-10,-37],[-18,6],[-29,40],[-10,18],[-5,18],[12,2],[14,-19],[37,-10],[9,-18]],[[56765,73488],[-19,-28],[-3,42],[12,44],[16,3],[6,-19],[-12,-42]],[[57451,73623],[34,-19],[9,2],[16,-6],[5,-35],[-22,-6],[-37,-32],[-15,7],[-19,28],[-30,3],[-9,8],[16,33],[29,16],[23,1]],[[55802,73620],[29,-56],[-23,14],[-26,-39],[-31,45],[-20,46],[-4,18],[20,43],[19,-44],[22,-7],[14,-20]],[[56942,73594],[-9,-39],[-21,45],[-24,31],[-9,27],[-14,16],[-4,36],[17,15],[8,1],[18,-44],[28,-5],[-2,-27],[8,-35],[4,-21]],[[56541,73689],[-11,-14],[-12,1],[-9,5],[-4,11],[5,6],[7,23],[6,6],[9,-3],[5,-9],[4,-26]],[[55725,73953],[4,-67],[19,-12],[26,-60],[-2,-31],[-6,-10],[-43,28],[-10,-13],[-13,5],[-7,34],[1,11],[-8,20],[-5,9],[-17,-26],[-11,-5],[0,24],[16,66],[7,11],[13,-22],[10,8],[8,36],[1,36],[3,11],[14,-53]],[[55766,73922],[-14,-6],[-17,55],[-7,38],[7,2],[7,-5],[8,-14],[0,-15],[3,-15],[7,-19],[6,-21]],[[57248,73858],[-27,-33],[-29,47],[-5,15],[21,19],[11,30],[-8,36],[-31,53],[-1,38],[46,16],[27,-33],[14,-3],[-5,-31],[2,-10],[2,-96],[-13,-13],[-2,-26],[-2,-9]],[[55746,74083],[-11,-5],[-9,3],[-9,-2],[-8,-11],[1,45],[10,57],[11,33],[17,15],[7,-26],[-1,-92],[-8,-17]],[[56854,74198],[-30,-14],[-8,2],[7,18],[0,7],[-29,33],[4,42],[3,11],[22,-22],[5,-37],[26,-40]],[[56504,74284],[15,-62],[15,-21],[31,-25],[15,-4],[52,-45],[62,-8],[8,-13],[7,-35],[13,-27],[3,-22],[-7,-23],[9,-72],[16,-68],[23,-33],[29,-10],[28,1],[7,-14],[-3,-59],[-12,-24],[-9,-5],[-9,6],[-7,14],[-8,7],[-16,1],[-12,24],[-29,33],[-5,19],[-1,31],[-13,22],[-11,42],[-11,12],[-6,21],[-1,10],[-43,6],[-35,0],[-30,24],[-9,63],[-18,17],[-13,18],[-11,25],[-29,45],[-31,39],[-30,25],[-32,16],[-26,-19],[-15,4],[-3,13],[33,27],[44,50],[31,16],[15,2],[29,-44]],[[56605,74374],[-12,-20],[-20,9],[-20,65],[52,-54]],[[56635,74399],[-13,-7],[13,46],[23,24],[-9,-38],[-14,-25]],[[57336,74498],[-5,-34],[38,-57],[13,-36],[5,-35],[-3,-10],[-15,19],[-12,6],[4,-25],[13,-21],[-22,-13],[-22,1],[-64,30],[-14,32],[38,48],[8,19],[-27,-2],[-29,-57],[-46,25],[-14,23],[-4,12],[19,51],[32,-2],[17,11],[21,16],[1,24],[50,6],[18,-31]],[[55577,74557],[6,-32],[-35,20],[-25,29],[-21,71],[-45,81],[0,24],[17,18],[36,12],[15,-13],[9,-13],[3,-16],[-20,-31],[-5,-14],[16,-28],[0,-11],[7,-55],[8,-20],[20,-16],[14,-6]],[[57065,74874],[-10,-19],[-8,-34],[-4,-47],[-16,-2],[-10,10],[-3,18],[-1,23],[-7,-1],[-6,-25],[-5,-11],[-16,-2],[-18,15],[1,33],[-4,38],[2,14],[49,3],[14,-28],[18,16],[7,18],[21,11],[-4,-30]],[[57134,75130],[-31,-15],[-35,47],[34,19],[15,-14],[11,-16],[6,-21]],[[56881,75238],[-35,-20],[-37,39],[1,23],[19,47],[10,14],[27,-4],[15,-32],[4,-15],[-5,-26],[1,-26]],[[57232,75303],[-7,24],[-43,43],[-100,25],[-48,32],[-21,-6],[-40,36],[-28,-16],[-59,-63],[-31,7],[-34,38],[-22,7],[-26,-20],[-42,-73],[-42,-36],[-38,14],[-51,0],[-5,-41],[10,-28],[27,-48],[-13,-37],[10,-36],[18,-7],[28,2],[50,-47],[22,-50],[14,-54],[-30,39],[-21,37],[-28,14],[-40,32],[-25,5],[-26,-22],[-3,-25],[29,-47],[26,-29],[14,-23],[9,-52],[-5,-17],[-10,-17],[-31,33],[-47,116],[-66,23],[-11,-24],[13,-61],[9,-24],[58,-67],[-5,-14],[-8,-6],[-65,38],[-19,58],[-4,73],[-59,50],[-56,55],[-13,53],[12,19],[8,38],[-31,-7],[-19,-24],[-32,-23],[-1,-39],[5,-36],[-10,-52],[-10,-90],[6,-48],[68,-136],[23,-99],[16,-37],[35,-42],[36,-77],[15,-40],[11,-65],[-30,-41],[-18,-2],[-9,18],[13,45],[-2,28],[-47,42],[-20,-15],[-22,-27],[13,-51],[14,-34],[8,-46],[28,4],[-38,-52],[-35,-27],[-35,-1],[-23,-5],[-7,-13],[18,-10],[15,-1],[24,-28],[68,-34],[33,-42],[32,-4],[32,-78],[56,-21],[31,-79],[43,-16],[36,-29],[11,-27],[5,-50],[2,-107],[8,-79],[0,-25],[-2,-37],[-9,-19],[-14,0],[-26,58],[-40,61],[-42,73],[-12,13],[-10,1],[-23,-25],[-63,-19],[-29,-26],[-11,-6],[-4,-14],[14,-15],[17,-33],[0,-45],[14,-56],[18,-14],[24,1],[13,-10],[4,-22],[14,-26],[9,-19],[-1,-13],[-66,-37],[-13,-16],[-12,-9],[-17,17],[-1,45],[-22,23],[-21,21],[-25,9],[-21,30],[-14,-25],[11,-85],[24,-60],[40,-158],[18,-93],[4,-46],[-9,-75],[19,-56],[14,-57],[-15,2],[-13,20],[-21,24],[-42,92],[-15,57],[-17,4],[-30,-8],[-34,-122],[1,-70],[-18,17],[-14,22],[1,76],[-1,32],[-40,104],[-19,12],[-8,35],[-15,38],[-19,-8],[-16,-15],[-4,-56],[-2,-51],[-11,-38],[-43,72],[-43,126],[-1,68],[31,63],[-4,45],[-30,89],[-43,57],[-24,17],[-11,60],[-23,31],[-19,15],[-4,22],[6,15],[45,63],[27,97],[13,5],[27,-23],[31,6],[25,57],[21,31],[36,-4],[80,-76],[87,-44],[43,-38],[25,-38],[13,-8],[20,-5],[-1,28],[-6,25],[17,14],[46,-1],[9,14],[8,21],[-9,24],[-16,12],[-16,3],[-11,8],[-17,-8],[-28,19],[-14,16],[-8,16],[-47,32],[-45,54],[-10,-31],[-19,-16],[-25,-3],[-73,35],[-45,-27],[-24,-7],[-19,0],[-23,-12],[-26,-7],[-23,50],[-9,38],[-7,8],[-1,-37],[-7,-29],[-33,-16],[-20,23],[-15,68],[-18,87],[-33,70],[-27,18],[-3,39],[3,30],[32,8],[50,-32],[11,6],[11,15],[-2,33],[-7,29],[-14,2],[-10,-4],[-31,6],[-39,-16],[-19,15],[-6,19],[-33,46],[-29,62],[-46,41],[-31,126],[-25,55],[-28,40]],[[55823,75374],[38,3],[13,4],[49,3],[22,23],[15,-2],[33,-20],[14,15],[42,32],[42,90],[18,14],[40,5],[13,10],[15,-2],[45,-18],[26,-3],[30,13],[34,22],[8,77],[8,11],[21,3],[16,0]],[[57311,75873],[25,-12],[14,-19],[9,-17],[14,-15],[10,-4],[8,-51],[4,-63],[-6,-28],[-18,-6],[-57,-60],[-2,-55],[1,-27],[1,-19],[6,-16],[0,-23],[-6,-24],[-25,-41],[-18,-33],[-19,-44],[-11,-6],[-9,-7]],[[32856,58762],[-18,-2],[7,21],[2,37],[10,44],[15,30],[15,-8],[-6,-98],[-25,-24]],[[37148,86855],[-32,-70],[-32,15],[-16,31],[-31,15],[-34,-4],[-1,12],[110,74],[53,20],[-4,-31],[-10,-27],[-3,-35]],[[39713,89591],[-43,0],[-14,45],[4,50],[49,15],[26,-34],[-10,-50],[-12,-26]],[[35829,91907],[-43,-20],[-9,5],[-9,15],[-22,70],[-7,34],[5,41],[-8,29],[39,35],[32,5],[43,-8],[72,-35],[-5,-11],[-16,-18],[-44,-24],[-15,-53],[-3,-27],[2,-20],[-12,-18]],[[35352,92133],[93,-47],[98,-32],[9,-15],[8,-22],[2,-12],[-3,-11],[-6,-10],[7,-12],[21,-16],[2,-19],[-25,-31],[-34,-35],[-183,-72],[-64,-13],[-160,-49],[-49,2],[-11,2],[-30,22],[-42,20],[-19,16],[-17,23],[7,14],[30,5],[44,0],[65,16],[-18,15],[-17,9],[-12,19],[-27,-3],[-20,11],[-38,7],[-101,7],[-66,19],[-20,11],[-17,20],[-15,28],[22,109],[15,27],[34,9],[84,-24],[11,11],[-92,40],[-33,23],[-10,19],[-6,28],[0,16],[4,16],[8,17],[23,22],[92,35],[102,-12],[175,-43],[22,-10],[54,-37],[103,-113]],[[35645,92658],[-37,-2],[-86,11],[-7,6],[-1,13],[12,37],[38,5],[45,-20],[49,-29],[6,-13],[-19,-8]],[[42935,92696],[10,-34],[1,-16],[-2,-14],[-6,-9],[-13,-9],[25,-22],[7,-15],[2,-12],[-16,-24],[-110,-31],[-31,-15],[-38,-37],[-47,-31],[-16,0],[-18,33],[-74,24],[-139,-13],[-162,-30],[-58,-14],[-29,7],[-9,12],[0,15],[19,47],[8,12],[37,15],[25,41],[-8,44],[10,62],[25,9],[64,-21],[41,-5],[73,-3],[99,8],[79,25],[144,71],[25,-1],[19,-25],[13,-12],[43,-20],[7,-12]],[[35129,92765],[-26,-4],[-75,29],[-12,11],[-5,14],[3,16],[24,30],[45,43],[32,8],[20,-27],[20,-37],[2,-18],[-1,-22],[-5,-19],[-9,-15],[-13,-9]],[[34717,93773],[-39,-39],[-32,-23],[-70,-66],[-12,-3],[-18,9],[-15,18],[-26,4],[-9,11],[-4,9],[-12,6],[-18,3],[-30,-7],[-27,7],[-21,29],[38,20],[24,17],[91,6],[25,-7],[16,0],[25,4],[54,21],[8,10],[48,-12],[4,-17]],[[44999,95280],[22,-61],[10,-56],[35,-35],[73,5],[29,-66],[-53,-26],[-214,10],[-88,-5],[-61,41],[2,71],[8,71],[61,41],[51,-36],[62,26],[63,20]],[[44838,95646],[-32,-16],[-108,239],[0,87],[7,66],[49,5],[42,-36],[20,-137],[22,-208]],[[30092,96385],[-99,-5],[-97,22],[-34,17],[2,27],[14,9],[53,9],[44,2],[29,-4],[70,-16],[50,-16],[33,-5],[-9,-24],[-56,-16]],[[45012,96567],[-54,0],[-20,15],[13,27],[75,85],[25,7],[37,-9],[11,-44],[-24,-44],[-63,-37]],[[44723,96758],[-37,-20],[-25,61],[-22,81],[-5,92],[57,45],[29,11],[20,-11],[-5,-40],[0,-82],[19,-55],[-31,-82]],[[45107,97825],[-117,-66],[-174,5],[-103,31],[-30,45],[40,51],[125,41],[156,25],[142,-15],[20,-51],[-59,-66]],[[44815,98989],[-29,-18],[-73,7],[-94,52],[-62,43],[-5,50],[32,22],[50,4],[69,-43],[71,-58],[41,-59]],[[37537,99126],[-56,-10],[-118,61],[-186,61],[-164,40],[-154,107],[-12,38],[21,33],[135,5],[108,15],[274,-66],[138,-56],[46,-45],[-7,-92],[-25,-91]],[[41679,99979],[267,-35],[141,-40],[30,1],[191,-15],[182,-19],[302,-51],[42,-16],[-32,-14],[-75,-9],[-386,-16],[-700,-21],[-401,-39],[-127,-2],[-11,-59],[54,-3],[89,8],[314,59],[117,9],[219,-5],[285,-22],[114,8],[205,-6],[239,17],[283,37],[77,-82],[104,-81],[83,9],[70,-5],[24,-26],[39,-12],[80,6],[245,-23],[168,-42],[63,-19],[30,-28],[18,-22],[-27,-28],[-105,-49],[-133,-45],[-179,-34],[-207,-22],[-1588,-73],[-54,-17],[-31,-44],[21,-57],[74,-9],[173,32],[300,31],[221,-2],[527,-26],[155,-68],[82,-105],[183,24],[39,18],[29,31],[22,33],[18,36],[19,24],[21,13],[45,11],[105,13],[274,13],[66,-4],[48,-49],[10,-28],[3,-38],[-1,-45],[-6,-55],[-24,-54],[-76,-94],[-61,-52],[-66,-37],[-126,-84],[-44,-23],[-138,-99],[-35,-45],[-2,-34],[24,-6],[40,31],[15,23],[26,23],[205,62],[44,17],[133,74],[86,28],[70,29],[37,20],[206,146],[107,43],[112,0],[20,-73],[135,-12],[59,3],[94,-18],[41,-14],[70,-8],[73,-17],[63,18],[19,12],[62,54],[83,47],[77,59],[26,15],[41,13],[42,5],[115,28],[29,2],[62,-9],[273,-5],[150,-14],[208,-40],[145,-21],[67,-20],[97,-41],[79,-43],[37,-13],[-2,-13],[-27,-19],[-195,-66],[-64,-45],[-185,-83],[-90,-29],[-98,-11],[-109,-2],[-71,-12],[-10,-12],[50,-34],[22,-25],[-3,-22],[-53,-32],[-20,-8],[-192,-24],[-97,-41],[-126,-5],[-89,5],[-123,-44],[48,-36],[44,-16],[137,-32],[1,-19],[-66,-38],[-89,-44],[-105,-31],[-40,-5],[-50,8],[-46,-2],[-101,-14],[-97,-2],[-173,20],[-93,23],[-49,8],[-62,-2],[-24,-9],[-98,-56],[-48,-38],[-31,-39],[-13,-42],[5,-46],[12,-32],[19,-17],[23,-10],[41,-6],[89,6],[35,-3],[11,-10],[19,-29],[-3,-28],[-17,-39],[-12,-45],[-9,-52],[5,-29],[36,-6],[17,2],[19,-9],[23,-21],[17,-22],[11,-23],[-6,-19],[-23,-15],[-52,-17],[-128,-33],[-13,-10],[-10,-21],[-7,-30],[-16,-28],[-23,-25],[-22,-15],[-42,-6],[-54,-1],[-61,-14],[-144,-84],[-2,-9],[54,-27],[-2,-24],[-67,-101],[-18,-50],[-14,-68],[-24,-58],[-33,-47],[-33,-55],[-31,-61],[5,-47],[41,-33],[56,26],[69,86],[74,38],[81,-12],[70,-17],[90,-34],[76,-21],[65,-28],[26,-23],[27,-33],[1,-20],[-48,-12],[-16,4],[-119,54],[-58,14],[-77,-16],[-67,-25],[60,-99],[65,-45],[117,-21],[62,-22],[44,-28],[35,-14],[47,6],[64,28],[88,1],[40,-13],[28,-26],[13,-47],[-3,-70],[-9,-52],[-16,-35],[-32,-47],[-27,-9],[-37,3],[-35,9],[-32,17],[-49,13],[-98,14],[-98,31],[-56,8],[-117,-4],[-127,-20],[-5,-25],[-182,-89],[-37,1],[-50,30],[-71,30],[-41,0],[-62,-38],[-15,-14],[1,-14],[45,-32],[18,-7],[24,-6],[80,-8],[36,-8],[33,-100],[52,-61],[23,-13],[19,-5],[65,3],[83,20],[28,-16],[61,-20],[36,-6],[43,1],[49,-7],[67,-57],[-26,-72],[42,-57],[67,-59],[15,-21],[7,-39],[1,-26],[5,-24],[9,-21],[9,-42],[9,-62],[-2,-51],[-15,-39],[-27,-29],[-42,-18],[-34,5],[-26,27],[-37,29],[-48,31],[-80,3],[-117,-90],[-52,-5],[-42,-9],[-46,-39],[-66,-24],[-59,9],[-103,46],[37,-30],[54,-36],[33,-19],[25,-4],[27,4],[39,15],[88,41],[23,6],[20,-3],[16,-12],[19,-35],[21,-58],[-3,-49],[-26,-41],[-23,-26],[-18,-12],[0,-9],[49,-10],[69,53],[22,66],[32,76],[56,25],[64,-25],[52,-71],[72,-131],[31,-14],[39,-31],[17,-39],[-4,-45],[-9,-33],[-12,-21],[-15,-13],[-27,-8],[-50,-7],[-111,14],[-58,0],[7,-45],[-117,-39],[-133,-15],[-125,30],[-104,47],[34,65],[20,72],[-51,48],[-11,1],[18,-74],[-15,-28],[-57,-35],[-40,-15],[-3,-10],[19,-8],[13,-15],[6,-23],[-7,-23],[-19,-24],[-11,-19],[-2,-16],[18,-20],[38,-22],[41,-11],[191,-5],[77,-13],[182,-53],[8,-17],[-31,-96],[-17,-92],[-35,-17],[-191,-4],[-62,-14],[-90,-42],[-87,-51],[-45,-1],[-178,45],[-68,29],[-147,84],[-110,128],[-51,-53],[-30,-26],[-32,-13],[-31,-2],[-30,9],[-34,20],[-56,47],[-68,46],[-47,22],[-1,-6],[27,-27],[41,-32],[103,-92],[37,-23],[-4,-16],[-65,-15],[-79,-31],[-39,-24],[-60,-56],[-20,-9],[-90,-14],[-29,3],[-67,32],[-99,20],[-59,18],[-82,33],[29,-36],[157,-55],[17,-17],[-32,-33],[-20,-12],[-37,-3],[-56,7],[-56,-1],[-58,-10],[-24,-12],[8,-15],[13,-14],[20,-12],[18,0],[44,38],[33,2],[88,-9],[89,29],[64,13],[48,3],[175,44],[37,50],[58,20],[131,15],[126,-8],[65,-6],[53,-47],[70,-34],[59,-37],[69,-13],[40,-50],[111,-57],[71,-12],[44,-27],[4,-114],[5,-49],[-19,-136],[-57,-31],[11,-72],[-15,-58],[-57,22],[-58,38],[-139,59],[-130,38],[-50,35],[-59,26],[-81,109],[-52,135],[-23,67],[-44,4],[-57,-18],[-49,-19],[-24,-32],[-168,-45],[-61,-30],[-35,0],[-125,-45],[50,-22],[23,-3],[51,12],[31,16],[114,44],[92,7],[33,19],[70,26],[48,8],[7,-7],[5,-12],[33,-165],[-14,-44],[-38,-19],[-80,-31],[-21,-15],[23,-27],[76,25],[50,27],[26,-10],[43,-41],[49,-21],[123,-64],[59,-35],[82,-34],[93,-47],[24,-17],[85,-24],[18,-8],[36,-83],[29,-10],[85,-5],[-15,-32],[-83,-72],[-43,-22],[-10,-15],[4,-25],[2,-42],[17,-78],[20,72],[13,34],[19,10],[17,2],[58,32],[58,-17],[15,-81],[8,-76],[-5,-66],[6,-101],[-2,-35],[14,-29],[14,-124],[14,-37],[-29,-33],[-88,-14],[-35,16],[-87,-6],[0,30],[-5,33],[0,24],[-6,21],[-4,122],[-25,-31],[-1,-24],[-7,-25],[-15,-132],[-22,-32],[-70,8],[-69,-5],[-38,5],[-129,60],[-50,54],[-44,82],[-28,76],[-10,71],[-31,57],[-51,45],[-61,36],[-70,28],[-62,35],[-53,44],[-58,33],[-64,25],[-90,10],[-133,-4],[-89,27],[-22,-2],[-21,-14],[16,-40],[103,-18],[79,-5],[105,3],[64,-10],[24,-23],[16,-42],[9,-59],[-21,-47],[-76,-52],[-39,-25],[-117,-47],[-39,-10],[-97,-4],[-75,5],[-98,23],[-55,5],[-115,3],[-27,-8],[30,-25],[49,-14],[34,-17],[4,-32],[-13,-48],[-13,-33],[-21,-25],[-75,-47],[-31,-15],[-141,-50],[-10,-10],[33,2],[89,17],[26,0],[146,-43],[116,2],[236,40],[19,-1],[16,-6],[15,-15],[16,-23],[-19,-23],[-54,-22],[-84,-22],[-36,-15],[-35,-22],[-64,-53],[-19,-56],[68,-21],[30,27],[36,59],[33,35],[76,24],[94,-12],[72,14],[148,58],[26,4],[217,-34],[197,-65],[103,-25],[138,-14],[246,7],[22,-11],[-8,-23],[-14,-20],[-41,-27],[-50,-18],[-31,-5],[-27,-13],[-59,-13],[-15,-10],[21,-45],[-10,-7],[-52,-1],[-88,-29],[-72,2],[-15,-5],[14,-10],[14,-21],[16,-32],[-9,-22],[-32,-13],[-24,-4],[-85,18],[-14,-3],[13,-13],[7,-20],[2,-28],[-21,-23],[-43,-18],[-81,-51],[-35,-15],[-74,-12],[-15,-7],[30,-39],[-4,-16],[-49,-42],[-76,-27],[-10,-14],[-7,-38],[-6,-15],[-20,-22],[-71,-42],[-51,-21],[-25,-17],[-31,-28],[-40,-16],[-47,-1],[-45,-11],[-74,-30],[-51,-10],[-163,-53],[-76,-8],[-66,-19],[-137,-50],[-64,-16],[-45,-19],[-49,-5],[-80,12],[-43,1],[-27,-8],[-24,-15],[-40,-42],[-34,-4],[-112,34],[3,-15],[29,-36],[-1,-26],[-67,-26],[-36,-7],[-52,11],[-70,28],[-90,59],[-109,89],[-53,30],[4,-29],[12,-28],[20,-27],[5,-20],[-13,-12],[-16,-6],[-20,0],[-3,-7],[33,-43],[25,-44],[-2,-41],[-31,-39],[-26,-23],[-22,-7],[-130,-98],[-37,-13],[-16,-12],[-14,-18],[-38,-81],[-15,-25],[-30,-32],[-13,-6],[-4,-13],[6,-21],[-9,-34],[-22,-49],[-76,-133],[-61,-125],[-27,-41],[-20,-17],[-12,6],[-30,-3],[-15,-22],[-13,-40],[-15,-30],[-16,-21],[-122,-89],[-32,-17],[-28,11],[-34,-4],[-70,47],[-12,17],[-45,39],[2,-20],[8,-11],[6,-17],[16,-20],[34,-105],[-27,-22],[-25,-25],[-63,-42],[-68,-70],[-25,-19],[-5,57],[3,17],[-39,27],[1,-19],[-4,-19],[-27,-74],[-8,-13],[-14,3],[-30,-14],[-30,7],[-26,33],[-11,18],[-47,-48],[-23,1],[-4,-40],[-22,-37],[-30,-16],[-41,1],[-25,-21],[-55,23],[-13,44],[44,60],[12,24],[-8,31],[11,39],[84,125],[57,63],[-3,12],[-77,13],[-68,22],[-66,8],[-29,-8],[46,-36],[66,-35],[-33,-34],[-27,-36],[-29,-97],[-19,-40],[-72,46],[-33,16],[21,-51],[63,-48],[4,-16],[0,-57],[-121,-50],[-125,-8],[-91,-14],[-152,-18],[-59,0],[-5,-19],[149,-89],[22,-16],[-21,-30],[-31,-19],[-48,-65],[-25,-23],[-63,-31],[-115,35],[-59,-16],[-57,11],[-1,-38],[17,-27],[17,-69],[38,6],[48,21],[38,-52],[24,-87],[43,-45],[19,-34],[8,-33],[-27,-32],[-55,-46],[-62,-8],[4,-36],[-27,-26],[-56,7],[-26,18],[-28,9],[-112,10],[113,-70],[40,-32],[18,19],[39,5],[58,-18],[-10,-118],[26,-95],[3,-21],[-62,-57],[-1,-54],[-36,-15],[-40,4],[-2,-59],[-27,-36],[5,-23],[8,-20],[-25,-38],[-22,-45],[-31,-39],[-17,4],[-50,-3],[-60,3],[-49,52],[-20,17],[-23,11],[9,-33],[14,-20],[45,-37],[82,-46],[-2,-33],[-22,-14],[-52,-89],[-18,-1],[-23,-23],[-72,7],[-30,9],[-88,-5],[-30,7],[-26,-3],[24,-25],[51,-23],[57,-23],[87,-17],[-3,-32],[-22,-27],[13,-39],[-10,-29],[-4,-34],[-20,-78],[23,-54],[26,-26],[-3,-35],[12,-55],[-38,-50],[-33,2],[-45,-11],[-16,-22],[73,-20],[-7,-38],[-19,-46],[-21,-100],[-42,-172],[-20,-171],[-91,-141],[-32,-3],[-8,-6],[-45,7],[-69,33],[-54,10],[-36,1],[-5,-16],[30,-27],[46,-10],[37,-18],[66,-16],[23,-31],[16,-33],[-3,-19],[0,-21],[12,-117],[-31,-40],[-24,-37],[-82,5],[-15,13],[-79,38],[5,-18],[57,-52],[20,-26],[-13,-5],[-23,-2],[-33,-18],[-58,10],[3,26],[11,27],[-27,-4],[-29,-14],[-18,5],[-14,-1],[-8,13],[-12,53],[14,27],[48,69],[15,37],[-13,16],[-34,-39],[-36,-63],[-16,-38],[-22,-8],[-55,20],[-158,88],[5,53],[-2,45],[46,5],[34,20],[30,23],[33,43],[31,71],[-4,6],[-90,-91],[-56,-30],[-27,-6],[-14,14],[-44,29],[-29,13],[-67,22],[-12,11],[-19,9],[-27,93],[35,113],[23,32],[15,38],[9,50],[-6,22],[-20,-8],[-9,-17],[1,-27],[-11,-18],[-80,-43],[-79,-35],[-38,-33],[-24,-26],[-19,-25],[-29,2],[-41,-5],[-27,-16],[-41,10],[-26,24],[-32,3],[-35,-12],[-25,1],[2,-16],[16,-41],[-27,-3],[-52,-1],[-26,11],[-20,16],[-17,22],[10,28],[83,52],[38,30],[-24,10],[-80,-9],[-14,7],[-53,-4],[2,77],[-13,19],[-1,9],[-18,21],[-18,6],[-11,7],[-90,18],[-12,43],[-6,44],[-17,55],[-43,14],[-24,24],[19,24],[8,31],[-20,14],[-13,22],[2,14],[-16,38],[-5,30],[18,27],[51,32],[17,13],[9,14],[58,23],[-50,16],[-31,3],[-23,-8],[-21,-31],[-19,-20],[-77,-7],[-11,11],[-5,43],[4,34],[32,47],[-37,23],[-33,8],[-39,22],[-35,23],[-30,27],[-29,31],[-10,4],[11,34],[6,27],[1,58],[-12,25],[26,50],[36,54],[78,82],[-83,-40],[-68,-85],[-15,-4],[-5,16],[-26,55],[-19,15],[-9,17],[-39,29],[-17,23],[-24,44],[-34,52],[-48,103],[-78,119],[-20,67],[25,84],[-27,58],[74,27],[106,31],[55,25],[32,7],[68,5],[22,25],[-37,-6],[-25,3],[-2,12],[9,21],[6,27],[-13,-5],[-66,-46],[-97,-37],[-76,-21],[-13,1],[-26,-13],[-16,-3],[-11,3],[-27,36],[-8,23],[49,63],[36,86],[48,56],[33,7],[57,-3],[20,-5],[-7,33],[3,16],[46,20],[53,8],[38,-6],[24,-39],[31,-72],[41,-24],[-2,34],[-21,45],[-8,68],[-27,29],[-22,14],[-61,-7],[-36,50],[-9,19],[0,24],[-37,72],[-12,36],[-19,47],[-10,3],[13,-60],[17,-42],[24,-93],[12,-38],[-16,-29],[-31,-30],[-27,-17],[-64,-21],[14,46],[8,45],[-32,-16],[-30,-33],[-10,-45],[-20,-41],[-57,-101],[-23,-56],[-21,-27],[-24,-8],[-21,22],[-18,51],[-9,41],[-1,104],[3,49],[-10,65],[-31,153],[-7,54],[-52,29],[-1,9],[-14,31],[-10,31],[9,12],[12,8],[78,46],[58,51],[70,80],[28,25],[102,19],[45,3],[-1,14],[-15,6],[-68,-4],[-92,-32],[-16,-12],[-40,-50],[-31,-27],[-87,-62],[-56,0],[-58,74],[-65,-14],[-44,5],[-13,11],[-10,102],[36,119],[-38,1],[-8,5],[-20,27],[-13,8],[9,14],[94,56],[141,111],[61,43],[37,19],[29,21],[34,47],[11,20],[20,16],[40,19],[44,28],[72,63],[9,23],[-15,5],[-34,-21],[-68,-58],[-49,-32],[-166,-145],[-71,-52],[-38,-34],[-30,-32],[-32,-23],[-33,-14],[-71,-10],[-35,-12],[-21,9],[-10,69],[7,40],[-3,40],[18,58],[26,40],[11,22],[5,16],[55,42],[30,18],[21,42],[121,15],[31,-1],[16,5],[13,13],[-12,9],[-36,7],[-97,-2],[-89,8],[-40,7],[-20,-4],[-32,12],[-35,23],[-55,86],[22,110],[2,53],[69,46],[37,15],[53,35],[71,59],[84,36],[43,7],[36,-6],[131,-51],[68,-10],[60,13],[75,-18],[132,-74],[25,11],[-7,18],[-148,78],[1,23],[38,6],[40,22],[-22,14],[-98,-12],[-29,-18],[-95,-10],[-49,16],[-45,8],[-67,33],[-56,-11],[-35,-13],[-62,-13],[-23,-8],[-122,-106],[-51,-22],[-37,7],[26,69],[7,27],[0,30],[11,40],[62,77],[40,84],[16,53],[31,6],[42,-8],[126,-34],[105,-40],[77,-11],[51,-1],[22,13],[17,22],[7,15],[5,32],[6,12],[17,13],[34,49],[11,34],[-11,20],[-24,-2],[-45,-13],[-6,-6],[1,-10],[-44,-54],[-47,-12],[-110,-18],[-50,-1],[-89,25],[-13,9],[-9,19],[-109,-5],[-33,-5],[-26,2],[13,32],[34,35],[48,114],[41,29],[80,27],[84,-4],[145,-88],[44,-8],[40,7],[96,30],[18,12],[34,36],[40,63],[-2,15],[-61,-35],[-33,-10],[-28,0],[26,115],[10,87],[9,22],[82,-7],[111,12],[26,19],[0,9],[-45,11],[-21,25],[-38,-8],[-50,-16],[-62,2],[5,37],[46,79],[5,36],[18,72],[1,37],[24,36],[72,25],[31,16],[1,16],[-43,64],[11,18],[34,16],[13,11],[-9,8],[-31,7],[-49,-14],[-53,-7],[-47,21],[-37,10],[-24,-3],[-63,-36],[-23,-1],[-27,10],[-183,31],[-22,11],[-65,54],[-54,36],[-72,39],[-93,30],[-114,20],[-68,19],[-34,27],[-58,59],[-44,50],[-8,24],[26,30],[26,22],[50,18],[85,-6],[46,-8],[50,-17],[38,-3],[79,4],[80,-10],[48,-12],[63,-25],[172,-106],[72,-37],[32,-4],[129,-39],[20,0],[53,19],[6,12],[-18,11],[-57,10],[-67,43],[-42,34],[-4,57],[5,32],[10,15],[8,48],[-39,29],[-27,9],[-72,43],[-6,10],[34,5],[34,-3],[73,-21],[38,-3],[28,8],[3,9],[-44,24],[-56,44],[-115,6],[-75,-5],[-48,15],[-51,24],[-32,7],[-67,-16],[-34,-1],[-31,5],[-30,76],[8,23],[24,10],[18,25],[12,26],[40,25],[217,56],[55,42],[-2,7],[-37,-8],[-48,-19],[-31,-4],[-128,24],[-20,-5],[-52,-35],[-70,-38],[-32,2],[-44,23],[-7,16],[-3,19],[48,26],[15,14],[31,38],[-2,18],[-52,-10],[-7,17],[1,30],[-5,37],[-13,37],[-43,57],[-18,14],[-15,21],[-33,77],[10,19],[29,14],[5,7],[-69,-12],[-7,-13],[13,-20],[9,-26],[6,-32],[9,-29],[25,-31],[20,-16],[33,-43],[14,-48],[-4,-25],[-26,-26],[-40,-27],[-13,-23],[-5,-23],[-32,-21],[-19,8],[-16,1],[18,-37],[12,-39],[-14,-38],[-38,-24],[-20,0],[-41,-19],[-103,-10],[-36,4],[-66,20],[-78,10],[-31,26],[-40,47],[-21,42],[0,38],[11,27],[22,17],[27,109],[38,88],[96,91],[27,33],[9,17],[0,14],[-15,8],[-118,-112],[-73,-12],[-21,25],[6,45],[13,11],[59,-5],[23,25],[-37,38],[-39,10],[-9,9],[40,29],[93,-2],[21,20],[34,22],[37,40],[14,34],[3,29],[-8,23],[-1,23],[7,24],[-10,26],[-26,28],[-57,28],[-17,-31],[-18,-13],[-25,-3],[-24,13],[-24,5],[-24,12],[-24,3],[-10,10],[-6,26],[-1,34],[28,16],[39,13],[26,23],[17,34],[3,38],[-12,40],[-32,37],[-58,-36],[-23,-9],[-6,26],[-8,19],[-24,25],[-33,18],[-31,13],[-1,19],[7,21],[14,24],[18,52],[20,-5],[16,5],[-9,42],[-16,36],[-19,20],[-1,9],[-4,10],[-14,25],[-16,19],[-29,52],[-20,19],[-26,11],[-28,0],[-45,-13],[-83,-16],[-66,-8],[-11,4],[33,20],[49,21],[64,14],[19,34],[-7,29],[2,28],[-17,30],[17,16],[58,16],[27,3],[26,21],[-74,50],[-77,33],[-20,14],[-17,22],[-15,30],[-24,31],[-33,31],[-48,30],[-125,54],[-42,38],[-40,57],[-19,25],[-21,18],[-87,43],[-10,18],[89,50],[9,20],[-36,61],[-38,44],[-41,16],[-60,8],[-56,20],[-50,31],[-51,23],[-76,22],[-126,55],[-195,60],[-87,35],[-52,13],[-68,3],[-132,33],[-111,10],[-69,-4],[-22,5],[-51,33],[-79,19],[-41,-7],[-51,-36],[-62,-35],[-32,-4],[-49,32],[-24,22],[-23,8],[-23,-8],[-43,-29],[-41,-21],[-61,-25],[-49,-12],[-63,-3],[-16,-9],[-24,-1],[-32,8],[-31,17],[-28,24],[-25,14],[-22,2],[-50,-13],[-63,-37],[-29,-9],[-24,3],[-30,12],[-59,30],[-33,-3],[-24,-10],[6,-25],[56,-59],[50,-42],[-42,-5],[-368,57],[-46,14],[-68,34],[-56,21],[-96,54],[-74,30],[-24,22],[-6,16],[23,22],[149,72],[56,14],[116,18],[27,11],[9,8],[-30,16],[-151,-6],[-135,11],[-117,28],[-21,10],[-19,17],[-20,26],[5,28],[28,32],[16,22],[5,11],[-147,-77],[-60,-28],[-48,9],[-34,13],[-16,14],[1,16],[5,11],[10,7],[-78,33],[-35,25],[-4,26],[28,27],[27,19],[27,12],[72,11],[263,20],[188,-19],[64,64],[43,21],[127,21],[195,3],[138,-12],[64,-15],[88,-33],[5,10],[-21,30],[-2,25],[36,43],[16,27],[-11,29],[-38,29],[-69,38],[-36,3],[-41,-9],[-49,-21],[-102,-53],[-49,-11],[-80,-3],[-44,7],[-43,8],[-67,28],[-25,5],[-29,-12],[-35,-30],[-34,-21],[-32,-12],[-30,-5],[-43,2],[-173,47],[-40,21],[-2,31],[-53,30],[-60,5],[-8,11],[77,46],[57,19],[-10,6],[-82,1],[-56,-25],[-32,-4],[-74,-1],[-77,13],[-33,11],[-34,25],[-38,14],[-115,21],[-26,12],[-25,19],[-94,55],[-57,40],[-8,22],[66,49],[3,12],[-28,21],[-12,15],[10,22],[57,47],[22,13],[103,28],[104,40],[37,9],[34,3],[136,-3],[42,10],[36,20],[58,20],[123,30],[272,46],[18,6],[1,8],[-24,24],[-5,12],[55,21],[126,33],[86,16],[55,2],[45,7],[63,21],[35,4],[214,8],[95,-12],[46,1],[30,8],[40,24],[74,59],[38,36],[37,56],[48,88],[35,85],[24,83],[18,51],[13,18],[44,23],[47,18],[79,16],[-7,7],[-34,12],[-31,5],[-29,-3],[-53,-18],[-69,-13],[-67,2],[-48,-5],[-44,-17],[-71,-14],[-48,3],[-86,25],[-43,5],[-110,-3],[-32,10],[-28,17],[-23,25],[-16,32],[2,34],[40,60],[15,16],[107,68],[66,31],[66,24],[48,13],[45,7],[43,14],[80,47],[82,40],[102,75],[50,20],[173,32],[47,1],[40,-9],[38,-16],[106,-74],[9,2],[-19,28],[-39,84],[7,34],[61,37],[25,6],[64,-2],[103,-11],[70,-13],[52,-20],[63,-13],[32,1],[23,9],[33,32],[43,54],[17,66],[-8,78],[-13,58],[-16,36],[9,30],[52,36],[48,26],[114,38],[92,9],[55,-2],[72,-18],[100,-10],[91,-34],[146,-78],[97,-39],[81,-18],[79,-29],[117,-64],[62,-27],[36,-10],[32,-1],[-12,18],[-56,37],[-85,42],[-191,75],[-104,53],[-94,60],[-69,36],[-126,35],[2,14],[151,50],[278,44],[313,33],[105,-3],[184,14],[18,22],[39,9],[172,30],[49,0],[76,-15],[80,-27],[37,-24],[51,-42],[25,-59],[-4,-186],[1,-36],[10,-13],[35,20],[42,38],[37,26],[29,41],[20,56],[12,41],[-49,46],[-2,76],[24,41],[69,0],[284,-140],[111,-31],[127,-75],[149,8],[137,-9],[60,3],[30,11],[-42,32],[-195,85],[-88,67],[-62,84],[-15,45],[47,8],[217,-1],[327,-39],[418,-133],[205,-45],[369,-154],[111,-23],[45,-5],[34,19],[21,21],[1,27],[-18,35],[-10,39],[-3,46],[25,89],[60,30],[26,33],[-24,59],[-70,41],[-271,105],[-1,13],[55,14],[81,8],[671,-25],[116,-10],[50,-9],[21,-11],[28,-6],[144,15],[-3,26],[-18,16],[-779,45],[-145,16],[-74,1],[-77,-12],[-158,-6],[-73,2],[-95,54],[86,64],[72,-1],[137,-25],[82,35],[129,29],[128,10],[278,63],[52,5],[65,-3],[143,-16],[57,-15],[65,-33],[38,-10],[45,-2],[61,-15],[89,48],[81,52],[92,33],[131,-19],[83,-25],[75,-30],[107,-16],[182,-102],[34,0],[16,8],[17,19],[6,28],[22,38],[-16,14],[-152,42],[-29,17],[-29,26],[0,22],[28,18],[30,8],[98,-8],[32,6],[31,15],[37,27],[29,7],[66,1],[101,-18],[88,-1],[32,8],[5,17],[8,11],[10,5],[321,1],[79,4],[63,13],[76,2],[66,-8],[83,-17],[81,1],[122,27],[115,13],[634,-4],[208,-16]],[[25307,60996],[15,-12],[12,-4],[24,-32],[30,-25],[18,50],[-9,29],[-8,15],[1,14],[102,-128]],[[25492,60903],[-12,-20],[-26,-45],[-47,-78],[-42,-69],[-40,-63],[-37,-57],[-4,-6],[-46,-40],[-8,-19],[-10,-80],[-4,-20],[8,-45],[8,-68],[-2,-36],[-32,-45],[-15,-39],[-6,-26]],[[25177,60147],[-6,6],[-10,2],[-23,-10],[-11,-2],[-9,-11],[-1,-25],[6,-40],[3,-21],[-7,-9],[-28,-25],[-11,-23],[-11,-38],[-12,-15],[-13,3],[-9,-6],[-19,-27],[-30,-54],[-15,-40],[-1,-30],[3,-27]],[[24973,59755],[-106,95],[-36,16],[-150,-2],[-64,37],[-73,72],[-50,66],[-115,182]],[[24379,60221],[7,15],[6,34],[8,35],[-5,41],[-3,33],[9,47],[-1,36],[4,22],[13,15],[6,27],[-36,94],[0,22],[5,26],[29,101],[35,119],[38,132],[23,80],[84,0],[56,0],[71,0],[76,0],[51,0],[21,1],[-4,52],[3,57],[9,52],[0,22],[-15,28],[-29,17],[-16,24],[0,32],[-8,38],[-14,44],[-29,46],[-44,46],[-38,63],[-31,78],[-27,50],[-20,21],[-5,12],[60,-1],[56,-1],[0,112],[1,100],[0,113],[102,-1],[122,0],[126,0],[99,0],[59,0]],[[90205,59480],[-12,-1],[-10,20],[-3,13],[-1,66],[40,57],[13,55],[10,-5],[10,-9],[8,-16],[-44,-92],[-11,-88]],[[34112,55039],[-15,-37],[-2,-23],[-10,-41],[-7,-22],[11,-51],[12,-2],[5,-7],[3,-10],[-1,-11],[-5,-9],[-11,-13],[-12,-29],[1,-33],[-7,-17],[-22,-9],[-44,0],[-22,-2],[-17,-5],[-12,-21],[-14,-15],[-11,-4],[-10,-24],[-10,-35],[3,-23],[10,-32],[6,-32],[-8,-53],[-8,-40],[-6,-31],[-6,-60],[-17,-65],[-13,-37],[0,-41],[7,-57],[34,-84],[12,-40],[9,-64],[31,-50],[20,-41],[-2,-54],[3,-17],[12,-14],[15,-10],[16,1],[15,4],[3,8],[34,1],[4,-14],[2,-77],[1,-32],[8,-12],[5,-20],[0,-17],[2,-44],[5,-22],[-1,-47],[4,-17],[9,-11],[12,-34],[4,-4],[2,-12],[11,-47],[5,-14],[3,-2],[2,-17],[7,-44],[5,-11],[10,-32],[3,-36],[13,-40],[13,-28],[5,-29],[17,-64],[15,-45],[22,-12],[18,-6],[11,-18],[11,-19]],[[33127,54839],[-59,136],[-59,136],[-58,134],[-4,19],[24,63],[22,46],[18,26],[8,23],[-6,99],[0,35],[-8,39],[-6,43],[7,36],[9,25],[11,10],[27,8],[19,4],[7,14],[11,17],[15,1],[29,-12],[13,22],[23,30],[53,50],[12,34],[9,51],[-1,24],[-6,9],[-13,9],[-20,1],[-16,-13],[-17,7],[-14,31],[-1,27],[9,37],[-5,24],[-27,78],[0,22],[20,35],[11,29],[14,72],[12,23],[37,9],[10,15],[19,37],[28,43],[40,35],[12,62],[7,17],[32,33],[6,18],[-1,15],[-52,140]],[[33328,56767],[10,-9],[40,-92],[23,-20],[4,0],[0,24],[21,-10],[52,-63],[77,-103],[108,-195],[31,-75],[20,-35],[33,-85],[9,-41],[-1,-166],[-28,-112],[-7,-84],[-2,-113],[-16,-64],[22,35],[6,101],[19,62],[24,67],[33,16],[35,-28],[28,-5],[24,-20],[53,-108],[52,-86],[18,-68],[55,-34],[32,-54],[10,-47],[7,-122],[-11,-185],[3,-9]],[[81730,64637],[-7,-9],[-19,42],[-1,14],[15,2],[16,-19],[0,-17],[-4,-13]],[[81665,64637],[-33,0],[-7,5],[-4,13],[12,22],[45,30],[-11,-32],[-2,-38]],[[81740,64827],[1,-2],[6,-22],[-2,-24],[11,-12],[3,-23],[-12,-13],[-1,-28],[-6,-17],[-36,30],[-29,16],[-27,-6],[-9,18],[-2,18],[31,32],[2,16]],[[70474,21234],[-34,-28],[-34,1],[-14,21],[-22,67],[-14,5],[-8,19],[-1,8],[15,5],[23,-19],[55,-16],[40,-37],[30,-12],[-12,-10],[-24,-4]],[[26900,60479],[-71,9],[-34,-18],[-15,-40],[-12,-18],[-11,4],[-21,-16],[-33,-35],[-29,-14],[-26,9],[-7,-9],[-2,-11],[-4,-12],[-10,-6],[-12,3],[-13,13],[-7,-5],[-1,-24],[-7,-6],[-13,11],[-15,-8],[-17,-28],[-23,-6],[-30,16],[-23,30],[-17,44],[-20,12],[-34,-33],[-15,-39],[-3,-23],[3,-22],[-6,-14],[-16,-7],[-12,-26],[-9,-46],[-1,-35],[5,-24],[-8,-18],[-21,-12],[-25,-39],[-29,-66],[-28,-47],[-29,-26],[-13,-29],[0,-32],[-1,-10],[-6,-4],[-9,-4],[-55,69],[-15,49],[-14,-7],[-17,-25],[-24,-55],[-26,-74],[-13,-9],[-65,11],[-34,-6],[-7,-10],[-3,-27],[2,-37],[9,-131],[5,-54],[-5,-17],[-17,-3],[-23,-7],[-12,-25],[-3,-26],[-1,-35],[-8,-37],[-14,-26],[-13,-10],[-78,-7]],[[25739,59319],[2,61],[-23,24],[-12,51],[-11,34],[3,21],[-1,24],[-31,19],[-30,-15],[-17,10],[-12,13]],[[25607,59561],[21,30],[2,18],[-7,14],[-7,8],[2,34],[4,40],[12,94],[-4,17],[-20,28],[-25,3],[-27,-9],[-13,14],[-12,32],[-20,16],[-34,-26],[-37,-39],[-11,-14],[-10,2],[-4,29],[-2,35],[-2,8],[-20,12],[-23,9],[-11,10],[-11,23],[-28,30],[-6,22],[-37,52],[-7,25],[-8,19],[-18,23],[-14,-5],[-46,29],[-7,3]],[[25492,60903],[27,-16],[21,37],[12,12],[29,44],[9,10],[48,18],[23,-1],[21,-44],[16,-25],[30,21],[26,5],[105,-42],[42,19],[76,4],[35,-11],[49,59],[31,12],[37,27],[-5,28],[-9,13],[56,-12],[83,-60],[89,11],[32,32],[21,9],[91,-61],[24,-47],[19,-5],[14,11],[4,10],[-18,10],[-8,15],[72,-29],[135,-222],[3,-18],[-58,65],[-31,-5],[-8,-10],[2,-36],[3,-17],[13,-2],[10,10],[24,-12],[15,-24],[19,-36],[12,-40],[12,-1],[12,24],[23,3],[15,-26],[11,1],[-15,42],[-35,41],[9,1],[77,-74],[21,-92],[19,-21],[18,-29]],[[25994,61277],[-44,-45],[-14,1],[20,35],[33,30],[28,14],[23,-6],[-46,-29]],[[26147,61325],[-21,-33],[-4,15],[10,31],[13,17],[12,-2],[-3,-13],[-7,-15]],[[54891,76479],[37,-39],[-111,51],[13,5],[12,1],[49,-18]],[[54625,76610],[51,-16],[38,8],[34,-10],[21,-19],[5,-9],[-28,-1],[-31,8],[-35,-19],[-31,10],[-12,12],[-8,15],[-4,21]],[[55121,76359],[0,-22],[11,-24],[11,-27]],[[55143,76286],[-51,54],[-48,61],[-93,94],[-67,23],[-91,76],[-59,27],[23,6],[26,0],[140,-101],[-16,27]],[[54776,76685],[-20,-6],[-123,4],[-36,12],[-40,31],[-9,9],[41,9],[37,-9],[12,-22],[101,-18],[37,-10]],[[54662,76768],[-44,-1],[-38,10],[-19,18],[2,15],[6,25],[42,-3],[65,-18],[15,-21],[-4,-9],[-25,-16]],[[54269,77173],[19,-43],[-18,9],[-18,27],[-11,28],[28,-21]],[[54230,77224],[5,-20],[-35,38],[-13,26],[-3,11],[46,-55]],[[54219,77143],[4,-8],[-1,-6],[-14,8],[-4,-2],[-68,126],[-7,24],[24,-29],[66,-113]],[[54218,77382],[-7,-16],[-18,29],[-16,20],[-12,23],[-23,30],[-8,34],[-34,69],[-6,19],[18,-28],[14,-18],[12,-4],[30,-44],[30,-57],[35,-49],[-8,-2],[-7,-6]],[[54119,77625],[7,-25],[-26,23],[-23,9],[-5,17],[3,14],[5,14],[18,-2],[3,-14],[18,-36]],[[54024,77568],[-2,-22],[-17,28],[-9,51],[-21,82],[-3,23],[11,23],[0,23],[-15,72],[12,11],[8,2],[3,-50],[7,-29],[20,-35],[-4,-58],[4,-83],[4,-18],[2,-20]],[[54113,77751],[-34,-12],[-16,22],[-4,18],[-29,6],[-17,25],[-3,11],[24,28],[13,45],[16,-27],[20,-51],[11,-14],[19,-51]],[[55251,78301],[-1,-14],[-2,-24],[-15,-17],[15,-40],[15,-64],[-9,-32],[10,-24],[29,-18],[2,-7],[-9,-7],[-7,-21],[0,-39],[24,-36],[50,-34],[16,-5],[6,-13],[8,-9],[5,-10],[1,-14],[-4,-9],[-24,-3],[-27,0],[-19,16],[-1,-12],[-1,-13],[-18,-9],[10,-94],[-4,-27],[-7,-9],[-6,4],[-8,1],[-4,-9],[3,-20]],[[54884,76577],[-13,13],[-58,88],[-55,56],[-63,104],[-84,41],[-58,46],[-34,-7],[-39,-14],[-23,-1],[-17,9],[-12,28],[2,22],[-2,28],[-34,46],[-46,43],[-43,57],[-87,151],[-18,49],[17,9],[13,0],[15,10],[24,0],[28,-10],[-25,32],[-31,32],[-80,127],[-24,59],[-3,65],[6,88],[-14,63],[-62,82],[-23,43],[-45,25],[-21,-2],[-12,-32],[-9,-71],[-40,-93],[-14,-41],[-21,-52],[-18,-4],[-11,5],[-33,88],[-32,68],[-4,31],[-3,40],[-24,144],[17,20]],[[53771,78062],[10,-23],[74,-28],[15,12],[10,19],[0,12],[6,4],[26,-19],[21,5],[34,1],[24,-3],[16,14],[22,51],[8,29],[9,7],[7,-4],[4,-23],[12,-23],[23,-36],[17,-17],[15,-7],[14,15],[16,4],[43,-28],[36,-5],[27,14],[-3,21],[-10,22],[-2,22],[2,19],[18,19],[-1,8],[-22,34],[1,8],[49,38],[48,21],[7,16],[5,24],[2,46],[-3,37],[-19,35],[-1,18],[4,18],[8,17],[19,7],[22,12],[18,14],[23,11],[19,16],[18,38],[11,6],[34,-5],[7,9],[-4,55],[6,14],[12,8],[5,7],[30,-6],[24,-14]],[[54587,78628],[15,-8],[50,-40],[34,-44],[19,-50],[26,-38],[32,-27],[26,-37],[19,-46],[27,-26],[34,-6],[21,-15],[9,-27],[19,-23],[28,-21],[43,-12],[84,-3],[7,0],[19,-7],[22,8],[27,17],[8,10],[28,54],[16,-5],[31,7],[19,12],[1,0]],[[29776,62659],[-5,-40],[-71,48],[-57,61],[2,33],[30,7],[28,-20],[41,-40],[32,-49]],[[30064,62234],[-23,46],[-26,38],[-16,15],[-16,10],[-123,-5],[-14,-7],[-11,-12],[-11,-6],[-34,-12],[-34,-2],[-79,31],[-31,16],[-31,10],[-36,-3],[-36,-10],[-29,-22],[-21,-40],[-4,-36],[-13,-10],[-29,59],[-27,41],[-30,31],[-62,45],[-12,27],[-5,32],[26,101],[28,19],[16,3],[35,-12],[35,-23],[31,-15],[49,-6],[27,-25],[187,-38],[35,-12],[14,4],[12,15],[10,27],[12,21],[56,4],[11,9],[8,29],[0,29],[-33,40],[-51,86],[-45,103],[20,34],[-8,63],[8,58],[10,57],[-44,49],[-53,49],[-73,15],[-22,13],[-12,36],[11,49],[23,28],[27,16],[28,12],[67,14],[67,-16],[57,-50],[59,-40],[73,-13],[34,-14],[15,12]],[[29815,63385],[12,-14],[-5,-16],[-28,10],[-29,19],[-9,-5],[-6,2],[-17,18],[15,14],[15,4],[17,-1],[35,-31]],[[56147,79726],[27,4],[1,0],[6,-3],[4,-27],[1,-1],[7,-18],[6,-24],[9,-17],[20,-7],[27,-22],[17,-41],[26,-18],[2,0],[5,2],[19,1],[4,-8],[15,-20],[6,-18],[-3,-18],[2,-22],[6,-7]],[[56354,79462],[-7,-14],[-48,-71],[-19,-19],[-13,-4],[-20,7],[-20,-5],[-19,-16],[-17,-4],[-12,-19],[-17,-38],[-20,-33],[-21,-21],[-11,-18],[-1,-63],[-11,-18],[-15,-18],[-9,-16],[-23,-96],[-18,-31],[-16,-23],[-3,-22],[0,-25],[-19,-49],[-25,-51],[-5,-21],[6,-28],[-24,-33],[-14,-15],[-11,-8],[-7,-20],[-12,-50],[3,-22],[0,-20],[-20,-12],[-6,-23],[-5,-27],[-8,-13],[-23,-23],[-56,10],[-22,-8],[-6,-16],[-1,-14],[-7,-12],[-13,-16],[-14,-7],[-29,19],[-63,-19],[-11,-14]],[[55622,78403],[-9,10],[-13,9],[-63,11],[-25,-9],[-34,4],[-30,10],[-23,-8],[-21,-39],[-10,-14],[-8,-8],[-17,-12],[-15,-15],[-19,-11],[-17,2],[-17,17],[-5,-4],[-6,-16],[-8,-13],[-25,-16],[-6,0]],[[54587,78628],[-3,13],[-24,49],[-10,18],[1,24],[-5,14],[-9,10],[-5,35],[-2,26],[-7,17],[-53,4]],[[54763,79496],[7,3],[29,-4],[6,-6],[5,-2],[45,-59],[43,-45],[35,-23],[52,-2],[55,-2],[92,8],[69,6],[4,11],[11,27],[-9,23],[1,26],[11,36],[34,29],[98,12],[56,22],[8,30],[19,29],[17,6],[23,-14],[28,-25],[25,-14],[14,9],[50,43],[57,43],[39,115],[4,18],[43,13],[62,-2],[32,-15],[23,-8],[36,2],[52,25],[19,-1],[15,-17],[16,-15],[11,-19],[8,-26],[5,-9],[7,-14],[13,-18],[13,-5],[95,32],[6,7]],[[84152,45558],[-26,0],[-8,6],[-3,51],[8,28],[60,37],[23,34],[34,70],[20,18],[5,8],[4,-1],[3,-54],[9,-31],[1,-17],[-30,-27],[-26,-62],[-59,-41],[-15,-19]],[[83856,45742],[-14,-7],[-30,17],[-6,10],[25,28],[20,39],[23,4],[14,-8],[-5,-47],[-27,-36]],[[84281,45908],[-25,-20],[0,42],[20,54],[17,18],[10,-22],[1,-9],[-26,-20],[3,-43]],[[83336,46442],[13,-25],[45,-50],[7,-21],[3,-35],[9,-26],[21,-4],[22,5],[16,-16],[15,-26],[21,-50],[19,-56],[23,-31],[14,-46],[-8,-41],[-30,-57],[-16,-12],[-21,-4],[-35,-34],[-12,17],[-39,13],[-30,24],[-26,44],[-15,48],[-19,43],[-33,28],[-58,83],[-37,7],[-15,-6],[-15,0],[-77,37],[-12,22],[-9,28],[-9,27],[-5,31],[10,27],[10,19],[43,32],[31,10],[35,-2],[53,10],[51,-16],[15,12],[25,34],[9,-12],[11,-31]],[[84740,46363],[-19,-30],[-10,-58],[-34,-54],[-37,-89],[-29,-46],[-26,-53],[-23,-36],[-28,-13],[-42,-7],[-56,-65],[-32,-28],[-31,-2],[-28,21],[-11,24],[2,31],[10,28],[12,22],[7,29],[-33,37],[-2,27],[12,75],[9,76],[12,52],[46,93],[28,46],[17,19]],[[84454,46462],[4,-20],[11,-24],[7,-3],[5,5],[41,-8],[10,8],[16,37],[10,20],[7,44],[2,28]],[[84567,46549],[36,20],[20,22],[17,32],[51,53],[9,15]],[[84700,46691],[-2,-51],[6,-12],[10,-7],[35,35],[7,-7],[7,-15],[0,-47],[-14,-38],[-34,-3],[-5,-11],[0,-23],[3,-23],[8,-18],[10,-33],[9,-75]],[[82113,46791],[-8,-20],[-22,35],[-6,16],[17,23],[6,3],[14,-24],[-1,-33]],[[84160,46920],[-9,-34],[-16,10],[4,33],[8,19],[22,28],[22,5],[13,-10],[4,-11],[-34,-11],[-14,-29]],[[83184,46807],[-11,-5],[-11,8],[4,52],[-6,34],[11,28],[3,48],[5,15],[6,-15],[4,-10],[5,-5],[13,-1],[3,-21],[-1,-19],[-5,-21],[-15,-23],[-11,-25],[6,-40]],[[84254,47030],[-6,-25],[-75,2],[2,33],[21,36],[7,12],[23,11],[33,-20],[-5,-49]],[[82399,46881],[-35,-120],[13,-19],[7,-18],[-58,-25],[-24,13],[-14,-3],[-59,22],[-42,28],[-5,21],[3,26],[13,-8],[32,-4],[13,11],[0,77],[-5,100],[44,82],[24,33],[27,20],[68,-46],[11,-12],[9,-18],[4,-30],[-26,-130]],[[84523,47045],[-17,-36],[-11,-62],[-11,-19],[-22,-11],[-14,62],[-24,-3],[12,54],[11,21],[16,0],[7,-22],[4,-4],[36,92],[7,1],[6,-4],[5,-11],[-5,-58]],[[84423,47077],[-39,-15],[-24,-72],[-19,1],[-11,-32],[-2,-14],[1,-12],[-2,-13],[-8,-12],[-17,20],[-16,-26],[-6,-6],[-23,30],[-21,-2],[-6,5],[26,52],[36,50],[6,18],[-14,5],[-8,7],[-2,12],[23,7],[16,2],[12,-16],[8,1],[48,58],[20,-14],[14,-14],[8,-20]],[[88581,47010],[-14,-7],[-69,17],[-8,24],[-1,12],[16,24],[15,40],[24,14],[10,0],[28,-94],[-1,-30]],[[82654,47023],[-7,-1],[-12,11],[5,24],[-7,40],[2,32],[16,18],[33,2],[1,-24],[-31,-102]],[[83075,47097],[-12,-1],[-2,23],[4,24],[12,11],[5,0],[8,-22],[2,-11],[-8,-15],[-9,-9]],[[84603,47153],[7,-35],[22,20],[21,4],[47,-3],[35,-8],[21,-15],[2,-70],[-10,-15],[-181,-53],[-18,17],[-7,17],[20,52],[-9,25],[10,40],[22,27],[18,-3]],[[85506,47177],[48,-23],[28,3],[6,-21],[-27,-49],[-56,38],[-10,40],[11,12]],[[84106,46882],[-40,-21],[-24,-19],[-23,-26],[-15,-5],[-27,-2],[-37,5],[-26,-9],[-71,-66],[-28,-6],[-24,-16],[-8,26],[-10,19],[-24,4],[-24,-1],[-24,-59],[-38,12],[-15,-5],[-14,-12],[-14,-6],[-15,5],[-56,45],[-64,27],[-64,-10],[-55,25],[-30,-19],[-29,-28],[-8,29],[-11,25],[-9,38],[0,43],[3,31],[8,27],[5,29],[3,30],[12,-14],[12,5],[38,34],[37,50],[34,19],[20,5],[16,-10],[17,4],[18,11],[28,-39],[11,-8],[38,-3],[34,-22],[30,-34],[44,-31],[27,-42],[20,-16],[15,-4],[13,6],[18,28],[20,12],[18,-1],[32,8],[14,7],[15,15],[15,-9],[13,-15],[54,-74],[17,-2],[30,16],[10,20],[4,30],[9,26],[11,22],[14,17],[40,28],[28,28],[19,48],[-44,20],[9,34],[15,20],[20,-7],[17,-27],[7,-102],[-14,-15],[-8,-15],[-6,-20],[-26,-38],[10,-47],[-7,-19],[-10,-9]],[[86350,47051],[-24,-18],[16,45],[52,104],[18,-19],[25,-4],[-37,-47],[-38,-19],[-12,-42]],[[82844,47051],[14,-22],[13,2],[26,34],[16,13],[17,1],[17,-6],[16,-25],[6,-40],[6,-13],[10,49],[13,14],[14,8],[22,-3],[17,-23],[16,-69],[-1,-60],[6,-22],[11,-17],[8,-23],[-7,-24],[-7,-11],[-21,-11],[-9,4],[-9,17],[-10,6],[-23,-6],[-21,-13],[3,-22],[17,-10],[5,-11],[-1,-14],[-7,-3],[-22,19],[-15,-3],[-54,-26],[-14,1],[-9,24],[1,63],[-6,17],[-40,-77],[-12,-19],[-17,-9],[-16,3],[-59,-46],[-18,6],[-18,0],[-62,-50],[-33,-14],[-17,-1],[-17,4],[-15,-4],[-14,-21],[-28,-17],[-28,13],[-25,18],[-23,23],[-5,29],[1,35],[10,48],[-7,84],[5,39],[9,38],[15,14],[18,2],[31,34],[28,45],[16,-4],[37,-32],[22,-3],[37,5],[15,-19],[6,-44],[8,-16],[11,-11],[26,-74],[24,4],[21,-14],[38,45],[28,-1],[8,34],[-17,37],[-20,31],[-11,6],[-12,-2],[-11,5],[-45,67],[-14,37],[-8,42],[5,32],[31,28],[15,7],[55,-19],[9,-16],[14,-68],[11,-29]],[[82068,47145],[28,-31],[40,-89],[3,-25],[-12,-24],[-28,-38],[-63,-58],[-10,-28],[-14,-54],[-3,-23],[-4,-13],[-7,-9],[-14,-8],[-15,12],[13,34],[1,42],[-10,39],[-14,32],[-29,44],[-30,39],[-31,20],[-33,9],[-12,19],[-19,49],[-6,27],[-3,28],[2,27],[8,1],[32,-6],[59,-32],[30,-2],[16,7],[43,62],[11,-1],[41,-27],[30,-23]],[[86065,47260],[-16,-52],[-18,3],[-34,71],[2,49],[3,17],[13,5],[43,-15],[9,-40],[-2,-38]],[[85222,47426],[3,-28],[0,-13],[-33,-9],[-32,-31],[-17,-36],[-13,-46],[-44,19],[-39,3],[-18,16],[-19,-1],[-24,-14],[-35,-40],[-8,-3],[3,60],[10,37],[36,88],[31,-19],[36,-6],[40,18],[29,39],[40,21],[33,-52],[21,-3]],[[85393,47451],[-17,-13],[5,43],[-1,34],[29,-11],[0,-27],[-3,-10],[-13,-16]],[[88481,47077],[-66,-76],[-87,13],[-31,2],[-51,-19],[-11,15],[10,71],[41,190],[49,168],[20,43],[29,41],[31,33],[69,34],[62,-7],[9,-13],[27,-56],[18,-44],[7,-63],[-27,-107],[-29,-102],[-49,-80],[-21,-43]],[[86478,47235],[-4,-7],[-35,8],[-19,0],[2,43],[-10,33],[14,48],[0,56],[15,7],[2,32],[17,84],[10,19],[15,7],[17,49],[10,15],[10,37],[15,17],[-2,32],[9,17],[23,13],[16,-15],[10,-33],[-26,-40],[13,-99],[-19,-108],[-12,-33],[-23,-28],[-6,-26],[-27,-53],[-8,-46],[-2,-19],[-5,-10]],[[86661,47694],[-4,-28],[-12,15],[-11,33],[-17,5],[-13,8],[-7,16],[47,7],[17,-56]],[[81780,47733],[-4,-22],[-14,5],[-13,38],[6,10],[8,4],[9,-4],[8,-31]],[[85741,47705],[-13,-15],[-20,30],[-6,13],[13,29],[14,9],[9,-13],[4,-13],[-2,-14],[1,-26]],[[83548,47742],[-29,-3],[-8,5],[-3,56],[32,-24],[10,-2],[-2,-32]],[[81623,47750],[-6,-9],[-47,5],[-30,-47],[-21,-14],[-76,0],[-9,6],[-7,0],[-4,-10],[-24,7],[-77,42],[-10,38],[12,42],[27,58],[56,12],[252,3],[27,-50],[3,-17],[-55,-34],[-11,-32]],[[82048,47827],[-22,-10],[-21,21],[0,27],[5,25],[32,13],[17,0],[18,-18],[12,-18],[6,-21],[-34,-1],[-13,-18]],[[87409,47954],[-5,-8],[-7,18],[-1,12],[10,32],[9,18],[11,1],[-3,-26],[-14,-47]],[[79236,48017],[-17,-12],[-13,11],[-6,16],[19,40],[10,10],[9,3],[5,-22],[-7,-46]],[[87420,48070],[-15,-6],[-8,47],[13,13],[14,-29],[-4,-25]],[[87449,48136],[-7,-4],[0,28],[8,25],[8,14],[9,1],[-18,-64]],[[87370,48132],[-4,-41],[-5,-45],[-25,-51],[-16,-78],[-9,-19],[-34,-35],[-30,43],[-9,37],[13,172],[13,-6],[9,1],[2,12],[-19,19],[-4,98],[1,37],[15,9],[18,-29],[24,-52],[27,-40],[33,-32]],[[79825,48382],[28,-66],[25,-35],[29,-19],[30,-2],[30,-8],[35,-25],[35,-11],[17,4],[16,13],[11,1],[10,-12],[25,-56],[27,-51],[6,-26],[18,-123],[20,-35],[29,-10],[33,0],[33,-5],[77,-29],[30,4],[27,29],[24,-19],[65,-34],[32,-8],[36,10],[37,2],[17,-10],[17,-15],[14,-6],[15,1],[26,29],[18,52],[14,67],[11,69],[7,30],[10,26],[14,17],[14,11],[38,-7],[8,-16],[42,-118],[8,-10],[45,-8],[12,4],[27,24],[16,2],[28,-29],[13,-25],[13,-18],[70,-19],[28,-50],[13,-7],[49,6],[34,-5],[29,-13],[13,-72],[11,-73],[7,-25],[28,-25],[12,-23],[-3,-73],[3,-70],[61,-61],[65,-34],[69,-4],[70,12],[35,15],[45,26],[9,0],[87,-80],[8,-12],[9,-60],[0,-62],[-16,-149],[-1,-41],[1,-41],[18,-89],[9,-25],[31,-47],[1,-25],[-4,-24],[-35,17],[-21,20],[-12,33],[-17,19],[-33,-7],[-61,34],[-69,52],[-122,110],[-33,-1],[-32,-14],[-33,-28],[-35,-20],[-26,-7],[-26,5],[-65,27],[-66,17],[-168,11],[-47,25],[-79,12],[-63,22],[-62,30],[-158,149],[-51,36],[-159,71],[-24,6],[-58,-5],[-36,21],[-32,0],[-47,-23],[-15,-17],[-18,-35],[-33,2],[-32,7],[-84,33],[-31,21],[-30,30],[-28,40],[-14,14],[-72,41],[-60,14],[-122,18],[-27,12],[-22,15],[-12,33],[1,41],[9,37],[12,36],[8,34],[-89,73],[-71,40],[-30,7],[-31,0],[-34,-8],[-34,4],[-16,11],[-17,4],[-16,-8],[-13,3],[-4,33],[9,28],[17,32],[10,6],[4,-50],[5,-10],[16,-11],[6,3],[27,64],[8,31],[13,85],[14,-16],[14,10],[8,13],[23,196],[19,58],[26,47],[12,12],[26,-29],[51,-11],[30,-20],[31,-2],[29,-10],[42,-34],[15,3],[14,11],[23,38],[9,60],[32,-31],[48,-12],[11,-17]],[[84458,48402],[-3,-28],[-10,32],[-9,15],[1,34],[13,-12],[8,-41]],[[83479,48214],[-11,-95],[-6,33],[-2,88],[-7,43],[5,49],[-1,126],[8,58],[16,-74],[4,-38],[-6,-190]],[[81310,48495],[-6,-20],[-26,1],[-5,24],[17,41],[12,3],[10,-15],[-2,-34]],[[86890,48472],[-17,-55],[-11,19],[-7,1],[-4,32],[4,68],[-14,76],[19,-1],[5,-23],[6,-8],[18,-73],[1,-36]],[[87429,48555],[-2,-22],[-1,-41],[5,-38],[-12,-39],[11,-57],[2,-29],[-1,-41],[-3,-18],[-8,-54],[-9,-19],[-6,-5],[-7,-16],[-54,18],[-24,37],[-21,40],[-4,17],[-25,46],[-6,16],[0,25],[20,7],[21,-1],[-1,22],[13,80],[-33,51],[-6,21],[12,15],[26,-18],[32,89],[10,19],[4,50],[18,6],[13,-6],[8,-31],[3,-27],[-3,-24],[15,-13],[13,-60]],[[86923,48443],[-22,-50],[21,117],[4,59],[20,35],[29,179],[7,-4],[10,-17],[-15,-131],[-41,-92],[-13,-96]],[[78435,48687],[-23,-3],[-42,71],[-7,22],[12,21],[13,-2],[48,-45],[9,-22],[-10,-42]],[[84340,48806],[-1,-58],[-11,3],[-9,20],[-3,20],[1,15],[5,13],[18,-13]],[[83900,48710],[-18,-15],[-33,66],[-14,54],[3,31],[10,26],[5,7],[-2,28],[13,14],[15,-2],[9,-38],[11,-10],[6,-36],[-5,-125]],[[84067,48807],[-7,-38],[-15,-30],[-13,-2],[-12,6],[-23,26],[-6,-27],[-18,1],[-6,35],[12,105],[19,39],[-2,41],[-15,88],[10,46],[43,34],[37,42],[12,9],[11,-32],[5,-149],[-40,-118],[8,-76]],[[84216,49221],[6,-124],[-2,-32],[-15,47],[-6,10],[-4,-10],[-6,-5],[-8,0],[-10,-48],[-1,-45],[-8,-30],[-4,-101],[3,-28],[12,14],[7,3],[27,-39],[15,-28],[-4,-34],[-19,-35],[-21,-15],[-16,15],[-5,-7],[-9,-18],[-8,-24],[3,-24],[-19,-68],[-10,-19],[-22,21],[-14,-18],[-11,1],[-16,69],[0,32],[15,36],[1,26],[7,29],[17,40],[10,29],[0,19],[8,72],[2,30],[5,32],[8,66],[1,122],[26,101],[25,28],[11,5],[-2,-27],[31,-68]],[[87102,49397],[14,-31],[-33,24],[-47,51],[-3,34],[40,-52],[29,-26]],[[84233,49473],[-27,-69],[-19,4],[-23,45],[-6,50],[-1,18],[16,28],[52,-9],[9,-25],[-1,-42]],[[85711,49777],[-48,-30],[11,56],[6,15],[24,-15],[7,-26]],[[85631,49726],[-7,-21],[-16,-14],[-14,1],[5,21],[-4,11],[-10,-5],[-16,-16],[-20,-33],[-13,16],[-2,26],[1,11],[24,45],[29,8],[40,43],[18,-2],[-4,-27],[-6,-20],[-4,-20],[-1,-24]],[[85755,49799],[0,-24],[-2,-8],[-15,9],[-11,-1],[-10,44],[3,10],[20,-12],[7,-5],[8,-13]],[[82339,49847],[-10,-99],[-17,56],[19,67],[9,13],[-1,-37]],[[85445,49933],[7,-25],[-28,16],[-12,25],[12,15],[7,4],[14,-35]],[[82306,49614],[-59,-107],[-9,27],[5,110],[-17,67],[2,51],[11,89],[15,68],[34,46],[8,5],[-2,-83],[7,-31],[2,-27],[-3,-23],[6,-105],[4,-26],[-8,-33],[4,-28]],[[85238,50064],[46,-45],[10,-29],[9,-35],[9,-20],[10,-15],[18,-31],[5,-46],[-4,-93],[-21,-8],[-19,-14],[-40,-54],[-20,-10],[-21,-4],[-15,-14],[-15,-6],[-39,30],[-38,35],[-54,61],[-10,15],[-9,32],[-25,59],[-6,38],[-2,106],[6,25],[11,13],[36,-25],[24,26],[69,22],[71,-2],[14,-11]],[[85551,50151],[-14,-48],[-24,2],[-4,7],[29,30],[13,9]],[[79690,50111],[-5,-11],[-15,6],[-11,16],[-7,15],[-2,16],[15,20],[32,-20],[-7,-42]],[[79853,50172],[-11,-14],[-7,14],[-2,16],[5,20],[15,2],[7,-6],[-7,-32]],[[86042,50192],[64,-64],[33,-9],[56,8],[21,-6],[53,-82],[15,-56],[4,-48],[9,-46],[13,-11],[15,-5],[20,-66],[4,-21],[-15,-166],[-63,63],[-60,71],[-26,27],[-69,60],[-11,21],[-8,27],[-30,37],[-60,6],[-23,-1],[-9,-6],[2,-20],[0,-40],[-15,-12],[-37,26],[-34,9],[-29,25],[-39,14],[-4,12],[3,19],[-1,18],[-9,6],[-18,-3],[-17,-17],[-14,-21],[-20,-55],[-11,-21],[-34,-9],[-14,5],[-13,14],[-39,101],[-13,22],[-14,18],[-14,8],[-13,-16],[-8,-31],[-3,-37],[-4,-22],[-17,-59],[-13,-36],[-5,6],[7,57],[0,32],[-9,34],[-5,35],[65,165],[24,40],[103,13],[61,-8],[34,4],[22,12],[19,-5],[4,-33],[12,-24],[16,2],[29,25],[26,40],[15,17],[16,3],[16,-3],[16,-9],[43,-34]],[[77895,50009],[11,-84],[-33,57],[1,41],[-5,26],[-20,33],[-15,40],[-7,96],[5,20],[13,1],[58,-126],[4,-21],[-1,-45],[-8,-14],[-3,-24]],[[80057,50116],[-5,-61],[-6,-23],[-24,-30],[-7,-18],[-22,3],[-3,32],[-7,21],[-23,25],[-6,-6],[-4,-37],[-45,-26],[-13,-2],[6,49],[-11,38],[-1,47],[-2,21],[-6,12],[11,32],[-1,37],[12,39],[7,95],[47,21],[10,-17],[56,-21],[39,-58],[21,-77],[-23,-96]],[[77834,50264],[-20,-47],[-33,1],[-6,29],[1,70],[-8,22],[0,9],[6,40],[6,9],[53,-98],[1,-35]],[[87325,50619],[-8,-8],[-3,25],[5,33],[5,6],[6,-2],[8,-12],[-13,-42]],[[77733,50493],[2,-15],[-45,50],[-22,14],[-19,56],[5,26],[1,37],[3,15],[14,5],[18,-27],[13,-66],[23,-61],[7,-34]],[[85014,50431],[-4,-11],[-17,31],[-11,88],[-10,24],[-11,83],[3,24],[14,35],[11,-1],[8,-20],[-5,-90],[25,-114],[-3,-49]],[[84401,50716],[5,-23],[-17,1],[-7,43],[1,24],[18,-45]],[[85006,50812],[85,-19],[-12,-21],[-92,-33],[-33,6],[-100,-20],[-12,1],[-2,32],[-11,23],[16,20],[21,4],[55,-7],[85,14]],[[84208,50796],[-20,-47],[-2,25],[4,23],[5,16],[9,9],[4,-26]],[[86208,50869],[4,-34],[16,-32],[-5,-49],[-7,-7],[4,-23],[7,-17],[-13,-12],[-10,6],[-15,-16],[-10,-22],[-32,-9],[-11,20],[-57,24],[-37,53],[-5,16],[71,62],[32,17],[26,-1],[33,23],[9,1]],[[84713,50860],[26,-20],[9,0],[9,24],[5,4],[12,-12],[2,-39],[17,6],[13,-14],[4,-9],[-1,-39],[-50,-6],[-36,-32],[-48,28],[-54,-48],[-33,-16],[-28,1],[-25,84],[14,99],[11,16],[18,8],[50,5],[85,-40]],[[87631,50926],[110,-29],[29,3],[63,-11],[52,-38],[91,-7],[28,-12],[21,-26],[-51,-22],[-24,-20],[-45,-10],[-38,10],[-27,-12],[-10,20],[-39,20],[-51,41],[-105,49],[-5,30],[1,14]],[[80264,50910],[-32,-25],[-10,55],[21,16],[22,-14],[-1,-32]],[[79456,50881],[10,-40],[13,-35],[10,-39],[13,-185],[43,-159],[126,-63],[-21,-25],[-10,-23],[-8,-27],[-18,-110],[1,-24],[11,-37],[3,-41],[-16,0],[-17,10],[-15,15],[-13,20],[-14,16],[-15,10],[-26,32],[-34,22],[-36,17],[-17,47],[-8,58],[9,86],[-9,24],[-13,21],[-15,62],[-6,73],[-22,28],[-30,17],[-13,14],[-58,-27],[-14,7],[-12,20],[-32,21],[1,40],[15,32],[35,33],[16,27],[3,36],[-6,26],[3,28],[11,27],[13,21],[34,27],[16,-48],[7,-40],[10,-30],[14,42],[-9,72],[27,16],[26,1],[19,-20],[13,-31],[5,-44]],[[84332,50861],[-19,-4],[-13,17],[1,84],[12,19],[5,-3],[4,-25],[5,-23],[10,-21],[-5,-44]],[[85597,50886],[-17,-23],[-8,-7],[-41,16],[-48,-3],[-50,-22],[-29,18],[-18,30],[1,32],[17,78],[37,60],[16,10],[26,-16],[45,-45],[36,-54],[32,-41],[1,-33]],[[84225,51168],[6,-36],[-10,-31],[11,-59],[28,78],[27,10],[15,-13],[10,-15],[6,-30],[-10,-63],[-18,-30],[-22,-5],[-11,37],[-15,4],[-10,-81],[-5,-12],[-13,-10],[-12,22],[-2,12],[17,37],[-9,108],[-13,-20],[-34,-99],[-26,-44],[-8,23],[-14,67],[6,86],[21,58],[18,-4],[52,18],[15,-8]],[[80474,51163],[-55,-59],[-13,3],[-10,21],[6,113],[7,34],[39,4],[23,-17],[12,-18],[5,-38],[-2,-23],[-12,-20]],[[87489,51200],[-13,-11],[-15,12],[-15,44],[5,34],[17,23],[15,-23],[4,-30],[11,-2],[-9,-47]],[[77545,50818],[-26,-3],[-55,69],[-13,31],[-3,42],[-52,159],[-7,37],[20,131],[54,31],[18,-22],[6,-59],[30,-106],[10,-57],[8,-26],[3,-19],[-2,-14],[22,-68],[15,-39],[2,-64],[-30,-23]],[[86389,51085],[-10,-16],[-34,15],[-17,35],[-12,48],[-8,39],[-2,32],[-10,38],[1,14],[62,40],[12,-15],[26,-1],[12,-29],[-8,-127],[-12,-73]],[[86362,51395],[-7,-30],[-14,-19],[-119,-36],[10,21],[5,21],[8,11],[12,-3],[6,7],[5,2],[7,-3],[12,9],[24,-6],[25,5],[-2,28],[28,-7]],[[87606,51467],[59,-22],[21,1],[21,-25],[26,12],[14,-8],[49,-88],[24,-58],[35,-50],[26,-17],[-19,-45],[-39,-24],[-15,-1],[-30,27],[-25,-5],[-21,34],[-4,52],[-21,119],[-29,-34],[-33,54],[-9,1],[-3,-9],[-14,19],[-12,37],[-1,30]],[[85360,51393],[-3,-12],[-29,15],[-8,8],[15,82],[14,-3],[12,-77],[-1,-13]],[[86284,51538],[-16,-1],[-28,25],[16,22],[11,5],[9,13],[5,0],[12,-11],[7,-19],[-16,-34]],[[83850,51608],[12,-25],[-7,-30],[-9,7],[-26,0],[-9,-2],[-12,-18],[-7,0],[5,27],[21,41],[14,-6],[18,6]],[[89158,50339],[0,-111]],[[89158,50228],[0,-117],[0,-117],[1,-118],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-118],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-50],[-9,-61],[-19,-92],[-3,-74],[15,-57],[16,-38],[0,-96],[0,-118],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-117],[0,-118],[0,-7]],[[89159,46590],[-14,19],[-39,64],[-34,74],[-23,68],[-25,62],[-108,184],[-27,61],[-6,16],[3,16],[12,32],[22,92],[-23,-57],[-27,-45],[-40,-3],[-39,-11],[-37,-27],[-37,-10],[-18,14],[-11,34],[-6,34],[-3,37],[-15,-59],[-31,-33],[-41,-69],[-12,14],[-7,27],[-3,27],[8,29],[6,31],[8,73],[19,44],[12,84],[8,30],[4,30],[-11,34],[-18,12],[-13,20],[-15,57],[-9,20],[-16,23],[-13,28],[14,20],[19,8],[15,-1],[27,-13],[13,0],[31,21],[-17,-7],[-18,1],[-57,37],[-35,38],[-33,77],[0,15],[23,14],[51,16],[-16,39],[-23,34],[-8,61],[-15,38],[-34,61],[-23,64],[-19,129],[-20,98],[5,35],[17,25],[-26,3],[-23,19],[12,47],[27,28],[-25,-7],[-23,-14],[-11,-2],[-11,4],[-6,19],[-1,27],[3,48],[-4,46],[-21,22],[-17,33],[-10,13],[-13,-1],[-12,22],[-10,32],[-126,139],[-8,40],[-11,-18],[-12,-8],[-14,23],[-16,15],[-16,-2],[-15,12],[-16,7],[-17,1],[-66,43],[-63,68],[-51,29],[-31,38],[-33,31],[-73,30],[-74,20],[-27,1],[-22,-7],[-22,2],[-122,147],[-21,67],[2,39],[6,33],[50,9],[-36,9],[-14,-4],[-29,-27],[-16,-2],[-22,18],[-21,22],[-35,-20],[-17,34],[-7,35],[-9,17],[-13,-2],[-17,-13],[-18,2],[-11,25],[-8,32],[-12,23],[-15,17],[-24,42],[-12,56],[1,98],[4,36],[24,57],[16,54],[-20,6],[-19,-25],[-8,-25],[-3,-31],[-2,-103],[-15,-30],[-22,2],[6,-60],[-9,-57],[-26,-67],[-2,-31],[4,-33],[-6,-32],[-42,-94],[-14,-5],[-32,1],[-32,-15],[-15,22],[-13,28],[-9,34],[-13,69],[-10,72],[32,88],[-11,80],[-21,68],[-55,94],[-57,90],[-26,18],[-43,8],[-13,9],[-13,33],[-10,39],[26,17],[46,46],[26,-3],[70,-24],[21,-23],[20,-13],[48,75],[38,99],[24,21],[20,7],[20,-9],[41,-35],[32,-15],[23,-4],[12,-30],[13,-14],[3,46],[12,54],[22,17],[12,3],[8,14],[-2,50],[-30,6],[17,43],[14,21],[5,21],[1,26],[-59,-50],[-62,-21],[-36,5],[-37,1],[-73,-33],[-27,1],[-65,13],[-36,17],[-27,-13],[-27,-1],[-28,38],[-23,48],[-12,34],[-16,25],[-7,33],[-17,126],[-2,89],[-27,2],[-28,9],[-121,85],[-15,-21],[-17,-11],[-17,-4],[-17,5],[-17,13],[1,23],[13,58],[12,21],[17,17],[11,30],[18,92],[1,31],[-2,32],[1,24],[11,12],[46,30],[95,45],[24,27],[20,43],[24,26],[10,27],[12,21],[74,57],[32,4],[32,-6],[65,-34],[61,-54],[53,-72],[57,-52],[70,-8],[35,5],[34,-7],[14,-15],[24,-44],[-7,-29],[-4,-60],[13,-58],[20,-58],[16,-62],[3,-31],[-6,-64],[-5,-31],[-20,-53],[-11,-58],[7,-71],[4,-71],[-1,-66],[4,-65],[10,-65],[47,-180],[27,-122],[9,68],[-2,76],[9,27],[14,15],[17,-16],[4,-30],[2,-67],[14,-131],[19,-6],[21,20],[3,-40],[-1,-74],[10,-59],[8,-23],[34,-48],[15,-9],[44,-12],[33,-3],[32,17],[21,44],[18,47],[65,110],[18,53],[18,80],[7,18],[63,87],[8,31],[9,59],[14,58],[10,30],[62,28],[64,16],[64,53],[27,46],[2,30],[-14,53],[-1,23],[15,23],[56,67],[66,69],[53,47],[29,0],[27,-42],[28,-34],[150,-101],[24,-31],[21,-42],[30,-29],[33,-14],[31,-27],[28,-35],[64,-64],[86,-79],[21,-5],[80,4],[14,-15],[13,-21],[12,-5],[91,-14],[14,-15],[13,-21],[8,-57],[62,-2]],[[79020,51650],[26,-56],[6,-20],[-13,-31],[-10,-44],[-6,-9],[-20,16],[-14,-43],[-9,69],[-20,44],[12,44],[5,4],[6,-2],[6,-11],[31,39]],[[85434,51659],[32,-86],[-21,-82],[15,-46],[40,-2],[10,-18],[7,-20],[4,-28],[-10,-23],[-23,-20],[-26,29],[-7,28],[-5,10],[-35,-21],[-10,-2],[-6,39],[8,55],[-24,25],[-23,57],[-1,23],[9,40],[-1,32],[13,3],[23,-43],[11,40],[9,17],[11,-7]],[[85346,51557],[-17,-15],[-19,1],[-4,61],[6,78],[18,13],[27,-16],[-10,-20],[8,-42],[-9,-60]],[[78815,51642],[-36,-20],[-41,15],[5,34],[20,41],[17,-2],[31,-27],[12,-23],[-8,-18]],[[86336,51840],[48,-24],[11,4],[70,-64],[11,-31],[-4,-21],[10,-29],[-22,-43],[-11,-5],[-12,16],[-22,9],[-25,-17],[-17,13],[-14,40],[-24,24],[-35,84],[-17,-3],[5,-33],[14,-21],[20,-64],[11,-6],[11,2],[16,-27],[-1,-41],[-40,-16],[-14,30],[-3,55],[-23,-19],[-9,-19],[-7,-2],[-15,57],[-43,3],[-29,30],[14,32],[2,30],[19,17],[19,-15],[19,22],[14,-6],[10,14],[38,9],[25,15]],[[77349,51537],[-17,-27],[-25,26],[9,37],[4,51],[15,41],[5,47],[-29,130],[14,5],[12,-14],[19,-87],[17,-52],[-7,-70],[-17,-87]],[[79104,51741],[8,-9],[10,30],[19,-41],[11,-21],[15,-20],[-15,-1],[-6,-19],[-4,-4],[-59,66],[-38,-21],[-25,19],[-8,14],[14,36],[13,83],[26,-21],[6,-26],[-2,-7],[17,-16],[18,-42]],[[85985,51735],[-12,-2],[-10,34],[-28,37],[-17,65],[65,-107],[2,-27]],[[85403,51839],[-1,-17],[-9,24],[-6,6],[6,62],[4,11],[5,-43],[1,-43]],[[79080,51877],[2,-14],[-13,16],[-8,9],[-5,9],[-29,79],[12,-5],[32,-69],[9,-25]],[[78689,52155],[-31,-4],[-9,8],[4,54],[9,33],[14,-1],[16,-49],[-3,-41]],[[85394,52212],[-10,-6],[-3,2],[-3,24],[5,39],[12,0],[5,-6],[1,-29],[-7,-24]],[[85380,52298],[-9,-18],[-9,6],[-6,24],[2,18],[8,11],[9,-8],[5,-33]],[[78735,52225],[-5,-7],[-24,73],[6,42],[6,11],[13,-26],[10,-27],[8,-32],[-14,-34]],[[78840,52304],[2,-17],[-25,34],[-1,24],[3,11],[15,-26],[6,-26]],[[78955,52323],[-18,-17],[-22,53],[1,12],[2,9],[4,6],[13,-27],[16,-10],[4,-26]],[[78618,52273],[-5,-22],[-11,16],[-54,25],[-18,2],[-47,28],[-14,14],[-10,19],[3,35],[7,21],[4,59],[12,24],[23,-44],[26,-38],[15,-17],[46,-38],[16,-19],[7,-65]],[[78728,52446],[2,-31],[-19,8],[-13,37],[11,26],[7,10],[7,-36],[5,-14]],[[78657,52344],[-9,-17],[-14,4],[-14,20],[-20,35],[-21,31],[-28,19],[-17,6],[-6,8],[6,60],[18,4],[58,-56],[19,-31],[28,-83]],[[78895,52523],[18,-25],[14,16],[-1,-21],[-3,-21],[-17,-59],[-28,13],[-7,19],[-2,15],[4,9],[3,29],[12,0],[7,25]],[[79051,52543],[1,-43],[16,-21],[4,-32],[-3,-51],[-14,-59],[-7,-15],[-20,12],[-6,19],[-3,16],[3,11],[-15,14],[10,22],[-7,32],[-40,-20],[-12,-1],[-2,36],[2,15],[31,45],[18,9],[20,-10],[24,21]],[[78451,52413],[-13,-18],[-15,28],[-13,39],[-6,41],[-6,68],[-2,48],[8,28],[5,-1],[23,-28],[15,-49],[9,-15],[1,-45],[-5,-52],[-1,-44]],[[77077,52687],[61,-163],[24,-21],[33,-74],[8,-25],[-9,-52],[-7,-147],[-15,-37],[-38,18],[-1,26],[-22,111],[-39,62],[-16,3],[-10,63],[-20,76],[-60,137],[46,-1],[22,33],[5,27],[4,7],[34,-43]],[[78469,52683],[2,-74],[-20,20],[-17,29],[-25,22],[-32,7],[-23,19],[-16,34],[0,16],[1,13],[5,10],[119,-67],[6,-29]],[[84691,52416],[-53,-98],[-17,-47],[-14,-51],[-21,-56],[-24,-50],[-12,-15],[-29,-27],[-17,-10],[-32,-4],[-97,-39],[-31,-5],[-32,2],[-60,10],[-12,5],[-24,51],[-27,40],[-24,5],[-24,-4],[-175,-3],[-61,-8],[-61,-18],[-33,8],[-33,21],[-24,7],[-25,-2],[-115,-31],[-29,3],[-58,39],[-34,8],[-33,-10],[-31,-36],[-11,-23],[-32,-81],[-18,-58],[-14,-73],[-11,-75],[-7,-61],[0,-64],[5,-72],[9,-71],[10,-55],[39,-126],[8,-17],[44,-36],[25,-45],[25,-126],[17,-65],[17,0],[19,4],[33,-8],[33,-17],[32,39],[17,73],[18,55],[43,103],[25,48],[15,15],[16,-6],[13,-28],[16,-22],[32,-11],[33,7],[34,34],[12,20],[11,26],[29,22],[69,0],[36,-8],[64,9],[-1,19],[-12,20],[-4,16],[12,11],[41,23],[42,17],[31,-12],[27,-33],[11,-34],[4,-41],[-10,-105],[-5,-25],[-22,-12],[-20,14],[-21,54],[-28,20],[-41,-16],[-14,-16],[-13,-22],[-23,-56],[-19,-64],[-41,-100],[-48,-86],[-23,-33],[-26,-23],[-83,-57],[-22,-42],[-17,-55],[-19,-19],[-22,-6],[-16,10],[-33,31],[-11,-25],[-2,-39],[16,-14],[27,-43],[20,-61],[13,-13],[29,-20],[12,-19],[22,-52],[34,-122],[12,-66],[19,-53],[58,-91],[3,-26],[-3,-30],[4,-27],[21,-53],[5,-33],[-23,-43],[-1,-62],[-14,-83],[-3,-28],[0,-26],[10,-24],[11,-18],[16,-10],[14,-17],[26,-65],[14,-17],[8,-23],[0,-36],[12,-20],[11,-37],[16,-9],[8,10],[6,16],[14,-6],[8,-25],[4,-33],[2,-37],[-1,-69],[-7,-24],[-15,1],[-27,28],[-1,-20],[2,-20],[-14,-7],[-16,3],[-40,-3],[-73,-42],[-26,-26],[-17,-46],[-1,-32],[6,-67],[-9,-23],[-34,-9],[-47,18],[-28,18],[-16,15],[-21,45],[-8,58],[16,172],[4,22],[7,19],[8,31],[2,37],[-22,45],[-34,18],[-29,37],[-111,209],[-6,21],[0,34],[4,33],[37,114],[4,22],[5,91],[-1,74],[-4,75],[-17,46],[-31,15],[-32,2],[-31,-15],[-30,-37],[-57,-79],[-22,-46],[-2,-60],[13,-58],[17,-54],[8,-58],[13,-207],[-1,-23],[-14,-60],[-6,-135],[6,-190],[10,-116],[-4,-63],[-26,-136],[-8,-75],[-1,-31],[31,-142],[7,-56],[4,-58],[-33,28],[-15,-1],[-16,-9],[-34,-9],[-35,-1],[-12,-11],[-25,-38],[-15,-15],[-13,-3],[-44,47],[-27,52],[-24,56],[-4,63],[8,66],[12,70],[24,116],[-1,78],[8,64],[14,62],[5,58],[3,224],[-3,20],[-33,133],[-4,22],[0,36],[3,34],[1,31],[-7,24],[-14,22],[-16,9],[-34,-9],[-68,-36],[-20,31],[-15,49],[-10,68],[-5,71],[2,67],[10,65],[-8,45],[-12,49],[0,25],[7,23],[12,18],[15,11],[14,19],[37,66],[12,58],[1,72],[10,68],[19,63],[22,58],[7,60],[-11,96],[5,43],[-4,51],[0,50],[13,95],[42,194],[40,103],[16,27],[21,-47],[16,-57],[1,51],[-5,50],[-16,117],[-14,228],[4,21],[14,-3],[15,20],[7,36],[-15,84],[0,30],[28,119],[24,43],[10,27],[6,73],[12,27],[16,20],[20,50],[11,63],[7,5],[8,2],[12,-55],[14,-23],[28,-17],[24,21],[7,27],[9,24],[14,25],[12,28],[14,66],[18,59],[12,21],[15,13],[16,8],[16,1],[35,-37],[21,-7],[20,2],[14,-6],[10,-17],[9,-34],[11,-29],[10,-14],[12,-7],[76,12],[67,-33],[91,-8],[32,-19],[30,-26],[36,-44],[14,-10],[15,2],[19,42],[14,9],[15,2],[59,-8],[158,-52],[23,8],[96,98],[38,94],[34,26],[11,43],[7,51],[12,13],[29,15],[11,15],[21,62],[24,56],[11,16],[34,-8],[15,-25],[19,-81],[-3,-14],[-22,-40],[-7,-17],[-25,-115],[-17,-56],[-21,-50]],[[78251,53040],[16,-47],[3,-31],[-11,-35],[-4,-54],[-33,-42],[-28,10],[-9,15],[-18,82],[2,69],[11,27],[26,-4],[27,38],[18,-28]],[[85480,52331],[21,-13],[21,4],[10,26],[3,33],[11,62],[24,42],[17,7],[12,18],[-2,46],[1,45],[18,48],[57,68],[31,24],[42,7],[5,-25],[-5,-37],[8,-56],[-4,-150],[-10,-21],[-42,-52],[-47,-42],[-13,-17],[-12,-42],[1,-41],[38,-54],[59,-52],[13,-24],[8,-40],[2,-45],[14,-21],[20,-10],[13,-22],[11,-30],[-100,70],[-26,31],[-32,4],[-31,9],[-32,27],[-34,6],[-16,-19],[-7,-38],[-4,-43],[8,-53],[-1,-32],[-6,-58],[25,-171],[31,-137],[45,-142],[23,-49],[25,-44],[-41,13],[-12,48],[-52,47],[-10,28],[-34,135],[-10,25],[-31,46],[-14,33],[-5,46],[4,48],[-2,66],[1,65],[7,81],[-11,28],[-15,26],[-17,62],[-5,70],[1,40],[7,35],[10,31],[2,30],[-25,44],[-25,124],[-2,65],[32,124],[-1,60],[7,36],[3,38],[17,83],[28,70],[47,99],[18,21],[20,14],[2,-24],[-4,-21],[-34,-101],[-5,-22],[-1,-43],[17,-24],[18,-51],[3,-68],[1,-72],[-4,-73],[-7,-25],[-28,-73],[-65,-85],[-5,-21],[0,-24],[12,-29],[15,-22]],[[77037,53038],[-2,-13],[-29,61],[-32,34],[13,8],[27,-9],[11,-9],[10,-30],[2,-42]],[[85681,53025],[-44,-10],[-10,27],[-12,124],[31,99],[40,58],[27,15],[9,1],[24,-71],[-18,-144],[-21,-73],[-26,-26]],[[84835,53370],[-3,-13],[-11,68],[9,34],[12,-13],[3,-12],[-11,-32],[1,-32]],[[76795,53202],[-18,-5],[-16,12],[-14,33],[-75,96],[-23,1],[-16,25],[-20,8],[-21,64],[-5,34],[16,17],[9,35],[25,-15],[28,-62],[29,-23],[8,-12],[14,-34],[66,-85],[7,-28],[5,-29],[1,-32]],[[80246,53516],[-14,-30],[-14,19],[22,61],[5,4],[1,-54]],[[79377,53492],[-12,-2],[-3,17],[1,29],[-2,24],[-3,17],[0,30],[11,-15],[8,-14],[10,-10],[7,-6],[4,-5],[-7,-42],[-14,-23]],[[79523,53661],[-1,-39],[-19,23],[-4,44],[7,14],[13,-8],[4,-34]],[[82682,53732],[-3,-19],[-24,47],[-7,33],[3,27],[25,2],[12,-17],[-6,-73]],[[84904,53822],[-7,-18],[-34,32],[2,51],[-4,25],[-9,27],[-4,26],[4,28],[20,-36],[12,-57],[16,-55],[4,-23]],[[85236,54013],[-5,-6],[-10,15],[-6,17],[1,17],[7,9],[14,-26],[0,-15],[-1,-11]],[[85199,54075],[1,-25],[-17,56],[-7,65],[14,-23],[15,-49],[-6,-24]],[[82745,54254],[9,-55],[2,-21],[-52,-29],[-31,68],[6,27]],[[82679,54244],[27,-1],[39,11]],[[80087,53968],[-38,-21],[-22,30],[24,36],[8,3],[6,7],[2,15],[-43,24],[-12,21],[-12,54],[0,34],[55,91],[13,10],[2,-38],[38,-95],[2,-64],[-1,-23],[-22,-84]],[[82659,54245],[-3,-5],[-19,-16],[-9,-33],[27,-51],[1,-34],[21,-30],[24,-46],[1,-16],[9,-21],[4,-25],[-17,-26],[-24,-5],[-17,24],[-16,30],[-4,-37],[-13,-21],[-45,6],[-32,0],[-32,-10],[16,-5],[14,-12],[50,-96],[11,-35],[-17,-70],[8,-29],[19,-16],[24,-35],[17,-4],[12,-19],[0,-34],[7,-32],[-19,-12],[19,-8],[17,-16],[-9,-16],[-7,-20],[7,-10],[23,-19],[10,-16],[6,-45],[22,-73],[41,-95],[9,-34],[0,-32],[-6,-27],[-24,-32],[-19,-42],[-2,-15],[-26,-20],[12,-14],[9,-20],[18,-58],[42,-95],[22,-35],[87,-129],[46,-57],[60,-128],[31,-30],[6,-36],[-26,-55],[-38,-27],[-62,-15],[-62,20],[-32,15],[-28,32],[-22,63],[-29,34],[12,-38],[7,-39],[-4,-43],[-11,-33],[-20,-25],[-21,-20],[-9,-14],[-53,-224],[-9,-61],[-16,-251],[0,-71],[24,-133],[2,-69],[5,-30],[-4,-25],[-11,-15],[-46,-41],[-32,-34],[-26,-48],[-21,-59],[-19,-44],[-25,-20],[-18,3],[-14,20],[-10,38],[-6,42],[-4,-31],[1,-30],[8,-33],[4,-34],[-5,-35],[-11,-28],[-29,-30],[-16,-26],[-2,-46],[-8,-26],[-11,-20],[-40,-46],[-9,-18],[-7,-24],[22,4],[19,-4],[2,-45],[6,-34],[-8,-75],[-30,-50],[15,-11],[14,-16],[30,-12],[10,-53],[-4,-64],[-6,-58],[-21,-16],[-14,11],[-14,-1],[-10,-17],[-2,-30],[19,15],[-1,-75],[-5,-72],[-7,-40],[-11,-33],[-18,-10],[-16,24],[-4,-28],[5,-24],[24,-58],[-15,-13],[-10,-20],[-5,-29],[-26,-66],[-11,-49],[-5,-52],[-12,-41],[-194,-180],[-156,-151],[-12,10],[-7,23],[-6,235],[-19,121],[-3,68],[-22,-61],[-14,6],[-15,16],[-11,19],[0,26],[11,75],[-14,-41],[-16,-32],[-16,4],[-14,16],[-5,24],[-7,4],[-35,-67],[-45,-35],[-25,0],[-20,21],[1,50],[-2,50],[-5,29],[-13,10],[-11,-4],[-32,-25],[-12,3],[-7,-13],[-85,180],[-18,-146],[-59,-78],[-44,-45],[-43,17],[-45,29],[-44,-35],[-47,-86],[-13,-13],[-14,1],[-10,11],[3,65],[1,64],[-4,145],[-4,28],[-13,40],[-18,28],[-11,-21],[-9,-28],[-36,1],[-35,23],[-30,-13],[-60,-58],[-32,-8],[-17,12],[-11,31],[6,29],[14,21],[-25,-17],[-21,-29],[-9,-19],[-10,10],[-26,65],[-54,-24],[-8,-8],[-13,-22],[-13,11],[-7,24],[-2,136],[-28,262],[-7,134],[-6,31],[-32,49],[1,69],[16,57],[4,68],[-5,73],[-10,71],[-12,54],[-18,46],[-24,52],[-30,39],[-63,43],[-33,-4],[-13,17],[-8,23],[3,43],[12,30],[15,7],[2,17],[-33,35],[-26,48],[-9,28],[-2,31],[0,73],[8,46],[4,25],[8,76],[18,24],[-3,14],[-8,10],[-11,25],[-9,29],[-20,49],[-36,59],[-6,103],[-5,150],[3,68],[11,128],[21,40],[16,12],[12,17],[-10,2],[-9,-6],[-15,-4],[12,114],[6,33],[25,64],[30,57],[12,67],[17,58],[70,61]],[[80452,53011],[-25,-76],[2,-28],[7,-24],[18,-17],[5,-93],[22,-53],[23,-48],[17,-24],[18,-35],[13,-32],[14,-27],[21,-26],[55,-112],[24,-32],[17,-33],[12,-12],[31,9],[89,81],[16,5],[30,14],[51,-4],[55,-28],[17,-1],[17,17],[24,-5],[21,-9],[11,7],[32,59],[43,17],[14,58],[11,54],[5,59],[18,23],[25,20],[38,26],[129,4],[13,-11],[3,-29],[-3,-23],[5,-13],[17,-2],[16,-13],[65,-47],[27,-14],[16,3],[30,-41],[16,14],[22,29],[21,39],[19,32],[27,12],[35,-2],[41,11],[31,17],[35,-28],[9,9],[6,27],[18,59],[8,40],[7,76],[5,19],[13,10],[14,15],[4,23],[5,26],[-5,23],[-7,18],[-8,64],[2,29],[5,22],[14,11],[37,47],[33,55],[18,27],[7,17],[1,25],[-14,26],[-14,13],[-1,30],[1,21],[4,20],[-2,19],[0,29],[8,31],[20,46],[16,30],[18,-19],[20,9],[20,14],[11,55],[1,25],[-2,21],[6,77],[2,11],[13,48],[1,33],[-7,76],[4,57],[3,118],[7,22],[9,61],[14,64],[29,35],[15,46],[7,8],[10,1],[34,-34],[32,37],[28,5],[23,-5],[14,-16],[13,-11],[27,36],[11,-6],[10,-12],[14,0],[16,9],[41,-8],[71,-2],[49,-22],[48,-61],[24,-13],[11,0]],[[85226,54166],[-11,-12],[-18,4],[-2,30],[18,52],[12,56],[-13,14],[-12,35],[-1,41],[11,76],[15,-6],[14,-33],[6,-62],[10,-47],[-20,-64],[-9,-84]],[[76803,54855],[34,-5],[63,31],[35,-3],[32,-23],[30,-13],[72,17],[14,-5],[13,-13],[11,-20],[33,-75],[56,-92],[16,-59],[9,-67],[6,-15],[63,-127],[7,-54],[-9,-73],[19,-59],[61,-55],[36,-40],[8,-24],[5,-29],[21,-44],[25,-28],[78,-74],[103,-156],[59,-74],[48,-112],[18,-54],[14,-58],[29,-84],[50,-105],[13,-31],[13,-46],[16,-43],[19,-39],[22,-30],[22,-10],[37,-75],[20,-24],[-3,59],[-17,51],[0,32],[3,27],[14,24],[16,6],[31,-21],[49,-89],[21,-53],[16,-71],[13,-75],[20,-37],[27,-13],[31,-5],[28,-23],[65,-104],[22,-48],[16,-57],[12,-68],[7,-71],[4,-16],[42,-85],[22,-36],[27,-18],[78,-19],[28,-30],[23,-49],[10,-50],[-17,-44],[-61,-68],[-66,-47],[64,16],[32,20],[30,31],[30,39],[46,54],[17,12],[21,-4],[18,-16],[28,-53],[26,-57],[20,-66],[12,-73],[-22,-39],[-33,-28],[-45,-71],[-4,-28],[9,-18],[-11,-52],[25,-32],[4,-28],[-22,-39],[2,-24],[26,-103],[13,-24],[40,-52],[60,-53],[34,-25],[38,-19],[17,1],[28,8],[6,-20],[12,-102],[6,-64],[9,-137],[11,-57],[-1,-69],[15,-59],[30,-38],[32,-31],[15,-30],[0,-45],[-5,-36],[-11,-28],[-33,-60],[-6,-25],[-5,-65],[6,-30],[13,-2],[10,16],[40,87],[11,16],[15,12],[15,8],[72,0],[31,-13],[27,-29],[25,-36],[88,-228],[40,-126],[3,-31],[1,-33],[-7,-25],[-37,-86],[-4,-23],[-12,-94],[2,-67],[13,-29],[9,-30],[0,-28],[-25,-139],[-2,-23],[15,-226],[1,-61],[-3,-77],[2,-124],[-19,-384],[-4,-23],[-15,-59],[-20,0],[-16,11],[-12,22],[-6,28],[-9,23],[-48,71],[-13,-12],[-49,-88],[-13,-13],[-16,11],[-25,26],[-81,93],[-5,-30],[-1,-40],[16,-101],[2,-44],[-15,-9],[-8,2],[-33,59],[-31,65],[-35,87],[-26,42],[-23,46],[-66,177],[-17,27],[-101,124],[-20,30],[-26,51],[-28,46],[-61,72],[-106,184],[-46,105],[-51,170],[-17,43],[-86,128],[-47,77],[-20,44],[-45,155],[-14,52],[-16,46],[-28,37],[-24,44],[-49,140],[-15,55],[-11,61],[2,120],[-103,366],[-26,114],[-23,158],[-6,16],[-56,142],[-19,45],[-24,43],[-20,50],[-38,162],[-15,45],[-20,33],[-73,61],[-27,34],[-22,48],[-13,62],[-14,131],[-35,199],[-38,267],[-26,119],[-30,94],[-9,21],[-133,169],[-22,25],[-24,15],[-34,11],[-27,43],[-10,78],[-6,105],[-7,63],[-7,35],[-56,74],[-21,59],[-18,65],[-17,50],[-61,172],[-21,45],[-26,32],[-76,33],[-23,29],[-37,98],[-22,50],[-67,109],[-114,230],[-23,57],[-18,60],[-14,64],[-48,177],[3,36],[8,37],[-1,31],[-6,31],[1,27],[15,16],[32,21],[34,-2],[31,-9],[30,-18],[29,-37],[51,-94],[30,-33],[33,-15],[67,-22]],[[76489,55191],[-6,-17],[-16,9],[-18,52],[6,10],[12,-5],[21,-12],[2,-20],[-1,-17]],[[48774,83055],[-56,-73],[-23,13],[-19,-6],[-6,2],[11,26],[13,61],[24,24],[29,64],[23,17],[9,-2],[5,-6],[11,-71],[-16,-26],[-5,-23]],[[76080,55778],[-17,-48],[-33,145],[-15,9],[0,69],[8,28],[38,30],[10,-17],[20,-134],[-11,-82]],[[76036,56080],[-26,-54],[-12,32],[5,23],[11,13],[11,17],[11,-31]],[[75956,56381],[-22,-1],[-6,24],[-9,26],[6,25],[12,6],[16,-40],[4,-28],[-1,-12]],[[75982,56484],[-13,-22],[-4,3],[-1,16],[-1,12],[-2,20],[-2,37],[11,30],[10,-6],[-5,-31],[7,-59]],[[70296,56606],[-4,-7],[-4,-3],[-3,1],[-1,7],[0,5],[4,-6],[5,6],[5,18],[1,6],[1,-3],[-1,-10],[-3,-14]],[[75872,56595],[8,-22],[-15,4],[-15,32],[4,31],[6,12],[12,-57]],[[75774,57106],[-13,-4],[-7,20],[-1,23],[7,15],[6,7],[7,-2],[7,-38],[-6,-21]],[[75694,57923],[-8,-20],[-29,15],[3,60],[-7,58],[5,24],[21,42],[18,18],[12,-56],[5,-55],[-20,-86]],[[70216,58296],[-2,-4],[0,10],[2,17],[3,11],[1,-1],[0,-11],[-2,-15],[-2,-7]],[[75747,58399],[-13,-12],[-14,15],[11,23],[2,47],[13,-26],[0,-30],[1,-17]],[[75837,58776],[13,-79],[-22,35],[-8,24],[11,17],[6,3]],[[75754,59253],[-9,-37],[-1,80],[4,10],[4,3],[6,-8],[-4,-48]],[[75756,58488],[-7,-14],[-9,15],[-25,104],[-5,66],[-7,23],[9,33],[12,11],[6,37],[3,57],[10,46],[5,13],[20,0],[6,6],[-3,44],[-12,20],[-4,12],[0,106],[3,43],[8,30],[-6,64],[4,24],[15,33],[7,72],[-6,21],[14,110],[-1,73],[19,74],[29,33],[9,1],[1,-62],[3,-21],[-17,-37],[16,-49],[-2,-17],[-6,-39],[-11,-37],[-15,-16],[-11,-50],[-7,-19],[22,-53],[7,-180],[-16,-49],[-19,-10],[4,-120],[-3,-26],[-19,-59],[-4,-26],[-11,-24],[5,-30],[9,-13],[0,-25],[-8,-64],[-1,-72],[-11,-59]],[[71866,70211],[-1,2],[-16,43],[17,-45]],[[72038,69761],[6,-11],[2,-4]],[[72198,69639],[1,-3],[2,0]],[[72502,69218],[-12,9],[-16,-4],[-17,-19],[-8,-12],[-37,-72],[-20,-22],[-18,-32],[-41,-98],[-23,-91],[-18,-85],[1,-61],[-7,-71],[-17,-41],[-11,-14],[-13,-61],[-9,-71],[5,-23],[22,-31],[21,-31],[28,-33],[26,-31],[17,-4],[4,18],[6,17],[20,-9],[23,-31],[15,-24],[7,-8],[40,-41],[34,-34],[42,-43],[11,-27],[9,-28],[20,-37],[48,-66],[42,-47],[34,-38],[26,-27],[12,4],[14,15],[12,8],[13,-8],[21,-20],[49,-63],[45,-48],[50,8],[13,-7],[10,-45],[6,-44],[55,-30],[37,-13],[41,-25],[21,-18],[22,23],[4,20],[18,12],[29,-6],[54,-34],[23,-11],[19,33],[35,16],[19,17],[38,-37],[70,-46],[36,-28],[9,-28],[3,-27],[0,-65],[9,-29],[70,-66],[23,-27],[19,-9],[10,-1],[7,-9],[7,-37],[5,-9],[13,-9],[15,-6],[45,33],[31,24],[22,-6],[15,-27],[2,-40],[8,-42],[16,-20],[17,-3],[42,29],[34,-22],[31,-8],[35,-14],[13,-10],[36,-35],[44,-35],[17,4],[70,65],[6,-7],[15,-63],[21,-22],[34,-20],[35,36],[27,-10],[34,-4],[32,18],[28,4],[40,-31],[9,7],[8,20],[16,90],[14,80],[-2,48],[-12,69],[-33,91],[-3,28],[11,158],[13,91],[10,44],[12,61],[2,29],[-2,25],[-11,16]],[[77033,68097],[-3,-36],[-2,-40],[10,-32],[1,-28],[-2,-25],[-8,-18],[-23,-10],[-18,-30],[-31,-45],[-24,-35],[-17,-32],[-7,-32],[2,-42],[5,-43],[56,-159],[0,-28],[-18,-8],[-23,18],[-21,26],[-22,68],[-19,21],[-18,4],[-109,-35],[-23,-10],[-36,-25],[-25,-52],[-18,-47],[-19,-18],[-28,-37],[-76,-112],[-44,-48],[-29,-18],[-20,-25],[-11,-42],[-8,-29],[-3,-73],[5,-90],[11,-58],[6,-12],[1,-17],[-11,-31],[-15,-26],[-7,-17],[-6,-82],[-13,-40],[-23,-59],[-21,-45],[-33,-35],[-13,-28],[-12,-52],[-7,-44],[0,-16],[4,-14],[13,-16],[17,-15],[8,-23],[1,-28],[-12,-68],[-22,-95],[-26,-74],[-26,-71],[-6,-24],[-23,-87],[-21,-120],[-13,-81],[-12,-56],[-15,-2],[-18,18],[-43,23],[-27,19],[-21,17],[-14,0],[-19,-12],[-19,-7],[-12,8],[-27,50],[-8,-6],[-5,-24],[18,-143],[12,-53],[-2,-88],[-5,-109],[-7,-119],[-4,-28],[-12,-31],[-15,-9],[-14,13],[-11,-3],[-3,-20],[3,-52],[-14,-58],[-10,-51],[3,-49],[5,-49],[16,-108],[0,-39],[-3,-36],[-9,-14],[-14,2],[-7,-15],[-6,-22],[-16,-81],[-16,-9],[-15,12],[-23,55],[-14,16],[-9,-1],[-4,-15],[-6,-32],[-6,-22],[-16,-19]],[[74736,64569],[-7,-90],[-22,1],[20,-60],[6,-44],[3,-60],[-24,-7],[-16,7],[-14,52],[-7,-48],[-24,-44],[-9,22],[-5,23],[-1,41],[13,157],[-2,17],[-7,12],[-13,6],[-5,32],[-21,-167],[9,-68],[-4,-32],[-38,-26],[-39,63],[-5,20],[-3,-35],[-7,-43],[-36,8],[-19,33],[12,57],[23,138],[4,62],[-30,45],[-26,27],[-15,63],[6,-69],[14,-24],[20,-17],[21,-35],[-15,-43],[-15,-27],[-29,-101],[-34,-57],[-41,-42],[-132,-63],[-28,-25],[-41,-78],[-26,-74],[-5,-75],[15,-81],[12,-127],[10,-26],[-14,-47],[-25,-49],[-20,-66],[2,-37],[-5,-24],[-70,-82],[-15,-47],[-19,-48],[-23,27],[-14,0],[19,-38],[-3,-25],[-6,-14],[-18,-14],[-101,-60],[-77,-57],[-22,3],[4,17],[14,15],[-1,66],[-15,12],[-12,4],[-59,-79],[-23,-79],[5,-15],[13,4],[39,44],[19,-12],[1,-18],[-60,-68],[-126,-220],[-6,-44],[-17,-49],[-22,-46],[-41,-112],[-78,-167],[-21,-62],[-125,-128],[-23,-39],[-51,-125],[-53,-102],[-62,-85],[-106,-108],[-65,-102],[-20,-68],[-2,-25],[7,-33],[12,-30],[3,-25],[-6,-44],[-3,-24],[-19,-60],[-33,-43],[-105,-90],[-14,3],[-86,18],[-32,-17],[-13,-42],[-30,-174],[-28,-46],[-11,-42],[-4,-29],[-17,1],[-14,13],[-11,-10],[-12,59],[-21,12],[-17,4],[-73,-59],[-25,-47],[-53,-223],[-14,-144],[13,-159],[18,-127],[4,-57],[-2,-75],[-10,-36],[-6,-43],[8,-88],[23,-116],[5,-48],[1,-51],[17,-116],[-12,21],[-9,49],[-21,62],[-26,-62],[14,-44],[49,-53],[15,-44],[-32,-386],[-24,-138],[-29,-90],[-16,-34],[-34,-142],[-24,-172],[-5,-67],[11,-74],[-12,-44],[-16,-33],[30,15],[10,-40],[3,-42],[1,-246],[-3,-257],[-23,-11],[-25,-2],[-22,7],[-16,10],[-39,-14],[-21,-28],[-17,-47],[1,-81],[-72,-203],[-16,-67],[-6,-65],[10,-34],[18,-35],[24,-14],[47,-14],[23,-19],[15,-34],[-55,36],[-65,8],[-155,-95],[-41,-66],[-23,-57],[-15,-131],[-3,-88],[-18,-73],[-81,-112],[-51,-34],[-19,-30],[-60,39],[-66,98],[-27,53],[-97,253],[-18,32],[-19,108],[-4,41],[-5,16],[-9,11],[-5,16],[-21,124],[-9,130],[-14,144],[11,-10],[17,-47],[8,-70],[1,-96],[12,-11],[11,9],[-31,222],[-28,55],[-7,4],[-7,36],[-1,44],[2,22],[-21,72],[-8,44],[-48,220],[-22,157],[-33,175],[-22,62],[-34,135],[-28,63],[-30,84],[-24,37],[-9,20],[-70,292],[-21,162],[-18,76],[-9,58],[-25,247],[0,44],[-3,49],[-17,105],[-31,113],[-9,70],[1,28],[-20,110],[-4,50],[-13,47],[-15,42],[-16,34],[-37,112],[-14,27],[-25,72],[-18,134],[-23,52],[36,0],[-22,49],[-11,32],[-12,20],[17,50],[-27,-1],[-15,30],[-20,93],[-37,105],[-6,57],[-32,177],[-27,426],[-26,189],[2,54],[-30,165],[-15,110],[-6,93],[-8,61],[-7,121],[-12,39],[-1,23],[8,55],[22,85],[8,54],[-10,77],[-20,-80],[-18,-23],[-9,60],[0,80],[-2,20],[5,26],[49,-12],[-56,49],[-6,29],[-3,22],[12,40],[-20,33],[-8,103],[-6,24],[-2,19],[11,142],[48,280],[4,63],[-5,90],[-10,71],[-5,76],[-3,19],[-17,7],[-16,28],[-19,112],[17,36],[13,21],[-18,-9],[-15,3],[29,52],[25,39],[59,46],[25,30],[-37,-27],[-38,-10],[-83,6],[14,104],[14,35],[16,19],[-23,-6],[-27,9],[9,106],[21,22],[22,5],[28,15],[-30,17],[-31,9],[-37,-18],[-34,13],[-42,0],[17,-14],[17,-33],[-8,-57],[-9,-36],[-23,-24],[-18,-38],[-6,-33],[-10,-23],[18,-16],[19,-12],[11,-26],[13,-39],[-1,-75],[-49,-177],[-17,-39],[-124,-107],[-48,-58],[-104,-75],[-40,-14],[-44,15],[-66,57],[-99,147],[-26,48],[-79,189],[-57,99],[-44,93],[-54,88],[-51,118],[-10,54],[3,54],[19,30],[22,-12],[18,-46],[12,-21],[11,-8],[76,71],[29,-3],[20,35],[25,-7],[52,55],[22,3],[26,11],[42,140],[31,89],[20,19],[-1,22],[-5,28],[-16,-7],[-10,-27],[-8,-33],[-8,-19],[-24,18],[-17,-3],[-20,-11],[-75,-52],[-31,-47],[-20,-9],[-119,51],[-117,118],[-49,79],[-31,100],[-31,120],[10,33],[48,72],[42,56],[-37,-25],[-41,-35],[-20,-24],[-22,-51],[-31,-12],[-11,76],[-8,74]],[[68934,65585],[19,25],[14,16],[27,13],[30,10],[27,-1],[38,-1],[1,173],[4,16],[5,8],[6,4],[5,-2],[8,-26],[10,1],[10,15],[24,-11],[18,7],[19,-10],[32,0],[58,4],[32,-1],[21,-28],[23,-30],[25,-4],[35,3],[25,12],[12,28],[9,27],[53,40],[56,32],[16,3],[5,-18],[-3,-32],[7,-30],[22,-19],[16,-4],[14,4],[10,9],[23,47],[12,11],[15,-1],[17,23],[0,17],[-11,8],[-9,25],[2,20],[-3,29],[2,27],[7,20],[13,20],[-8,40],[-19,77],[-20,99],[-22,82],[-27,72],[-14,53],[1,117],[-2,24],[-9,14],[-13,8],[-18,-12],[-16,-2],[-34,3],[-17,12],[-45,117],[-6,46],[-1,47],[16,82],[4,77],[2,71],[-2,20],[-9,24],[-16,18],[-41,4],[-49,24],[-37,41],[-26,25],[-7,17],[-3,19],[6,86],[12,97],[9,30],[15,31],[11,21],[17,28],[48,92],[43,128],[26,89],[14,26],[14,23],[20,27],[24,25],[23,-1],[23,-23],[16,-26],[6,-59],[12,-38],[13,-23],[16,-12],[22,3],[86,68],[29,13],[70,9],[49,26],[42,27],[5,49],[17,75],[50,97],[14,44],[15,83],[16,75],[14,32],[79,83],[77,76],[13,35],[50,158],[28,108],[8,34],[16,94],[18,93],[24,21],[53,36],[42,34],[21,40],[13,35],[-2,34],[-12,41],[3,24],[2,23],[30,49],[58,144],[34,71],[12,0],[35,39],[35,43],[-2,19],[-5,26],[-19,11],[-6,31],[4,43],[17,118],[-4,34],[-19,108],[4,30],[8,31],[22,41],[29,34],[92,81],[19,9],[32,21],[20,43],[2,37],[-8,22],[-19,31],[-36,28],[-33,24],[-55,-3],[-29,21],[-7,15],[-4,51],[5,86],[-8,8],[-13,-10],[-29,10],[-36,-1],[-13,24],[7,29],[-2,38],[-6,37],[-5,8],[-17,9],[-27,31],[-22,39],[-12,27],[-4,18],[1,12],[16,34],[19,48],[6,41],[3,30],[-6,22],[-17,27],[-18,23],[-7,20],[-1,31],[7,39],[22,29],[38,28],[10,34],[-2,25],[-10,8],[-27,0],[-45,9],[-8,14],[-5,18],[0,19],[10,21],[11,27],[-2,26],[-13,30],[-32,21],[-4,31],[5,25],[10,36],[9,26],[22,71],[26,16],[33,23],[35,26],[55,-19],[27,-10],[54,-22],[45,-18],[47,-5],[19,1],[21,-22],[52,-37],[43,-20],[29,1],[42,33],[21,30],[29,33],[36,-2],[79,51],[15,-8],[24,-3],[28,29],[14,35],[3,18],[7,12],[30,23],[30,30],[9,41],[5,27]],[[71402,72067],[33,36],[35,37],[36,38],[41,44],[35,37],[28,31]],[[71610,72290],[3,-7]],[[71975,70982],[6,-31]],[[72004,70601],[1,-37]],[[76921,44818],[-3,-3],[-3,3],[-1,1],[0,3],[3,1],[3,2],[1,5],[1,7],[1,-7],[0,-6],[-2,-6]],[[76899,44825],[4,-2],[4,3],[2,-4],[-7,-6],[-4,11],[-2,16],[-1,15],[2,0],[0,-6],[1,-5],[1,-9],[-1,-6],[1,-7]],[[79367,45798],[-8,-41],[-14,23],[-17,7],[3,30],[14,5],[7,1],[10,11],[5,-36]],[[70136,47593],[-6,-23],[-12,-10],[-5,58],[-17,41],[7,0],[15,-21],[6,-56],[5,17],[-1,17],[3,16],[-2,18],[-9,28],[3,5],[13,-23],[2,-19],[-2,-48]],[[47236,82899],[-1,-17],[-21,21],[-10,22],[-56,11],[23,22],[12,-6],[40,-1],[11,-10],[2,-42]],[[48272,83000],[12,-21],[5,-21],[-20,-7],[-22,4],[-10,-14],[-1,-26],[8,-34],[14,-24],[11,-55],[10,-60],[14,-37],[3,-45],[-2,-22],[3,-40],[-6,-14],[4,-38],[18,-78],[7,-43],[5,-94],[-12,-36],[-16,-33],[-11,-40],[-8,-43],[-5,-70],[-36,-81],[-15,-20],[-18,-13],[39,-56],[-32,-26],[-34,-8],[-38,14],[-23,-1],[-22,-19],[-8,-11],[-7,6],[-14,46],[-11,-48],[-22,-15],[-37,3],[-62,-13],[-24,-14],[-10,-21],[-8,-25],[-10,-14],[-11,-8],[-48,-18],[-9,-8],[-23,-40],[-29,-23],[-24,-7],[-21,23],[-9,14],[-10,8],[-33,-2],[10,-7],[7,-16],[3,-32],[-4,-31],[-16,-15],[-19,-3],[-31,-32],[-41,-9],[-22,-30],[-134,-50],[-7,0],[-19,13],[-20,5],[-20,-4],[-56,-28],[-28,6],[35,69],[47,35],[5,10],[-16,4],[-88,-24],[-31,-21],[-31,-6],[14,32],[40,43],[21,21],[14,8],[14,25],[42,29],[-135,-59],[-35,7],[-8,16],[-28,-7],[-10,40],[40,61],[24,26],[29,14],[27,20],[10,25],[-13,8],[-82,-6],[-39,5],[2,20],[8,22],[40,37],[22,6],[20,-4],[19,-9],[15,-13],[46,8],[-19,23],[-3,49],[-15,16],[19,22],[21,14],[36,47],[13,7],[71,11],[76,24],[76,34],[-39,19],[-19,25],[-30,-51],[-21,-19],[-61,-10],[-19,6],[-27,15],[-9,-6],[-8,-12],[-40,-24],[-42,-6],[49,45],[62,76],[14,25],[20,42],[-6,18],[-13,11],[45,87],[16,15],[29,3],[22,14],[9,0],[8,5],[19,26],[-29,16],[-29,9],[-92,-9],[-12,2],[-12,8],[-7,11],[-6,30],[-6,6],[-21,0],[-20,-9],[-15,1],[-14,13],[23,30],[-29,7],[-29,-6],[-25,9],[0,19],[11,19],[-15,18],[-3,23],[16,11],[16,-4],[35,17],[43,8],[-37,16],[-15,14],[-1,22],[3,18],[44,32],[46,13],[-4,21],[4,22],[-47,7],[-46,-16],[5,43],[11,38],[2,25],[-2,27],[-22,-11],[-3,38],[-9,26],[-32,-18],[1,35],[9,24],[17,11],[17,-5],[30,0],[30,19],[43,4],[69,-5],[47,-52],[12,9],[19,33],[9,3],[71,-14],[44,-18],[12,6],[-7,35],[-15,25],[19,33],[23,22],[16,11],[36,14],[15,13],[11,42],[16,35],[-90,-18],[-85,41],[14,29],[18,17],[31,13],[3,15],[15,13],[26,33],[-9,43],[5,32],[19,21],[6,30],[8,22],[38,8],[37,20],[13,-2],[43,5],[15,-8],[-4,36],[27,4],[10,-7],[5,-25],[12,-17],[3,-28],[-8,-22],[-13,-17],[12,-17],[-19,-31],[21,13],[29,31],[-1,25],[-5,31],[-9,28],[4,31],[17,20],[43,10],[-18,35],[16,3],[18,-7],[25,-28],[26,-21],[28,-17],[-27,-35],[-32,-23],[-13,-26]],[[65607,67350],[-26,-69],[-39,-58],[-17,18],[-12,0],[-28,-23],[-20,-3],[-37,-40],[-33,-20],[-23,2],[-8,4],[-5,27],[0,10],[15,-5],[51,36],[64,58],[6,26],[-10,43],[3,9],[41,-21],[46,42],[39,11],[19,-29],[-26,-18]],[[63574,73983],[1,-25],[8,-143],[7,-74],[9,-72],[16,-66],[18,-63],[25,-38],[56,-47],[27,-13],[71,-9],[71,-21],[41,-22],[13,-15],[11,-23],[34,-110],[54,-78],[110,-117],[53,-39],[179,-74],[119,4],[328,142],[110,36],[41,0],[-25,-28],[-41,-17],[25,-20],[38,-3],[18,3],[13,18],[2,30],[-2,30],[-18,132],[-10,93]],[[64976,73354],[77,-7],[30,13],[44,31],[33,19],[17,2],[17,15],[12,18],[29,127],[14,32],[49,72],[42,45],[43,40],[55,28],[73,-3],[58,-9],[33,0],[16,-3],[12,4],[7,9],[8,55],[12,18],[20,16],[29,0],[35,4],[29,-4],[37,-21],[48,-2],[31,4],[19,-22],[13,-28],[7,-24],[1,-32],[0,-25],[5,-9],[19,-15],[27,-11],[53,-14],[49,-25],[26,-18],[36,-27],[42,-68],[16,-10],[19,-7],[13,2],[32,28],[28,-21],[14,3],[32,16],[34,-20],[84,-74],[9,2],[8,-8],[7,-17],[5,-21],[6,-64],[25,-46],[29,-43],[35,-23],[73,-56],[31,-45],[33,-77],[39,-102],[6,-9],[102,3],[114,0],[14,-40],[-3,-81],[4,-82],[11,-57],[0,-53],[-8,-27],[-7,-30],[-2,-13],[15,-20],[13,-43],[2,-61],[-7,-33],[1,-26],[7,-23]],[[66973,69198],[-66,-141],[-7,-15]],[[66900,69042],[53,-112],[33,-70],[46,-98],[6,-23],[0,-39],[47,-149],[17,-78],[15,-45],[37,-72],[37,-70],[40,-32],[27,-7],[62,-36],[22,-30],[36,-74],[43,10],[9,0],[2,-5],[1,-24],[-6,-115],[12,-116],[8,-175],[-3,-30],[-10,-51],[-1,-32],[-2,-20],[2,-9],[14,-12],[29,-7],[70,20],[8,-5],[17,-21],[12,-32],[1,-16],[-17,-27],[-3,-45],[5,-69],[-3,-8],[-15,-16],[-5,-99],[-3,-9],[-18,-10],[-85,6],[-10,-2],[-32,-26],[-54,-19],[-15,-11],[-21,-30],[-14,-36],[-3,-34],[-3,-7],[-31,7],[-11,-29],[-61,-44],[-7,-9],[-9,-35],[-8,-98],[-8,-88],[-4,-13],[-19,-30],[-2,-10],[2,-34],[-8,-62],[-7,-172],[-8,-48]],[[67107,66360],[-15,-4],[-12,-24],[-22,-30],[-47,23],[-37,24],[-124,57],[-13,28],[-8,48],[-21,13],[-31,-72],[-104,42],[-36,-13],[-21,22],[-57,2],[-44,45],[-64,-31],[-50,-6],[-69,79],[-74,22],[-60,-7],[-31,6],[-50,29],[-24,29],[-39,-22],[-18,41],[-110,38],[-21,74],[-15,68],[-1,70],[-27,123],[-9,177],[-10,70],[-15,60],[-20,51],[-27,55],[-24,22],[-103,42],[-20,-6],[-46,-27],[-49,-61],[-81,-34],[-17,-27],[-20,-58],[-26,-35],[-36,9],[-39,-35],[-72,-97],[-38,-30],[-32,3],[-34,46],[-76,62],[-49,20],[-69,-14],[-32,11],[-56,72],[-14,53],[-32,35],[-99,79],[-81,105],[-15,39],[-10,59],[-35,71],[-79,58],[-45,61],[-52,14],[-49,-2],[-21,11],[-20,27],[-67,127],[0,51],[-41,124],[-10,45],[-9,123],[-11,32],[-43,51],[-7,33],[10,44],[0,34],[-23,31],[-33,17],[-8,38],[6,73],[-5,47],[-30,73],[-43,76],[-44,111],[-17,28],[-11,73],[-16,87],[-24,6],[-119,-104],[-35,59],[-104,102],[-8,15],[-7,23],[13,14],[13,5],[26,-18],[16,21],[-6,35],[-26,21],[-36,-2],[10,-32],[-34,-30],[-7,-41],[5,-49],[3,-70],[-14,-33],[-10,-16],[-45,-4],[-21,-31],[-14,-7]],[[63484,69102],[-18,24],[-13,19],[-10,42],[-3,29],[4,16],[-5,24],[-14,32],[-15,18],[-14,3],[-13,19],[-9,36],[-23,23],[-14,5],[-1,110],[0,96],[0,96],[-49,4],[-43,3],[0,80],[0,149],[20,116],[21,111],[-32,82],[-34,87],[-22,37],[-26,109],[-13,48],[-11,18],[-13,11],[-45,-4],[-43,58],[-50,69],[-61,84],[-53,55],[-22,12],[-52,4],[-5,11],[-3,30],[0,34],[16,50],[2,32],[-35,107],[-11,32],[-30,12],[6,31],[0,21],[-4,16],[-7,8],[-9,1],[-24,-13],[-17,48],[-56,138],[-18,17],[-3,9],[13,42],[23,63],[4,36],[-4,40],[-25,75],[6,32],[11,36],[0,28],[17,-4],[21,-1],[7,23],[0,78],[5,29],[67,132],[34,30],[25,27],[6,40],[-5,21],[-5,30],[-2,21],[-28,60],[-10,30],[-1,27],[7,48],[12,38],[39,22],[23,19],[3,16],[-29,28],[-63,8],[-46,-8],[-15,9],[-21,53],[-24,28],[-21,18],[-21,-3],[-13,7],[-3,22],[-31,174],[-9,24],[-14,6],[-12,1],[-8,12],[-9,24],[-6,31],[0,41],[1,35],[-4,23],[-11,23],[-15,16],[-13,19],[-23,153],[-9,41],[0,4]],[[62434,73238],[1,8],[-3,35],[11,30],[-1,12],[-22,39],[-31,38],[-8,7],[0,41],[1,31],[-3,28],[-6,15],[0,13],[12,30],[-8,20],[-45,49],[-17,24],[-31,5],[-4,16],[5,34],[11,41],[17,41],[6,21],[6,37],[2,26],[19,36],[1,10],[-6,13],[-15,7],[-16,3],[-5,6],[-3,20],[2,79],[-5,48],[-6,35],[4,78],[-11,15],[-17,41],[-7,35],[4,13],[3,22],[3,30],[-1,21],[-16,21],[-11,22],[-2,24],[-4,29],[-7,23],[-3,15],[6,9],[22,7],[32,-4],[27,-1],[15,15],[18,141],[17,37],[20,22],[38,-50],[16,-18],[10,0]],[[63484,69102],[-25,-14],[-28,11],[-59,48],[-19,2],[-25,-19],[-1,-16]],[[63327,69114],[-63,54],[-22,11],[-8,1],[-36,-1],[-51,-9],[-30,-22],[-21,-24],[-9,-23],[-4,-12],[-16,-67],[-19,-87],[-19,-78],[-38,-109],[-21,-51],[-45,-94]],[[62925,68603],[-49,-19],[-113,19],[-125,20],[-125,21],[-92,15],[-8,5],[-91,134],[-73,106],[-90,133],[-93,135],[-94,137],[-68,100],[-82,128],[-76,117],[-59,92],[-77,81],[-59,63],[-87,91],[-69,74],[-60,63],[-91,96],[-31,27],[-95,32],[-90,27],[-93,29],[-62,18]],[[60873,70347],[41,69],[-13,62],[-29,-11],[-28,-15],[-16,96],[21,12],[-20,125],[-20,129],[-19,125],[-20,127]],[[60770,71066],[78,82],[59,61],[83,85],[79,83],[75,78],[84,87],[74,77],[68,32],[15,24],[31,106],[26,90],[2,21],[0,128],[4,150],[9,80],[16,71],[14,52],[1,48],[-2,49],[-14,75],[-16,77],[2,75],[3,40],[9,64],[17,46],[17,29],[65,30],[38,18],[52,83],[30,49],[43,78],[31,57],[3,20],[0,8]],[[61766,73219],[27,11],[50,70],[29,64],[9,6],[26,-21],[19,-6],[44,25],[25,-13],[22,-17],[12,-1],[58,-40],[15,-5],[30,-5],[44,-2],[29,26],[20,26],[15,-1],[13,-6],[12,-11],[10,-19],[4,-27],[-1,-87],[4,-23],[8,-17],[10,-3],[12,19],[21,28],[26,30],[20,27],[11,10],[18,-1],[17,-5],[9,-13]],[[45682,89993],[32,-3],[52,20],[22,13],[53,45],[32,13],[49,-3],[23,3],[1,-5],[-30,-18],[-24,-6],[-35,-27],[-32,-62],[-25,-30],[1,-13],[29,-24],[32,-13],[30,12],[13,-5],[12,-17],[6,-18],[2,-17],[-6,-36],[-17,-37],[-24,-30],[3,-10],[19,-5],[92,20],[10,-1],[5,-10],[1,-19],[5,-16],[9,-15],[-3,-15],[-40,-48],[48,30],[37,9],[65,-15],[26,-18],[15,-30],[23,10],[9,-1],[15,-17],[0,-18],[-10,-27],[-4,-24],[-11,-10],[-21,-7],[-6,-9],[9,-18],[14,-18],[19,-1],[3,-9],[1,-10],[-3,-12],[-6,-8],[-10,-4],[-13,-13],[48,-29],[6,-10],[1,-16],[-4,-17],[-8,-18],[-15,-11],[-34,-2],[-22,-12],[7,-20],[0,-26],[-6,-29],[-28,-46],[-26,-24],[-25,-15],[-45,5],[-24,12],[2,-39],[-25,-24],[5,-20],[9,-10],[-5,-26],[-11,-26],[-20,-27],[-23,-17],[-45,-21],[-38,-35],[-26,-14],[-65,1],[-67,-22],[-93,-47],[-64,-38],[-48,-43],[-65,-69],[-48,-30],[-27,-7],[-54,-7],[-45,-19],[-150,-35],[-50,-19],[-7,-18],[-21,-27],[-1,-9],[9,-8],[2,-9],[-19,-32],[-37,-22],[-17,0],[-21,20],[-10,-1],[-3,-3],[0,-6],[12,-24],[-23,-10],[-97,-28],[-166,20],[-65,22],[-81,33],[-49,9],[-68,2],[-56,47],[-26,29],[-2,12],[3,14],[5,9],[9,5],[19,0],[2,5],[-14,23],[-14,-8],[-36,-33],[-16,2],[-21,16],[-1,16],[-41,6],[-36,20],[-36,28],[-5,11],[17,16],[-3,3],[-13,3],[-26,-5],[-39,-36],[-17,-9],[-257,-8],[-65,-4],[-13,-5],[-11,23],[-10,53],[-4,34],[3,17],[9,20],[14,-4],[13,-16],[12,-22],[14,-11],[89,28],[37,18],[15,18],[18,29],[20,16],[9,14],[18,46],[13,21],[14,16],[18,10],[40,7],[-27,11],[-24,0],[-85,-48],[-28,0],[1,7],[12,14],[29,23],[-20,2],[-8,11],[-1,22],[15,37],[69,47],[24,7],[7,10],[-9,7],[-14,5],[-70,-49],[-50,-17],[-15,3],[-26,19],[-8,9],[-12,22],[2,13],[24,38],[-4,8],[-17,3],[-44,36],[-71,-4],[-174,21],[-36,-9],[-59,-30],[-36,-10],[-16,6],[-15,16],[-14,22],[-12,27],[5,19],[23,11],[17,5],[47,-6],[58,19],[37,4],[10,3],[22,20],[11,5],[16,-7],[8,-14],[59,22],[20,10],[2,7],[9,8],[28,-12],[24,0],[29,8],[52,3],[115,2],[18,18],[8,15],[10,39],[-4,8],[-73,-36],[-16,1],[-84,19],[-30,21],[10,18],[44,37],[46,30],[67,32],[16,13],[2,15],[-45,26],[-85,-7],[-22,31],[-70,19],[-47,-12],[-25,19],[-61,-26],[-134,-38],[-54,-27],[-28,-8],[-33,21],[-57,25],[-64,7],[-6,14],[37,44],[26,8],[26,-4],[49,-30],[34,-10],[-43,45],[1,17],[-3,26],[-13,11],[-13,29],[5,9],[17,4],[34,-10],[82,-50],[40,9],[22,18],[29,14],[-8,7],[-70,1],[-38,10],[-19,14],[-17,25],[6,11],[20,10],[60,-3],[-40,43],[-27,24],[-3,12],[2,15],[3,10],[6,5],[69,-25],[15,-1],[-14,16],[-30,24],[-2,9],[13,7],[6,14],[1,11],[21,9],[21,1],[21,-9],[66,-46],[10,-13],[3,-17],[-3,-22],[2,-8],[26,7],[21,-9],[10,2],[26,32],[17,-7],[11,-15],[3,-14],[2,-18],[-5,-39],[1,-5],[18,22],[31,1],[4,11],[1,41],[-3,34],[-3,7],[-101,48],[-17,11],[-22,24],[5,11],[19,11],[30,4],[68,-1],[7,5],[-13,13],[-32,8],[-7,7],[-4,14],[-38,-8],[-42,0],[-40,8],[-1,11],[16,15],[33,26],[15,7],[46,-5],[46,8],[37,-9],[29,-26],[42,-45],[57,-29],[5,-9],[30,-24],[60,-63],[60,-37],[3,-10],[-10,-11],[-23,-13],[5,-7],[31,-9],[21,-25],[2,-11],[-20,-78],[-10,-16],[-13,-9],[-56,15],[14,-25],[40,-26],[9,-15],[-6,-14],[4,-4],[15,8],[6,-8],[-3,-24],[-6,-20],[-10,-16],[3,-7],[16,2],[14,-4],[23,-22],[19,-67],[9,-21],[7,19],[8,49],[8,25],[7,1],[7,8],[5,15],[11,55],[38,41],[18,12],[16,3],[9,-5],[28,-43],[17,-7],[9,2],[12,29],[15,56],[3,63],[-8,69],[5,49],[18,30],[23,9],[29,-12],[22,-18],[42,-68],[34,-36],[29,-39],[15,-12],[29,-7],[7,3],[6,9],[2,15],[-6,98],[8,31],[12,22],[53,12],[28,14],[28,22],[22,12],[19,2],[19,-9],[19,-19],[31,-37],[39,-61],[50,-46],[26,-73],[5,-13],[6,-1],[7,9],[4,14],[1,32],[-14,43],[-46,109],[-1,20],[6,17],[33,1],[75,-9],[25,-17],[51,-66],[15,-16],[8,-5],[4,9],[20,12],[13,15],[23,36],[51,66],[10,2],[15,-5],[26,-18],[12,-13],[24,-11],[25,4],[35,23],[38,14],[14,32],[2,15],[-31,97],[13,20],[68,24],[59,2],[14,-7],[38,-47],[25,-23],[13,-19],[3,-42],[15,-16],[29,-17]],[[59940,70699],[-14,-3],[-35,-27],[-4,-8],[-6,-16],[-1,-12],[-5,-129]],[[59875,70504],[-19,3],[-23,28],[-4,25],[-7,8],[-16,3],[-31,13],[-35,-43],[-15,-70],[-4,-33],[-12,-70],[5,-42],[2,-55],[3,-45],[-3,-27],[-7,-15],[2,-10],[6,-4],[19,12],[21,-12],[20,-23],[1,-15],[-14,-9],[-33,-35],[-23,-41],[-6,-38],[-16,-81],[2,-16],[8,-10],[54,9],[48,32],[37,35],[12,-2]],[[59847,69976],[-8,-89],[-6,-54],[2,-10],[9,-47],[-16,-86],[-17,-71],[-7,-33],[-17,-74],[-17,-87],[-9,-59],[2,-21],[-5,-109],[3,-31],[-20,-94],[-5,-47],[-8,-63],[-14,-134]],[[59714,68867],[-19,-44]],[[59512,69820],[29,48],[0,41],[49,94],[-1,9],[-13,25]],[[59576,70037],[2,4],[54,175],[35,173],[33,240],[23,123],[20,81],[9,67]],[[59752,70900],[32,5],[23,-7],[29,-3],[23,26],[11,75],[13,12],[6,-18],[7,20],[30,33],[14,22],[15,26],[8,10]],[[59963,71101],[-5,-36],[-4,-23],[0,-30],[6,-16],[8,-33],[5,-33],[-10,-27],[1,-29],[3,-23],[8,-28],[-15,-50],[-16,-47],[-4,-27]],[[53347,73016],[-13,-6],[-18,19],[-1,28],[3,9],[22,-13],[6,-26],[1,-11]],[[54326,73859],[-19,-66],[-9,-25],[-67,-160],[-7,-37],[-5,-40],[-7,-35],[-9,-34],[-9,-42],[1,-48],[4,-23],[8,-16],[13,-14],[10,-22],[-16,-21],[18,-40],[14,-24],[2,-24],[0,-24],[-30,-46],[-12,-24],[-8,-31],[-3,-31],[3,-28],[-1,-28],[-30,4],[-32,17],[-31,-8],[-45,33],[-16,5],[-15,13],[-38,100],[-30,43],[-32,33],[-33,2],[-33,-4],[-29,20],[-59,68],[-63,55],[-27,35],[-12,24],[-14,16],[-36,16],[-33,37],[-14,2],[-32,-4],[-16,2],[-16,13],[-32,44],[-20,60],[-5,26],[14,69],[17,65],[15,19],[17,13],[11,20],[9,23],[32,-68],[15,-17],[14,4],[26,24],[2,27],[29,35],[36,0],[17,-6],[9,-31],[14,-10],[16,-4],[53,-59],[15,-9],[15,-2],[41,25],[31,9],[66,-13],[36,15],[25,1],[36,23],[28,38],[15,9],[15,3],[38,-2],[38,-9],[16,9],[13,25],[16,11],[17,-8],[44,43],[19,2],[18,-16],[-16,-27]],[[52355,74347],[-16,-57],[-17,40],[-1,35],[3,10],[20,-15],[11,-13]],[[53871,75291],[-12,-5],[-7,6],[-4,9],[5,22],[25,-13],[-1,-12],[-6,-7]],[[52301,75483],[-9,-26],[-13,2],[5,19],[12,39],[15,13],[6,-11],[-7,-23],[-9,-13]],[[52675,75392],[14,-37],[31,-151],[3,-32],[-6,-34],[-8,-23],[-31,-76],[5,-63],[11,-39],[2,-43],[-6,-54],[-19,-328],[-9,-58],[-6,-50],[-21,-16],[-28,17],[-34,28],[-16,-2],[-16,-10],[-13,9],[-13,16],[-9,-113],[-16,-46],[-23,-29],[-23,-2],[-23,10],[-19,0],[-15,21],[-12,38],[-18,47],[-19,55],[-2,49],[-3,109],[5,24],[8,23],[4,49],[-3,43],[6,15],[11,-15],[8,5],[-1,22],[3,40],[-15,34],[-24,11],[-2,35],[2,35],[13,23],[4,30],[1,94],[-18,34],[-6,52],[-9,33],[-16,34],[-18,27],[-12,26],[-2,69],[6,58],[6,24],[6,-3],[18,-29],[15,-6],[29,-7],[29,9],[35,26],[34,31],[49,93],[30,18],[16,25],[5,33],[13,8],[15,-32],[19,-3],[29,-26],[12,-26],[11,-30],[10,-13],[11,-8],[2,-7],[-9,-7],[-10,-35],[6,-10],[16,-19]],[[52887,76530],[9,-22],[1,-13],[-6,-15],[3,-33],[-24,28],[-35,-14],[-21,3],[-6,24],[5,15],[33,3],[11,7],[20,-3],[10,20]],[[53805,78640],[-6,-33],[-11,-8],[-21,-20],[-24,-26],[-21,-30],[-6,-32],[6,-21],[6,-7],[8,6],[11,-4],[15,-11],[24,-12],[1,-11],[-5,-14],[-19,-25],[-17,-29],[-2,-17],[2,-13],[6,-8],[25,4],[4,-11],[-12,-73],[4,-13],[22,-12],[16,-17],[30,-47],[13,-38],[-9,-12],[-19,-7],[-15,4]],[[53811,78103],[17,23],[-43,82],[-19,0],[-26,-35],[-72,36],[-14,-15],[-10,-28],[-25,-35],[-35,-15],[-40,-38],[-41,-27],[-32,-21],[-18,4],[29,44],[-13,1],[-38,-31],[-22,-27],[-7,-44],[-7,-74],[17,-19],[30,-97],[36,-41],[-7,-40],[-9,-31],[-22,-27],[-19,20],[-11,0],[-8,-64],[16,-168],[25,-119],[25,-51],[57,-81],[60,-42],[108,-136],[59,-42],[15,-24],[36,-104],[31,-121],[33,-189],[24,-94],[48,-105],[100,-151],[90,-111],[84,-68],[66,-12],[155,15],[27,-6],[29,-19],[6,-47],[-10,-32],[-33,-33],[-33,-46],[-4,-63],[31,-44],[150,-117],[153,-98],[48,-50],[55,-78],[134,-107],[22,-52],[82,-111],[36,-87],[7,-67],[-17,-68],[-8,-47],[-14,-48],[-35,18],[-39,49],[-59,197],[-108,20],[-22,15],[-39,34],[-2,22],[-10,28],[-9,10],[-42,6],[-28,-32],[-34,-76],[-38,-109],[-39,-160],[-2,-64],[21,-63],[63,-35],[48,-56],[32,-58],[3,-140],[14,-80],[-21,-45],[-41,11],[-54,-29],[-39,-51],[-16,-49],[4,-128],[-8,-48],[-73,-92],[-38,-94],[-10,-39],[-14,-45],[-93,-1],[-21,55],[-1,81],[16,50],[34,24],[22,103],[-7,76],[14,33],[12,23],[26,14],[37,13],[3,105],[-28,48],[-10,66],[-14,124],[-47,157],[-25,140],[-19,69],[-30,36],[-54,0],[-27,10],[-96,98],[-6,15],[0,25],[16,40],[-10,52],[-12,50],[-18,43],[-21,22],[-43,-14],[-15,-10],[-27,4],[-21,-19],[-12,-1],[33,75],[-9,17],[-33,31],[-45,5],[-12,4],[-8,-20],[-8,11],[1,33],[-53,150],[-35,61],[-17,11],[-32,-13],[-54,27],[-32,5],[-17,-6],[-27,-19],[-13,12],[-5,20],[-48,63],[-61,35],[-118,197],[-36,74],[-75,81],[-47,119],[-39,43],[-56,35],[-13,-4],[-17,-13],[-13,-2],[-10,15],[10,16],[12,7],[-4,45],[-64,118],[-38,37],[-10,24],[-8,32],[-8,20],[-18,12],[-15,-2],[-21,8],[1,57],[4,43],[-3,37],[-20,96],[-36,82],[-20,195],[-17,55],[-39,42],[-88,46],[-122,126],[-26,2],[-74,49],[-46,8],[-59,-43],[-72,-121],[-59,-125],[-21,-25],[-75,-43],[-67,-20]],[[53443,77151],[8,-24],[17,4],[8,30],[-3,21],[-18,-4],[-12,-27]],[[28538,62475],[34,-21],[35,-11],[15,0],[14,-7],[32,-49],[26,-28],[97,-60],[33,-105],[6,-33],[-25,-19],[-32,-7],[-30,-1],[-28,20],[-12,16],[-29,7],[7,14],[-13,7],[-16,-2],[-12,-40],[-14,-32],[-25,3],[-10,27],[-13,-12],[-11,-20],[-13,-75],[-21,37],[-23,31],[-28,13],[-57,2],[-28,11],[-22,63],[-9,18],[-23,17],[-22,72],[-8,10],[-62,16],[-12,40],[4,36],[20,44],[10,12],[34,-1],[32,13],[14,19],[15,12],[117,-32],[27,0],[26,-5]],[[49439,80202],[2,-29],[-12,-7],[-10,10],[-21,0],[-20,-6],[5,52],[38,-7],[18,-13]],[[60873,70347],[-41,-67],[-10,-7],[-53,-28],[-110,-57],[-73,-38],[-94,-49],[-78,-41],[-77,-40],[-71,-37],[40,-79],[63,-120],[41,-80],[49,-103],[44,-92],[46,-97],[-32,-33],[-54,-55],[-5,-10],[-5,-10],[-22,-97],[-18,-77],[-5,-9],[-75,-28],[-76,-29],[-48,-17],[-14,-20],[-31,-96],[-32,-98],[-54,-81],[-60,-89],[-14,-6],[-43,14],[-74,23],[-71,23],[-49,16],[-59,18]],[[59708,68751],[9,76],[-3,40]],[[59847,69976],[4,48],[9,63],[17,54],[-8,126],[1,68],[11,78],[-6,91]],[[59940,70699],[30,-12],[17,-27],[29,-77],[44,-22],[18,-22],[25,-40],[30,-15],[94,-25],[75,85],[63,72],[73,82],[49,56],[83,95],[56,60],[72,79],[72,78]],[[84413,65829],[-18,-8],[-21,10],[-19,2],[0,18],[20,17],[0,25],[5,13],[46,-30],[-2,-22],[-11,-25]],[[84525,65965],[-16,-91],[-14,-14],[-14,8],[-14,51],[10,19],[14,-10],[11,4],[25,74],[7,-12],[-9,-29]],[[84845,66096],[-24,-15],[-25,8],[4,81],[9,-12],[5,-27],[19,-16],[12,-19]],[[89496,67175],[-5,-1],[-18,61],[5,3],[10,-9],[12,-36],[-4,-18]],[[85627,67196],[-27,-27],[-10,-31],[-25,-11],[-24,-44],[-23,-9],[0,-35],[10,-30],[-15,-6],[-17,-37],[-1,-26],[6,-22],[-1,-11],[-20,-31],[-22,-2],[-1,35],[2,25],[20,63],[0,73],[19,8],[7,10],[29,52],[6,22],[-16,21],[1,25],[4,11],[24,-8],[10,-19],[5,-2],[14,14],[6,25],[27,50],[11,49],[21,-41],[-6,-52],[-14,-39]],[[85832,67811],[-12,-11],[-15,15],[-5,66],[7,32],[12,7],[11,-57],[7,-24],[-5,-28]],[[85922,68032],[2,-13],[-27,11],[-11,53],[18,-10],[6,-18],[12,-23]],[[85958,68092],[-24,-47],[-25,42],[-31,28],[15,8],[8,11],[1,18],[20,27],[40,20],[12,2],[14,19],[5,17],[6,9],[25,24],[7,-28],[-1,-21],[-19,-12],[-19,-29],[-17,-36],[-16,-16],[-5,-10],[4,-26]],[[86283,69275],[-32,-12],[-17,13],[-16,71],[30,45],[41,-44],[8,-13],[-14,-60]],[[86377,69352],[-24,-6],[-1,34],[19,75],[2,55],[18,70],[8,15],[6,6],[6,-22],[-7,-85],[-18,-65],[-9,-77]],[[86032,70078],[-9,-10],[6,45],[22,40],[2,-26],[-21,-49]],[[86216,70520],[-24,-3],[-11,7],[-4,18],[35,37],[26,-6],[-11,-34],[-11,-19]],[[86133,70408],[-22,-20],[-3,19],[-9,9],[16,28],[0,12],[-11,19],[12,71],[-3,30],[44,12],[8,-29],[1,-87],[-33,-64]],[[85740,70727],[10,-15],[16,9],[13,2],[9,-8],[11,-40],[4,-24],[-20,-3],[-9,-5],[-11,-30],[-16,11],[-10,14],[-2,19],[5,70]],[[88844,70884],[-5,-6],[-13,19],[-2,17],[2,10],[9,2],[18,-20],[-9,-22]],[[85854,70760],[-7,-6],[-9,52],[-6,18],[10,10],[21,94],[4,-37],[8,-37],[8,-6],[-8,-27],[-12,-10],[-9,-51]],[[85969,70980],[-19,-27],[-15,0],[13,32],[2,15],[11,43],[21,15],[9,2],[-17,-44],[-5,-36]],[[86054,71283],[-20,-24],[-14,19],[7,51],[5,17],[16,-17],[6,-46]],[[86437,71199],[37,-17],[16,-1],[14,7],[23,23],[23,17],[17,-9],[14,-20],[8,-28],[-4,-30],[-26,-63],[-22,-68],[50,-13],[50,1],[-12,-42],[-1,-36],[15,-18],[13,-23],[-4,-21],[-7,-21],[27,-32],[-2,-21],[-7,-22],[-68,-145],[-20,-73],[-13,-81],[-13,-59],[-9,-61],[-8,-66],[-12,-68],[4,-61],[-4,-62],[-34,-153],[-25,3],[-30,18],[-19,-3],[-10,-34],[17,-70],[-54,-83],[-60,-56],[-1,26],[6,20],[9,16],[6,19],[9,66],[-5,65],[-18,83],[-1,29],[12,12],[9,4],[4,11],[1,27],[-6,21],[-17,6],[-17,1],[-11,-31],[-16,-59],[-8,-59],[3,-33],[7,-29],[22,-49],[-6,-29],[-9,-22],[-77,50],[-17,4],[-14,11],[-15,67],[32,16],[9,8],[3,22],[5,65],[-15,55],[-12,19],[-11,23],[7,46],[-4,58],[-1,81],[6,14],[29,16],[21,44],[19,49],[27,87],[22,94],[-21,5],[-18,17],[19,45],[-6,56],[-29,69],[-17,81],[-26,36],[-14,13],[-17,-19],[-14,-23],[13,-53],[-1,-46],[2,-47],[13,-2],[16,11],[13,-8],[7,-24],[2,-32],[-5,-31],[-12,-15],[-15,1],[-14,17],[-12,24],[-27,13],[-28,-28],[-28,-58],[-23,-29],[11,42],[5,47],[-11,32],[-27,54],[-6,31],[-2,38],[5,37],[28,-43],[14,-53],[20,-24],[25,0],[-19,79],[-7,20],[-28,35],[-37,59],[-23,29],[8,62],[14,12],[12,-3],[39,-22],[4,31],[-6,16],[-3,20],[26,26],[42,22],[9,11],[8,22],[10,11],[30,0],[25,21],[20,58],[5,31],[8,27],[51,46],[13,7],[34,-6],[32,-26],[16,-55],[13,-60],[33,-40]],[[86740,71396],[13,-21],[32,9],[4,-6],[-9,-19],[-14,-19],[-26,14],[-16,1],[-2,31],[2,12],[16,-2]],[[86826,71494],[-8,-23],[-24,7],[10,20],[7,24],[6,5],[4,-26],[5,-7]],[[85910,71499],[-18,-23],[-8,35],[8,102],[34,-21],[0,-31],[-16,-62]],[[87321,71576],[38,-24],[39,6],[0,-105],[5,-35],[11,-32],[-5,-46],[18,-16],[-53,-52],[-48,-70],[-20,-47],[-17,-50],[-11,-53],[-6,-58],[-16,23],[-46,93],[-29,26],[-47,13],[-15,-3],[-96,-87],[-13,-63],[-26,-96],[-12,-32],[-14,-9],[-10,-16],[-11,-82],[-30,-51],[-18,-1],[-31,14],[-14,-8],[19,81],[-30,9],[-30,-1],[0,52],[-18,30],[13,39],[0,31],[8,18],[3,25],[-1,22],[-18,6],[-12,16],[2,57],[-10,2],[-26,-10],[-54,-44],[-15,0],[23,31],[48,43],[21,25],[48,69],[29,33],[16,58],[5,36],[10,31],[9,49],[15,17],[27,43],[15,-4],[17,-53],[23,-40],[16,3],[30,21],[14,5],[34,-3],[30,26],[13,30],[4,37],[-11,63],[15,-6],[14,3],[33,40],[34,23],[35,6],[40,-22],[39,-36]],[[87319,71706],[-5,-11],[-5,3],[-18,-26],[-4,25],[-13,17],[-2,13],[40,9],[13,-7],[-6,-23]],[[87480,71594],[-30,-49],[-26,3],[-13,22],[-4,27],[25,43],[21,60],[19,27],[16,15],[12,-1],[-27,-84],[7,-63]],[[85940,71632],[-6,-28],[-19,19],[-8,18],[17,87],[-2,34],[1,16],[35,45],[6,-8],[2,-13],[-3,-20],[2,-43],[-27,-71],[2,-36]],[[88737,71846],[-3,-27],[-15,6],[-7,18],[1,32],[16,0],[8,-29]],[[87046,72697],[-12,-21],[-24,7],[-14,31],[5,35],[25,27],[23,-54],[-3,-25]],[[88428,73630],[-26,-2],[-7,6],[16,14],[1,24],[10,42],[0,13],[-21,2],[1,48],[16,48],[43,75],[11,14],[2,-33],[-13,-77],[-3,-28],[34,-6],[-22,-93],[-42,-47]],[[89229,75675],[11,-11],[52,29],[-10,-88],[-5,-89],[4,-148],[4,-67],[9,-65],[22,-46],[29,-33],[42,-105],[23,-129],[16,-63],[11,-66],[4,-30],[0,-30],[-3,-41],[4,-33],[-5,-105],[-19,-121],[-2,-62],[-16,-12],[-10,-29],[-9,-13],[-9,-10],[-14,-3],[-9,-11],[-4,-33],[-6,-31],[-12,-28],[-9,-31],[-8,-75],[-3,-77],[-11,-54],[-28,-14],[-32,1],[-40,-25],[-9,-15],[-32,-94],[-9,-56],[0,-59],[9,-73],[12,-72],[9,-133],[-10,-203],[-9,-65],[-20,-44],[-16,-20],[-13,-25],[-17,-66],[-29,-132],[-2,-34],[0,-34],[-8,-45],[-5,-44],[5,-51],[9,-48],[38,-123],[15,-36],[17,-34],[-65,-36],[-12,-17],[-39,-70],[-12,-67],[1,-73],[-7,-27],[-10,-23],[-12,-15],[-43,-34],[-28,-33],[-27,-52],[-11,-28],[-21,9],[-13,24],[12,31],[-3,35],[6,93],[-7,37],[22,28],[10,45],[24,35],[16,32],[3,26],[-15,28],[-15,20],[-22,0],[-21,-6],[-13,-27],[-5,-36],[1,-16],[-2,-15],[-32,-49],[4,-52],[10,-26],[12,-13],[-4,-18],[-15,-41],[-11,-4],[-20,58],[-25,32],[-31,0],[-31,-12],[-25,-39],[-8,-32],[-5,-33],[2,-81],[-10,-68],[-19,-59],[-10,-22],[-23,-40],[-17,-5],[-12,18],[-9,28],[12,101],[-1,57],[28,29],[-23,41],[-28,16],[-39,-21],[-11,-25],[-8,-33],[-21,-41],[-24,-39],[-26,-66],[-18,-79],[-58,26],[-32,6],[-32,-2],[-57,9],[-63,-16],[-71,-30],[4,22],[59,47],[2,14],[-6,26],[-14,1],[-35,-9],[-18,4],[-8,28],[-12,12],[-7,-12],[2,-54],[-9,-7],[-11,14],[4,42],[-8,61],[-1,39],[12,32],[-12,14],[-14,-5],[-17,-16],[-14,-22],[-32,-112],[-12,-64],[23,-52],[63,-72],[10,-17],[1,-31],[-8,-32],[-17,-15],[-69,-24],[-59,-46],[-18,-48],[-54,-182],[-43,-125],[-62,-43],[-67,39],[-16,43],[-14,54],[-25,48],[-22,53],[-13,63],[2,101],[-10,61],[9,16],[37,37],[12,21],[21,48],[8,27],[1,41],[-17,21],[-44,-1],[-43,-13],[-31,18],[-41,49],[-12,11],[-43,3],[-31,-9],[-31,-18],[-32,-6],[-11,-9],[-37,-61],[-29,-37],[-26,-19],[-55,-5],[-28,-12],[-29,-20],[-8,1],[-30,-27],[-35,-24],[-19,-24],[-34,16],[-68,-43],[-33,-5],[-34,23],[-31,38],[-30,-16],[-21,-56],[-10,-113],[-12,-50],[-4,-61],[-15,10],[-91,109],[-6,4],[-74,-19],[-19,-9],[-23,-22],[-25,-10],[-23,16],[-22,26],[-21,-8],[-22,-18],[-8,165],[4,21],[14,29],[14,25],[36,9],[36,-9],[25,12],[22,32],[23,47],[26,37],[35,30],[34,34],[30,48],[28,52],[26,39],[28,32],[43,77],[57,87],[22,64],[13,18],[49,35],[65,28],[31,-2],[30,-56],[17,8],[16,14],[34,8],[34,-9],[34,0],[33,7],[65,19],[34,22],[33,29],[118,20],[82,48],[12,-3],[13,-11],[1,-36],[-10,-39],[10,-24],[16,-14],[76,-5],[22,-8],[32,26],[30,33],[31,44],[22,49],[-20,61],[-4,67],[17,73],[24,62],[30,37],[27,42],[54,121],[40,98],[14,121],[-8,142],[34,106],[33,18],[66,49],[34,14],[5,-21],[-1,-28],[-51,-89],[-30,-36],[-17,-12],[-16,-16],[-7,-31],[26,-53],[7,-38],[-2,-37],[1,-34],[30,-36],[34,-12],[14,0],[13,10],[39,89],[8,15],[111,65],[55,50],[30,13],[28,26],[64,100],[23,46],[21,51],[18,59],[13,64],[18,40],[101,95],[32,52],[11,25],[12,73],[9,75],[12,59],[16,56],[22,56],[25,53],[15,54],[21,128],[10,72],[7,25],[11,22],[9,27],[7,31],[3,30],[5,93],[-3,72],[-16,61],[-14,17],[-15,1],[-23,-5],[-19,24],[4,22],[20,4],[13,12],[9,21],[18,66],[11,71],[1,31],[-14,58],[-11,69],[0,37],[12,43],[17,34],[16,9],[17,2],[15,13],[14,20],[8,21],[13,59],[4,33],[-7,90],[8,24],[11,15],[16,-11],[15,-2],[19,3],[17,-9],[4,-23],[11,-151],[6,-21],[13,-16],[14,3],[13,23],[8,32],[17,6],[51,-34],[18,24],[11,37],[11,66],[-5,60],[-13,21],[-12,-4],[-11,-16],[-13,-9],[-75,-31],[1,66],[16,99],[9,31],[12,15],[32,-17],[15,-11],[34,-48]],[[88744,76083],[-6,-3],[-7,5],[-6,43],[5,23],[18,16],[17,5],[-14,-80],[-7,-9]],[[89248,77833],[-19,-4],[-23,24],[-3,30],[17,24],[16,-9],[16,-31],[5,-16],[-9,-18]],[[89186,77956],[-11,-37],[-14,55],[-3,58],[8,0],[16,-9],[3,-28],[1,-39]],[[89950,77256],[35,-3],[16,2],[26,-8],[106,-88],[32,-11],[33,-1],[23,7],[20,24],[64,106],[67,97],[8,-4],[0,-27],[-5,-29],[-30,-89],[-33,-119],[-7,-60],[11,-59],[20,-49],[17,-66],[19,-93],[26,-11],[14,-2],[27,28],[25,35],[22,4],[22,-6],[-30,-24],[-28,-30],[-24,-57],[-9,-10],[-28,3],[-16,-2],[-32,-24],[-29,-27],[-27,-33],[-30,-17],[-32,-4],[-49,-27],[-32,-2],[-59,23],[-29,-6],[-63,-53],[-58,-77],[-50,-86],[-42,-104],[-17,-54],[-10,-60],[-2,-40],[-4,-38],[-9,-27],[-12,-22],[-35,13],[-57,55],[-110,81],[-117,123],[-66,62],[-123,-19],[-117,-118],[-11,10],[-44,81],[-22,32],[-26,9],[-19,-1],[-19,-6],[-26,-41],[-10,-30],[-7,-34],[-2,-24],[3,-24],[25,-53],[31,-40],[13,-8],[30,3],[14,-4],[49,-80],[55,-74],[12,-25],[-20,-26],[-22,-13],[-26,3],[-25,10],[-44,32],[-18,-27],[-29,-56],[-16,-60],[-13,-28],[-32,-36],[-34,-19],[-17,6],[-14,23],[-7,27],[-4,32],[7,69],[17,62],[7,63],[-14,89],[-9,18],[-36,53],[-17,50],[-4,63],[2,35],[9,77],[9,39],[16,13],[18,8],[28,27],[30,36],[29,41],[29,51],[15,55],[-25,68],[-5,40],[4,38],[26,20],[27,-15],[55,-56],[11,-5],[37,-3],[51,-12],[30,3],[14,8],[22,46],[10,59],[-4,75],[0,75],[14,61],[43,99],[12,57],[4,141],[16,62],[12,64],[6,135],[-17,129],[-18,64],[-20,60],[3,58],[16,53],[0,16],[4,14],[31,11],[14,11],[14,26],[16,15],[12,-15],[10,-26],[43,-65],[68,-116],[80,-176],[50,-86],[53,-78],[59,-79],[63,-69],[39,-32],[29,-52],[18,-8]],[[71402,72067],[-13,50],[-7,29],[-14,58],[-13,51],[-19,78],[-13,52]],[[63939,77681],[-9,-17],[-15,3],[-28,61],[8,62],[10,13],[14,8],[2,-13],[-20,-28],[-2,-35],[17,-39],[23,-15]],[[63975,77748],[-10,-8],[-6,37],[11,31],[15,4],[-5,-49],[-5,-15]],[[64633,78001],[-5,-6],[-18,16],[-12,26],[15,31],[14,-5],[9,-33],[-3,-29]],[[72280,76146],[-39,65],[-41,63],[-33,15],[-57,10],[-30,1],[-17,15],[-17,36],[-20,34],[-26,35],[-10,53],[-11,10],[-19,-7],[-31,2],[-17,5],[-26,9],[-42,21],[-32,21],[-42,4],[-23,-4],[-75,-4],[-61,22],[-50,4],[-31,-1],[-14,2],[-25,0],[-37,5],[-50,33],[-19,2],[-12,-1],[-83,-25],[-38,-6],[-81,3],[-79,3],[-26,5],[-14,-2],[-30,-59],[-13,-10],[-75,13],[-88,39],[-64,43],[-54,45],[-72,71],[-43,35],[-6,-21],[-12,-6],[-16,-3],[-38,4],[-18,-36],[-46,-26],[-30,-23],[-15,-26],[-30,-173],[-8,-63],[20,-106],[-23,6],[-26,27],[-9,22],[-26,13],[-93,19],[-18,25],[-11,20],[-24,13],[-34,10],[-74,46],[-32,1],[-96,36],[-15,-1],[-7,-1],[-38,-23],[-24,-7],[-25,9],[-46,-28],[-25,-38],[-20,-47],[-20,-29],[-6,-44],[-14,-23],[-16,-46],[0,-27],[15,-26]],[[69707,76179],[-24,-24],[-27,-7],[-14,-15],[-14,-35],[-14,-30],[-8,-11],[-12,2],[-14,23],[-21,-1],[-24,-29],[-29,-47],[-36,-72],[-37,-39],[-48,-32],[-35,-15],[-27,-25],[-46,-50],[-9,-29],[-33,-18],[-26,-20],[-25,-34],[-6,-59],[-16,-34],[-37,-47],[-32,-47],[-21,-46],[-22,-49],[-6,-27],[-1,-37],[10,-31],[2,-30],[-8,-21],[-21,-8],[-23,6],[-34,21],[-36,38],[-14,18],[-18,32],[3,30],[9,57],[7,40],[-15,18],[-11,21],[-8,19],[-16,38],[-19,-9],[-17,-9],[-19,13],[-58,-6],[-43,-4],[-41,-4],[-52,-6],[-62,-6],[-18,9],[-11,12],[-12,53],[-6,45],[-12,84],[-8,65],[-10,77],[-6,85],[-5,61],[-47,2],[-38,2],[-51,2],[1,48],[0,61],[1,69],[9,91],[4,77],[4,93],[3,61],[4,68],[-27,-21],[-29,-23],[-27,-22],[-19,55],[-18,53],[-28,81],[-20,61],[-36,35],[-27,27],[-28,44],[-24,46],[-22,43],[-27,38],[-26,-12],[-30,-24],[-28,-22],[-30,-25],[-15,-11],[-35,4],[-30,4],[-54,7],[-46,6],[-47,6],[-65,8],[-66,9],[-44,-11],[-56,-14],[-59,-15],[-49,-13],[-61,-15],[-46,-12],[-23,2],[-29,49],[-45,78],[-28,48],[-27,46],[-39,68],[-32,51],[-31,49],[-17,46],[-9,58],[-16,26],[-36,35],[-38,38],[-39,38],[-38,38],[-38,38],[-39,38],[-38,38],[-38,38],[-39,37],[-38,38],[-38,38],[-39,38],[-38,38],[-39,38],[-38,38],[-38,38],[-39,38],[-31,27],[-30,-7],[-44,-19],[-46,-21],[-45,-19],[-82,-36],[-53,-23],[-41,-20],[-44,-21],[-57,-27],[-48,-22],[-57,-27],[-49,-24],[-42,-20],[-44,-20],[-35,-17],[0,-132],[0,-132],[0,-132],[0,-133],[0,-132],[0,-132],[0,-132],[0,-132],[0,-133],[0,-132],[0,-132],[0,-132],[1,-133],[0,-132],[0,-132],[0,-132]],[[65549,75646],[-12,1],[-27,-8],[-44,-18],[-37,-10],[-17,6],[-14,14],[-13,29],[-19,35],[-20,29],[-24,59],[-17,45],[-41,99],[-6,31],[-8,32],[-13,26],[-49,65],[-57,59],[-56,57],[-16,14],[-26,18],[-32,1],[-22,-4],[-67,-19],[-51,-22],[-70,-30],[-54,-34],[-12,-10],[-39,-40],[-49,-67],[-56,-94]],[[64581,75910],[-7,60],[-3,94],[1,30],[15,79],[16,54],[13,56],[5,73],[-11,118],[-13,26],[-16,9],[-17,2],[-30,-5],[-14,-9],[-25,40],[-30,6],[-16,-11],[-16,-6],[-17,11],[-15,24],[-10,25],[-7,29],[-23,57],[-24,31],[-28,7],[-46,-1],[-15,3],[-1,33],[6,72],[0,38],[-3,35],[-8,29],[-10,25],[-27,42],[-21,58],[-35,120],[-30,135],[-13,21],[-27,21],[-60,17],[-39,18],[-15,17],[-7,29],[1,32],[3,38],[9,31],[31,25],[67,5],[58,-3],[53,-56],[17,-13],[18,-4],[37,18],[19,5],[46,-6],[-14,27],[-17,14],[-18,-1],[-16,11],[-25,52],[-45,59],[-10,24],[-3,39],[8,34],[32,34],[26,47],[13,63],[11,28],[23,45],[34,-8],[54,32],[87,-6],[105,9],[29,-3],[67,-32],[39,-14],[46,-7],[34,14],[-32,44],[-69,51],[-17,44],[31,119],[43,109],[26,129],[-7,128],[-13,35],[4,42],[15,35],[11,35],[-9,42],[-19,65],[-10,22],[-33,35],[-66,2],[-54,19],[-17,-16],[-10,-24],[-13,-15],[-42,-32],[-14,-6],[-14,6],[-21,36],[-18,-4],[-56,22],[-26,49],[-10,7],[-90,38],[-32,8],[-71,-40],[-52,-52],[-15,-7],[-27,-33],[-15,-5],[-16,6],[-14,-2],[-32,-49],[-57,-57],[-28,-35],[-31,-23],[-35,-14],[-36,-2],[-13,-13],[-41,-4],[-25,-11],[-1,-19],[5,-43],[-21,15],[-22,-30],[7,-28]],[[63675,78534],[-13,7],[-63,54],[-51,38],[-46,34],[-7,6],[-12,16],[-9,26],[-2,28],[5,20],[11,13],[13,5],[11,-4],[13,-12],[23,-16],[30,-2],[19,11],[2,28],[-35,104],[-33,84],[-31,93],[-14,34],[-39,78],[-38,77],[-30,69],[-16,21],[-48,8],[-93,17],[-33,8],[-26,-20],[-27,-16],[-25,30],[-20,48],[-10,41],[5,42],[2,62],[-15,60],[-17,30],[-42,23],[-53,51],[-15,93],[26,133],[42,95],[30,39],[15,35],[5,30],[-4,29],[-18,30],[-28,29],[-14,37],[6,78],[18,112],[29,90],[38,49],[33,36],[13,33],[1,47],[-1,45],[9,32],[13,26],[15,23],[21,25],[26,7],[30,-21],[40,-55],[59,-109],[33,-71],[12,-22],[31,-42],[27,-17],[46,26],[45,31],[14,20],[9,29],[-7,50],[-9,33],[-10,41],[-14,72],[-9,113],[-12,36],[9,4],[22,-7],[20,-3],[30,25],[40,47],[73,72],[16,48],[12,53],[21,33],[47,10],[43,17],[30,38],[48,33],[40,20],[17,19],[13,27],[45,79],[35,48],[31,49],[11,31],[24,-5],[38,-22],[40,-20],[30,-30],[6,-31],[3,-25],[12,-13],[14,-2],[22,6],[37,1],[46,41],[65,68],[59,21],[31,-16],[25,-50],[21,-48],[20,-17],[13,-1],[5,0],[26,10],[2,0],[24,-2],[23,-16],[37,-1],[53,12],[5,5],[25,-7],[31,-21],[24,-26],[43,-85],[24,-22],[50,-31],[24,-26],[27,-43],[14,-26],[30,-47],[34,-77],[7,-61],[7,-52],[13,-25],[11,-3],[11,9],[11,23],[4,40],[-3,69],[-9,57],[-12,18],[-5,20],[8,26],[19,12],[23,-8],[39,-32],[41,-42],[50,-72],[46,-45],[51,-37],[40,-11],[31,11],[36,30],[34,34],[15,37],[11,39],[50,53],[46,48],[21,-9],[15,-14],[47,30],[17,8],[45,11],[46,-17],[37,-51],[37,-34],[32,4],[26,17],[18,32],[13,38],[18,25],[3,1],[57,-13],[36,2],[4,6],[47,-11],[53,-53],[32,-59],[42,-76],[19,-25],[28,-10],[22,-5],[30,-11],[78,-16],[12,-9],[8,-13],[-7,-41],[7,-11],[63,30],[17,22],[21,62],[19,63],[13,23],[15,6],[15,-9],[21,-37],[28,-38],[38,-14],[23,-6],[36,-3],[85,18],[79,46],[45,49],[21,75],[13,84],[20,54],[-8,54],[-40,52],[-13,16],[-97,29],[-6,21],[-6,5],[-95,46],[-46,20],[-13,30],[-8,40],[-30,35],[-59,32],[-11,25],[10,25],[47,28],[53,58],[21,12],[47,2],[44,48],[30,27],[16,33],[-4,33],[-44,101],[-13,61],[8,39],[25,44],[14,23],[18,42],[11,23],[44,9],[54,4],[37,-10],[52,-5],[47,-8],[23,-7],[18,13],[13,23],[-1,30],[-18,29],[-69,38],[-30,31],[-23,-3],[-39,9],[-35,21],[-31,7],[-10,29],[6,40],[12,22],[23,12],[25,-6],[27,17],[8,9],[2,13],[-4,18],[-13,15],[-17,4],[-21,-13],[-24,-8],[-42,18],[-33,23],[2,20],[24,31],[11,25],[0,34],[0,40],[9,47],[24,32],[28,17],[74,-31],[92,-28],[16,4],[4,15],[11,13],[127,6],[25,18],[12,14],[123,21],[14,20],[18,18],[29,0],[33,7],[47,22],[33,13],[6,1],[35,-5],[43,17],[9,8],[8,13],[37,26],[73,21],[18,-13],[35,-6],[44,10],[33,16],[19,-16],[25,-16],[20,13],[9,45],[13,43],[22,20],[17,8],[16,16],[11,18],[64,-3],[58,43],[11,-20],[74,5],[93,28],[55,13],[96,29],[44,23],[63,15],[58,10],[38,41],[31,6],[37,3],[22,10],[15,15],[10,29],[-5,36],[-6,26],[27,15],[38,5],[24,6],[52,59],[36,29],[38,18],[75,-10],[68,-9],[69,-28],[36,-36],[31,-27],[29,-13],[26,-8],[31,12],[22,17],[13,23],[19,17],[70,13],[14,-25],[34,-77],[22,-102],[38,-136],[16,-66],[-7,-35],[0,-48],[-2,-53],[-28,-59],[11,-28],[68,-31],[95,11],[58,25],[33,-9],[17,15],[11,44],[22,10],[23,-31],[17,-52],[16,-34],[-1,-40],[6,-51],[11,-13],[24,20],[15,11],[4,16],[-7,19],[-3,20],[5,18],[11,7],[33,-6],[48,-10],[57,-73],[31,-13],[13,-1],[29,4],[35,21],[23,26],[8,13],[13,-2],[13,-12],[1,-27],[-10,-38],[-35,-35],[-43,-33],[-26,-60],[-6,-63],[12,-32],[10,-21],[2,-30],[10,-4],[18,13],[48,61],[24,16],[36,10],[58,-5],[39,-20],[19,-28],[21,-24],[14,10],[7,27],[0,30],[6,25],[64,62],[43,41],[14,5],[29,-9],[17,5],[47,38],[43,44],[5,30],[1,27],[11,12],[61,10],[10,5],[52,30],[72,52],[35,31],[64,14],[12,9],[21,21],[40,28],[22,3],[-13,-69],[-24,-80],[-14,-22],[-64,4],[0,-22],[10,-34],[7,-18],[8,-17],[17,-30],[68,-69],[87,-87],[94,-99],[65,-69],[26,-36],[17,-27],[48,-101],[46,-95],[77,-168],[68,-162],[76,-178],[43,-103],[89,-216],[24,-67],[45,-125],[40,-118],[35,-104],[22,-10],[2,28],[3,19],[12,11],[26,31],[14,7],[20,-3],[22,16],[8,29],[-5,55],[-3,25],[7,27],[12,11],[16,8],[16,5],[12,30],[24,9],[21,-5],[18,-1],[16,-23],[9,-30],[17,-3],[28,4],[3,-26],[-8,-43],[-9,-33],[-2,-27],[15,-12],[54,11],[19,-6],[6,-27],[8,-22],[4,-27],[-6,-30],[10,-18],[46,-1],[33,15],[51,1],[45,-32],[32,5],[32,13],[46,-8],[33,25],[23,31],[7,25],[11,14],[44,0],[28,2],[21,37],[18,16],[32,3],[23,0],[62,-34],[38,-28],[40,-39],[23,-25],[16,-57],[27,-41],[21,-49],[6,-48],[17,-86],[18,-28],[22,0],[27,-12],[30,-9],[65,-64],[23,-2],[18,-15],[3,-30],[-7,-34],[8,-33],[21,-41],[16,-41],[21,-50],[6,-28],[16,-9],[23,14],[35,-11],[106,-28],[15,-4],[11,-29],[15,2],[18,2],[24,-4],[17,27],[14,24],[35,29],[29,40],[25,35],[18,5],[15,-16],[0,-31],[-18,-22],[-14,-27],[3,-27],[25,-3],[27,-41],[39,-95],[13,-20],[20,-19],[21,-8],[24,-14],[17,-40],[8,-35]],[[61387,50599],[-11,-5],[6,33],[30,43],[13,-10],[2,-10],[-1,-8],[-5,-9],[-34,-34]],[[61634,54134],[-34,-102],[-41,-121],[-76,-224],[-57,-118],[-44,-89],[-4,-16],[1,-99],[0,-243],[1,-486],[1,-485],[1,-485],[0,-243],[0,-82],[38,-102],[38,-99],[49,-132],[26,-71],[5,-24],[-2,-47]],[[61536,50866],[-40,-99],[-33,-45],[-45,-21],[-13,4],[-18,14],[-7,-24],[-5,-37],[-10,8],[-7,11],[4,-66],[5,-32],[-7,-44],[-22,-38],[-2,-32],[-47,-85],[-66,-10],[-35,-42],[-16,-34],[-12,-75],[5,-116],[-19,-88],[-3,-45],[-35,-57],[-15,-53],[-11,-54],[-10,-24],[-12,-120],[-16,-73],[-4,-25],[-4,-22],[-12,-43],[-8,-29],[-6,-20],[-41,-187],[-32,-85],[-24,10],[-17,-33],[-2,-15]],[[60894,49140],[-8,8],[-21,31],[-43,64],[-42,64],[-43,63],[-43,64],[-42,64],[-43,63],[-43,64],[-42,64],[-25,37],[-11,22],[-9,44],[-4,11],[-12,14],[-13,3],[-4,8],[0,21],[5,31],[16,58],[1,35],[-3,39],[-5,62],[-4,14],[-28,33],[-59,69],[-60,68],[-59,69],[-59,68],[-59,69],[-60,68],[-59,69],[-59,68],[-59,69],[-59,69],[-60,68],[-59,69],[-59,68],[-59,69],[-59,68],[-60,69],[-22,26],[-20,21],[-21,0]],[[59417,51265],[-1,99],[7,249],[-1,220],[6,110],[26,69],[12,51],[9,71],[14,57],[31,47],[5,26],[33,78],[20,101],[15,34],[18,32],[13,16],[22,17],[17,10],[3,8],[1,16],[-5,62],[7,21],[11,41],[13,39],[12,25],[7,25],[3,44],[1,31],[-1,51],[-3,116],[-14,96],[-9,108],[6,36],[-11,63],[-5,4],[-9,14],[-11,59],[-9,55],[-5,14],[-37,47],[-19,113],[-21,25],[-11,112],[-2,31],[12,112],[-2,25],[-12,24],[-35,24],[-28,46],[3,16],[2,17],[-14,11],[-44,191]],[[59437,54274],[56,114],[56,116],[73,147],[66,135],[57,116],[51,104]],[[70453,74567],[-16,5],[-29,1],[-23,-10],[-15,-17],[-28,-22],[-35,-8],[-44,-2],[-21,2],[-65,14],[-21,-5],[-21,-11],[-36,-12],[-20,-36],[-10,-34],[-6,-4],[-23,30],[-17,29],[-12,24],[-14,-1],[-52,-43],[-7,1],[-15,17],[3,41],[-1,26],[-17,14],[-35,3],[-12,15],[1,22],[3,21],[-4,16],[-9,13],[-18,-4],[-21,-16],[-16,-20],[-19,-9],[-24,-3],[-14,-12],[-17,-47],[-57,-10],[-19,11],[-15,34],[-19,53],[-11,7],[-19,6],[-30,-3],[-41,-22],[-10,18],[-11,6],[-9,-16],[-10,2],[-40,-4],[-52,2],[-29,10],[-19,0],[-37,-24],[-20,0],[-26,-5],[-5,82],[-14,54],[4,38],[9,53],[8,29],[16,-12],[19,-22],[12,6],[3,18],[-4,23],[-1,17],[7,23],[10,21],[66,35],[56,26],[29,-17],[56,-40],[29,-20],[20,-12],[18,-57],[11,3],[12,11],[7,14],[6,49],[26,28],[58,32],[4,19],[-1,11]],[[69710,75022],[9,9],[29,9],[58,9],[20,-6],[23,-20],[17,-19],[17,1],[13,4],[6,-5],[5,-17],[7,-15],[22,20],[20,27],[16,4],[15,10],[4,18],[12,29],[33,57],[17,9],[11,0],[0,-9],[6,-9],[29,-13],[8,15],[5,21],[-10,32],[0,14],[4,13],[5,7],[46,-31],[10,1],[21,17],[19,31],[7,24],[94,78],[7,14],[-1,10],[-40,19],[-17,-11],[-17,0],[-10,12],[-48,4],[-10,8],[-32,57],[-22,21],[-18,14],[-19,-2],[-23,-15],[-7,7],[-2,24],[1,29],[-5,32],[-14,8],[-17,-13],[-26,13],[-22,4],[-6,67],[-9,29],[-9,30],[-10,9],[-16,15],[-1,35],[-3,10],[-6,5],[-7,-4],[-10,-18],[5,-39],[-4,-39],[-6,-20],[-11,-14],[-13,-1],[-22,20],[-3,-119],[-4,-7],[-26,17],[-21,-7],[-32,7],[-23,20],[-18,5],[-28,17],[-22,21],[-13,80],[-13,28],[-12,6],[-48,-27],[-18,21],[-33,27],[-24,10],[-7,15],[1,18],[76,89],[30,61],[19,25],[27,18],[21,10],[11,55],[4,7],[15,4],[33,23],[55,49],[1,13],[-5,12],[-23,25],[-26,20],[-16,-10],[-9,-11]],[[69639,74783],[-1,12],[-10,6],[-27,6],[-19,9],[-4,0],[2,-11],[8,-20],[11,-21],[15,-3],[25,22]],[[69938,74855],[3,26],[-7,-1],[-8,-7],[-15,-7],[-4,-13],[11,-17],[13,-5],[7,24]],[[69779,74822],[2,8],[-10,42],[14,40],[-27,6],[-14,12],[-16,40],[-5,2],[-8,-11],[-4,-26],[3,-29],[12,-19],[7,-6],[1,-1],[0,-10],[-9,-46],[14,-6],[26,-1],[14,5]],[[78699,58017],[-11,-22],[-16,46],[0,12],[27,-36]],[[78623,58343],[-5,-5],[-5,0],[-5,8],[1,34],[3,20],[9,4],[2,-61]],[[79007,57840],[-46,75],[-90,26],[-10,33],[-9,6],[-8,-43],[-50,-41],[-21,25],[-15,30],[2,37],[15,30],[24,22],[12,76],[-19,97],[-16,28],[-18,23],[-18,-37],[-15,-61],[-16,-32],[-23,-7],[-33,2],[-13,93],[-4,79],[4,90],[5,53],[-32,74],[-2,70],[-15,37],[-4,-19],[0,-20]],[[78592,58586],[-4,15],[-51,206],[-8,95],[8,74],[5,25],[-14,38],[-21,44],[-36,58],[-2,91],[-8,108],[-11,36],[-17,66],[-9,55],[-3,145],[5,12],[26,4],[32,10],[6,24],[-6,19],[21,33],[30,72],[23,75],[17,48],[10,47],[34,67],[47,46],[31,10],[33,16],[32,23],[15,2],[39,-27],[22,-7],[22,0],[23,-3],[20,3],[48,19],[51,-15],[46,12],[56,22],[28,-14],[25,-22],[4,-44],[6,-20],[8,-16],[11,0],[15,31],[12,32],[4,6]],[[79217,60107],[0,-16],[6,-34],[11,-34],[11,-23],[18,-30],[12,-1],[39,28],[57,-41],[7,-21],[19,-41],[20,-30],[45,-2],[16,73],[-7,45],[-26,79],[-7,46],[8,8],[44,9],[7,9],[9,50],[12,-5],[24,-7],[26,35],[15,36],[8,-16],[9,-26],[10,-15],[18,-22],[21,-31],[12,-30],[10,-12],[26,9],[7,-1],[15,36],[11,20],[9,-5],[13,0],[27,47],[15,43],[9,11],[24,-21],[10,4],[14,59],[15,23]],[[79866,60313],[4,-31],[-12,-61],[-12,-54],[-23,-47],[-1,-36],[-9,-104],[4,-33],[5,-29],[8,-15],[20,-102],[18,-93],[18,-76],[4,-49],[-17,-122],[-20,-112],[2,-56],[9,-57],[8,-74],[4,-96],[-5,-62],[-9,-39],[-17,-40],[-14,-20],[-18,34],[-14,1],[-19,-10],[-14,-15],[-30,-59],[-34,-56],[-46,-15],[-18,-42],[-19,-6],[-37,-2],[-23,-10],[1,-21],[-2,-100],[0,-23],[-3,-6],[-17,-3],[-28,15],[-38,25],[-27,4],[-14,-44],[-8,-17],[-10,-2],[-11,-8],[-3,-20],[-1,-24],[5,-41],[2,-66],[-1,-45],[10,-29],[57,-96],[17,-24],[2,-14],[-10,-52],[9,-73],[-18,1],[-30,32],[-15,19],[-17,-15],[-6,2],[-12,36],[-15,37],[-16,3],[-34,-15],[-34,-10],[-13,0],[-6,-6],[-20,-55],[-8,9],[-35,21],[-31,8],[-7,-14],[4,-45],[7,-43],[-4,-19],[-18,-23],[-23,-41],[-14,-32],[-9,-8],[-35,1],[-35,-4],[-14,-30],[-13,-24],[-11,-6]],[[7838,45252],[-2,-9],[-5,3],[-2,12],[-1,12],[2,11],[2,-1],[4,-12],[2,-16]],[[6704,48601],[-6,-3],[-8,1],[-3,7],[-1,6],[3,0],[2,-1],[11,-1],[3,-4],[-1,-5]],[[1524,49150],[3,-8],[0,-4],[-1,1],[-5,2],[-1,5],[3,-3],[2,1],[-4,6],[-2,5],[-3,2],[0,3],[3,-1],[5,-9]],[[2163,49244],[1,-4],[4,1],[4,1],[-2,-4],[-8,-2],[-3,10],[4,8],[4,1],[1,-2],[-1,-2],[-1,0],[-3,-2],[0,-5]],[[2435,49271],[-3,-2],[-3,1],[-2,4],[0,6],[3,4],[3,-1],[3,-6],[-1,-6]],[[6957,49488],[-1,-4],[-4,5],[-6,9],[-6,9],[0,4],[8,5],[10,5],[2,-6],[-2,-9],[-1,-18]],[[2476,50036],[-1,-4],[-2,4],[1,6],[2,6],[1,-3],[-1,-9]],[[2306,50249],[9,-11],[7,-15],[4,-20],[-1,-5],[-5,0],[-6,6],[-5,9],[-2,2],[-1,2],[6,-1],[6,-9],[5,-4],[-1,10],[-5,18],[-4,6],[-4,5],[-5,3],[-4,-3],[-1,-2],[-1,5],[1,3],[1,4],[6,-3]],[[98547,51145],[2,-30],[-7,4],[-2,11],[-2,30],[-7,30],[8,-8],[6,-23],[2,-14]],[[97097,51339],[-3,-1],[-5,6],[0,7],[4,4],[5,-6],[-1,-10]],[[98474,51381],[-9,-16],[-4,14],[5,18],[-8,73],[-12,10],[-8,22],[4,0],[12,-20],[10,-9],[6,-48],[4,-44]],[[98064,52426],[15,-23],[-2,-15],[-5,-18],[-20,-46],[-6,4],[19,42],[8,27],[-11,21],[-5,-5],[-1,0],[-4,20],[4,0],[8,-7]],[[98065,52616],[-7,-2],[5,11],[31,13],[3,4],[5,-7],[0,-7],[-2,-3],[-16,-1],[-12,-6],[-7,-2]],[[98063,52832],[-10,-3],[7,9],[2,11],[-1,36],[4,-3],[1,-15],[1,-21],[-4,-14]],[[98060,52906],[1,-14],[-16,37],[-9,23],[0,10],[5,-6],[5,-12],[3,-9],[11,-29]],[[6294,52911],[46,-66],[-20,-5],[-48,32],[-44,66],[13,15],[7,-24],[20,-22],[12,46],[7,11],[-35,48],[14,-3],[33,-32],[-5,-66]],[[98011,53600],[-20,-22],[-6,12],[8,0],[14,22],[16,1],[-2,-11],[-10,-2]],[[98046,53645],[-17,-19],[-6,3],[21,27],[0,-3],[2,-8]],[[5739,54103],[22,-49],[-4,-24],[-16,2],[-7,8],[12,5],[2,9],[-6,14],[-7,10],[-5,0],[-2,-20],[-8,16],[5,15],[6,10],[8,4]],[[32630,61705],[-14,-12],[-12,17],[3,40],[11,1],[11,-18],[1,-28]],[[32602,61773],[-7,-8],[-13,35],[-20,10],[-18,21],[0,4],[0,11],[4,12],[9,9],[22,-28],[11,-36],[10,-17],[2,-13]],[[85090,70981],[-13,-13],[-11,8],[-3,6],[-14,33],[-4,17],[10,32],[38,53],[99,51],[18,2],[39,-21],[9,-42],[-7,-35],[-9,-24],[-46,-40],[-35,-19],[-71,-8]],[[85208,71626],[5,-27],[-22,5],[-12,26],[1,23],[14,3],[14,-30]],[[85064,71641],[-18,-9],[-10,20],[-7,6],[4,26],[29,51],[6,17],[27,-10],[10,-27],[-13,-42],[-28,-32]],[[85499,71782],[-3,-18],[-14,27],[14,30],[3,-39]],[[85047,71849],[-4,-14],[-12,4],[-12,40],[-5,31],[-13,18],[20,27],[25,-49],[1,-57]],[[85573,71892],[-3,-56],[-20,-3],[-11,36],[-13,-17],[-6,-1],[-10,45],[-2,36],[23,26],[14,-16],[20,-8],[8,-42]],[[85761,71888],[-27,-36],[-35,48],[-8,26],[26,39],[23,44],[15,3],[6,-124]],[[85115,72864],[-4,-38],[-18,25],[-5,82],[19,-24],[8,-45]],[[86365,73432],[-13,-18],[-15,18],[-2,18],[8,15],[18,10],[9,-14],[-5,-29]],[[85144,73580],[-2,-76],[-15,4],[-10,7],[-5,15],[-10,71],[11,29],[23,-23],[8,-27]],[[85659,74091],[68,-258],[64,-166],[56,-121],[79,-232],[23,-124],[2,-77],[13,-106],[-11,-60],[3,-96],[-5,-49],[-9,-36],[-1,-70],[3,-37],[1,-49],[6,-19],[9,-7],[14,18],[18,7],[-3,-59],[-22,-150],[-18,-109],[-25,-95],[-32,-87],[-38,-34],[-27,-13],[-51,-4],[-43,15],[-36,-11],[-15,-18],[-11,-31],[8,-48],[-1,-36],[-16,3],[-31,21],[-34,2],[-16,11],[-16,51],[-17,-2],[-29,-31],[-44,-6],[-15,-17],[-5,-21],[6,-26],[22,-35],[-7,-36],[-23,-18],[-19,44],[-12,43],[-13,2],[-20,-12],[-4,-46],[10,-32],[15,-36],[-22,-42],[-5,-30],[-16,-21],[-42,47],[6,34],[18,33],[3,34],[-6,20],[-61,-86],[-37,-96],[-19,7],[-9,25],[-11,10],[-40,-63],[-8,-49],[-14,-2],[-7,21],[0,45],[-7,37],[-41,55],[-19,49],[10,27],[34,-15],[28,2],[-6,23],[-9,11],[19,12],[15,27],[-13,7],[-19,-15],[-16,7],[-6,63],[-20,65],[-10,63],[19,36],[10,56],[18,81],[9,27],[25,19],[9,21],[-14,11],[-22,9],[1,24],[15,12],[16,26],[32,32],[10,59],[-9,15],[-20,14],[5,30],[8,23],[-3,14],[-24,38],[-16,36],[5,40],[-4,60],[2,51],[-1,28],[-11,62],[-5,63],[-16,-10],[-12,-15],[-44,22],[-14,1],[-5,47],[15,57],[38,50],[21,6],[16,22],[26,7],[30,-34],[27,-7],[15,-59],[9,-12],[2,21],[22,26],[5,19],[-4,11],[-25,10],[-23,73],[-3,32],[-9,20],[13,59],[-26,67],[-13,21],[2,59],[-14,39],[-8,21],[-4,36],[4,16],[12,6],[3,15]],[[85175,73606],[9,11],[0,16],[0,51],[25,36],[34,73],[17,40],[20,38],[22,25],[22,11],[35,5],[66,-4],[13,4],[46,4],[11,-7],[33,-4],[38,5],[18,11],[18,18],[15,33],[15,62],[17,48],[10,9]],[[55989,76179],[-48,-16],[-16,-19],[-10,-33],[-3,-17],[-8,-1],[-14,17],[-18,27],[-23,-2],[-78,-58],[-8,-30],[-1,-66],[-6,-18],[-8,-11],[-32,7],[-4,4]],[[55573,76351],[2,6],[5,43],[-7,31],[-10,27],[7,16],[21,0],[17,-3],[7,25],[36,17]],[[55651,76513],[34,17],[5,12],[-8,27],[5,16],[41,47],[7,21],[3,17],[-6,17],[-8,28],[4,12],[22,16],[17,18],[10,2],[7,-14],[0,-14],[6,-23],[12,-12],[22,-21],[25,-14],[19,-28],[27,-50],[4,-25],[24,-22],[22,-25],[-4,-46],[76,-40],[17,0],[8,-7],[0,-11],[-6,-32],[-31,-99],[-3,-21],[-22,-21],[-3,-13],[6,-27],[6,-19]],[[63409,68907],[-16,-13],[-10,6],[-11,31],[-17,77],[10,29],[-1,12],[2,9],[5,6],[6,36],[7,12],[12,-25],[33,-88],[0,-37],[-2,-14],[-18,-41]],[[63456,68284],[-49,-1],[-61,-2],[-49,-1],[-56,-1],[-24,54],[-8,60],[-9,61],[-25,88],[-82,21],[-43,11],[-72,17],[-53,12]],[[63327,69114],[-2,-21],[9,-64],[20,-69],[17,-56],[2,-27],[-15,4],[-12,11],[-22,11],[-42,-75],[-26,-40],[0,-14],[34,-16],[25,1],[17,11],[15,-18],[10,-46],[4,-37],[23,-133],[19,-45],[24,-80],[9,-41],[5,-35],[15,-51]],[[78368,64734],[15,-55],[33,-61],[40,-87],[12,-40],[26,-31],[8,-30],[6,-46],[3,-35],[5,-20],[10,-8],[12,9],[9,18],[7,51],[5,5],[8,-41],[9,-8],[11,-5],[9,-18],[3,-32],[-3,-32],[-11,-37],[-6,-38],[-4,-59],[-6,-41],[9,-37],[61,-179],[30,-29],[70,-35],[25,-25],[23,-23],[22,11],[21,54],[25,30],[48,46],[13,2],[26,-18],[43,-54],[31,-50],[19,-26],[15,-24],[-2,-27],[-12,-26],[-15,-15],[-20,-25],[-11,-25],[7,-10],[29,-6],[34,-23],[10,-26],[2,-23],[4,-37],[6,-11],[32,6],[10,-8],[11,-19],[11,-50],[0,-37],[-23,-41],[-8,-25],[-4,-39],[-16,-47],[-44,-78],[-11,-5],[-80,43],[-37,-2],[-17,-2],[-9,-2],[-5,-16],[10,-48],[4,-47],[-10,-35],[-27,-32],[-10,-15],[-1,-20],[7,-21],[25,-22],[28,-20],[94,-122],[20,-29],[26,-42],[29,-33],[77,-43],[34,-29],[9,-16],[-1,-19],[-9,-26],[-7,-44],[0,-26],[8,-26],[13,-39],[31,-59],[17,-26],[18,-6],[16,-15],[17,-44],[19,-54],[3,-38],[8,-48],[18,-56],[24,-54],[35,-66],[19,-47],[9,-19],[74,-114],[17,-42],[26,-81],[11,-12],[10,-16],[7,-45],[2,-32],[3,-98],[14,-29],[12,-36],[5,-26],[11,-19],[12,-4],[15,22],[11,20],[5,-6],[12,-68],[10,-25],[20,-24],[19,-19],[41,-82],[22,-30],[15,-10],[13,-14],[3,-26],[-5,-27],[-8,-17],[-48,-48],[-6,-21],[6,-31],[12,-40],[13,-34],[17,-34],[33,-55],[29,-42],[16,-47],[9,-32],[-6,-37],[-12,-42],[-9,-35],[-17,-20],[-4,-24],[7,-37],[5,-26],[-3,-31],[2,-65]],[[79217,60107],[17,12],[27,28],[22,32],[15,33],[6,35],[1,41],[6,105],[7,51],[-4,63],[-12,50],[0,74],[4,36],[2,24],[17,30],[12,43],[6,57],[1,40],[-5,25],[-17,24],[-28,23],[-17,28],[-7,35],[0,30],[9,26],[-21,29],[-51,32],[-28,39],[-6,44],[-21,59],[-36,73],[-19,104],[-2,137],[4,111],[16,128],[-21,93],[-24,49],[-32,36],[-31,52],[-29,67],[-35,100],[-41,131],[-28,59],[-14,-14],[-30,13],[-45,38],[-39,20],[-34,3],[-22,-8],[-10,-21],[-1,-19],[9,-20],[-5,-15],[-17,-11],[-14,-22],[-16,-48],[-11,-63],[-17,-25],[-26,-5],[-25,-18],[-25,-31],[-12,-23],[1,-16],[-5,-4],[-12,9],[-6,21],[1,33],[-13,22],[-26,11],[-30,36],[-33,59],[-23,32],[-13,4],[-19,-24],[-24,-51],[-20,-20],[-16,11],[-12,-18],[-9,-47],[-15,-36],[-35,-40],[-2,-5],[-39,-54],[-32,-54],[-37,-72],[-17,-12],[-17,18],[-24,18],[-14,25],[26,122],[31,137],[9,62],[1,46],[-3,38],[-12,38],[-12,31],[-1,20],[4,21],[12,32],[17,48],[15,101],[18,106],[-1,65],[-15,70],[-8,67],[6,92],[-2,35],[-16,18],[-53,18],[-16,-3],[-14,-12],[-14,-25],[-17,-15],[-33,-9],[-31,31],[-26,53],[-7,64],[20,76],[13,62],[8,53],[-1,26],[-6,26],[-7,3],[-17,33],[-16,57],[-16,27],[-14,-5],[-13,-22],[-13,-39],[-9,-15],[-7,7],[2,34]],[[77811,63546],[2,32],[15,125],[18,81],[22,38],[22,16],[24,-6],[20,7],[16,19],[-1,12],[-19,3],[-8,21],[4,41],[8,26],[13,13],[13,40],[12,70],[15,35],[18,1],[30,30],[42,59],[16,57]],[[59752,70900],[13,44],[13,57],[13,77],[24,64],[49,217],[28,87],[10,125],[43,109],[33,32],[15,31],[0,47]],[[59993,71790],[48,0],[32,2],[9,27],[24,-12],[14,-26],[-13,-27],[-17,-30],[1,-8],[13,-3],[22,-17],[14,-19],[22,-122],[-14,-50],[-22,-44],[-9,-4],[-19,-23],[-16,-30],[-5,-19],[1,-18],[22,-23],[1,-9],[-5,-7],[-18,5],[-23,2],[-14,0],[-16,-4],[-20,-28],[-9,-18],[-5,-11],[-8,-38],[9,-25],[15,-15],[2,-7],[-3,-13],[-16,-16],[-11,-20],[-3,-20],[-13,-19]],[[47904,54349],[-32,9],[-94,82],[-73,47],[-242,267],[-68,108],[-77,160],[-173,322],[-39,51],[-50,25],[-31,28],[-21,29],[-18,90],[-43,53],[-80,75],[-60,126]],[[46803,55821],[15,26],[21,82],[31,80],[28,47],[22,48],[24,38],[34,43],[52,114],[12,13],[8,79],[13,101],[15,31],[36,19],[8,17],[12,71],[8,82],[1,18]],[[56938,64513],[0,-287],[0,-287],[0,-287],[0,-287],[-1,-1],[-1,-1],[0,-1],[-1,-1],[-69,0],[-68,0],[-69,0],[-68,0],[0,-72],[0,-72],[0,-72],[0,-72]],[[56661,63073],[-133,137],[-134,136],[-133,136],[-133,136],[-133,137],[-133,136],[-133,136],[-133,137],[-133,136],[-133,136],[-133,136],[-133,137],[-133,136],[-133,136],[-134,137],[-133,136],[-92,94],[-99,-92],[-77,-72],[-103,-95]],[[54160,65089],[-117,-123],[-91,-94],[-4,0],[-4,3],[-94,160],[-73,125],[-33,35],[-138,64],[-137,64],[-145,67]],[[52644,69256],[33,30],[47,35],[24,26],[11,22],[35,89],[18,49],[25,68],[11,47],[1,44],[-4,52],[-20,126],[-16,123],[13,47],[10,23],[22,57],[8,12],[47,18],[19,38],[15,48],[3,25],[21,27],[25,26],[15,34],[49,53],[46,49],[52,51],[41,39],[9,34],[-1,30],[-22,68],[0,80],[2,67],[2,39],[10,109],[0,16]],[[53195,70957],[43,-37],[43,-14],[130,-136],[40,-17],[91,-16],[107,56],[40,10],[71,-52],[31,-15],[52,-4],[89,-47],[22,-17],[52,-75],[25,-23],[184,-69],[25,-46],[26,-87],[1,-109],[14,-79],[23,-102],[28,-72],[30,-61],[35,-37],[81,-56],[91,-21],[92,-8],[158,-76],[133,-89],[33,-44],[67,-43],[134,-208],[74,-72],[52,-14],[46,13],[83,72],[34,43],[84,180],[27,94],[11,66],[-3,67],[-10,61],[-23,63],[-17,84],[-9,151],[13,104],[16,63],[25,64],[69,122],[70,86],[122,113],[71,1],[30,12],[58,80],[24,3],[33,-20],[97,6],[42,-22],[51,-50],[64,-31],[45,-30],[48,-40],[11,-98],[-5,-29],[-1,-38],[50,-68],[142,-32],[28,-18],[39,-52],[25,-16],[97,-7],[57,11],[54,-18],[20,-18],[21,-40],[25,-99],[10,-33]],[[33084,59805],[-15,-61],[-31,38],[-3,48],[3,28],[18,55],[15,36],[10,12],[6,-47],[-3,-109]],[[72187,57056],[8,-43],[-23,29],[-15,25],[-6,20],[32,-22],[4,-9]],[[72213,57390],[-17,-6],[-14,38],[-3,17],[3,11],[4,6],[5,-2],[6,-36],[16,-28]],[[72217,57495],[26,-3],[29,2],[20,-8],[34,-89],[93,-159],[51,-162],[4,-35],[7,-30],[12,-9],[11,-14],[50,-156],[6,-31],[-1,-34],[3,-25],[14,-13],[16,-6],[11,-24],[14,-124],[0,-39],[3,-17],[64,-193],[4,-24],[-1,-18],[2,-15],[12,-34],[20,-92],[9,-21],[12,-81],[1,-154],[-4,-69],[-12,-84],[-14,-81],[-16,-59],[-21,-50],[-71,-106],[-21,-22],[-93,-66],[-68,-63],[-64,-17],[-63,34],[-48,83],[-24,122],[-17,127],[-25,141],[-18,435],[-9,122],[-15,155],[2,67],[10,64],[0,-141],[9,-17],[7,18],[7,146],[5,62],[25,161],[1,29],[-5,60],[1,31],[38,113],[9,66],[5,67],[-2,73],[-7,72],[31,-23],[17,-25],[17,-17],[14,9],[16,0],[-11,39],[-36,36],[-59,22],[-18,29],[-7,25],[3,29],[5,11]],[[57982,34503],[-25,-14],[-4,-2],[-16,4],[-21,-4],[-17,-8],[-13,-2],[-21,-41],[-39,-111],[-10,-23],[-3,-43],[-9,-34],[-11,-27],[-11,-6],[-32,10],[-41,14],[-24,33],[-22,44],[-11,32],[-12,17],[-4,10],[-17,15],[-6,7],[-6,6],[-6,21],[-4,18],[1,51],[-12,31],[-20,52],[-13,42],[-17,59],[-11,49],[-11,52],[1,22],[11,15],[31,26],[24,20],[18,37],[18,55],[10,33],[9,15],[10,24],[17,51],[20,58],[21,61],[26,18],[36,21],[35,53],[41,46],[66,49],[31,12],[12,8],[7,-10],[8,-28],[12,-24],[26,-41],[11,-9],[27,-61],[29,-42],[33,-48],[23,-24],[12,-6],[9,-43],[10,-31],[6,-30],[-2,-29],[-10,-70],[-15,-72],[-13,-30],[-15,-19],[-15,-28],[-5,-58],[-7,-68],[-19,-28],[-15,-18],[-21,-23],[-45,-36]],[[55821,83685],[-16,5]],[[55805,83690],[32,66],[12,43],[8,61],[8,20],[0,-28],[-3,-46],[-20,-80],[-21,-41]],[[56523,82914],[-2,11],[1,27],[0,42],[-8,37],[-23,33],[-24,23],[-31,24],[-23,10],[-13,3],[-3,13],[-4,12],[-11,11],[-23,14],[-20,3],[-16,-23]],[[56323,83154],[-11,28],[-13,51],[2,40],[7,40],[33,119],[-1,18],[-25,34],[-30,24],[-17,51],[-61,3],[-58,-3],[-18,2],[-55,22],[-54,34],[-35,20],[-30,23],[-16,23],[-26,-6],[-17,0]],[[55898,83677],[0,4],[-9,42],[10,64],[-19,93],[-30,113],[-2,121],[-2,27]],[[55846,84141],[74,68],[94,73],[22,6],[86,43],[12,4],[78,-8],[62,-10],[51,1],[29,11],[26,-9],[20,-33],[22,4],[21,21],[116,-19],[26,0],[29,-3],[54,-19],[32,-18],[68,11],[30,0],[15,7],[47,49],[21,9],[19,8],[17,-7],[11,-42],[35,-72],[38,-13],[106,-27],[21,-15],[59,-64],[36,-31],[22,-25],[35,-49],[20,-35],[33,-27],[39,-18],[15,-3]],[[57597,84981],[33,-2],[11,-10],[8,-45],[37,-35],[35,-30],[9,-13],[2,-27],[-2,-30],[-4,-16],[-15,-19],[-12,-46],[-2,-44],[-20,-76],[5,-2],[41,14],[12,-8],[9,-17],[3,-47],[14,-22],[14,-34],[4,-26],[27,-31],[2,-20],[16,-72],[6,-41],[3,-31],[-8,-41],[-7,-27]],[[55846,84141],[-9,109],[5,217],[11,108],[51,63],[26,49],[15,65],[5,61],[10,49],[75,144],[60,15],[80,40],[90,33],[17,-42],[9,-32],[108,-117],[27,-40],[42,-135],[100,-68],[79,22],[34,33],[63,61],[28,45],[6,43],[-11,184],[-17,80],[6,50]],[[81534,64657],[6,-13],[0,-1],[-13,-11],[-4,-3],[-2,-1]],[[32497,62251],[-32,0]],[[32465,62251],[3,13],[14,14],[11,-2],[4,-5],[0,-20]],[[47587,67774],[-37,0],[0,-1],[1,-24],[8,-48],[3,-40],[-4,-25],[-4,-32],[2,-31],[6,-33],[6,-34],[0,-23],[-11,-18],[-27,-9],[-31,-8],[-23,0],[-34,5],[-22,-1],[-19,0],[-16,-5],[-21,-22],[-23,-35],[-29,-46],[-17,-29],[-23,-6],[-23,0],[-22,23],[-14,12],[-10,-1],[-15,-16],[-19,-12],[-17,0],[-29,24],[-34,34],[-20,17],[-29,6],[-29,11],[-20,-5],[-26,0],[-34,-24],[-29,-16],[-31,-18],[-36,-16],[9,-51],[12,-28],[0,-35],[-6,-30],[-17,-28],[-20,-37],[-11,-29],[-12,-39],[-8,-24],[-15,-37],[-13,-47],[-4,-30],[-6,-33],[-10,-11],[-35,-9],[-22,-11],[-19,-12],[-8,-20],[-1,-3],[-5,-40],[0,-29],[-6,-23],[-8,-57],[-11,-53],[-9,-69],[-8,-57],[-11,-93],[-11,-86],[-14,-81],[-11,-51],[-9,-29],[-19,-35],[-17,-22],[-19,-30],[-22,-28],[-31,-35],[-25,-29],[-10,-13],[-12,-16],[-20,-40],[-16,-57],[-11,-47],[-20,-74],[-14,-41],[-8,-22],[-22,-23],[-25,-18],[-28,-23],[-22,-23],[-31,-23],[-19,-23],[-14,-35],[-11,-40],[-14,-58],[-11,-63],[-6,-40],[-16,-139],[-6,-80],[-6,-52],[-8,-64],[-5,-97],[0,-81],[-6,-46],[-3,-35],[-14,-40],[-11,-29],[-19,-40],[-17,-23],[-5,-23],[-17,-29],[-17,-46],[-14,-29],[3,-23],[3,-40],[-8,-41],[-9,-46],[-22,-57],[-25,-29],[-36,-6],[-50,0],[-39,6],[-47,0],[-42,11],[-39,12],[-47,6],[-33,0],[-42,-12],[-108,0],[-42,-6],[-61,-23],[-15,-5]],[[45276,64182],[21,276],[38,149],[30,66],[47,35],[43,150],[16,138],[28,64],[9,50],[-11,38],[27,75],[32,114],[15,73],[38,113],[5,25],[-4,29],[-15,-25],[-16,-41],[-19,-33],[8,40],[15,60],[34,62],[53,69],[110,234],[42,41],[37,98],[14,88],[4,200],[13,106],[24,83],[29,150],[22,67],[15,137],[16,53],[28,24],[40,69],[60,42],[71,89],[33,53],[23,79],[24,158],[42,166],[22,125],[1,2],[37,66],[26,83],[43,37],[90,18],[134,69],[120,104],[34,42],[37,83],[60,108],[114,130],[52,72],[79,182],[53,150],[44,97],[30,86],[21,87],[12,140],[-8,55],[-33,89],[-23,24],[-6,42],[12,75],[0,128],[7,204],[37,165],[91,217],[17,88],[10,142],[1,50],[114,200],[67,154],[23,37],[59,70],[205,154],[116,109],[68,80],[40,94],[112,371],[110,521],[9,61],[49,17],[35,7],[28,19],[34,40],[33,-16],[-16,-27],[0,-64],[23,-75],[41,-85],[75,-107],[58,-43],[83,-26],[96,47],[54,1],[27,20],[28,-30],[55,-9],[52,16],[40,45],[25,51],[4,-25],[1,-28],[8,-16],[15,-66],[9,-25],[30,4],[26,-13],[59,6],[57,-11]],[[52066,77044],[-17,-10]],[[57836,78024],[-14,36],[-14,32],[-10,17],[4,8],[12,9],[8,11],[-1,38],[-6,44],[-6,21],[0,33],[-4,51],[5,96],[23,120],[12,60],[-6,33],[5,76],[-10,38],[-15,50],[-22,107],[-27,37],[-33,41],[-15,31],[-9,34],[-20,34],[-23,31],[-27,78],[-14,35],[-5,10],[-31,50],[-16,45],[-9,37],[-4,34],[-22,68],[-20,51],[-19,36],[-9,26],[-22,32],[-32,26],[-20,4],[-26,-2]],[[57394,79642],[6,20],[57,53],[15,-8],[30,-3],[61,2],[30,36],[19,-10],[15,16],[25,20],[4,-5],[3,-3],[39,-9],[29,-19],[20,-29],[20,-19],[21,-7],[11,-14],[3,-23],[19,-11],[37,1],[16,-15],[-6,-30],[4,-9],[13,10],[10,-9],[5,-22],[6,-11],[19,35],[19,-3],[48,-15],[26,-71],[16,-26],[14,-10],[17,11],[16,13],[9,-6],[19,-47],[5,-62],[0,-25],[-7,-42],[-10,-45],[-8,-29],[3,-24],[7,-19],[12,-7],[37,-39],[13,-28],[21,-20],[15,-1],[8,-12],[3,-14],[-3,-35],[-8,-33],[1,-21],[13,-25],[2,-30],[1,-18],[7,-15],[34,-32],[44,-31],[11,-27],[7,-34],[-2,-57],[-3,-49],[57,-67],[-6,-12],[-9,-14],[-55,-10],[-11,-6],[-24,50],[-13,7],[-11,-19],[-14,-10],[-17,5],[-18,16],[-9,11],[-7,1],[-11,-11],[-15,5],[-9,12],[-14,-43],[-9,-9],[-5,2],[-1,72],[-4,11],[-11,2],[-27,-17],[-26,-23],[-8,-19],[1,-36],[3,-43],[18,-64],[-10,-28],[-7,-45],[-27,-41],[-31,-24],[-2,-49],[-17,-33],[-30,-34],[-19,-40],[5,-28],[1,-26],[-3,-18],[-1,-14],[-8,-6],[-45,-5],[-12,-8],[-15,-19]],[[63871,42106],[-32,-106],[9,88],[36,128],[11,10],[-24,-120]],[[63428,44145],[0,-21],[-36,8],[-6,72],[18,3],[4,29],[11,4],[11,-64],[-2,-31]],[[63760,44681],[13,-60],[15,-58],[46,-140],[20,-53],[17,-57],[8,-115],[30,-177],[28,-266],[8,-273],[9,-126],[21,-118],[36,-122],[11,-136],[-21,-140],[-32,-132],[-8,-25],[-15,-34],[-6,1],[-26,34],[-20,56],[-26,132],[-10,66],[-10,11],[-31,-6],[-22,-41],[-4,-27],[5,-74],[8,-66],[4,-68],[0,-85],[9,-26],[12,-22],[12,-55],[3,-133],[-8,-67],[-22,-58],[2,-32],[8,-33],[-8,-19],[-29,-25],[-11,-22],[-16,-59],[-25,-120],[-3,-61],[16,-186],[-5,-132],[-32,-252],[-18,-119],[-26,-143],[-40,-189],[-39,-237],[-34,-243],[-25,-147],[-28,-144],[-38,-255],[-33,-258],[-48,-285],[-68,-317],[-7,-42],[-14,-162],[-15,-140],[-18,-140],[-37,-230],[-5,-71],[-8,-68],[-36,-144],[-16,-54],[-10,-57],[-6,-73],[-11,-69],[-27,-129],[-39,-110],[-27,-40],[-58,-59],[-30,-11],[-65,-2],[-64,-33],[-66,-64],[-63,-73],[-25,-35],[-27,-20],[-83,-4],[-26,16],[-84,120],[-32,20],[-62,17],[-18,10],[-17,15],[-25,63],[-50,54],[-12,16],[-7,37],[-5,39],[-13,45],[-10,84],[-16,59],[-45,104],[-5,33],[-4,110],[2,75],[-5,136],[5,65],[16,58],[-6,62],[-17,66],[-6,68],[-13,62],[-48,112],[-11,55],[-8,57],[-18,178],[-2,62],[3,130],[7,68],[11,47],[3,35],[8,30],[11,24],[7,28],[18,168],[23,37],[33,21],[27,44],[16,59],[15,121],[42,121],[15,63],[34,96],[30,135],[9,64],[7,65],[8,143],[5,71],[-1,70],[-17,72],[-41,132],[-1,24],[3,98],[-4,70],[-15,71],[-19,66],[-19,124],[-10,205],[2,74],[-5,65],[-14,63],[10,109],[123,397],[4,47],[-5,121],[2,71],[5,26],[9,15],[21,7],[99,18],[13,12],[25,33],[34,65],[15,19],[14,-7],[8,-28],[11,-15],[40,29],[16,1],[16,-5],[7,27],[4,36],[6,26],[11,14],[51,8],[33,11],[43,25],[9,-5],[34,-91],[11,-8],[13,-4],[12,17],[-28,48],[-4,26],[1,31],[15,65],[25,50],[56,76],[57,88],[17,6],[14,-14],[11,-103],[-1,-17],[9,-3],[10,13],[10,42],[0,34],[-7,34],[-4,28],[0,26],[29,61],[23,58],[10,70],[10,32],[24,36],[7,-6],[6,-29],[3,-31],[-6,-31],[-9,-31],[-4,-40],[14,-8],[13,10],[19,73],[21,70],[13,36],[16,25],[27,-5],[26,-15],[-43,73],[-10,101],[50,174],[1,37],[7,11],[3,14],[-26,59],[-5,29],[4,44],[12,40],[12,27],[16,11],[13,-15],[28,-49],[19,-7],[23,46],[18,58],[28,40],[32,25],[49,91],[32,191],[2,56],[-7,67],[-11,65],[-19,80],[5,18],[27,-11],[9,11],[28,71],[48,136],[16,0],[13,-25],[5,-37],[10,-28],[32,-65],[16,-48]],[[70393,53704],[-6,-1],[-4,10],[1,14],[5,10],[7,1],[4,-9],[-2,-14],[-5,-11]],[[70419,54242],[-4,-6],[-5,2],[-2,7],[3,10],[3,13],[3,14],[4,7],[3,-2],[0,-8],[-2,-11],[-1,-14],[-2,-12]],[[24532,62601],[-31,-13],[-6,13],[63,58],[11,-2],[4,-8],[-33,-28],[-8,-20]],[[19190,62638],[-17,-12],[-24,36],[6,27],[14,19],[14,-35],[7,-35]],[[25850,63538],[-15,-18],[-7,64],[11,61],[14,36],[28,4],[18,12],[2,-16],[-15,-48],[-36,-95]],[[25913,64077],[4,-28],[-4,4],[-7,21],[-4,26],[4,1],[3,-9],[4,-15]],[[20416,64291],[-8,-47],[-21,19],[-8,30],[-1,48],[11,9],[17,-21],[4,-14],[6,-24]],[[19498,65755],[-6,-3],[-14,31],[-6,75],[3,8],[27,-93],[-1,-11],[-3,-7]],[[18972,65894],[-3,-27],[-84,108],[20,10],[23,-8],[44,-83]],[[19287,66246],[8,-65],[-15,10],[-18,35],[-13,44],[1,20],[3,4],[26,-26],[8,-22]],[[18873,65982],[-6,-7],[-24,67],[-3,46],[-10,19],[-24,15],[21,93],[17,193],[8,-35],[-18,-195],[1,-26],[8,-24],[10,-40],[1,-44],[16,-40],[3,-22]],[[19139,66831],[3,-20],[-2,-6],[-11,14],[-19,-86],[-6,-8],[12,118],[12,17],[13,3],[-2,-32]],[[18008,68012],[-4,-19],[-47,39],[26,67],[-4,70],[12,15],[10,-24],[13,-89],[-6,-59]],[[17155,68514],[-12,-22],[-32,120],[0,29],[9,15],[15,-3],[0,-30],[13,-26],[5,-24],[2,-59]],[[18832,68551],[-21,-136],[-21,2],[-44,43],[-5,27],[17,157],[13,21],[39,21],[6,-19],[4,-47],[12,-69]],[[18568,68578],[-2,-10],[-29,35],[-64,122],[-23,61],[-4,28],[2,64],[22,-8],[25,-42],[12,-40],[0,-45],[48,-21],[7,-98],[6,-46]],[[18140,70106],[-9,-2],[-17,26],[1,25],[4,2],[17,-21],[6,-19],[-2,-11]],[[23015,66797],[-5,-119],[-17,-97],[-55,-203],[-24,-126],[-44,-360],[-14,-236],[-3,-111],[-4,-15],[4,-17],[-10,-245],[5,-210],[-3,-32],[-17,-63],[-11,-88],[5,-39],[-1,-27],[17,-133],[5,-100],[50,-171],[28,-60],[34,-51],[13,-30],[-6,-72],[-14,-37],[-6,-59],[-7,49],[2,62],[11,34],[1,25],[-21,26],[-37,86],[-45,153],[32,-244],[11,-39],[9,-16],[14,-17],[4,-27],[0,-19],[40,-170],[45,-175],[3,-48],[18,-58],[114,-246],[70,-184],[25,-174],[15,-54],[7,-75],[46,-83],[14,-54],[24,-30],[20,-90],[38,-53],[-9,-1],[-33,27],[2,-18],[28,-37],[54,-37],[13,0],[-21,19],[-18,26],[6,4],[38,-32],[105,-11],[47,-75],[60,-32],[32,-96],[38,-100],[24,-5],[19,0],[56,17],[88,63],[30,30],[59,42],[90,8],[28,-12],[67,26],[33,32],[11,29],[5,22],[62,30],[13,6],[63,6],[31,11],[35,7],[26,-45],[0,-22],[-17,-21],[8,-20],[31,-34],[56,-13],[19,5],[26,49],[46,48],[-1,55],[-9,31],[-13,2],[-3,17],[9,40],[-2,14],[-29,-39],[-6,0],[3,18],[6,15],[83,85],[22,35],[28,31],[60,115],[13,218],[12,38],[40,67],[4,20],[3,45],[-1,114],[2,90],[-2,102],[7,90],[7,26],[23,145],[47,64],[82,76],[19,13],[261,80],[37,20],[45,52],[33,17],[60,-1],[18,7],[4,7],[0,7],[11,7],[34,-7],[65,-31],[24,-8],[58,-36],[63,-15],[10,6],[8,11],[6,22],[-6,18],[-6,-1],[-11,-10],[-13,-1],[-25,15],[5,13],[25,-1],[17,6],[24,22],[26,-16],[35,-75],[24,-24],[2,-108],[4,-19],[8,-29],[-12,-84],[-13,-69],[-17,-57],[-37,-89],[-45,-71],[-56,-159],[-13,-75],[1,-60],[9,-57],[-3,-21],[-6,-22],[-12,2],[-22,-28],[-28,-82],[-1,-25],[13,-23],[16,11],[21,1],[12,7],[12,-2],[-3,-47],[-13,-33],[-8,-11],[-15,-5],[-17,-19],[-9,-18],[1,-54],[9,-4],[20,40],[12,-2],[2,-17],[-26,-139],[-16,-143],[-23,-82],[-8,-121],[-11,-51],[-14,-51],[-8,3],[-21,96],[-23,25],[-4,23],[12,117],[-6,65],[-11,-3],[-15,-35],[-19,-31],[0,-45],[-22,-73],[-6,-25]],[[24379,60221],[-8,13],[-74,157],[-78,172],[-30,56],[-29,43],[-40,79],[-104,174],[-54,80],[-50,95],[-45,53],[-45,34],[-20,20],[-17,26],[-10,2],[-5,-35],[16,-18],[19,-15],[14,-1],[16,-13],[46,-48],[7,-25],[-130,97],[-53,8],[-6,16],[27,50],[-9,18],[-9,3],[-28,-35],[-11,-2],[-2,23],[1,21],[-18,32],[-11,-1],[-10,-22],[-25,-42],[1,-17],[49,-18],[16,-10],[-3,-11],[-42,0],[-51,-19],[-92,-116],[-86,-50],[-122,-113],[-54,-5],[-29,-18],[-82,43],[-105,105],[-158,33],[-107,138],[-106,57],[-67,132],[-41,6],[-26,21],[-96,48],[-95,32],[-93,115],[-61,37],[-52,46],[-115,79],[-43,43],[-41,68],[-66,69],[-28,59],[-32,21],[-45,109],[-23,46],[-20,22],[-21,8],[-62,-9],[-91,48],[-43,12],[-88,72],[-118,80],[-39,91],[-32,86],[-60,112],[-37,49],[-64,57],[-36,46],[-55,35],[-93,91],[-29,77],[-18,68],[-49,83],[-55,156],[-14,57],[-10,88],[-13,51],[-15,39],[8,29],[27,36],[46,8],[33,39],[4,32],[-2,19],[-21,49],[-26,13],[-20,1],[-5,18],[15,20],[18,48],[25,58],[18,53],[4,75],[-3,76],[7,63],[-62,74],[-7,31],[-19,84],[-34,98],[1,195],[-41,173],[-42,86],[-22,30],[-59,134],[-46,77],[-46,146],[-45,93],[-58,156],[-41,78],[-189,262],[11,0],[55,-64],[9,5],[2,32],[-7,37],[-10,9],[-15,-8],[-20,8],[-10,12],[-29,8],[-38,44],[-16,45],[-1,52],[-54,110],[-20,61],[10,-4],[14,-25],[15,-7],[17,0],[12,10],[-4,18],[-12,15],[-78,58],[-26,41],[-64,68],[-15,24],[-10,65],[-16,3],[-13,-18],[-38,-18],[-10,21],[-1,20],[27,22],[24,61],[0,22],[-14,-25],[-20,-28],[-21,-15],[-32,-13],[-16,9],[-14,14],[-22,54],[-11,176],[20,61],[23,61],[20,35],[11,-27],[12,-3],[-9,31],[-19,28],[-7,29],[-1,26],[-9,48],[-57,102],[-54,-8],[-22,3],[-20,39],[-17,65],[-9,55],[-1,29],[-5,29],[-93,48],[-28,41],[-27,51],[-12,42],[-11,32],[-9,54],[-7,63],[11,82],[13,39],[-64,30],[-24,1],[-21,-16],[-18,21],[-37,24],[-45,85],[-53,155],[-57,50],[-19,53],[-24,49],[-20,60],[-4,26],[-6,15],[-29,42],[-32,71],[-9,57],[-8,87],[-22,31],[-21,14],[-5,41],[2,24],[-7,44],[-44,105],[-23,87],[-12,27],[-11,39],[-6,81],[-18,101],[-36,120],[-29,82],[-15,82],[7,83],[-5,51],[-4,12],[3,17],[10,-9],[8,15],[-1,53],[-10,16],[-29,17],[-12,11],[-70,22],[-39,30],[-3,70],[-19,32],[-16,20],[-52,41],[-9,-21],[-7,-39],[-21,-8],[-19,-2],[-32,27],[-79,103],[-17,17],[-25,9],[-12,16],[-53,55],[11,-29],[15,-30],[14,-88],[-16,-62],[-10,-220],[11,-44],[23,-70],[16,-112],[5,-82],[14,-66],[-4,-155],[5,-47],[22,-77],[41,-73],[9,-38],[53,-55],[33,-72],[65,-98],[20,-42],[58,-152],[2,-46],[11,-56],[33,12],[15,-42],[-2,-20],[4,-15],[17,3],[15,-11],[31,-166],[17,-22],[21,-10],[24,-18],[1,-42],[-1,-34],[21,-49],[-4,-66],[17,-56],[-3,-55],[7,-43],[50,-97],[62,-77],[13,-101],[26,-93],[25,-23],[27,-39],[-4,-40],[2,-24],[35,-73],[6,-94],[30,-61],[9,-4],[6,9],[-22,61],[-10,40],[-2,63],[8,8],[62,-99],[7,-74],[21,-42],[1,-56],[13,-34],[4,-49],[20,-80],[1,-112],[10,-82],[40,-125],[32,-26],[6,-61],[33,-159],[38,-87],[19,-73],[3,-45],[-14,-68],[-2,-47],[21,-143],[31,-73],[35,-18],[6,-10],[-3,-20],[12,-18],[13,23],[7,32],[-7,37],[-1,27],[6,19],[11,3],[67,-98],[11,-38],[25,-44],[23,-54],[9,-42],[19,-36],[9,-81],[46,-37],[25,-68],[2,-43],[-12,-110],[-11,-31],[-37,-47],[-27,-56],[-27,-34],[-27,-21],[-23,4],[-23,65],[-26,193],[-18,41],[-12,61],[-20,50],[-75,76],[-37,81],[-37,53],[-39,78],[-106,129],[-44,66],[-29,65],[-19,-1],[-14,-7],[-6,18],[-1,33],[-6,22],[-62,98],[-13,55],[-3,62],[14,162],[6,95],[-4,49],[-6,6],[-6,27],[-2,77],[-15,85],[-56,174],[-41,34],[-37,25],[-101,154],[-27,76],[-7,44],[-3,89],[-14,-52],[-19,-38],[-42,3],[-48,-43],[-29,40],[-15,46],[-24,55],[-26,11],[-17,2],[-31,68],[-26,21],[-36,9],[-32,34],[-9,38],[-5,53],[-12,32],[-49,62],[-39,69],[-38,45],[-11,36],[-1,25],[59,-7],[71,-27],[34,8],[21,25],[20,18],[3,-19],[-4,-37],[20,-33],[26,-27],[19,3],[-18,29],[-12,60],[5,22],[0,29],[-26,-6],[-4,15],[23,45],[25,120],[13,118],[-27,103],[-46,72],[-98,210],[-59,108],[-17,40],[-16,19],[-48,25],[-40,60],[-71,85],[-30,44],[-21,104],[-16,14],[5,71],[-7,127],[-12,32],[-38,31],[-9,86],[-2,82],[-8,57],[-65,96],[-3,46],[0,44],[-7,44],[-35,91],[-42,79],[-14,38],[-2,77],[-15,21],[6,5],[13,-2],[8,10],[1,54],[-63,84],[-18,116],[-34,61],[-8,23],[-18,109]],[[17464,70583],[80,12],[79,13],[80,12],[79,12],[80,13],[79,12],[80,12],[79,13],[32,6],[-18,-87],[-13,-32],[132,-86],[131,-85],[132,-85],[132,-85],[132,-86],[131,-85],[132,-85],[132,-86],[98,1],[98,0],[98,1],[99,0],[98,0],[98,1],[98,0],[98,1],[0,64],[1,65],[0,65],[0,65],[61,-1],[61,-1],[61,0],[61,-1],[61,-1],[61,0],[61,-1],[61,-1],[3,-1],[2,-2],[25,-49],[25,-78],[30,-54],[35,-30],[58,-90],[83,-150],[67,-100],[49,-50],[33,-43],[17,-36],[23,-78],[43,-181],[0,-83],[16,-78],[33,-102],[29,-60],[24,-18],[27,-36],[29,-54],[34,-36],[38,-19],[52,-48],[67,-79],[46,-40],[25,-1],[22,25],[18,52],[19,33],[18,15],[7,24],[-3,33],[12,74],[28,116],[33,62],[38,10],[25,21],[12,34],[21,3],[29,-26],[48,-17],[66,-8],[39,3],[12,13],[6,-1],[1,-14],[10,-6],[19,2],[17,-20],[21,-62],[73,-100],[7,-35],[25,-49],[47,-76],[27,-66],[6,-55],[24,-87],[42,-120],[19,-64],[-5,-9],[4,-34],[11,-58],[21,-49],[30,-40],[31,-72],[31,-104],[37,-79],[44,-54],[25,-51],[6,-46],[0,-40],[-7,-33],[3,-32],[12,-30],[4,-36],[-4,-51],[0,-15],[4,-11],[39,-88],[20,-71],[16,-112],[0,-1],[18,-68],[26,-28],[39,-10],[30,-23],[20,-37],[26,-22],[32,-8],[30,-24],[28,-41],[54,-27],[78,-13],[59,-34],[41,-53],[18,-11],[5,-1],[2,8],[3,15],[16,18],[38,11]],[[97120,55201],[-6,-17],[-6,1],[6,13],[4,18],[6,51],[14,19],[10,21],[-3,-22],[-15,-23],[-10,-61]],[[97659,55903],[11,-13],[20,1],[19,-32],[-7,2],[-10,14],[-10,6],[-12,-2],[-6,5],[-5,19]],[[97527,55954],[35,-29],[46,14],[-7,-9],[-17,-8],[-12,-8],[-8,0],[-9,3],[-29,21],[-17,27],[4,9],[14,-20]],[[96896,56053],[-4,-9],[-27,5],[-12,11],[1,9],[22,-8],[20,-8]],[[96357,58267],[-7,-4],[-5,4],[4,8],[8,1],[3,-2],[-3,-7]],[[55989,76179],[16,-3],[33,14],[21,21],[11,3],[14,8],[20,-2],[21,-8],[26,11],[26,19],[11,-4],[11,-17],[7,-4]],[[51174,62870],[0,-101],[0,-152],[0,-169],[1,-156],[0,-178],[0,-143],[1,-170],[0,-168],[-9,-19],[-3,-95],[-3,-125],[-17,-129],[-29,-95],[-11,-90],[-8,-52],[-11,-28],[-3,-34],[-6,-48],[-9,-31],[-7,-16],[-30,-18],[-53,-92],[-4,-73],[-60,20],[-63,21],[-9,-1],[-5,-10],[-3,-38],[-86,-7],[-75,-5],[-92,-7],[-64,-4],[-81,-9],[-74,-8],[-50,-84],[-45,-80],[-3,-3],[-64,-16],[-79,14],[-41,1],[-16,-10],[-3,-30]],[[46836,58988],[2,43],[-19,30],[0,15],[2,41],[8,85],[-1,32],[8,64],[-13,28],[-2,21],[-14,34],[-15,48],[-4,39],[-6,30],[-14,46],[-11,7],[-24,7],[-4,-15],[-8,-23],[-8,-7],[-13,28],[-5,24],[0,22],[-17,38],[-27,71],[3,58],[17,31],[5,24],[1,26],[-7,32],[-9,26],[2,55],[-2,78],[-14,39],[-12,28],[-17,31],[-15,47],[6,65],[5,44],[-26,93]],[[46588,60373],[49,-37],[7,13],[16,22],[23,47],[19,62],[8,78],[4,66],[8,57],[11,47],[23,50],[22,35],[26,37],[14,-7],[24,-51],[55,-102],[45,-78],[16,-42],[15,0],[22,75],[23,66],[10,16],[31,7],[26,2],[22,-1],[42,-12],[19,-12],[18,-7],[52,-6],[52,16],[49,21],[36,12],[2,31],[-2,36],[6,28],[11,26],[10,5],[4,-87],[12,-13],[32,-4],[53,0],[57,0],[56,0],[57,0],[57,0],[56,0],[57,0],[57,0],[56,0],[57,0],[57,0],[56,0],[57,0],[57,0],[56,0],[57,0],[57,0],[58,0],[16,169],[15,155],[12,129],[-42,92],[-33,73],[-8,139],[-8,143],[-7,143],[-8,143],[-8,144],[-8,143],[-8,143],[-8,143],[-8,143],[-8,144],[-8,143],[-8,143],[-8,143],[-7,144],[-8,143],[-8,143],[-8,143],[-8,144],[-8,143],[-8,143],[-8,143],[-8,144],[-8,143],[-8,143],[-7,143],[-8,143],[-8,144],[-8,143],[-8,143],[-8,143],[-8,144],[-8,143],[-8,143],[-7,131],[85,1],[91,0],[89,0],[130,0],[97,0]],[[54046,72495],[-10,-19],[-26,1],[-24,29],[0,61],[27,-12],[25,-41],[8,-19]],[[53975,72596],[-16,-9],[-17,17],[-4,11],[23,9],[12,-8],[4,-15],[-2,-5]],[[77272,57565],[-13,-34],[-5,2],[6,55],[23,41],[19,4],[-2,-26],[-14,-31],[-14,-11]],[[77280,58152],[23,-100],[-3,-15],[-3,-8],[-6,3],[-9,54],[-17,34],[-21,-6],[17,44],[7,10],[12,-16]],[[77372,58157],[-6,-1],[-6,2],[-6,9],[14,62],[4,-72]],[[77283,58454],[-1,-12],[-2,0],[-7,9],[4,55],[11,44],[11,66],[6,14],[2,-35],[-7,-74],[-5,-40],[-12,-27]],[[77375,58608],[-7,-119],[-17,17],[-9,0],[-10,67],[0,18],[-6,44],[41,8],[8,-35]],[[77242,58578],[3,-32],[-18,34],[-3,95],[14,-60],[6,-14],[-2,-23]],[[77365,58700],[-12,-3],[-5,93],[3,14],[16,-46],[24,-28],[-9,-18],[-17,-12]],[[77259,58842],[-3,-3],[-4,1],[-10,10],[-10,39],[5,27],[4,7],[10,-2],[4,-5],[2,-10],[-3,-22],[1,-19],[4,-23]],[[77240,58980],[-2,-21],[-16,-43],[-14,25],[-4,13],[15,28],[15,-4],[4,6],[2,-4]],[[77336,59099],[7,-15],[9,0],[-3,-56],[-22,-69],[-13,-10],[-5,0],[5,101],[-9,57],[3,39],[24,-18],[4,-29]],[[77309,59388],[-2,-95],[-14,46],[-2,52],[1,49],[3,8],[1,-8],[8,-22],[5,-30]],[[76334,60955],[-6,-15],[-11,11],[-3,6],[26,64],[3,-24],[-9,-42]],[[76243,61028],[-18,-56],[-7,84],[30,47],[14,44],[15,31],[5,-37],[-14,-71],[-25,-42]],[[77103,61205],[-10,-7],[-16,37],[-3,90],[13,20],[7,5],[11,-11],[3,-14],[2,-18],[-3,-19],[-4,-83]],[[76024,62605],[-4,-5],[-29,49],[-23,62],[36,12],[35,-13],[1,-33],[-8,-53],[-8,-19]],[[76031,63109],[32,-48],[13,3],[19,-30],[1,-12],[-4,-24],[-9,-19],[-24,-20],[-16,16],[-7,52],[-19,25],[-6,20],[13,29],[7,8]],[[75969,63301],[6,-79],[-19,30],[-7,41],[-2,42],[22,-34]],[[75835,63320],[4,-55],[-13,22],[-18,76],[1,50],[12,-23],[14,-70]],[[77811,63546],[-33,36],[-14,21],[-17,5],[-19,-23],[-14,-25],[-15,-9],[-22,-3],[-30,13],[-20,11],[-3,-6],[11,-53],[4,-42],[-5,-21],[-9,-19],[-15,-14],[-17,-8],[-15,1],[-24,20],[-18,1],[-16,-10],[-10,-15],[-5,-19],[-9,-104],[-8,-32],[-12,-18],[-11,-2],[-16,5],[-16,-5],[-74,-40],[-11,-4],[-23,-3],[-22,-1],[-15,2],[-36,41],[-17,5],[-9,-12],[-7,-55],[-21,-35],[-27,-77],[-7,-112],[3,-78],[-25,-77],[-2,-37],[13,-179],[-2,-19],[-5,-9],[-16,-6],[-26,-19],[-17,-18],[-9,-2],[-24,13],[-6,1],[1,-14],[20,-78],[20,-36],[21,4],[9,-7],[-2,-19],[8,-49],[19,-78],[5,-59],[-11,-59],[2,-21],[6,-12],[18,-54],[38,-86],[37,-92],[31,-77],[23,-53],[50,-99],[9,-46],[2,-94],[13,-54],[11,-39],[8,-32],[19,-106],[8,-15],[41,65],[9,-14],[5,-24],[0,-31],[-6,-35],[-13,-33],[-63,-75],[-5,-64],[-4,-98],[-2,-120],[3,-90],[-2,-21],[-5,-10],[-24,4],[-34,-45],[-12,-4],[-15,-18],[-11,-21],[-4,-33],[7,-99],[12,-93],[24,-68],[19,-54],[26,-74],[21,-66],[42,-71],[59,-107],[22,-59],[20,-72],[14,-61],[6,-81],[4,-46],[1,-152],[-11,-34],[-8,-40],[5,-42],[13,-40],[0,-46],[13,-82],[22,-50],[21,-34],[9,-26],[-3,-43],[6,-46],[4,-49],[9,-68],[16,-58],[26,-178],[-1,-18],[-11,-36],[-16,-33],[-10,-10],[-10,-34],[-23,-95],[-47,-163],[-46,-107],[-38,-76],[-28,-46],[-8,-27],[0,-22],[5,-38],[-2,-73],[-6,-46],[-8,-49],[-4,-43]],[[77417,57713],[-13,-7],[-26,-83],[-12,42],[-7,43],[8,98],[-16,186],[10,25],[9,13],[18,71],[21,70],[2,85],[17,61],[-4,52],[1,61],[4,49],[-2,41],[14,42],[24,32],[-10,11],[-10,23],[-31,-35],[-16,11],[-3,37],[4,39],[2,23],[12,27],[-1,52],[-6,46],[9,57],[-18,0],[-9,11],[5,32],[17,28],[-15,53],[11,57],[0,71],[-8,62],[0,45],[-11,79],[-6,101],[-24,76],[-19,110],[-48,144],[0,61],[-2,54],[-11,27],[-14,-192],[-11,38],[-3,107],[-7,50],[7,101],[-28,100],[-6,73],[-19,110],[6,25],[25,-25],[-23,64],[-19,-14],[-16,69],[-3,188],[-16,70],[9,71],[-18,256],[-35,83],[7,72],[9,63],[-2,118],[8,36],[17,28],[-16,-10],[-13,-8],[-32,-7],[-36,-2],[-12,86],[-18,41],[-16,86],[-9,98],[6,19],[-27,40],[-8,24],[-29,64],[-33,48],[8,-34],[9,-21],[-17,-59],[16,-99],[-14,-63],[-13,-82],[-12,-40],[-40,-84],[-32,-29],[-21,-5],[-19,9],[-23,44],[-5,36],[-4,61],[-8,9],[-9,-7],[14,-79],[0,-37],[24,-71],[-9,-20],[-44,-38],[-15,6],[-10,-8],[-3,-32],[-6,-18],[-69,-48],[-14,-56],[-9,-55],[-35,-80],[-46,-67],[-11,4],[-13,16],[2,71],[15,61],[-5,64],[-3,-37],[-30,-90],[-14,-29],[-27,8],[-38,-12],[-14,92],[0,34],[-3,29],[5,30],[-2,25],[-9,-47],[-3,-40],[-14,-35],[-38,-39],[-1,49],[-2,44],[8,39],[-1,63],[12,90],[-1,31],[-3,34],[-7,-50],[-4,-51],[-8,-16],[-13,-11],[-26,-60],[-15,-52],[-40,-50],[-20,5],[-3,63],[16,225],[15,32],[8,39],[12,131],[15,50],[6,104],[6,18],[19,82],[7,150],[-8,75],[-18,72],[-18,217],[-46,176],[-4,59],[-22,71],[21,5],[-43,62],[-6,26],[-9,146],[2,81],[-6,-11],[-6,-50],[-17,-21],[7,-87],[-1,-21],[-9,-33],[-36,35],[-26,38],[-30,93],[-29,104],[10,16],[13,2],[42,-77],[27,-16],[17,19],[21,33],[10,64],[-11,24],[-20,13],[-13,17],[-20,43],[-2,23],[-6,28],[-20,20],[-16,25],[14,45],[13,34],[-35,-2],[-39,58],[-9,16],[-13,12],[-31,7],[-26,-17],[12,-82],[-2,-27],[-17,4],[-36,124],[11,32],[15,30],[-7,4],[-15,-2],[14,111],[-9,16],[-4,-34],[-8,-34],[-30,-78],[-15,15],[-10,19],[14,41],[8,11],[5,22],[-11,43],[-18,32],[-14,53],[-7,1],[6,-64],[-2,-90],[-32,100],[-64,143],[-15,42]],[[55331,76919],[-1,-7],[2,-20],[6,-21],[22,-20],[32,-41],[38,-76],[18,-22],[16,-5],[30,-32],[22,-7],[23,-9],[63,-65],[28,-19],[19,-25],[3,-23],[-1,-14]],[[55372,75961],[-43,46],[-18,64],[-63,109],[-73,74],[-4,12],[4,14],[4,11],[-15,1],[-11,-9],[-10,3]],[[74392,80162],[1,0],[33,1],[14,13],[12,19],[24,21],[5,24],[0,48],[16,41],[41,12],[15,6],[16,-6],[26,5],[25,2],[13,-12],[18,-11],[24,2],[8,19],[1,26],[10,7],[12,-18],[7,-14],[11,-6],[28,16],[19,18],[7,37],[11,18],[16,-10],[26,1],[22,28],[29,22],[21,11],[4,19],[-9,42],[2,46],[28,26],[37,3],[28,17],[8,49],[13,14],[14,6],[34,8],[24,19],[15,10],[42,26],[38,6],[17,21],[13,27],[21,10],[22,23],[29,30],[11,4],[48,17],[19,6],[11,4],[20,-1],[9,31],[21,23],[21,8],[10,23],[20,29],[27,16],[43,2],[41,-3],[24,5],[21,43],[3,21],[5,22],[16,8],[20,-35],[17,-22],[26,-23],[13,-21],[15,-3],[16,16],[11,39],[22,6],[23,-6],[6,-19],[2,-19],[11,-34],[26,-29],[33,2],[14,5],[32,-4],[32,-6],[34,-7],[10,-1],[38,-4],[54,-5],[23,2],[49,-9],[10,-26],[9,-61],[8,-59],[2,-47],[13,-24],[16,-8],[10,-19],[19,-26],[14,-37],[17,3],[12,8],[26,3],[33,-2],[23,-21],[8,-27],[19,-15],[15,5],[46,0],[15,-1],[16,-15],[22,-3],[13,19],[39,13],[22,27],[18,0],[13,-13],[10,-18],[15,8],[8,15],[13,0],[13,-10],[33,-16],[23,-31],[19,-2],[23,8],[11,5],[11,-15],[15,-9],[12,12],[20,7],[76,-16],[17,-31],[14,-14],[11,-25],[20,-18],[42,6],[16,19],[34,40],[13,39],[18,13],[19,7],[18,-1],[19,2],[23,29],[19,10],[27,36],[5,17],[14,42],[8,28],[14,43],[7,69],[5,37],[-4,27],[-16,13],[-21,7],[-19,20],[-13,24],[-8,33],[-11,38],[0,28],[-3,22],[-9,18],[-18,33],[-8,24],[3,38],[21,66],[2,30],[2,19],[-1,17],[7,39],[11,17],[14,42],[18,19],[23,1],[10,12],[4,42],[11,32],[8,23],[13,25],[80,48],[34,60],[11,30],[13,65],[13,27],[18,-9],[21,-38],[16,0],[23,-21],[64,-44],[35,-13],[22,-4],[30,-12],[19,-26],[37,-41],[32,-11],[54,-4],[66,-2],[19,-8],[48,-29],[54,-33],[50,-30],[39,-23],[22,-22],[22,-13],[23,11],[29,-2],[70,-27],[44,-22],[37,-17],[12,-23],[1,-30],[-5,-26],[3,-63],[12,-32],[4,-44],[4,-42],[-3,-42],[6,-22],[11,-13],[11,-29],[-3,-30],[-5,-18],[1,-29],[13,-23],[20,-5],[17,-6],[21,-37],[38,-43],[23,-11],[26,-20],[50,-18],[34,-6],[20,-15],[20,-37],[32,-8],[21,-13],[38,-15],[25,9],[22,13],[15,-3],[29,-8],[33,-2],[28,9],[22,26],[26,35],[32,18],[36,6],[24,14],[81,24],[33,4],[26,23],[22,18],[32,7],[44,-18],[42,-16],[51,-5],[34,-22],[24,-20],[37,-16],[42,7],[57,7],[38,-10],[40,-37],[24,-29],[28,-64],[28,-31],[25,-25],[32,-1],[79,-2],[43,-14],[36,-7],[9,-13],[-4,-44],[1,-62],[0,-29],[8,-21],[12,-4],[7,-30],[17,-19],[32,-21],[54,-74],[32,-32],[26,-11],[33,8],[52,0],[88,-1],[60,-22],[21,-15],[61,-18],[68,-19],[57,-20],[34,26],[30,2],[28,-19],[28,-28],[22,3],[33,13],[104,80],[37,29],[26,-7],[23,10],[17,9],[45,13],[27,3],[28,7],[40,5],[83,52],[33,10],[56,-14],[30,9],[30,26],[40,27],[10,44],[20,61],[43,44],[35,39],[36,37],[44,32],[41,23],[52,59],[42,31],[21,9],[25,-10],[47,-8],[33,2],[19,-7],[38,-29],[35,-26],[26,-45],[49,-64],[25,-21],[18,-9],[44,-6],[36,-3],[22,14],[36,27],[58,34],[23,-1],[37,-18],[56,-33],[22,-25],[14,-31]],[[90350,59998],[-13,-27],[-10,6],[-6,9],[-2,15],[22,15],[10,-5],[-1,-13]],[[90461,60466],[-12,-29],[-8,45],[-1,19],[10,17],[7,-1],[4,-51]],[[90486,60560],[-1,-15],[-14,4],[-4,6],[8,52],[20,24],[10,5],[-9,-25],[-2,-27],[-8,-24]],[[90475,61255],[-6,-4],[-9,2],[-6,9],[-2,15],[18,1],[7,-12],[-2,-11]],[[90493,62257],[-14,-13],[17,57],[5,10],[8,-21],[-16,-33]],[[90474,62650],[-9,-21],[-7,16],[-2,31],[13,-3],[4,-6],[1,-17]],[[59134,36376],[-30,-1],[-52,-2],[-31,-2],[-35,-2],[-42,17],[-24,-4]],[[58920,36382],[-2,184],[-8,41],[-8,59],[-2,38],[5,38],[2,60],[-2,53],[-25,27],[-6,8]],[[58874,36890],[-6,42],[-2,64],[18,82],[-1,157],[2,55],[-1,109],[0,133],[0,118],[0,102],[-5,49],[-4,27],[-12,54],[-14,113],[-16,85],[-21,56],[-7,30],[-7,39],[-20,70],[-16,41],[-4,33],[0,84],[-18,151],[-13,111],[-20,119],[-13,80],[-2,14],[-2,30]],[[58690,38938],[40,60],[39,83],[46,98],[42,88],[36,77],[49,105],[49,104],[12,13],[5,9],[-21,92],[34,108],[1,69],[-1,67],[4,31],[10,27],[40,56],[30,89],[25,83],[34,134],[3,31],[1,33],[-10,45],[-22,73],[-17,63],[-15,98],[15,85],[5,51],[0,28],[-6,26],[-17,20],[-14,13],[-4,35],[0,42],[6,23],[37,37],[8,20],[4,23],[1,32],[11,81],[14,77],[1,27],[-5,24],[-4,43],[-2,65],[-1,183],[8,189],[-3,107],[-24,123],[-2,89],[17,62],[3,37],[-13,4],[-26,4],[-19,12],[-29,50],[-51,43],[-58,39],[-84,11],[-70,124],[-55,20],[-18,15],[-53,74],[-82,7],[-86,7],[-54,3],[-8,10],[-3,102],[0,91]],[[58443,42832],[-5,79],[-8,90],[-12,35],[-15,61],[-8,67],[-1,32],[3,12],[60,47],[25,24],[38,27],[67,38],[60,34],[55,33],[58,35],[24,23],[29,23],[70,47],[20,16],[41,27],[20,10],[78,54],[89,62],[31,21],[60,41]],[[59222,43770],[12,-17],[40,-142],[32,-83],[37,-77],[6,4],[10,18],[19,7],[57,18],[23,1],[14,20],[30,15],[34,9],[12,-10],[36,-99],[5,-77],[8,-110],[2,-54],[-1,-72],[-4,-90],[-29,-104],[-6,-51],[-16,-80],[-21,-39],[-10,-33],[1,-33],[11,-28],[24,-51],[8,-32],[-2,-29],[0,-40],[6,-27],[6,-16],[25,-26],[23,-65],[41,-78],[48,-111],[23,-34],[18,-8],[9,-38],[-5,-43],[-14,-25],[6,-35],[7,-19],[9,-9],[22,-2],[19,7],[5,12],[-2,167],[-15,97],[-14,38],[-3,7],[5,32],[16,75],[14,74],[8,31],[10,19],[67,20],[31,17],[12,21],[10,58],[8,160],[3,151],[-7,88],[10,133],[15,82],[-8,17],[-5,111],[-44,118],[-56,152],[-31,82],[-36,94],[-65,145],[-29,53],[-16,21],[-52,17],[-14,28],[-14,45],[-5,83],[0,62],[-6,105],[-11,149],[-5,44],[-15,112],[-14,107],[-1,26],[5,26],[24,79],[18,55],[8,31],[14,83],[4,40],[11,18],[46,8],[37,-2]],[[59710,45173],[62,2],[66,-5],[9,-3],[15,-9],[16,1],[19,12],[20,29],[23,45],[35,-1],[47,-47],[26,-42],[5,-35],[31,-21],[59,-5],[44,18],[27,43],[28,22],[29,3],[23,-15],[15,-32],[29,-22],[43,-14],[47,20],[51,55],[29,57],[7,59],[8,36],[10,12],[27,8],[44,2],[38,-19],[50,-59],[31,39],[53,67],[53,36],[51,0],[42,26],[33,50],[34,33],[37,13],[34,25],[47,52],[50,77],[50,79],[32,50]],[[61239,45815],[15,-60],[26,-54],[-15,-31],[-19,-28],[30,-38],[-22,-57],[-3,-40],[6,-15],[5,-24],[-15,-65],[-20,-50],[-5,-38],[18,-68],[-9,-119],[17,-108],[4,-55],[6,-37],[-8,-67],[2,-111],[4,-46],[-10,-57],[17,-20],[9,-63],[-3,-71],[-5,-38],[-29,-46],[-4,-18],[1,-27],[36,-1],[2,-42],[-3,-33],[2,-63],[-5,-40],[8,-46],[-10,-51],[4,-40],[0,-51],[9,-130],[1,-160],[2,-25],[13,-18],[18,-9],[0,-44],[-21,-58],[-1,-35],[3,-50],[22,68],[14,-1],[12,-26],[-2,-39],[4,-20],[-2,-38],[7,-48],[-3,-42],[-16,-29],[-21,-50],[-4,-48],[2,-30],[-14,-10],[-7,-19],[10,-45],[-1,-39],[-25,-123],[-68,-167],[-30,-59],[-27,-65],[0,-27],[-3,-23],[-32,-92],[-34,-15],[-20,-25],[15,-81],[-22,-19],[-39,-64],[-106,-123],[-17,-28],[-27,-75],[-35,-19],[-20,-21],[-36,-8],[-12,6],[-12,-3],[-10,-16],[-70,-53],[-66,-42],[-16,-19],[-11,-26],[-58,-41],[-91,-103],[-74,-97],[-54,-98],[-14,-15],[-17,-33],[-5,-50],[-6,-28],[-40,-103],[-60,-122],[-11,-33],[-24,-67],[-2,-44],[-22,-14],[-18,42],[-7,-81],[-15,-6],[-16,17],[-40,-41],[-35,-46],[-56,-98],[-80,-191],[-116,-183],[-16,-5],[-10,0],[-37,64],[-20,5],[18,-38],[12,-32],[-3,-61],[1,-93],[-14,-181],[2,-40],[16,-51],[31,-63],[30,-78],[37,-224],[3,-115],[39,-147],[1,-64],[16,-159],[-1,-128],[-3,-79],[19,-33],[7,30],[-2,50],[5,80],[10,35],[11,-5],[3,-38],[7,-33],[3,-32],[0,-42],[-14,-162],[4,-66],[19,-110],[-22,-128],[-33,-301],[-1,-52],[7,-23],[18,-7],[6,38],[11,0],[5,-23],[-14,-139],[-15,-61],[-51,-149],[-27,-64],[-46,-63],[-106,-98],[-215,-142],[-85,-70],[-50,-42],[-108,-132],[-47,-88],[-19,-102],[-19,-47],[-18,-59],[16,-50],[16,-39],[18,-25],[10,-22],[12,-16],[13,80],[6,25],[11,2],[-6,-98],[-13,-333],[-1,-11]],[[59622,44922],[-5,17],[-9,8],[-10,-7],[-4,-21],[11,-27],[12,0],[5,30]],[[59644,44866],[7,13],[3,17],[0,16],[-5,11],[-7,6],[-9,-4],[-4,-22],[-1,-31],[6,-10],[10,4]],[[45451,63194],[-17,-56],[-8,22],[-3,36],[15,53],[8,28],[14,9],[-9,-92]],[[46588,60373],[-6,5],[-29,41],[-15,50],[-23,37],[-32,24],[-21,29],[-10,32],[-12,21],[-12,11],[-1,11],[3,16],[-3,29],[-19,65],[-18,30],[-15,-5],[-9,8],[-5,14],[-2,22],[-10,18],[-18,8],[-14,48],[-11,88],[-14,69],[-17,49],[-13,19],[-9,3],[-3,8],[-2,14],[-14,5],[-19,-15],[-17,5],[-8,24],[-12,3],[-15,-20],[-16,6],[-18,31],[-10,31],[-1,31],[-31,62],[-60,93],[-65,44],[-70,-6],[-39,5],[-9,14],[-9,-1],[-8,-17],[-9,-4],[-10,10],[-6,-7],[-3,-24],[-25,-12],[-47,-1],[-38,-14],[-29,-29],[-41,-12],[-53,4],[-31,10],[-11,17],[-16,4],[-19,-9],[-18,-46],[-15,-83],[-13,-47],[-10,-12],[-11,-62],[-6,-103],[-10,-46]],[[45406,60966],[0,258],[15,97],[5,85],[33,187],[38,153],[36,204],[14,197],[-5,193],[-11,171],[-18,114],[-17,164],[-26,87],[-47,76],[-11,44],[11,16],[29,12],[18,59],[-38,-23],[44,181],[14,123],[-2,81],[9,50],[-35,108],[-26,136],[-14,22],[-14,11],[-1,-32],[-8,-29],[-17,18],[-29,99],[-41,161],[-15,16],[-12,-22],[-7,-21],[-14,-134]],[[45264,63828],[-4,53],[6,63],[10,77],[11,108],[36,0],[63,0],[64,0],[64,1],[64,0],[63,0],[64,0],[64,0],[63,0],[64,1],[64,0],[63,0],[64,0],[64,0],[64,0],[63,1],[64,0],[42,0],[-3,76],[-2,61],[-2,82],[-3,81],[-2,81],[-3,76],[-2,76],[-3,71],[-2,65],[-3,37],[-14,74],[-3,37],[4,39],[9,37],[25,67],[37,51],[44,59],[33,46],[17,11],[52,16],[40,34],[40,33],[17,19],[2,63],[0,69],[0,79],[0,78],[0,79],[0,78],[0,79],[0,78],[0,78],[0,79],[0,78],[0,79],[0,78],[0,79],[0,78],[0,78],[0,79],[0,78],[0,69],[41,0],[52,0],[52,0],[51,0],[52,0],[52,0],[52,0],[52,0],[51,0],[52,0],[52,0],[52,0],[51,0],[52,0],[52,0],[52,0],[51,0],[57,0],[0,66],[0,94],[0,129],[0,130],[0,114],[0,114],[-1,96]],[[32736,61486],[-1,-34],[-19,10],[-1,30],[9,31],[5,3],[7,-40]],[[66014,40043],[-36,-17],[-39,6],[-15,31],[-3,13],[13,12],[-1,39],[7,63],[8,26],[20,23],[8,51],[17,34],[22,4],[22,-63],[16,-66],[-3,-65],[-16,-25],[-5,-38],[-15,-28]],[[59222,43770],[-15,42],[-12,-10],[-17,-30],[-9,-8],[-5,1],[-3,8],[-4,18],[-13,54],[-15,38],[-15,15],[-13,18],[5,17],[6,12],[-2,13],[-7,18],[-28,27],[0,11],[24,23],[15,28],[11,26],[13,57],[11,58],[8,19],[3,38],[-2,43],[5,54],[3,52],[-8,20],[-7,35],[8,59],[13,41],[62,43],[43,38],[9,17],[14,33],[8,32],[-5,9],[-34,1],[-8,13],[-25,112],[14,130],[1,50],[-1,63],[-4,46],[-10,19],[-7,25],[2,68],[10,8],[21,89],[10,52],[-12,42],[-12,60],[-6,38],[-3,13],[8,23],[15,23],[16,6],[17,11],[54,111],[1,22],[-10,37],[-20,56],[-5,23],[-2,67],[-8,20],[-30,46],[-22,47],[7,49],[4,53],[-12,29],[-16,30],[-11,44],[-5,33],[-13,13],[-12,0],[-9,-20],[-9,1],[-12,8],[-4,28],[-1,31],[-8,20],[-7,29],[-1,16]],[[59144,46424],[5,4],[10,3],[43,-58],[27,-3],[29,-11],[25,-51],[13,-7],[17,7],[47,6],[19,-8],[24,-30],[10,-4],[15,-1],[3,8],[2,18],[-3,36],[3,19],[10,21],[25,-24],[65,-112],[2,-15],[41,-110],[13,-47],[0,-25],[13,-97],[3,-45],[-3,-34],[1,-28],[5,-40],[-2,-16],[15,-58],[7,-49],[1,-47],[-4,-47],[-13,-67],[-2,-27],[3,-25],[8,-27],[14,-29],[11,-35],[7,-41],[6,-19],[7,1],[14,-7],[11,-23],[13,-41],[4,-46],[2,-20]],[[80941,53234],[-9,-8],[-13,21],[-3,175],[9,15],[6,-2],[7,-32],[-1,-76],[1,-68],[3,-25]],[[78950,53416],[-14,-6],[-7,4],[-5,23],[11,51],[4,9],[11,-56],[0,-25]],[[78143,53564],[-14,-10],[0,15],[2,21],[10,20],[5,-12],[-3,-34]],[[82679,54244],[5,20],[-1,27],[13,7],[15,-6],[34,-38]],[[77857,54893],[-7,-16],[-20,9],[4,94],[11,12],[18,-17],[8,-16],[-14,-66]],[[77735,55567],[19,-62],[-9,-27],[-5,-8],[-12,9],[-11,-24],[-11,-5],[-11,43],[-13,17],[-3,30],[18,5],[10,-10],[20,20],[8,12]],[[78361,55438],[48,-22],[18,-18],[54,-178],[71,-126],[30,-46],[23,-23],[32,-67],[28,-84],[61,-237],[10,-105],[5,-159],[-14,-240],[-16,-119],[3,-57],[22,-86],[-6,-82],[4,-68],[-2,-189],[13,-55],[15,-36],[76,-112],[6,-41],[37,-143],[70,-310],[19,-139],[-2,-38],[-8,-16],[-21,-13],[-17,27],[-6,20],[2,24],[-7,24],[-16,28],[-10,26],[3,-42],[0,-55],[-21,-5],[-28,17],[-34,-15],[-40,-68],[-19,-2],[-15,58],[-8,39],[-12,28],[-127,142],[-47,36],[-50,108],[-112,119],[-71,116],[-30,71],[-73,63],[-31,75],[-16,15],[-15,27],[16,72],[-7,76],[-8,64],[-51,126],[-25,88],[-49,87],[-19,51],[-18,58],[11,21],[11,12],[-10,43],[-27,74],[-13,85],[0,160],[-39,226],[-34,313],[6,110],[-9,119],[-22,114],[-29,82],[-11,67]],[[77810,55553],[5,27],[7,88],[4,18],[11,8],[13,-2],[23,-76],[61,-48],[18,-11],[24,19],[11,-12],[10,-20],[7,-54],[16,-50],[32,7],[11,-7],[7,-1],[6,-45],[3,-76],[-3,-44],[-23,-64],[-3,-43],[12,-27],[15,-28],[9,-22],[10,3],[12,15],[11,37],[7,32],[41,36],[42,33],[6,-4],[7,-14],[13,-47],[8,-10],[12,-4],[19,5],[23,26],[13,50],[5,39],[33,68],[4,50],[9,33]],[[80452,53011],[18,-80],[7,-18],[40,-54],[33,-27],[36,-11],[37,-2],[15,4],[14,10],[14,-11],[76,-88],[30,-15],[31,6],[13,-8],[44,-67],[13,-8],[22,5],[-28,30],[-18,22],[-8,41],[4,44],[18,29],[12,31],[5,94],[8,48],[14,45],[5,44],[-16,34],[-4,57],[3,47],[10,33],[15,-22],[15,-19],[15,2],[11,7],[2,25],[-3,43],[1,78],[19,63],[31,43],[29,21],[108,35],[172,89],[51,35],[19,18],[15,25],[27,80],[50,125],[35,103],[74,151],[59,139],[8,26],[9,76],[1,36],[-2,36],[8,17],[12,10],[3,0]],[[81983,54665],[65,19],[14,21],[26,46],[10,26],[7,58],[-32,34],[-12,44],[-1,48],[38,88],[13,21],[6,-31],[17,-8],[15,-1],[16,2],[22,44],[12,64],[39,91],[14,70],[8,72],[99,226],[12,35],[59,228],[7,7],[16,-22],[4,-72],[-2,-31],[-9,-47],[-6,-49],[7,1],[28,30],[29,79],[17,69],[14,30],[28,-17],[6,-12],[-2,-49],[3,-29],[11,-61],[24,-37],[33,-24],[31,-34],[10,-22],[6,-27],[7,-45],[0,-44],[-22,-44],[10,-71],[-2,-41],[-7,-35],[-33,-33],[88,33],[22,18],[30,47],[16,-41],[15,-69],[-12,-18],[-38,-26],[-2,-10],[13,-36],[16,3],[31,24],[29,38],[14,0],[15,-8],[29,-24],[16,-20],[13,-26],[9,-53],[33,-19],[68,-75],[12,-7],[14,-1],[35,9],[13,-11],[9,-26],[3,-34],[-1,-36],[-4,-27],[-8,-22],[-25,-34],[-61,-45],[-66,-34],[-34,2],[-47,29],[-17,-3],[-17,-14],[-21,-92],[39,-92],[66,-96],[9,-24],[-2,-29],[-11,-18],[-14,-10],[-37,-15],[-38,-11],[-30,-17],[-31,-21],[-31,7],[-43,43],[-12,3],[-13,-22],[-13,-60],[-8,-17]],[[82539,55972],[-17,-31],[-6,37],[1,47],[23,44],[33,8],[4,-35],[-4,-40],[-7,-21],[-27,-9]],[[56494,41681],[60,24],[56,22],[66,23],[53,18],[13,5],[128,-21],[55,-15],[19,-15],[25,-37],[47,-92]],[[55550,37570],[0,-242],[0,-256],[0,-256],[0,-256],[0,-257],[0,-256],[0,-256],[0,-256],[0,-81],[-29,1],[-57,-32],[-37,-40],[-16,-51],[-21,-30],[-26,-11],[-11,-25],[3,-41],[-10,-31],[-24,-21],[-38,6],[-52,34],[-66,8],[-80,-18],[-58,8],[-35,35],[-38,20],[-39,5],[-23,15],[-47,25],[-9,45],[-5,33],[-14,36],[-1,28],[10,22],[2,35],[-8,48],[-13,24],[-18,-1],[-11,18],[-5,38],[-11,29],[-26,30],[-34,-22],[-16,-34],[-9,-53],[-9,-26],[-4,-44],[-2,-31],[-9,-33],[-9,-13],[-10,6],[-17,-13],[-39,-49],[-11,-26]],[[54568,35358],[-31,47],[-91,175],[-32,46],[-48,107],[-105,334],[-15,64],[-20,161],[-23,120],[-3,69],[11,39],[-6,53],[-12,47],[-36,62],[-10,208],[-24,134],[5,110],[-11,101],[-1,65],[5,123],[-19,141],[-39,138],[-35,199],[-5,88],[3,234],[-6,96],[0,113],[-14,117],[-6,63],[10,51],[6,-16],[10,-8],[7,67],[1,59],[-17,146],[-39,149],[-97,244],[-24,92],[-13,77],[-108,321],[-46,226],[-33,196],[-35,90],[-162,634],[-36,101],[-65,121],[-15,41],[-25,115],[-48,155],[-12,144],[-4,164],[6,125]],[[96539,38811],[-9,-22],[-11,4],[-8,9],[-6,12],[6,44],[24,-22],[4,-25]],[[96669,39498],[13,-10],[22,1],[-5,-98],[-32,-16],[-11,1],[-7,21],[-18,14],[1,33],[-18,76],[31,11],[17,20],[0,-18],[2,-22],[5,-13]],[[96499,39653],[-15,-4],[-20,41],[-39,21],[-17,36],[-11,43],[22,11],[22,58],[-15,22],[-26,3],[3,23],[42,27],[18,-16],[8,-18],[-2,-92],[19,-29],[20,-65],[-1,-18],[-8,-43]],[[96262,39919],[-15,-5],[18,52],[1,33],[7,63],[-1,22],[12,-3],[12,-18],[-14,-16],[-5,-28],[0,-34],[6,-7],[-9,-37],[-12,-22]],[[95611,40180],[31,-36],[34,15],[42,-57],[108,-172],[37,-37],[23,-14],[16,-28],[16,-40],[20,-28],[9,-26],[2,-36],[8,-22],[37,-57],[22,-50],[32,-26],[13,-30],[17,-14],[18,-31],[30,-24],[68,-88],[53,-84],[26,-52],[29,-46],[36,-37],[34,-42],[17,-99],[-9,-35],[-20,-18],[-18,-1],[-17,-12],[-56,64],[-14,9],[-15,-4],[-8,14],[-6,21],[-35,23],[-32,38],[-9,26],[-5,32],[-8,19],[-45,28],[-31,31],[-22,44],[-34,31],[-54,63],[-27,20],[-24,31],[-65,115],[-23,21],[-20,51],[-55,120],[-27,50],[-29,44],[-22,52],[-17,61],[-40,88],[-5,38],[2,38],[-10,25],[-16,15],[-8,26],[1,35],[5,18],[40,-60]],[[94430,40718],[-4,-12],[-2,92],[8,34],[5,-71],[-7,-43]],[[54160,65089],[31,-333],[23,-285],[2,-183],[1,-47],[9,-32],[22,-33],[87,-263],[-19,-46],[13,-81],[23,-35],[72,-157],[10,-31],[-4,-25],[-51,-185],[-9,-45],[-10,-235],[-7,-167],[-10,-228],[-11,-273],[-10,-230],[-12,-304],[-12,-289],[-73,-158],[-129,-280],[-105,-229],[-53,-153],[-103,-298],[-46,-194],[-36,-100],[-18,-44],[16,-141],[28,-248]],[[53779,59737],[-50,-2],[-28,-17],[-37,-57],[-40,-22],[-49,-49],[-31,-40],[-29,-31],[-40,-76],[-14,-58],[-40,-11],[-55,9],[-36,59],[-82,61],[-54,24],[-25,8],[-125,10],[-135,-24],[-68,-28],[-12,-6],[-39,-37],[-32,-41],[-87,-187],[-116,6],[-67,21],[-58,29],[-82,87],[-100,134],[-39,18],[-34,10],[-12,-1],[-120,-133],[-23,3],[-28,-15],[-19,-33],[-13,-17],[-15,-2],[-19,7],[-18,20],[-18,37],[-50,148],[-10,26],[-21,44],[-36,68],[-24,32],[-14,8],[-18,-6],[-96,59],[-96,62],[-21,-8],[-15,-13],[-33,-46],[-40,-8],[-49,4],[-28,6],[-44,-16],[-29,-18],[-38,-31],[-50,-84],[-14,-11],[-12,-14],[-17,-232],[-14,-70],[-25,-91],[-49,-89],[-35,-53],[0,-71],[-3,-118],[0,-80],[2,-53],[-6,-25],[-2,-23],[2,-34],[8,-16],[4,-22],[-3,-17],[-16,-21]],[[96649,35127],[6,-6],[5,-3],[3,-5],[0,-9],[-3,-10],[-3,-4],[-1,-2],[-1,-1],[0,-3],[0,-2],[-2,8],[-3,6],[-3,0],[-2,-6],[-1,0],[-1,6],[-1,6],[-1,5],[1,5],[3,5],[0,4],[-2,2],[-3,-2],[4,9],[5,-3]],[[52027,54388],[-26,-18],[-18,4],[24,77],[12,-17],[16,-7],[-8,-39]],[[53779,59737],[44,-124],[47,-133],[36,-104]],[[52376,54582],[-3,1],[-8,-19],[-23,13],[-11,39],[-14,6],[-25,57],[-5,-10],[26,-144],[-10,-57],[-73,-1],[-64,-19],[-43,1],[-22,21],[-10,54],[-3,-5],[-3,-30],[-13,-22],[-49,-5],[-22,37],[-17,42],[-19,18],[3,-17],[22,-41],[-3,-58],[-39,-67],[-25,-4],[-16,29],[-8,47],[-4,70],[-10,46],[-6,0],[5,-42],[2,-34],[0,-71],[19,-55],[-29,-17],[-11,-1],[-23,-1],[-4,20],[-5,46],[-6,12],[-7,-78],[-15,-5],[-10,1],[-46,-17],[-10,3],[-2,14],[6,22],[-2,35],[-15,-27],[-3,-54],[-9,-8],[-27,7],[-29,28],[-18,28],[-30,39],[-58,111],[-10,49],[-17,61],[-12,62],[-18,105],[5,8],[14,-9],[7,15],[-25,12],[-5,12],[-1,37],[1,45],[19,16],[18,8],[8,27],[5,28],[-45,-42],[-43,47],[-9,29],[4,22],[21,3],[29,-1],[17,21],[-10,8],[-19,-1],[-7,14],[0,34],[-6,-7],[-8,-31],[-29,-22],[-16,22],[-2,50],[-4,23],[-14,17],[-50,132],[-63,110],[-57,76],[-84,36],[-178,-2],[-10,11],[11,17],[16,12],[57,61],[-10,8],[-59,-38],[-21,-4],[-26,-74],[-156,-12],[-19,-3]],[[26900,60479],[-7,-21],[-9,-14],[-18,-69],[-6,-6],[-1,51],[-10,7],[-13,-18],[-7,-26],[11,-35],[10,0],[11,-9],[31,-236],[-7,-42],[-19,-65],[-18,-56],[-18,-35],[-23,-148],[-20,-241],[14,-217],[-7,-200],[6,-48],[2,-59],[-15,-10],[-8,1],[-9,37],[1,31],[9,38],[4,50],[-5,27],[-9,-58],[-15,-26],[-10,-9],[-10,-29],[10,-55],[14,-40],[4,-29],[-5,-34],[-3,-117],[-5,3],[-5,16],[-14,1],[-2,-47],[1,-26],[-12,-21],[-4,-20],[10,-14],[11,-9],[13,2],[12,-58],[3,-47],[-26,-44],[-9,-36],[-14,-43],[-8,-43],[-3,-31],[10,-98],[18,-69],[15,-44],[20,-10]],[[26182,58215],[0,15],[-24,63],[-36,77],[-141,234],[-52,140],[-28,101],[-27,53],[-76,107],[-17,43],[-76,143],[-57,85],[-1,35],[24,45],[11,-2],[13,-32],[20,-36],[10,-1],[14,17],[0,17]],[[2832,40850],[-28,-31],[-12,37],[11,48],[13,12],[8,2],[11,-45],[-3,-23]],[[31054,58838],[-14,-64],[-8,28],[-1,52],[-6,20],[-11,12],[-6,17],[0,26],[42,-41],[4,-50]],[[32517,61921],[-7,-12],[-6,1],[-4,11],[0,20],[5,-6],[3,-2],[1,-4],[8,-8]],[[32435,61994],[-2,-2],[-4,5],[1,10],[3,4],[2,-3],[2,-7],[-2,-7]],[[50930,81438],[21,9],[46,4],[35,-18],[46,-8],[36,24],[28,-21],[31,15]],[[51096,81646],[28,-31],[5,-10],[2,-11],[-34,-12],[-37,38],[-24,-9],[-9,18],[0,12],[25,9],[44,-4]],[[51357,82413],[-28,-41],[-17,12],[-4,9],[8,32],[41,53],[0,-65]],[[51419,82550],[-52,-42],[-4,6],[33,37],[23,-1]],[[51173,81443],[-24,9],[-37,24],[-51,-20],[-36,24],[-29,2],[-19,19],[-19,31],[14,21],[13,7],[54,4],[40,-13],[71,-68],[18,1],[19,8],[-10,19],[-18,9],[-26,18],[-21,26],[49,8],[-7,13],[-6,23],[-52,79],[9,22],[13,46],[16,38],[13,10],[22,27],[46,80],[30,65],[22,76],[32,212],[10,36],[15,40],[20,-8],[13,-11],[48,30],[83,78],[24,68],[24,31],[95,62],[52,18],[81,5],[59,11],[70,4],[27,-38],[15,-28],[25,-15],[39,-11]],[[51664,81077],[-54,2],[-14,3],[-15,9]],[[51479,82595],[-26,-5],[-12,8],[63,23],[39,7],[7,-3],[-71,-30]],[[51647,82637],[-55,-10],[-19,8],[-3,6],[15,4],[47,1],[14,-6],[1,-3]],[[51759,82667],[-39,-20],[-10,4],[3,6],[34,12],[12,-2]],[[51870,82708],[-25,-2],[7,15],[24,12],[13,0],[-19,-25]],[[51412,86582],[1,-68],[-25,5],[-12,26],[-3,17],[2,39],[-6,41],[7,20],[10,3],[16,-36],[10,-47]],[[51377,87030],[-25,-8],[-19,6],[7,55],[10,9],[15,4],[16,-30],[-4,-36]],[[52250,88327],[-27,0],[-32,9],[-21,19],[-3,16],[38,21],[37,12],[18,-23],[1,-37],[-11,-17]],[[52352,88517],[-31,-1],[-20,13],[46,25],[72,25],[6,15],[9,2],[12,-19],[2,-26],[-8,-13],[-88,-21]],[[53119,89208],[-14,-16],[-33,13],[-63,-10],[-26,15],[20,31],[58,32],[31,-2],[31,-39],[-4,-24]],[[53324,89646],[-18,-18],[-35,5],[-3,15],[9,31],[21,13],[27,-3],[9,-13],[-10,-30]],[[53474,89805],[-22,-2],[0,23],[13,22],[20,14],[26,4],[29,2],[9,-12],[-17,-16],[-58,-35]],[[53449,89886],[-25,-4],[4,26],[21,24],[8,16],[4,20],[18,14],[26,-19],[1,-31],[-13,-30],[-44,-16]],[[53603,90941],[-41,-31],[15,56],[22,56],[30,32],[16,-12],[-7,-27],[0,-27],[-7,-13],[-28,-34]],[[53853,91166],[17,-10],[43,3],[8,-4],[-6,-16],[-19,-18],[-39,-11],[-18,-27],[-12,-9],[-34,-1],[-20,-6],[-25,-24],[-20,18],[-5,-13],[-4,-23],[-11,-6],[-34,-9],[-8,53],[16,20],[12,22],[19,4],[17,-2],[30,50],[42,14],[26,1],[25,-6]],[[54224,91556],[36,-58],[16,-34],[-13,-64],[-35,-32],[-54,-6],[-38,3],[-24,16],[-3,17],[-14,5],[-37,-22],[-25,-3],[-32,17],[-9,28],[34,35],[16,27],[38,-3],[10,-8],[21,-5],[13,32],[-3,23],[10,15],[46,-11],[0,61],[17,5],[8,-3],[13,-13],[9,-22]],[[54377,91336],[4,-4],[38,56],[41,17],[3,19],[16,19],[-2,31],[9,24],[21,7],[13,8],[15,5],[27,-20],[15,-22],[19,-50],[-8,-48],[-50,-38],[-40,-17],[-41,-43],[-20,-35],[-17,-8],[-11,3],[-10,9],[-21,0],[-22,-31],[-68,-25],[-27,7],[-1,31],[-16,-3],[-26,-36],[-25,-12],[-16,-4],[-31,14],[-83,-63],[-78,-11],[-25,7],[0,38],[50,49],[41,34],[142,23],[88,101],[21,109],[21,39],[-10,23],[-24,4],[-1,34],[12,37],[47,51],[25,22],[42,62],[20,14],[23,0],[23,-16],[-4,-33],[-34,-60],[-50,-51],[6,-37],[20,-30],[5,-51],[1,-50],[-38,-66],[-9,-33]],[[54861,91933],[34,-33],[15,10],[29,3],[22,-11],[18,-21],[22,-1],[13,-27],[7,-36],[-16,-27],[-22,-12],[-6,-31],[9,-44],[-49,-15],[-58,-7],[-22,21],[-45,-38],[-46,-60],[-21,-7],[-2,19],[-32,13],[-42,1],[1,14],[8,10],[36,15],[7,30],[-7,54],[7,26],[1,19],[23,21],[77,-10],[9,20],[-6,13],[-39,22],[6,15],[28,14],[28,2],[8,22],[1,10],[4,6]],[[58321,92048],[-53,-17],[-6,14],[11,22],[14,44],[22,-2],[22,-17],[17,-20],[-27,-24]],[[55771,92217],[-15,-14],[-23,-5],[-12,8],[-17,6],[-20,-3],[-16,25],[1,20],[23,28],[45,16],[36,-6],[10,-9],[-12,-66]],[[55348,92203],[25,-31],[22,3],[6,12],[15,6],[30,-17],[-4,-28],[-42,-36],[-30,-50],[-38,-12],[-18,6],[-35,-29],[-27,-31],[-28,-38],[-2,-20],[-5,-15],[-104,-15],[-37,-10],[-40,12],[-19,26],[6,14],[40,5],[1,24],[10,14],[13,8],[9,30],[16,8],[30,-7],[20,22],[11,3],[14,-18],[6,25],[-6,23],[3,15],[38,40],[17,29],[24,19],[22,-3],[7,27],[-7,29],[3,18],[20,45],[22,2],[11,-40],[1,-65]],[[55490,92290],[15,-7],[14,4],[11,-6],[23,-30],[25,-12],[2,-15],[-23,-15],[-31,-4],[-32,5],[-9,19],[-10,31],[-27,31],[-4,27],[23,5],[23,-33]],[[56559,92482],[5,-27],[2,-23],[-26,-32],[-59,-42],[3,-11],[-20,-11],[-31,-8],[-17,8],[2,36],[-5,11],[-23,-15],[-24,19],[-1,18],[7,16],[23,25],[37,16],[25,-6],[83,65],[9,-14],[10,-25]],[[56671,92492],[-53,-23],[-31,20],[-13,20],[-1,45],[7,27],[25,15],[16,-11],[4,-8],[29,-9],[34,-28],[-17,-48]],[[56511,92635],[-6,-18],[-9,-18],[-23,-18],[-66,-74],[-38,-11],[-13,-12],[-15,-7],[-48,10],[-14,-15],[-14,-10],[-34,-4],[-21,4],[-53,27],[-31,29],[-17,26],[49,-1],[17,6],[33,-5],[19,26],[42,-3],[80,18],[29,-10],[67,60],[21,-2],[32,17],[13,-15]],[[58574,92040],[15,-75],[0,-27],[-7,-26],[-10,-13],[-20,-5],[-48,2],[-66,30],[-42,28],[-13,1],[-6,-3],[10,-28],[-2,-22],[-7,-24],[-9,-21],[-12,-19],[-26,-23],[-45,-18],[-123,-36],[-10,-16],[-40,-100],[-11,-15],[-14,-12],[-43,-16]],[[55728,91610],[-36,-2],[-105,-7],[46,-50],[16,-20],[3,-29],[-8,-55],[-22,-46],[-26,-38],[-50,-38],[76,-37],[-51,-50],[-24,-20],[-28,4],[-50,17],[-120,42],[-57,16],[-51,5],[-28,-1],[-108,36],[-21,-4],[-39,-16],[-5,-34],[3,-87],[6,-67],[-15,-39],[-14,-26],[-44,-71],[-97,48],[-67,32],[-43,-43],[-107,-77],[-55,-154],[-4,-5],[-32,-39],[-42,-18],[-31,-9],[-19,-46],[43,-65],[22,-35],[21,-56],[-4,-35],[-5,-22],[-46,-46],[-98,-119],[-91,-125],[-37,-36],[17,-106],[-31,-31],[-61,-35],[-32,-14],[-34,-7],[-104,-15],[19,-113],[7,-50],[0,-30],[-11,-29],[-13,-56],[-19,-198],[-15,-22],[-21,-54],[-66,-129],[-53,-86],[-76,-124],[62,-39],[57,-29],[12,-44],[7,-73],[-1,-50],[-22,-45],[-17,-32],[-12,-15],[-80,15],[-103,20],[-27,0],[-60,-14],[-54,-29],[-29,-25],[-7,-9],[-36,-56],[-64,-99],[-36,-44],[11,-60],[-59,-115],[38,-117],[2,-4],[20,-47],[-21,-30],[-9,-16],[3,-54],[6,-61],[-5,-35],[-2,-39],[52,-177],[0,-41],[-3,-27],[-16,-109],[-22,-148],[38,-39],[54,-46],[30,-18],[45,-55],[34,-54],[-4,-36],[-10,-39],[-15,-28],[-13,-38],[-6,-28],[-6,-7],[-60,-3],[-32,-11],[-16,-12],[5,-63],[36,-117],[31,-83],[9,-55],[-10,-55],[-10,-28],[0,-39],[-8,-76],[-24,-38],[-30,-42],[-34,-31],[-27,-9],[-23,-4],[-16,-16],[-14,-47],[-13,-49],[-43,-60],[1,-21],[17,-72],[15,-81],[-13,-76],[-11,-81],[-19,-53],[-28,-19],[-20,10],[-23,73]],[[53163,85850],[-1,17],[-5,22],[-65,22],[-12,-1],[-25,13],[-15,4],[-31,8],[-25,64],[-28,54],[-3,22],[0,101],[-8,44],[-2,49],[-17,-39],[9,-63],[-21,-26],[-26,-13],[2,-37],[11,-7],[3,-38],[-7,-56],[-52,-126],[-11,-13],[-7,-17],[-27,11],[-34,-35],[-32,-5],[-12,39],[-46,53],[-22,-3],[20,-26],[19,-34],[-11,-22],[-11,-14],[-18,-8],[-67,-44],[23,-29],[-20,-34],[-23,-5],[-13,-15],[-4,-21],[-69,-61],[-113,-155],[-59,-44],[-40,-46],[-36,2],[-45,-39],[-114,-34],[-75,15],[-53,-13],[-28,26],[-4,19],[2,10],[5,13],[-10,5],[-21,2],[-9,-13],[-1,-29],[-10,-8],[-39,17],[-10,15],[14,30],[25,28],[-5,5],[-5,17],[-11,2],[-35,-4],[-29,5],[-93,62],[-21,33],[-75,52],[-34,56],[-19,61],[2,56],[9,87],[15,22],[68,-31],[68,-51],[10,3],[22,40],[41,32],[-12,9],[-61,-37],[-23,21],[-36,42],[0,21],[17,22],[5,29],[-8,28],[4,37],[27,40],[41,40],[30,39],[31,24],[-4,8],[-34,-15],[-34,-26],[-39,-44],[-48,-35],[-35,-13],[-17,-12],[-26,-11],[-27,-50],[-29,-21],[-53,-3],[-11,37],[15,131],[16,64],[17,45],[27,7],[20,34],[16,0],[13,-16],[54,-15],[26,43],[35,6],[62,42],[-1,8],[-42,-9],[-26,-2],[-37,-10],[-20,7],[-9,32],[15,29],[59,68],[21,30],[11,28],[-2,19],[10,39],[58,69],[47,32],[15,-28],[-13,-84],[0,-35],[38,123],[16,30],[19,20],[45,14],[13,20],[-53,-7],[-127,-47],[-54,-42],[-15,-32],[-37,-49],[-17,-31],[-8,-47],[-21,-25],[-29,-9],[-39,-59],[-17,-48],[-39,-37],[-25,-29],[-8,-11],[-14,-28],[-11,-2],[-10,16],[-1,37],[3,59],[19,42],[9,42],[-12,38],[9,24],[16,0],[31,-11],[33,1],[54,31],[-9,18],[-23,2],[-44,-2],[-36,29],[-29,59],[-13,79],[9,23],[105,81],[28,36],[-16,4],[-39,-45],[-57,-27],[-35,38],[-19,41],[-11,87],[4,45],[-4,59],[24,19],[27,-10],[26,-4],[61,5],[133,35],[85,-21],[35,2],[54,31],[46,3],[35,-23],[19,-27],[3,-36],[16,-23],[11,7],[-9,29],[-2,43],[140,50],[17,19],[-56,7],[-16,45],[30,68],[-3,9],[-31,-36],[-15,-51],[6,-40],[-6,-19],[-29,-9],[-64,-3],[-41,17],[-38,10],[-13,13],[4,29],[-7,6],[-16,-26],[-14,-52],[-30,-12],[-84,19],[-121,-11],[-54,-26],[-35,3],[-61,46],[-24,36],[-8,73],[3,33],[47,13],[24,-1],[22,17],[-19,12],[-28,22],[-19,44],[-29,14],[-19,38],[-5,57],[6,40],[15,12],[37,-8],[97,6],[91,-40],[62,-23],[125,12],[73,36],[-13,10],[-80,-21],[-73,1],[-130,40],[-53,14],[-57,-6],[-30,12],[-18,40],[13,77],[27,17],[15,-20],[18,-2],[18,32],[17,19],[14,41],[51,39],[22,3],[31,18],[20,-5],[12,-18],[16,-15],[35,2],[103,31],[11,10],[20,25],[-65,-11],[-54,-18],[-35,-5],[-5,22],[13,21],[20,21],[10,37],[22,16],[24,-1],[50,7],[35,9],[60,-6],[90,-14],[58,-34],[21,3],[23,9],[11,12],[-46,14],[-2,21],[5,15],[74,28],[81,6],[-14,23],[-177,-34],[-46,23],[-36,0],[-24,-13],[-68,-17],[-13,12],[13,40],[41,65],[3,16],[19,15],[106,38],[51,44],[23,6],[22,-3],[35,5],[67,-13],[30,-55],[28,-17],[87,-69],[-4,20],[-75,93],[-29,23],[-21,46],[7,43],[24,29],[86,15],[15,17],[2,29],[-13,19],[-32,-1],[-26,12],[-7,31],[10,21],[50,38],[27,13],[47,13],[81,-30],[6,-16],[-22,-38],[2,-21],[20,-3],[46,64],[55,9],[23,14],[26,9],[38,-58],[16,-19],[12,-7],[12,-48],[12,-3],[17,24],[30,13],[42,8],[69,-13],[32,10],[15,-1],[-14,43],[-10,12],[15,39],[15,15],[48,27],[46,12],[30,26],[40,23],[-6,19],[-12,22],[-26,2],[-10,12],[33,28],[45,32],[-8,12],[-34,14],[-26,-11],[-38,-24],[-45,-39],[15,-11],[22,-32],[-31,-43],[-166,-115],[-78,-34],[-37,5],[-9,32],[-16,23],[-18,48],[-31,-1],[-17,-11],[-8,16],[13,51],[26,40],[44,31],[20,36],[20,59],[63,55],[91,138],[75,44],[27,48],[44,21],[38,37],[29,4],[54,34],[30,40],[-20,2],[-47,-26],[-27,-10],[2,43],[13,44],[39,40],[186,117],[19,-19],[22,-35],[56,8],[64,66],[49,72],[-26,-12],[-29,-30],[-57,-41],[-26,-6],[-15,5],[-8,28],[-20,8],[-18,-6],[-18,20],[-3,48],[23,71],[19,47],[20,36],[78,101],[17,56],[36,29],[46,-7],[14,9],[-16,36],[-50,29],[-3,18],[167,47],[80,-1],[24,23],[43,15],[33,29],[-17,13],[-81,-26],[-51,-13],[-23,0],[-18,-9],[-64,-3],[-14,115],[10,63],[24,-2],[5,60],[28,35],[39,8],[19,15],[28,31],[46,-7],[48,7],[-12,14],[-59,19],[-14,32],[20,17],[23,13],[20,3],[40,62],[24,27],[26,-5],[38,28],[37,-10],[35,18],[49,12],[178,5],[5,25],[-38,6],[-132,7],[-67,-1],[-29,-7],[-10,9],[2,16],[24,24],[12,26],[49,65],[58,44],[44,-11],[46,-42],[34,-5],[15,-13],[25,-57],[11,-2],[-5,55],[32,44],[-8,13],[-49,-16],[-37,16],[-29,34],[-8,31],[18,30],[17,15],[-11,18],[-74,-48],[-51,-11],[-21,7],[11,43],[-6,34],[70,85],[23,9],[39,-6],[35,-24],[30,4],[32,12],[-5,23],[-69,9],[-18,19],[7,19],[47,19],[48,36],[54,10],[43,27],[8,-6],[8,-11],[15,-99],[39,-81],[15,-3],[-15,69],[14,20],[17,15],[6,17],[-20,6],[-17,24],[-24,79],[9,21],[51,41],[64,10],[68,-29],[24,-1],[40,8],[67,24],[40,10],[20,0],[5,12],[-19,8],[-6,7],[-15,5],[-62,-13],[-172,4],[-16,14],[-3,24],[18,34],[20,20],[65,34],[68,5],[72,61],[28,45],[15,71],[44,57],[111,32],[4,14],[-12,30],[1,53],[31,63],[20,21],[9,3],[24,-21],[29,-43],[45,-24],[59,-5],[16,12],[-46,25],[-35,32],[-3,33],[17,17],[25,-2],[33,4],[30,21],[4,16],[1,20],[8,22],[44,50],[136,33],[10,-14],[-7,-97],[-16,-63],[0,-46],[27,46],[35,126],[27,59],[30,34],[22,8],[21,17],[28,11],[9,-14],[9,-31],[-16,-110],[2,-35],[-17,-46],[-65,-104],[3,-13],[15,5],[25,17],[80,98],[70,-12],[1,8],[-22,29],[-28,28],[-8,34],[4,91],[21,37],[60,-4],[37,5],[17,-17],[36,1],[25,66],[50,6],[44,-44],[52,-29],[43,-42],[12,12],[-23,98],[-25,35],[-54,19],[-58,44],[-15,19],[3,15],[50,14],[68,-16],[59,36],[17,-10],[46,19],[28,-26],[17,8],[11,35],[73,21],[46,-20],[25,-20],[12,-39],[17,-78],[36,-42],[23,-21],[27,-5],[12,21],[-24,25],[-7,24],[12,59],[14,23],[78,87],[66,46],[39,4],[68,102],[20,18],[18,5],[-5,24],[-37,16],[-2,31],[50,38],[60,63],[30,4],[18,-17],[59,-29],[35,-33],[26,-16],[17,3],[14,25],[17,11],[37,-6],[22,-16],[18,-2],[15,-9],[4,-21],[-32,-23],[-55,-61],[-54,-69],[-18,-36],[-17,-95],[-43,-61],[-3,-43],[17,-20],[47,16],[57,57],[15,60],[143,164],[68,91],[76,75],[43,15],[21,-49],[-17,-65],[-32,-41],[24,-19],[-5,-50],[-7,-27],[-5,-28],[0,-26],[23,7],[89,52],[23,56],[21,42],[10,36],[35,34],[66,0],[3,14],[-80,47],[-9,22],[27,28],[73,55],[38,-6],[23,-13],[91,-9],[69,-39],[-2,-61],[-16,-26],[-15,-15],[-89,-47],[-15,-22],[28,-8],[60,23],[16,-21],[-19,-53],[-4,-78],[-7,-46],[0,-42],[8,-23],[24,90],[8,22],[36,34],[13,68],[34,81],[39,47],[23,13],[75,-2],[33,-18],[28,-39],[21,-16],[67,-17],[24,-21],[4,-12],[16,-3],[45,30],[30,5],[48,-46],[-10,-35],[3,-11],[58,2],[48,-13],[92,-71],[10,-33],[-5,-40],[-132,-44],[-57,-42],[-94,-16],[-318,28],[7,-31],[221,-66],[13,-19],[-7,-40],[-1,-33],[5,-22],[16,-20],[27,-10],[55,5],[27,-11],[19,17],[7,55],[16,12],[31,-16],[13,-59],[9,-6],[15,42],[31,-3],[33,3],[43,-7]],[[57107,92823],[74,-22],[25,0],[37,-41],[19,4],[-3,-25],[-37,-12],[-58,-7],[-9,-5],[-49,4],[-28,33],[-47,9],[0,11],[30,25],[46,26]],[[47512,92649],[-25,-4],[-15,13],[37,35],[124,66],[49,63],[95,22],[6,-35],[-6,-44],[-84,-35],[-92,-23],[-89,-58]],[[55338,94695],[-33,-23],[-51,34],[-33,43],[18,16],[89,3],[22,-23],[4,-13],[-16,-37]],[[56002,97117],[38,-14],[83,3],[45,-98],[26,-103],[41,-8],[80,15],[70,7],[36,-8],[65,-30],[28,-21],[-24,-17],[-59,-19],[-10,-55],[59,-20],[98,-47],[56,-6],[98,19],[93,-37],[92,-45],[-215,-56],[-19,-16],[-29,-42],[-32,-35],[-29,-20],[-64,-35],[-35,-13],[-78,3],[-29,-14],[-27,-28],[-27,-21],[-69,-5],[-35,28],[12,9],[5,17],[-13,40],[66,40],[15,23],[-13,8],[-18,-2],[-48,12],[-14,0],[-40,-24],[-55,-16],[-55,-4],[-224,-31],[-34,11],[-15,61],[91,31],[14,53],[23,35],[26,23],[50,60],[12,4],[-123,48],[-48,31],[-53,61],[-17,50],[-71,42],[9,54],[-52,-4],[-41,38],[38,21],[190,24],[113,24],[43,-1]],[[57465,97147],[-41,-1],[-75,42],[-14,37],[13,15],[36,1],[57,-51],[61,-15],[-37,-28]],[[53125,97125],[3,-40],[45,4],[53,-42],[58,-22],[17,-16],[12,-20],[35,-40],[17,-42],[-42,-4],[-58,60],[-47,34],[-60,29],[-48,2],[-21,12],[-78,105],[-15,24],[-44,39],[-20,48],[0,38],[60,-9],[52,-24],[45,-54],[9,-16],[-21,-22],[21,-27],[27,-17]],[[58068,97299],[83,-4],[83,9],[14,-9],[-107,-31],[-119,16],[-107,4],[-127,-33],[-42,13],[65,33],[70,10],[11,20],[27,4],[93,2],[56,-34]],[[54662,97872],[15,-1],[14,6],[10,16],[11,9],[71,-11],[99,-32],[30,-16],[41,-33],[34,-55],[-27,-40],[-35,-37],[-12,-21],[13,-30],[-6,-29],[-13,-26],[54,29],[114,94],[17,6],[18,-3],[51,-19],[46,-48],[11,-16],[8,-20],[5,-24],[-3,-28],[-4,-19],[-25,-12],[-11,-12],[26,-1],[30,-15],[27,-31],[31,-13],[111,11],[73,-17],[39,-52],[62,12],[0,27],[13,12],[82,-9],[43,-13],[43,-27],[-74,-45],[61,-43],[103,-31],[61,-33],[12,-14],[10,-18],[-40,-24],[-41,-13],[-104,-2],[-93,-17],[-172,-12],[-26,-7],[-6,-7],[-10,-21],[-66,-47],[-64,-58],[-26,-35],[-20,-49],[-8,-29],[15,-29],[-4,-30],[-48,-23],[-31,0],[-38,4],[-38,-13],[-2,-20],[2,-28],[-9,-85],[-12,-65],[-18,-59],[-19,-33],[-25,-9],[-81,-5],[-62,-57],[-50,-100],[-26,-39],[-55,-62],[10,-22],[17,-24],[-30,-43],[-46,-48],[1,-19],[16,-34],[7,-35],[-35,-30],[-66,-16],[-66,17],[-32,21],[-30,32],[-32,22],[-33,13],[-127,72],[-117,114],[-108,45],[-69,21],[-34,20],[-33,28],[-28,31],[-27,39],[-12,24],[-3,36],[9,21],[12,11],[85,9],[31,-5],[30,-19],[27,-7],[63,94],[357,54],[115,9],[115,0],[-18,25],[-15,33],[-17,7],[-87,-18],[-133,-19],[-65,0],[-67,13],[-67,-7],[-69,-28],[-69,-17],[-68,-7],[-143,3],[-35,14],[-48,33],[-11,17],[-10,21],[-9,63],[10,17],[14,9],[15,6],[32,1],[31,-11],[72,-36],[-17,39],[208,46],[96,40],[49,6],[50,-2],[-11,21],[0,20],[35,16],[25,7],[77,8],[174,-2],[62,11],[47,28],[-50,-10],[-50,-2],[-23,6],[-53,24],[-24,31],[68,63],[24,30],[-70,-5],[-23,-10],[-80,-58],[-60,-26],[-73,-12],[-73,1],[-16,8],[-22,39],[-7,20],[3,11],[23,31],[12,34],[-2,29],[-17,5],[-27,-28],[-25,-39],[-33,-20],[-35,6],[-15,15],[-13,23],[-13,9],[-15,0],[-31,-9],[-31,-18],[11,-25],[3,-29],[-14,-23],[-10,-28],[32,-17],[26,-28],[-39,-13],[-38,-18],[-34,-29],[-36,-23],[-56,-2],[-70,-12],[-141,-5],[-66,37],[-12,17],[-13,12],[-44,19],[-63,57],[-50,64],[-33,6],[-49,21],[-27,19],[-25,24],[-8,29],[3,26],[29,12],[-69,29],[-68,39],[25,13],[25,6],[202,-46],[14,6],[22,23],[-8,7],[-34,5],[-46,0],[-11,5],[-18,24],[-16,30],[-6,20],[-3,23],[34,35],[19,32],[-29,14],[-83,-1],[-28,-4],[10,-45],[-26,-31],[-51,-25],[-36,12],[-28,60],[-37,41],[-14,26],[-10,38],[-15,27],[-27,33],[-3,20],[3,16],[20,34],[-15,28],[-19,25],[-1,14],[18,18],[16,6],[17,-2],[51,-21],[28,-25],[9,2],[19,38],[25,8],[100,12],[111,-48],[29,-10],[23,-4],[-12,21],[-7,28],[17,10],[89,-24],[42,1],[98,33],[163,16],[62,-25],[3,-14],[-2,-18],[-3,-5],[-36,-22],[-206,-17],[-134,-66],[183,10],[33,-7],[14,-55],[13,-5],[48,-8],[32,-16],[32,-31],[34,-21],[21,3],[7,22],[-8,27],[-5,30],[3,33],[5,27],[39,19],[56,62],[59,42],[66,-19],[62,-53],[55,-74],[53,-80],[60,-99],[29,-35],[27,-8],[121,-103],[13,-3],[-25,78],[-62,133],[-43,102],[-9,39],[-7,54],[3,16],[5,14],[31,59],[40,28],[-12,40],[10,31],[42,24],[39,2],[38,-19],[73,-65]],[[59034,97994],[-263,-22],[-27,16],[427,63],[22,6],[80,8],[68,-14],[-20,-11],[-287,-46]],[[55205,98099],[-60,-32],[-100,24],[12,26],[23,15],[64,-6],[61,-27]],[[55804,98069],[28,-6],[153,2],[30,-14],[11,-34],[24,-12],[32,-3],[81,-42],[28,-6],[24,23],[19,58],[0,68],[-7,33],[9,21],[27,8],[34,-2],[34,12],[29,21],[31,3],[67,-16],[18,-13],[-18,-25],[-7,-37],[-31,-75],[66,-4],[93,15],[24,22],[50,35],[53,-5],[25,4],[13,15],[5,18],[29,-3],[40,-34],[19,-6],[34,9],[13,0],[34,-14],[157,-25],[54,-14],[24,-12],[23,-8],[167,1],[118,-9],[43,-20],[37,-38],[14,-88],[-33,-24],[-239,-108],[-60,-35],[-29,-32],[-48,-70],[-24,-21],[-112,-34],[-26,-3],[-84,16],[-25,-2],[-102,-36],[-36,-22],[-34,-27],[-51,-13],[-53,7],[-237,14],[-32,20],[-26,37],[47,48],[-265,-18],[-292,10],[-15,6],[-13,19],[-100,12],[-75,15],[-64,26],[-62,33],[20,15],[20,9],[54,4],[48,-4],[85,0],[20,33],[34,10],[27,24],[-90,15],[-94,2],[-62,-20],[-73,-9],[-66,-1],[-127,6],[-60,14],[-83,36],[-28,21],[-11,16],[-9,24],[95,21],[36,17],[36,24],[-142,13],[-60,19],[-59,29],[48,16],[192,13],[51,-11],[50,-21],[56,-12],[53,27],[-50,12],[-46,45],[-9,22],[6,17],[23,3],[18,-7],[67,-42],[51,-14],[14,39],[2,19],[-9,15],[-24,28],[-21,35],[33,9],[33,-4],[70,-24],[71,-17],[32,-16],[61,-42],[56,-29]],[[96376,51545],[-5,-20],[-6,3],[-3,13],[2,14],[7,6],[5,-5],[0,-11]],[[96993,21602],[15,-29],[-29,-13],[-14,11],[-10,13],[-5,19],[15,-2],[14,8],[14,-7]],[[96172,22602],[6,-48],[-16,-1],[-32,14],[-9,21],[-7,5],[-12,-24],[-18,-1],[-5,8],[8,25],[44,49],[8,61],[-1,19],[35,5],[8,-8],[3,-8],[-2,-11],[-14,-20],[0,-23],[3,-24],[-11,-12],[6,-21],[6,-6]],[[96706,24848],[0,-23],[-29,9],[1,-26],[23,-14],[8,-18],[24,5],[5,-28],[-5,-24],[-16,-19],[-47,-9],[-31,-36],[-26,6],[-7,-3],[-30,-39],[-34,-12],[-9,3],[5,34],[25,33],[0,31],[7,25],[24,18],[0,33],[16,29],[-10,62],[6,57],[47,3],[53,-97]],[[96317,25543],[-1,-28],[-3,-14],[-10,0],[-14,3],[-14,13],[-10,-4],[-7,5],[10,32],[33,17],[12,-14],[4,-10]],[[96382,25817],[12,-69],[-25,14],[-11,20],[20,35],[4,0]],[[1062,26312],[-12,-5],[1,32],[-4,22],[21,7],[9,-26],[-15,-30]],[[1062,26647],[-10,-15],[-17,0],[-30,-58],[2,44],[-9,17],[-26,-4],[-4,-10],[17,-12],[4,-6],[-17,-25],[17,-55],[15,2],[14,-43],[0,-13],[-33,-16],[-17,-23],[-16,1],[-7,4],[-9,41],[0,17],[19,30],[11,31],[-9,28],[-22,19],[-48,-9],[-11,6],[24,38],[26,-4],[28,28],[108,-13]],[[98309,28304],[-38,-34],[2,23],[7,51],[17,26],[8,1],[17,19],[-1,-42],[-12,-44]],[[98087,28064],[32,-3],[29,43],[31,34],[32,28],[49,66],[12,9],[32,12],[14,16],[15,4],[-14,-39],[-17,-13],[-3,-14],[10,-22],[-15,-32],[0,-39],[-18,-46],[28,19],[10,30],[-5,17],[12,34],[18,16],[-7,25],[0,20],[23,-7],[11,0],[9,8],[16,4],[4,-23],[21,3],[-8,-28],[-16,-33],[-4,-20],[-27,-33],[-18,-14],[28,-4],[40,44],[24,39],[-1,-48],[-19,-44],[-17,-28],[-19,-8],[-18,-23],[-9,-36],[1,-25],[5,-19],[19,-32],[-21,-63],[24,8],[13,-12],[18,-36],[-11,-42],[-8,-22],[-47,-88],[-20,-44],[-24,-29],[1,-47],[-14,-34],[-70,-117],[-12,-25],[-55,-186],[-35,-78],[-20,-27],[-21,-22],[-51,-36],[-23,-43],[-25,-35],[-26,-8],[1,-15],[17,-9],[13,-23],[-10,-26],[-19,-16],[-19,-5],[-10,-17],[46,12],[13,-13],[3,-29],[5,-26],[11,-34],[39,-21],[35,-10],[7,-16],[5,-55],[-6,-26],[-8,-18],[-12,-6],[-28,-3],[-29,12],[-19,33],[-54,-11],[-15,-7],[-7,6],[30,34],[-16,20],[-13,7],[-14,-11],[-9,-18],[-3,-30],[-10,-17],[-15,-5],[-21,25],[-21,35],[-30,36],[4,-22],[24,-54],[12,-36],[-28,-29],[-28,-22],[-25,-13],[-22,-20],[-27,-32],[-15,-11],[-39,-1],[-21,-10],[-7,-42],[-15,-27],[-34,-5],[12,-9],[8,-13],[-23,-126],[-5,-53],[-4,-89],[-14,-83],[-41,0],[6,-15],[31,-23],[-6,-36],[-34,-64],[-14,-38],[-14,-90],[-20,-84],[-32,-95],[0,-17],[11,-25],[13,-20],[1,-30],[-4,-16],[-15,-4],[-13,-10],[-71,-26],[-24,-29],[-19,-53],[-22,-45],[-74,-100],[-44,-83],[-9,-24],[-12,-18],[-95,-39],[-68,-6],[-37,10],[-36,20],[-19,7],[-38,-13],[-16,-13],[-30,13],[-23,-10],[-7,10],[-9,25],[5,32],[-6,24],[-15,17],[-10,19],[-12,13],[-31,6],[-49,-9],[-16,1],[-34,80],[-11,20],[-39,25],[-14,-3],[-21,-43],[-13,-7],[-74,-5],[-75,14],[-28,16],[-5,37],[57,102],[-17,-14],[-35,-41],[-22,6],[21,45],[2,20],[-4,23],[-30,-38],[-33,-5],[-4,35],[3,41],[7,11],[89,22],[33,14],[14,22],[-54,7],[-3,31],[7,25],[46,41],[-33,-11],[-38,4],[3,43],[9,34],[40,1],[-13,23],[-1,33],[11,2],[39,-44],[29,-16],[-12,33],[2,21],[7,9],[24,7],[-7,6],[-22,8],[-26,25],[-3,26],[1,31],[28,42],[17,-25],[20,7],[-15,19],[-9,30],[6,19],[60,78],[15,-75],[4,25],[1,24],[-7,20],[1,21],[7,18],[25,17],[34,58],[25,26],[20,-17],[13,-23],[-2,23],[-9,19],[-3,53],[45,81],[49,78],[48,82],[25,29],[54,34],[34,-14],[9,3],[51,58],[21,16],[19,-21],[12,-8],[-12,54],[10,24],[42,44],[54,45],[40,19],[30,30],[18,1],[-3,23],[3,22],[16,-2],[5,9],[-14,12],[44,44],[24,48],[13,10],[11,15],[14,34],[17,11],[15,-5],[11,-17],[-6,27],[-20,16],[22,24],[22,16],[21,-12],[21,-19],[-21,30],[-3,18],[25,21],[14,6],[19,-39],[-2,31],[4,28],[28,45],[36,75],[11,-26],[2,-32],[-2,-38],[8,14],[2,34],[-5,61],[45,113],[8,12],[10,8],[16,3],[-5,17],[-12,17],[12,57],[8,65],[10,63],[17,62],[18,102],[14,22],[38,7],[16,15],[28,37],[32,67],[18,54],[23,140],[13,147],[37,108],[54,79],[48,60],[19,12],[33,4],[32,-17],[-59,-14],[-6,-36],[-2,-35],[7,-33],[11,-28],[28,-27],[33,-16],[15,-61],[3,-72],[5,-62],[13,-54]],[[98761,30944],[2,-31],[-21,11],[-8,24],[-24,24],[-4,8],[-2,48],[12,23],[2,10],[6,3],[10,-25],[19,-36],[8,-59]],[[98129,31719],[5,-26],[15,18],[11,30],[19,30],[-3,-48],[10,-11],[61,-34],[13,-28],[13,-8],[7,16],[9,8],[22,-18],[50,-49],[4,-17],[-2,-25],[2,-27],[7,-21],[17,-5],[22,31],[10,4],[15,-45],[6,-25],[-3,1],[10,-25],[12,-25],[22,-74],[-3,-26],[-6,-23],[20,-68],[-13,-5],[-40,12],[1,-14],[23,-50],[20,-71],[15,-42],[55,-132],[-8,-47],[1,-31],[-7,-26],[19,-70],[-12,-22],[-8,-72],[-8,-12],[1,-26],[22,-7],[13,-11],[12,-22],[7,26],[10,7],[26,-34],[55,-34],[15,-13],[8,-27],[5,-67],[11,-29],[21,-6],[23,9],[7,24],[-5,66],[-16,104],[0,34],[2,33],[-3,34],[-9,32],[-8,24],[-12,21],[4,32],[17,14],[10,-27],[9,-32],[42,-97],[26,7],[2,-40],[17,-41],[10,-47],[12,-143],[19,-133],[35,-59],[4,-28],[-21,15],[-7,-9],[2,-14],[20,-25],[23,-13],[14,2],[14,-9],[90,-87],[43,-34],[109,-56],[31,-4],[17,2],[33,19],[29,34],[25,52],[22,59],[23,28],[27,23],[14,21],[14,15],[73,-7],[25,-30],[32,-24],[16,-18],[-5,-38],[-19,-56],[-15,-61],[-13,-138],[-9,-141],[-13,-61],[-24,-48],[-27,-34],[-30,-17],[-12,-79],[-6,-93],[1,-24],[10,-18],[4,-28],[-16,-56],[-9,8],[-13,47],[-12,19],[-36,15],[-37,7],[-32,-5],[-31,-20],[-47,-40],[-14,-21],[-13,-26],[-21,-58],[-5,-70],[1,-38],[7,-28],[40,-40],[-39,-136],[-35,-143],[-20,-40],[-23,-38],[-21,-85],[-38,-74],[-25,-56],[-20,-59],[-17,-62],[-37,-88],[-16,-58],[-22,-48],[-40,-61],[-42,-53],[-67,-73],[-18,-24],[-20,-18],[-24,21],[-5,23],[-6,49],[-5,19],[-31,15],[-41,-24],[-7,5],[-2,11],[0,73],[7,20],[-9,12],[-10,-5],[-3,-18],[6,-16],[-23,-20],[-25,-1],[-7,8],[-2,13],[6,22],[8,20],[45,91],[47,122],[40,130],[11,67],[15,125],[-12,51],[-16,49],[-40,94],[-55,53],[-35,7],[-33,20],[-31,45],[-29,53],[-56,43],[-60,34],[-34,48],[-8,29],[-5,33],[0,30],[5,32],[6,24],[11,17],[63,62],[67,35],[12,-1],[12,6],[17,21],[30,48],[8,33],[6,104],[10,102],[17,116],[26,73],[9,44],[-11,73],[10,27],[12,16],[13,10],[-23,69],[-26,104],[-6,32],[4,32],[7,31],[-17,8],[-10,30],[-24,101],[7,16],[14,-11],[20,-73],[4,38],[16,23],[16,12],[18,2],[-40,82],[-14,-4],[-18,-13],[-19,-7],[-18,7],[-17,18],[-8,34],[-11,66],[-7,24],[-53,135],[16,4],[43,-67],[8,21],[7,31],[-3,35],[-10,26],[-15,17],[-1,30],[12,28],[-1,20],[-24,40],[-10,4],[-5,-18],[7,-28],[-6,-3],[-61,73],[-18,58],[-15,65],[-2,-26],[2,-37],[24,-74],[39,-82],[7,-22],[-6,-29],[-14,-8],[-11,18],[-18,71],[-13,35],[-148,365],[19,48],[29,41],[7,18],[5,22],[-13,3],[-11,-10],[-13,-18],[-11,-22],[-15,-47],[-7,-11],[-17,33],[-7,20],[0,24],[-4,16],[-13,5],[-19,48],[-12,24],[20,47],[1,62],[-21,65],[-24,60],[-47,96],[-43,102],[47,13],[47,2],[-22,-61],[10,-35],[15,-30],[32,-91],[3,-27],[16,-26],[8,-21]],[[2448,46454],[0,-2],[-2,3],[-2,5],[-1,6],[1,1],[2,-4],[1,-4],[1,-5]],[[2089,46900],[-1,-1],[-1,6],[-2,7],[-1,7],[0,1],[3,-6],[2,-7],[0,-7]],[[66311,63489],[-17,-8],[-6,4],[1,73],[40,91],[27,106],[19,-94],[-33,-53],[-17,-91],[-14,-28]],[[65663,66232],[28,-152],[42,-142],[37,-78],[38,-106],[59,-98],[27,-33],[108,-69],[60,-25],[82,-25],[57,-53],[19,-3],[29,15],[22,-1],[54,-73],[16,-69],[23,-36],[20,-57],[13,-60],[45,-92],[33,-103],[33,-76],[29,-47],[44,-19],[36,-21],[4,-51],[-4,-67],[-7,-49],[-33,-96],[-8,-59],[-37,-97],[-41,-163],[-18,-37],[-66,-84],[-48,-102],[-57,-176],[-43,-174],[-17,-56],[-35,-12],[-23,5],[-15,17],[6,47],[4,54],[-21,-6],[-19,-11],[-43,-131],[-24,-57],[-5,-73],[-12,-94],[-16,-86],[-8,-73],[0,-41],[13,-101],[1,-103],[7,-62],[6,-74],[-20,-23],[-18,-11],[-68,-8],[-70,-24],[-61,-43],[-37,-43],[-47,-95],[-29,-243],[-47,-103],[-31,-21],[-76,-9],[-106,-28],[-38,-25],[-62,-148],[-5,-47],[12,-34],[4,-37],[-5,-35],[-29,-94],[-30,-68],[-81,-43],[-30,25],[-27,13],[-53,2],[-86,-17],[-31,-50],[-50,-36],[-46,-55],[-87,-21],[-59,-43]],[[64745,61433],[-16,76],[-17,76],[-17,75],[-17,76],[-12,54],[-20,18],[-12,56],[-12,58],[-12,58],[-13,57],[-12,58],[-12,57],[-12,58],[-13,57],[-12,58],[-12,57],[-13,58],[-12,57],[-12,58],[-13,57],[-12,58],[-12,58],[-12,57]],[[64438,62785],[39,27],[48,33],[47,33],[48,33],[48,33],[48,33],[47,33],[48,33],[48,33],[48,33],[48,33],[47,33],[48,33],[48,33],[48,34],[48,33],[47,33],[30,20],[12,77],[10,64],[10,63],[11,64],[10,64],[10,64],[10,63],[10,64],[10,64],[11,64],[10,63],[10,64],[10,64],[10,64],[11,64],[10,63],[10,64],[9,58],[-17,57],[-24,75],[-25,79],[-23,75],[-17,54],[-20,65]],[[65577,66856],[24,83],[9,13],[8,-6],[22,9],[11,45],[9,25],[10,-3],[4,-14],[-3,-69],[0,-57],[-12,-175],[-13,-30],[-6,-25],[-2,-34]],[[68934,65585],[-4,-34],[-10,-26],[-13,38],[-9,17],[-9,-13],[-14,2],[-26,42],[-11,-43],[-42,-9],[-5,32],[-1,30],[-23,-22],[-17,34],[-7,45],[-6,12],[-8,15],[-17,15],[-16,48],[-1,51],[-4,60],[-33,224],[-20,21],[-110,39],[-6,40],[8,105],[-3,66],[-36,88],[-10,61],[-29,52],[-29,15],[-30,-7],[-15,-20],[-9,-35],[63,8],[14,-13],[17,-23],[-18,1],[-21,11],[-26,-1],[-98,-26],[-56,-37],[-76,11],[-96,-36],[-79,-2],[-33,-71],[-18,12],[-14,18],[-109,56],[-7,23],[-18,17],[-20,-30],[-15,-5],[-59,25],[-46,-19],[-17,-32],[-1,-50],[-57,10],[-32,15],[-43,-17],[-98,23],[-25,-6],[-36,-33],[-15,-26],[-21,-10],[-18,36],[-14,16],[-13,-10],[-18,-30],[-50,-14],[-46,4],[-49,28],[6,9]],[[27332,56067],[-15,-3],[-31,24],[-23,48],[-2,15],[1,16],[12,49],[17,17],[6,0],[16,-57],[-11,-21],[5,-35],[22,-26],[3,-27]],[[28037,56597],[-12,-25],[-5,24],[9,25],[3,0],[5,-24]],[[28084,56609],[-6,-24],[-13,54],[2,14],[-1,49],[13,13],[9,1],[7,-7],[5,-58],[-4,-26],[-12,-16]],[[27157,57246],[-3,-27],[-21,49],[12,8],[5,-1],[7,-29]],[[28361,56007],[-8,16],[-67,165],[-58,205],[-12,93],[15,6],[14,-3],[8,15],[9,27],[-7,63],[28,47],[11,32],[7,-3],[19,-55],[26,-31],[33,-46],[21,-10],[-26,47],[-44,63],[-13,42],[-12,57],[-17,-25],[-8,-21],[-9,-12],[-8,15],[-1,18],[-26,4],[-7,17],[-7,9],[3,-36],[5,-22],[-2,-27],[-9,-1],[-7,27],[-9,25],[-13,105],[-29,49],[-14,16],[-11,7],[-17,33],[-22,18],[-29,52],[-37,37],[-44,14],[-54,-9],[-19,-20],[-12,-27],[-6,-12],[-32,-30],[-12,-43],[-7,-37],[-16,-42],[18,-25],[-104,-142],[-21,-20],[-47,-15],[-11,-15],[-14,-28],[-2,-42],[2,-37],[14,-28],[12,-17],[29,-85],[52,-106],[9,-39],[8,-57],[-15,-27],[-12,-11],[-49,-5],[-17,-23],[-7,-35],[-18,-29],[-64,-28],[-49,-3],[-16,33],[-4,92],[-33,158],[-8,108],[-8,-13],[-18,-13],[-6,-27],[-5,-80],[-6,-27],[-14,2],[-28,29],[-37,26],[-48,170],[-5,32],[-9,38],[-37,16],[-32,29],[-34,4],[-17,-16],[-18,21],[-3,46],[-36,-21],[-47,7],[-41,20],[-28,-10],[-24,-33],[4,-85],[-7,-16]],[[27065,57359],[18,-31],[36,-54],[2,-27],[-3,-26],[10,-74],[18,-10],[19,14],[5,-14],[-4,-13],[-9,-15],[-3,-64],[31,-30],[15,-26],[51,13],[19,-7],[13,7],[-14,51],[-19,38],[1,17],[15,-13],[11,-25],[25,-32],[46,-111],[53,-26],[42,3],[39,15],[63,43],[45,78],[36,34],[116,74],[42,77],[17,10],[17,10],[36,58],[20,45],[21,23],[62,-16],[39,-22],[28,3],[27,-15],[11,-33],[12,-14],[65,3],[54,-16],[117,-98],[70,-97],[37,-103],[90,-133]],[[14364,37789],[-3,-9],[-6,8],[-6,16],[-2,18],[6,10],[7,-6],[4,-18],[0,-19]],[[30439,41275],[-20,39],[-91,130],[-34,69],[-32,33],[-78,111],[-8,36],[-9,114],[-11,32],[-26,41],[-68,55],[-26,28],[-27,50],[-40,36],[-44,72],[-26,59],[-29,38],[-91,54],[-45,54],[-85,76],[-38,49],[-91,59],[-27,28],[-90,138],[-62,46],[-51,77],[-153,166],[-24,53],[-23,81],[-34,49],[-38,112],[-57,66],[-54,87],[-20,80],[-36,101],[-11,54],[-32,53],[-2,107],[-22,49],[16,24],[17,11],[21,165],[-12,83],[-56,151],[-21,72],[-15,93],[-22,55],[-34,116],[-21,102],[-45,75],[-12,27],[-7,38],[-25,26],[-1,79],[-17,150],[-25,76],[-90,140],[-2,55],[-7,99],[-20,106],[-99,332],[-26,99],[-25,161],[-22,91],[-25,162],[-37,123],[-24,107],[-25,133],[-2,71],[-45,122],[-24,112],[-42,94],[-42,72],[-18,50],[-58,240],[-8,71],[-40,132],[-40,95],[-25,76],[-32,69],[-195,212],[-69,88],[-23,42],[-10,66],[4,38],[20,36],[28,-27],[17,11],[13,47],[1,72],[-17,92],[-63,177],[5,38],[12,42],[-24,86],[-27,68],[-13,53],[15,200],[14,51],[95,203],[26,86],[40,54],[42,82],[49,62]],[[83402,54871],[-7,-35],[-9,-16],[-12,9],[-9,18],[-5,-27],[-24,-10],[-15,-41],[-23,-12],[-15,6],[2,36],[43,55],[27,21],[23,39],[12,5],[6,-33],[6,-15]],[[83655,55342],[15,-41],[19,11],[30,-12],[6,-22],[-1,-14],[-32,-40],[-21,42],[-38,-29],[-18,17],[-24,-15],[-15,33],[6,31],[39,51],[34,-12]],[[83914,55546],[-28,-8],[-9,0],[-22,59],[-2,26],[-18,29],[6,29],[23,7],[40,38],[64,-59],[10,-21],[-20,-13],[-14,-56],[-30,-31]],[[84939,55853],[-4,-32],[-17,77],[-7,19],[9,65],[19,-32],[0,-97]],[[84148,56111],[3,-14],[-1,-14],[-29,-27],[-9,1],[-3,44],[7,21],[14,-18],[12,21],[6,-14]],[[82521,56384],[-14,-44],[-16,50],[1,70],[5,20],[24,11],[0,-107]],[[82598,56575],[-19,-14],[-4,36],[2,35],[14,-3],[6,-11],[1,-43]],[[84668,57109],[-8,-34],[-31,28],[-8,25],[4,29],[15,10],[8,0],[15,-31],[5,-27]],[[84360,57164],[2,-60],[-25,-18],[-21,16],[-13,36],[0,13],[11,-1],[26,31],[8,7],[12,-24]],[[84991,57369],[-5,-15],[-8,31],[7,68],[5,11],[7,-43],[-6,-52]],[[85001,57212],[22,-35],[30,9],[-1,-87],[5,-26],[27,-74],[4,-62],[-16,-58],[-12,-27],[-22,-40],[0,-18],[9,-20],[31,-12],[23,-32],[4,-91],[22,-71],[-1,-31],[-9,-128],[3,-54],[16,-44],[14,-19],[8,-27],[6,-75],[-1,-128],[-2,-44],[-10,-42],[-30,-94],[-40,-75],[-22,5],[-6,-22],[13,-68],[-5,-145],[-9,-100],[-13,51],[-9,53],[-9,140],[-10,64],[-16,57],[-7,52],[-16,48],[-22,125],[-14,-7],[-23,-34],[-5,-23],[-3,-36],[-6,-32],[-27,-51],[-22,-60],[-17,-67],[-6,-61],[15,-47],[15,-20],[21,-42],[7,-20],[23,-139],[-1,-141],[-17,-63],[-42,-119],[-30,-37],[-17,19],[-13,72],[-2,29],[9,68],[1,62],[-10,21],[-12,-4],[-4,-9],[-27,-81],[-12,-21],[-17,-3],[-13,6],[-81,71],[-66,70],[-51,65],[-38,99],[-8,74],[0,77],[-17,113],[-2,38],[2,37],[16,70],[20,35],[12,25],[9,28],[6,37],[-2,37],[-7,23],[-32,82],[-27,50],[-57,45],[-13,24],[-14,19],[-16,8],[-16,0],[-16,-14],[-5,-29],[2,-27],[-2,-26],[-24,-148],[-30,32],[-29,38],[-7,26],[-4,32],[-5,21],[-6,19],[-14,-49],[-16,-39],[-20,-10],[-21,0],[-7,17],[-7,94],[-22,30],[-27,-7],[-33,-52],[-6,-19],[-7,-45],[-36,-127],[-19,-98],[-21,-96],[-9,-31],[-13,-21],[-19,9],[-18,23],[-17,61],[6,72],[19,45],[15,49],[19,171],[1,61],[4,26],[31,77],[26,48],[13,10],[57,28],[23,23],[36,0],[30,13],[24,37],[2,38],[-2,40],[6,24],[9,21],[12,27],[15,20],[40,15],[14,16],[10,27],[16,50],[17,-13],[18,-19],[33,-16],[28,-42],[19,-66],[3,-32],[5,-108],[-7,-26],[-28,-50],[13,-5],[36,46],[19,17],[45,25],[11,16],[7,24],[16,66],[12,71],[9,29],[13,23],[13,4],[47,-48],[31,23],[8,73],[7,106],[6,29],[17,28],[21,-9],[28,-38],[27,-13],[9,31],[10,61],[10,-1],[36,-20],[34,13],[10,73],[-7,78],[-27,226],[16,51],[14,1],[34,-60],[65,-81],[22,-50],[14,-61]],[[85016,57468],[-4,-3],[-15,45],[2,51],[21,76],[15,-67],[0,-30],[-2,-15],[14,-37],[-10,-19],[-21,-1]],[[84799,57593],[2,-29],[-35,75],[-8,53],[12,-2],[16,-20],[13,-77]],[[84609,57480],[-3,-21],[-22,2],[-8,-3],[-20,-54],[-12,-14],[-66,-18],[-52,14],[-18,30],[-12,49],[-3,33],[13,35],[12,24],[42,46],[10,35],[22,43],[45,14],[4,-11],[6,-6],[9,-2],[23,-35],[25,-23],[-6,-85],[7,-28],[4,-25]],[[84913,57554],[-5,-16],[-6,33],[-17,31],[-15,53],[-11,16],[7,42],[1,68],[16,31],[7,10],[11,33],[6,2],[5,-28],[-11,-85],[16,-100],[-6,-62],[3,-14],[-1,-14]],[[83309,57883],[-34,-18],[-8,56],[24,51],[28,-21],[16,-20],[-8,-18],[-18,-30]],[[84531,57952],[-7,-3],[13,61],[10,-9],[3,-6],[0,-28],[-19,-15]],[[84068,57875],[-7,-8],[-7,2],[-16,-21],[-6,39],[5,66],[25,50],[6,16],[7,10],[8,1],[8,-20],[2,-30],[-16,-90],[-9,-15]],[[84202,57064],[-18,-6],[-20,3],[-13,28],[-22,122],[-26,30],[-30,22],[-15,19],[-14,23],[-42,122],[-3,74],[7,42],[13,38],[14,10],[35,1],[18,5],[40,56],[3,22],[0,92],[-4,64],[-10,62],[11,29],[14,28],[14,55],[3,39],[0,41],[4,29],[12,14],[54,44],[10,4],[71,-41],[14,-62],[1,-20],[-11,-69],[-9,-46],[-24,-71],[-18,-77],[-13,-115],[-8,-38],[-22,-72],[-7,-40],[0,-86],[-4,-32],[0,-31],[44,-143],[4,-23],[0,-26],[-8,-32],[-18,-55],[-10,-19],[-17,-14]],[[84269,57286],[-11,-15],[-4,38],[3,51],[21,179],[-5,45],[36,100],[22,93],[32,99],[5,51],[29,97],[27,134],[-1,45],[7,22],[4,33],[0,29],[20,50],[6,-33],[-6,-64],[1,-30],[3,-14],[0,-60],[-7,-91],[7,-105],[-13,-107],[-15,-48],[-21,-34],[-24,-21],[-25,-53],[-15,-62],[-3,-57],[-39,-192],[-34,-80]],[[84376,58342],[16,-76],[-22,0],[-8,56],[10,18],[4,2]],[[82586,56704],[-26,-42],[3,52],[7,49],[26,99],[19,31],[31,78],[18,38],[42,75],[39,82],[13,6],[14,1],[12,9],[25,45],[63,147],[53,110],[54,139],[26,41],[7,15],[49,128],[16,18],[17,14],[12,17],[11,22],[17,56],[8,65],[-5,37],[-10,54],[13,74],[9,34],[35,150],[10,31],[14,-19],[2,-27],[-7,-64],[0,-31],[8,-33],[-10,-53],[25,-142],[19,-89],[1,-30],[-26,-53],[-15,-17],[-33,-14],[-15,-15],[-23,-44],[-15,-57],[-4,-30],[-7,-23],[-68,-39],[-31,-25],[-15,-19],[-7,-31],[5,-55],[-57,-199],[-18,-51],[-19,-45],[-24,-31],[-33,-19],[-27,-39],[-18,-68],[-22,-61],[-28,-45],[-30,-40],[-28,-30],[-30,-20],[-9,-27],[-6,-33],[-14,-16],[-15,-8],[-28,-33]],[[83294,58482],[6,-31],[-8,-46],[-7,-10],[-8,19],[-20,14],[-1,24],[10,0],[18,24],[10,6]],[[84603,58377],[20,-21],[22,9],[27,45],[30,-16],[18,-68],[9,-25],[5,-44],[-2,-106],[-7,-95],[6,-20],[14,-17],[12,-22],[10,-27],[7,-30],[2,-74],[18,-62],[2,-24],[-4,-25],[-29,5],[-3,-21],[1,-27],[-10,17],[-17,60],[-16,26],[5,-99],[5,-47],[1,-47],[-27,36],[-33,23],[-9,19],[4,61],[-1,31],[-14,64],[16,140],[0,29],[-3,28],[-13,57],[-21,47],[-13,0],[-32,-33],[-16,11],[-9,131],[-13,127],[-9,32],[-7,34],[6,28],[13,-11],[17,-34],[21,-19],[10,-16],[7,-30]],[[84613,58463],[-35,-4],[-15,26],[-19,78],[21,16],[21,-4],[15,-27],[15,-52],[-3,-33]],[[84681,58522],[-5,-30],[-8,8],[-7,14],[-11,44],[-3,33],[16,-18],[9,-33],[9,-18]],[[84026,58533],[32,-29],[32,25],[31,-7],[26,-38],[-9,-24],[-1,-27],[57,58],[16,-3],[-1,-54],[-3,-46],[-7,-44],[-12,-52],[-17,-46],[-21,-33],[-26,-21],[-12,-19],[-4,-28],[1,-35],[-6,-32],[-27,-14],[-42,-62],[-90,-40],[-25,-27],[-16,-36],[-17,-32],[-10,-8],[-4,15],[-1,13],[13,84],[-3,35],[-6,33],[4,66],[16,62],[8,68],[3,132],[12,182],[-1,22],[-9,25],[-35,20],[-14,19],[7,36],[13,25],[18,-1],[16,-23],[57,-48],[30,-40],[27,-51]],[[83343,58584],[-21,-19],[-5,12],[-3,28],[0,20],[-20,104],[15,15],[11,-12],[12,-16],[10,-9],[10,-32],[-2,-23],[3,-22],[-10,-46]],[[83360,58852],[15,-9],[11,8],[10,31],[9,-45],[22,-37],[-7,-38],[-20,-4],[-19,8],[-21,-15],[-25,9],[-14,35],[-17,63],[-9,12],[1,26],[6,16],[-3,4],[2,12],[3,8],[5,3],[13,-28],[32,-42],[6,-17]],[[84070,58933],[-14,-13],[-29,56],[-17,26],[-4,15],[13,21],[37,0],[19,-39],[3,-24],[-8,-42]],[[84788,59059],[20,-47],[4,-34],[-2,-38],[9,-16],[16,-5],[20,-19],[15,-35],[-9,-32],[3,-47],[-16,-58],[2,-105],[9,-33],[1,-33],[-2,-36],[4,-28],[24,-96],[5,-32],[-8,-25],[-2,-24],[15,-2],[21,-40],[12,-53],[-3,-13],[-17,41],[-13,6],[-55,-11],[-33,17],[-22,2],[-21,70],[-19,12],[-15,31],[-25,79],[-8,46],[18,46],[5,37],[-1,36],[-17,-6],[-14,12],[-17,44],[-7,25],[-13,22],[-20,50],[-30,20],[-11,14],[-24,42],[-16,53],[-17,92],[-9,95],[76,-25],[76,5],[86,22],[25,-26]],[[84365,58921],[53,-69],[37,-116],[4,-89],[-3,-35],[-17,39],[-38,54],[-26,12],[-8,10],[3,30],[-17,27],[-2,11],[-15,12],[-23,61],[-16,12],[-15,-13],[-35,-91],[-37,-64],[-1,25],[15,79],[10,128],[6,39],[-8,57],[-1,51],[28,-24],[35,-23],[27,-33],[4,-22],[40,-68]],[[83974,59060],[-8,-18],[-5,3],[-4,31],[8,21],[3,-3],[6,-34]],[[83914,58959],[-22,-143],[-15,49],[6,31],[-13,26],[-3,24],[5,31],[13,29],[3,94],[29,30],[11,1],[-4,-23],[1,-43],[-11,-106]],[[84381,59017],[1,-51],[-10,19],[-34,99],[-9,36],[9,24],[25,-37],[18,-90]],[[84244,59247],[24,-88],[-26,60],[-30,41],[-31,67],[-23,24],[-6,14],[2,28],[17,5],[7,-2],[45,-119],[21,-30]],[[83528,59607],[14,-5],[45,18],[18,-9],[12,-33],[15,-10],[12,-17],[23,29],[22,-33],[20,-63],[24,-44],[22,-33],[5,-25],[-14,-40],[-4,-50],[2,-55],[16,-114],[-5,-31],[-18,-44],[-12,-49],[1,-20],[-5,-16],[-1,-35],[-11,7],[-9,-5],[-9,-16],[-15,-33],[-23,10],[-10,10],[-3,29],[-7,20],[-9,12],[-24,50],[-11,38],[-1,40],[-6,37],[-12,33],[-16,26],[-6,24],[-2,29],[-1,75],[-24,92],[-8,23],[-21,22],[-18,30],[-8,29],[-7,48],[-5,7],[-14,-3],[-13,7],[3,35],[14,25],[19,3],[51,-14],[14,-11]],[[83864,59642],[18,-1],[5,5],[33,-48],[-2,-24],[4,-33],[-19,-55],[-3,-19],[-11,-18],[-35,44],[-13,27],[-4,56],[14,81],[13,-15]],[[83408,59764],[0,-40],[-47,58],[-1,20],[1,14],[5,9],[25,-21],[17,-40]],[[84542,59695],[-8,-37],[-9,13],[-12,-2],[-21,-32],[-33,43],[-5,33],[24,73],[0,109],[8,27],[9,19],[11,11],[23,-75],[8,-10],[22,-34],[-5,-70],[2,-41],[-14,-27]],[[83937,59935],[-1,-23],[-60,85],[-3,15],[0,13],[4,14],[60,-104]],[[83897,60486],[5,-20],[-5,1],[-4,-4],[-13,-41],[14,-77],[-9,-56],[-16,-4],[-6,6],[3,28],[4,12],[-3,37],[-10,23],[-7,44],[-12,27],[6,43],[36,5],[17,-24]],[[83638,62566],[43,-30],[94,-108],[34,-27],[36,-20],[28,-5],[26,24],[10,25],[20,67],[20,8],[13,-24],[9,-33],[5,-47],[-6,-50],[-20,-44],[-12,-54],[-8,-177],[0,-53],[7,-51],[17,-81],[9,-23],[26,-29],[7,-22],[1,-39],[4,-35],[17,-13],[14,-18],[-5,-38],[-9,-40],[-12,-96],[-55,-223],[-3,-48],[-22,-96],[-45,-16],[-52,-46],[-28,-36],[-25,-47],[-10,-62],[8,-28],[5,-30],[0,-32],[-8,-27],[-25,-65],[-10,-54],[-11,-24],[-6,-29],[2,-33],[10,-29],[30,-125],[33,-121],[7,-14],[2,-16],[-19,-32],[1,-58],[5,-58],[29,-142],[4,-38],[10,-31],[14,-30],[17,-24],[46,-42],[18,-9],[19,-1],[4,28],[17,10],[-4,28],[-20,38],[0,21],[10,16],[13,9],[28,42],[29,34],[38,-3],[37,-19],[27,-19],[22,-37],[22,-62],[16,-69],[-1,-33],[-3,-33],[0,-33],[12,-22],[36,-1],[18,51],[3,58],[-13,22],[6,28],[11,22],[16,-19],[15,-36],[56,-39],[14,-1],[11,-8],[25,-27],[12,-21],[-14,-45],[-56,-10],[-16,-34],[17,-68],[26,-55],[17,-45],[15,-49],[0,-45],[-9,-46],[24,3],[23,-9],[32,-40],[10,-4],[10,7],[-1,-141],[-22,-129],[-27,16],[-23,54],[4,67],[15,64],[-8,13],[-15,-5],[-17,-14],[-19,-5],[-30,8],[-62,70],[-26,6],[-6,32],[2,67],[-25,80],[-4,28],[-8,23],[-74,86],[-9,15],[-23,69],[-52,98],[-14,10],[-16,3],[-5,-25],[7,-38],[3,-33],[-1,-35],[2,-27],[25,-54],[3,-26],[17,-70],[2,-82],[-21,-34],[-24,38],[-1,31],[-4,28],[-25,75],[-8,16],[-48,73],[-37,81],[-82,86],[-9,5],[-15,-7],[-13,-10],[-40,-43],[-14,-29],[-1,-46],[-28,-36],[-39,-5],[-30,22],[-25,46],[-21,2],[-25,71],[-31,9],[-26,-55],[-5,109],[0,111],[7,33],[13,27],[65,116],[8,38],[-3,50],[-15,40],[-23,25],[-27,10],[-19,23],[-15,38],[-11,-67],[10,-98],[2,-65],[-9,-24],[-17,0],[-16,7],[-11,23],[-9,67],[-23,43],[-9,63],[-10,9],[-21,-5],[-16,29],[-10,74],[-2,78],[-9,66],[-13,64],[-7,52],[-12,235],[-2,21],[-6,18],[-15,27],[-11,32],[-2,27],[3,115],[5,28],[11,13],[16,-22],[12,-28],[15,-14],[14,-17],[25,-69],[10,-10],[31,2],[18,8],[9,25],[5,30],[1,35],[-18,103],[-6,74],[0,67],[5,67],[24,112],[3,77],[-2,104],[4,61],[-1,36],[-14,55],[-4,60],[41,302],[13,58],[9,61],[4,80],[31,22],[29,33],[15,-3],[15,-8],[36,17],[13,1]],[[83866,62727],[-17,-42],[-10,12],[10,40],[0,14],[8,31],[15,11],[13,-31],[-19,-35]],[[83680,62835],[-1,-39],[-14,20],[-3,30],[1,21],[6,26],[9,-23],[2,-35]],[[83755,62996],[3,-52],[-17,1],[-24,32],[-3,16],[1,13],[4,11],[36,-21]],[[83877,63574],[-5,-7],[-8,3],[8,55],[14,15],[11,-6],[-20,-60]],[[83854,63814],[-13,-47],[-11,0],[2,26],[14,55],[5,-1],[3,-33]],[[86436,53586],[-6,-3],[-4,2],[0,8],[4,9],[6,4],[4,-3],[0,-8],[-4,-9]],[[87387,56095],[-17,-12],[-8,44],[3,51],[11,39],[12,13],[2,4],[12,51],[3,-28],[-8,-93],[-9,-37],[-1,-32]],[[92648,45232],[46,-30],[16,-34],[-17,-15],[-40,-10],[-10,20],[-39,21],[-6,37],[-19,-13],[10,27],[-25,29],[-7,40],[-1,16],[28,-19],[64,-69]],[[92855,45298],[-4,-31],[-10,10],[-30,-16],[-16,4],[-9,28],[-3,13],[27,-10],[-5,31],[38,-16],[12,-13]],[[91915,45757],[-4,-45],[-22,13],[-5,10],[4,28],[20,1],[7,-7]],[[91966,46071],[12,0],[20,43],[17,13],[11,-20],[-18,-137],[-16,21],[-60,38],[-2,54],[-15,18],[-10,53],[-20,58],[-4,38],[12,-16],[12,-38],[53,-79],[-2,-25],[10,-21]],[[91813,46459],[39,-48],[21,14],[12,-7],[25,-55],[1,-40],[4,-34],[-1,-15],[-14,-21],[1,24],[-10,4],[-37,-1],[-28,15],[-39,3],[16,37],[4,14],[-21,59],[0,28],[1,15],[17,8],[9,0]],[[91762,46374],[-4,-14],[-16,10],[-46,80],[7,59],[21,30],[31,-33],[10,-49],[3,-27],[-6,-56]],[[92397,46682],[16,-9],[33,4],[11,-33],[16,-11],[13,-15],[12,-22],[0,-13],[-3,-12],[-7,-10],[2,-23],[-12,3],[-16,-12],[-30,27],[-11,6],[-3,24],[-19,39],[-35,28],[18,23],[15,6]],[[89885,46869],[5,-25],[-40,35],[-39,58],[-19,15],[-13,38],[24,-28],[41,-27],[41,-66]],[[91973,46812],[5,-41],[-22,44],[10,50],[2,27],[-1,15],[-22,26],[11,42],[13,14],[7,4],[0,-59],[6,-27],[-9,-95]],[[89884,46957],[-12,-2],[-49,39],[-12,29],[57,-7],[15,-7],[3,-40],[-2,-12]],[[91117,48486],[-11,-4],[-5,26],[-26,23],[-26,70],[1,60],[3,18],[15,1],[57,-70],[6,-22],[-4,-66],[-10,-36]],[[93321,47991],[-7,-54],[-5,-10],[-7,21],[-24,-20],[-11,-22],[-13,-17],[-28,4],[-27,15],[-26,28],[-23,35],[-23,55],[-14,57],[7,66],[-9,60],[-44,43],[-10,14],[-19,59],[-19,26],[-25,52],[-6,23],[-11,66],[-3,40],[9,116],[-4,58],[12,-5],[13,-23],[15,-16],[35,-11],[27,-46],[25,-90],[4,-30],[8,-21],[26,-38],[14,-25],[26,-98],[15,-21],[17,-9],[16,-14],[27,-43],[24,-49],[17,-51],[12,-55],[9,-70]],[[90881,48714],[-15,-4],[-26,55],[-6,21],[3,28],[32,39],[21,-35],[4,-75],[-13,-29]],[[92957,48713],[-6,-4],[-12,72],[-2,54],[-4,40],[-6,24],[18,43],[8,12],[13,-23],[2,-51],[11,-43],[-8,-95],[-14,-29]],[[90560,49120],[-19,-17],[-13,13],[-6,38],[5,36],[16,29],[10,9],[12,-20],[4,-38],[-9,-50]],[[92198,49368],[14,-12],[42,60],[22,-42],[28,-20],[30,-12],[-12,-86],[4,-40],[7,-40],[-1,-59],[-13,-52],[-26,-76],[-12,-15],[-13,-8],[-43,-6],[-8,-40],[3,-43],[23,-57],[18,-63],[-18,-59],[-30,-40],[-29,-21],[-47,12],[-50,-5],[-10,-22],[0,-37],[-7,-28],[-9,-25],[-25,-53],[-29,-46],[-38,-45],[-13,-10],[-35,-7],[-31,-26],[-13,-25],[-15,-20],[-33,-22],[-32,-43],[-12,-8],[-66,-7],[-95,-2],[-28,-5],[-27,6],[-15,17],[-32,79],[-28,26],[-30,0],[-41,-28],[-8,6],[-80,116],[-25,28],[-26,21],[-32,15],[-30,23],[-18,55],[2,72],[24,42],[37,-21],[14,0],[14,12],[16,-4],[17,-10],[60,15],[34,-22],[34,-29],[32,-6],[32,6],[43,33],[14,-4],[42,0],[36,44],[14,177],[9,60],[13,14],[9,-4],[13,-30],[-17,-38],[-8,-29],[-2,-71],[9,-69],[22,-54],[32,-7],[29,36],[32,7],[30,-35],[30,6],[14,23],[16,10],[16,4],[14,13],[20,60],[13,67],[19,52],[52,88],[15,11],[17,6],[37,-4],[27,32],[2,70],[-4,72],[-31,167],[-2,27],[4,30],[9,27],[31,0],[32,-10],[13,-25],[14,-20]],[[92682,49481],[-2,-13],[-17,15],[14,30],[6,2],[-1,-34]],[[92408,50038],[-7,-51],[-17,30],[-12,42],[8,20],[19,11],[9,-52]],[[92249,50145],[-3,-29],[-9,1],[-24,57],[-4,15],[5,14],[28,-42],[7,-16]],[[92209,50212],[-6,0],[-1,46],[4,24],[16,-16],[2,-42],[-15,-12]],[[89158,50228],[0,70],[0,39],[0,2]],[[89158,50339],[9,0],[28,-1],[22,-9],[140,-125],[41,-50],[14,-12],[14,-1],[14,-6],[62,-69],[94,-69],[99,-67],[31,-14],[31,-6],[69,-23],[37,-21],[53,-82],[27,-25],[25,-46],[35,-50],[15,-12],[15,-6],[35,-2],[35,9],[15,-4],[14,-9],[13,-17],[6,-33],[22,-47],[31,-20],[29,-42],[27,-50],[19,-50],[22,-43],[34,-18],[35,-2],[120,-253],[6,-39],[1,-165],[-13,-129],[30,-40],[40,-15],[58,-28],[55,-41],[175,-174],[24,-15],[35,-6],[36,3],[13,-9],[26,-32],[14,-20],[24,-57],[21,-61],[9,-18],[11,-13],[6,-33],[9,-103],[-3,-64],[-9,-24],[-28,-11],[-99,-11],[-65,12],[-46,-65],[-2,-28],[4,-27],[40,-137],[23,-121],[20,-50],[29,-40],[26,-48],[24,-54],[50,-95],[27,-36],[31,-21],[53,-74],[7,-33],[16,-103],[6,-69],[1,-29],[4,-26],[46,-63],[11,-18],[20,-140],[16,-66],[27,-23],[31,2],[85,42],[12,1],[16,-10],[14,-23],[4,-63],[-13,-66],[-4,-64],[17,-52],[43,-41],[16,-12],[78,-13],[30,-11],[30,-17],[11,-16],[-8,-28],[-15,-14],[-18,-6],[-29,-20],[1,-36],[16,-38],[15,-45],[12,-17],[14,-11],[33,-15],[33,-22],[22,-22],[22,-15],[48,-10],[36,-29],[51,12],[-44,-47],[-15,-11],[-53,17],[-10,-18],[22,-50],[32,-34],[12,-19],[-9,-23],[-37,-46],[-16,-6],[-29,-4],[-50,20],[-35,25],[-9,34],[-10,20],[-31,49],[-23,26],[-28,9],[-30,-1],[-53,28],[-116,20],[-27,12],[-35,39],[-16,6],[-18,-13],[-44,-7],[-13,3],[-32,33],[-33,12],[-14,-9],[-14,-3],[-44,24],[-34,10],[-28,33],[-15,30],[-17,28],[-16,70],[-24,67],[-31,54],[-65,89],[-13,22],[-25,81],[1,54],[9,54],[-14,-19],[-16,3],[-44,36],[-18,42],[-30,116],[-19,62],[-44,108],[-13,64],[-18,56],[-12,21],[-9,24],[-9,32],[-12,21],[-62,48],[-11,16],[-12,8],[-46,5],[-26,8],[-50,39],[-26,12],[-31,7],[-30,15],[-15,15],[-10,25],[-6,59],[-25,-7],[-25,10],[-24,21],[-24,13],[-17,-18],[-5,-47],[-8,-2],[-14,9],[-7,-5],[-16,-22],[-12,-29],[-23,4],[-47,30],[-21,18],[-18,34],[-15,37],[-16,30],[-19,22],[24,-51],[56,-228],[-14,-4],[-14,6],[13,-44],[-15,-6],[-15,0],[-32,19],[-31,6],[-10,-9],[7,-16],[11,-49],[9,-50],[-46,-23],[-46,-14],[-52,-27],[-53,-2],[-27,16],[-28,8],[-26,-8],[-25,-20],[-21,3],[-14,36],[-6,27],[-8,23],[-20,-4],[-19,-12],[33,-2],[10,-30],[8,-36],[23,-32],[29,19],[61,-5],[60,-57],[14,-7],[13,-11],[31,-56],[24,-51],[19,-59],[4,-23],[-1,-61],[-6,-30],[-39,-43],[-41,-33],[-61,-63],[-59,-73],[-31,15],[-28,38],[-10,10],[-29,21],[-18,7],[-69,-16],[-70,-8],[-30,1],[-28,12],[-32,22],[-31,-10],[-21,-26],[-23,-4],[-44,59]],[[92490,49103],[-21,-44],[-13,41],[-16,36],[-13,36],[-17,79],[0,40],[4,42],[1,43],[-8,87],[-19,78],[-68,189],[-21,49],[-24,44],[-16,11],[-31,10],[-14,9],[-26,31],[-24,36],[-60,106],[-31,30],[-17,37],[-94,120],[-27,28],[-34,0],[-28,24],[22,15],[5,40],[-5,41],[47,-67],[50,-58],[14,-47],[25,-3],[45,-38],[30,-35],[29,-40],[33,-58],[62,-45],[9,-17],[32,-75],[42,-64],[14,-35],[177,-301],[30,-85],[2,-58],[-6,-22],[-19,-49],[1,-58],[-6,-51],[-16,-52]],[[91787,50309],[-55,-8],[-20,9],[-18,33],[-16,52],[-16,12],[-7,11],[39,39],[35,12],[56,-49],[6,-25],[0,-16],[-1,-53],[-3,-17]],[[91076,50527],[-9,-30],[-21,3],[-9,9],[15,6],[6,25],[7,8],[11,-21]],[[90851,50713],[93,-37],[6,1],[-1,13],[1,4],[6,-10],[-2,-27],[-15,-7],[-13,3],[-10,-15],[-26,-52],[-18,9],[-22,-12],[-38,-1],[-50,23],[-13,-20],[-18,6],[-17,-22],[-8,1],[-4,32],[1,16],[20,13],[-3,50],[17,25],[29,-3],[27,17],[58,-7]],[[91601,50948],[-1,-21],[-20,11],[-6,-3],[-34,60],[0,37],[9,31],[15,-5],[25,-39],[12,-71]],[[55445,83213],[11,-7],[78,-7],[79,-8],[127,-8],[132,-9],[137,-9],[148,-9],[157,-6],[9,4]],[[56556,81519],[15,-40],[6,-31],[-6,-25],[2,-24],[13,-26],[42,-80],[21,-77],[13,-30],[31,-39],[2,-16],[-12,-15],[-10,-1],[-8,-4],[-5,-14],[8,-15],[11,-21],[13,-61],[-1,-50],[-10,-13],[-14,-29],[-8,-27],[-73,-19],[-17,-29],[-40,-56],[-27,-32],[-40,-59],[-64,-100],[-23,-42],[-17,-34],[-51,-92],[-16,-39],[3,-32],[17,-75],[3,-34],[-3,-31],[-5,-28],[1,-12],[15,-20],[24,-32],[1,-10],[-3,-14],[-9,-11],[-30,11],[-33,22],[-12,-3]],[[56260,80110],[-18,5],[-75,42],[-51,32],[-5,21],[-9,31],[-22,25],[-49,22],[-21,18],[-80,9],[-35,1],[-24,-7],[-16,0],[-22,-45],[-15,-13],[-22,-1],[-19,8],[-20,23],[-31,13],[-23,-6],[-16,5],[-15,1],[-5,-4],[-11,0],[-17,-11],[-18,-16],[-21,-12],[-15,-27],[-14,-51],[-39,23],[-13,-10],[-19,-7],[-13,7],[3,18],[6,20],[0,28],[-4,31],[-12,10],[-18,4],[-10,6],[-1,10],[-9,13],[-16,33],[-16,41],[-10,13],[-15,-20],[-24,-22],[-14,-8],[-28,-64],[-51,-2],[-3,30],[-5,28],[-29,8]],[[53960,82793],[64,-33],[26,-19],[-3,21],[-5,18],[3,27],[-2,40],[-57,20],[-38,7]],[[53947,82920],[11,-11],[37,-4],[92,54],[159,70],[170,66],[40,7],[40,14],[14,24],[15,17],[23,43],[51,68],[91,24],[34,32],[70,45],[162,50],[67,11],[66,1],[59,-39],[62,-49],[12,-30],[-34,19],[-49,44],[-18,2],[42,-134],[22,-47],[47,-36],[39,-11],[119,21],[43,28],[12,14]],[[31146,62246],[-2,-1],[-3,1],[-1,1],[-2,6],[-8,8],[-2,8],[2,9],[3,3],[16,1],[2,-1],[3,-6],[0,-4],[-1,-4],[-3,-10],[-1,-2],[-1,-3],[-1,-5],[-1,-1]],[[31826,62272],[-22,-3],[-14,4],[-5,17],[27,16],[30,-2],[18,-10],[2,-6],[-36,-16]],[[31630,62468],[9,-12],[8,2],[-6,23],[6,0],[53,-14],[34,-24],[35,-12],[3,-80],[-27,-32],[-18,-34],[-15,-41],[-38,-48],[-45,-14],[-31,-1],[-11,1],[-11,9],[-23,-8],[-29,21],[-24,-5],[-48,5],[-18,-19],[-18,-4],[-17,4],[-14,8],[-36,-1],[-15,16],[6,91],[1,41],[-9,35],[-10,21],[-7,25],[14,17],[12,24],[4,37],[12,9],[15,4],[69,-17],[173,-10],[10,-3],[6,-14]],[[84695,74617],[-16,-17],[0,30],[12,25],[12,3],[-8,-41]],[[86257,76345],[7,-35],[18,-34],[9,-25],[2,-26],[8,-15]],[[86301,76210],[-14,-16],[-19,10],[-31,6],[-39,-51],[-22,-17],[-16,-50],[-31,-30],[-17,-31],[-22,-54],[-14,-53],[-33,-54],[-20,-67],[-1,-58],[21,-59],[2,-51],[-15,-104],[9,-110],[-10,-43],[-102,-76],[-26,-37],[-38,-98],[-46,-36],[-28,-40],[-39,-24],[-26,-69],[-27,-39],[-33,-24],[-25,-30],[-55,-2],[-39,-21],[-27,-58],[-83,-66],[-12,-49],[6,-77],[0,-58],[-7,-49],[-18,14],[-10,-16],[-11,-44],[4,-51],[28,-17],[23,-20],[33,-11],[24,-24],[52,-107],[42,-47],[11,-17],[24,-24],[22,-37],[13,-33]],[[85175,73606],[-3,5],[-14,4],[-56,47],[-46,-29],[-12,-37],[-12,-12],[-19,73],[-30,2],[-48,65],[-21,-14],[-5,-25],[-26,-60],[-37,-48],[-12,-7],[-13,3],[2,14],[-15,55],[-58,22],[-21,23],[-11,5],[57,62],[15,11],[-11,14],[-12,7],[-47,-9],[-24,20],[-36,-7],[-24,16],[51,60],[2,36],[-1,27],[26,80],[26,44],[67,62],[30,9],[21,-3],[17,6],[-18,24],[-18,11],[-35,-2],[-36,36],[-3,38],[70,240],[1,22],[-11,58],[-3,57],[-51,33],[-22,4],[-64,64],[-26,33],[-10,-10],[-2,-51],[-9,-12],[-17,-10],[-9,59],[-14,42],[-42,44],[-16,23],[8,52],[-4,4]],[[45224,70776],[38,-30],[35,14],[43,-39],[23,-9],[-20,-27],[-21,-36],[-50,9],[-42,34],[-15,25],[-5,24],[14,35]],[[43048,73133],[-2,-11],[-15,5],[-20,-4],[-11,31],[10,13],[22,3],[11,-14],[5,-23]],[[42875,73640],[17,-4],[89,9],[24,-6],[-3,-43],[-17,-17],[-52,-11],[-82,27],[-27,37],[-4,26],[0,13],[17,10],[38,-41]],[[42181,73993],[23,-23],[-35,-5],[-11,-11],[-29,16],[-33,-3],[-22,31],[-5,33],[11,20],[30,0],[71,-58]],[[42044,74034],[-29,-1],[-27,44],[40,23],[12,-14],[8,-16],[6,-21],[-10,-15]],[[42283,74052],[-13,-7],[-74,44],[-26,21],[-34,50],[96,-61],[51,-47]],[[42479,74103],[-6,-6],[-58,16],[-16,21],[-7,39],[10,13],[25,8],[37,-7],[24,-28],[0,-36],[-9,-20]],[[41350,74542],[-12,-27],[-21,10],[-7,10],[6,59],[17,14],[17,-24],[0,-42]],[[47942,73259],[-24,-6],[-95,-94],[-29,0],[-55,41],[-96,14],[-32,12],[-39,-27],[-30,1],[-25,-35],[-17,10],[20,77],[31,152],[-1,93],[7,81],[-8,80],[-16,50],[21,130],[-2,67],[-19,84],[59,-13],[-19,34],[-18,20],[-17,-4],[-15,1],[-50,-33],[-25,-10],[-8,6],[3,52],[-13,68],[20,18],[24,5],[20,29],[12,33],[-7,57],[18,55],[40,46],[-21,-7],[-24,-29],[-38,-104],[-12,-53],[-33,-17],[-29,-9],[-14,6],[-18,13],[-2,39],[2,31],[12,62],[4,88],[18,78],[-2,21],[-5,31],[16,30],[19,20],[28,68],[40,160],[47,170],[-4,21],[-10,15],[4,46],[28,200],[11,26],[13,59],[3,94],[5,65],[-1,33],[-4,39],[-18,75],[-18,159],[-2,53],[15,26],[-25,4],[-11,35],[2,38],[28,63]],[[59499,69886],[52,92],[25,59]],[[11526,39828],[-8,-11],[3,15],[-6,32],[-6,4],[6,10],[9,-25],[2,-25]],[[12140,41160],[-5,-12],[-1,12],[-7,6],[-11,12],[-15,14],[-8,3],[-4,8],[6,4],[9,-6],[12,-13],[15,-13],[9,-15]],[[10921,41255],[3,-21],[-6,10],[-22,20],[-2,17],[27,-26]],[[11952,41277],[0,-11],[-26,55],[10,-4],[16,-40]],[[10880,41365],[2,-16],[-10,10],[-10,30],[-17,36],[-4,15],[13,-14],[9,-21],[17,-40]],[[10886,41557],[2,-11],[-11,1],[-3,4],[1,20],[7,25],[6,21],[11,20],[21,19],[11,8],[3,-5],[-4,-2],[-35,-41],[-10,-29],[-5,-20],[1,-6],[5,-4]],[[8522,41653],[40,-27],[7,-44],[-8,-29],[-21,7],[-10,16],[-14,52],[-39,-12],[-27,11],[-15,67],[0,31],[6,19],[29,20],[36,-15],[13,-38],[3,-58]],[[8385,41736],[-9,-15],[-11,11],[-5,14],[-2,15],[2,19],[26,-3],[8,-8],[-9,-33]],[[7942,42120],[-11,0],[-10,9],[2,59],[3,12],[15,-20],[13,-52],[-12,-8]],[[10155,42269],[15,-28],[-20,19],[-25,8],[9,5],[15,0],[6,-4]],[[10119,42260],[-11,-3],[-27,34],[11,0],[15,-21],[12,-10]],[[7926,42247],[-5,-4],[-6,10],[-2,16],[2,26],[13,-17],[6,-11],[-8,-20]],[[9587,42436],[1,-10],[-6,1],[-10,29],[-4,25],[-6,29],[-9,21],[-1,19],[0,30],[10,-46],[9,-37],[8,-31],[8,-30]],[[10413,42571],[-5,-7],[7,46],[7,6],[-9,-45]],[[9708,42709],[-2,-26],[-5,25],[-17,40],[-7,18],[8,-3],[23,-54]],[[11486,45785],[-10,-9],[-1,61],[13,-12],[5,-9],[-2,-17],[-5,-14]],[[11372,46122],[-20,-45],[-1,48],[8,6],[7,0],[6,-9]],[[11382,46258],[42,-30],[13,3],[-13,-29],[-42,-16],[-14,-15],[-16,9],[-9,35],[39,43]],[[11090,46413],[-6,-11],[-11,35],[-2,14],[20,18],[11,-9],[-12,-47]],[[11234,46693],[-18,-5],[-3,29],[6,15],[8,7],[13,-9],[8,-12],[-1,-11],[-13,-14]],[[11091,46710],[-27,-14],[-13,3],[-10,47],[3,29],[5,9],[46,-11],[4,-22],[-1,-20],[-7,-21]],[[64240,66017],[-25,-12],[-23,-12],[-20,0],[-15,5],[-11,12],[-20,49],[-14,63]],[[64112,66122],[8,35],[3,22],[-19,167],[-6,128],[2,26],[11,30],[19,66],[9,65],[28,148],[29,57],[43,42],[35,-82],[43,-63],[8,-70],[-13,-57],[-11,-90],[7,-42],[2,-36],[12,-61],[11,-78],[2,-55],[-6,-51],[-15,-42],[-29,-129],[-9,-13],[-36,-22]],[[57836,78024],[29,-60],[38,-31],[86,-34],[7,4],[1,6],[-6,9],[-1,11],[4,14],[12,0],[20,-12],[37,18],[54,47],[50,10],[46,-28],[23,-33],[15,-31]],[[58251,77914],[-5,-38],[-3,-24],[-12,-99],[-8,-37],[-13,-42],[-142,-49],[9,23],[-3,42],[-6,31],[13,29],[-31,10],[-14,-15],[-11,-28],[9,-62],[-15,-35],[-6,-19],[-1,-46],[-9,-20],[-2,-21],[23,5],[-10,-39],[-43,-76],[-15,-45],[4,-180],[-19,-107],[-1,-32]],[[56306,77325],[-4,6],[-2,22],[-9,17],[-19,13],[-14,23],[-10,33],[2,31],[14,29],[19,13],[22,-4],[10,8],[-4,21],[-22,26],[-40,32],[-41,-17],[-42,-67],[-30,-11],[-18,45],[-33,27],[-47,8],[-29,17],[-10,26],[-21,20],[-45,21],[-1,21],[8,4],[16,2],[21,5],[4,11],[0,10],[-17,14],[-17,9],[-9,9],[-6,10],[-1,10],[5,8],[7,0],[7,6],[3,25],[10,20],[6,7],[0,14],[-7,14],[-9,12],[-14,7],[-43,21],[-22,29],[-13,1],[-22,16],[-22,26],[-20,36],[-21,23],[-6,9],[0,9],[3,10],[0,11],[-5,35],[3,38],[-1,34],[0,16],[-4,5],[-4,-5],[-5,-7],[-5,-1],[-16,25],[-20,52],[-13,17],[-26,24],[-22,20],[-16,43],[-17,34]],[[56354,79462],[10,10],[40,24],[10,25],[13,22],[18,-2],[57,-54],[61,3],[11,-2],[4,-1],[7,-5],[82,-27],[12,3],[4,3],[32,-23],[29,3],[28,16],[29,5],[26,-9],[20,-32],[52,-66],[15,-25],[24,3],[26,13],[27,44],[82,51],[62,12],[61,21],[71,14],[20,41],[12,29],[8,52],[38,15],[36,10],[13,7]],[[90567,76848],[-3,-1],[-2,7],[6,8],[11,9],[4,-5],[-4,-7],[-5,-4],[-7,-7]],[[90522,76877],[4,-3],[5,0],[5,1],[2,-6],[1,-11],[-3,-1],[-7,-2],[-4,-1],[-2,8],[-1,6],[-4,4],[0,4],[4,1]],[[90654,76972],[-7,-3],[-12,3],[-4,3],[2,5],[8,8],[6,-3],[5,-2],[2,-11]],[[90753,77041],[-9,-16],[-20,14],[1,32],[2,9],[57,28],[16,-18],[4,-15],[-51,-34]],[[90612,77475],[42,-42],[58,9],[-14,-38],[-22,1],[-39,-55],[-34,-7],[-17,-13],[-55,-82],[-8,-32],[-33,-62],[-50,-55],[-9,-104],[-32,42],[-4,42],[10,35],[57,74],[23,41],[7,34],[22,36],[10,32],[14,14],[48,131],[26,-1]],[[91277,77947],[-52,-40],[-42,-18],[-71,-84],[-26,-46],[-36,-19],[-35,11],[-10,-19],[-3,-33],[-13,-29],[-70,-91],[-29,-72],[-30,-13],[-56,-73],[10,63],[11,30],[47,56],[3,60],[26,51],[51,52],[35,67],[28,18],[31,56],[32,20],[-3,43],[14,48],[11,-3],[26,-67],[20,-2],[54,14],[80,116],[26,21],[19,3],[11,-9],[4,-14],[-1,-17],[-6,-25],[10,-29],[-13,-22],[-53,-4]],[[63328,78045],[-4,-10],[-13,53],[-1,32],[8,17],[11,-54],[-1,-38]],[[91579,78134],[-41,-29],[-26,1],[61,142],[36,21],[46,84],[97,103],[11,7],[56,-3],[-88,-113],[-11,-45],[-39,-48],[-28,-16],[-20,-23],[-54,-81]],[[92222,78857],[-52,-63],[-17,0],[-9,24],[-2,13],[42,10],[48,84],[35,55],[19,19],[16,-1],[-80,-141]],[[92527,79356],[-13,-33],[-14,4],[-5,9],[18,39],[8,7],[6,-26]],[[92799,79948],[-10,-30],[-12,10],[-2,9],[27,35],[10,41],[20,1],[8,-8],[-6,-20],[-35,-38]],[[93002,80248],[-27,-25],[-28,15],[0,50],[59,153],[21,-10],[-5,-36],[-22,-57],[7,-69],[-5,-21]],[[93310,80818],[-35,-57],[-52,-14],[-25,-19],[-19,-39],[-14,-21],[-30,12],[-13,19],[0,68],[-13,30],[6,19],[30,-3],[30,44],[69,18],[25,47],[31,117],[33,41],[26,9],[8,-58],[-7,-64],[-15,-62],[-35,-87]],[[93445,81023],[-11,-13],[-11,3],[-36,36],[-8,17],[13,30],[45,45],[22,-1],[9,-10],[-1,-53],[-22,-54]],[[93234,81118],[-26,-7],[-11,16],[-8,18],[-5,26],[29,12],[19,-14],[4,-38],[-2,-13]],[[89655,83175],[60,-145],[2,-32],[-5,-33],[-11,-42],[-4,-45],[7,-38],[-5,-10],[49,-176],[35,-111],[11,-45],[7,-48],[11,-99],[2,-151],[-3,-50],[-8,-49],[-8,-29],[-18,-20],[-8,-54],[-4,-153],[9,-80],[17,-56],[12,-60],[2,-64],[5,-29],[27,-36],[11,-28],[3,-40],[2,-59],[4,-13],[13,-18],[56,-426],[22,-129],[64,-223],[26,-135],[17,-64],[11,-68],[9,-69],[19,-76],[25,-74],[49,-67],[22,-37],[5,-30],[2,-103],[-11,22],[-14,79],[-24,45],[-35,54],[-35,48],[-44,80],[-21,23],[-23,16],[-41,18],[-24,2],[-98,-12],[-40,-16],[-37,-37],[-21,-54],[-16,-108],[-89,-386],[-21,-101],[-8,-108],[3,-85],[6,-31],[26,-84],[21,-49],[15,-21],[18,-14],[11,-17],[10,-23],[18,-57],[23,-128],[25,-91],[11,-28],[28,7],[18,-1],[18,-8],[10,-23],[15,-101],[11,-98],[1,-26],[-20,-75],[-5,-32],[-3,-34],[-5,-27],[-9,-23],[-3,111],[-14,79],[-5,68],[-19,47],[-65,20],[-61,7],[-9,9],[-14,29],[-15,23],[-16,3],[-16,-9],[-27,-33],[-21,-51],[-15,-56],[-13,-58],[-27,-155],[-16,-51],[-20,-48],[-17,26],[-15,30],[-9,43],[-4,48],[-24,161],[10,140],[41,194],[7,63],[-6,60],[-9,60],[-6,113],[1,25],[14,65],[17,62],[20,54],[9,64],[-13,159],[-29,108],[-37,102],[-7,28],[-2,27],[32,128],[11,62],[13,134],[12,74],[9,74],[3,373],[-3,55],[-20,117],[-1,67],[9,84],[13,65],[17,63],[0,129],[-32,119],[-24,52],[-37,63],[-28,35],[-14,27],[14,9],[10,21],[-24,33],[-15,50],[-2,196],[6,49],[18,55],[16,59],[14,137],[5,141],[-9,57],[-4,116],[8,29],[31,38],[49,23],[11,-7],[38,-45],[14,-2],[15,5],[29,21],[16,52],[-21,29],[12,37],[35,13],[3,32],[-13,4],[11,46],[7,45],[-10,42],[-57,104],[-36,76],[60,-1],[18,14],[14,32],[7,33],[19,-13]],[[96677,83274],[11,-30],[-112,106],[-52,56],[-13,36],[19,0],[23,-34],[32,-16],[48,-46],[44,-72]],[[88104,83582],[-34,-100],[-24,-1],[-18,21],[-39,-8],[-14,5],[23,31],[55,48],[23,-1],[22,10],[6,-5]],[[88316,83578],[25,-23],[39,4],[10,-15],[-31,-25],[-22,-52],[-7,-46],[-9,-18],[-25,-23],[-22,-30],[-19,-19],[-17,-6],[-37,99],[-18,28],[-52,-47],[-12,-1],[12,58],[30,63],[15,9],[30,85],[9,19],[93,-50],[8,-10]],[[55445,83213],[43,49],[28,52],[23,67],[3,46],[6,52],[37,21],[80,-3],[35,25],[44,62],[46,74],[15,32]],[[55821,83685],[-27,-55],[-74,-116],[23,-15],[27,-5],[32,-22],[30,-3],[53,18],[10,100],[3,90]],[[96291,83432],[-2,-84],[-34,43],[-16,34],[-23,6],[-16,16],[-26,41],[-31,54],[-10,27],[-4,34],[-21,31],[-67,60],[22,7],[28,26],[78,-16],[18,-7],[-13,-40],[5,-44],[43,-92],[21,-32],[28,-25],[20,-39]],[[91830,85840],[-22,-7],[-11,16],[-1,11],[34,25],[21,36],[13,-22],[4,-15],[-38,-44]],[[95453,85600],[-45,-54],[-7,9],[-4,12],[-1,19],[41,36],[42,91],[16,75],[-5,25],[-2,24],[123,47],[87,75],[16,-3],[15,-63],[9,-81],[-12,-49],[-94,-28],[-88,-54],[-91,-81]],[[59948,89390],[9,-23],[3,-37],[-9,-24],[5,-20],[-18,-14],[-27,46],[-17,1],[-17,20],[-8,33],[15,9],[7,-6],[33,24],[24,-9]],[[69450,90150],[-49,-7],[-54,44],[-51,86],[10,21],[31,-7],[51,-2],[33,-14],[44,-9],[-5,-40],[0,-16],[14,-17],[-14,-30],[-10,-9]],[[61864,90265],[-10,-8],[-55,27],[-5,21],[2,8],[22,6],[23,-7],[17,-27],[6,-20]],[[63962,91696],[5,-56],[-17,-23],[-16,-6],[-7,35],[-13,15],[-48,-41],[-22,-46],[-60,-66],[-123,-47],[-75,-20],[-68,-6],[-63,42],[-35,79],[-6,24],[-4,32],[1,33],[4,50],[7,49],[26,44],[60,52],[59,34],[31,8],[75,2],[214,-117],[48,-30],[27,-41]],[[68706,91894],[-22,-50],[-46,3],[-14,11],[-6,9],[52,54],[32,-2],[4,-25]],[[94851,91532],[-12,-1],[9,39],[1,17],[-27,28],[-50,21],[-13,17],[-3,50],[11,78],[-23,42],[8,37],[59,41],[24,31],[27,25],[4,-3],[27,-24],[-2,-52],[-20,-37],[-46,-14],[-6,-25],[6,-44],[1,-57],[5,-51],[28,-52],[6,-26],[-3,-25],[-11,-15]],[[96999,91923],[-79,-5],[-158,54],[-56,28],[-42,36],[-48,25],[-9,10],[7,21],[14,16],[54,43],[38,19],[45,4],[283,-76],[12,-16],[4,-14],[-4,-30],[-24,-6],[-9,-20],[-10,-61],[-5,-16],[-13,-12]],[[66791,92128],[9,-29],[-1,-53],[-11,-39],[-31,-6],[-31,-16],[-53,17],[-29,-11],[-30,-1],[-24,6],[-25,8],[-16,11],[1,30],[-22,43],[-34,14],[-31,5],[-35,13],[-17,-6],[-22,-16],[-14,5],[-76,92],[-12,21],[-8,24],[-11,15],[-26,64],[13,29],[26,19],[18,5],[32,43],[59,18],[12,-3],[11,-13],[61,-44],[33,-29],[28,-35],[30,-30],[89,-51],[60,-50],[61,-35],[16,-15]],[[68488,92477],[3,-23],[-15,8],[-19,26],[-11,32],[-4,64],[7,17],[6,9],[6,-2],[-1,-40],[28,-91]],[[94643,92639],[-19,-10],[-40,8],[-19,18],[1,42],[2,6],[33,-6],[22,-23],[20,-35]],[[64695,92951],[25,-42],[22,-31],[19,3],[14,-16],[4,-32],[-38,-54],[-6,-20],[16,-18],[4,-10],[-27,-8],[-5,25],[-15,24],[-32,19],[-13,16],[-14,38],[-53,40],[-34,-6],[-38,18],[-11,8],[-3,23],[16,19],[60,16],[29,-1],[31,-16],[-2,20],[3,8],[13,-3],[35,-20]],[[88321,93034],[-69,-49],[-27,6],[-28,24],[-15,5],[-15,-4],[-17,-10],[-22,-2],[-51,26],[-5,16],[5,8],[14,8],[10,0],[32,13],[149,5],[11,-3],[21,-23],[7,-20]],[[0,93051],[43,8],[43,15],[40,3],[40,-9],[41,2],[40,15],[32,-2],[33,-9],[122,-21],[23,-7],[39,-27],[22,-10],[22,-16],[23,-27],[43,-29],[65,-34],[14,-10],[10,-26],[-7,-30],[-83,-57],[-67,-15],[-129,-15],[-175,-43],[-72,-12],[-25,2],[-63,28],[-74,12],[99966,-10],[-65,-44],[-137,-11],[-81,-31],[-19,-2],[-40,103],[-6,26],[15,34],[41,42],[17,30],[96,54],[86,71],[47,11],[47,33],[-99967,8]],[[71564,93485],[-135,-5],[-67,9],[-10,11],[9,28],[69,42],[31,27],[32,46],[56,38],[47,0],[147,-45],[21,-28],[3,-13],[-58,-38],[-41,-14],[-63,-48],[-41,-10]],[[72083,93733],[-20,-6],[-152,23],[-53,30],[-16,27],[6,24],[141,117],[54,-33],[15,-31],[36,-38],[-1,-86],[-10,-27]],[[70738,93820],[-6,-5],[-14,10],[-42,15],[-71,39],[-22,27],[11,30],[16,20],[58,12],[53,-5],[35,-7],[66,-27],[-61,-17],[-26,-37],[3,-22],[11,-13],[-11,-20]],[[83405,93945],[-70,-26],[-60,0],[-42,46],[33,18],[57,7],[31,-6],[44,-29],[7,-10]],[[65366,94071],[130,-23],[97,-7],[59,-18],[22,-14],[-9,-36],[-17,-14],[-41,-47],[-6,-28],[7,-45],[-6,-33],[-13,-24],[-11,-10],[-73,0],[-27,-13],[-1,-26],[-5,-29],[-24,-42],[-48,-13],[-11,-16],[4,-27],[-17,-21],[1,-32],[9,-18],[2,-37],[33,-54],[-6,-22],[-26,-43],[-8,-53],[-21,-46],[48,-38],[21,-50],[19,-53],[57,-105],[62,-94],[114,-137],[122,-104],[48,-29],[116,-48],[20,-16],[19,-21],[-49,-39],[-51,-14],[-5,-18],[-28,-10],[-138,34],[-7,5],[-15,24],[-16,18],[-35,3],[-35,-11],[21,-22],[23,-7],[40,-41],[-17,-16],[-18,-2],[-82,55],[-7,-7],[-8,-16],[-40,18],[-10,-13],[-31,-6],[-25,15],[0,19],[-5,10],[-125,-15],[-52,0],[-51,7],[-61,36],[-11,-16],[-2,-19],[-23,8],[-51,29],[-37,12],[-133,28],[-94,34],[24,16],[40,8],[1,21],[-7,29],[-1,29],[23,20],[52,-9],[-7,32],[25,6],[47,-18],[18,11],[-75,41],[-82,58],[8,21],[-29,5],[-30,-1],[-25,34],[4,45],[22,31],[-13,6],[-127,-27],[-64,6],[-72,18],[-66,-26],[-67,-9],[-35,9],[-34,20],[-28,26],[-22,44],[-20,75],[-3,28],[4,62],[11,27],[28,52],[19,16],[43,25],[22,6],[51,-12],[51,-1],[22,14],[21,25],[15,32],[35,18],[10,10],[11,20],[12,31],[2,27],[10,26],[32,39],[-12,24],[5,16],[21,29],[-64,7],[-22,13],[-21,19],[6,18],[8,13],[64,48],[28,15],[31,7],[31,0],[33,-5],[32,7],[-34,33],[-3,22],[-13,53],[3,25],[14,21],[30,24],[43,8],[34,12],[33,19],[31,3],[63,-13],[31,3],[34,11],[97,40],[36,11],[38,-3],[50,-15],[55,-28]],[[69631,93948],[-82,-27],[-22,-2],[-50,7],[-22,-11],[-33,27],[2,24],[16,25],[9,31],[-6,78],[42,49],[56,19],[164,22],[23,-6],[33,-15],[25,-18],[33,-43],[26,-18],[40,-34],[12,-33],[-2,-30],[-75,-6],[-130,-25],[-59,-14]],[[71320,94150],[-26,-4],[-118,22],[-43,27],[16,18],[31,0],[140,-63]],[[70973,94156],[-45,-14],[9,26],[54,37],[100,19],[30,-8],[4,-6],[-42,-39],[-21,-13],[-89,-2]],[[89495,94409],[69,-25],[57,-28],[196,-135],[18,-28],[15,-35],[8,-123],[-11,-9],[-72,-6],[-98,14],[-70,5],[-68,0],[-60,17],[-147,16],[-115,45],[-120,33],[-25,4],[-75,-10],[-102,-43],[-28,-3],[-39,0],[-27,40],[65,14],[65,5],[63,14],[59,47],[29,38],[51,85],[28,31],[28,20],[30,6],[33,-3],[103,19],[70,6],[70,-11]],[[84594,94383],[-17,-1],[-32,15],[-8,21],[0,10],[26,8],[33,-5],[25,-19],[4,-7],[-31,-22]],[[73207,94511],[-14,-14],[-13,2],[-11,-7],[-70,21],[-95,9],[24,22],[68,13],[101,-17],[30,-19],[-20,-10]],[[72974,94522],[-27,-20],[-37,11],[-27,13],[-14,19],[14,10],[40,7],[24,-7],[21,-22],[6,-11]],[[87832,94420],[-21,-17],[-20,25],[-93,76],[-23,35],[-51,34],[-13,12],[-4,30],[67,-19],[113,-75],[62,-60],[-17,-41]],[[89169,94469],[-140,-47],[-27,2],[-63,48],[-23,103],[26,31],[29,11],[30,6],[123,4],[26,-5],[26,-13],[12,-19],[5,-24],[-14,-68],[-10,-29]],[[73543,94734],[-13,-34],[-78,17],[-11,14],[42,21],[38,12],[54,2],[-32,-32]],[[81496,94700],[-10,-27],[-15,-21],[-11,-26],[-19,-19],[-59,-24],[-46,-54],[-8,-5],[-163,30],[-26,9],[-53,33],[-75,31],[-39,46],[19,8],[19,4],[67,-6],[19,14],[10,39],[1,23],[5,18],[22,13],[241,-40],[93,-23],[28,-23]],[[74070,95035],[23,-11],[73,17],[14,-6],[20,-24],[-31,-45],[-23,-18],[-66,10],[-83,1],[-37,25],[20,26],[48,16],[28,15],[14,-6]],[[72825,95287],[10,-19],[4,-21],[-12,-6],[-36,1],[-20,-54],[-20,9],[-13,31],[-45,-21],[-12,5],[-21,24],[-13,5],[-9,16],[59,48],[36,-25],[24,1],[-5,29],[1,22],[30,9],[40,1],[2,-55]],[[90776,95259],[73,-4],[107,43],[14,1],[260,-15],[22,-15],[2,-30],[-8,-15],[-4,-22],[32,-21],[84,-4],[53,19],[156,-10],[128,-14],[49,-32],[38,-17],[31,-20],[23,12],[22,20],[18,4],[18,-4],[-49,-122],[-18,-14],[-69,-30],[-137,-42],[-67,-13],[-152,0],[-209,16],[-57,15],[-34,18],[-64,43],[-31,16],[-103,14],[-32,8],[-60,37],[-62,30],[-154,49],[10,56],[20,56],[24,50],[26,45],[28,13],[59,-41],[-1,-47],[14,-33]],[[87763,95281],[-57,-16],[-81,5],[6,42],[14,19],[19,46],[-9,35],[5,42],[10,33],[23,45],[25,-27],[17,-40],[15,-20],[62,-39],[12,-12],[-52,-48],[-5,-21],[16,-27],[-20,-17]],[[92467,95691],[-27,-20],[-64,33],[24,18],[43,12],[10,-6],[8,-13],[6,-24]],[[88902,95523],[28,-11],[34,7],[32,-15],[30,-61],[14,-16],[15,-11],[15,-5],[45,-2],[20,12],[15,28],[-1,28],[-4,29],[0,39],[7,34],[10,22],[13,14],[74,43],[52,42],[71,-16],[72,-38],[127,-80],[59,-23],[71,-21],[72,-8],[35,5],[69,22],[35,2],[436,-160],[15,-13],[14,-19],[-94,-24],[-61,-42],[-21,-29],[24,-24],[20,-32],[-133,-96],[-53,-25],[-54,-8],[-110,23],[-64,-1],[-62,20],[-69,58],[-29,29],[-25,40],[-8,64],[10,55],[37,16],[32,35],[5,15],[-17,31],[-108,5],[-68,-17],[-61,-18],[18,-117],[13,-37],[18,-27],[98,-123],[22,-17],[65,-24],[55,-53],[-97,-59],[-43,-17],[-42,-10],[-26,5],[-26,12],[-28,28],[-24,30],[-31,23],[-66,-5],[-61,-20],[-61,-14],[-180,-24],[-55,-15],[-55,-5],[-71,28],[-70,39],[-22,1],[-20,-11],[-17,-24],[-9,-38],[-23,-51],[-29,-36],[-31,-16],[-32,-2],[-33,10],[-32,16],[-215,56],[-25,17],[-24,25],[-65,79],[-32,19],[-33,8],[-64,40],[-59,64],[-12,20],[-4,32],[10,23],[51,-11],[34,1],[-21,119],[15,112],[25,19],[97,-13],[-31,37],[-26,49],[16,27],[18,19],[42,15],[56,7],[17,12],[16,19],[31,20],[62,8],[107,40],[29,-1],[27,-21],[26,-30],[28,-16],[88,-39],[60,-35],[85,-71]],[[76814,95782],[22,-9],[-6,-24],[-29,7],[-38,-12],[1,-20],[-15,-33],[-53,20],[-73,3],[-46,19],[-102,12],[3,27],[16,16],[59,-23],[54,26],[101,-13],[33,19],[73,-15]],[[76903,95736],[-15,-6],[-13,4],[-4,7],[1,29],[25,38],[1,12],[12,6],[31,-7],[15,-16],[2,-7],[-21,-38],[-34,-22]],[[81243,95979],[43,-39],[8,-25],[-13,-6],[-8,-9],[-3,-18],[-12,-1],[-38,19],[-27,31],[-40,7],[-42,31],[-9,13],[11,4],[75,-8],[32,14],[23,-13]],[[77107,95967],[-15,-9],[-29,4],[-24,22],[-9,35],[20,9],[57,-61]],[[91430,96001],[-209,-6],[14,16],[75,40],[191,21],[-38,-20],[-18,-41],[-15,-10]],[[68823,95758],[-111,-44],[-66,-30],[-65,-21],[-66,-15],[-104,-36],[-184,-46],[-116,-37],[-127,-30],[-134,-39],[-134,-27],[-33,-2],[-96,-38],[-75,-16],[-272,-85],[-125,-63],[-36,-5],[-36,3],[-30,-20],[-28,-33],[-59,-34],[-30,-31],[-30,-24],[-18,-8],[-34,2],[-16,-2],[-55,-27],[-10,-22],[59,-14],[13,-24],[-17,-16],[-38,-23],[-22,-23],[-40,-23],[-27,-7],[-65,1],[-4,-29],[11,-18],[-6,-16],[-22,-15],[-21,2],[-99,45],[-16,-15],[-7,-32],[-3,-34],[-13,-25],[-17,-13],[-31,-13],[-109,21],[-9,-20],[17,-25],[23,-54],[5,-22],[-13,-36],[-49,-56],[-187,-67],[3,-23],[21,-44],[5,-27],[-8,-26],[-24,-21],[-28,0],[-15,4],[-43,29],[-37,7],[-7,-14],[49,-39],[21,-51],[-23,-27],[-90,-61],[-47,-80],[-92,-35],[-57,-5],[-56,10],[-53,18],[-135,7],[-75,20],[-76,36],[-66,-3],[-56,-18],[-74,-39],[-47,75],[20,35],[-101,90],[-22,40],[25,19],[31,13],[59,36],[59,29],[61,9],[10,5],[25,43],[27,35],[25,20],[28,33],[89,134],[21,10],[184,26],[16,8],[-53,27],[-54,-1],[-25,9],[-14,19],[-8,22],[21,16],[71,81],[84,58],[78,35],[-19,9],[-25,23],[-95,-6],[-37,32],[-12,19],[-3,19],[31,25],[32,15],[35,-4],[35,-13],[28,-15],[27,-24],[23,1],[85,84],[-13,19],[-5,29],[9,14],[41,13],[27,5],[59,-6],[85,-18],[7,9],[21,56],[21,30],[86,50],[-5,15],[-4,25],[100,33],[65,33],[63,45],[32,9],[32,2],[65,19],[121,22],[71,22],[23,48],[45,17],[90,7],[35,-3],[20,-20],[39,1],[15,11],[16,17],[-5,29],[-1,37],[34,23],[13,5],[102,9],[60,-4],[125,-28],[65,-7],[87,9],[52,-5],[154,42],[261,39],[68,28],[67,33],[34,7],[35,2],[31,11],[61,28],[30,7],[33,0],[30,20],[26,43],[29,33],[79,43],[134,60],[121,23],[75,25],[32,2],[102,-12],[130,-33],[59,-36],[49,-47],[10,-17],[9,-30],[-14,-28],[-9,-28],[11,-22],[-95,-71],[-93,-78],[-16,-17],[-111,-27]],[[76745,96213],[-9,-11],[-12,-9],[-33,6],[-65,-16],[-25,9],[-24,18],[-88,-6],[-26,4],[42,22],[120,24],[188,62],[9,-30],[0,-14],[-38,-34],[-39,-25]],[[74864,96306],[-59,-3],[-34,15],[-10,10],[16,26],[23,17],[93,6],[17,-18],[-4,-15],[-42,-38]],[[79837,96337],[-32,0],[-9,27],[27,33],[34,0],[29,-10],[10,-5],[10,-12],[4,-18],[-73,-15]],[[63675,78534],[4,-26],[-34,-5],[-4,-31],[-8,-23],[-75,-51],[-19,0],[-16,-8],[1,-33],[4,-30],[13,-32],[-6,-14],[-11,-5],[-14,10],[-14,17],[-14,4],[-14,-4],[-64,-91],[-27,-23],[-30,-9],[-61,-34],[-19,2],[-17,12],[-15,-17],[-4,-42],[-17,29],[-18,23],[-8,7],[-4,-4],[17,-45],[1,-41],[-4,-23],[-7,-21],[-10,-12],[-11,-7],[-6,-73],[-12,-44],[-15,-40],[-21,-72],[-16,-31],[-13,-37],[-9,-51],[-12,12],[-10,22],[-6,-29],[-7,-25],[-32,-37],[-24,-36],[-11,-55],[-2,-33],[3,-30],[9,-17],[46,-20],[29,-25],[28,-47],[30,-40],[21,-51],[15,-64],[19,-123],[9,-129],[28,161],[24,29],[-6,-46],[-16,-69],[-17,-101],[-5,-74],[6,-64],[0,-30],[-13,-106],[7,-20],[11,-19],[29,-36],[21,-54],[5,-75],[12,-20],[14,-18],[72,-150],[41,-100],[21,-58],[22,-73],[12,-17],[14,-11],[27,-34]],[[61104,76854],[-29,31],[-99,146],[-52,98],[-170,225],[-22,17],[-90,33],[-37,26],[-91,161],[-41,-22],[-37,6],[-21,14],[-24,23],[-16,30],[-19,68],[-22,38],[-72,56],[-82,33],[-6,14],[-3,20],[71,38],[19,22],[-36,29],[-14,5],[-11,13],[20,22],[20,10],[31,-25],[35,-46],[31,-18],[14,22],[106,39],[7,30],[0,34],[-11,-2],[-6,8],[0,38],[16,51],[48,84],[25,116],[23,27],[16,-18],[-1,-27],[3,-20],[15,39],[14,53],[36,0],[24,-9],[26,6],[-49,88],[-66,87],[-28,-6],[-18,13],[-29,73],[-12,60],[28,-2],[28,-9],[53,42],[20,6],[31,-13],[44,-8],[-3,39],[-14,47],[53,34],[47,19],[91,68],[40,12],[5,15],[1,20],[-13,54],[-14,40],[-48,2],[-26,-55],[-72,-19],[-33,4],[26,36],[25,13],[8,15],[-52,-13],[-25,-37],[-76,-48]],[[60614,78969],[-2,25],[-1,23],[5,22],[13,14],[4,13],[0,10],[-11,6],[-9,5],[-2,14],[3,13],[9,18],[3,20],[1,41],[8,45],[22,30],[40,7],[36,25],[22,28],[28,70],[22,11],[44,-4],[28,-6],[64,-2],[75,4],[21,2],[12,25],[-1,44],[11,41],[20,76],[21,40],[-1,18],[-11,8],[-15,3],[-5,9],[1,17],[11,16],[-2,34],[-7,37],[-6,34],[-20,17],[-33,11],[7,41],[9,44],[15,25],[10,15],[31,-8],[22,7],[6,9],[-5,17],[-34,15],[-31,21],[-13,26],[-6,28],[21,16],[36,16],[24,38],[26,41],[11,29],[5,32],[0,36],[-19,36],[0,38],[10,26],[-4,20],[-14,11],[-20,-3],[-23,-14],[-26,3],[-43,45],[-46,45],[-26,1],[-18,7],[-16,23],[-9,29],[-11,13],[-16,-8],[-25,-13],[-30,3],[-39,35],[-36,39],[-27,1],[-28,6],[-53,51],[-14,-1],[-9,-15],[-4,-41],[-4,-8],[-10,-7],[-18,-5],[-27,26],[-68,83],[-28,61],[-6,45],[-23,28],[-21,40],[-23,4],[-24,-13],[-23,-20],[-11,-5],[-40,-7],[-64,-27],[-17,-27],[-22,-21],[-16,15],[-17,26],[-36,9],[-18,-9],[-17,18],[-15,32],[-20,24],[-30,6],[-33,10],[-26,-18],[-34,-34],[-23,13],[-13,41],[-16,11],[-21,46],[-6,41],[6,18],[8,23],[0,27],[-6,23],[-10,18],[-10,60],[-9,27],[-2,21],[8,20],[-7,13],[-12,1],[-19,-1],[-11,10],[-12,34],[-7,35],[-8,13],[-20,-1],[-34,-8],[-30,-11],[-13,2],[-27,17],[-35,20],[-71,4],[-6,7],[4,12],[15,20],[-2,16],[-12,14],[-7,32],[1,37],[-2,40],[-15,32],[-9,21],[1,20],[33,7],[39,14],[7,15],[-2,22],[-79,115],[-27,101],[-26,55],[-28,37],[-24,17],[-34,-7],[-44,1],[-46,11],[-39,-7],[-69,-49],[-26,-2],[-44,15],[-39,17],[-20,-1],[-12,-7],[-8,-13],[-22,-91],[-18,-18],[-27,-18],[-22,-4],[-19,1],[-27,14],[-26,17],[-5,1]],[[57781,86108],[14,40],[-5,54],[-9,44],[12,33],[21,3],[22,-36],[34,-18],[25,24],[8,46],[18,20],[24,-18],[40,-7],[33,3],[22,10],[10,15],[9,27],[18,34],[19,23],[145,-26],[126,-47],[9,18],[5,30],[-32,26],[-23,14],[-29,54],[-42,43],[-42,4],[-55,-15],[-84,9],[-71,81],[-47,25],[-34,62],[-8,33],[36,-28],[5,29],[3,40],[-20,24],[-18,14],[-93,-61],[-106,-20]],[[58574,92040],[50,-8],[112,-46],[26,5],[34,13],[34,55],[25,9],[33,-12],[9,14],[-17,46],[4,22],[113,-48],[48,-36],[105,-32],[18,-17],[2,-30],[-5,-25],[-23,-14],[-44,2],[-161,39],[-23,-24],[19,-20],[47,-25],[13,-43],[72,6],[69,-16],[32,5],[6,-14],[-22,-36],[10,-9],[77,34],[36,10],[19,-9],[3,-29],[-13,-36],[-1,-28],[-24,-66],[-36,-21],[-16,-27],[54,17],[28,18],[53,92],[16,12],[152,1],[34,-5],[142,-44],[40,-3],[46,5],[16,20],[16,6],[158,-48],[211,-109],[309,-179],[174,-160],[20,-34],[63,-20],[14,14],[35,-12],[205,-146],[70,-7],[-9,31],[-12,29],[18,-7],[24,-21],[38,-57],[48,-42],[48,-64],[41,-24],[36,-9],[30,-18],[56,-17],[26,-155],[20,-34],[0,-68],[36,-28],[27,-5],[-1,-51],[-22,-119],[-24,-51],[-186,-219],[-116,-84],[-226,-97],[-176,-36],[-72,-3],[-138,18],[-75,20],[-93,55],[-86,27],[-60,12],[-110,5],[-239,54],[-41,19],[-150,105],[-60,-30],[-35,-5],[-24,36],[10,10],[5,12],[-85,30],[-70,2],[-37,26],[-46,19],[-20,-12],[-11,0],[-92,46],[-41,37],[-43,65],[10,23],[13,15],[-148,38],[-140,5],[25,-18],[60,-10],[39,-26],[44,-37],[-10,-50],[62,-50],[47,-48],[2,-14],[18,-10],[70,-14],[12,-44],[-11,-17],[9,-25],[53,-27],[31,-7],[38,-17],[-17,-33],[-32,-22],[-33,-10],[16,-8],[41,3],[152,-55],[80,-56],[81,-102],[26,-50],[2,-28],[-4,-27],[-12,-30],[-5,-31],[-28,-88],[-20,-31],[-38,-35],[36,-68],[37,-63],[37,-105],[7,-42],[1,-65],[33,-26],[-13,-10],[-13,-18],[3,-84],[46,-69],[70,-45],[41,-9],[59,18],[43,-25],[96,-84],[43,-89],[18,-18],[97,-34],[72,-20],[111,-54],[19,-2],[54,47],[92,32],[29,44],[-3,37],[-23,67],[-7,65],[-31,27],[-28,18],[-86,-14],[-39,3],[-30,17],[-40,47],[-75,113],[-40,37],[-13,24],[-14,32],[2,53],[33,-2],[37,30],[27,106],[46,14],[25,-1],[108,-50],[134,-132],[29,-14],[31,-2],[51,4],[9,-18],[27,-20],[20,-3],[123,-42],[142,-82],[53,3],[21,46],[4,20],[59,46],[40,8],[57,-17],[10,13],[-19,68],[-26,59],[-39,37],[-68,111],[-28,54],[-13,57],[9,50],[10,36],[142,89],[51,53],[50,69],[23,14],[83,19],[111,59],[85,78],[84,119],[36,31],[28,-2],[38,-19],[42,-35],[57,-6],[55,5],[64,-3],[88,-54],[14,-17],[14,-23],[-28,-45],[-3,-29],[23,14],[32,6],[29,-9],[28,-25],[20,-28],[25,-24],[7,32],[4,28],[-13,70],[34,99],[26,43],[48,110],[-14,71],[-2,82],[-7,38],[-31,55],[-61,39],[-61,13],[-20,38],[4,43],[17,63],[50,133],[52,188],[2,43],[-5,24],[4,24],[-7,57],[-9,42],[-213,163],[-13,15],[-7,22],[23,5],[16,-1],[160,-76],[35,-4],[251,21],[123,-18],[103,-39],[74,-108],[76,-99],[70,-86],[2,-70],[-73,-15],[-70,-3],[-180,-35],[-43,-39],[-120,-122],[-11,-37],[11,-36],[55,-38],[118,-57],[52,-113],[37,-57],[28,-22],[27,-5],[60,-1],[42,-13],[12,-11],[17,11],[38,4],[224,60],[44,26],[15,40],[16,133],[20,46],[19,57],[-7,35],[-2,40],[112,38],[104,26],[50,-8],[13,28],[-32,55],[-19,28],[16,12],[24,-15],[32,-9],[56,9],[215,113],[84,63],[50,25],[80,57],[38,19],[67,7],[71,23],[78,42],[105,36],[17,2],[21,-5],[43,-42],[-16,-24],[-12,-25],[21,-14],[17,-6],[21,7],[22,17],[54,26],[15,33],[-21,13],[-27,49],[-32,11],[-26,-2],[95,71],[202,105],[108,48],[107,4],[85,-6],[-32,-16],[-140,-22],[-21,-11],[0,-13],[34,-8],[14,-16],[-11,-18],[-11,-6],[-16,-54],[-21,-43],[44,-56],[4,-58],[-28,-31],[-39,12],[-34,-20],[-62,-14],[-14,-18],[-9,-26],[40,-6],[31,2],[110,-17],[15,-2],[37,18],[37,4],[45,6],[23,10],[23,-12],[44,-51],[40,10],[17,99],[63,62],[74,50],[72,5],[69,35],[33,7],[64,-14],[96,-3],[81,-30],[60,-8],[88,51],[203,143],[17,-33],[33,48],[157,50],[38,2],[1,-20],[14,-44],[30,-27],[42,-64],[-20,-17],[-21,-10],[-31,-43],[-3,-99],[59,-25],[81,-29],[34,1],[28,16],[9,9],[10,15],[8,29],[5,22],[-21,55],[8,58],[74,-4],[91,17],[41,33],[49,63],[33,52],[-21,92],[-53,-20],[-91,199],[-47,77],[30,36],[78,23],[71,74],[27,15],[29,3],[210,-51],[239,-12],[203,-39],[230,-81],[112,-57],[93,-63],[-9,-45],[38,13],[82,-40],[56,-16],[57,-24],[22,-32],[75,-23],[78,-43],[14,-8],[95,-32],[68,-11],[41,-69],[136,-100],[25,-38],[119,-63],[59,-52],[37,20],[91,126],[54,144],[32,77],[-60,3],[-45,-22],[-29,5],[-32,23],[-52,58],[-66,97],[-13,106],[-18,35],[-64,28],[-42,32],[-156,63],[-28,-22],[-8,-34],[-10,-25],[-16,32],[-10,29],[0,46],[8,59],[26,99],[40,-5],[21,15],[26,44],[-12,37],[-14,28],[3,43],[25,118],[11,138],[-21,34],[-19,23],[-89,-24],[-33,13],[-8,26],[-2,21],[25,35],[25,59],[-43,-13],[-15,23],[36,34],[42,82],[99,38],[74,37],[116,78],[86,77],[56,98],[38,93],[62,218],[58,160],[98,165],[61,15],[23,-3],[4,-12],[-14,-14],[-4,-20],[26,-7],[42,-1],[79,10],[134,-6],[234,14],[33,-7],[87,-48],[47,6],[96,-23],[52,-26],[50,-31],[-7,-120],[-10,-80],[-35,-152],[-14,-39],[-56,-110],[-26,-72],[-42,-50],[-60,-35],[-8,-21],[-5,-31],[59,-87],[140,-90],[34,-108],[8,-81],[-9,-210],[-13,-31],[-26,-34],[-25,-40],[16,-59],[20,-219],[4,-178],[-16,-61],[-8,-129],[0,-43],[14,-64],[28,-54],[37,-34],[105,-63],[99,-76],[7,-24],[5,-29],[-35,-30],[-55,-78],[-35,-65],[-3,-53],[12,-67],[-6,-63],[-23,-56],[-33,-41],[-99,-63],[-207,-334],[-50,-39],[-84,13],[23,-48],[29,-68],[-4,-45],[-54,3],[-77,-48],[-35,-32],[-60,-17],[-45,17],[-50,31],[7,26],[10,12],[35,19],[34,25],[-17,5],[-14,0],[-38,-32],[-45,-7],[-52,40],[-41,43],[-19,9],[-38,-18],[-146,8],[-38,-7],[-18,-16],[10,-13],[11,-24],[15,-48],[14,-36],[60,-39],[81,-15],[78,-48],[99,-34],[224,14],[59,-4],[58,-15],[97,-50],[42,4],[71,45],[17,101],[9,31],[257,142],[48,31],[77,77],[25,52],[29,140],[25,50],[167,161],[26,41],[5,76],[-3,51],[-10,50],[-30,84],[-34,49],[-33,67],[24,138],[28,53],[151,63],[129,23],[144,43],[58,9],[40,-7],[41,-47],[36,-69],[104,-105],[35,-72],[7,-89],[-4,-216],[-20,-94],[41,-24],[20,-22],[51,-31],[27,-31],[27,-11],[59,-7],[168,11],[92,6],[-9,14],[-14,11],[-78,4],[-110,23],[-159,42],[-19,91],[4,56],[36,106],[25,18],[31,7],[36,15],[-11,67],[-14,61],[-34,85],[-37,157],[-51,1],[-39,31],[-189,92],[-179,68],[-123,9],[-39,-7],[-102,-71],[-66,-15],[-125,31],[-107,-17],[-40,17],[-16,31],[32,127],[-17,49],[-47,66],[-28,51],[5,56],[70,214],[29,56],[75,100],[38,76],[-9,44],[-161,239],[-43,85],[-19,27],[-39,32],[-60,38],[-18,34],[163,231],[74,40],[103,25],[50,22],[87,47],[52,39],[17,31],[11,37],[2,91],[-11,73],[-14,41],[-31,52],[-31,59],[22,15],[22,9],[58,-1],[60,-32],[30,-64],[35,-60],[0,-40],[-3,-31],[15,-44],[13,-18],[14,-31],[-13,-25],[-14,-12],[-27,-35],[-43,-108],[-33,-14],[-8,-84],[71,-92],[-9,-69],[-14,-23],[-39,-37],[5,-30],[10,-21],[111,-44],[105,-27],[176,-9],[51,-43],[19,30],[165,-7],[133,-105],[70,-32],[57,-11],[116,13],[20,9],[19,30],[-54,-2],[-24,-14],[-22,1],[-38,11],[-27,18],[-29,35],[-48,104],[-84,33],[-57,-14],[-62,7],[-102,56],[-68,21],[-121,61],[-34,25],[-27,51],[-31,84],[-20,47],[26,9],[83,46],[124,15],[53,-16],[136,-94],[63,-3],[114,41],[13,26],[-26,53],[-34,27],[-66,13],[-80,-24],[-23,20],[8,28],[9,21],[43,5],[30,16],[65,58],[72,28],[71,10],[261,-8],[148,-91],[144,-41],[63,-31],[17,-5],[15,-21],[11,-48],[182,-129],[42,-17],[116,-6],[130,30],[59,3],[63,-9],[33,-16],[36,-30],[-19,-38],[-17,-23],[-36,-64],[-16,-18],[-118,-73],[-47,-19],[-13,-96],[-6,-21],[-5,-34],[22,-68],[5,-42],[-18,-58],[-30,-62],[6,-50],[10,-67],[5,20],[-2,30],[8,35],[54,85],[39,115],[40,30],[36,7],[40,-34],[11,-46],[2,-70],[-8,-65],[-30,-100],[-50,-70],[-16,-39],[23,-37],[25,-29],[29,-9],[33,3],[8,9],[6,28],[-10,36],[-6,33],[61,25],[57,14],[45,42],[11,28],[10,46],[-23,72],[-20,54],[-68,129],[-51,66],[32,99],[53,110],[20,27],[6,17],[6,30],[-5,31],[-6,20],[-54,83],[-39,27],[-123,16],[-31,13],[-90,85],[-11,19],[-20,61],[-7,15],[-25,16],[-83,35],[-58,15],[-84,4],[-51,18],[-76,56],[-8,19],[-22,73],[-17,37],[5,28],[27,58],[19,51],[-23,44],[-33,14],[-36,21],[-15,40],[-9,43],[-1,34],[-6,39],[17,33],[38,34],[-9,24],[5,31],[247,41],[96,11],[480,4],[34,12],[209,20],[89,24],[94,-25],[34,1],[69,7],[45,51],[102,20],[170,21],[84,-4],[19,-15],[19,-21],[-92,-62],[-92,-56],[-76,-24],[-74,-49],[-7,-19],[-2,-12],[2,-39],[5,-25],[77,-32],[59,-44],[57,-32],[45,-19],[11,11],[-165,104],[-42,23],[-17,25],[8,38],[17,17],[26,19],[17,9],[62,20],[206,27],[49,51],[21,30],[56,31],[-19,13],[-46,8],[-36,18],[-142,183],[-35,28],[-109,20],[-49,21],[50,62],[59,16],[40,-4],[35,-17],[65,-51],[92,22],[-35,23],[-58,26],[-54,42],[-77,37],[-86,24],[-90,10],[25,55],[50,-7],[16,17],[23,33],[125,-77],[59,21],[50,35],[104,93],[14,42],[-50,23],[-41,11],[-56,-2],[-5,25],[24,33],[45,13],[139,-36],[232,93],[63,45],[161,58],[79,-7],[164,77],[227,33],[132,1],[102,42],[156,15],[54,17],[263,43],[146,34],[23,27],[-131,-22],[-31,20],[-27,-13],[-20,-19],[-63,34],[-17,-9],[-13,-18],[-23,-6],[-27,4],[-9,41],[32,55],[37,-29],[43,42],[27,1],[81,-26],[54,27],[72,13],[79,-12],[33,3],[19,25],[129,-22],[89,15],[61,-2],[95,-13],[43,-18],[-25,-42],[-92,-68],[25,-11],[53,31],[159,46],[26,-9],[-18,-40],[-11,-17],[106,23],[91,50],[40,9],[41,-31],[39,28],[9,28],[69,6],[28,26],[49,19],[40,8],[89,36],[31,-11],[59,-9],[56,-17],[105,-40],[14,-15],[13,-3],[30,-28],[-22,-42],[-24,-60],[-45,-28],[27,-3],[19,8],[36,40],[32,28],[-8,119],[-57,60],[-44,20],[-102,63],[-34,27],[-46,28],[18,17],[196,-22],[100,11],[108,-7],[144,27],[61,-28],[69,1],[80,-23],[24,27],[-131,29],[-58,-3],[-21,15],[22,34],[25,51],[-25,44],[-24,24],[-4,45],[23,52],[54,22],[30,42],[63,55],[303,179],[145,68],[55,9],[64,-6],[126,57],[47,0],[175,-45],[42,-33],[96,-26],[111,-14],[51,-21],[25,-24],[21,-33],[-90,-22],[-97,-66],[-132,-36],[-163,-24],[-34,-18],[311,-5],[90,4],[19,-57],[30,-2],[90,27],[54,2],[102,-20],[21,11],[44,1],[94,-25],[42,-37],[-67,-60],[-69,-53],[-84,-90],[-26,7],[-44,2],[8,-45],[74,2],[40,-20],[92,25],[130,-8],[27,7],[50,28],[13,52],[22,33],[43,11],[47,-10],[80,0],[203,17],[170,-22],[136,27],[178,-20],[78,-21],[57,-37],[52,-11],[42,-29],[43,-42],[-21,-34],[-21,-23],[56,25],[43,6],[32,-15],[57,-15],[18,-95],[17,-18],[15,-33],[-21,-30],[-18,-14],[45,3],[63,32],[13,11],[16,24],[-24,23],[-21,14],[27,11],[52,-4],[26,-42],[17,-38],[38,-127],[81,17],[4,-38],[-34,-87],[-36,-64],[-14,-14],[-23,-3],[9,34],[-14,20],[-21,12],[-74,12],[-138,79],[-37,8],[-8,-4],[-4,-7],[77,-54],[63,-95],[57,28],[23,-5],[31,-45],[56,-18],[47,-30],[-31,-91],[-192,-160],[-203,-93],[-90,-65],[-158,-47],[-113,-64],[-144,-47],[-42,-51],[-107,-32],[8,-17],[12,-18],[-13,-30],[-15,-23],[-83,-47],[-121,-32],[-243,-195],[-121,-40],[-137,-2],[-29,-18],[-104,-123],[-32,-26],[-136,-13],[-142,-201],[-79,-68],[-69,-37],[72,7],[85,27],[99,65],[26,30],[14,34],[29,27],[45,19],[176,21],[72,-8],[106,6],[70,36],[41,13],[37,4],[19,26],[62,5],[143,34],[21,12],[46,51],[85,-19],[61,10],[159,91],[96,34],[26,24],[-19,17],[-22,12],[-92,-32],[-83,-10],[-94,8],[-13,13],[-11,32],[30,47],[26,28],[60,37],[49,13],[183,-40],[38,-5],[21,66],[58,-3],[58,-11],[-25,-14],[-64,-21],[20,-48],[28,-33],[112,-47],[95,-21],[70,1],[110,20],[17,14],[23,38],[-28,72],[27,-9],[27,-18],[42,-44],[40,-75],[25,-35],[-15,-37],[-57,-71],[33,-39],[59,-26],[0,-116],[-4,-56],[-29,-61],[-34,-26],[-33,-38],[8,-36],[8,-22],[35,-42],[98,-13],[13,11],[-23,13],[-66,20],[-26,16],[-23,38],[27,42],[29,31],[35,71],[11,50],[-7,52],[23,24],[35,25],[17,5],[16,11],[-25,13],[-23,6],[-48,32],[-8,41],[96,17],[57,29],[210,13],[144,55],[322,-15],[226,-45],[317,-5],[117,-30],[11,-11],[7,-22],[-50,-9],[-83,0],[-22,-56],[14,-70],[148,-74],[129,-31],[90,-49],[48,-4],[188,5],[110,-25],[100,19],[109,0],[38,-5],[40,-37],[64,-10],[77,-1],[43,7],[17,9],[-6,15],[-64,22],[7,27],[25,6],[107,-36],[44,-6],[39,27],[29,49],[16,33],[17,17],[14,2],[14,10],[-34,39],[-33,49],[-7,32],[-10,16],[-4,59],[30,60],[21,17],[85,-23],[38,36],[24,14],[102,24],[43,-2],[71,-23],[228,-110],[-5,-42],[54,12],[26,17],[61,11],[41,18],[11,-7],[14,-17],[-10,-25],[-14,-25],[9,-15],[12,-3],[61,-31],[79,57],[32,55],[22,11],[197,-38],[59,-21],[12,-12],[8,-20],[32,-22],[39,-12],[-5,-18],[-2,-19],[92,-3],[40,-16],[44,-25],[-5,-29],[11,-17],[41,-2],[11,3],[-13,-39],[-55,-42],[-33,-16],[-38,-28],[21,-5],[95,-8],[59,-56],[6,-41],[-37,-16],[-84,-52],[-50,-21],[-35,-2],[-25,-7],[36,-22],[158,-6],[46,-28],[36,-70],[0,-86],[-36,-43],[-97,-7],[-127,96],[-78,37],[-109,71],[-21,-12],[32,-60],[51,-34],[92,-93],[154,-192],[36,16],[21,24],[10,31],[-9,43],[25,-21],[23,-38],[46,-64],[-62,3],[-80,-21],[-29,-26],[22,-35],[59,-5],[25,-49],[46,-60],[103,-164],[73,-31],[71,-68],[71,-32],[37,-2],[25,42],[20,-15],[19,-76],[34,-33],[38,-2],[31,13],[45,36],[36,42],[58,116],[38,58],[36,24],[-13,28],[4,33],[26,77],[36,91],[27,49],[66,97],[25,18],[18,-32],[14,-42],[10,-18],[10,-7],[81,-85],[82,-67],[73,-33],[115,-32],[167,5],[30,42],[58,32],[94,16],[55,39],[91,11],[57,-6],[88,-28],[197,-89],[55,-33],[29,-35],[64,-52],[41,-25],[40,-18],[14,5],[-5,15],[-20,15],[-16,19],[47,19],[5,15],[17,12],[62,11],[-61,19],[-20,3],[-29,11],[2,27],[19,19],[15,36],[19,23],[32,18],[24,3],[57,-23],[41,42],[30,-3],[63,-43],[56,-64],[31,0],[87,26],[98,1],[-13,38],[-68,83],[8,106],[-47,24],[-54,14],[78,27],[58,87],[46,8],[48,16],[-15,11],[-143,9],[-31,-10],[-21,-26],[-71,0],[-8,59],[-2,37],[93,79],[35,17],[236,-2],[71,15],[104,39],[-27,25],[-3,50],[-89,73],[7,16],[9,11],[27,0],[140,-19],[58,-39],[151,-40],[404,-13],[45,-14],[174,-17],[73,-19],[175,-23],[80,-17],[63,-25],[103,-15],[47,-17],[-5,-53],[-213,7],[-71,17],[-88,2],[-33,-8],[-53,-44],[-63,-23],[-53,-4],[35,-38],[49,-10],[158,49],[432,24],[66,-4],[-7,-34],[-58,-65],[-55,-50],[-80,-52],[-30,0],[63,110],[-26,6],[-24,-3],[-70,46],[-11,2],[-14,-11],[0,-16],[-13,-64],[26,-27],[0,-46],[-97,-29],[-38,3],[-40,18],[-17,0],[-5,-15],[8,-27],[-1,-13],[-15,-22],[-8,-23],[24,-26],[31,-7],[171,29],[75,36],[82,65],[146,159],[65,54],[37,21],[48,8],[269,-17],[156,-34],[149,-51],[74,-42],[54,-57],[10,-24],[5,-32],[-37,-30],[-167,-10],[-64,-17],[-24,-19],[-3,-11],[-8,-17],[12,-14],[75,-2],[72,-13],[100,-36],[15,-12],[32,-35],[10,-6],[149,6],[10,-12],[9,-26],[-39,-40],[-39,-27],[-80,-64],[40,23],[161,55],[41,10],[49,-4],[121,-50],[50,-39],[92,-112],[-26,-12],[-66,-12],[208,-85],[80,0],[184,25],[93,1],[172,54],[171,35],[157,2],[83,33],[220,-1],[211,-11],[164,-20],[185,-60],[180,-83],[105,-82],[21,-25],[30,-57],[13,-48],[13,-65],[-6,-51],[-26,-36],[-16,-45],[2,-53],[-31,-69],[29,-49],[80,-32],[172,-42],[47,-29],[6,-85],[14,-71],[15,-136],[29,-35],[47,-32],[9,-45],[-59,-144],[-37,-27],[-39,-40],[69,14],[35,53],[38,97],[36,16],[19,31],[0,92],[-23,79],[0,57],[15,46],[114,95],[61,38],[58,22],[158,19],[72,19],[82,-13],[58,5],[67,20],[59,-10],[98,-63],[347,-14],[61,-22],[233,-27],[18,0],[52,31],[154,108],[64,-7],[26,-17],[27,-43],[28,-27],[23,-75],[20,-102],[33,-18],[46,-6],[100,-38],[101,-48],[29,-92],[54,-77],[126,7],[132,16],[127,126],[0,52],[-31,74],[-47,72],[-37,112],[-117,25],[11,33],[44,39],[40,60],[6,47],[-11,98],[106,-7],[106,-11],[201,-44],[163,-18],[86,-28],[52,-32],[62,-23],[21,57],[23,14],[82,-33],[60,-9],[103,4],[130,-15],[141,3],[127,25],[47,-5],[52,-20],[84,-53],[143,-71],[130,-20],[150,-66],[141,-25],[113,-38],[16,-14],[5,-21],[8,-18],[89,-20],[165,-143],[-99962,-16],[56,-25],[56,-20],[23,6],[12,-2],[32,-35],[21,-16],[113,-41],[51,-45],[42,-52],[-21,10],[-38,34],[4,-39],[12,-27],[61,-26],[64,-20],[40,-24],[14,-21],[8,-38],[-10,-33],[37,12],[35,30],[-18,23],[-117,81],[-25,27],[34,-14],[158,-103],[43,-39],[-18,-8],[-13,-23],[14,-10],[19,8],[31,4],[31,-13],[35,-27],[73,-32],[434,-254],[10,-44],[12,-21],[7,-26],[2,-43],[-39,-51],[61,5],[9,6],[16,21],[17,14],[24,-17],[19,-34],[-6,-46],[-17,-38],[-2,-63],[15,-54],[15,-22],[13,-26],[3,-76],[-27,-34],[-15,-59],[17,-6],[52,-5],[18,-11],[30,-27],[7,-26],[7,-36],[9,-34],[7,-16],[8,3],[30,46],[14,14],[34,12],[19,-53],[-13,-88],[11,0],[8,10],[11,23],[15,14],[19,32],[16,39],[-19,31],[-21,20],[-51,10],[-26,24],[-10,29],[26,12],[22,21],[15,52],[-4,28],[-6,27],[-12,39],[-19,23],[-36,11],[-16,22],[-25,-1],[-25,6],[-9,8],[1,16],[28,7],[157,2],[57,22],[25,-6],[26,-16],[94,-21],[-3,-10],[-16,-10],[-27,-46],[-6,-26],[-1,-34],[24,-6],[24,14],[-12,27],[-3,33],[10,14],[13,3],[24,-24],[27,-8],[89,-10],[26,3],[8,13],[-18,14],[-116,33],[-2,17],[108,-22],[48,-20],[48,-15],[67,5],[66,-24],[63,-65],[58,-82],[59,-49],[61,-36],[103,-99],[13,-8],[10,-14],[-19,-16],[-17,-25],[34,17],[33,12],[17,-3],[15,-12],[10,-21],[5,-20],[-14,-18],[99,-4],[30,-12],[14,-49],[-28,-34],[-17,5],[-16,14],[-15,1],[-44,-14],[-67,-46],[-38,-37],[-7,-24],[6,-65],[-5,-31],[-29,-20],[-64,12],[-29,13],[-33,17],[-31,24],[-41,39],[-12,4],[-8,-10],[13,-24],[28,-31],[47,-40],[22,-45],[-14,-23],[-18,-5],[-13,1],[-41,14],[-29,3],[-90,-13],[-32,-8],[-11,7],[-3,19],[-48,15],[-29,2],[-13,6],[-11,21],[-32,30],[-48,11],[-31,2],[-17,-7],[63,-40],[56,-66],[-11,-13],[-7,-14],[31,-1],[21,4],[5,-17],[-16,-71],[-11,-15],[-98,-16],[25,-12],[25,-3],[29,3],[26,-13],[17,-44],[3,-46],[-25,-27],[-27,-21],[-53,-33],[-56,-14],[-29,3],[-28,-7],[-19,-17],[-5,-17],[24,11],[28,-6],[27,-21],[-3,-17],[-26,-18],[-5,-14],[9,-24],[-3,-20],[13,-11],[30,-4],[36,-14],[36,-20],[14,-16],[12,-24],[4,-24],[-6,-11],[-82,-4],[-12,3],[-5,28],[-10,22],[-31,16],[-12,-11],[9,-79],[-12,-24],[-14,-18],[-41,-10],[-33,6],[-28,37],[0,32],[19,19],[0,26],[-6,30],[-18,-35],[-23,-29],[-35,-37],[-18,-4],[-17,4],[-47,26],[-29,23],[-56,74],[-32,34],[-70,46],[-72,34],[-57,22],[-31,-3],[-30,-9],[-39,5],[-13,8],[-11,19],[-11,10],[-54,46],[-38,37],[-2,25],[8,30],[-7,73],[-18,69],[-48,68],[-126,44],[-104,31],[-37,7],[-33,-6],[-87,-57],[-59,-8],[-170,-3],[-28,6],[-26,24],[-6,33],[8,59],[-1,25],[-7,9],[-9,-1],[-33,24],[-31,40],[-25,41],[-16,56],[22,3],[31,-14],[5,13],[10,51],[21,24],[9,18],[14,68],[2,49],[-24,-26],[-39,-68],[-18,-20],[-14,-9],[-13,-4],[-30,13],[-22,17],[-1,65],[-10,17],[-10,-12],[-4,-24],[-28,-4],[-13,-10],[7,-39],[-3,-33],[-27,-13],[-53,-7],[-19,32],[-16,-45],[-12,-51],[-2,-67],[17,-56],[25,-27],[53,-40],[23,-28],[6,-37],[-2,-33],[-28,-42],[-18,-34],[-33,-81],[-19,-33],[-82,-69],[99951,-19],[-49,-66],[-56,-57],[-83,-23],[-126,-87],[-49,-16],[-65,40],[-149,26],[-47,35],[-68,88],[-23,13],[-21,35],[-82,39],[-72,-25],[-58,19],[-20,-14],[30,-13],[54,-10],[82,5],[27,-9],[24,-31],[28,-49],[-21,-32],[-22,-11],[-66,36],[-76,-5],[-36,9],[-102,60],[-78,-67],[-107,-35],[-83,-4],[-152,-53],[41,-2],[111,38],[65,0],[96,21],[51,24],[24,23],[31,23],[31,-11],[22,-24],[14,-35],[14,-45],[-18,-24],[-18,-12],[-22,-33],[102,56],[62,-33],[31,5],[58,49],[93,32],[11,-6],[11,-16],[-15,-94],[6,-74],[71,-81],[73,-47],[26,-2],[24,9],[9,43],[18,32],[23,-29],[19,-31],[27,-76],[-1,-23],[-6,-45],[23,-20],[32,-6],[12,-71],[11,-101],[-14,-9],[-16,0],[-51,-26],[7,-18],[52,-10],[15,-21],[-11,-47],[3,-21],[18,-5],[12,28],[-3,39],[5,17],[35,-81],[0,-31],[30,-36],[85,-54],[15,-24],[5,-40],[-21,-12],[-20,-28],[12,-40],[22,-32],[36,-12],[17,-52],[0,-49],[-26,-43],[-53,-59],[-31,-24],[-12,-42],[-3,-44],[-21,2],[-23,18],[-262,111],[-99,21],[-87,2],[-16,7],[1,26],[5,24],[13,29],[-6,26],[-11,2],[-11,-20],[-24,0],[-23,23],[-19,-7],[-9,-32],[-7,-17],[0,-20],[12,-18],[50,-20],[-8,-18],[-70,-14],[-57,-18],[-74,-54],[-30,-38],[-198,-93],[-48,-32],[-21,-4],[-27,-11],[-21,-39],[-110,-55],[-23,5],[-29,-46],[-27,-26],[-63,-3],[-41,-13],[-88,-67],[-55,21],[-65,-91],[-72,-87],[-21,0],[-55,36],[-14,-19],[9,-35],[19,-37],[-11,-10],[-22,10],[-16,2],[-12,-11],[2,-27],[-31,-33],[-24,-3],[-28,-11],[-10,-29],[9,-32],[-50,-36],[-41,-48],[-19,-8],[-22,-21],[-24,-16],[-28,3],[-67,-67],[-150,-117],[-42,-15],[-53,-36],[-5,-23],[0,-30],[-21,-48],[-25,-122],[-8,-22],[-12,-25],[-55,12],[-48,46],[-15,22],[-8,25],[-3,40],[-9,19],[-11,9],[-55,99],[-95,68],[-14,23],[-121,-18],[-33,-1],[-58,17],[-90,-11],[-109,-37],[-33,-23],[-111,-36],[-73,-57],[-142,-208],[-34,-43],[-16,-9],[-24,-4],[-10,42],[-4,33],[9,63],[17,51],[17,97],[5,39],[12,41],[-48,-3],[-66,-71],[-100,-69],[-46,-18],[-36,-41],[-26,-5],[-30,-15],[-3,-89],[-15,-48],[-18,-10],[-28,-2],[-21,19],[-30,71],[-40,37],[-24,7],[-18,-9],[-35,-48],[-38,-44],[6,50],[-33,19],[-29,11],[-36,2],[-11,-7],[-14,-29],[-33,-37],[-22,-15],[-23,-30],[-13,-31],[-12,-44],[-14,-107],[1,-125],[-53,-99],[-20,10],[-10,-6],[-10,-13],[18,-55],[-10,-19],[-9,-13],[-25,-14],[-56,-81],[-53,-52],[-87,-151],[-25,-100],[-25,-113],[12,-55],[10,-36],[16,-25],[28,-27],[59,-29],[-5,-19],[0,-16],[21,28],[15,79],[37,26],[18,-1],[118,-63],[23,-27],[-4,-60],[-7,-28],[-22,-42],[-42,-50],[-49,-69],[-5,-43],[0,-23],[13,-81],[1,-46],[-6,-85],[3,-37],[13,-31],[20,-20],[35,11],[33,-9],[25,-22],[-4,-71],[15,-67],[11,-124],[-21,-34],[-20,-21],[-39,-54],[-21,-6],[-37,18],[-58,96],[23,57],[50,40],[23,28],[17,42],[-26,-8],[-18,-18],[-57,8],[-23,-20],[-28,-32],[11,-80],[-19,-15],[-35,-27],[-52,-34],[-17,-23],[-45,-143],[-41,-107],[-15,-92],[2,-79],[15,-88],[11,-38],[48,-82],[23,-64],[7,-77],[-38,-37],[-67,-89],[-28,-10],[-92,2],[-46,45],[-54,-11],[-45,-22],[-71,-63],[-63,-82],[-60,-57],[-18,-34],[-24,-71],[-22,-129],[8,-64],[12,-30],[11,-39],[-16,-61],[0,-38],[29,-61],[6,-84],[-21,-2],[-49,60],[-52,4],[-124,-69],[-52,-40],[-57,-80],[-17,15],[-12,46],[-21,20],[-26,-10],[-11,-43],[36,-20],[13,-28],[-21,-107],[-15,-36],[6,-95],[-2,-45],[-8,-45],[-37,-123],[-63,-162],[-78,-118],[-54,-41],[-27,-31],[-12,-41],[-80,-113],[-98,-119],[-28,-21],[-6,45],[-3,44],[-12,59],[-36,49],[-6,40],[-6,54],[-3,252],[-31,262],[-3,82],[-38,67],[-21,70],[-12,68],[-3,81],[-41,425],[-13,106],[-55,342],[-24,198],[-16,192],[-2,86],[24,257],[21,160],[74,359],[11,33],[12,17],[128,138],[56,75],[33,80],[36,101],[-4,55],[-4,31],[-14,36],[-30,41],[11,18],[12,14],[31,15],[64,-31],[65,13],[60,127],[86,-19],[65,22],[18,-9],[13,43],[36,46],[66,68],[97,82],[48,55],[27,52],[40,50],[39,62],[71,186],[140,154],[55,88],[45,31],[40,15],[101,126],[64,105],[85,72],[25,46],[44,108],[18,26],[55,41],[124,71],[72,71],[106,10],[31,28],[33,16],[35,23],[-43,63],[10,33],[8,16],[76,74],[31,60],[-4,25],[-5,19],[-47,24],[9,55],[13,48],[38,40],[13,94],[2,99],[37,142],[22,32],[87,71],[20,2],[60,-24],[66,-12],[23,-22],[5,19],[-3,24],[18,9],[38,-10],[-5,27],[-98,14],[-70,31],[-63,60],[-41,17],[-45,-5],[-257,-84],[-12,-23],[-12,-32],[16,-47],[-13,-21],[-12,-14],[-14,-31],[-12,-61],[3,-59],[-31,-92],[-3,-57],[55,-32],[14,-21],[-16,-32],[-17,-19],[-14,-24],[-11,-9],[-15,-6],[-20,31],[-18,62],[-29,4],[-10,-10],[-5,-24],[-25,-2],[-28,12],[-32,-5],[-57,-70],[-319,-333],[-34,-40],[-42,-80],[-79,-8],[-31,-18],[-23,-24],[-31,-16],[1,30],[6,22],[7,59],[43,111],[-27,12],[-27,1],[-50,-23],[-34,-37],[-26,8],[13,33],[31,66],[-9,61],[-9,33],[13,18],[65,123],[23,64],[20,84],[1,26],[-4,32],[-19,5],[-16,0],[-128,-83],[-47,-23],[-15,36],[-21,15],[-35,61],[-30,9],[-31,-4],[-70,-41],[-77,-23],[-59,8],[-51,-35],[-23,-6],[-75,24],[-91,2],[-28,-30],[-79,-41],[-54,-64],[-28,-20],[-31,-28],[-14,-120],[-41,-39],[-38,-29],[-80,-92],[-56,-126],[-38,-54],[-81,-76],[-126,-100],[-110,-162],[-38,-122],[-14,-4],[-27,-25],[-7,-60],[1,-41],[-17,-33],[-17,-42],[18,-26],[16,-5],[24,4],[63,34],[108,-52],[54,-52],[-4,-52],[2,-46],[-40,3],[-53,-4],[-34,-27],[-68,43],[-23,-16],[-36,-46],[-65,-19],[-33,23],[-55,63],[-93,-6],[-24,-71],[-21,2],[-33,-7],[-55,-82],[-18,-8],[-67,16],[-48,42],[-23,2],[-43,-19],[-21,-50],[-107,-25],[-105,5],[-57,119],[107,47],[63,-10],[72,8],[75,37],[-26,31],[-18,7],[-45,-4],[-40,23],[-87,116],[-38,21],[-49,13],[-38,1],[-14,-8],[-20,-28],[-13,-27],[-12,-9],[-26,5],[-31,22],[-37,-7],[16,17],[35,18],[-58,20],[-37,28],[-34,7],[-156,69],[-60,-6],[-37,-19],[-63,-56],[17,-41],[14,-19],[8,-22],[-20,-4],[-58,-4],[-35,33],[-25,-48],[10,-43],[40,15],[21,-18],[-14,-49],[-52,-15],[-65,3],[-65,87],[-107,-15],[-51,-56],[-49,-13],[-131,56],[-66,5],[-74,48],[-26,-15],[-47,-121],[-63,-29],[-32,16],[-29,76],[-20,25],[-56,23],[-298,-22],[-100,19],[-70,2],[-96,-39],[-92,15],[-170,-75],[-70,-50],[-84,-88],[-76,-147],[-42,-55],[-71,-70],[-100,-64],[-54,-65],[-30,-53],[-52,-200],[-14,-30],[-123,-72],[-39,-80],[-17,-20],[-51,-34],[-31,-56],[-17,-16],[-73,-40],[-60,-100],[-85,-70],[-123,-194],[-11,-23],[-10,-52],[-19,-38],[-106,-169],[-33,-16],[-53,-79],[-54,-47],[-49,-56],[-61,-59],[-92,-67],[-31,-39],[-48,-90],[-118,-111],[-59,-27],[-77,-98],[-8,-23],[-6,-36],[13,-63],[19,-14],[31,-9],[115,-62],[107,17],[95,0],[37,6],[23,-2],[8,-34],[-1,-63],[-14,-57],[-11,-169],[-13,-74],[10,-73],[23,-13],[23,33],[37,5],[38,-15],[28,117],[-23,18],[-22,42],[13,31],[66,57],[41,5],[39,-4],[-43,-73],[-17,-15],[-13,-4],[-18,-14],[38,-42],[41,-32],[59,-14],[-14,-25],[-39,-22],[-36,-91],[-56,-44],[-26,-30],[9,-19],[21,-4],[114,12],[59,25],[84,71],[35,105],[32,29],[9,0],[11,-7],[1,-74],[-45,-83],[-32,-47],[-12,-40],[19,0],[37,8],[16,19],[42,101],[11,72],[6,100],[-5,60],[3,43],[-16,43],[11,13],[113,-59],[60,-14],[108,48],[24,-12],[18,-29],[89,-89],[17,-29],[29,-108],[95,-125],[88,-59],[3,-23],[56,-69],[44,-24],[7,-62],[-20,-50],[-41,-48],[-82,44],[-13,-2],[10,-28],[59,-81],[47,-34],[3,-108],[-6,-59],[-31,-66],[10,-38],[44,-56],[22,-22],[22,-32],[-28,-70],[-5,-78],[-30,-35],[-36,-76],[-55,-62],[-26,-119],[-42,-105],[-5,-104],[-7,-37],[-34,-108],[-13,-146],[17,-239],[8,-14],[16,-14],[-3,-17],[-8,-11],[-33,-71],[0,-49],[13,-37],[2,-95],[-24,-153],[-9,-24],[-10,-39],[-4,-36],[-7,-22],[-4,-39],[7,-34],[12,-17],[-43,-110],[-15,-144],[-16,-58],[-31,-57],[-66,-83],[-24,-52],[-43,-66],[-41,-51],[-57,-145],[-46,-145],[-116,-188],[-15,-46],[-9,-50],[-30,-84],[-15,-116],[-35,-46],[-29,-122],[-94,-186],[-23,-63],[-72,-103],[-77,-142],[-96,-128],[-18,-53],[-37,-58],[-40,-90],[-58,-90],[-12,-60],[-19,-42],[-43,-28],[-31,-39],[-95,-231],[-12,-42],[-2,-37],[-62,-86],[-35,-92],[-60,-57],[-62,-78],[-149,-144],[-41,-54],[-83,-68],[-34,-1],[-72,-37],[-47,-38],[-28,14],[-17,50],[-21,-2],[-16,-7],[-43,48],[-37,-3],[-26,22],[-50,-15],[9,205],[-7,43],[-21,-40],[-57,-72],[-23,-14],[-22,0],[9,44],[31,62],[-10,10],[-10,3],[-40,-27],[-20,-30],[-58,-119],[-34,-100],[-28,-29],[-13,-43],[-24,-41],[-37,11],[-22,-7],[-53,23],[-13,-10],[35,-77],[-29,-113],[-12,-14]],[[79915,96849],[-25,-28],[-35,-14],[-38,23],[-95,-1],[-163,25],[47,16],[257,13],[18,-3],[34,-31]],[[79519,96892],[-33,-4],[-36,12],[10,26],[81,4],[30,39],[51,-2],[14,-11],[8,-13],[-1,-17],[-11,0],[-48,-2],[-9,-9],[-56,-23]],[[78578,97496],[-27,-45],[-11,-40],[-83,-133],[-10,-23],[49,20],[44,45],[27,38],[30,24],[34,0],[35,9],[65,31],[66,14],[36,-1],[34,-15],[22,-35],[24,-28],[87,-21],[13,-7],[8,-24],[-7,-25],[50,-25],[69,11],[37,-7],[36,-14],[17,-22],[14,-27],[15,-39],[9,-41],[-8,-55],[-134,-84],[-25,-8],[-62,6],[-61,-9],[-161,-44],[-199,-1],[-57,-39],[-17,1],[-17,7],[-16,13],[-121,-11],[-136,-7],[-136,-1],[-45,-28],[-139,-55],[-127,-42],[-66,-10],[-96,11],[-30,14],[-29,21],[42,27],[30,54],[37,32],[94,61],[11,24],[18,51],[11,20],[15,18],[11,22],[2,33],[6,28],[37,42],[27,20],[29,6],[71,-8],[22,3],[-16,13],[-11,50],[2,16],[10,31],[18,15],[18,10],[11,42],[-5,15],[27,20],[13,27],[32,16],[65,13],[3,34],[10,21],[14,7],[33,6],[18,-1],[24,-34],[26,-28],[34,-6],[34,2],[-20,33],[1,35],[12,22],[16,10],[34,2],[107,-24],[70,-35],[16,-18],[-13,-10],[-31,-6],[-16,-10]],[[71180,97725],[34,-21],[26,16],[248,-50],[53,-18],[11,-13],[-217,-8],[-44,3],[-4,29],[-49,1],[-85,19],[-23,27],[-5,11],[27,11],[28,-7]],[[77815,97703],[-61,-7],[7,40],[4,11],[31,6],[20,-10],[44,-7],[-45,-33]],[[75745,97744],[-68,-5],[-80,5],[-130,61],[-85,26],[-70,40],[-15,44],[44,28],[54,11],[91,2],[117,-4],[116,-29],[247,-31],[90,-21],[-56,-51],[-61,-19],[-63,-27],[-64,-19],[-67,-11]],[[64280,97893],[7,-7],[-1,-6],[-99,6],[-173,-4],[-100,32],[106,32],[56,7],[72,27],[89,-26],[-5,-23],[1,-11],[24,-10],[23,-17]],[[66580,97900],[-100,-19],[-35,6],[-10,9],[-19,9],[-50,12],[7,33],[16,7],[150,37],[72,-21],[30,-51],[-61,-22]],[[77131,98017],[64,-37],[31,-41],[-30,-11],[-28,-28],[-13,-34],[-37,-27],[-10,-43],[17,-8],[20,12],[41,41],[53,28],[58,-16],[23,6],[40,39],[-7,33],[16,20],[18,5],[75,-4],[119,-17],[21,-17],[29,-10],[17,-16],[53,-13],[26,-12],[35,-29],[32,-41],[-40,-22],[-22,-40],[-9,-9],[-7,-15],[-3,-35],[-6,-30],[-7,-13],[-5,-17],[5,-45],[-12,-35],[-40,-27],[-41,-1],[-61,18],[-18,-1],[-17,-7],[76,-38],[56,-56],[65,-13],[18,-6],[23,-52],[8,-26],[-108,-62],[-28,-11],[-172,-9],[-113,-18],[-36,4],[-63,15],[-42,-6],[-60,10],[-37,0],[-85,23],[-88,38],[-17,18],[-18,12],[-105,10],[-23,8],[-153,-9],[-26,6],[-47,50],[-27,1],[-84,-29],[-31,2],[-64,19],[-38,24],[-6,8],[-4,29],[-38,15],[-46,52],[-27,54],[-128,28],[-77,7],[-58,-2],[-56,21],[93,78],[123,41],[53,31],[61,42],[25,65],[103,40],[27,14],[36,31],[12,4],[81,-38],[16,7],[15,17],[29,19],[100,3],[85,-8],[32,8],[39,-3],[195,28],[130,8],[24,-5]],[[63903,97968],[-23,-8],[-106,44],[-9,13],[91,41],[102,-6],[16,-20],[3,-7],[-69,-36],[-5,-21]],[[65410,98083],[-79,-27],[-40,1],[-20,16],[32,23],[41,17],[31,-5],[23,-8],[12,-17]],[[65855,98128],[12,-20],[-1,-71],[-13,-31],[2,-26],[-26,-13],[-218,3],[-108,6],[-25,10],[61,34],[19,23],[-6,67],[10,12],[175,-6],[14,19],[66,1],[38,-8]],[[64866,98032],[-184,-7],[-62,4],[-8,7],[-15,6],[-58,6],[-36,29],[16,8],[85,12],[29,12],[10,17],[38,31],[92,6],[40,-6],[5,-20],[39,-25],[101,-32],[-20,-23],[-35,-3],[-37,-22]],[[66098,97996],[-43,-11],[-113,21],[-17,11],[-14,20],[-19,78],[-1,23],[-7,16],[-28,28],[-20,13],[18,15],[124,-11],[266,-6],[136,-28],[40,-16],[39,-26],[-238,-14],[-32,-12],[1,-29],[-9,-26],[-25,-3],[-58,-43]],[[65115,98198],[-39,-30],[-129,32],[11,16],[14,6],[0,16],[-12,12],[5,24],[83,-18],[8,-7],[56,-12],[9,-24],[-6,-15]],[[63178,98417],[127,-23],[95,6],[29,-3],[28,-7],[28,-16],[38,-35],[0,-49],[-17,-2],[-161,22],[-74,51],[-20,5],[-29,-13],[-25,-31],[-27,-8],[-31,-39],[-29,5],[-15,-4],[-37,-27],[-93,0],[-15,-12],[-30,-38],[-38,-10],[-66,-6],[-22,21],[-10,33],[-15,17],[-92,-19],[-69,13],[-67,22],[-68,8],[61,23],[334,48],[131,12],[62,34],[92,22],[25,0]],[[67268,98406],[17,-23],[-10,-37],[-22,-27],[-10,-38],[-86,-9],[-24,-9],[-23,-29],[-87,-18],[-65,-49],[-91,9],[-124,34],[-105,-28],[-69,-8],[-85,42],[-11,10],[-5,29],[5,26],[23,55],[30,31],[15,10],[12,19],[34,11],[105,7],[39,-6],[12,-21],[57,2],[94,13],[137,20],[79,18],[70,-4],[70,-11],[18,-19]],[[63966,98460],[42,-10],[103,2],[32,-14],[149,-84],[38,-2],[31,-30],[-154,-49],[-52,-36],[-189,-8],[-121,-17],[-26,-15],[12,-26],[-58,-29],[-191,-4],[-24,-9],[-37,-31],[3,-5],[65,-8],[10,-6],[9,-14],[5,-20],[-9,-26],[-24,-4],[-26,3],[-60,20],[-7,-7],[-6,-14],[-19,-28],[-22,-8],[-61,21],[-20,-6],[-19,-13],[-24,-6],[-56,-4],[-29,17],[25,23],[70,35],[-23,15],[-70,4],[-55,-9],[-28,-24],[-26,-5],[-72,2],[-40,31],[-30,12],[-26,25],[211,83],[70,32],[67,16],[87,9],[27,10],[27,4],[17,-6],[44,-29],[129,5],[27,24],[2,56],[-13,33],[27,63],[74,25],[171,34],[43,2]],[[72229,98414],[-258,-21],[-25,13],[-8,8],[36,44],[30,21],[164,8],[131,-14],[41,-13],[-15,-26],[-8,-9],[-88,-11]],[[66983,98473],[-87,-12],[-141,15],[-73,17],[6,8],[19,10],[122,41],[242,9],[30,-30],[-26,-23],[-92,-35]],[[65199,98568],[209,-55],[194,5],[84,-17],[122,-50],[182,-53],[35,-16],[-31,-21],[-213,-53],[-138,-18],[-120,-3],[-48,6],[-48,38],[-117,28],[-125,-8],[-13,15],[-25,11],[-43,2],[-86,15],[-6,34],[54,17],[35,1],[14,48],[60,73],[24,1]],[[66283,98526],[39,-30],[15,-33],[24,-20],[8,-38],[-20,-31],[-60,-6],[-99,-2],[-97,16],[-52,56],[-96,15],[-54,58],[56,17],[68,-8],[109,50],[15,-3],[24,-11],[88,-19],[32,-11]],[[64098,98529],[-39,-4],[-27,3],[-29,22],[-10,11],[-2,11],[26,2],[12,11],[4,8],[20,6],[34,1],[45,-12],[19,-24],[-44,-21],[-9,-14]],[[67603,98329],[-52,-2],[-51,9],[-67,29],[-67,34],[20,18],[63,23],[82,42],[139,9],[67,0],[67,10],[19,21],[13,41],[12,22],[15,17],[74,14],[63,-1],[63,-16],[40,-14],[38,-28],[20,-23],[-6,-28],[3,-23],[18,-21],[-122,-65],[-125,-36],[-326,-32]],[[75435,98583],[-96,-45],[-346,29],[-16,20],[-5,13],[47,25],[288,-9],[103,-9],[25,-24]],[[76812,98545],[10,-26],[36,-21],[18,-21],[183,-67],[80,-8],[36,-17],[10,-20],[-3,-37],[-31,0],[-22,-12],[-124,-15],[-30,-22],[-24,-45],[13,-9],[12,-13],[37,-77],[10,-12],[37,-11],[-33,-29],[-35,-19],[-366,-37],[-249,-15],[-83,-16],[-27,2],[-65,-29],[-127,-38],[-61,0],[-181,53],[-222,45],[-31,25],[-55,15],[-71,12],[-31,51],[45,35],[58,34],[97,12],[92,20],[69,49],[43,48],[78,51],[-135,-13],[-51,7],[5,17],[28,36],[15,12],[49,19],[35,36],[81,25],[39,4],[38,-1],[70,12],[70,18],[66,10],[65,5],[63,14],[62,28],[27,48],[179,5],[28,-11],[22,-29],[26,-10],[31,-6],[79,-48],[15,-14]],[[66475,98677],[-60,-7],[-105,12],[-30,14],[7,13],[68,18],[54,4],[57,-19],[26,-23],[-17,-12]],[[66058,98816],[14,-23],[43,-13],[117,-11],[35,-26],[-53,-19],[-143,-10],[15,-38],[29,-28],[-29,-33],[-40,-16],[-88,-19],[-81,24],[-94,35],[-42,-23],[-44,-14],[-41,2],[-48,27],[-132,-21],[-40,23],[-29,48],[87,10],[104,-15],[69,48],[88,21],[70,51],[33,17],[76,-3],[25,4],[73,13],[26,-11]],[[67680,98853],[-34,-8],[-179,7],[-86,14],[-12,8],[-4,7],[-114,12],[49,16],[142,7],[254,-19],[16,-13],[5,-8],[-37,-23]],[[66193,98914],[-92,-12],[-13,9],[-3,6],[10,15],[11,29],[42,17],[313,16],[41,-17],[-15,-26],[0,-12],[-294,-25]],[[58474,51228],[-9,-9],[-2,-28],[11,-44],[34,-92],[22,-17],[14,-36],[14,-60],[5,-75],[-6,-90],[3,-68],[13,-44],[3,-57],[-6,-70],[-7,-42],[-9,-14],[-9,-6],[-14,5],[-16,-6],[-17,-13],[-11,-2]],[[58215,51043],[9,1],[60,29],[6,-9],[10,-58],[5,-8],[8,-2],[17,13],[31,45],[13,28],[16,38],[20,44],[12,37],[11,23],[14,6],[16,-1],[11,-1]],[[45264,63828],[-14,29],[25,300],[1,25]],[[61663,61471],[21,-3],[-9,19],[-2,9],[10,26],[30,-55],[-1,-64],[-2,-15],[-8,14],[-6,13],[-2,15],[-8,16],[-30,-10],[-18,17],[-27,55],[-7,39],[11,8],[12,19],[7,31],[-7,32],[16,-5],[9,-33],[1,-75],[3,-16],[-5,-17],[12,-20]],[[60250,66464],[-7,0],[-20,39],[-11,29],[-12,19],[-53,39],[-8,25],[9,25],[5,-25],[10,-14],[44,-36],[49,-76],[9,-7],[-15,-18]],[[60165,66654],[-3,-8],[-12,20],[1,45],[10,25],[-1,-34],[5,-35],[0,-13]],[[63456,68284],[15,-54],[7,-54],[29,-128],[41,-100],[9,-36],[7,-55],[-7,-21],[-3,-23],[30,-55],[51,-46],[19,-12],[22,-21],[-17,-31],[30,-74],[34,-74],[37,-17],[50,-113],[74,-73],[46,-96],[-4,-2],[-14,10],[-16,13],[-5,-12],[0,-40],[5,-47],[23,-41],[21,-29],[8,-56],[-17,-120],[-5,1],[-11,10],[-12,2],[-6,-7],[14,-86],[13,-66],[17,-52],[14,-77],[11,-32],[49,-82],[14,-68],[14,-127],[30,-70],[17,-55],[22,-46]],[[64240,66017],[20,-24],[20,3],[2,-23],[-13,-31],[-17,-78],[24,-13],[22,-6],[17,-13],[9,0]],[[64438,62785],[-66,-18],[-63,-18],[-71,-20],[-86,-24],[-67,-18],[-98,-28],[-88,-24],[-82,-23],[-83,-23],[-70,-20],[-42,-23],[-49,-49],[-76,-77],[-77,-78],[-39,-40],[-42,-104],[-21,-52],[-39,-95],[-29,-72],[-34,-86],[-15,-76],[-23,-117],[-20,-30],[-33,-38],[-30,-27],[-47,3],[-26,73],[-29,76],[-14,31],[-12,2],[-47,-10],[-57,-12],[-66,13],[-77,15],[-72,13],[-36,10],[-47,50],[-12,10],[-13,2],[-55,2],[-56,1],[-56,-16],[-53,6],[-55,-9],[-20,-19],[-21,1],[-14,-17],[-11,-8],[-15,15],[-17,-4],[-25,13],[-17,32],[-15,29],[-16,16],[-18,9],[-16,1],[-20,-18],[-12,-17],[-31,-56],[-1,-20],[14,-33],[-5,-16],[-18,-20],[-5,-53],[-3,-29],[-3,-69],[8,-55],[11,-20],[1,-24],[-6,-47],[-17,-14],[-12,-45],[-8,-21],[-13,-24],[-52,-79]],[[61888,61273],[-3,46],[-16,68],[-1,49],[-8,48],[-14,37],[-26,38],[-3,53],[-19,52],[-25,42],[-15,77],[-10,103],[-67,135],[-84,124],[-26,71],[-42,143],[-21,113],[-56,130],[-2,50],[-9,61],[-13,68],[-7,54],[-57,235],[-18,37],[-16,53],[-4,40],[-5,22],[-39,39],[-38,99],[-111,157],[-55,15],[-43,56],[-32,74],[-34,126],[-60,136],[-50,194],[16,71],[-1,49],[-16,84],[-17,64],[-12,61],[10,88],[3,98],[10,52],[7,57],[-9,115],[-17,61],[2,41],[-19,20],[-16,44],[16,0],[-29,62],[-11,34],[-11,84],[-14,64],[-45,146],[-22,89],[-49,114],[-53,85],[-33,38],[-16,35],[-28,1],[-30,51],[-21,1],[-26,8],[-31,97],[-26,90],[-44,118],[11,31],[13,50],[-6,65],[-7,44],[-19,81],[-64,202],[-17,29],[-27,34],[-16,88],[-8,78],[-44,38],[-74,282],[-44,99],[-17,66],[-50,109],[-24,109],[-51,100],[-44,173],[-67,174],[-29,30],[-69,12],[-30,13],[-27,-38],[-2,48],[19,67],[26,140],[6,123],[42,364]],[[60241,64514],[4,-132],[12,-105],[43,-150],[36,-81],[13,-44],[1,-21],[-1,-19],[-11,22],[-19,15],[-3,-70],[5,-50],[4,-94],[15,-101],[-11,-93],[2,-158],[19,-190],[-4,-121],[32,-282],[30,-156],[17,-39],[19,-20],[36,-14],[53,-80],[43,-84],[15,-44],[20,-48],[14,9],[9,12],[13,-39],[67,-84],[10,-39]],[[59466,57293],[-1,0],[-51,0],[-1,1],[-1,2],[-1,2],[-1,4],[-2,17],[-1,25],[2,44],[6,52],[18,74],[0,6],[1,3],[0,4],[-2,13],[-2,12],[-1,17],[3,38],[0,12],[0,15],[-2,10],[-12,63],[-4,11],[-120,202],[-22,55],[-3,4],[-3,3],[-61,46],[-3,5],[1,6],[1,9],[8,27],[1,7],[1,11],[-28,427],[0,8],[2,6],[1,3],[3,9],[4,10],[3,16],[1,6],[4,77],[0,66],[16,112],[1,47],[-132,4],[-1,-3],[0,-3],[0,-3],[0,-4],[0,-7],[-1,-14],[0,-7],[0,-8],[2,-26],[4,-21],[0,-6],[0,-8],[0,-13],[-185,-2],[73,-168],[1,-3],[2,-9],[0,-7],[1,-59],[-3,-93],[0,-60],[5,-39],[19,-76],[-1,-15],[-4,-18],[-131,-227],[-4,-11],[-18,-95],[-17,-55],[-8,-16],[-31,-78],[-119,-243],[-20,-16],[-59,-7],[-32,-1],[-3,-2],[-5,-4],[-4,-7],[-4,-4],[-3,2],[-5,7],[-73,136],[-131,172],[-13,-16],[-74,-74],[-15,-19],[-9,-14],[0,-82],[-13,-42],[-24,-46],[-64,-29],[-33,-25],[-34,-38],[-6,-9],[-13,-26],[-26,-52],[-2,-40],[4,-36],[-221,1],[-15,29],[-31,127],[-1,1],[-22,-7],[-202,15],[-29,-14],[-57,-52],[-29,-9],[-30,24],[-106,253],[-23,31],[-9,16],[-15,44],[-23,27],[-7,19],[-3,27],[1,55],[-8,35],[-16,8],[-143,-59],[-20,7],[-30,-10],[-11,-11],[-12,-33],[-2,-35],[0,-35],[-3,-34],[-11,-38],[-41,-86],[-9,-38],[2,-95],[-3,-47],[-6,-22],[-17,-37],[-7,-21],[-3,-29],[-1,-63],[-3,-29],[-22,-73],[-5,-26],[-2,-53],[-3,-16],[-65,-42],[-24,-27],[-14,-41],[-4,-18]],[[56349,58133],[10,63],[12,94],[1,43],[-5,45],[-21,33],[-18,4],[-8,17],[-16,25],[-15,19],[-14,37],[-10,52],[7,184],[-5,25],[-20,7],[-5,13],[1,36],[-12,105],[-12,87],[7,48],[-18,65],[-33,29],[-31,-9],[-33,-13],[-20,4],[-14,12],[-10,24],[-5,28],[5,43],[18,79],[23,64],[46,59],[13,31],[7,35],[1,40],[-3,42],[-5,38],[-14,51],[-13,60],[0,40],[6,29],[13,35],[24,39],[6,8],[16,21],[13,15],[34,42],[8,19],[-3,24],[-8,20],[-14,27],[-2,33],[-4,57],[-7,37],[-5,26],[9,20],[14,28],[18,17],[28,14],[11,20],[3,38],[-1,37],[10,27],[14,57],[10,27],[18,30],[19,38],[8,43],[2,42],[-10,128],[21,54],[27,44],[38,-3],[60,9],[40,19],[29,-1],[66,-24],[5,6],[2,5],[3,34],[0,85],[0,257],[0,257],[0,257],[0,257],[0,257],[0,257],[0,256],[0,257]],[[59437,54274],[-65,-136],[-48,-100],[-8,-14],[-14,-18],[-46,-1],[-47,12],[-44,61],[-44,-47],[-28,-15],[-17,-6],[-39,-7],[-55,-25],[-26,-32],[-13,-25],[-11,-46],[-6,-5],[-10,6],[-14,18],[-30,27],[-15,58],[-14,36],[-11,18],[-47,-58],[-22,-14],[-19,2],[-34,33],[-38,27],[-19,0],[-29,-35],[-33,-52],[-17,-52],[-8,-31]],[[45357,58959],[-9,26],[-11,42],[7,31],[23,20],[34,25],[19,-13],[10,0],[2,16],[-3,9],[-26,22],[-14,30],[-11,-17],[-10,-37],[-8,-11],[-12,-10],[-6,25],[-3,24],[5,19],[-2,104],[3,55],[-2,49]],[[45399,59669],[-7,59],[-17,47],[-27,40],[-6,37],[9,33],[26,26],[6,19],[-13,-2],[-21,-18],[-14,0],[-1,51],[-23,66],[-26,112],[-30,46],[-24,91],[-26,35],[-24,16],[-20,-3],[-7,-42],[-25,60],[34,21],[73,75],[85,215],[76,253],[9,60]],[[78880,52610],[-42,-38],[-47,34],[15,57],[32,13],[25,-18],[14,-13],[10,-16],[-7,-19]],[[42704,18182],[1,-33],[-43,30],[-10,14],[14,19],[27,0],[7,-11],[4,-19]],[[39693,20699],[27,-28],[22,19],[22,-2],[12,-10],[12,-3],[16,-1],[27,-47],[-11,-41],[29,8],[26,-35],[12,3],[5,14],[17,16],[11,-22],[14,-41],[18,-13],[15,-43],[12,-56],[11,-7],[19,-1],[20,8],[-8,-48],[3,-42],[32,-30],[-19,-17],[-20,-24],[-41,-19],[-11,8],[-35,42],[-17,50],[-37,71],[-8,21],[-9,13],[-34,9],[-30,17],[-24,36],[-8,22],[-10,15],[-33,-1],[-21,17],[-21,23],[-94,67],[-37,-7],[-17,19],[0,33],[20,20],[-82,8],[-29,12],[20,7],[114,1],[43,6],[3,-15],[38,-29],[36,-3]],[[48418,42627],[-25,-3],[2,27],[19,29],[13,-4],[0,-33],[-9,-16]],[[46009,47249],[-9,-1],[-3,5],[-2,14],[5,22],[4,13],[7,-2],[8,-15],[8,-13],[-4,-12],[-14,-11]],[[96368,45123],[-24,-9],[-10,2],[-16,50],[12,11],[18,-4],[5,-30],[15,-20]],[[94604,45047],[-20,-20],[-17,10],[-14,15],[-11,44],[-23,28],[-34,11],[-14,19],[-3,10],[-24,8],[-6,24],[2,25],[3,13],[22,-12],[103,-117],[25,-36],[11,-22]],[[96147,45646],[-22,-10],[-7,3],[-17,-6],[-18,-41],[-13,6],[-10,-2],[-8,34],[0,17],[13,-3],[6,33],[14,17],[32,7],[28,-10],[10,-8],[-9,-30],[1,-7]],[[94920,45859],[35,-34],[20,6],[30,-23],[23,13],[15,-30],[36,-118],[0,-38],[24,-27],[-20,-5],[-28,14],[-22,-10],[-22,23],[-38,12],[-33,27],[-69,87],[0,43],[-11,21],[-3,54],[-25,17],[-29,3],[-2,26],[5,45],[21,-1],[26,-19],[50,-65],[12,-12],[5,-9]],[[94873,46298],[4,-62],[-2,-21],[-21,45],[-10,-16],[-9,22],[1,46],[1,50],[-4,38],[-11,55],[12,-9],[39,-148]],[[94374,46501],[61,-92],[27,8],[80,-2],[47,-66],[28,-30],[16,-59],[19,-14],[12,-30],[7,-55],[-5,-9],[-24,-20],[-18,-9],[-47,20],[-44,42],[-89,5],[-41,12],[-14,17],[-13,21],[-21,51],[-17,61],[-2,35],[-2,67],[5,25],[17,25],[18,-3]],[[94490,46661],[16,-8],[8,1],[18,-31],[25,-46],[-10,-23],[-20,12],[-7,-5],[-2,3],[-4,23],[-22,23],[-19,2],[-3,27],[20,22]],[[94218,46587],[-4,-1],[-13,7],[-16,2],[-9,20],[11,29],[15,18],[6,-4],[7,-12],[14,-5],[2,-37],[-13,-17]],[[93789,46797],[0,-20],[-16,6],[-36,31],[-1,14],[20,5],[15,-4],[12,-18],[6,-14]],[[93944,46761],[-6,-2],[-7,23],[15,62],[8,-50],[4,-19],[-14,-14]],[[93918,46840],[-27,-45],[-20,15],[-17,39],[6,47],[3,13],[8,2],[8,10],[9,21],[29,-17],[8,-11],[-18,-29],[6,-9],[4,-14],[1,-22]],[[93718,46823],[0,-8],[-15,16],[-34,78],[6,26],[31,50],[10,7],[8,-31],[-7,-46],[-10,-12],[-5,-43],[16,-37]],[[94357,46942],[-13,-8],[-20,21],[-9,19],[4,30],[12,12],[13,-20],[1,-21],[12,-33]],[[94652,47053],[69,-171],[-3,-31],[-9,-19],[-3,-58],[8,-22],[19,-10],[32,-62],[13,-75],[1,-23],[14,-34],[0,-72],[30,-100],[3,-48],[-3,-22],[-12,13],[-37,113],[-41,49],[-5,21],[-42,66],[-28,111],[-30,198],[14,47],[-34,96],[1,25],[15,-6],[10,2],[5,11],[13,1]],[[93822,47095],[18,-47],[20,-105],[-4,-37],[-14,-2],[-4,-22],[-20,51],[-26,13],[-19,32],[-6,62],[-2,39],[-15,7],[-42,-10],[-14,-34],[-19,11],[-4,30],[3,29],[26,29],[5,38],[26,64],[15,11],[31,-23],[3,-92],[11,-30],[31,-14]],[[93500,47135],[-3,-14],[-15,71],[1,36],[3,23],[5,7],[12,-79],[-3,-44]],[[93658,47172],[-6,-9],[-30,4],[-23,59],[0,44],[18,40],[22,8],[12,-16],[11,-34],[4,-43],[-3,-38],[-5,-15]],[[93523,47279],[-5,-8],[-9,31],[-7,10],[0,34],[-28,57],[-2,39],[16,38],[22,-23],[22,-47],[25,-16],[-5,-32],[-23,-57],[-6,-26]],[[94410,46927],[0,-14],[-37,48],[-28,59],[-81,64],[-17,33],[-15,4],[-41,54],[-41,36],[-25,47],[-6,19],[-15,11],[-25,51],[-25,34],[-9,62],[-24,43],[-6,19],[77,-35],[36,-68],[30,-38],[11,-28],[27,-38],[25,-4],[24,-38],[23,-10],[18,-20],[114,-172],[-14,-46],[15,-33],[9,-40]],[[93288,47754],[-28,-13],[-17,18],[7,44],[10,23],[35,-41],[-7,-31]],[[93745,47620],[9,-20],[-21,-35],[-29,19],[-6,19],[0,11],[-20,-7],[-40,17],[-54,82],[-58,156],[-56,86],[-11,26],[-1,45],[8,17],[34,-19],[45,-71],[74,-73],[20,-38],[12,-90],[13,-27],[40,-69],[21,-16],[11,-3],[9,-10]],[[46520,56126],[-4,-15],[-18,37],[-96,56],[27,29],[66,9],[20,-17],[9,-15],[3,-27],[-7,-57]],[[46803,55821],[-11,23],[-52,82],[-54,55],[-116,91],[-39,25],[2,33],[13,59],[-22,69],[9,51],[-9,0],[-16,-31],[-36,9],[-23,44],[-19,15],[-9,22],[-12,115],[-9,52],[-17,32],[-36,8],[-15,69],[-19,54],[3,34],[16,-2],[13,-24],[20,-10],[25,58],[23,32],[5,28],[-3,15],[-14,-24],[-37,6],[-9,-21],[-17,-7],[-13,69],[1,40],[5,45],[38,7],[3,14],[-26,10],[-33,52],[-6,35]],[[25607,59561],[-7,-8],[5,-58],[-16,-35],[-14,-25],[-26,-7],[-44,-2],[-66,28],[-48,39],[-26,0],[8,-13],[21,-8],[27,-27],[-8,-8],[-99,57],[-114,112],[-68,18],[-78,30],[-46,71],[-35,30]],[[63593,58328],[0,-159],[0,-155],[0,-161],[0,-265],[0,-96],[0,-140],[0,-65],[-40,-126],[-49,-154],[-52,-165],[-44,-136],[-40,-127],[-41,-130]],[[62012,58467],[54,-88],[53,-180],[62,-144],[85,-135],[33,-45],[30,-24],[155,4],[109,122],[100,89],[33,18],[58,-24],[64,-7],[57,-27],[29,7],[114,103],[71,101],[48,42],[20,1],[66,-36],[85,15],[117,87],[37,18],[28,1],[64,-39],[9,2]],[[63593,58328],[35,7],[90,41],[71,63],[130,45],[99,114],[17,55],[30,70],[43,23],[111,-82],[18,-6],[-7,-50],[-3,-50],[-23,-88],[-15,-98],[11,-149],[5,-242],[-3,-35],[-7,-34],[-3,-28],[-12,-9],[-5,-16],[9,-6],[34,26],[0,29],[2,14],[28,-32],[21,-13],[5,-31],[-1,-20],[-32,9],[-17,16],[-48,-26],[-29,-29],[-9,-47],[-7,-190],[-11,-123],[-3,-162],[-38,-108],[-14,-76],[-57,-152],[-31,-130],[-9,-64],[-51,-178],[-70,-137],[-25,-174],[-25,-110],[-28,-99],[-62,-177],[-31,-122],[-40,-213],[-12,-135],[-111,-391],[-115,-312],[-72,-263],[-129,-305],[-176,-393],[-230,-467],[-62,-95],[-252,-288],[-163,-241],[-83,-164],[-88,-143],[-69,-136],[-210,-460],[-22,-43],[-20,-41],[-27,-77],[-18,-31],[-50,-131],[-31,-69],[-36,-67],[-14,-47],[-11,-55],[-12,-31],[-31,-130],[-28,-86],[-28,-67]],[[34402,78779],[-6,-5],[-19,8],[9,18],[7,5],[9,2],[4,-5],[-1,-13],[-3,-10]],[[34370,78823],[-24,-25],[-9,14],[2,17],[13,39],[-1,11],[-14,76],[2,13],[4,5],[21,-16],[3,-21],[-10,-46],[7,-31],[9,-23],[-3,-13]],[[51849,51912],[-28,-42],[-10,11],[-7,29],[-8,64],[3,30],[13,35],[28,34],[17,3],[17,-46],[0,-47],[-25,-71]],[[52062,52746],[-11,-15],[-12,12],[-3,23],[16,44],[7,11],[6,-9],[4,-12],[1,-18],[-8,-36]],[[34112,55039],[4,-12],[11,67],[2,53],[8,54],[14,63],[24,31],[140,-32],[64,-30],[82,-52],[12,-55],[0,55],[-4,56],[23,40],[50,14],[75,-19],[64,23],[87,-3],[133,-45],[59,-31],[25,-28],[4,-50],[-2,-64],[-10,-62],[-21,-82]],[[56260,80110],[-4,-24],[-11,-27],[-14,-29],[-12,-34],[-16,-74],[-10,-35],[-43,-67],[-3,-94]],[[53771,78062],[17,11],[23,30]],[[54591,84268],[-15,-29],[-12,2],[-9,39],[-2,99],[5,49],[61,178],[27,14],[38,109],[10,48],[17,44],[10,39],[8,15],[17,-7],[8,-7],[-18,-23],[2,-29],[-1,-13],[-48,-128],[-12,-83],[-17,-21],[-69,-296]],[[55298,85158],[-23,-14],[-13,-40],[-19,-7],[-17,-14],[-7,-128],[33,-49],[-18,-7],[-17,-14],[-11,-22],[-12,-47],[-45,-26],[-17,-19],[-25,-44],[-13,-63],[-25,-27],[-29,-6],[17,52],[22,42],[-21,28],[-13,46],[-16,34],[13,39],[-7,63],[2,62],[19,32],[22,25],[34,59],[37,42],[51,19],[23,-17],[10,38],[17,9],[15,-9],[33,-37]],[[55321,85208],[-5,-36],[-15,3],[-13,26],[27,41],[40,-2],[14,-9],[-48,-23]],[[55115,85846],[-12,-6],[-6,2],[7,27],[6,11],[19,11],[5,-2],[-19,-43]],[[55165,86100],[-7,-19],[-7,23],[3,5],[4,23],[14,12],[21,-7],[0,-6],[-20,-19],[-8,-12]],[[56709,89749],[-73,-13],[-56,26],[-27,-13],[-48,-1],[-55,-10],[-19,-21],[-14,-8],[-51,29],[-48,49],[-35,-37],[-23,-7],[-20,33],[-18,6],[-10,-12],[-8,-29],[-14,-24],[-3,-14],[-2,-60],[-4,-14],[-46,8],[2,-16],[10,-8],[5,-10],[-17,-13],[-47,2],[-4,-14],[13,-22],[-10,-19],[-10,-8],[-55,-12],[-32,3],[-9,-12],[-3,-16],[6,-16],[14,-9],[5,-10],[-1,-21],[-12,-4],[-33,38],[-10,-2],[7,-20],[19,-22],[11,-22],[10,-26],[-2,-21],[-41,-65],[-37,-41],[-27,-37],[-16,-39],[19,-20],[20,-29],[15,-55],[17,-49],[35,-46],[-7,-27],[-8,-21],[-58,-47],[-66,-70],[-71,-178],[-24,-24],[-62,-30],[-23,-30],[-46,-35],[-81,-29],[-37,-42],[-16,-43],[-19,-3],[-18,17],[-24,12],[-3,-28],[1,-21],[-39,31],[-19,-28],[-14,-47],[-56,-63],[-61,11],[-6,-11],[16,-8],[2,-10],[-11,-5],[-17,0],[-25,-12],[-17,1],[-8,-30],[-13,-37],[-34,-15],[-18,-3],[-9,-20],[53,-5],[-4,-17],[-1,-17],[-6,-19],[-60,-27],[-9,-21],[-12,-13],[-27,0],[1,13],[4,13],[-39,-1],[-12,31],[-8,-8],[4,-25],[11,-25],[11,-38],[-9,-24],[-10,-11],[7,-11],[21,-8],[9,-15],[-25,-13],[-32,-44],[-32,-1],[-20,-28],[-21,0],[-17,18],[-27,15],[-9,-27],[-2,-20],[16,-53],[29,-41],[28,-18],[-20,-12],[-15,-26],[-17,-83],[-10,-33],[-10,-57],[6,-49],[6,-24],[13,-32],[-36,4],[-39,19],[6,-39],[-24,-47],[4,-40],[5,-27],[-7,-44],[11,-14],[6,-26],[-10,-20],[5,-17],[1,-59],[8,-92],[-3,-20],[21,-80],[-5,-29],[-3,-36],[31,-34],[27,0],[27,1],[10,-9],[11,-24],[8,-29],[23,2],[36,24],[23,6],[16,-46],[42,-59],[24,-27],[42,-14],[43,-48],[-6,-58],[18,-20],[52,-22],[18,-31],[9,-27],[14,-21],[16,-66],[-6,-41],[-21,-14],[-49,-44],[-22,-32],[-17,-20],[-49,-44],[-18,-8],[-17,-22],[-16,-10],[-15,6],[-55,-41],[4,-18],[42,-7],[22,9],[17,20],[18,5],[16,-4],[18,16],[14,7],[14,-8],[16,-39],[-33,-20],[-23,-1],[-12,-64],[-14,-27],[-10,-13],[-52,-27],[-35,-35],[-40,-27],[-18,6],[-26,-29],[-59,-33],[-31,-45],[-68,-40],[-34,-32],[-95,-2],[-89,7],[-29,-16],[29,-4],[20,-16],[25,7],[57,-8],[29,-8],[38,-54],[-28,-19],[-48,-14],[18,-76],[15,-51],[-20,-31],[-1,-140],[-27,-2],[-12,-58],[9,-30],[-1,-69],[6,-42],[13,-39],[-6,-41],[-43,-95],[1,-44],[8,-27],[6,-42],[-20,-81],[-14,-69],[-16,-57],[-37,-69],[-18,-51],[-43,-160],[-21,-32],[-26,-24],[-29,22],[-27,13],[-32,-2],[-51,-18],[-77,12],[-74,-6],[-19,-16],[11,-58],[-28,-8],[-26,17],[-24,-20],[-20,-22],[-39,-51],[-13,-32],[-3,-59],[20,-54],[18,-62],[-46,-76],[-26,-2],[-76,20],[-135,-47],[-121,38],[15,40],[0,30],[6,45],[4,47],[-1,32],[-9,33],[-29,44],[-68,147],[-19,62],[-14,26],[10,1],[55,-33],[13,4],[13,13],[-16,47],[-14,22],[-10,32],[33,9],[23,-2],[17,37],[-10,58],[-25,19],[-21,7],[-40,93],[-42,48],[-75,184],[-27,127],[-26,-12],[-12,55],[-9,53],[-2,38],[-40,22],[-1,27],[-8,120],[-42,16],[-28,68],[-5,128],[-28,23],[-23,-7],[1,32],[5,30],[-13,117],[-4,108],[-11,32],[-6,38],[5,33],[8,19],[28,5],[26,-29]],[[58920,36382],[-9,9],[-16,7],[-8,-3],[-8,-83],[-6,-122],[4,-77],[-60,-2],[-76,8],[-54,33],[-59,73],[-35,113],[-15,71],[-21,4],[-4,12],[-2,87],[1,91],[4,25],[39,112],[25,69],[15,68],[33,79],[36,50],[13,8],[9,-2],[62,-70],[65,-66],[14,8],[7,6]],[[32497,62251],[-1,-14],[-3,-15],[-18,13],[-10,13],[0,3]],[[65427,49139],[1,-53],[-13,18],[-4,34],[-18,26],[-9,24],[20,29],[23,-78]],[[59993,71790],[-22,129],[-3,55],[1,65],[15,94],[-7,43],[-1,30],[-4,40],[-38,87],[21,160],[15,39]],[[59970,72532],[20,-4],[45,-45],[7,1],[13,60],[14,20],[27,18],[8,97],[12,18],[16,10],[24,2],[20,6],[2,17],[-29,111],[2,29],[14,112],[9,44],[8,14],[33,-5],[46,-20],[12,-32],[23,-29],[33,2],[39,-6],[30,-2],[25,21],[54,37],[27,13],[25,17],[79,61],[32,-4],[22,-9],[16,-9],[38,-43],[30,-42],[22,-13],[39,1],[56,-8],[69,1],[40,11],[51,21],[92,51],[121,105],[71,51],[30,6],[40,1],[40,-14],[45,-9],[21,1],[48,10],[64,22],[40,17],[48,29],[30,47],[9,5],[13,-8],[6,-4],[12,-27],[13,-69]],[[29907,64430],[32,-32],[19,5],[2,-7],[-11,-7],[-2,-6],[-31,-9],[-9,2],[-2,22],[2,32]],[[30094,64380],[-1,-8],[-16,23],[-30,0],[-5,30],[12,5],[38,-11],[9,-26],[-7,-13]],[[30033,64423],[-5,-6],[-16,20],[-2,16],[-6,1],[-10,14],[3,19],[22,1],[9,-52],[5,-13]],[[50450,55424],[-86,-41],[-35,-33]],[[77683,55599],[-5,-3],[-10,47],[13,67],[13,-83],[-11,-28]],[[77521,56216],[7,-70],[-10,15],[-8,30],[0,44],[2,7],[9,-26]],[[77386,56413],[-3,-10],[-14,110],[20,-29],[-3,-71]],[[77335,56394],[-3,-42],[-11,1],[-12,-27],[-5,-4],[-10,86],[11,121],[6,18],[8,-32],[23,-15],[-10,-70],[3,-36]],[[77307,57057],[-16,-7],[2,32],[4,20],[8,5],[3,-34],[-1,-16]],[[77797,57365],[1,-33],[-6,-39],[-25,-23],[-9,31],[2,48],[4,13],[25,-3],[8,6]],[[77798,57428],[-3,-9],[-11,18],[-8,21],[-4,26],[17,-1],[8,-25],[1,-30]],[[78501,58569],[-5,-60],[-15,24],[3,31],[7,13],[10,-8]],[[78451,58749],[1,-14],[-14,10],[-5,-5],[-17,4],[-8,80],[2,19],[11,-6],[17,-40],[8,-27],[5,-21]],[[78592,58586],[-6,-2],[-8,40],[-26,67],[-8,71],[-30,79],[-16,31],[-6,-26],[-9,-28],[-30,40],[-25,43],[-23,81],[-3,-19],[-6,-17],[-26,64],[-28,51],[-25,19],[-15,17],[-15,27],[-31,28],[-78,-40],[-98,31],[-38,-30],[-16,19],[-9,35],[9,59],[2,125],[12,88],[-6,67],[6,31],[4,43],[-15,17],[-70,34],[-15,27],[-18,-31],[-84,-17],[-31,-26],[-29,-49],[-8,-64],[17,-41],[11,-73],[-30,-158],[-5,-46],[12,-194],[-5,-106],[-16,-71],[-26,-63],[-11,-109],[-20,-50],[-28,-114],[-18,-143],[-13,-66],[-8,-122],[-56,-184],[-13,-104],[-20,-40],[7,-31],[1,-52],[-7,-139],[-2,-115],[8,-62],[27,-122],[-6,-36],[-3,-50],[22,-23],[17,-7],[91,58],[31,-15],[12,-54],[8,-47],[15,-254],[8,-48],[19,-45],[20,-48],[7,9],[1,18],[1,20],[19,-48],[14,-90],[48,-476],[14,-61],[11,-63],[-29,31],[-8,105],[-8,45],[-11,6],[-16,0],[-1,18],[12,35],[-2,41],[-17,34],[-27,-27],[1,-74],[12,-57],[46,-127],[15,-53],[18,-15],[27,8],[32,-54],[25,-50],[63,-77],[38,8],[41,19],[27,-5],[27,-20],[32,-64],[52,-161],[84,-134]],[[77810,55553],[-69,178],[-48,73],[6,132],[-14,26],[-18,2],[-14,37],[12,79],[-19,-15],[-26,2],[-21,22],[-16,109],[-11,33],[-22,58],[-29,0],[-10,27],[2,70],[-21,43],[-28,36],[-23,20],[-24,114],[-19,28],[-16,22],[-22,-15],[-7,-41],[-15,-39],[-16,5],[-16,22],[-18,114],[-4,69],[5,129],[23,116],[13,185],[20,117],[13,39],[20,159],[39,204]],[[69625,75424],[-8,-2],[-15,28],[-5,19],[6,5],[13,-13],[8,-23],[1,-14]],[[68821,73255],[11,42],[5,139],[13,49],[41,86],[22,66],[24,54],[17,18],[16,42],[13,48],[4,31],[-1,24],[-5,15],[-23,33],[-30,51],[-16,52],[-8,66],[-3,47],[28,127],[-4,21],[-8,20],[-16,13],[-24,5],[-23,-6],[-30,0],[-21,7],[-5,8],[-2,58],[-5,13],[-9,11],[-60,26],[-12,12],[-2,14],[21,129],[9,10],[9,21],[14,22],[49,37],[53,-16],[47,-17],[46,-9],[16,-6],[27,-5],[18,4],[12,15],[22,42],[7,62],[8,55],[13,5],[13,-6],[7,11],[3,15],[2,13],[6,3],[9,-15],[6,4],[5,10],[-2,11],[-11,19],[-10,31],[1,10],[4,11],[29,10],[13,2],[4,11],[-1,17],[-11,10],[-40,-6],[-40,1],[-5,11],[2,11],[6,9],[84,23],[44,-8],[32,-12],[13,6],[-15,52],[21,5],[2,18],[-27,137],[15,13],[15,27],[-1,51],[13,25],[16,17],[23,-17],[37,-51],[11,-10],[12,-2],[17,15],[64,50],[37,29],[43,41],[7,16],[15,62],[8,4],[11,-6],[38,-65],[22,-41],[0,-14],[-6,-11],[1,-10],[31,-23],[0,-10],[-7,-20],[-3,-11],[-4,-4],[-42,-57],[-46,-63],[-1,-8],[-3,-16],[1,-16],[7,-13],[20,-9],[18,-12],[9,-33],[10,-31],[14,-7],[69,19],[16,3]],[[64752,74195],[-3,-27],[-15,81],[-7,89],[9,26],[11,-2],[-10,-32],[15,-135]],[[64976,73354],[-5,40],[-14,148],[-7,148],[1,69],[8,138],[-1,69],[-3,63],[3,61],[6,69],[4,71],[-5,49],[-15,39],[-25,49],[-4,29],[-2,33],[-24,3],[-22,34],[-17,18],[-39,20],[-19,1],[-18,-14],[-13,-30],[-9,47],[0,49],[31,102],[19,-30],[24,-12],[30,-2],[29,8],[-6,35],[-13,20],[-17,15],[-6,46],[2,48],[8,45],[-9,18],[-14,11],[-32,-1],[-42,12],[-42,5],[-10,-53],[23,-70],[-19,34],[-19,46],[-26,81],[-16,96],[-3,103],[14,85],[18,80],[11,102],[15,101],[15,-45],[17,-40],[24,-38],[13,-9],[39,-15],[25,6],[27,22],[26,-7],[22,-42],[20,-46],[29,-10],[61,33],[29,8],[25,-15],[13,-3],[13,2],[-11,42],[-5,40],[15,21],[48,-23],[31,15],[8,9],[7,10],[3,35],[-1,36],[-4,33],[-9,29],[-22,42],[-86,98],[-28,39],[-24,50],[-16,72],[-12,74],[-11,55],[-30,129],[-12,15],[-14,7],[-36,4],[-36,-10],[-58,-22],[-34,7],[-15,-14],[-39,-54],[-18,-46],[-25,-106],[19,-34],[0,-22],[-15,-157],[9,-76],[-3,-6],[-7,18],[-22,78],[-38,94],[-32,145]],[[65549,75646],[73,-7],[66,-6],[82,-7],[24,-7],[29,-6],[15,-1],[13,25],[8,14],[7,11],[-2,12],[-10,11],[-16,35],[-10,126],[-5,107],[19,34],[22,24],[32,74],[17,22],[26,19],[84,5],[36,14],[11,24],[19,60],[6,49],[11,22],[12,17],[13,-1],[25,-14],[19,-8],[14,-11],[12,-17],[12,-30],[2,-20],[6,-11],[9,-1],[7,0],[5,5],[3,10],[-2,13],[-16,38],[-36,70],[-24,28],[-12,15],[-2,15],[15,22],[15,12],[26,-9],[34,-5],[15,11],[16,56],[39,-59],[41,-66],[15,-13],[29,-7],[24,-2],[11,-7],[11,-17],[21,-73],[22,-19],[27,-13],[86,1],[27,-4],[21,-34],[14,-14],[6,-12],[-2,-15],[-5,-19],[-1,-37],[-1,-28],[-7,-14],[-2,-12],[6,-11],[40,-27],[13,-29],[10,-13],[3,-18],[-7,-12],[-19,6],[-9,-19],[0,-34],[13,-32],[4,-30],[-9,-28],[-10,-40],[0,-28],[6,-16],[31,-29],[70,-73],[17,-3],[67,17],[31,1],[18,-11],[52,-10],[17,-12],[17,-1],[24,3],[16,33],[9,8],[7,5],[15,1],[41,-21],[43,-44],[29,-40],[14,-36],[17,-79],[22,-121],[26,-82],[30,-43],[22,-78],[18,-170],[12,-35],[12,-18],[34,-49],[71,-82],[42,-48],[65,-77],[60,-71],[60,-109],[11,-15],[53,-59],[58,-61],[41,14],[62,-93],[25,-34],[10,-12],[45,-37],[71,-76],[90,-110],[59,-64],[16,-7],[16,0],[17,14],[19,11],[32,-14],[34,-26],[22,-19],[25,-28],[20,-26],[15,-13],[51,-23],[9,-14],[6,-15],[0,-16],[-28,-84],[-4,-108],[-1,-81],[4,-63]],[[84454,46462],[45,49],[68,38]],[[84700,46691],[29,48],[25,87],[17,35],[40,33],[16,9],[118,48],[28,3],[74,-1],[100,10],[24,7],[32,21],[31,26],[16,21],[18,14],[25,-18],[44,-15],[11,-12],[11,-17],[-50,-92],[-56,-76],[-34,-23],[-35,-15],[-27,-29],[-23,-46],[-29,-26],[-32,-9],[-28,-14],[-26,-27],[-35,-46],[-14,-5],[-15,1],[-29,-17],[-91,-67],[-55,-73],[-40,-63]],[[84901,47154],[-19,-99],[-20,21],[22,55],[10,17],[7,6]],[[1413,39573],[-2,-87],[-13,40],[-2,18],[14,27],[3,2]],[[1344,39648],[4,0],[4,17],[15,7],[-1,-19],[-21,-59],[-12,23],[-37,38],[-8,29],[13,23],[-2,-18],[6,-8],[21,-4],[19,-16],[-12,-5],[11,-8]],[[1680,41106],[-11,-34],[-5,0],[-12,20],[-5,13],[19,40],[10,3],[12,-13],[0,-12],[-8,-17]],[[33052,57680],[-45,-32],[-118,-8],[-48,12],[-37,-9],[67,70],[8,30],[29,6],[9,9],[9,155],[-4,38],[-5,20],[-12,15],[-26,20],[-5,11],[17,17],[35,9],[26,19],[55,4],[26,16],[45,5],[-22,-71],[-10,-27],[4,-65],[-5,-43],[6,-55],[13,-37],[-9,-35],[-1,-54],[-2,-20]],[[33123,58282],[-15,-6],[2,23],[26,40],[41,26],[10,1],[-6,-35],[-58,-49]],[[53043,71268],[-7,-3],[-13,-16],[-8,-1],[-20,17],[-7,0],[-10,12],[3,68],[3,19],[49,2],[27,-40],[4,-10],[1,-12],[-12,-23],[-10,-13]],[[53132,71862],[-43,-41],[9,36],[28,43],[7,-10],[-1,-28]],[[52382,73120],[68,35],[66,91],[23,22],[152,84],[19,-6],[22,-12],[-6,-31],[-9,-25],[13,-44],[18,27],[-4,18],[-1,23],[31,2],[28,-3],[30,-26],[-2,-100],[40,-97],[-11,-48],[33,-29],[29,35],[15,51],[54,29],[52,74],[28,8],[6,-61],[14,-54],[-19,-18],[-25,-57],[-47,-144],[-43,-42],[-33,-56],[-10,-39],[-3,-46],[8,-82],[23,-84],[28,-51],[26,-15],[61,-80],[-1,-47],[9,-57],[3,-68],[21,-55],[-45,-119],[-25,-86],[-49,-118],[-43,-77],[-93,-115],[-23,-38],[-15,-39],[-7,-41],[3,-49],[30,-119],[41,-70],[41,-38],[72,16],[-2,-46],[5,-55],[29,3],[20,8],[16,54],[36,-37],[18,-112],[30,-34],[3,-13],[-10,-9],[-9,-13],[9,-9],[29,-14],[17,9],[29,-24]],[[57213,74963],[-64,-18],[-19,17],[20,35],[37,22],[12,2],[16,-35],[-2,-23]],[[59970,72532],[17,47],[-19,93],[-21,86],[20,56],[41,67],[44,79],[0,48],[-3,37],[-12,25],[-24,34],[-40,-36],[-29,-40],[-18,-8],[-21,-23],[-10,-41],[-24,-32],[-40,-13],[-60,35],[-65,52],[-37,42],[-30,10],[-28,-18],[-84,-104],[-77,-152],[-19,-26],[-72,-65],[-48,-22],[-22,5],[-95,-29],[-48,-4],[-37,-34],[-72,37],[-44,48],[-26,48],[-42,105],[-31,49],[-67,45],[-119,108],[-31,12],[-80,16],[-85,10],[-18,-40],[-6,-156],[-15,-43],[-6,-81],[-10,-24],[-17,-15],[-25,26],[-18,11],[-41,-33],[-82,-47],[-28,-7],[-94,59],[-35,38],[-22,42],[-8,71],[-14,40],[-2,28],[-5,31],[-19,13],[-21,-24],[-22,1],[-27,15],[-65,59],[-50,5],[-30,-73],[-24,-23],[-25,-7],[-2,21],[20,47],[-78,-9],[-41,-35],[-32,5],[-24,16],[3,20],[25,7],[21,16],[84,13],[20,13],[21,51],[40,44],[5,19],[-31,0],[-129,-13],[-89,7],[-10,-21],[-14,-4],[-3,60],[14,27],[19,-3],[46,24],[-4,49],[-33,34],[-7,19],[-24,5],[-20,23],[-4,59],[-15,65],[-23,31],[3,17],[41,22],[8,90],[-6,56],[-20,4],[-60,44],[-18,-4],[-20,48],[-35,34],[-17,-12],[-11,-16],[-16,7],[-26,30],[-27,17],[-12,20],[15,53],[20,-1],[4,42],[-16,70],[2,36],[17,9],[20,-6],[21,-42],[6,-41],[-4,-39],[13,-38],[9,-10],[6,40],[9,8],[12,-17],[25,-9],[66,24],[12,21],[-48,-2],[-17,19],[-20,44],[-11,40],[-3,19],[-6,29],[7,15],[33,23],[29,64],[-12,18],[-14,9],[-15,-6],[-14,22],[-2,30],[12,25],[1,34],[-38,83],[-10,18],[8,28],[29,45],[27,57],[-4,19],[-20,7],[-95,-24],[-37,-21],[-66,-10],[-5,31],[2,28],[15,50],[-2,125],[9,67],[37,20],[45,100],[73,117],[76,-3],[30,33],[45,2],[9,-24],[5,-22],[40,-33],[70,5],[17,13],[16,18],[-32,57],[10,17],[29,2],[32,-14],[2,-13],[-9,-18],[-10,-32],[10,-6],[90,19],[95,-15],[30,8],[75,0],[13,19],[-22,25],[-22,9],[-15,12],[-15,18],[47,55],[27,11],[126,34],[94,17],[1,13],[-14,0],[-121,28],[-29,22],[-40,52],[-9,15],[-10,25],[6,55],[7,43],[15,25],[48,4],[166,-44],[119,27],[129,-65],[123,13],[26,29],[31,93],[174,155],[61,81],[66,45],[112,49],[94,65],[27,7],[225,-31],[155,-4],[71,62],[42,-21],[-4,-22],[-8,-19],[3,-38],[24,-55],[24,-38],[73,-55],[100,46],[16,-5],[21,-13],[35,-147],[28,-52],[35,-36],[29,-7],[21,37],[17,15],[36,6],[60,-50],[21,-53],[101,-40],[93,-20],[40,-45],[131,-44],[49,7],[82,46],[159,51],[106,-71],[29,-9],[25,6],[35,-20],[38,11],[117,84],[37,48],[39,12],[34,29],[92,93],[27,54]],[[57781,76018],[-7,-65],[17,-73],[41,-100],[41,-51],[167,-126],[31,-11],[-7,-51],[-10,-46],[-11,-30],[-49,-20],[-135,56],[-34,6],[-24,-12],[-45,-40],[-49,13],[-69,-23],[-19,-77],[-48,-88],[-79,-71],[-56,-38],[-84,-136],[-39,-80],[-16,-15],[-19,-13],[6,39],[10,35],[-2,26],[0,38],[28,44],[26,31],[76,58],[20,47],[-60,-1],[-60,-11],[-38,7],[-33,-4],[-11,42],[-8,25]],[[82890,65968],[12,-38],[-5,-24],[-38,13],[-2,23],[14,-4],[19,30]],[[83613,64873],[-17,-68],[-14,-71],[-6,-68],[1,-69],[-4,-63],[-7,-62],[-27,18],[-15,44],[-3,73],[-20,88],[-7,26],[-28,49],[-26,25],[-20,36],[3,-3],[-15,49],[-11,52],[-23,148],[-8,36],[-10,32],[-3,33],[3,36],[10,53],[6,54],[-5,74],[2,73],[8,32],[130,443],[36,94],[22,47],[18,52],[17,66],[22,60],[15,19],[75,54],[23,52],[19,16],[21,-1],[14,-25],[12,-29],[13,-16],[33,-28],[15,-28],[6,-48],[-20,-45],[-10,-41],[-2,-45],[4,-61],[0,-61],[-25,-143],[-27,-90],[-7,-44],[-9,-111],[-16,-111],[-13,-140],[-22,-145],[-13,-61],[-16,-58],[-37,-109],[-42,-90]],[[61030,47247],[-15,-7],[-6,7],[-9,24],[16,21],[16,39],[36,59],[12,38],[5,8],[-3,-45],[-20,-99],[-18,-7],[-14,-38]],[[60971,48286],[21,-123],[-3,-23],[-15,-14],[-8,-1],[-9,20],[-7,41],[-11,-10],[-19,50],[-20,2],[-17,59],[7,51],[-4,88],[21,45],[12,76],[13,-52],[3,-80],[18,-95],[15,-29],[3,-5]],[[61073,49016],[2,-29],[-5,-27],[1,-87],[-1,-58],[-16,-80],[-13,-28],[-12,8],[-9,13],[-8,22],[15,147],[-7,107],[30,-10],[23,22]],[[60894,49140],[-5,-49],[-22,-117],[-1,-49],[-9,-58],[-8,-38],[-22,-165],[-19,-62],[-25,-145],[-5,-111],[15,-78],[5,-72],[30,-72],[23,-25],[17,-33],[28,-74],[17,-75],[51,-37],[20,-83],[-7,-58],[-24,-48],[-22,-77],[-18,-102],[-1,-155],[13,23],[27,-38],[3,-114],[-28,-134],[-8,-62],[-2,-53],[21,-160],[30,-81],[-2,-26],[-8,-21],[53,-144],[-5,-125],[20,-97],[9,-84],[13,-65],[2,-45],[-16,-49],[39,-12],[22,-41],[11,-39],[28,2],[15,-26],[22,-22],[47,-65],[13,-33],[5,-19],[3,-12]],[[59144,46424],[-16,15],[-30,34],[-41,29],[-33,34],[-15,32],[-32,13],[-27,5],[-26,30],[-26,3],[-26,8],[-5,20],[-1,45],[-9,11],[-19,12],[-21,-1],[-12,-6],[-7,3],[-17,26],[-16,33],[-6,53],[-24,35],[-27,27],[-76,-3],[-12,8],[-18,27],[-21,44],[-18,51],[-14,69],[-8,42]],[[58474,51228],[3,3],[22,-5],[21,11],[19,25],[19,8],[4,-3],[5,-2],[30,0],[49,0],[49,0],[50,0],[49,0],[49,0],[50,0],[49,0],[50,0],[49,0],[49,0],[50,0],[49,0],[50,0],[49,0],[49,0],[50,0],[30,0]],[[58892,78458],[38,-29],[-39,8],[-86,27],[-38,25],[-10,28],[-5,38],[21,-40],[15,-18],[104,-39]],[[60614,78969],[-10,-6],[-97,9],[-79,-13],[-56,-91],[-34,1],[-48,-24],[-32,-29],[-38,-64],[-29,28],[-36,0],[-36,-18],[-42,-42],[-24,-8],[-47,12],[-55,-24],[-118,-140],[-40,-102],[-15,-20],[-20,-25],[-21,-13],[-11,1],[56,73],[17,27],[3,20],[1,33],[-17,40],[-47,-100],[-26,-14],[-33,-30],[-2,-67],[4,-50],[14,-63],[32,-102],[66,-146],[31,-54],[24,-22],[28,-3],[53,46],[23,7],[50,-18],[18,31],[26,16],[33,2],[38,-13],[41,-23],[-17,-52],[-17,-41],[-7,-45],[-9,-51],[-46,-23],[-48,3],[-52,-15],[-18,20],[-12,18],[-23,18],[-30,10],[-27,-12],[-32,-69],[-56,-47],[-19,-54],[-56,12],[-47,-10],[-69,-49],[-52,-106],[-57,-66],[-46,-21],[-43,7],[-28,20],[-57,69],[4,25],[8,13],[10,35],[23,131],[-3,43],[-13,66],[-45,52],[-36,-9],[-21,13],[-75,89],[-40,6],[-45,-18],[-16,13],[-13,31],[89,109],[88,90],[38,9],[52,42],[55,63],[-8,49],[-12,37],[-26,-10],[-20,-13],[-46,40],[-17,29],[-72,-30],[-40,4],[-89,-28],[-41,27],[-82,76],[-30,15],[-27,-3],[-14,24],[18,13],[20,1],[21,9],[6,13],[-1,25],[-43,19],[-39,5],[-25,22],[-19,26],[44,0],[45,-19],[71,-7],[64,-20],[16,25],[37,42],[7,14],[-62,-29],[-63,18],[-23,26],[-20,39],[-8,43],[5,41],[-6,73],[-21,65],[-8,36],[-22,32],[22,-73],[8,-48],[13,-44],[-3,-118],[-8,-41],[-26,-11],[-34,6],[-35,13],[9,65],[-18,-22],[-27,-64],[-23,-9],[-50,7],[-95,-42],[-7,-45],[-14,-62],[-14,-36],[-4,-21],[-40,-93],[-5,-9],[-76,-128],[-10,-10],[-49,-30],[-30,-26],[-22,-12],[-38,13],[-15,-19],[-8,-23],[0,-47],[19,-34],[16,-114],[-6,-48]],[[35174,32406],[-13,-21],[-15,-41],[-17,-97],[-58,-133],[-12,-76],[-62,-78],[-44,-89],[-29,2],[-26,-38],[-149,-115],[-54,22],[-39,-1],[-37,51],[-84,19],[-53,-21],[-71,-56],[-21,1],[-15,3],[-39,23],[-21,50],[-108,57],[-88,129],[-104,2],[-79,-17],[-12,18],[-8,33],[-17,48],[-68,114],[-54,113],[-10,111],[7,121],[16,144],[-2,44],[19,26],[20,5],[19,37],[17,56],[3,43],[-13,78],[-10,110],[-10,55]],[[6783,62794],[-12,-27],[-16,2],[-55,59],[-7,32],[4,148],[-21,120],[-23,91],[17,47],[22,37],[25,68],[-21,89],[6,53],[11,9],[59,-65],[117,-97],[31,-68],[6,-74],[21,-9],[11,-50],[30,-44],[11,-26],[-13,-40],[-56,-78],[-72,-34],[-62,-87],[-13,-56]],[[6431,63808],[-17,-16],[-18,8],[-4,39],[-17,50],[30,10],[17,-14],[9,-16],[11,-27],[-11,-34]],[[6531,63901],[8,-11],[29,16],[22,5],[35,-38],[13,-26],[23,-27],[8,-21],[-6,-24],[-26,-40],[-36,-10],[-20,-17],[-28,4],[-8,7],[-3,51],[-9,55],[-17,-7],[-20,19],[-21,46],[-2,27],[11,43],[20,6],[15,-24],[12,-34]],[[6329,64063],[59,-15],[14,6],[10,-12],[48,-8],[9,-5],[-10,-30],[-31,-27],[-45,24],[-75,8],[3,23],[7,16],[1,29],[10,-9]],[[6167,64202],[9,-3],[13,4],[4,-46],[14,-25],[5,-15],[-15,-16],[-30,-7],[-14,13],[-15,29],[-15,-8],[-3,23],[-3,6],[-11,-6],[10,-30],[-27,-2],[-9,4],[-7,34],[-28,64],[0,25],[-10,31],[42,8],[28,53],[16,5],[31,-85],[0,-24],[6,-23],[9,-9]],[[5505,64424],[-5,-26],[-10,4],[-2,23],[6,31],[16,27],[18,41],[14,-6],[-8,-27],[-1,-29],[-20,-16],[-8,-22]],[[5730,64476],[-25,-32],[-14,14],[-27,5],[-10,25],[-29,22],[-11,29],[17,57],[41,48],[63,-2],[14,-38],[1,-28],[-8,-31],[-4,-45],[-8,-24]],[[27282,65981],[-7,-1],[-1,9],[12,11],[9,-1],[-1,-12],[-12,-6]],[[27342,66013],[-18,-6],[15,23],[5,34],[8,-26],[0,-17],[-10,-8]],[[27407,66042],[-9,-12],[-4,4],[0,17],[-11,38],[0,11],[27,-38],[1,-10],[-4,-10]],[[27487,66080],[-12,-13],[-13,10],[14,13],[43,15],[-16,-18],[-16,-7]],[[27547,66130],[-5,0],[2,9],[11,16],[4,-6],[0,-9],[-12,-10]],[[27600,66188],[-7,-3],[11,25],[3,-2],[-7,-20]],[[27671,66325],[-55,-108],[6,27],[22,58],[7,28],[14,17],[14,31],[1,37],[20,25],[6,4],[-35,-119]],[[27212,67081],[-10,-15],[-20,11],[-11,20],[-5,38],[17,-41],[7,-9],[22,-4]],[[27199,67138],[-1,-34],[-14,57],[-9,62],[13,-20],[11,-65]],[[23008,66911],[-4,-26],[-23,125],[-37,282],[-2,161],[6,56],[10,-228],[41,-289],[9,-81]],[[22957,67568],[-9,-33],[3,50],[22,112],[46,147],[20,25],[-53,-162],[-29,-139]],[[27726,67556],[4,-42],[-25,98],[-32,154],[-17,120],[12,-33],[11,-67],[47,-230]],[[23051,67915],[-6,-1],[14,47],[2,19],[22,59],[12,9],[5,-25],[-23,-42],[-26,-66]],[[23121,68060],[-10,-3],[12,31],[21,16],[45,60],[18,4],[10,20],[4,3],[-3,-25],[-36,-36],[-61,-70]],[[23600,68632],[-14,-6],[61,89],[12,29],[16,-1],[-27,-50],[-48,-61]],[[24502,68836],[-11,-8],[-46,50],[-3,21],[23,20],[14,-2],[22,-25],[8,-8],[3,-10],[-2,-16],[-8,-22]],[[26414,68918],[-28,-21],[-30,15],[19,3],[13,-6],[35,30],[18,22],[21,9],[-48,-52]],[[25308,68958],[-15,-30],[1,11],[11,31],[8,11],[-5,-23]],[[25325,69013],[-7,-18],[7,87],[-11,74],[12,-32],[4,-39],[-5,-72]],[[25215,69172],[1,-27],[-13,14],[-20,1],[8,9],[7,9],[3,10],[25,33],[-7,-25],[-4,-24]],[[25400,69248],[-3,-6],[-25,12],[-15,11],[-2,11],[41,-20],[4,-8]],[[25535,69269],[-24,-12],[-36,1],[-8,4],[15,8],[43,11],[10,-12]],[[27383,69683],[-12,-140],[-5,50],[-1,48],[9,28],[9,14]],[[17125,70752],[-16,-5],[-18,12],[-16,56],[-17,43],[9,13],[14,-42],[35,-64],[9,-13]],[[16823,70977],[-13,-1],[-17,5],[-8,31],[13,2],[13,-4],[10,-24],[2,-9]],[[17125,71074],[14,-42],[-20,5],[-21,-3],[-6,24],[-7,32],[-4,8],[-14,3],[-1,3],[-2,15],[4,8],[45,-36],[12,-17]],[[16654,71381],[-19,-8],[-15,8],[-23,55],[50,7],[21,-24],[3,-7],[-17,-31]],[[16581,71442],[-14,-1],[-23,6],[8,13],[12,10],[4,-7],[13,-21]],[[16699,71474],[57,-30],[30,14],[6,-14],[-4,-12],[-69,-23],[-21,16],[-2,21],[-7,21],[10,7]],[[28737,71805],[-6,-1],[-11,6],[-15,12],[-4,9],[15,-3],[21,-23]],[[28749,71798],[-7,-6],[25,72],[50,91],[14,14],[-42,-78],[-40,-93]],[[28949,72113],[-50,-41],[-6,3],[33,29],[23,9]],[[29015,72142],[-37,-16],[-3,6],[42,32],[14,116],[2,53],[-7,94],[1,20],[6,-30],[7,-88],[-3,-67],[-12,-97],[-10,-23]],[[28990,72497],[-4,-12],[-19,64],[19,-21],[4,-17],[0,-14]],[[29074,73668],[-13,-10],[43,116],[24,96],[11,34],[-10,-68],[-19,-62],[-36,-106]],[[29407,74700],[-32,-87],[-1,17],[41,108],[-8,-38]],[[29392,75185],[-13,-2],[13,55],[24,25],[9,-5],[0,-19],[-3,-17],[-16,-26],[-14,-11]],[[29858,75452],[-20,-37],[18,-4],[16,11],[14,22],[34,30],[29,13],[9,3],[13,-21],[28,17],[28,9],[-121,-96],[-25,-11],[-36,-28],[-33,-21],[-24,-7],[-120,-71],[-10,-2],[-10,7],[-99,-36],[-40,-5],[-37,-12],[27,29],[1,11],[-7,9],[-14,-3],[-15,-30],[-24,-10],[-5,33],[8,26],[11,24],[24,38],[34,24],[17,21],[12,-18],[2,25],[10,14],[10,8],[24,0],[12,4],[10,8],[9,2],[27,-12],[25,4],[21,15],[22,5],[56,4],[57,11],[23,21],[47,56],[28,16],[-43,-66],[-23,-30]],[[30561,75613],[-21,-9],[-49,21],[40,18],[7,6],[5,27],[1,13],[15,-57],[2,-19]],[[30414,75677],[-77,-28],[-12,18],[19,8],[24,43],[16,5],[25,-24],[5,-22]],[[30176,75740],[-8,-11],[-3,28],[6,32],[5,0],[3,-17],[-3,-32]],[[30210,75743],[-13,-15],[-16,2],[8,22],[3,31],[8,34],[4,11],[9,9],[-3,-94]],[[30938,77301],[-11,-11],[-11,3],[0,29],[3,9],[4,5],[6,-8],[9,-27]],[[31059,77380],[-16,-12],[-18,5],[0,-30],[-2,-11],[-19,16],[-8,10],[1,40],[17,38],[14,15],[17,-10],[13,-43],[1,-18]],[[15874,79034],[-3,-11],[-4,1],[-8,23],[-1,16],[7,12],[10,-34],[-1,-7]],[[16001,79144],[-1,-13],[-10,-10],[-6,2],[0,16],[-3,2],[-12,-18],[1,36],[6,39],[5,1],[7,-26],[13,-29]],[[15973,79259],[-2,-11],[-15,13],[-5,12],[1,27],[3,18],[3,4],[9,-8],[3,-4],[3,-51]],[[15952,79583],[13,-76],[6,31],[38,-54],[0,-27],[-4,-9],[-8,-3],[-8,8],[-6,19],[-9,10],[-18,6],[-9,21],[-4,15],[0,42],[-5,14],[-10,2],[-9,11],[-14,29],[-2,8],[7,24],[15,41],[11,19],[7,-2],[9,-13],[10,-22],[-2,-15],[-41,-31],[-2,-7],[21,-9],[7,-7],[7,-25]],[[15883,79741],[-4,-6],[-15,8],[-9,13],[-3,16],[6,30],[7,8],[5,-2],[2,-27],[13,-28],[-2,-12]],[[15830,79781],[7,-19],[-30,12],[-13,11],[-3,11],[-5,34],[2,12],[13,4],[25,-43],[4,-22]],[[15894,79880],[3,-13],[-11,-12],[-8,-2],[-12,20],[-6,2],[5,-30],[-2,-10],[-26,18],[-5,15],[8,16],[16,16],[6,2],[32,-22]],[[31354,77862],[-2,-18],[8,-29],[6,-57],[-9,-26],[2,-34],[26,-10],[6,-10],[1,-13],[-57,-88],[-48,13],[-26,-24],[-27,-6],[-12,-40],[-15,-8],[-20,3],[-18,11],[-13,-6],[-19,-71],[-16,7],[-6,-26],[-8,-11],[-12,-9],[-10,31],[-7,30],[-9,6],[-13,8],[-13,0],[-9,-5],[-11,-19],[-16,-16],[-12,13],[-9,23],[-8,-36],[-12,-38],[2,-44],[-5,-26],[-11,7],[-11,23],[-31,18],[-25,-1],[5,24],[24,35],[-8,7],[-11,-5],[-5,5],[8,32],[1,35],[-10,-12],[-14,-37],[-31,-30],[1,-49],[-30,-102],[-1,-43],[-19,-34],[-25,-30],[-33,9],[-25,-26],[-13,-29],[-11,-5],[-5,38],[-5,11],[-9,-55],[-9,-4],[-4,40],[-4,26],[-13,-23],[-9,-59],[-9,5],[-2,22],[-7,7],[-2,-26],[3,-35],[-5,-19],[-8,10],[-9,17],[-15,-13],[-14,-5],[0,17],[3,22],[-27,-12],[-32,-39],[-26,-55],[9,-9],[10,-17],[-44,-84],[-44,-76],[-34,-123],[-14,-15],[-11,-23],[-13,-74],[-14,-66],[8,-30],[5,-30],[13,-30],[11,-3],[11,5],[9,-1],[5,-13],[-2,-15],[-13,-4],[-26,-26],[-22,-11],[-11,-32],[-16,-37],[-32,-58],[13,-18],[50,-20],[22,-21],[34,-109],[-8,-10],[-3,-20],[30,-28],[9,-78],[25,-27],[36,-16],[45,24],[37,32],[-1,27],[-24,61],[-5,29],[-18,19],[-6,-16],[-11,21],[-2,12],[11,5],[12,-2],[14,-11],[36,-67],[10,-89],[3,-56],[-4,-19],[-11,4],[-20,-4],[-96,-29],[-21,-25],[-49,-28],[-3,14],[3,28],[-3,59],[-10,3],[-75,-96],[-30,-6],[-24,-28],[-6,16],[-4,71],[15,61],[-8,-1],[-26,-36],[-11,22],[-5,24],[-8,14],[-9,5],[7,-53],[-17,-40],[-5,-104],[-22,-43],[-68,-27],[-45,6],[-40,-9],[-53,-20],[-29,12],[-30,-21],[-103,-6],[-21,11],[-28,-39],[-44,-24],[-111,-88],[-25,-33],[-29,-50],[-21,-27],[-16,-9],[-10,-22],[-11,-15],[10,50],[12,43],[10,82],[-3,66],[-12,28],[-12,18],[14,-66],[2,-80],[-5,-47],[-27,-91],[-12,-21],[-13,-19],[-10,-8],[-10,-15],[-11,-23],[-10,-45],[6,-42],[53,-15],[15,13],[7,-30],[4,-42],[-4,-45],[-9,-45],[-7,-57],[-5,-86],[-9,-78],[-1,24],[5,94],[-9,-10],[-6,-22],[-16,-121],[-22,-65],[-21,-45],[-21,7],[5,-36],[-6,-18],[-5,-39],[-13,-26],[-12,3],[-17,-18],[-6,-13],[-1,-26],[-11,-23],[-42,-119],[-35,-35],[-9,5],[10,56],[6,57],[-22,24],[-21,13],[-23,-1],[-27,44],[-34,32],[-47,86],[1,24],[-1,41],[14,63],[14,45],[19,23],[56,23],[14,36],[8,30],[-28,-52],[-41,-17],[-22,-19],[-18,-29],[-10,-37],[-24,-44],[2,-29],[4,-21],[-2,-44],[15,-43],[30,-70],[5,-109],[23,-72],[35,-85],[27,-24],[1,-32],[-12,-52],[-17,-24],[22,5],[10,-12],[10,-43],[0,-44],[-4,-25],[-6,-10],[0,25],[-5,9],[-7,-11],[-5,-13],[-2,-49],[-5,-25],[-18,-7],[-19,-66],[-17,-37],[-67,-249],[2,-42],[-12,-14],[-19,-11],[-19,-25],[-12,-27],[-12,-74],[-22,-84],[-14,35],[-4,30],[7,77],[24,128],[26,79],[21,37],[16,76],[-21,12],[-32,-1],[6,35],[9,31],[-16,31],[-10,4],[-10,12],[12,26],[5,27],[-3,34],[5,25],[-9,-4],[-13,-27],[-8,-10],[-5,23],[-6,-5],[-4,-16],[-9,-9],[-18,22],[-26,25],[-15,43],[-8,34],[8,61],[18,10],[24,-9],[31,0],[-4,13],[-11,-2],[-33,49],[-11,30],[-18,8],[-8,-29],[-9,-7],[11,62],[15,3],[22,17],[-6,36],[-14,16],[-25,-20],[0,26],[5,32],[19,0],[16,-10],[14,52],[1,24],[-24,-34],[-5,73],[23,71],[22,31],[27,0],[28,5],[-17,13],[-18,7],[13,28],[12,5],[11,24],[-27,-3],[3,46],[-13,-9],[-16,-5],[-6,-19],[1,-33],[-4,-21],[-13,-18],[-20,-13],[-2,23],[-7,11],[-3,-50],[-5,-17],[-15,47],[-5,-10],[1,-13],[-4,-23],[-13,-12],[1,-29],[-5,-16],[-42,25],[-1,-8],[24,-56],[17,-18],[2,-30],[-15,-25],[-20,21],[-4,-1],[11,-37],[7,-33],[-7,-27],[1,-33],[-1,-30],[-5,-26],[10,-121],[12,-33],[12,-32],[6,-29],[-12,-5],[-20,25],[-17,18],[-21,59],[-4,24],[-5,18],[3,-42],[7,-48],[65,-107],[12,-42],[9,-32],[-2,-31],[-17,22],[-15,28],[-38,32],[-49,19],[-28,74],[1,-31],[-7,-26],[-16,32],[-11,27],[-4,29],[-20,-2],[-22,-25],[-22,6],[-2,50],[5,27],[24,62],[23,33],[10,41],[-4,64],[-4,-65],[-13,-33],[-20,-24],[-27,-44],[-6,-41],[-8,-77],[11,-25],[11,-7],[34,17],[18,-8],[39,-91],[72,-37],[27,-23],[22,-48],[32,-27],[25,-40],[1,-27],[-9,-30],[-3,-42],[-11,-27],[-26,-3],[-15,7],[-84,147],[-10,14],[-31,77],[-36,41],[-11,-1],[52,-76],[21,-53],[37,-75],[26,-32],[20,-50],[18,-23],[50,-33],[-18,-24],[28,-20],[4,-37],[-3,-42],[-38,16],[-1,-31],[3,-18],[-16,-15],[-24,20],[-61,113],[1,-15],[5,-18],[35,-72],[31,-44],[27,-20],[21,-36],[7,-22],[5,-34],[-15,-22],[-18,-13],[-17,23],[-12,24],[-27,40],[-8,46],[-20,-3],[-84,58],[-68,7],[7,-12],[8,-8],[54,-14],[22,-26],[44,-24],[26,-6],[11,-73],[35,-49],[5,-37],[25,-5],[43,37],[28,-13],[40,-10],[9,-30],[7,-55],[14,-63],[37,-246],[55,-202],[7,-34],[-13,30],[-41,134],[-23,96],[-23,170],[-7,38],[-8,16],[-5,-13],[-2,-21],[4,-17],[-9,-56],[4,-26],[14,-26],[17,-67],[13,-89],[-18,36],[-19,19],[-29,15],[-25,26],[1,-37],[-2,-40],[-20,12],[-14,13],[12,-42],[-26,13],[-17,-3],[-11,-38],[-15,-23],[-23,-7],[-33,34],[-11,42],[-4,47],[-2,-55],[6,-58],[-2,-44],[32,-8],[30,8],[40,-2],[26,8],[16,14],[38,-12],[3,-53],[-4,-52],[-3,-56],[11,0],[12,18],[6,100],[35,37],[12,-3],[11,-32],[4,-32],[4,-45],[-9,-68],[-53,-80],[-38,-74],[-20,-15],[-28,8],[-32,19],[-15,4],[-12,-6],[-8,22],[-4,42],[-13,14],[-9,-2],[-7,-44],[-29,-13],[-41,19],[-42,37],[18,-40],[105,-74],[12,-14],[11,-20],[-15,-32],[-11,-36],[-2,-28],[-4,-18],[-42,-48],[-23,9],[-58,86],[27,-75],[21,-31],[43,-17],[80,28],[26,-31],[-22,-54],[-21,-37],[-28,-5],[-25,-10],[-7,-26],[-18,-2],[-27,-1],[-43,-2],[-23,6],[-33,-54],[-12,-7],[-18,10],[-7,43],[-8,21],[0,-80],[3,-22],[6,-16],[-38,-43],[-37,-54],[-13,-15],[-15,-27],[-30,-78],[-8,-57],[-11,-64],[-1,29],[2,48],[-8,55],[-5,-101],[-12,-47],[-109,3],[-47,-25],[-74,-86],[-22,-38],[-60,-145],[-16,-94],[-12,40],[3,29],[0,24],[-15,-51],[15,-76],[-13,-28],[-40,-54],[-22,-8],[-25,-16],[-8,-52],[-33,-49],[-19,-22],[-36,13],[11,-46],[-13,-36],[-23,-27],[-28,-18],[-16,2],[-13,-9],[-11,-23],[-26,-21],[-28,12],[-30,7],[-18,-12],[29,-21],[16,-31],[-3,-41],[-8,-15],[-18,-22],[-8,3],[-5,20],[-6,40],[-9,-9],[-1,-18],[-8,-7],[-25,64],[1,-49],[9,-37],[9,-19],[8,-12],[3,-17],[-18,-42],[-9,-10],[-16,-7],[-10,-26],[3,-22],[-14,-49],[-34,-30],[-10,1],[-9,-9],[5,-22],[9,-16],[-1,-14],[-9,-20],[-17,-6],[-10,-23],[3,-21],[6,-12],[-1,-21],[-21,-20],[-4,-21],[10,-6],[7,6],[6,-4],[-12,-34],[-11,-21],[-10,-37],[-24,-11],[1,-12],[13,-11],[12,-28],[-22,-53],[-13,4],[-8,12],[-5,-42],[2,-22],[-5,-46],[-8,-55],[-6,-22],[1,-42],[4,-41],[13,-52],[20,-214],[13,-74],[24,-200],[41,-194],[57,-235],[93,-284],[11,-40],[-12,-35],[-4,-35],[-1,-54],[3,-52],[11,-64],[22,-98],[-12,20],[-31,140],[-4,82],[5,117],[-7,-3],[-6,-38],[-3,-44],[-8,-18],[-11,68],[1,31],[11,36],[-3,13],[-18,18],[-4,29],[2,29],[-10,15],[-8,-1],[5,-70],[9,-43],[11,-104],[17,-63],[10,-52],[118,-561],[28,-72],[10,-51],[11,-107],[2,-138],[-19,-252],[-5,-171],[-2,5],[-2,18],[-5,2],[-16,-78],[-23,-71],[-8,-110],[-10,-56],[-33,-58],[-20,1],[-50,-43],[-35,11],[-42,-25],[-27,3],[-16,52],[3,23],[6,24],[11,5],[36,-54],[7,23],[-11,27],[-21,15],[-16,17],[-31,125],[-33,85],[-6,57],[-56,35],[-41,53],[-27,94],[-15,166],[-18,19],[-8,13],[18,62],[19,51],[-15,-13],[-11,-19],[-14,-45],[-10,-7],[-9,7],[-11,87],[3,108],[15,40],[-23,2],[-23,-16],[3,-36],[-3,-20],[-18,6],[-13,12],[-17,38],[-25,71],[-49,197],[-10,27],[-17,29],[8,9],[14,6],[32,88],[25,54],[9,37],[-2,16],[-11,23],[-14,-20],[-7,5],[-16,47],[-16,13],[-11,-10],[12,-38],[10,-14],[-4,-56],[-4,-18],[-10,-16],[-15,9],[-7,-14],[-9,15],[-9,24],[-10,40],[26,225],[24,143],[3,164],[2,24],[-2,44],[-33,94],[-145,231],[-112,273],[-97,102],[-74,-22],[-12,-21],[-6,-27],[5,-30],[-7,-13],[-20,2],[-26,-7],[-70,-72],[-25,3],[-22,-19],[-17,-14],[-43,-8],[-37,-16],[-16,9],[-10,42],[0,43],[8,-33],[13,-26],[6,10],[2,23],[-13,45],[-41,58],[-48,84],[14,-3],[4,18],[-15,24],[7,27],[10,29],[-20,-4],[-18,-21],[-1,-24],[-3,-20],[-10,3],[-18,24],[-89,68],[-77,39],[59,17],[32,-14],[-3,21],[-8,13],[-26,17],[-32,-7],[-21,8],[-21,-16],[-22,-25],[-21,-12],[-80,-18],[-65,-19],[11,20],[11,13],[38,20],[6,41],[-9,39],[-10,-9],[-11,-31],[-13,22],[-14,0],[-4,-49],[-19,-33],[-8,-33],[-54,-26],[-7,9],[16,31],[-1,18],[-19,-15],[-30,-60],[-106,-19],[5,13],[23,3],[32,19],[-7,32],[-12,34],[-11,4],[-8,21],[1,64],[-7,38],[-18,39],[-6,-8],[-12,-66],[-11,-87],[-5,-28],[-32,-2],[-28,6],[-95,-11],[-35,30],[-15,6],[-9,-1],[-41,-27],[-48,-21],[-11,7],[-16,1],[-34,-71],[-40,-33],[-102,60],[-25,47],[-22,10],[-28,6],[-29,-58],[-23,-79],[36,-44],[30,-21],[50,18],[28,38],[23,-1],[11,8],[10,20],[19,-16],[1,-16],[-14,-22],[-17,-19],[-11,-22],[20,-45],[31,-15],[12,7],[7,50],[19,32],[26,-7],[-3,-20],[3,-19],[12,-33],[-1,-47],[2,-11],[-28,-21],[-21,-7],[-17,-27],[9,-15],[-17,-14],[-11,5],[-6,-5],[-2,-16],[-9,-16],[13,-46],[26,-30],[19,-38],[74,-50],[18,1],[18,-50],[14,-18],[14,-8],[-1,-35],[-25,-25],[-7,-31],[-6,-17],[-11,22],[-11,15],[-26,-47],[-13,-10],[6,51],[-10,20],[-15,51],[-21,32],[-16,11],[-12,20],[-14,8],[-13,-2],[-21,12],[-1,27],[-6,20],[-16,24],[-78,46],[-1,-19],[6,-14],[11,-9],[13,-19],[0,-54],[-6,-23],[-2,-33],[-5,-34],[-10,-26],[-21,-18],[-10,15],[-15,72],[-22,23],[-34,2],[-23,-16],[-25,-70],[-21,-11],[-70,36],[-80,55],[2,18],[13,6],[24,-7],[-1,19],[-25,61],[-4,28],[3,34],[-8,-1],[-15,-29],[-51,25],[-14,28],[-30,81],[-42,3],[-19,49],[-35,-20],[-17,-23],[-15,-35],[6,-19],[15,-29],[-7,-14],[-49,-21],[-114,24],[-34,21],[-44,46],[-62,37],[-30,6],[-29,-7],[-86,-4],[-19,-10],[-17,-16],[-11,18],[-5,31],[10,5],[11,19],[10,36],[1,22],[-7,15],[-13,1],[-29,-95],[16,-53],[-1,-19],[-58,-11],[-132,-107],[-51,-58],[2,19],[62,75],[-21,12],[-36,-19],[-13,7],[15,62],[-4,55],[-26,1],[-16,-43],[-11,1],[-14,19],[-11,-6],[8,-98],[16,-41],[13,-52],[-36,-64],[-34,-53],[-3,-51],[-34,-66],[-32,-38],[-74,-88],[-22,-19],[-33,-42],[-47,-30],[-44,-49],[-15,-8],[28,42],[34,41],[-29,-6],[-44,19],[-28,1],[0,-15],[-21,-21],[-21,31],[-9,21],[-5,18],[-9,4],[-9,-8],[32,-127],[14,-5],[15,-13],[-19,-29],[-20,-23],[-32,-15],[-27,46],[-6,-58],[-3,-58],[-9,-14],[-15,-22],[-7,16],[-4,23],[-9,-20],[-14,-15],[-22,-3],[-17,-8],[0,-24],[4,-24],[30,19],[-11,-62],[-27,-62],[-23,-14],[-34,9],[-8,-6],[-8,-13],[40,-96],[-25,-145],[-17,-52],[-11,-7],[-12,-2],[-44,47],[-24,36],[21,-98],[58,-29],[3,-37],[-1,-32],[-11,-37],[-11,-49],[8,-35],[9,-85],[8,-39],[8,-119],[10,-51],[52,-189],[18,-2],[2,-20],[-1,-40]],[[17464,70583],[0,4],[-2,63],[-13,22],[-17,-14],[-7,82],[4,39],[-2,38],[-16,92],[-41,113],[-89,140],[-46,47],[-35,59],[-23,16],[-28,5],[-9,-27],[-32,18],[5,66],[-32,92],[-25,10],[-65,-6],[-87,50],[-25,30],[-9,54],[-41,47],[-53,46],[-30,-11],[-39,7],[-55,33],[-33,4],[-63,-9],[-23,7],[-22,41],[-24,21],[5,51],[-3,47],[4,36],[-11,79],[9,73],[-8,26],[-13,21],[-42,30],[-7,37],[7,52],[-11,35],[-35,32],[-32,73],[-40,39],[-17,67],[-25,41],[-8,37],[-56,131],[-59,102],[-9,58],[-2,81],[23,49],[12,43],[-1,39],[-4,29],[-20,51],[-79,30],[-64,124],[-4,96],[-25,98],[0,63],[-4,69],[19,15],[17,-6],[-1,-27],[5,-49],[20,-37],[19,-16],[18,-36],[13,-11],[13,-3],[-7,23],[-8,15],[-9,48],[-18,61],[-20,33],[-11,61],[-9,15],[-5,22],[20,27],[27,19],[36,6],[103,-9],[21,15],[19,-5],[13,2],[-28,16],[-16,-5],[-18,3],[-37,-3],[-15,7],[-16,19],[-11,2],[-34,-33],[-15,4],[-36,36],[-15,5],[-25,-20],[-4,-90],[8,-66],[-15,-7],[-17,27],[-27,17],[-22,25],[-32,46],[-16,17],[-18,-39],[-1,18],[9,45],[-3,75],[28,-60],[-8,42],[-22,47],[-17,16],[-20,83],[-47,50],[-38,80],[-77,134],[-5,117],[-28,148],[12,85],[-1,59],[-14,91],[-15,49],[-62,135],[-60,90],[-9,69],[-4,69],[13,62],[12,64],[8,17],[3,-7],[-2,-13],[8,-5],[3,29],[6,15],[-9,2],[1,9],[5,18],[18,85],[-1,107],[19,131],[-1,44],[-12,93],[-13,56],[-23,40],[10,58],[0,55],[-40,80],[-15,104],[-3,45],[4,116],[-11,50],[-27,82],[12,72],[12,43],[30,190],[7,15],[13,0],[22,32],[-10,8],[-16,-16],[14,75],[15,64],[10,24],[5,209],[9,160],[14,53],[-5,55],[6,74],[-4,74],[31,359],[-4,43],[9,59],[-9,153],[4,171],[-8,22],[-4,24],[8,3],[14,-25],[66,0],[42,24],[16,-8],[17,-31],[23,-7],[28,6],[-9,8],[-13,2],[-29,29],[-17,28],[-51,-2],[-11,19],[-58,-18],[-17,19],[-32,-13],[8,54],[-2,68],[2,66],[8,-48],[19,-52],[10,59],[6,72],[-19,29],[-32,20],[-11,68],[75,58],[-40,12],[-15,26],[-20,4],[-1,-20],[-6,-27],[-7,35],[-2,41],[-8,70],[-31,113],[-18,147],[-23,72],[-45,69],[-12,40],[-11,103],[7,77],[-9,54],[22,-3],[56,-42],[71,-34],[21,-24],[34,-19],[189,-28],[13,3],[24,17],[11,-2],[27,-40],[14,-4],[18,2],[14,7],[23,28],[3,-11],[-1,-25],[8,-36],[17,-47],[7,-29],[-34,-82],[-7,-2],[-1,28],[-4,5],[-64,-139],[-22,-66],[-2,-29],[0,-18],[9,-4],[21,7],[30,27],[1,6],[-28,-10],[-13,0],[1,31],[4,14],[18,47],[19,27],[28,30],[16,24],[11,35],[30,43],[6,11],[-2,35],[2,7],[15,-5],[6,-60],[-4,-27],[-26,-32],[-3,-12],[5,-44],[-5,-4],[-10,5],[-3,-3],[25,-48],[8,-38],[1,-33],[-7,-65],[-7,-11],[-12,4],[-17,21],[-3,-7],[-13,-50],[-5,4],[-8,60],[-4,4],[-25,-27],[-11,-26],[-8,-41],[-11,-20],[31,-4],[28,8],[23,-19],[8,-1],[21,19],[6,14],[17,62],[9,11],[13,1],[12,9],[19,34],[0,14],[-6,77],[2,43],[-4,14],[-8,14],[1,14],[6,23],[1,21],[-6,18],[3,21],[17,45],[3,20],[22,45],[-6,18],[-15,22],[-10,19],[-10,30],[-8,10],[-2,-4],[11,-50],[-3,-3],[-27,26],[-7,17],[-3,23],[2,17],[15,17],[18,6],[-2,15],[-22,46],[-15,21],[-11,10],[-15,3],[-7,7],[-2,11],[3,15],[9,4],[23,-6],[13,11],[-1,18],[-4,10],[1,66],[-9,53],[-5,9],[-5,1],[-6,-7],[-14,-2],[-10,18],[-10,34],[-18,80]],[[99847,81435],[-49,0],[-97,94],[-50,29],[-28,33],[13,7],[60,-23],[49,-51],[27,-33],[31,-28],[34,-12],[10,-16]],[[1031,81677],[-17,-34],[-13,15],[-5,47],[10,11],[27,-33],[-2,-6]],[[1109,81688],[-24,-12],[-31,25],[3,30],[34,-25],[18,-18]],[[589,81595],[-6,-19],[-7,0],[-37,32],[-5,11],[22,15],[6,11],[-3,16],[-16,21],[-30,27],[-11,20],[7,12],[14,7],[45,2],[25,-34],[18,-12],[43,-8],[-22,-14],[-13,-13],[-15,-53],[-15,-21]],[[792,81633],[-8,-7],[-15,-6],[-42,6],[-26,-2],[-28,-4],[-22,-10],[-4,14],[1,12],[92,32],[22,16],[13,21],[12,39],[10,12],[6,-1],[13,-15],[-5,-20],[-11,-18],[-4,-17],[-4,-52]],[[946,81720],[2,-20],[32,3],[10,-10],[0,-38],[-5,-11],[-4,-2],[-12,8],[-13,-19],[-59,-48],[-18,27],[-35,-42],[24,108],[28,16],[11,12],[-3,32],[13,52],[28,-2],[13,-22],[0,-14],[-12,-30]],[[99603,81748],[-17,-10],[-10,25],[-1,15],[10,15],[17,-9],[10,-15],[-9,-21]],[[99923,81742],[-23,-15],[-26,8],[-15,23],[2,27],[34,29],[43,-37],[-15,-35]],[[1105,81798],[-6,-17],[-28,18],[-9,15],[-2,15],[8,25],[22,0],[12,-10],[12,-19],[4,-12],[-13,-15]],[[99281,81729],[-24,-24],[-19,24],[-3,12],[36,42],[28,9],[11,15],[12,53],[20,2],[10,-6],[-5,-25],[-16,-38],[0,-27],[-50,-37]],[[1791,81875],[54,-23],[68,2],[25,-5],[0,-7],[-43,-10],[-15,4],[-38,-13],[-26,-3],[-58,13],[-46,-9],[-12,3],[-14,11],[-16,18],[-1,12],[15,4],[40,-15],[4,8],[34,14],[29,-4]],[[2093,81953],[-21,-8],[-22,9],[10,30],[11,16],[21,20],[24,-9],[19,-25],[-42,-33]],[[1478,81817],[-149,-24],[-22,16],[22,10],[27,5],[56,27],[69,23],[54,28],[47,19],[13,30],[-41,16],[-8,12],[19,14],[16,21],[39,25],[34,-31],[8,-20],[-4,-25],[-7,-25],[-30,-13],[-4,-13],[16,-38],[-62,-33],[-93,-24]],[[98255,82004],[-18,-2],[-11,20],[-60,8],[6,19],[26,8],[39,30],[33,-5],[-9,-28],[-6,-50]],[[2574,82131],[-18,-18],[-5,7],[-3,23],[10,17],[30,38],[21,-7],[6,-10],[0,-14],[-8,-19],[-10,-10],[-12,0],[-11,-7]],[[2863,82285],[-4,-24],[-4,-8],[-43,12],[-29,-4],[-3,14],[3,12],[45,18],[18,0],[12,-9],[5,-11]],[[98002,82380],[48,-19],[33,9],[41,-30],[52,-53],[-12,-10],[-13,-5],[-12,0],[-40,-8],[-22,2],[-40,-36],[-45,26],[-15,51],[-35,12],[-28,18],[51,40],[37,3]],[[3343,82571],[-85,-61],[-28,-45],[-21,-44],[-16,-24],[-12,-4],[-14,-11],[-28,-31],[-12,-3],[-90,-71],[-6,-1],[4,18],[28,26],[18,24],[20,40],[11,14],[4,20],[1,40],[5,15],[20,30],[14,17],[18,6],[38,-6],[16,16],[4,11],[-9,11],[-2,18],[2,32],[11,28],[19,25],[27,19],[33,13],[24,1],[44,-29],[7,-13],[-11,-29],[-6,-27],[-28,-25]],[[3831,82789],[-4,-1],[-7,14],[-1,13],[5,9],[13,22],[9,8],[11,4],[3,-6],[-10,-26],[-12,-17],[-7,-20]],[[3718,82891],[12,-27],[21,17],[15,24],[12,31],[7,12],[11,-16],[29,-22],[-25,-34],[-47,-51],[-16,-34],[-1,-15],[46,12],[13,-2],[8,-12],[-13,-13],[-25,-13],[-21,-24],[-50,-42],[-19,-35],[-23,-14],[-30,-3],[-54,-23],[-32,-21],[-8,-12],[-11,-5],[-12,1],[-13,-10],[-14,-19],[-12,-9],[-19,-2],[-11,-8],[-11,0],[-31,23],[-8,14],[28,27],[20,9],[30,4],[29,25],[61,34],[19,18],[12,63],[14,11],[8,25],[33,-1],[16,-28],[5,-4],[3,3],[2,22],[17,16],[-10,12],[-31,15],[-23,6],[-15,0],[-13,8],[-9,17],[-5,17],[1,17],[8,19],[14,21],[17,12],[36,9],[32,14],[17,2],[13,-6],[3,-55]],[[3933,82989],[-11,-10],[-8,-2],[-7,6],[-28,-7],[-6,4],[-13,34],[-1,18],[5,14],[13,13],[21,11],[21,-2],[35,-32],[17,-18],[3,-12],[-12,-11],[-29,-6]],[[4011,83027],[-12,-4],[-3,6],[-2,25],[-9,40],[18,15],[11,3],[4,-6],[13,-30],[13,-8],[9,-6],[-16,-9],[-26,-26]],[[4846,83180],[-24,-13],[-26,13],[-22,25],[-2,28],[49,-18],[10,-9],[15,-26]],[[4917,83436],[-6,-2],[-20,17],[-7,14],[-5,20],[39,30],[8,0],[8,-16],[1,-14],[-11,-37],[-7,-12]],[[4590,83513],[27,-95],[12,-18],[17,-10],[24,-11],[15,-14],[12,-21],[2,-10],[-76,38],[-48,-56],[-15,-7],[-136,-3],[-27,-10],[-18,-18],[-31,-52],[-16,-19],[-16,-12],[-36,-14],[-42,2],[-22,7],[-12,24],[-11,48],[0,14],[5,23],[38,31],[12,17],[49,109],[14,15],[16,4],[41,-8],[36,32],[77,48],[17,6],[55,1],[16,-8],[11,-13],[10,-20]],[[5733,83509],[-9,-3],[-8,6],[-10,33],[-1,13],[20,-10],[7,-24],[1,-15]],[[5690,83612],[-1,-46],[-4,-7],[-8,12],[-15,-13],[-9,10],[4,16],[-1,12],[11,1],[3,23],[-2,9],[6,21],[8,5],[8,-43]],[[13517,83571],[28,-75],[2,-27],[-28,-9],[-21,4],[-11,8],[-3,13],[7,38],[-14,22],[-16,8],[-15,-14],[0,38],[11,27],[-7,36],[0,28],[4,9],[15,-1],[30,-29],[18,-76]],[[5591,83599],[-17,-13],[-5,-16],[-13,-7],[-11,-13],[-37,-59],[-16,-11],[18,51],[3,16],[0,10],[-5,38],[10,-1],[9,8],[18,34],[16,3],[17,40],[9,3],[4,-6],[-7,-24],[16,-22],[-4,-22],[-5,-9]],[[13094,83464],[6,-8],[7,5],[12,21],[20,-4],[14,-7],[9,-8],[-5,-30],[-4,-49],[-8,-17],[-8,-24],[-28,14],[-23,31],[-33,53],[-19,38],[-1,16],[-12,12],[-22,66],[-13,52],[-21,6],[-26,15],[-10,29],[7,25],[37,12],[55,-64],[9,-28],[20,-32],[3,-44],[10,-18],[24,-62]],[[5464,83719],[-4,-45],[-38,29],[-10,14],[7,11],[36,2],[9,-11]],[[5365,83706],[4,0],[9,4],[18,32],[6,2],[0,-10],[-8,-32],[14,-43],[13,-21],[-1,-7],[-34,-15],[-25,11],[-14,-4],[-12,-15],[-9,17],[-6,79],[2,14],[14,27],[18,13],[8,-4],[7,-11],[1,-11],[-5,-26]],[[12971,83838],[6,-16],[0,-11],[-40,-38],[-1,-8],[-9,-23],[-9,-9],[-15,-26],[-28,-27],[4,83],[-28,48],[28,24],[19,-7],[31,-3],[30,22],[12,-9]],[[6787,83998],[-11,-19],[-21,2],[-12,6],[-3,16],[32,48],[7,6],[6,-2],[3,-20],[-1,-37]],[[13617,83806],[-10,-63],[-19,-65],[-29,-35],[-21,8],[-15,28],[-14,-1],[-15,6],[-8,23],[8,30],[-7,23],[-8,-20],[-13,-19],[-33,-24],[-23,-47],[-11,-30],[-13,33],[-9,78],[-1,33],[24,50],[31,48],[6,142],[99,71],[9,-4],[32,-53],[35,-74],[8,-34],[1,-58],[-4,-46]],[[12898,84296],[53,-12],[48,1],[17,-24],[10,-25],[7,-24],[1,-22],[-1,-15],[-6,-17],[2,-6],[94,-54],[44,-58],[18,-30],[10,-26],[19,-64],[39,-74],[21,-23],[11,-22],[-6,0],[-28,16],[-60,50],[-5,-2],[-5,-27],[-9,-24],[-14,-17],[11,-5],[48,11],[41,-49],[15,-8],[16,-35],[0,-14],[-9,-26],[-6,-10],[2,-7],[11,-4],[45,7],[8,-12],[-7,-101],[6,-37],[0,-17],[-5,-22],[0,-19],[4,-20],[1,-17],[-12,-45],[-12,-8],[-19,0],[-15,13],[-22,39],[-21,60],[-8,9],[-27,9],[-5,7],[-17,1],[-13,25],[2,33],[-11,33],[1,15],[-12,6],[-10,-9],[6,-33],[-6,-25],[-22,11],[-36,80],[-41,65],[-17,15],[5,19],[20,10],[17,-1],[3,11],[-34,63],[1,18],[12,31],[-15,13],[-43,-9],[-15,6],[-13,25],[-7,22],[-37,4],[-14,-2],[-24,33],[-12,21],[5,11],[22,18],[13,-2],[25,-20],[10,0],[25,27],[4,24],[18,20],[-3,21],[-10,35],[-23,10],[-46,-21],[-41,-32],[-16,12],[-3,20],[43,55],[19,30],[-4,17],[-14,23],[-1,58],[9,13]],[[13117,84243],[-15,-2],[-16,9],[-40,47],[-1,14],[6,15],[22,29],[10,7],[54,-3],[17,-8],[4,-13],[0,-14],[-6,-13],[-1,-15],[3,-15],[-7,-15],[-30,-23]],[[13302,84164],[-6,-96],[-11,5],[-10,1],[-22,-14],[-22,6],[-11,11],[-4,12],[4,28],[-12,16],[-42,6],[-16,7],[-9,30],[-2,39],[7,14],[21,11],[16,47],[10,7],[35,94],[17,-7],[31,-57],[39,-83],[-13,-77]],[[7032,84352],[-19,-14],[-6,5],[-1,11],[5,18],[9,18],[29,34],[29,23],[15,-2],[6,-14],[-19,-30],[-48,-49]],[[7164,84397],[-13,-1],[-21,15],[3,18],[29,22],[29,-3],[3,-12],[-2,-14],[-2,-8],[-9,-8],[-17,-9]],[[2846,84466],[36,-11],[21,7],[18,-6],[3,-13],[-31,-30],[-13,2],[-37,36],[3,15]],[[13126,84403],[-3,-8],[-36,1],[-12,7],[-5,24],[3,23],[8,18],[10,34],[8,56],[52,-63],[16,-28],[8,-35],[-18,-13],[-22,-6],[-9,-10]],[[12781,84587],[18,-40],[26,4],[14,-30],[11,-46],[-8,-29],[-11,7],[-13,-17],[-8,-56],[4,-55],[-4,-56],[-15,-57],[-3,-38],[-6,-11],[-7,-4],[-8,10],[-12,8],[-15,-32],[-19,0],[-15,73],[13,121],[31,25],[-18,32],[-39,39],[3,21],[-29,62],[-2,14],[5,52],[27,46],[37,8],[25,-20],[14,-17],[4,-14]],[[12954,84679],[18,-18],[10,19],[19,-1],[35,-17],[20,-25],[12,-29],[1,-17],[-3,-40],[2,-40],[-1,-20],[-5,-18],[-8,-13],[-8,-2],[-27,36],[-31,65],[-24,20],[-1,-7],[7,-18],[19,-35],[3,-21],[14,-26],[6,-19],[3,-26],[0,-22],[-4,-19],[-6,-12],[-9,-6],[-47,6],[-28,-13],[-33,7],[-8,11],[-5,19],[-2,46],[-9,66],[2,50],[-21,46],[-18,27],[-26,25],[-18,24],[5,20],[27,14],[44,-3],[95,-34]],[[7498,84749],[-35,-19],[-7,1],[-21,-38],[-17,-16],[-22,30],[5,46],[20,30],[97,-10],[7,-9],[1,-7],[-8,-6],[-20,-2]],[[2733,84783],[-29,-28],[-26,10],[-7,20],[-1,9],[75,22],[-12,-33]],[[12508,84879],[24,-63],[17,-49],[15,-59],[26,-122],[12,-46],[3,-26],[3,-66],[-4,-14],[-7,-13],[-2,-19],[7,-50],[1,-77],[-7,-43],[-8,-7],[-19,14],[-15,24],[-12,24],[-28,77],[-9,36],[0,25],[4,19],[9,12],[17,31],[-3,5],[-12,-7],[-25,-4],[-22,24],[-17,13],[3,45],[-4,12],[-34,-13],[-13,12],[-3,17],[1,25],[6,21],[32,55],[-3,11],[-15,2],[-21,19],[-9,61],[-22,35],[-14,-3],[-29,-99],[-15,-22],[-42,-14],[9,28],[4,24],[-15,75],[-1,29],[10,21],[30,9],[15,13],[13,20],[3,20],[23,53],[10,10],[29,0],[60,-59],[18,-8],[26,-38]],[[7433,85166],[-8,-16],[-7,4],[-16,19],[-31,28],[-15,18],[-1,8],[11,9],[38,-22],[15,-20],[14,-28]],[[7528,85151],[2,-31],[12,3],[42,33],[23,10],[29,1],[23,-15],[4,-11],[-2,-14],[-18,-27],[1,-18],[19,-33],[49,-18],[6,-10],[0,-12],[-34,-55],[-12,-12],[-9,-3],[-61,9],[-55,18],[-23,3],[-8,-5],[-15,-17],[11,-5],[49,-4],[17,-25],[7,-18],[4,-20],[-10,-8],[-20,-6],[-25,0],[-31,-22],[-17,-25],[-62,-7],[-47,-34],[-17,-17],[-6,-20],[-17,-15],[-41,-14],[24,-13],[4,-11],[1,-16],[-4,-13],[-31,-59],[-60,-48],[-15,2],[-7,6],[-5,9],[-1,9],[78,98],[-3,4],[-21,4],[-34,26],[-23,-17],[-5,1],[6,23],[15,27],[-3,8],[-8,7],[-19,4],[-31,1],[-22,-6],[-15,-15],[-1,-6],[31,2],[9,-7],[8,-14],[5,-16],[2,-17],[-7,-24],[-14,-30],[-22,5],[-44,67],[-20,97],[-38,75],[-2,18],[11,46],[38,65],[42,18],[29,27],[28,8],[18,0],[24,-12],[10,-25],[-6,-12],[2,-6],[17,-15],[18,-52],[21,-47],[14,-19],[19,-12],[-19,36],[-12,44],[-5,88],[-6,23],[11,6],[30,-3],[-1,13],[-32,29],[-19,25],[-8,19],[1,17],[17,25],[10,7],[10,3],[21,-5],[9,-8],[26,-56],[12,-17],[10,0],[10,9],[9,18],[8,12],[10,3],[29,-8],[10,3],[4,14],[0,25],[7,9],[2,18],[-16,27],[18,9],[61,-21],[25,-23],[-13,-42]],[[12297,85393],[40,-56],[0,-13],[-8,-38],[-22,-11],[6,-15],[17,-12],[11,10],[42,54],[13,11],[8,1],[51,-16],[44,-26],[13,-20],[8,-36],[-12,-79],[-37,-13],[-17,1],[-18,12],[-30,-28],[25,-20],[75,-5],[23,-44],[6,-34],[-16,-62],[-43,17],[-37,36],[-77,51],[-19,3],[-12,-9],[-4,-31],[1,-68],[-20,-34],[-61,15],[-24,51],[-22,80],[-84,96],[-23,19],[-30,57],[12,45],[4,26],[16,7],[23,20],[14,44],[21,-36],[28,-34],[1,32],[13,26],[28,-1],[13,5],[18,24],[26,12],[16,-14]],[[12691,85385],[-2,-15],[-38,2],[-38,21],[-19,27],[4,13],[35,11],[34,-26],[24,-33]],[[12589,85346],[70,-13],[52,3],[47,-86],[29,-70],[17,-49],[10,-47],[13,-45],[-1,-7],[-28,31],[-19,62],[-10,24],[-10,11],[-10,23],[-21,59],[0,17],[-9,16],[-11,6],[-12,-3],[-4,-5],[2,-41],[9,-46],[51,-99],[34,-57],[7,-18],[5,-52],[-15,-23],[18,-48],[-1,-9],[-4,-9],[-48,-21],[-45,-89],[-48,-52],[-23,-8],[-10,9],[-11,20],[-6,26],[-1,33],[12,21],[24,109],[0,35],[-30,50],[-18,40],[-9,57],[-17,149],[-7,48],[-11,39],[-14,32],[-10,35],[-8,38],[3,15],[24,-20],[29,-55],[15,-36]],[[7662,85460],[10,-4],[10,34],[8,1],[33,-29],[20,6],[13,-35],[12,-4],[10,5],[7,-3],[-2,-38],[-24,-38],[-12,-9],[-15,9],[-6,4],[-10,17],[-8,21],[-5,1],[-18,-25],[0,-13],[8,-19],[-1,-11],[-20,-6],[-20,3],[-24,-16],[-5,10],[-4,29],[-7,-4],[-12,-35],[-12,-22],[-22,-18],[-5,-9],[-17,-1],[-24,-12],[-15,2],[-90,38],[-21,14],[74,87],[39,34],[22,-2],[22,-11],[12,2],[1,39],[-21,29],[1,12],[46,19],[18,-3],[19,-10],[18,-16],[17,-23]],[[7643,85532],[-9,-4],[-20,18],[-13,19],[9,14],[39,30],[19,0],[8,-4],[3,-10],[-2,-13],[-8,-18],[-26,-32]],[[5300,85585],[-20,-9],[-22,5],[-17,57],[13,1],[28,38],[60,30],[15,4],[-57,-126]],[[9843,86300],[-14,-3],[20,38],[27,41],[26,27],[32,11],[-3,-20],[-43,-35],[-45,-59]],[[8883,86442],[-15,-17],[-55,10],[12,35],[42,22],[46,-34],[-30,-16]],[[8962,86297],[-31,-8],[-7,17],[16,42],[13,24],[10,6],[35,48],[39,35],[36,51],[37,72],[6,27],[17,3],[28,-18],[17,-25],[-8,-20],[-92,-103],[-8,-13],[-8,-35],[-8,-13],[-12,-5],[-9,-15],[-5,-25],[-11,-14],[-18,-1],[-12,-7],[-6,-12],[-19,-11]],[[3851,86626],[26,-29],[13,-1],[43,8],[16,-6],[15,-12],[9,-19],[2,-33],[-7,-30],[2,-41],[-1,-18],[22,-24],[8,-32],[3,-34],[-49,-12],[-49,-2],[-43,-23],[-9,-17],[7,-26],[-11,-6],[-11,5],[-21,24],[-22,11],[-79,18],[-100,68],[-42,15],[-44,50],[-39,64],[25,10],[26,5],[116,-9],[14,46],[15,11],[36,13],[35,25],[15,0],[16,-10],[32,15],[17,3],[14,-7]],[[9689,86599],[-9,-14],[-24,5],[-13,9],[44,37],[7,-8],[-5,-29]],[[9335,86664],[6,-16],[53,4],[16,-3],[6,-7],[-7,-11],[-21,-14],[-60,-25],[-49,-33],[-6,3],[-9,36],[-9,15],[-6,20],[0,7],[9,14],[18,20],[13,8],[46,-18]],[[8984,86664],[0,-15],[-9,-14],[8,-27],[-14,-46],[-6,-29],[-8,-19],[-7,-7],[-8,4],[-2,11],[5,16],[-18,-1],[-6,40],[10,13],[4,17],[1,12],[12,51],[4,3],[2,-12],[3,-3],[7,5],[9,22],[4,3],[9,-24]],[[7772,86613],[-13,-2],[17,28],[13,56],[17,-8],[3,-10],[-28,-57],[-9,-7]],[[2016,86668],[60,-38],[39,4],[30,-31],[13,-26],[-46,19],[-66,-2],[-90,77],[-32,18],[7,43],[35,22],[17,-58],[33,-28]],[[8908,86881],[-35,-5],[-16,7],[-3,8],[7,29],[0,12],[17,5],[21,-14],[6,-14],[3,-28]],[[2371,88502],[5,-14],[29,2],[40,-6],[45,-14],[45,5],[56,43],[33,11],[34,6],[37,-10],[35,-23],[14,-13],[11,-24],[7,-28],[11,-21],[67,-25],[42,-10],[10,-14],[9,-19],[36,-14],[37,5],[20,-5],[63,-1],[77,-21],[-12,-56],[-25,-24],[-72,7],[-71,-8],[-29,-28],[-25,-37],[-3,-35],[-14,-16],[-15,-7],[-12,19],[-17,60],[-11,16],[-12,11],[-35,19],[-35,12],[-21,1],[-15,21],[-8,30],[-14,15],[-28,22],[-29,17],[-89,38],[-29,5],[-30,-4],[-32,-17],[-31,-26],[-31,-19],[-33,-4],[-32,11],[-29,25],[-15,18],[-8,30],[1,30],[4,29],[16,71],[27,14],[51,-50]],[[3858,89992],[-10,-3],[0,9],[32,23],[58,29],[-2,-6],[-31,-23],[-47,-29]],[[13882,84036],[-14,-30],[-10,-32],[-7,-35],[-3,-37],[2,-40],[5,-35],[17,-65],[6,-39],[1,-27],[-38,-92],[-13,-45],[1,-19]],[[13729,83392],[-11,12],[-65,10],[-24,82],[-12,64],[-19,55],[0,13],[17,37],[65,31],[1,12],[-24,8],[-6,13],[-7,60],[2,53],[-2,35],[-10,72],[-17,43],[-41,86],[-4,21],[18,27],[12,25],[-71,-43],[-96,-46],[-42,-32],[-9,-13],[-3,-11],[8,-30],[-1,-10],[-9,-18],[-10,-51],[-21,-53],[-10,-11],[-38,20],[-10,17],[-19,70],[5,19],[13,15],[19,34],[24,52],[45,133],[29,1],[52,26],[-82,13],[-12,7],[-11,18],[-9,29],[-17,33],[-31,11],[-13,12],[-21,39],[-14,18],[-7,22],[-1,26],[-6,13],[-21,5],[-12,9],[-3,67],[-42,17],[-18,15],[-28,42],[-7,21],[-3,17],[7,46],[-3,9],[-25,-5],[-153,72],[8,95],[-28,125],[-31,51],[6,19],[7,11],[13,0],[59,-37],[56,-44],[7,7],[-89,92],[-22,28],[-5,33],[-1,18],[7,10],[84,-9],[4,7],[-84,27],[-17,0],[-18,-39],[-9,-9],[-18,2],[-6,6],[-22,47],[-20,33],[-38,45],[-7,33],[-2,47],[5,45],[31,103],[13,18],[3,11],[-10,-2],[-9,-9],[-25,-48],[-27,-78],[-21,-27],[-14,6],[-20,32],[-43,39],[-50,10],[-31,40],[-46,111],[-6,55],[-6,14],[-25,18],[-16,26],[-24,135],[-31,93],[-8,50],[3,49],[-4,5],[-11,-38],[-3,-20],[-20,-5],[19,-39],[5,-19],[-10,1],[-19,-5],[33,-66],[14,-102],[21,-76],[14,-62],[7,-47],[9,-44],[25,-99],[3,-20],[-3,-16],[-8,-19],[-14,-7],[-45,13],[-17,25],[-24,44],[-34,21],[-84,-10],[-6,3],[0,37],[10,65],[-8,26],[-44,96],[1,19],[60,44],[-29,3],[-24,-17],[-9,11],[-14,62],[-9,23],[-5,4],[-2,-58],[10,-31],[1,-17],[-1,-25],[-7,-18],[-11,-11],[-11,-2],[-20,12],[-23,23],[-19,11],[-8,10],[-9,25],[-15,20],[-74,24],[-44,30],[-3,-8],[13,-31],[2,-19],[-11,-5],[-20,-30],[6,-4],[21,10],[23,-1],[39,-19],[35,-23],[12,-13],[6,-20],[4,-7],[34,-23],[2,-12],[-22,-35],[45,3],[27,-12],[34,-56],[11,-31],[2,-39],[-7,-11],[-14,-8],[-92,-13],[-34,-48],[-7,-1],[-25,13],[-46,38],[-58,36],[-131,107],[-3,6],[-3,20],[-9,11],[-17,9],[-25,27],[-32,45],[-19,36],[-8,25],[-18,29],[-59,61],[-31,23],[-28,13],[-24,3],[-6,8],[11,13],[2,8],[-53,13],[-50,28],[-127,80],[-65,50],[-39,24],[-16,13],[-7,11],[9,12],[26,12],[17,13],[27,51],[2,16],[-14,37],[-7,33],[0,19],[4,18],[4,12],[11,12],[9,6],[10,-4],[32,-46],[4,-17],[-1,-63],[9,-73],[3,5],[3,24],[2,47],[4,22],[6,22],[12,12],[36,-7],[17,4],[-71,33],[-44,62],[-8,7],[-24,3],[-26,-26],[-66,-82],[-19,-14],[-83,-46],[-57,-9],[-63,7],[-54,15],[-136,72],[-21,17],[31,44],[2,14],[-11,45],[-9,13],[-13,8],[-4,-6],[0,-13],[3,-25],[-10,-13],[-23,-14],[-39,-15],[-120,37],[-124,30],[-110,7],[-156,-25],[-83,-24],[-48,-2],[-47,4],[-4,17],[21,10],[-1,12],[-27,39],[-40,23],[-55,8],[-32,11],[-8,14],[-19,14],[-31,13],[-13,23],[10,71],[11,43],[10,30],[27,48],[-9,-3],[-39,-36],[-33,-37],[-32,-48],[-18,-22],[-24,-20],[-37,5],[-50,30],[-43,15],[-36,1],[-15,5],[25,27],[14,22],[19,34],[5,17],[-132,5],[-5,19],[0,13],[-4,11],[-19,8],[-27,-6],[-43,-22],[-19,17],[7,9],[14,7],[28,31],[-38,16],[-20,18],[-10,16],[1,55],[10,35],[87,34],[-27,13],[-56,-5],[-37,-29],[-43,-41],[-30,-16],[-15,11],[-20,3],[-25,-3],[-16,-11],[-9,-18],[-10,-12],[-11,-6],[-8,2],[-12,18],[-25,12],[-12,14],[-7,-9],[-9,-27],[-9,-13],[-42,-14],[-23,2],[-28,34],[-4,12],[10,29],[61,115],[-6,-1],[-20,-18],[-39,-46],[-18,-14],[-30,-1],[-14,5],[-17,-4],[-20,-12],[-13,-14],[-6,-15],[4,-2],[30,17],[17,4],[5,-8],[-24,-52],[-14,-50],[-13,-12],[-22,2],[-24,-5],[0,-14],[44,-39],[16,-6],[20,-14],[3,-14],[-7,-38],[-6,-15],[-9,-8],[-36,1],[-12,-4],[-24,-24],[-12,-19],[4,-2],[21,16],[31,9],[39,1],[30,9],[20,16],[19,-5],[18,-25],[6,-22],[-8,-19],[-15,-13],[-23,-9],[-15,-12],[-6,-16],[-3,-24],[-1,-32],[6,-58],[-5,-7],[-8,-5],[-13,0],[-12,-14],[-27,-76],[-9,-9],[-12,8],[-10,0],[-9,-10],[-19,-8],[-30,-5],[-25,2],[-45,16],[-18,12],[-15,19],[-40,-20],[-11,9],[-25,53],[-5,-3],[-5,-58],[-8,-20],[-25,-41],[-13,-71],[-4,-3],[-5,11],[-15,63],[-8,14],[-23,-36],[-2,-14],[6,-47],[-6,-7],[-45,25],[-11,2],[-3,-5],[15,-37],[-1,-13],[-65,-71],[-17,3],[-10,7],[-12,-1],[-41,-27],[-11,1],[-15,16],[-7,-1],[-4,-16],[-1,-32],[-15,-30],[-49,-49],[-13,-23],[-9,-31],[-8,-3],[-28,20],[-33,13],[-5,-6],[10,-19],[-2,-12],[-14,-4],[-18,2],[-22,7],[-31,-8],[-40,-25],[-33,0],[-46,41],[-12,3],[-4,12],[9,33],[13,25],[9,12],[44,32],[50,12],[31,19],[39,40],[20,30],[40,77],[-3,6],[-9,4],[-88,-73],[-13,-7],[-17,1],[-70,28],[-14,12],[-11,35],[20,80],[13,39],[35,60],[44,64],[15,41],[24,110],[-2,51],[-10,61],[-1,36],[10,12],[102,56],[49,43],[94,62],[25,0],[19,-22],[22,-17],[25,-13],[32,1],[39,16],[62,-6],[128,-41],[27,-2],[1,5],[-19,29],[-89,17],[-37,16],[-104,74],[-24,28],[10,14],[26,11],[8,10],[4,19],[15,25],[25,32],[39,31],[75,46],[-29,2],[-54,-8],[-19,-9],[-36,-33],[-14,-23],[-20,-46],[-8,-8],[-37,-7],[-101,-4],[-17,23],[-9,4],[-13,-4],[-92,-59],[-34,-30],[-23,-35],[-37,-25],[-49,-16],[-37,-20],[-39,-40],[-14,-30],[0,-14],[9,-45],[-10,-9],[-22,-3],[-36,-30],[-76,-89],[-10,-32],[0,-11],[12,-25],[-8,-17],[-22,-25],[-48,-41],[-31,-16],[-20,-1],[-20,6],[-35,26],[-28,2],[-2,-4],[39,-28],[39,-36],[24,-30],[10,-24],[0,-25],[-9,-25],[-27,-44],[-27,-13],[-70,-13],[-22,-11],[-7,-8],[48,-18],[4,-10],[-6,-37],[-13,-12],[-40,-22],[-35,-6],[-6,4],[7,29],[-2,7],[-13,6],[-19,-11],[-47,-43],[-5,-7],[17,-11],[-4,-10],[-26,-30],[-10,-21],[-17,-20],[-76,-64],[5,-15],[-19,-56],[-11,-49],[13,-20],[64,-24],[31,-6],[37,-17],[66,-45],[22,-30],[3,-14],[-2,-15],[-8,-21],[-21,-38],[-50,-58],[-22,-16],[-34,-13],[-12,-10],[-43,-54],[-12,-30],[2,-26],[-9,-18],[-56,-35],[2,-6],[20,-3],[-7,-31],[-3,-43],[-10,-8],[-36,1],[-44,-17],[-3,-5],[-1,-31],[-118,-23],[-25,-59],[-14,-18],[-45,-43],[-29,-18],[-32,-10],[-17,-15],[-1,-18],[-9,-17],[-28,-26],[-14,-34],[-10,-5],[-51,-8],[-11,-11],[-5,-46],[-9,-1],[-19,11],[-24,-9],[-53,-51],[-12,-18],[1,-10],[8,-10],[13,-31],[-1,-20],[-20,-58],[-8,-9],[-25,-14],[-10,-32],[-23,4],[-19,-6],[-12,-21],[-14,-12],[-14,-4],[-18,-16],[-22,-31],[-20,-19],[-18,-9],[-18,-2],[-18,5],[-16,-4],[-14,-11],[-13,-18],[-11,-50],[-14,-22],[-9,-4],[-17,4],[-27,10],[-28,-4],[-44,-30],[-14,-23],[28,-5],[14,-7],[-1,-7],[-14,-6],[-25,1],[-14,-6],[-19,-13],[-45,-14],[-17,-10],[-34,-58],[-4,-13],[4,-3],[19,6],[23,-10],[11,-12],[8,-15],[7,-29],[4,-4],[-43,-49],[-12,-21],[-8,-8],[-5,6],[-6,55],[-3,9],[-10,1],[-10,-17],[-22,-65],[-23,-32],[-178,-83],[-26,-19],[-5,-35],[-7,-31],[-12,-24],[-14,-16],[-3,11],[1,86],[-3,18],[-18,11],[-8,-2],[-11,-5],[-18,-18],[-10,-5],[-14,1],[-23,-18],[-55,-59],[-36,-15],[-10,-12],[-15,-32],[-10,-12],[-15,-1],[-20,10],[-16,-7],[-12,-24],[-13,-9],[-35,17],[-15,-11],[-20,-31],[-21,-20],[-22,-9],[-56,-11],[-23,7],[-5,9],[1,38],[9,28],[9,13],[11,12],[17,1],[31,-8],[-4,9],[-11,11],[-29,19],[-28,10],[-16,-6],[-23,-15],[-15,-17],[-8,-19],[-10,-63],[-6,-17],[-67,-111],[-26,-34],[-25,2],[-13,-13],[-17,-27],[-17,-13],[-14,1],[-12,5],[-8,9],[1,9],[11,8],[-4,22],[-19,37],[-13,19],[-24,3],[-4,-17],[8,-84],[-1,-19],[-15,-24],[-41,-27],[-12,2],[-37,53],[-34,11],[-2,-17],[7,-36],[-8,-32],[-25,-31],[-19,-15],[-13,1],[-1,21],[12,42],[3,35],[-6,28],[1,22],[7,15],[45,41],[20,7],[10,-11],[13,-2],[15,7],[10,14],[4,19],[20,26],[35,31],[40,57],[46,83],[53,72],[62,60],[66,48],[134,66],[10,-4],[-12,-21],[8,-14],[13,-1],[49,10],[20,14],[6,-13],[-7,-17],[-30,-17],[1,-14],[43,-67],[13,-10],[12,1],[4,9],[-3,48],[14,9],[30,2],[19,-6],[9,-15],[17,-12],[25,-10],[15,3],[6,16],[-10,19],[-48,40],[-13,17],[-3,24],[7,31],[14,45],[24,60],[21,42],[42,47],[29,23],[72,72],[140,73],[34,47],[47,52],[20,13],[0,-20],[6,-18],[32,-12],[20,-4],[10,4],[2,19],[-4,34],[-1,33],[2,30],[4,24],[21,43],[31,49],[43,57],[27,26],[25,14],[24,25],[42,58],[14,10],[30,11],[11,-5],[7,-14],[8,-10],[30,-8],[21,13],[-4,7],[-16,5],[-11,8],[-10,35],[-20,21],[-5,24],[4,37],[17,87],[3,90],[16,51],[31,19],[69,13],[-40,23],[-16,0],[-26,11],[-10,56],[0,40],[18,47],[64,80],[71,55],[-10,4],[-8,17],[32,110],[32,98],[-43,-84],[-50,-64],[-145,-74],[-99,-63],[-47,-14],[-31,15],[-24,60],[-14,22],[-18,39],[8,50],[14,35],[31,6],[34,-17],[31,-1],[-39,34],[-56,30],[-26,-9],[-19,-49],[-26,-34],[-23,12],[-14,14],[10,-41],[-18,-63],[-6,-43],[25,-115],[-5,-45],[-45,-21],[-37,37],[-76,145],[-27,41],[-60,69],[-20,-10],[-25,-34],[-24,-9],[-65,50],[-30,37],[-28,46],[-44,-25],[-38,-30],[-44,-48],[-30,0],[-81,-41],[-9,-1],[-11,-22],[-11,-10],[-10,-43],[-109,-33],[-108,19],[38,23],[42,19],[37,44],[-16,60],[-3,30],[1,38],[40,54],[-42,0],[-27,-19],[-25,40],[-12,79],[29,47],[13,36],[12,50],[1,43],[-23,72],[-63,153],[-29,114],[-50,61],[37,100],[41,91],[54,40],[-4,6],[-30,0],[-19,-5],[-18,-30],[-18,-22],[-56,-116],[-37,-56],[-23,-16],[38,-22],[6,-19],[7,-41],[-10,-51],[-10,-28],[-45,2],[-40,-41],[-95,-44],[-128,-26],[-63,3],[-65,52],[0,30],[3,26],[-94,90],[-54,89],[-38,2],[-33,23],[-39,37],[3,30],[6,21],[-24,15],[-31,-2],[-36,11],[94,114],[32,77],[27,11],[34,-12],[47,-30],[40,-14],[14,-14],[15,-27],[-16,-45],[-14,-31],[17,8],[50,49],[37,43],[17,-4],[12,-8],[20,-44],[25,-45],[56,43],[30,53],[-25,24],[-31,13],[-79,19],[20,15],[50,-2],[19,15],[-20,20],[-25,18],[-68,-60],[-124,3],[-87,35],[-87,-6],[-13,7],[-17,19],[49,45],[34,25],[2,14],[-20,2],[-38,-12],[-17,21],[3,36],[-6,-4],[-15,-19],[-21,10],[-18,16],[9,17],[19,24],[-8,3],[-17,-5],[-16,-31],[3,-25],[0,-36],[-28,-7],[-24,5],[-17,36],[-17,78],[-48,20],[-12,39],[30,51],[-13,26],[-32,8],[-37,-25],[-17,22],[-3,25],[-1,36],[10,3],[9,-7],[74,20],[7,10],[-59,30],[-16,31],[24,18],[44,2],[61,19],[-25,33],[-6,18],[-5,31],[10,51],[72,117],[71,98],[22,22],[32,12],[30,-9],[31,-21],[6,9],[-11,9],[-13,40],[43,15],[26,45],[2,13],[-28,-18],[-29,-31],[-7,31],[-7,71],[12,68],[10,30],[24,29],[69,11],[13,-6],[2,14],[-41,42],[17,34],[15,17],[84,27],[45,-9],[58,-31],[33,-39],[-5,-20],[-8,-12],[-17,-13],[-7,-10],[3,-8],[25,24],[40,28],[23,-12],[17,-23],[20,1],[63,19],[32,20],[39,53],[51,34],[73,108],[21,44],[25,7],[23,-4],[15,-37],[23,-10],[130,9],[67,16],[46,35],[48,59],[28,40],[13,52],[-17,66],[-18,56],[-23,127],[-64,83],[-46,25],[-30,-3],[22,53],[61,-6],[40,11],[33,26],[10,19],[16,40],[-5,42],[-9,23],[-22,26],[-27,37],[-18,12],[-16,-1],[-78,-74],[-46,-2],[-35,14],[-30,-42],[-85,-37],[-45,-38],[-84,-93],[-21,-43],[-26,-2],[-19,82],[-91,78],[-28,-26],[15,-25],[21,-17],[34,-8],[-15,-23],[-11,-32],[-34,30],[-61,43],[-63,22],[-164,-3],[-108,-44],[-10,9],[-10,4],[-18,-11],[-8,-17],[-11,-12],[-22,-4],[-45,7],[-85,27],[-194,41],[-50,24],[-44,59],[1,40],[19,17],[-1,58],[-38,15],[-77,82],[-28,35],[6,4],[14,-9],[26,-7],[64,11],[22,53],[48,16],[44,-8],[-10,15],[-11,11],[-114,27],[-16,-8],[-205,48],[-162,84],[-13,16],[-15,36],[22,35],[22,17],[1,-20],[3,-19],[93,45],[48,58],[92,10],[22,16],[28,31],[41,54],[58,28],[39,25],[51,15],[44,-25],[13,-3],[80,-5],[26,11],[11,8],[8,12],[-78,45],[8,25],[10,18],[91,52],[70,17],[37,-1],[108,68],[59,19],[112,13],[92,3],[25,-24],[-49,5],[-22,-4],[15,-9],[18,-17],[-5,-22],[-31,-66],[3,-53],[-20,-17],[-19,-24],[94,-76],[146,-5],[79,14],[45,-23],[38,-5],[103,12],[78,-16],[33,6],[72,113],[28,18],[31,-20],[40,-16],[25,12],[21,-29],[-10,61],[-14,23],[-118,41],[-78,-20],[-25,23],[8,47],[-84,115],[-35,24],[-42,1],[-21,40],[-18,51],[36,21],[33,10],[30,-17],[33,-67],[32,-10],[-9,-68],[39,-62],[89,-57],[70,21],[50,-1],[30,-12],[74,-52],[37,-6],[116,27],[1,51],[-9,37],[-28,23],[-78,-5],[-62,38],[-52,-10],[-96,-58],[-48,23],[-30,31],[-49,31],[-6,60],[41,69],[30,32],[-27,24],[-68,17],[-119,-18],[-5,24],[0,25],[-48,-49],[-50,10],[-66,-5],[-148,43],[-52,54],[-22,43],[-40,119],[-50,75],[-351,252],[-159,64],[-77,70],[-48,17],[-46,8],[-59,22],[40,28],[27,10],[-28,-30],[21,-7],[35,17],[18,20],[27,85],[28,129],[-7,51],[194,-10],[129,8],[43,12],[163,20],[43,14],[78,43],[92,77],[80,101],[12,27],[5,-7],[7,5],[9,38],[10,90],[39,85],[168,193],[77,77],[26,35],[27,25],[19,-24],[9,-7],[5,-11],[-16,-6],[-26,-25],[-36,-16],[-9,-9],[22,2],[63,18],[36,22],[179,41],[97,66],[3,15],[144,84],[20,-4],[23,-10],[-40,-55],[28,-14],[-25,-66],[52,-1],[12,-30],[3,26],[-1,37],[4,37],[8,25],[36,-11],[83,27],[-100,4],[-60,59],[-33,1],[111,87],[102,53],[23,-1],[11,-10],[2,-16],[-22,-10],[-21,-19],[10,-16],[15,-3],[48,14],[22,17],[105,-2],[30,13],[8,12],[134,2],[25,9],[85,46],[78,57],[36,31],[61,79],[53,51],[87,51],[21,-6],[-28,-10],[-20,-22],[27,-29],[183,-59],[46,-4],[18,-35],[-15,-34],[-47,-38],[-95,-39],[29,-15],[19,-35],[28,-4],[46,13],[35,21],[74,70],[24,39],[17,9],[62,-9],[35,-20],[40,-35],[-15,-34],[-16,-20],[52,-26],[57,-6],[55,-21],[77,44],[60,9],[57,-2],[73,24],[125,-32],[31,8],[50,-5],[53,-20],[19,-21],[-57,-44],[-9,-46],[20,-19],[36,-4],[4,-27],[23,-6],[112,2],[-9,-13],[-5,-15],[-35,-34],[200,-20],[27,19],[41,8],[88,26],[33,-12],[39,-26],[36,-6],[34,6],[78,38],[91,2],[37,-13],[39,6],[118,-44],[44,-5],[58,-57],[30,-1],[34,24],[29,-1],[29,-23],[47,-7],[22,-37],[24,-13],[178,-27],[88,13],[129,-4],[62,-17],[65,2],[107,-63],[56,-9],[11,-15],[161,-15],[56,33],[98,8],[88,28],[50,0],[59,-7],[22,3],[16,12],[142,-47],[79,-55],[35,-40],[166,-57],[48,-32],[33,-36],[19,-3],[14,10],[58,-3],[22,-5]],[[53455,75978],[-3,-1],[0,2],[0,3],[3,0],[0,-4]],[[32962,59156],[-2,-1],[-3,2],[1,2],[3,1],[1,4],[0,5],[0,6],[2,3],[2,1],[1,-2],[1,-6],[-2,-4],[-1,-3],[-1,-5],[-2,-3]],[[32992,59328],[-4,-6],[2,0],[-2,-5],[-1,5],[-3,2],[-2,1],[-4,0],[0,5],[4,-3],[7,3],[0,4],[-2,4],[-1,3],[2,5],[8,10],[3,5],[1,-2],[0,-2],[0,-2],[1,-2],[-4,-8],[-5,-17]],[[33007,59422],[-8,-9],[-21,39],[3,45],[12,25],[12,14],[12,2],[4,-38],[-3,-52],[-11,-26]],[[33056,56951],[-17,-12],[-3,58],[5,15],[30,47],[8,8],[6,-9],[-2,-13],[14,-21],[-3,-26],[-16,-29],[-22,-18]],[[33105,57107],[-33,-19],[0,15],[9,27],[17,7],[7,10],[11,6],[6,-1],[7,-8],[-16,-15],[-8,-22]],[[31885,58125],[-15,-13],[-27,13],[-14,18],[9,21],[22,0],[21,-25],[4,-14]],[[32264,58254],[9,-75],[-3,-14],[-25,-51],[-21,-3],[-17,1],[-13,10],[-17,33],[-16,-10],[-40,12],[-11,11],[15,41],[28,16],[10,4],[8,-25],[20,-22],[23,-2],[6,38],[32,57],[12,-21]],[[30189,58676],[-9,-28],[-18,-34],[-20,-21],[-106,-53],[-11,-11],[-13,-22],[0,-50],[2,-39],[32,-129],[12,-32],[41,-70],[-9,-10],[-16,-1],[12,-92],[25,-63],[1,-39],[-19,-123],[-36,-74],[-25,-86],[-20,-34],[-44,-168],[34,-101],[4,-50],[29,-73],[19,-23],[12,-30],[-6,-49],[12,-67],[15,-35],[18,-14],[23,0],[67,44],[15,20],[10,36],[34,73],[2,93],[7,113],[-8,73],[-35,104],[-15,75],[-35,69],[-21,118],[-9,37],[-6,51],[-8,91],[23,32],[-2,74],[57,21],[123,120],[77,31],[87,64],[20,32],[17,52],[14,6],[45,-49],[22,17],[9,39],[-12,75],[-26,0],[-78,-27],[-8,32],[0,29],[-18,89],[11,68],[12,55],[22,22],[33,24],[25,-37],[15,-35],[8,-33],[6,-92],[13,-93],[14,-64],[23,-49],[17,4],[12,8],[81,11],[50,-33],[63,-17],[59,-71],[60,-85],[15,-63],[6,-59],[14,-40],[-14,-41],[7,-69],[18,-69],[26,-44],[74,-12],[81,30],[125,27],[40,23],[206,12],[39,-33],[4,-33],[0,-26],[67,-124],[54,-16],[46,-40],[48,-22],[52,-30],[30,4],[22,11],[26,1],[184,208],[98,-6],[15,14],[13,18],[-36,31],[-82,13],[-25,-21],[-14,53],[27,-2],[91,18],[105,-11],[85,37],[43,7],[24,-8],[68,25],[128,-29],[101,24],[-12,-34],[-33,-21],[-53,-7],[-41,-50],[-87,9],[-61,-18],[19,-14],[0,-51],[9,-11],[8,0],[21,-38],[6,-25],[7,-53],[-10,-56],[-12,-26],[25,9],[14,26],[-2,27],[2,31],[14,-10],[9,-14],[32,-148],[22,-78],[6,3],[5,3],[7,15],[10,36],[9,-23],[5,-9],[5,-3],[-5,34],[6,42],[-2,15],[10,3],[12,-5],[17,-12],[30,-49],[20,-51],[1,-28],[8,-16],[12,-16],[7,-26],[1,41],[-8,30],[-2,34],[40,1],[10,45],[21,-27],[56,-123],[21,-21],[62,-24],[38,-59],[23,-53],[-14,-56],[-36,-28],[-14,-35],[-9,-34],[0,-35],[-11,-40],[-1,-14],[-7,-56],[-15,-68],[-19,-72],[-104,-2],[26,-29],[23,-22],[39,-57],[30,45],[44,3],[48,49],[18,8],[88,-26],[22,36],[17,11],[48,-7],[42,-39]],[[32057,62443],[-22,-2],[-6,7],[12,18],[23,2],[6,-4],[-13,-21]],[[32112,62479],[-7,-4],[-5,1],[-1,8],[5,23],[28,2],[-20,-30]],[[32142,62638],[4,-19],[-3,0],[-15,13],[-13,1],[-5,4],[-2,7],[24,1],[10,-7]],[[32009,62093],[24,-26],[28,0],[-30,-25],[-56,-3],[1,41],[33,13]],[[32039,62415],[-19,-15],[-12,2],[-5,6],[10,18],[26,-11]],[[31987,62401],[-21,-5],[-28,27],[22,10],[15,-6],[12,-26]],[[79615,56844],[-8,-1],[-6,12],[26,37],[-3,-25],[1,-12],[-10,-11]],[[78906,57828],[5,-29],[-2,-66],[-11,-66],[4,-29],[-9,-18],[-18,123],[-24,53],[-5,21],[14,-2],[24,34],[12,1],[10,-22]],[[79768,57832],[-23,-35],[-2,29],[20,19],[7,15],[6,0],[-8,-28]],[[79730,63794],[-11,-3],[-22,47],[11,25],[26,-18],[5,-11],[0,-10],[-6,-22],[-3,-8]],[[79684,63833],[-3,-11],[-14,27],[-10,12],[8,37],[16,-40],[3,-25]],[[79866,63897],[-15,-15],[-19,2],[22,28],[12,35],[9,12],[-1,-30],[-8,-32]],[[79889,64064],[-40,-72],[-15,1],[13,82],[7,19],[24,-28],[11,-2]],[[79992,64232],[-13,-5],[-33,-1],[-28,-53],[-20,-22],[-30,-18],[-33,-30],[-9,-52],[-1,-38],[-5,-42],[-53,-61],[-15,6],[-10,23],[-15,-5],[-11,-11],[-12,1],[-14,-13],[-18,4],[-17,19],[-10,5],[-12,1],[-2,-23],[17,-89],[5,-41],[-56,-120],[6,-78],[-15,-59],[-34,-48],[-64,-123],[-29,-3],[-22,-28],[-47,-202],[-1,-70],[-7,-50],[2,-49],[-21,-96],[-22,-41],[-4,-52],[30,-108],[4,-19],[17,-58],[9,-41],[14,-41],[49,-108],[22,-32],[26,-23],[48,-96],[24,-62],[-11,-41],[6,-89],[-35,26],[5,-11],[40,-48],[61,-170],[53,-84],[54,-96],[17,-91],[48,-60],[54,-87],[-2,-19],[14,-24],[37,-46],[22,-49],[8,-46],[13,-7],[16,11],[15,4],[10,-3],[17,-51],[22,-46],[11,-41],[9,5],[7,-6],[2,-35],[4,-23],[30,-67],[14,-64],[37,-102],[26,-58],[20,-33],[21,-28],[22,-114],[11,-103],[23,-114],[18,-50],[0,-95],[14,-97],[15,-65],[5,-67],[4,-33],[6,-25],[16,-114],[-4,-52],[-11,51],[1,-152],[10,-80],[-5,-99],[11,-35],[19,-111],[13,-40],[-1,-137],[7,-69],[-18,41],[-13,47],[-17,-25],[-15,-36],[24,-147],[-28,14],[3,-197],[11,-46],[1,-22],[-3,-27],[-8,29],[-1,30],[-5,-7],[1,-15],[-10,-35],[-2,-43],[9,-36],[2,-28],[-7,-35],[-11,-37],[-26,-5],[-6,-71],[-9,-76],[-46,-12],[-33,-67],[-42,-25],[-37,-67],[-40,-61],[-27,-8],[-22,-13],[-26,-102],[-44,-12],[-78,-83],[-26,-40],[-24,-16],[-34,-35],[-7,13],[-12,30],[-29,15],[-15,33],[-4,43],[-4,17],[-6,-24],[-5,-102],[-5,-23],[-13,-11],[-25,30],[-23,59],[-34,-41],[10,-5],[16,3],[12,-10],[10,-39],[-1,-22],[-5,-25],[-32,-4],[-42,9],[-7,-3],[38,-39],[35,-22],[16,-24],[0,-20],[-20,-32],[-15,-40],[-1,-25],[0,-27],[-17,-24],[-11,5],[-30,41],[-86,163],[13,-46],[90,-185],[15,-61],[3,-43],[-10,-21],[-15,-26],[-29,-2],[-49,69],[-77,165],[-26,22],[78,-188],[13,-46],[13,-53],[-4,-31],[-7,-30],[-185,-174],[-28,-76],[-22,-93],[-36,-51],[-21,-48],[-62,-26],[-34,8],[35,86],[-22,32],[-1,221],[9,242],[16,121],[23,30],[30,19],[0,25],[-3,30],[-15,41],[-18,19],[-25,8],[-20,51],[-15,-2],[-24,-17],[-14,22],[-5,34],[-22,42],[-24,41]],[[97192,40214],[-9,-31],[-15,0],[-20,22],[4,29],[22,5],[6,-2],[12,-23]],[[97080,40587],[-15,-63],[-25,15],[-24,45],[-12,40],[8,75],[12,14],[13,-5],[6,-74],[37,-47]],[[97036,40932],[-12,-27],[-12,3],[-72,64],[3,27],[-3,67],[8,37],[20,15],[15,-8],[10,-54],[22,-22],[-16,-18],[27,-41],[10,-43]],[[96790,41738],[27,-82],[11,-7],[-17,-59],[-34,-5],[-41,15],[15,20],[-8,23],[-13,5],[-14,-11],[-6,4],[9,38],[23,53],[6,4],[6,1],[6,-5],[30,6]],[[96790,42177],[8,-8],[-4,-24],[-39,27],[-30,-10],[-9,1],[-9,22],[-7,44],[3,30],[13,21],[5,4],[10,-26],[8,-18],[9,-8],[19,-43],[23,-12]],[[96748,42432],[-32,-6],[-44,18],[-18,25],[-8,25],[15,19],[23,9],[27,57],[10,-22],[10,-64],[11,-20],[6,-19],[0,-22]],[[96503,42571],[12,-13],[7,0],[4,-28],[40,-56],[11,2],[9,-31],[17,-15],[5,-31],[12,-32],[-21,-38],[-41,10],[-24,-44],[-21,11],[-4,23],[3,8],[-13,58],[-5,90],[-9,52],[-9,22],[-20,-19],[-8,-3],[-18,43],[9,87],[4,25],[15,5],[23,-23],[22,-103]],[[96449,42785],[-5,-15],[-30,37],[7,36],[32,-12],[-4,-46]],[[96725,42643],[-5,-1],[-4,27],[-16,141],[10,126],[7,-27],[23,-221],[-3,-36],[-12,-9]],[[96641,42951],[-19,-26],[-34,2],[-13,15],[42,80],[49,17],[-25,-88]],[[96718,43013],[-5,-36],[-11,41],[-7,175],[3,16],[6,1],[14,-121],[0,-76]],[[96317,43302],[18,-191],[21,1],[11,10],[12,45],[5,70],[11,10],[14,-8],[-6,-22],[4,-56],[10,-31],[7,-6],[14,-146],[6,-31],[-1,-25],[-29,-55],[-44,2],[-30,-33],[-19,3],[0,37],[-17,29],[-19,63],[5,112],[-33,208],[-1,52],[12,68],[11,3],[15,-56],[23,-53]],[[96550,43628],[-11,-29],[-32,9],[-7,8],[2,48],[8,17],[19,15],[25,-24],[-4,-44]],[[96524,43832],[-4,-6],[-7,4],[-16,70],[4,23],[21,22],[18,-38],[2,-22],[0,-18],[-3,-16],[-13,-6],[-2,-13]],[[543,43595],[-16,-4],[-16,7],[-9,33],[4,14],[10,-7],[10,-24],[17,-11],[0,-8]],[[1066,44162],[-4,-4],[-5,22],[7,34],[6,12],[6,-26],[-10,-38]],[[2374,43751],[-76,0],[-38,26],[-13,0],[-33,55],[-5,28],[17,19],[36,10],[70,-41],[11,-37],[16,-4],[13,-16],[3,-26],[-1,-14]],[[2130,44086],[31,-54],[12,-72],[-13,-69],[-30,17],[-42,-15],[-15,5],[-34,85],[-23,38],[-10,35],[30,-4],[44,24],[50,10]],[[64934,59122],[17,-7],[26,20],[74,3],[90,-65],[-17,-16],[-10,-24],[-39,-21],[-40,-49],[-114,-24],[-33,13],[-28,48],[-51,62],[20,40],[5,18],[7,17],[29,30],[29,-4],[35,-41]],[[61876,59737],[-18,-18],[12,46],[13,9],[4,-2],[-11,-35]],[[61885,59891],[-4,-13],[-5,3],[-17,31],[19,34],[10,-32],[-3,-23]],[[61830,60658],[-9,-13],[-2,23],[5,50],[9,14],[7,-37],[-4,-20],[-6,-17]],[[64745,61433],[-140,-103],[-37,-45],[-33,-57],[-25,-70],[-18,-124],[13,-113],[-1,-60],[-36,-40],[-34,-29],[-37,-44],[-23,-11],[-19,-35],[-21,-25],[-78,-64],[-86,-49],[-135,-59],[-53,-64],[-47,-44],[-73,-13],[-99,-61],[-55,-48],[-69,-80],[-15,-25],[-12,-58],[-21,-51],[-42,-83],[-31,-42],[-20,-2],[-41,-23],[-47,-5],[-80,29],[-21,-20],[-17,-33],[-61,-56],[-63,-114],[-46,-30],[-74,-36],[-52,-47],[-35,-19],[-44,-10],[-83,5],[-79,-17],[-73,-32],[-34,-60],[-39,-96],[-64,-40],[-15,-34],[-20,-71],[-41,-18],[-38,-12],[-38,31],[-72,-86],[-27,-14],[-41,-3],[-30,-18],[-21,5],[-26,34],[-56,40],[-41,-26],[-3,80],[-68,247],[14,215],[0,30],[-13,96],[-40,87],[1,111],[-14,80],[-10,81],[3,22],[1,20],[-21,125],[-7,26],[-2,26],[6,20],[0,24],[-11,38],[-11,74],[-55,57],[11,54],[11,-19],[14,-16],[3,35],[0,26],[-23,163],[34,218],[-11,195]],[[60515,24801],[-12,-11],[-56,10],[-6,22],[17,34],[9,14],[29,-7],[24,-28],[4,-9],[-9,-25]],[[59134,36376],[-10,-133],[-40,-208],[-13,-95],[-34,-341],[-44,-172],[-25,-71],[-72,-126],[-20,-25],[-18,-17],[-31,-14],[-123,-254],[-46,-123],[-41,-178],[-40,-98],[-60,-210],[-53,-161],[-51,-147],[-88,-203],[-39,-59],[-27,-26],[-70,-118],[-99,-189],[-75,-168],[-113,-190],[-65,-84],[-99,-164],[-27,-24],[-111,-152],[-79,-93],[-129,-107],[-51,-30],[-122,28],[-51,-15],[-43,-65],[-4,-93],[-18,-14],[-27,4],[-85,39],[-46,-7],[-27,-50],[-22,-63],[-64,-3],[-115,65],[-135,40],[-31,4],[-65,-48],[-23,-7],[-95,10],[-53,30],[-51,1],[-38,-26],[-47,-8],[-127,-175],[-66,0],[-56,-21],[-28,1],[-53,24],[-19,-1],[-30,-11],[-30,-31],[-68,-13],[-26,-27],[-115,-159],[-26,6],[-22,11],[-59,1],[-68,86],[-26,-6],[7,26],[2,45],[-14,32],[-10,14],[-26,-3],[-14,39],[-41,3],[-14,-9],[-20,-2],[-1,39],[1,24],[-1,38],[-5,46],[-16,15],[-12,6],[-28,-3],[-20,-5],[-10,-14],[-10,-33],[0,-103],[-15,29],[-16,62],[-5,66],[6,77],[31,30],[-3,53],[-6,45],[-35,117],[-13,54],[-29,36],[-23,87],[-23,32],[-9,61],[-22,49],[-8,77],[12,44],[20,24],[20,-38],[24,15],[35,56],[21,85],[1,135],[-5,85],[-28,219],[-13,50],[-63,157],[-72,210],[-92,330],[-44,199],[-66,401],[-59,227],[-72,212],[-9,14]],[[58156,39058],[4,1],[79,27],[67,-22],[80,-62],[75,-22],[69,18],[57,4],[44,-9],[34,-22],[25,-33]],[[58443,42832],[-41,-1],[-71,0],[-73,0],[-68,-30],[-55,-46],[-66,-72],[-22,-28],[-16,-22],[-11,-28],[-5,-61],[0,-94],[-6,-68],[-21,-62],[-100,-76],[-65,-61],[-65,-73],[-48,-95],[-34,-116],[-55,-144],[-56,-125],[-60,-132],[-67,-48],[-56,11],[-68,54],[-54,10],[-39,-34],[-37,11],[-34,54],[-28,19],[-23,-14],[-30,2],[-53,30]]],"transform":{"scale":[0.0036000360003600037,0.001736002711589616],"translate":[-180,-89.99892578124998]}}
},{}],10:[function(require,module,exports){

/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var ds           = require('../util/DataSource.js');
var MiniMap      = require('../map/MiniMap.js');

//the last script tag in the array at execution time is the script tag that loaded this javascript
//we'll need this lata to load the configuration
var scriptTag = document.scripts[document.scripts.length - 1];

//allow automatic bootstrapping from config file
window.addEventListener("load", function(){
    var config_file = scriptTag.getAttribute("data-config");
    
    //if config_file is not defined we're not bootstraping ourselves off of a json 
    //config file, just return
    if(config_file === undefined || config_file === null){
        return;
    }

    ds({
        source: config_file,
        onSuccess: function(params){
            var map_configs = params.data;
            for(var i = 0; i < map_configs.length; i++){
                MiniMap(map_configs[i]);
            }
        },
        onError: function(param){
            console.error('Could not retrieve config file at, '+config_file+': '+param.error_text);
        }
    });

},true);

module.exports = MiniMap;

},{"../map/MiniMap.js":14,"../util/DataSource.js":18}],11:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


/**
* The Base Factory that all Layers should inherit from.
* ```
var layer = BaseLayer(config)
```
* @class BaseLayer
* @constructor BaseLayer
* @static 
* @param {Object} config - The configuration object for the BaseLayer
* @param {String:Required} config.name - Required: The layers' name 
* @param {String:Required} config.layerType - The layers' type 
* @param {String:Optional(true)} config.active - Whether or not the layer is active
*/

var _        = require('lodash');
var Interval = require('../util/Interval.js');

var BaseLayer = function(config){
    config = config || {};


    var map = config.map;
    var layer = {};
    layer.__baseFactory__ = 'Layer';

    //check for required config bits
    if(!config.layerType){
        console.error('Must provide a layerType');
        return;
    }


    var initDone = false;

    /** 
     * The name of the layer
     * @property {String} name
     * @private 
     */
    var name = config.name;
    /** 
     * The unique id assigned to the layer when it's created
     * @property {String} layerId
     * @private 
     */
    var layerId   = _.uniqueId('layer_');
    /** 
     * The layer's type
     * @property {String} layerType
     * @private 
     */
    var layerType = config.layerType;
    /** 
     * Whether or not the layer is active
     * @property {Boolean} active
     * @private 
     */
    var active = (config.active !== undefined) ? config.active : true;
    /** 
     * A object storing all the interval functions set on the layer
     * @property {Object} intervals
     * @private 
     */
    var intervals = {};
    /** 
     * A function to be called when the layer is toggled 
     * @property {Function} onToggle
     * @private 
     */
    var onToggle  = function(){ console.error("Must set onToggle in extended Layer"); };
    /** 
     * A function to be called when the layer is removed
     * @property {Function} onRemove
     * @private 
     */
    var onRemove  = function(){ console.error("Must set onRemove in extended Layer"); };
    /** 
     * A function to be called when the layer is updated
     * @property {Function} onUpdate
     * @private 
     */
    var onUpdate  = function(){ console.error("Must set onUpdate in extended Layer"); };

    var onInitComplete = function(){ console.error("must set onInitComplete")};


    layer.isInitDone = function(value){
	if(!arguments.length){
	    return initDone;
	}else{
	    initDone = value;
	}
	return initDone;
    }
    
    /** 
     * Getter/Setter Function for the Layer's containing map object
     * @method map
     * @chainable
     */
    layer.map = function(value){
        if(!arguments.length){ return map; }
        map = value;
        return layer;
    };

    /** 
     * Getter/Setter Function for the Layer's name 
     * @method name
     * @param {String} value - The layer's new name 
     */
    layer.name = function(value){
        if(!arguments.length){ return name; }
        name = value;
        return layer;
    };

    /** 
     * Getter Function for the Layer's active property
     * @method active
     */
    layer.active = function(){
        return active;
    };

    /** 
     * Getter Function for the Layer's type
     * @method layerType
     */
    layer.layerType = function(){
        return layerType;
    }

    /** 
     * Getter Function for the Layer's id
     * @method layerId
     */
    layer.layerId   = function(){
        return layerId;
    };

    /** 
     * Function to add a new Interval Function to the layer
     * @method addInterval
     * @param {Object} params - Function to be called when the layer is removed 
     * @param {Function:Required} param.func - The function to be called 
     * @param {Integer:Required} param.intervalSeconds - The interval in seconds to call the function on 
     */
    layer.addInterval = function(params){
        var intervalFunc = Interval(params);
        intervals[intervalFunc.intervalId()] = intervalFunc;
        //if the layer is active just start the interval now
        if(active){ intervalFunc(); }
        return intervalFunc;
    };

    /** 
     * Returns all the Interval Objects that have been added to the layer 
     * @method intervals
     */
    layer.intervals = function(){
        return _.values(intervals);
    };


    layer.onInitComplete = function(value){
	if(!arguments.length){ return onInitComplete; }
        onInitComplete = value;
        return layer;
    }
   

    layer.initComplete = function(){
	onInitComplete.call(layer);
    }

    /** 
     * Getter/Setter of the onToggle Function
     * @method onToggle
     * @param {Function} value - Function to be called when the layer is toggled
     * @chainable
     */
    layer.onToggle = function(value){
        if(!arguments.length){ return onToggle; }
        onToggle = value;
        return layer;
    };
    
    /** 
     * Toggle's the visibility of the layer and disabled any intervals added to the layer 
     * @method toggle
     * @param {Boolean:Optional} value - Determines whether the layer is on/off with true/false respectively, logically NOT's the current value of active if no value is provided 
     * @chainable
     * @return {Boolean} active - The active properties' new value
     */
    layer.toggle = function(bool){
        if(!arguments.length){
            active = !active;
        }else {
            active = bool;
        }
        //toggle any set intervals when we toggle the layer
        _.invoke(intervals, 'toggle', active);
        
        onToggle.call(layer, active);
        return active;
    };

    /**
     * Getter/Setter of the onRemove property
     * @method onRemove
     * @param {function} value - Function to be called when the layer is removed 
     * @chainable
     */
    layer.onRemove = function(value){
        if(!arguments.length){ return onRemove; }
        onRemove = value;
        return layer;
    };

    /**
     * Removes a layer from the containing map
     * @method remove
     */
    layer.remove = function(){
        //toggle any set intervals when we toggle the layer
        _.invoke(intervals, 'remove');

        onRemove.apply(layer, arguments);
    };

    /**
     * Getter/Setter of the onUpdate property
     * @method onUpdate
     * @param {Function} value - Function to be called when the layer is updated
     * @chainable
     */
    layer.onUpdate = function(value){
        if(!arguments.length){ return onUpdate; }
        onUpdate = value;
        return layer;
    };

    /**
     * Updates the layer and its components
     * @method update
     */
    layer.update = function(){
        if(!active){
            console.warn('Not updating inactive layer, '+layer.name());
            return;
        }
        return onUpdate.apply(layer, arguments);
    };

    /**
     * Getter/Setter of the onInit property
     * @method onInit
     * @param {function} value - Function to be called when the layer is initialized
     * @chainable
     */
    layer.onInit = function(value){
        if(!arguments.length){ return onInit; }
        onInit = value;
        return layer;
    };

    /**
     * Initializes the layer
     * @method init
     */
    layer.init = _.once(function(){
        onInit.apply(layer, arguments);
    });

    return layer;
};
module.exports = BaseLayer;

},{"../util/Interval.js":22,"lodash":3}],12:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
* The Base Map that all maps should inherit from
* ```
var map = BaseMap(config)
```
* @class BaseMap
* @constructor BaseMap
* @static
* @param {Object} config - The configuration object for the BaseMap
* @param {String:Required} config.containerId - The map's container id
* @param {String:Required} config.mapType - The maps' type
* @param {Boolean:Optional(false)} config.bordersActive - Whether or not the border features are active
* @param {Boolean:Optional(false)} config.roadsActive - Whether or not the road features are active
* @param {Boolean:Optional(false)} config.poiActive - Whether or not the point of interest features are active
* @param {Array:Optional} config.kmlLayers - An array of KML Layers to be added on instatiation 
mport' and 'export' may appear only with 'sourceType: module'* @param {Array:Optional} config.tileLayers - An array of Tile Layers to be added on instatiation 
* @param {Array:Optional} config.networkLayers - An array of Network Layers to be added on instatiation 
* @param {Function:Optional} config.onInit - A function to be called once the map has initialized
*/

var _           = require('lodash');
var d3          = require('d3');
var ds          = require('../util/DataSource.js');
var LAYER_TYPES = require('../util/Enums.js').LAYER_TYPES;
var MAP_TYPES   = require('../util/Enums.js').MAP_TYPES;
var InfoDiv     = require('../widget/InfoDiv.js');
var Legend      = require('../widget/Legend.js');
var Functions   = require('../util/Functions.js');

var BaseMap = function(config){
    config = config || {};
    var legend = config.legend;
    if(!config.containerId){
        console.error('Must pass in a containerId');
        return;
    }

    if(!config.mapType || (_.indexOf(_.values(MAP_TYPES), config.mapType) === -1)){
        console.error('Must pass in a valid map type, ('+_.values(MAP_TYPES).join(', ')+')');
        return;
    }

    var map = {};
    map.__baseFactory__ = 'Map';
    map.MAP_TYPES   = MAP_TYPES;
    map.LAYER_TYPES = LAYER_TYPES;
    //verifies the parameter is a layer
    function _assertIsLayer(layer){
        if(layer.constructor      !== Object  ||
           layer.__baseFactory__  === undefined ||
           layer.__baseFactory__  !== 'Layer' ){
            console.error("Argument must extend BaseLayer!");
            return false;
        }
        return true;
    }

    //verifies the layer is of the passed in type
    function _assertLayerIsType(layer, type){
        if(layer.layerType() === undefined){
            console.error("Must set a layerType for the added layer!");
            return false;  
        }
        if(layer.layerType() !== type){
            console.error("'"+layer.layerType()+"' incorrect, expected "+type+"!");
            return false;
        }
        return true;
    }

    /** 
     * The client's latitude and logitude coordinates. (Only Available if client allows it)
     * @property {Array} clientLatLng
     * @private 
     */
    var clientLatLng;
    /** 
     * Whether or not the border features are active 
     * @property {Boolean} bordersActive
     * @default false
     * @private 
     */
    var bordersActive = (config.bordersActive !== undefined) ? config.bordersActive : false;
    /** 
     * Whether or not the road features are active 
     * @property {Boolean} roadsActive
     * @default false
     * @private 
     */
    var roadsActive   = (config.roadsActive !== undefined) ? config.roadsActive : false;
    /** 
     * Whether or not the point of interest features are active 
     * @property {Boolean} poiActive
     * @default false
     * @private 
     */
    var poiActive     = (config.poiActive !== undefined) ? config.poiActive   : false;
    /** 
     * The maps' type
     * @property {String} mapType
     * @private 
     */
    var mapType       = config.mapType;
    /** 
     * The container id of the map
     * @property {String} containerId
     * @private 
     */
    var containerId = config.containerId;
    /** 
     * The d3 selection of the maps container
     * @property {D3 Selection} container
     * @private 
     */
    var container   = d3.select('#'+containerId);
    /** 
     * The d3 selection of the div that wraps the whole base map
     * @property {D3 Selection} wrapper
     * @private 
     */
    var wrapper     = d3.select(document.createElement('div')).classed('map-wrapper', true);

    /**
     * The infoDiv utility used for displaying map info
     * @property {InfoDiv} infoDiv 
     * @private
     */
    var infoDiv;

    /** 
     * The maps' width 
     * @property {Integer} width
     * @private 
     */
    var width;
    /** 
     * The maps' height
     * @property {Integer} height
     * @private 
     */
    var height;
    /** 
     * The maps' layers
     * @property {Object} layers
     * @private 
     */
    var layers = {};

    /** 
     * The function to be called when retrieving the maps' lineWidth
     * @property {Funciton} onLineWidth
     * @private 
     */
    var onLineWidth;
    /** 
     * The function to be called when adding a tile layer
     * @property {Function} onAddTileLayer
     * @private 
     */
    var onAddTileLayer;
    /**
     * The function to be called when adding a tile layer
     * @property {Function} onAddTileLayerWMS
     * @private
     */
    var onAddTileLayerWMS;

    /** 
     * The function to be called when adding a network layer
     * @property {Function} onAddNetworkLayer
     * @private 
     */
    var onAddNetworkLayer = (config.onAddNetworkLayer !== undefined) ? config.onAddNetworkLayer : null;
    /** 
     * The function to be called when adding a kml layer
     * @property {Function} onAddKmlLayer
     * @private 
     */
    var onAddKmlLayer;
    /**
     * The function to be called when adding a kml layer
     * @property {Function} onAddKmlLayer
     * @private
     */
    var onAddKMZLayer;
    /**
     * The function to be called when adding a geo json layer
     * @property {Function} onAddGeoJsonLayer
     * @private
     */
    var onAddGeoJsonLayer;
    /** 
     * The function to be called when panTo is called on a map
     * @property {Function} onPanTo
     * @private 
     */
    var onPanTo = function(){ console.error("Set the onPanTo function in the extended map class!"); };
    /** 
     * The function to be called when zoom is called on a map
     * @property {Function} onZoom
     * @private 
     */
    var onZoom = function(){ console.error("Set the onZoom function in the extended map class!"); };
    /** 
     * The function to be called when init is called on a map
     * @property {Function} onInit
     * @private 
     */
    var onInit = function(){ console.info("Doing default initialization routine only"); };
    /** 
     * The function to be called when latLngToXy is called on a map
     * @property {Function} onLatLngToXy
     * @private 
     */
    var onLatLngToXy    = (config.onLatLngToXy !== undefined) ? config.onLatLngToXy : function(){ console.error("Set the latlng to xy projection function in extended map class!"); };
    /** 
     * The function to be called when latXyToLng is called on a map
     * @property {Function} onXyToLatLng
     * @private 
     */
    var onXyToLatLng    = function(){ console.error("Set the xy to latlng projection function in extended map class!"); };
    /** 
     * The function to be called when update is called on a map
     * @property {Function} onUpdate
     * @private 
     */
    var onUpdate        = (config.onUpdate !== undefined) ? config.onUpdate : function(){ console.error("Set the onUpdate function in extended map class!");          };
    /** 
     * The function to be called when toggleRoads is called 
     * @property {Function} onToggleRoads
     * @private 
     */
    var onToggleRoads   = function(){ console.error("Set the onToggleRoads function in extended map class!");     };
    /** 
     * The function to be called when toggleBorders is called 
     * @property {Function} onToggleBorders
     * @private 
     */
    var onToggleBorders = function(){ console.error("Set the onToggleBorders function in extended map class!");   };
    /** 
     * The function to be called when togglePoi is called 
     * @property {Function} onTogglePoi
     * @private 
     */
    var onTogglePoi     = function(){ console.error("Set the onTogglePoi function in extended map class!");       };
    /**
     * The color scheme to be used by this map; an object like that returned by Color.getScheme()
     * @property {Object} colorScheme
     * @private
     */
   // var colorScheme;

    // set up the color scheme we will use
   // if(config.colorScheme){
   //     colorScheme = Color.getScheme(_.isArray(config.colorScheme) ? config.colorScheme[0] : config.colorScheme);
   // }
   // if(!colorScheme) {
   //     colorScheme = Color.getDefaultScheme();
   // }

    /** 
     * Getter for container property
     * @method container
     */
    map.container = function(value){
        return container.node();
    }; 
    
    /** 
     * Getter for wrapper property
     * @method wrapper
     */
    map.wrapper = function(value){
        return wrapper.node();
    }; 

    /** 
     * Getter for bordersActive property
     * @method bordersActive
     */
    map.bordersActive = function(value){
        if(!arguments.length){ return bordersActive; }
        bordersActive = value;
        return map;
        return bordersActive;
    }; 
    /** 
     * Getter for roadsActive property
     * @method roadsActive
     */
    map.roadsActive = function(value){
        if(!arguments.length){ return roadsActive; }
        roadsActive = value;
        return map;
    }; 
    /** 
     * Getter for poiActive property
     * @method poiActive
     */
    map.poiActive = function(value){
        if(!arguments.length){ return poiActive; }
        poiActive = value;
        return map;
    }; 
    /** 
     * Getter for mapType property
     * @method mapType
     */
    map.mapType = function(){
        return mapType;
    };
    /** 
     * Getter for clientLatLng property
     * @method clientLatLng
     */
    map.clientLatLng = function(){
        return clientLatLng;
    };
    /** 
     * Getter for the containerId property 
     * @method containerId
     */
    map.containerId = function(){
        return containerId
    };
    /** 
     * Getter/Setter for the height property 
     * @method height
     */
    map.height = function(value){
      if (!arguments.length){ return height; }
      height = value;
    };
    /** 
     * Getter/Setter for the width property 
     * @method width
     */
    map.width = function(value){
      if (!arguments.length){ return width; }
      width = value;
    };

    /**
     * Getter/Setter of infoDiv function
     * @method infoDiv
     * @param {Function} value - Function either setting the infoDiv element or
     * creating it
     */
    map.infoDiv = function(value) {
      if (!arguments.length){ return infoDiv; }
      infoDiv = value;
    };

    /**
     * Getter/Setter of pinDialog property.
     * @method pinDialog
     * @param {Boolean} value - Boolean for pinning the dialg to the map
     * creating it
     */
    map.pinDialog = function(value) {
      if (!arguments.length){ return pinDialog; }
      if (value === false) {
        d3.selectAll('g.selected').classed('selected', false);
      }
      pinDialog = value;
    };

    /**
     * Getter/Setter of onLatLngToXy function
     * @method onLatLngToXy
     * @param {Function} value - Function describing how to convert from lat/lng to xy coords 
     * @chainable
     */
    map.onLatLngToXy = function(value){
        if(!arguments.length){ return onLatLngToXy; }
        onLatLngToXy = value;
        return map;
    };

    /**
     * Coverts a lat/lng coordinate to an xy coordite 
     * @method latLngToXy
     * @param {Array} value - An array in the format [{latitude},{longitude}]
     */
    map.latLngToXy = function(){
        return onLatLngToXy.apply(map, arguments);
    };

    /**
     * Getter/Setter of the onXyToLatLng function
     * @method onXyToLatLng
     * @param {Function} value - Function that coverts from xy coords to lat/lng coords 
     * @chainable
     */
    map.onXyToLatLng = function(value){
        if(!arguments.length){ return onXyToLatLng; }
        onXyToLatLng = value;
        return map;
    };

    /**
     * Function that converts an xy coordinate on the map container to a latitude longiude coordinate 
     * @method xyToLatLng
     * @param {Array} value - An array in to format [{x},{y}] 
     */
    map.xyToLatLng = function(){
        return onXyToLatLng.apply(map, arguments);
    };

    /**
     * Getter/Setter of the onPanTo property
     * @method onPanTo
     * @param {Function} value - Function that pans a map to either the passed in xy coords or the passed in latlng coords
     * @chainable
     */
    map.onPanTo = function(value){
        if(!arguments.length){ return onPanTo; }
        onPanTo = value;
        return map;
    };

    /**
     * Function that pans to some coordinate on the map
     * @method panTo
     * @param {Object} params - The function parameters object 
     * @param {Array:Optional} config.xy - An array of cartesian coordiantes to pan to 
     * @param {Array:Optional} config.latlng - An array of lat/lng coordiantes to pan to
     * @chainable
     */
    map.panTo = function(params){
        var latlng;
        if( params.xy !== undefined ){
            latlng = map.latLngToXy(params.xy);
        }
        else if(params.latlng !== undefined ){
            latlng = params.latlng;
        }
        else {
            console.error('Must pass in either x y cartesian coordiantes or lat lng coordinates');
            return;
        }
        params.latlng = latlng

        onPanTo(params);
        return map;
    };

    /**
     * Getter/Setter of the onZoom property
     * @method onZoom
     * @param {Function} value - Function that defines how to zoom on the map 
     * @chainable
     */
    map.onZoom = function(value){
        if(!arguments.length){ return onZoom; }
        onZoom = value;
        return map;
    };
    
    /**
     * Zooms to some level on the page 
     * @method zoom
     * @param {Object} params - Function parameters 
     * @param {Integer} params.zoom - The zoom level to zoom to 
     * @chainable
     */
    map.zoom = function(params){
        onZoom.call(map, params);
        return map;
    };

    /**
     * Adds a layer to the map 
     * @method addLayer
     * @param {BaseLayer} layer - The layer to add to the map. Must be a  
     * @return {Integer} layerId - The id of the layer that was added
     */
    var addLayer = function(layer){
        if(!_assertIsLayer(layer)){ return; }

        layers[layer.layerId()] = layer;

        return layer.layerId();
    };

    /**
     * Removes layers from the map
     * @method removeLayers
     * @param {Object} params - The method parameters (Respects same filters as map.layers method)
     * @return {Integer} layerId - The id of the layer that was added
     */
    map.removeLayers = function(params){
        var my_layers = map.layers(params);
        _.forEach(my_layers, function(layer, layer_id){
            my_layers[layer_id].remove();
            delete my_layers[layer_id];
        });
        return map;
    };

    /**
     * Returns map layers 
     * @method layers 
     * @param {Object} params - The method parameters
     * @param {Array} params.layerIds - The layerIds to filter on 
     * @param {Array} params.layerTypes - The layerTypes to filter on 
     * @param {Boolean} params.active - Filters on layer active flag 
     * @return {Array:BaseLayers} my_layers - Returns an array of all the layers with respect to filters passed in 
     */
    map.layers = function(params){
        params = params || {};
        var my_layers = layers;

        //filter by layerIds if passed in
        if(params.layerIds){
            if(params.layerIds.length === 0) { return []; }
            my_layers = _.filter(my_layers, function(d){
                return _.indexOf(params.layerIds, d.layerId()) !== -1;
            });
        }
        //filter by layerTypes if passed in
        if(params.layerTypes){
            if(params.layerTypes.length === 0) { return []; }
            my_layers = _.filter(my_layers, function(d){
                return _.indexOf(params.layerTypes, d.layerType()) !== -1; 
            });
        }
        //filter by layerTypes if passed in
        if(params.active !== undefined){
            my_layers = _.filter(my_layers, function(d){
                return params.active === d.active(); 
            });
        }

        return my_layers;
    };
    
    /**
     * Getter/Setter of the onToggleRoads 
     * @method onToggleRoads 
     * @param {Function} value - Method that defines how to toggle road features on the map 
     * @chainable
     */
    map.onToggleRoads = function(value){
        if(!arguments.length){ return onToggleRoads; }
        onToggleRoads = value;
        return map;
    };

    /**
     * Toggles the road features' visibility on the map 
     * @method toggleRoads
     * @param {Boolean:Optional} isActive - Explicitly sets the visibility of the features, otherwise takes the logical NOT of the current state 
     * @return {Boolean} roadsActive - A boolean representing whether the road features are active or not
     */
    map.toggleRoads = function(isActive){
        if(isActive !== undefined){ roadsActive = isActive;    }
        else                      { roadsActive = !roadsActive }
        onToggleRoads.call(map, roadsActive);
        return roadsActive;
    };
    
    /**
     * Getter/Setter of the onTogglePoi function
     * @method onTogglePoi
     * @param {Function} value - Method that defines how to toggle point of interest features on the map 
     * @chainable
     */
    map.onTogglePoi = function(value){
        if(!arguments.length){ return onTogglePoi; }
        onTogglePoi = value;
        return map;
    };
    
    /**
     * Toggles the point of interest features' visibility on the map 
     * @method togglePoi
     * @param {Boolean:Optional} isActive - Explicitly sets the visibility of the features, otherwise takes the logical NOT of the current state 
     * @return {Boolean} poiActive - A boolean representing whether the point of interest features are active or not
     */
    map.togglePoi = function(isActive){
        if(isActive !== undefined){ poiActive = isActive;  }
        else                      { poiActive = !poiActive }
        onTogglePoi.call(map, poiActive);
        return poiActive;
    };

    /**
     * Getter/Setter of the onToggleBorders function
     * @method onToggleBorders
     * @param {Function} value - Method that defines how to toggle the border features on the map 
     * @chainable
     */
    map.onToggleBorders = function(value){
        if(!arguments.length){ return onToggleBorders; }
        onToggleBorders = value;
        return map;
    };
    
    /**
     * Toggles the border features' visibility on the map 
     * @method toggleBorders
     * @param {Boolean:Optional} isActive - Explicitly sets the visibility of the features, otherwise takes the logical NOT of the current state 
     * @return {Boolean} poiActive - A boolean representing whether the border features are active or not
     */
    map.toggleBorders = function(isActive){
        if(isActive !== undefined){ bordersActive = isActive;  }
        else                      { bordersActive = !bordersActive }
        onToggleBorders.call(map, bordersActive);
        return bordersActive;
    };

    /**
     * Tells the map to resize itself to its containers dimensions
     * @method resize
     */
    map.resize = function(){
        onResize.apply(map, arguments);
    }

    /**
     * Toggles the activity of 1-n layers. (Respects filters of map.layers function)
     * @method toggleLayers
     * @param {Object} params - Method parameters 
     * @param {Boolean:Optional(false)} params.deferUpdate - Stops the map.update function from being called after the layers have been toggled
     * @chainable
     */
    map.toggleLayers = function(params){
        var states = [];
        var my_layers = map.layers(params);
        _.forEach(my_layers, function(layer){
            states.push(layer.toggle());
        });
        if(!params.deferUpdate){
            map.update();
        }
        return states;
    };

    /**
     * Getter/Setter of the onAddNetworkLayer function
     * @method onAddNetworkLayer
     * @param {Function} value - Method that defines how to add a network layer to the map 
     * @chainable
     */
    map.onAddNetworkLayer = function(value){
        if(!arguments.length){ return onAddNetworkLayer; }
        onAddNetworkLayer = value;
        return map;
    };

    /**
     * Adds a network layer to the map 
     * @method addNetworkLayer
     * @param {Object} layer - The layer configuration object 
     * @param {String:Required} layer.name - The name of the layer
     * @param {Boolean:Optional(true)} layer.active - Whether or not the layer should be active
     * @param {Object:Optional} layer.onLinkEvent - An object key'd on event types whose values are callbacks to be executed when the event happens to an adjacency 
     * @param {Object:Optional} layer.onEndpointEvent - An object key'd on event types whose values are callbacks to be executed when the event happens to a pop
     * @param {Object:Optional} layer.map2dataSource - An object defining how to derive data from the layers topology object 
     * @param {Object} layer.map2dataSource.type - Defines the type of map2dataSource object (See [DataSourceFormatter](DataSourceFormatter.html) for list of types)
     * @param {Object} layer.map2dataSource.config - Defines the type of map2dataSource object (See [DataSourceFormatter](DataSourceFormatter.html) for list of types)
     * @param {Array|Object|String} config.layers.map2dataSource.config.source - See [DataSource](DataSource.html)'s param.source constructor parameter for complete list of options
     * @param {Object:Optional} layer.mapSource - A DataSource#source that defines the location of the map topology 
     * @return {NetworkLayer} network_layer - Returns the added layer object
     */
    map.addNetworkLayer = function(layer){
        if(!onAddNetworkLayer){
            console.error("Must set onAddNetworkLayer function in extending map class!");
            return;
        }
        //modify arguements on layer
        var network_layer = onAddNetworkLayer.apply(map, arguments);

        if(!_assertLayerIsType(network_layer, LAYER_TYPES.NETWORK)){
            return;
        }
        addLayer(network_layer);

        if(layer.active !== false){
            network_layer.update(); 
        }

        return network_layer;
    };

    /**
     * Getter/Setter of the onAddKmlLayer function
     * @method onAddKmlLayer
     * @param {Function} value - Method that defines how to add a kml layer to the map 
     * @chainable
     */
    map.onAddKmlLayer = function(value){
        if(!arguments.length){ return onAddKmlLayer; }
        onAddKmlLayer = value;
        return map;
    };
    /**
     * Getter/Setter of the onAddKmzLayer function
     * @method onAddKmzLayer
     * @param {Function} value - Method that defines how to add a kml layer to the map
     * @chainable
     */
    map.onAddKmzLayer = function(value){
        if(!arguments.length){ return onAddKmzLayer; }
        onAddKmzLayer = value;
        return map;
    };
    /**
     * Adds a kmz layer to the map
     * @method addKmzLayer
     * @param {Object} layer - The layer configuration object
     * @param {String:Required} layer.name - The name of the layer
     * @param {Boolean:Optional(true)} layer.active - Whether or not the layer should be active
     * @param {Object:Optional} layer.source - A DataSource#source that defines the location of the kml file
     * @return {BaseLayer} kml_layer - Returns the added kml layer object
     */
    map.addKmzLayer = function(layer){
        if(!onAddKmlLayer){
            console.error("Must set onAddKmlLayer function in extending map class!");
            return;
        }
        //convert url obj if need be
        var source_params = ds({ source: layer.source, noRequest: true });
        layer.url = source_params.url;

        var kmz_layer = onAddKmzLayer.apply(map, arguments);
        if(!_assertLayerIsType(kmz_layer, LAYER_TYPES.KML)){
            return;
        }
        addLayer(kmz_layer);

        return kmz_layer;
    };

    /**
     * Adds a kml layer to the map 
     * @method addKmlLayer
     * @param {Object} layer - The layer configuration object 
     * @param {String:Required} layer.name - The name of the layer
     * @param {Boolean:Optional(true)} layer.active - Whether or not the layer should be active
     * @param {Object:Optional} layer.source - A DataSource#source that defines the location of the kml file
     * @return {BaseLayer} kml_layer - Returns the added kml layer object
     */
    map.addKmlLayer = function(layer){
        if(!onAddKmlLayer){
            console.error("Must set onAddKmlLayer function in extending map class!");
            return;
        }
        //convert url obj if need be
        var source_params = ds({ source: layer.source, noRequest: true });
        layer.url = source_params.url;

        var kml_layer = onAddKmlLayer.apply(map, arguments);
        if(!_assertLayerIsType(kml_layer, LAYER_TYPES.KML)){
            return;
        }
        addLayer(kml_layer);
        
        return kml_layer;
    };

    /**
     * Getter/Setter of the onAddGeoJsonLayer function
     * @method onAddGeoJsonLayer
     * @param {Function} value - Method that defines how to add a geoJson layer to the map
     * @chainable
     */
    map.onAddGeoJsonLayer = function(value){
        if(!arguments.length){ return onAddGeoJsonLayer; }
        onAddGeoJsonLayer = value;
        return map;
    };

    /**
     * Adds a geoJson layer to the map
     * @method addGeoJsonLayer
     * @param {Object} layer - The layer configuration object
     * @param {String:Required} layer.name - The name of the layer
     * @param {Boolean:Optional(true)} layer.active - Whether or not the layer should be active
     * @param {Object:Optional} layer.source - A DataSource#source that defines the location of the geoJson file
     * @return {BaseLayer} geoJson_layer - Returns the added geoJson layer object
     */
    map.addGeoJsonLayer = function(layer){
        if(!onAddGeoJsonLayer){
            console.error("Must set onAddGeoJsonLayer function in extending map class!");
            return;
        }
        //convert url obj if need be
        var source_params = ds({ source: layer.source, noRequest: true });
        layer.url = source_params.url;

        var geo_json_layer = onAddGeoJsonLayer.apply(map, arguments);
        if(!_assertLayerIsType(geo_json_layer, LAYER_TYPES.GEOJSON)){
            return;
        }
        addLayer(geo_json_layer);
        
        return geo_json_layer;
    };

    /**
     * Getter/Setter of the onAddTileLayer function
     * @method onAddTileLayer
     * @param {Function} value - Method that defines how to add a tile layer to the map
     * @chainable
     */
    map.onAddTileLayerWMS = function(value){
        if(!arguments.length){ return onAddTileLayerWMS; }
        onAddTileLayerWMS = value;
        return map;
    };

    /**
     * Getter/Setter of the onAddTileLayer function
     * @method onAddTileLayer
     * @param {Function} value - Method that defines how to add a tile layer to the map
     * @chainable
     */
    map.onAddTileLayer = function(value){
        if(!arguments.length){ return onAddTileLayer; }
        onAddTileLayer = value;
        return map;
    };


    /**
     * Adds a tile layer to the map
     * @method addTileLayerWMS
     * @param {Object} layer - The layer configuration object
     * @param {String:Required} layer.name - The name of the layer
     * @param {Boolean:Optional(true)} layer.active - Whether or not the layer should be active
     * @param {Object:Optional} layer.source - A DataSource#source that defines the location of the map tiles
     * @return {BaseLayer} tile_layer - Returns the added tile layer object
     */
    map.addTileLayerWMS = function(layer){
        if(!onAddTileLayerWMS){
            console.error("Must set onAddTileLayerWMS function in extending map class!");
            return;
        }
        if(!layer.source){
            console.error("Must pass in a source for the tile layer!");
        }
        //convert url obj if need be
        var source_params = ds({ source: layer.source, noRequest: true });
        layer.url = source_params.url;
	layer.params = layer.source;
        layer.opacity = (layer.opacity !== undefined) ? layer.opacity : 1;

        var tile_layer = onAddTileLayerWMS.apply(map, arguments);
        if(!_assertLayerIsType(tile_layer, LAYER_TYPES.TILE_WMS)){
            return;
        }
        addLayer(tile_layer);

        return tile_layer;
    };
    /**
     * Adds a tile layer to the map 
     * @method addTileLayer
     * @param {Object} layer - The layer configuration object 
     * @param {String:Required} layer.name - The name of the layer
     * @param {Boolean:Optional(true)} layer.active - Whether or not the layer should be active
     * @param {Object:Optional} layer.source - A DataSource#source that defines the location of the map tiles
     * @return {BaseLayer} tile_layer - Returns the added tile layer object
     */
    map.addTileLayer = function(layer){
        if(!onAddTileLayer){
            console.error("Must set onAddTileLayer function in extending map class!");
            return;
        }
        if(!layer.source){
            console.error("Must pass in a source for the tile layer!");
        }
        //convert url obj if need be
        var source_params = ds({ source: layer.source, noRequest: true });
        layer.url = source_params.url;
        layer.opacity = (layer.opacity !== undefined) ? layer.opacity : 1;
        
        var tile_layer = onAddTileLayer.apply(map, arguments);
        if(!_assertLayerIsType(tile_layer, LAYER_TYPES.TILE)){
            return;
        }
        addLayer(tile_layer);

        return tile_layer;
    };

    /**
     * Getter/Setter of the onLineWidth function
     * @method onLineWidth
     * @param {Function} value - Method that defines how to compute line width for the map (Generally line width is relative to zoom level)
     * @chainable
     */
    map.onLineWidth = function(value){
        if(!arguments.length){ return onLineWidth; }
        onLineWidth = value;
        return map;
    };

    /**
     * Returns the lineWidth of the mapo
     * @method lineWidth
     * @return {Integer} lineWidth - Returns the current lineWidth
     */
    map.lineWidth = function(){
        var lineWidth = onLineWidth();
        return lineWidth;
    };

    /**
     * Getter/Setter of the onResize function
     * @method onResize
     * @param {Function} value - Method that defines how to resize components on the map
     * @chainable
     */

    map.onResize = function(value){
	if(!arguments.length){ return onResize; }
        onResize = value;
        return map;
    }

    /**
     * Getter/Setter of the onUpdate function
     * @method onUpdate
     * @param {Function} value - Method that defines how to update components on the map 
     * @chainable
     */
    map.onUpdate = function(value){
        if(!arguments.length){ return onUpdate; }
        onUpdate = value;
        return map;
    };

    /**
     * Updates components on the map 
     * @method update
     */
    map.update = function(){
        onUpdate.apply(map, arguments);
    };

    /**
     * Deselects any selected elements
     * @method deselectAll
     */
    map.deselectAll = function() {
        var networkLayers = map.layers({layerTypes: [LAYER_TYPES.NETWORK]});
        console.log('networkLayers');
        console.log(networkLayers);
        _.forEach(networkLayers, function(l) {
            if(l.topology() !== undefined){
                l.topology().deselectAll();
            }
        });
    };

    /** Getter of the color scheme
     * @method colorScheme
     */
   // map.colorScheme = function(){ return colorScheme; }

    /**
     * Getter/Setter of the onInit function
     * @method onInit
     * @param {Function} value - Method that performs some initialization procedures to be executed once when the map intializes 
     * @chainable
     */
    map.onInit = function(value){
        if(!arguments.length){ return onInit; }
        onInit = value;
        return map;
    };

    /**
     * Initializes the map
     * @method init
     */
    map.init = _.once(function(){
        //var container = d3.select('#'+map.containerId());

        //wrap the map container in a div so we can draw legends and other supplemnental
        //information around the map with relative position
        Functions.wrap(map.wrapper(), map.container());

        map.width(container.node().getBoundingClientRect().width);
        map.height(container.node().getBoundingClientRect().height);
        
        //create our info div 
        map.infoDiv(InfoDiv({
            className: map.mapType(),
            align: {
                node: d3.select('#'+map.containerId()).node()
            } 
        }));

        //set onInit function if one was passed in
        if(config.onInit){ map.onInit(config.onInit); }
        onInit();

        //get the clients lat/lng location if the user allows it and the browser is capable
        if (navigator.geolocation && config.getClientLatLng) {
            navigator.geolocation.getCurrentPosition(function(position){
                clientLatLng = [
                    position.coords.latitude,
                    position.coords.longitude
                ];
            });
        } 

        //set the layers if any initial layers where added on instatiation
        if(config.kmlLayers){
            _.forEach(config.kmlLayers, function(layer){
                map.addKmlLayer(layer);
            });
        }
        //set the layers if any initial layers where added on instatiation
        if(config.tileLayers){
            _.forEach(config.tileLayers, function(layer){
                map.addTileLayer(layer);
            });
        }
        //set the layers if any initial layers where added on instatiation
        if(config.networkLayers){
            _.forEach(config.networkLayers, function(layer){
                map.addNetworkLayer(layer);
            });
        }
        
        //add a click handler to the map div that deselects all topology elements
        //and hides any pinned info divs
        if(map.mapType() !== MAP_TYPES.CESIUM){ 
            container.on('click', function() {
                map.deselectAll();
                map.infoDiv().hide({
                    pin: false
                });
                map.update();
            });
        }


        //show the load legend if the parameter was passed in 
        if(legend.show && legend.adjLoadLegend){
            var legendContainer = d3.select(map.wrapper()).select('div')
                .append('div')
                .classed('legend-wrapper', true);

            //figure out how to align the legend
            var align = legend.adjLoadLegend.horizontal ? {
                relative: true,
                node: legendContainer.node(), 
                position: 'bl',
            } : null; 
            if(!align){
                console.error('Do not currently support anything other than horizontal legneds');
                return;
            }

            //generate our color values
            var items = [];
            for(var i=1; i < 51; i++){
                items.push({
                    value: i*2, //(i === 0 || i === values.length - 1) ? values[i] + '%' : '',
                    color: legend.legend_colors[i-1]
                });
            }
    
            //figure out how wide to make the legend
            var legend_width;
            if(legend.adjLoadLegend.width){ 
                //if a percent was passed in compute the % of the map width
                if(legend.adjLoadLegend.width.constructor === String && legend.adjLoadLegend.width.match('%')){
                    legend_width = Math.round(map.width() * (parseInt(legend.adjLoadLegend.width) / 100));
                }
                //otherwise assume it's in pixels
                else {
                    legend_width = parseInt(legend.adjLoadLegend.width);
                }
            }
            //otherwise default to 40% of the map width 
            else {
                legend_width = Math.round(map.width() * 0.4);
            }

            //instantiate the legend
            Legend({
                width: legend_width,
                description: (this.mapType() === 'mini') ? 'Lines show the maximum directional flow of traffic, the arrow indicates direction, the color shows the percent of total capacity.'
                 : 'Lines color show the percent of total capacity currently measured on the adjacency',
                items: items,
                align: align,
                orientation: legend.adjLoadLegend.horizontal ? 'horizontal' : null,
                numberLocations: legend.adjLoadLegend.numberLocations
            });
        }

        return map;
    });

    return map;
};
module.exports = BaseMap;


},{"../util/DataSource.js":18,"../util/Enums.js":19,"../util/Functions.js":20,"../widget/InfoDiv.js":25,"../widget/Legend.js":26,"d3":2,"lodash":3}],13:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var topojson  = require('topojson');
var d3        = require('d3');
var WORLD_50m = require('../../geo_data/world-50m.json');
var US        = require('../../geo_data/us.json');
var US2       = require('../../geo_data/us2.json');
require('d3-geo-projection')(d3); //externd d3 with extra geo projections

var MapData = {
    us: US,
    us2: US2,
    world_50m: WORLD_50m
};

/**
 * An object containing various functions that will generate a map background
* ```
* var bg = MapBackgrounds['us']({
    containerId: 'map',
    scale: 220,
    width: 800,
    height: 250,
    lat: 40,
    lng: -80
* });
* ```
* @class MapBackgrounds
* @static 
*/
var MapBackgrounds = {
    /**
     * An function that will create a us map background
    * @method us
    * @param {Object} params - The configuration object for the us map background
    * @param {String} params.containerId - The container id the map background should be rendered into 
    * @param {Number} params.scale - An integer representing the scale of the map
    * @param {Number} params.width - An integer representing the pixel width of the background
    * @param {Number} params.height - An interger representing the pixel height of the background
    * @return {Object} map - A map object containing the map projection
    */
    us: function(params){
        var divID  = params.containerId;
        var scale  = params.scale;
        var width  = params.width;
        var height = params.height;

        //--- get background map going
        var projection = d3.geo.albersUsa()
            .scale(scale)
            .translate([width / 2, height / 2]);

        var path = d3.geo.path()
            .projection(projection);

        var svg = params.svg;

        //--- background Group
        var g = svg.append("g");

        var world = MapData.us;
        g.insert("path")
            .datum(topojson.feature(world, world.objects.land))
            .attr("class", "land")
            .attr("d", path);

        g.insert("path")
            .datum(topojson.mesh(world, world.objects.states, function(a, b) { return a !== b; }))
            .attr("class", "bounds1")
            .attr("d", path);

        g.insert("path")
            .datum(topojson.mesh(world, world.objects.counties, function(a, b) { return a !== b; }))
            .attr("class", "bounds2")
            .attr("d", path);

        var map = {}; 

        map.projection = function(){return projection;}
        map.width      = function(){return width;}
        map.height     = function(){return height;}
        map.divID      = function(){return divID;}
        map.svg        = function(){return svg;};

        return map;
    },
    /**
     * An function that will create a us map background
     * @method us2
     * @param {Object} params - The configuration object for the us map background
     * @param {String} params.containerId - The container id the map background should be rendered into
     * @param {Number} params.scale - An integer representing the scale of the map
     * @param {Number} params.width - An integer representing the pixel width of the background
     * @param {Number} params.height - An interger representing the pixel height of the background
     * @return {Object} map - A map object containing the map projection
     */
    us2: function(params){
        var divID  = params.containerId;
        var scale  = params.scale;
        var width  = params.width;
        var height = params.height;
        var lat    = params.lat;
        var lng    = params.lng;

        //--- get background map going
        var projection = d3.geo.albers()
	.scale(scale)
	.translate([width / 2, height / 2])
        .precision(0.1)
        .center([0,lat])
        .rotate([1-lng,0,0]);

        var path = d3.geo.path()
	.projection(projection);

        var svg = params.svg;

        //--- background Group
        var g = svg.append("g");

        var world = MapData.us2;
        g.insert("path")
	.datum(topojson.feature(world, world.objects.counties))
	.attr("class", "land")
	.attr("d", path);

        g.insert("path")
	.datum(topojson.mesh(world, world.objects.states, function(a, b) { return a !== b; }))
	.attr("class", "bounds1")
	.attr("d", path);

        g.insert("path")
	.datum(topojson.mesh(world, world.objects.counties, function(a, b) { return a !== b; }))
	.attr("class", "bounds2")
	.attr("d", path);

        var map = {};

        map.projection = function(){return projection;}
        map.width      = function(){return width;}
        map.height     = function(){return height;}
        map.divID      = function(){return divID;}
        map.svg        = function(){return svg;};

        return map;
    },
    /**
    * Creates a world background 
    * @method world
    * @param {Object} params - The configuration object for the us map background
    * @param {String} params.containerId - The container id the map background should be rendered into 
    * @param {Number} params.scale - An integer representing the scale of the map
    * @param {Number} params.width - An integer representing the pixel width of the background
    * @param {Number} params.height - An interger representing the pixel height of the background
    * @param {Number} params.lat - An interger representing what latitude coordinate to center the map background at
    * @param {Number} params.lng - An interger representing what longitude coordinate to center the map background at
    * @return {Object} map - A map object containing the map projection
    */
    world: function(params){
        var divID  = params.containerId;
        var scale  = params.scale;
        var width  = params.width;
        var height = params.height;
        var lat    = params.lat;
        var lng    = params.lng;

        var projection = d3.geo.naturalEarth()
        .scale(scale)
        .translate([width / 2, height / 2])
        .precision(0.1)
        .center([0,lat])
        .rotate([1-lng,0,0]); 

        var path = d3.geo.path()
        .projection(projection);

        var svg = params.svg;

        //--- background Group
        var g = svg.append("g");

        var world = MapData.world_50m;
        g.insert("path")
            .datum(topojson.feature(world, world.objects.land))
            .attr("class", "land")
            .attr("d", path);

        g.insert("path")
            .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))
            .attr("class", "bounds1")
            .attr("d", path);

        var map = {}; 

        map.projection = function(){return projection;}
        map.width      = function(){return width;}
        map.height     = function(){return height;}
        map.divID      = function(){return divID;}
        map.svg        = function(){return svg;};


        return map;
    },
    /**
    * Returns an unprojected world background 
    * @method worldUnprojected
    * @param {Object} params - The configuration object for the us map background
    * @param {String} params.containerId - The container id the map background should be rendered into 
    * @param {Number} params.scale - An integer representing the scale of the map
    * @param {Number} params.width - An integer representing the pixel width of the background
    * @param {Number} params.height - An interger representing the pixel height of the background
    * @param {Number} params.lng - An interger representing what longitude coordinate to center the map background at
    * @return {Object} map - A map object containing the map projection
    */
    worldUnprojected: function(params){
        var divID  = params.containerId;
        var scale  = params.scale;
        var width  = params.width;
        var height = params.height;
        var lng    = params.lng;

        var projection = d3.geo.equirectangular()
            .scale(scale)
            .translate([width / 2, height / 2])
            .precision(0.1)
            .rotate([1-lng,0,0]);

        var path = d3.geo.path()
            .projection(projection);


        var svg = params.svg;
        //--- background Group
        var g = svg.append("g");

        var world = MapData.world_50m;
        g.insert("path")
            .datum(topojson.feature(world, world.objects.land))
            .attr("class", "land")
            .attr("d", path);

        g.insert("path")
            .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))
            .attr("class", "bounds1")
            .attr("d", path);

        var map = {}; 

        map.projection = function(){return projection;}
        map.width      = function(){return width;}
        map.height     = function(){return height;}
        map.divID      = function(){return divID;}
        map.svg        = function(){return svg;};


        return map;
    }
};
module.exports = MapBackgrounds;

},{"../../geo_data/us.json":7,"../../geo_data/us2.json":8,"../../geo_data/world-50m.json":9,"d3":2,"d3-geo-projection":1,"topojson":6}],14:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var d3              = require('d3');
var _               = require('lodash');
var BaseMap         = require('./BaseMap.js');
var MapBackgrounds  = require('./MapBackgrounds.js');
var TrafficLayer    = require('./TrafficLayer.js');
var SingleTubeLayer = require('./SingleTubeLayer.js');
var MINI_MAP_TYPE   = require('../util/Enums.js').MAP_TYPES.MINI;

/**
* ```
MiniMap({
    containerId: "map",
    backgroundMap: "world",
    scale:   480,
    lat: 40,
    lng: -60,
    networkLayers: [{
        name: "Network",
        lineWidth: 5,
        mapSource: "../networks/network.json",
        map2dataSource: {
            type: 'atlasUsage',
            source: 'http://a-snapp-host.iu.edu/manlan/services/graphing.cgi'
        }
    }]
})
});```
* @class MiniMap
* @extends BaseMap
* @constructor MiniMap
* @static 
* @param {Object} config - The configuration object for the MiniMap
* @param {String} config.containerId - The container id of the DOM element to render the map into 
* @param {String} config.backgrounMap - The map background to use, see [MapBackgrounds](MapBackgrounds.html) for all background options 
* @param {Number} config.scale - The scale of the map
* @param {Number} config.width - The pixel width of the map
* @param {Number} config.height - The pixel height of the map
* @param {Number} config.lat - The latitude coordinate to center the map on
* @param {Number} config.lng - The longitude coordiante to center the map on 
* the full list of options 
*/
var MiniMap = function(config){
    config.mapType = MINI_MAP_TYPE;

    if(!config.backgroundMap){
        console.error("Must pass in a background map for the MiniMap!");
        return;
    }

    // based on the string passed in the config find the corresponding map background
    var bg;

    var svg = d3.select("#"+config.containerId).append("svg");

    var map = BaseMap(_.merge(config, {
        onInit: function() {
            svg.attr("width", map.width())
                .attr("height", map.height());
            bg = MapBackgrounds[config.backgroundMap]({
                containerId: config.containerId,
                svg: svg,
                scale: config.scale,
                width: map.width(),
                height: map.height(),
                lat: config.lat,
                lng: config.lng
            });
        },
        onAddNetworkLayer: function(layer){
            var layer_options = {
                map: map,
                svg: svg.append("g"),
                active: layer.active,
                lineColor: layer.lineColor,
                name: layer.name,
                onLatLngToXy: map.onLatLngToXy(),
            };

            var network_layer;
            //if we don't have a way to get topology data just show the single tube layers
            if(layer.map2dataSource === undefined){
               network_layer = SingleTubeLayer(layer_options)
                    .lineWidth(layer.lineWidth)
                    .loadMap(layer.mapSource);
            }
            //otherwise load the traffic layer with live updates
            else {
                layer_options.maxBps = layer.maxBps;
                network_layer = TrafficLayer(layer_options).lineWidth(layer.lineWidth)
                    .map2dataSource(layer.map2dataSource)
                    .loadMap(layer.mapSource);
            }

            return network_layer;
        },
        onUpdate: function() {
            var networkLayers = map.layers({layerTypes: [map.LAYER_TYPES.NETWORK]});
            _.forEach(networkLayers, function(l) {
                l.update();
            });
        },
        onLatLngToXy: function(latlng){
            return bg.projection()([latlng[1], latlng[0]]);
        }
    }));

    map.init();

    return map;
};
module.exports = MiniMap;

},{"../util/Enums.js":19,"./BaseMap.js":12,"./MapBackgrounds.js":13,"./SingleTubeLayer.js":16,"./TrafficLayer.js":17,"d3":2,"lodash":3}],15:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var ds                  = require('../util/DataSource.js');
var _                   = require('lodash');
var BaseLayer           = require('./BaseLayer');
var Topology            = require('../util/Topology.js');
//var DataSourceFormatter = require('../util/DataSourceFormatter');
var Functions           = require('../util/Functions.js');
var NETWORK_LAYER_TYPE  = require('../util/Enums').LAYER_TYPES.NETWORK;
var d3        = require('d3');
require('d3-geo-projection')(d3); //externd d3 with extra geo projections
/**
* Adds additional network specific functionality to BaseLayer  
* ```
var layer = NetworkLayer(config)
```
* @class NetworkLayer
* @extends BaseLayer
* @constructor BaseLayer
* @static
* @param {Object} params - The configuration object for the NetworkLayer
* @param {Object:Optional} params.onLinkEvent - An object key'd on event types whose values are callbacks to be executed when the event happens to a link
* @param {Object:Optional} params.onEndpointEvent - An object key'd on event types whose values are callbacks to be executed when the event happens to an endpoint
* @param {Function:Required} params.onLatLngToXy - A function describing how to convert lat/lng coordinates to xy coordinates 
*/
var NetworkLayer = function(params){
    var layer = BaseLayer(_.merge({ layerType: NETWORK_LAYER_TYPE }, params));
    var offsets = params.offsets || [0];
    if(!params.map){
        console.error("Must pass in a reference to the containing map object!");
        return;
    }
    var tooltip;
    if(params.tooltip){
        tooltip = params.tooltip;
    }
   
    /**
     * A css hex color string used to define the color of link lines
     * @property {String} lineColor
     * @private
     */
    var lineColor;
    /**
     * The width of lines representing links on the layer 
     * @property {Integer} lineWidth
     * @private
     */
    var lineWidth = params.lineWidth;
    /**
     * The function to be called when retrieving the maps' lineWidth
     * @property {Funciton} onLineWidth
     * @private
     */
    var onLineWidth = function(){};
    /** 
     * The topology object of the network layer
     * @property {Topology} topology - The Topology object of the network layer
     * @private 
     */
    var topology;
    /** 
     * The function defining how to convert from xy coordinates to lat/lng coordinates
     * @property {Function} onXyToLatLng
     * @private 
     */
    var onXyToLatLng = params.onXyToLatLng;


    /** 
     * The function defining how to convert from xy coordinates to lat/lng coordinates
     * @property {Function} onXyToLatLng
     * @private 
     */
    var max; 
    var min;

    /** 
     * A function describing how to convert from lat/lng coordinates to xy coordinates 
     * @property {Function} onLatLngToXy
     * @private 
     */
    var onLatLngToXy = params.onLatLngToXy || 
        function(){ console.error("Must implement onLatLngToXy in extending layer class"); };
    /** 
     * An object whose keys are event types and values callbacks for those events to be called on endpoints elements 
     * @property {Object} onEndpointEvent
     * @private 
     */
    var onEndpointEvent = params.onEndpointEvent || {
        mouseover: function(params){
            layer.showEndpointInfo({
                endpoint: params.data
            }); 
        },
        mouseout: function(params){
            layer.map().infoDiv().hide();
        },
        click: function(params){
            layer.showEndpointInfo({
                endpoint: params.data,
                pin: true
            }); 
        }
    };

    /** 
     * An object whose keys are event types and values callbacks for those events to be called on link elements 
     * @property {Object} onLinkEvent
     * @private 
     */
    var onLinkEvent = params.onLinkEvent || {
        mouseover: function(params){ 
            layer.showLinkInfo({
                link: params.data,
		        pos: params.pos
            }); 
        },
        mouseout: function(params){
            layer.map().infoDiv().hide();
        },
        click: function(params){
            layer.showLinkInfo({
                link: params.data,
                pin: true
            }); 
        }            
    };
    /** 
     * A function describing what to do when the layer's topology is set 
     * @property {Function} onTopology
     * @private 
     */
    var onTopology = function(){};
    /** 
     * A function describing how to retrieve the endpoint elements of the layer
     * @property {Function} onEndpoints
     * @private 
     */
    var onEndpoints = function(){ console.error("Must implement onEndpoints in extending layer class"); };
    /** 
     * A function describing how to retrieve the link elements in the layer
     * @property {Function} onLinks
     * @private 
     */
    var onLinks = function(){ console.error("Must implement onLinks in extending layer class"); };
    /** 
     * A function, given an link object, returns the bounding box for the dom window of the link
     * @property {Function} onLinkBoundingClientRect
     * @private 
     */
    var onLinkBoundingClientRect = function(){ console.error("Must implement onLinkBoundingClientRect in extending layer class"); };

    //helper function to make sure some arguements are always passed into the event callback
    function _onEventWrapper(evt, callback){
        return function(){
            if(!layer.active()){ return; }
            if(arguments[0].constructor !== Object){
                console.error('First argument of event handler must be an object!');
                return;
            }
            var data     = arguments[0].data;
            var eventObj = arguments[0].event;
            
            if(data === undefined){
                console.error('Must pass in data for clicked object');
                return;
            }

            //include a boundingClientRect in the function args
            var bb = layer.getBoundingClientRect({
                data: data,
                event: eventObj
            });
            arguments[0].bb = bb;
            
            console.debug(evt+' '+data.name);
            callback.apply(layer, arguments); 
        }
    }

    //helper method to register an event
    function _registerEvent(onEvent, args){
        if(!args.length){
            return onEvent;
        }
        else if(args.length === 1 && args[0].constructor === Object){
            var eventObj = args[0];
            _.forEach(eventObj, function(callback, evt){
                onEvent[evt] = _onEventWrapper(evt, callback);
            });
        }
        else if(args.length === 2){
            var evt      = args[0];
            var callback = args[1];
            onEvent[evt] = _onEventWrapper(evt, callback);
        }else {
            console.error("onEvent must be called with either an event string and callback or an object whose keys are event strings and values are callbacks");
            return;
        }
        return true;
    }

    /**
     * A Getter/Setter for link events. Callbacks can be set two ways; 1.) First arg is event type string and the second arg is the callback to be executed.
     * 2.) A single object arg whose keys are event type strings and whose values are the callbacks to be executed when that event type occurs
     * @method onLinkEvent
     * @param {String:Optional} evt - The event to set the callback for
     * @param {Function:Optional} callback - The callback to be executed given the evt event type
     * @param {Object:Optional} callback_object - A function whose keys are event types and values callback s
     * @chainable
     */
    layer.onLinkEvent = function(){
        var ret = _registerEvent(onLinkEvent, arguments);
        if(ret !== true ){ return ret; }
        return layer; 
    };

    /**
     * A Getter/Setter for endpoint events. Callbacks can be set two ways; 1.) First arg is event type string and the second arg is the callback to be executed.
     * 2.) A single object arg whose keys are event type strings and whose values are the callbacks to be executed when that event type occurs
     * @method onEndpointEvent
     * @param {String:Optional} evt - The event to set the callback for
     * @param {Function:Optional} callback - The callback to be executed given the evt event type
     * @param {Object:Optional} callback_object - A function whose keys are event types and values callback s
     * @chainable
     */
    layer.onEndpointEvent = function(){
        var ret = _registerEvent(onEndpointEvent, arguments);
        if(ret !== true ){ return ret; }
        return layer; 
    };

    //helper function to format the bps string
    function _formatRate(bps){
        var prefix = d3.formatPrefix(bps);

        return d3.format(',.3f')(parseFloat(prefix.scale(bps))) + ' ' + prefix.symbol + 'bps';
    }

    //helper function to get the styling for the circles that indicate laod color in the infoDiv when hovering over a link
    function _getBadgeStyle(color){
        var dc = d3.rgb(color).darker();
        return 'style="background-color: '+color+'; border-color: '+dc+'; text-shadow: 1px 1px '+dc+';"';
    }
    

    function _parseHtml(htmlContent, link){
        var customContent = htmlContent;
        const possible_vars = ['$input.min','$input.max','$input.avg','$output.min','$output.max','$output.avg', '$name','$input.name','$output.name'];
        _.forEach(possible_vars, function(variable){
            switch(variable){ 
                case '$name':
                    customContent = customContent.replace(/\$name/g, link.name);
                    break;
                case '$input.min':
                    customContent = customContent.replace(/\$input.min/g,link.az.min);
                    break;
                case '$input.max':
                    customContent = customContent.replace(/\$input.max/g, link.az.max);
                    break;
                case '$input.avg':
                    customContent = customContent.replace(/\$input.avg/g, link.az.avg);
                    break;
                case '$input.name':
                    customContent = customContent.replace(/\$input.name/g, link.endpoints[0]);
                    break;
                case '$output.min':
                    customContent = customContent.replace(/\$output.min/g,link.za.min);
                    break;
                case '$output.max':
                    customContent = customContent.replace(/\$output.max/g,link.za.max);
                    break;
                case '$output.avg':
                    customContent = customContent.replace(/\$output.avg/g, link.za.avg);
                    break;
                case '$output.name':
                    customContent = customContent.replace(/\$output.name/g, link.endpoints[1]);
                    break;
                default:
                    break;
            }
        });
        return customContent;
    }

    //helper function to create the body markup for the details div when hovering over a link
    function _createLinkInfoMarkup(link){

        if(tooltip.show && !tooltip.showDefault && tooltip.content){
            let customHtml = _parseHtml(tooltip.content, link);
            return customHtml;
        } else if(!tooltip.showDefault){
            return '<div>Choose default tooltip or enter your hover box display options</div>';
        }  
        //create the markup
        var linkStr = '<div class="adj-info">';
	    linkStr    += '<div><b>Link:</b> ' + link.name +'</div>';
	    linkStr += '<hr>';
    	linkStr += '<div>';
    
	    linkStr += '<div style="float: left"><div><center> To <b>' + link.endpoints[0] + '</b></center></div>'; 
	    linkStr += '<div><table>';
	    linkStr += '<tr><td style="font-weight:bold">Min:</td><td>' + link.az.min + '</td><td>Gbps</td></tr>';
	    linkStr += '<tr><td style="font-weight:bold">Max:</td><td>' + link.az.max + '</td><td>Gbps</td></tr>';
	    linkStr += '<tr><td style="font-weight:bold">Avg:</td><td>' + link.az.avg + '</td><td>Gbps</td></tr>';
	    linkStr += '</table></div></div>';
	
	    linkStr += '<div style="float: right"><div><center> To <b>' + link.endpoints[1] + '</b></center></div>';	
	    linkStr += '<div><table>';
	    linkStr += '<tr><td style="font-weight:bold">Min:</td><td>' + link.za.min + '</td><td>Gbps</td></tr>';
	    linkStr += '<tr><td style="font-weight:bold">Max:</td><td>' + link.za.max + '</td><td>Gbps</td></tr>';
	    linkStr += '<tr><td style="font-weight:bold">Avg:</td><td>' + link.za.avg + '</td><td>Gbps</td></tr>';
	    linkStr += '</table></div></div></div>';

        linkStr += '</div>';
        return linkStr;
    }

    /**
     * Displays a panel in the lower right corner of the map containing information about a link
     * @method showLinkInfo 
     * @param {Object} params - The method parameters 
     * @param {Object} params.link - The link object of the link to display info on
     * @param {Boolean} params.pin - If true the panel will continue to be displayed in the corner otherwise it will dissapear after a few moments
     * @chainable
     */
    layer.showLinkInfo = function(params){
        var link = params.link; 
	var div_pos = params.pos;
//	console.log("Mouse position: ",cur_pos);
        if(!tooltip.show) return;
	var linkStr = _createLinkInfoMarkup(link);

        //if the infoDiv is not already pinned and we were told to pin this
        //select and update 
        if(params.pin){
            if(layer.map().infoDiv().pin()){
                layer.map().deselectAll();
            }
            link.selected = true;
            layer.map().update();
        }

        layer.map().infoDiv().show({
            width: 400,
            content: linkStr,
            pin: params.pin,
	    pos: div_pos // cursor coordinates
        });
    };

    /**
     * A method to update the content of the infoDiv with LinkInformation
     * @method updateLinkInfo
     * @param {Object} params - The method parameters 
     * @param {Object} params.link - The link object of the link to display info on
     * @chainable
     */
    layer.updateLinkInfo = function(params){
        var link = params.link; 

        var linkStr = _createLinkInfoMarkup(link);
        
        layer.map().infoDiv().setContent({
            content: linkStr
        });
    };

    /**
     * Displays a panel in the lower right corner of the map containing information about a endpoint
     * @method showEndpointInfo 
     * @param {Object} params - The method parameters 
     * @param {Object} params.endpoint - The endpoint object of the endpoint to display info on
     * @param {Boolean} params.pin - If true the panel will continue to be displayed in the corner otherwise it will dissapear after a few moments
     * @chainable
     */
    layer.showEndpointInfo = function(params){
        var endpoint = params.endpoint; 
        var endpoingStr = '<div class="pop-info"><div><b>Endpoint:</b> ' + endpoint.name+'</div></div>' 
        
        //if it's pinned select the link
        if(params.pin){
            endpoint.selected = true;
            layer.update();
        }

        layer.map().infoDiv().show({
            width: 100,
            content: endpointStr,
            pin: params.pin
        });
    };
    
    /**
     * A Getter/Setter for the onEndpoints method
     * @method onEndpoints
     * @param {Function} value - The method describing how to get endpoint elements for the layer 
     * @chainable
     */
    layer.onEndpoints = function(value){
        if(!arguments.length){ return onEndpoints; }
        onEndpoints = value;
        return layer;
    };

    /**
     * A function that returns the endpoint elements for the layer 
     * @method endpointss
     * @chainable
     */
    layer.endpoints = function(){
        return onEndpoints();
    };

    /**
     * A function sets and gets the max bps of the layer for computing load %
     * @method max
     * @chainable
     */
    layer.max = function(value){
        if(!arguments.length){ return max; }

        max = value;
        
        return max;
    };

    layer.min = function(value){
	if(!arguments.length){ return min; }
	min = value;
	return min;
    };

    /**
     * A Getter/Setter for the onLinks
     * @method onLinks
     * @param {Function} value - The method describing how to get link elements for the layer
     * @chainable
     */
    layer.onLinks = function(value){
        if(!arguments.length){ return onLinks; }
        onLinks = value;
        return layer;
    };
    
    /**
     * A function that returns the link elements for the layer 
     * @method links
     * @chainable
     */
    layer.links = function(){
        return onLinks();
    };

    /**
     * A Getter/Setter for the onLatLngToXy method
     * @method onLatLngToXy
     * @param {Function} value - The method describing how to convert lat/lng coordiantes to xy coordiates
     * @chainable
     */
    layer.onLatLngToXy = function(value){
        if(!arguments.length){ return onLatLngToXy; }
        onLatLngToXy = value;
        return layer;
    };

    /**
     * A method that converts lat/lng coordiantes to xy coordinates
     * @method onLatLngToXy
     * @return {Array} xy - An array in the format [{x},{y}]
     */
    layer.latLngToXy = function(){
        return onLatLngToXy.apply(layer, arguments);
    };
    
    /**
     * A Getter/Setter for the onXyToLatLng method
     * @method onXyToLatLng
     * @param {Function} value - The method describing how to convert xy coordiantes to lat/lng coordiantes 
     * @chainable
     */
    layer.onXyToLatLng = function(value){
        if(!arguments.length){ return onXyToLatLng; }
        onXyToLatLng = value;
        return layer;
    };

    /**
     * A method that converts xy coordiantes to lat/lng coordinates
     * @method xyToLatLng
     * @return {Array} latlng - An array in the format [{lat},{lng}]
     */
    layer.xyToLatLng = function(){
        return onXyToLatLng.apply(layer, arguments);
    };

    /**
     * A method that takes either an link object or a endpoint object and returns a boundingClientRect
     * a boundingClientRect
     * @method getBoundingClientRect
     * @return {Object} boundingClientRect - An object containing values in catesian space for top, left, right, bottom, height,
     * and width 
     */
    layer.getBoundingClientRect = function(params){
        var data     = params.data;
        var eventObj = params.event;

        var bb;
        //if an event obj exists just determine the bounding box from the target
        if(eventObj){
            bbClientRect = eventObj.target.getBoundingClientRect();
            bb = {
                top: bbClientRect.top,
                bottom: bbClientRect.bottom,
                right: bbClientRect.right,
                left: bbClientRect.left,
                width: bbClientRect.width,
                height: bbClientRect.height
            };
        }
        //otherwise if the data.path key exists it's a link
        else if(data.path){
            bb = layer.linkBoundingClientRect({ link: data });
        }
        //otherwise it must be a endpoint
        else if(data.lat !== undefined && data.lon !== undefined) {
            bb = layer.endpointBoundingClientRect({ endpoint: data });
        }
        else {
            console.error("Error! Must pass an link, endpoint object, or an event object to determine the bounding box!");
            return;
        }

        return bb;
    };

    /**
     * Takes a client bounding box for a network topology element and subtracts the container bounding box
     * values from it. This is used to correct bounding box values that are relative to the container instead
     * of absolute coordinates on the page, such as those returned for cesium elements.
     * @method subtractContainerBoundingClientRect
     * @param {Object} params - The parameter object 
     * @param {Object} params.bb - The bounding box of the netork topology element
     * @chainable
     */
    layer.subtractContainerBoundingClientRect = function(params){
        if(!params.bb){
            console.error("Must pass in the bounding box object");
            return;
        }
        var bb = params.bb;

        var containerBB = d3.select('#'+layer.map().containerId()).node().getBoundingClientRect();
        //subtract the container's offset
        _.forEach(['left','right','top','bottom'], function(key){
            bb[key] = bb[key] + containerBB[key];
        });

        return bb;
    };

    /**
     * A Getter/Setter for the onBoundingBoxClientRect method
     * @method onBoundingBoxClientRect
     * @param {Function} value - The method describing what to do when the topology object is set
     * @chainable
     */
    layer.onLinkBoundingClientRect = function(value){
        if(!arguments.length){ return onLinkBoundingClientRect; }
        onLinkBoundingClientRect = value;
        return layer;
    };
    
    /**
     * A method that takes either a link object or an endpoint object and returns a boundingClientRect
     * a boundingClientRect
     * @method boundingClientRect
     * @return {Object} boundingClientRect - An object containing values in catesian space (the Dom window's cartesian space
     * for top, left, right, bottom, height, and width 
     */
    layer.linkBoundingClientRect = function(params){
        if(!params.link){
            console.error("Must pass in the link data object");
            return;
        }

        return onLinkBoundingClientRect.apply(layer, arguments);
    };
    
    /**
     * A Getter/Setter for the onTopology method
     * @method onTopology
     * @param {Function} value - The method describing what to do when the topology object is set 
     * @chainable
     */
    layer.onTopology = function(value){
        if(!arguments.length){ return onTopology; }
        onTopology = value;
        return layer;
    };

    /**
     * A method that converts xy coordiantes to lat/lng coordinates
     * @method xyToLatLng
     * @return {Array} latlng - An array in the format [{lat},{lng}]
     * @chainable
     * @return {[Topology](Topology.html) topology - Returns a Topology object
     */
    layer.topology = function(value, params){
        if(!arguments.length){ return topology; }
        //convert to a Topology Object if it's not one already
        if(value.__factory__ === undefined || value.__factory__ !== 'Topology'){
            topology = Topology(value, offsets);
        }else {
            topology = value;
        }
        onTopology.call(layer, topology, params);

        layer.update();

        return layer;
    };

    /**
     * Getter/Setter of the onLineWidth function
     * @method onLineWidth
     * @param {Function} value - Method that defines how to compute line width for the map (Generally line width is relative to zoom level)
     * @chainable
     */
    layer.onLineWidth = function(value){
        if(!arguments.length){ return onLineWidth; }
        onLineWidth = value;
        return layer;
    };

    /**
     * Getter/Setter the lineWidth of lines representing links on the layer
     * @method lineWidth
     * @param  {Integer} value - The new value of the lineWidth
     * @return {Integer} lineWidth - Returns the current lineWidth
     * @chainable
     */
    layer.lineWidth = function(value){
        if(arguments.length === 0){ return lineWidth; }
        
        lineWidth = value;
        onLineWidth.call(layer, lineWidth);

        return layer;
    };

    /**
     * Getter/Setter the lineColor of lines representing links on the layer
     * @method lineColor
     * @param  {String} value - The new value of the lineColor as a css color string
     * @return {String} lineColor - Returns the current lineColor
     * @chainable
     */
    layer.lineColor = function(value){
        if(arguments.length === 0){ return lineColor; }
       
        lineColor = value;
        
        return layer;
    };

    /**
     * A method that takes a [DataSource](DataSource.html) source object and restrieves a map topology
     * @method loadMap
     * @chainable
     */
    layer.loadMap = function(source){
        var req = ds({
            source: source,
            onSuccess: function(params){
                var d = params.data.results[0];
                if(!d){
                    console.error('No map topology returned for '+layer.name()+' ',req);
                    return;
                }
                layer.topology(d);
            }
        });
        return layer;
    };

    //extend update function to include updating the info div
    var _superUpdate = layer.update;
    layer.update = function(){
        //do inherited update
        var success = _superUpdate.apply(layer, arguments);
        
        //now check to see if we need to update our infoDiv
        if (layer.map().infoDiv().pin()) {
            if(!layer.topology()){ return; }
            var links = _.find(layer.topology().data().links, function(a) {
                return a.selected;
            });
            if (links) {
                layer.updateLinkInfo({ link: links });
            }
        }
        return success;
    };
    // initialize event handlers if there are any
    if(params.onEndpointEvent){
        layer.onEndpointEvent(params.onEndpointEvent);
    }
    if(params.onLinkEvent){
        layer.onLinkEvent(params.onLinkEvent);
    }
    if(params.max){
        layer.max(params.max);
    }
    if(params.min){
	layer.min(params.min);
    }

    layer.lineColor(params.lineColor || '#262F36');

    return layer; 
};
module.exports = NetworkLayer;

},{"../util/DataSource.js":18,"../util/Enums":19,"../util/Functions.js":20,"../util/Topology.js":23,"./BaseLayer":11,"d3":2,"d3-geo-projection":1,"lodash":3}],16:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var d3                 = require('d3');
var NetworkLayer       = require('./NetworkLayer');
var ARROW              = require('../util/Enums').ARROW;
var _                  = require('lodash');
/** 
* Renders a topology object as d3 lines and circles into the provided svg element
```
singleTubeLayer = SingleTubeLayer({
        name: layer.name(),
        svg:  svg.append("g")
    })
    //--- let d3 do the projecting for this example
    .onLatLngToXy(layer.onLatLngToXy())
    .onLinkEvent('mouseover', function(d){
        d3.select(d.event.target).style("cursor", "pointer");
    })
    .onLinkEvent('mouseout', function(d){
        d3.select(d.event.target).style("cursor", "default");
    })
    .onEndpointEvent('mouseover', function(d){
        d3.select(d.event.target).style("cursor", "pointer");
    })
    .onEndpointEvent('mouseout', function(d){
        d3.select(d.event.target).style("cursor", "default");
    });
```
* @class SingleTubeLayer
* @extends BaseLayer
* @constructor SingleTubeLayer
* @static 
* @property {Object} params - The parameter object for the Layer
* @property {d3.selection(svg):Required} params.svg - A d3 selection of the svg element to render the editor layer into 
*/

var SingleTubeLayer = function(params){
    params.lineColor = params.lineColor || '#ddd';
    var layer = NetworkLayer(params);
    if(!params.svg){
        console.error('Must pass in a svg element to render into');
        return;
    }
    var tooltip;
    if(params.tooltip){
        tooltip = params.tooltip;
    }
    //add an id and class to the layer
    var svg = params.svg;
    svg.attr('id', layer.layerId());
    svg.attr('class', 'single-tube');

    //define how to toggle the layer
    layer.onToggle(function(active){
        svg.transition().style('opacity', (active) ? 1 : 0);
    });


    var line = d3.svg.line()
    .interpolate("bundle")
    .x(function(d) {
            return layer.latLngToXy([d.lat, d.lon])[0];
        })
    .y(function(d) {
            return layer.latLngToXy([d.lat, d.lon])[1];
        });
    
    //set default event handlers for links if none were passed in
    layer.onLinkEvent(params.onLinkEvent || {
        click: function(d){
            layer.showLinkInfo({
                link: d.data,
                pin: true
            });
            d3.event.stopPropagation();
        },
        mouseover: function(d){ 
            if(!tooltip.show){
                d3.select(d.event.target).style("cursor","default"); 
                return;
            }
            layer.showLinkInfo({
    		link: d.data,
	    	pos: {
		        page_x: d.event.pageX,
		        page_y: d.event.pageY
		    }   
            });
            d3.select(d.event.target).style("cursor", "pointer");
        },
        mouseout: function(d){
            layer.map().infoDiv().hide();
            d3.select(d.event.target).style("cursor", "default");
        }
    });

    //set default event handlers for endpoints if none were passed in
    layer.onEndpointEvent(params.onEndpointEvent || {
        click: function(d){
            layer.showEndpointInfo({
                endpoint: d.data,
                pin: true
            });
            d3.event.stopPropagation();
        },
        mouseover: function(d){
            layer.showEndpointInfo({
                endpoint: d.data
            });
            d3.select(d.event.target).style("cursor", "pointer");
        },
        mouseout: function(d){
            layer.map().infoDiv().hide();
            d3.select(d.event.target).style("cursor", "default");
        }
    });

    /**
     * Returns the d3 svg selection
     * @method svg
     * @return {d3.selection(svg)} params.svg - A d3 selection of the svg element
     */
    layer.svg = function(){
        return svg
    };

    //define how to remove the layer
    layer.onRemove(function(){
        svg.selectAll("*").remove();
    });

    //define how to retrieve the link elements
    layer.onLinks(function(){
        return svg.selectAll("g.adjacency");
    });

    //define how to retrieve the endpoint elements
    layer.onEndpoints(function(){
        return svg.selectAll("g.pop");
    }); 
   
    //helper function to get the angle of the directional arrow 
    function getAngle(pointA,pointB) {
        var dy = pointB.y - pointA.y
        var dx = pointB.x - pointA.x;
        // range (-PI, PI]
        var theta = Math.atan2(dy, dx); 
        // rads to degs, range (-180, 180]
        theta *= 180 / Math.PI; 
        //if (theta < 0) theta = 360 + theta; // range [0, 360)
        return theta;
    }

    //this function sets the correct translation of the directional arrow at the center of
    //the circuitShadow path under the same parent group.
    function arrowTranslate(d){
        if(d.arrow === undefined || d.arrow === ARROW.NONE ){
            return;
        }
    
        //make the scale of the arrow a function of the line width
        var arrow_scale;
        if(layer.lineWidth() <=3){
            arrow_scale = 0;
        }else if(layer.lineWidth() <= 4){
            arrow_scale = 2;
        }else if(layer.lineWidth() <= 6){
            arrow_scale = 3;
        }else{
            arrow_scale = 4;
        }

        var path = d3.select(this.parentNode).select("path").filter(".adjacencyShadow")[0][0];
        var p  = path.getPointAtLength(path.getTotalLength()/2);

        //look after the midpoint in the path (away from A) to get our angle
        var p2 = path.getPointAtLength((path.getTotalLength()/2)+12);
        //if Z is passing more traffic, look before the midpoint to get the angle away from Z
        if(d.arrow == ARROW.ZA){
            p2 = path.getPointAtLength((path.getTotalLength()/2)-12);
        }
        
        var angle = getAngle(p,p2);

        //this works b/c it we know the ratio of the height/width of the arrow is 2 to 1
        //initially it's rendered with the top left corner of its bounding box centered on p
        //so we need to shift it left and up the arrows width and height respectively
        p.y -= 1 * arrow_scale;
        p.x -= 2 * arrow_scale;

        return "translate(" + p.x+','+p.y+ ") scale("+arrow_scale+") rotate("+angle+",2,1)"
    }

    //define how to update the layers components
    layer.onUpdate(function(){
        if(!layer.topology()){
            console.warn('No topology set, skipping update for '+layer.name());
            return;
        }
        //--- Render Links
        var links = layer.links()
            .data(layer.topology().data().links, function(d){
                    return d.linkId;
            });

        //--- ENTER -- add any new links
        var linksEnter = links.enter()
            .append("g")
            .attr("id", function(d) { return d.linkId })
            .attr("class","adjacency");

        //add a shadow path for new adjacencys 
        linksEnter.append("path")
        .attr("d",function(d){
            return line(d.path);
        })
        //.classed('adjacencyShadow adjacencyHighlight', true)
            .attr("class","adjacencyShadow")
            .call(function(selection){
                _.forEach(layer.onLinkEvent(), function(callback, evt){
                    selection.on(evt, function(d){
                        callback({
                            event: d3.event,
                            data:  d
                        });
                    });
                });
            });
	
        //add a highlight path for new links
        linksEnter.append("path")
            .attr("d",function(d){return line(d.path)})
            .attr("class","adjacencyHighlight")
            .call(function(selection){
                _.forEach(layer.onLinkEvent(), function(callback, evt){
                    selection.on(evt, function(d){
                        callback({
                            event: d3.event,
                            data:  d
                        });
                    });
                });
            });
	
        //add directional indicator by appending yet another path to the g
        linksEnter.append("path")
            .attr("class","arrow")
            .attr("d","M.5,1 L0,2 L3,1 L0,0 Z")
            .attr("transform", arrowTranslate);
	
        //--- UPDATE -- update the paths of any existing links
	
        //update shadow path
        links.select(".adjacencyShadow")
            .attr("d",function(d){return line(d.path)})
            .style('stroke-width', function(d){
		var strokeWidth = d.lineColor === undefined ? (layer.lineWidth()-1) : (layer.lineWidth());
                if (d.selected) {
                    return (strokeWidth * 2)+'px';
                } else {
                    return strokeWidth+'px';
                }
            })
            .style('stroke', function(d){
                return d.lineColor === undefined ? d3.rgb(layer.lineColor()).darker() : d3.rgb(d.lineColor).darker();
            });
        //update highlight path
        links.select(".adjacencyHighlight")
            .attr("d",function(d){return line(d.path)})
            .style('stroke-width', function(d){
                var strokeWidth = d.lineColor === undefined ? (layer.lineWidth()-2) : (layer.lineWidth()-1);
                if (d.selected) {
                    return (strokeWidth * 2)+'px';
                } else {
                    return strokeWidth+'px';
                }
            })
            .style('stroke', function(d){
                return d.lineColor === undefined ? d3.rgb(layer.lineColor()) : d3.rgb(d.lineColor);
            });
        
        //update arrow path
        links.select('.arrow')
            .attr("transform",arrowTranslate);
	
        //--- EXIT -- remove any links we no longer need
        links.exit().remove();
        
        //--- Render Endpointss
        var endpoints = layer.endpoints()
            .data(layer.topology().data().endpoints, function(d){
                    return d.endpointId;
            });

        //--- ENTER -- add any new endpoints
        var endpointsEnter = endpoints.enter()
            .append("g")
            .attr("id", function(d) { return d.endpointId; })
            .attr("class","pop");        

        endpointsEnter.append("circle")
        .attr("cx", function (d) {
                return layer.latLngToXy([d.lat, d.lon])[0]; 
            })
        .attr("cy", function (d) {
                return layer.latLngToXy([d.lat, d.lon])[1];
            })
            .attr("r", "3px")
            .call(function(selection){
                _.forEach(layer.onEndpointEvent(), function(callback, evt){
                    selection.on(evt, function(d){
                        callback({
                            event: d3.event,
                            data:  d
                        });
                    });
                });
            });

        //--- UPDATE -- update any existing endpointss 
        endpoints.select('circle')
        .attr("cx", function (d) {
                return layer.latLngToXy([d.lat, d.lon])[0]; 
            })
        .attr("cy", function (d) {
                return layer.latLngToXy([d.lat, d.lon])[1];
            })
            .attr("r",function(){ 
                var r = 0;
                if(layer.lineWidth() > 3){
                    r = layer.lineWidth()-1.5;
                }
                return r+"px"
            });
        
        //--- EXIT -- remove any endpoint we no longer need
        endpoints.exit().remove();
	
	if(!this.isInitDone()){
	    console.log("Init Complete!");
	    this.isInitDone(true);
	    this.initComplete();
	}

        return true;
    });

    return layer;
};
module.exports = SingleTubeLayer;

},{"../util/Enums":19,"./NetworkLayer":15,"d3":2,"lodash":3}],17:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var d3                  = require('d3');
var ds                  = require('../util/DataSource.js');
var _                   = require('lodash');
var SingleTubeLayer     = require('./SingleTubeLayer');
var NetworkLayer        = require('./NetworkLayer');

/**
* Modifies the SingleTubeLayer providing additional styling, pulling data on an interval, and coloring links 
* accordingly.
```
var layer = TrafficLayer({
    svg: bg,
    active: layer.active,
    name: layer.name,
    onLatLngToXy: map.onLatLngToXy(),
    onLinkEvent: layer.onLinkEvent,
    onEndpointEvent: layer.onEndpointEvent
}).lineWidth(map.lineWidth())
    .loadMap(layer.mapSource);
```
* @class TrafficLayer
* @extends NetworkLayer
* @constructor TrafficLayer
* @static
* @property {Object} params - The parameter object for the Layer
* @param {d3.selection(svg):Required} params.svg - A d3 selection of the svg element to render the editor layer into
* @param {Integer} params.dataIntervalSeconds - The amount of seconds to pull the data interval on
*/
var TrafficLayer = function(params){
    var layer = NetworkLayer(params);

    if(!params.svg){
        console.error('Must pass in an svg element to render into');
        return;
    }
    var svg = params.svg;

    /** 
     * The underlying singleTubeLayer we are going to style 
     * @property {SingleTubeLayer} singleTubeLayer
     * @default 3
     * @private 
     */
    var singleTubeLayer;

    var selectedId;

    //define how to toggle the layer
    layer.onToggle(function(active){
        singleTubeLayer.toggle(active);
    });

    //define what to do when a topology is set
    layer.onTopology(function(topology){
        singleTubeLayer.topology(topology);
        
        //start interval
        //layer.setDataInterval();
        return layer;
    });

    // adjust arrow scale when the lineWidth is adjusted 
    layer.onLineWidth(function(lineWidth){
        singleTubeLayer.lineWidth(lineWidth);
    });

    /**
     * Returns the d3 svg selection
     * @method svg
     * @return {d3.selection(svg)} params.svg - A d3 selection of the svg element
     */
    layer.svg = function(value){
        return svg;
    };

    //define how to update the layer components
    layer.onUpdate(function(){
        if(!singleTubeLayer){ return; }
        if(!singleTubeLayer.svg()){ return; }
        if(!singleTubeLayer.update()){
            return;
        }

        //now grab the singleTube layer components and add traffic layer styling to them
        var adjs = singleTubeLayer.links(); 

        //--- update arrow color 
        adjs.selectAll(".arrow")
            .attr("style",function(d){
                return "fill: "+d3.rgb("#ffffff")+";opacity: .75; stroke: "+d3.rgb(d.lineColor).darker()
            });

        //--- update circuit width and color
        adjs.select(".adjacencyHighlight")
            .style('stroke-dasharray', function(d){
                return d.lineColor === undefined ? [1,(layer.lineWidth()+2)] : '';
            });

        adjs.select(".adjacencyShadow")
            .style('stroke-dasharray', function(d){
                return d.lineColor === undefined ? [1,(layer.lineWidth()+2)] : '';
            });
    });

    //define what to do when the layer is initialized
    layer.onInit(function(source){
        singleTubeLayer = SingleTubeLayer({
                name: layer.name(),
                svg:  svg.append("g"),
                map: layer.map(),
                active: params.active,
                lineWidth: layer.lineWidth(),
                onLatLngToXy: layer.onLatLngToXy(),
                offsets: params.offsets
            });

            if(layer.topology()){
                singleTubeLayer.topology(layer.topology());
            }

        return layer;
    });

    //extend the onLinkEvent function so that it also calls the singleTubeLayer's onLinkEvent
    _superOnLinkEvent = layer.onLinkEvent;
    layer.onLinkEvent = function(){
        _superOnLinkEvent.apply(layer, arguments);
        return singleTubeLayer.onLinkEvent.apply(layer, arguments);
    };
    
    //extend the onEndpointEvent function so that it also calls the singleTubeLayer's onEndpointEvent
    _superOnEndpointEvent = layer.onEndpointEvent;
    layer.onEndpointEvent = function(){
        _superOnEndpointEvent.apply(layer, arguments);
        return singleTubeLayer.onEndpointEvent.apply(layer, arguments);
    };

    //define how to remove the layer components
    layer.onRemove(function(){
        svg.selectAll("*").remove();
    });

    //initialize the layer
    layer.init();

    return layer; 
};
module.exports = TrafficLayer;

},{"../util/DataSource.js":18,"./NetworkLayer":15,"./SingleTubeLayer":16,"d3":2,"lodash":3}],18:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var d3           = require('d3');
var urlFormatter = require('./UrlFormatter.js');

/**
* ```
DataSourceArray({
    source: [{
        type: 'grnocProxy',
        config: {
            urn: 'urn:publicid:IDN+grnoc.iu.edu:GlobalNOC:CDS:2:Node',
            params: {
                method: 'get_nodes',
                node_id: 1172 
            }
        }
    }...],
   //returns data in same order sources were passed in
    onSuccess: function(params){
        for(var i=0; i<params.length; i++){
            console.log('do something with returned data: '+params[i].data);
        }
    },
   //returns errors in same order sources were passed in
   //any source failing treats the entire batch request as an error
    onError: function(params){
        for(var i=0; i<params.length; i++){
            console.log('do something with error from, '+params[i].url+': '+params[i].error_text);
        }
    }
});```
* @class DataSourceArray
* @constructor DataSourceArray
* @static 
* @private
* @param {Object} params - The configuration object for the editor
* @param {String|Array} params.source - An array of DataSource params.source parameters
* @param {function} params.onSuccess - The callback to be executed when the source successfully returns
* @param {function} params.onError - Optional callback to be executed when the source receives an error. The error is just logged to the console if no 
* callback is provided
*/

var DataSourceArray = function(params){
    var sources = params.source;

    var result_hash = {};
    var error_hash  = {};

    //helper function to return results in the same order as the sources were given
    function _orderResults(hash){
        var array = [];
        var sorted_keys = Object.keys(hash).sort(function(a, b){return a-b});
        for(var i=0; i < sorted_keys.length; i++){
            var index = sorted_keys[i];
            hash[index].index = index;
            array.push(hash[index]); 
        }

        return array;
    }

    //helper function to call when any source returns
    function _onResponse(){
        //if we haven't gotten responses from all the datasources yet return
        if( (Object.keys(result_hash).length + Object.keys(error_hash).length) !== sources.length){
            return; 
        }
        //if any request failed treat the whole batch as a failure 
        if(Object.keys(error_hash).length > 0){
            if(params.onError){ 
                params.onError(_orderResults(error_hash));
            }
            return;
        }
        //all requests have returned and all were a success, call the onSuccess function
        params.onSuccess(_orderResults(result_hash));
    }

    //make a request for each source
    var results = [];
    for(var i=0; i<sources.length; i++){
        var source = sources[i];
        results.push(DataSource({
            source: source,
            onSuccess: function(index){
                return function(resp){
                    result_hash[index] = resp;
                    _onResponse();
                };
            }(i),
            onError: function(index){
                return function(resp){
                    console.error('Error retrieving data from url, '+resp.url+': '+resp.error_text);
                    error_hash[index] = resp;
                    _onResponse();
                };
            }(i)
        }));
    }

    return results;
};

/**
* ```
DataSource({
    source: {
        type: 'grnocProxy',
        config: {
            urn: 'urn:publicid:IDN+grnoc.iu.edu:GlobalNOC:CDS:2:Node',
            params: {
                method: 'get_nodes',
                node_id: 1172 
            }
        }
    },
    onSuccess: function(params){
        console.log('do something with returned data: 'params.data);
    },
    onError: function(params){
        console.log('hanlde the returned error, '+resp.url+': '+resp.error_text);
    }
});```
* @class DataSource
* @constructor DataSource
* @static 
* @param {Object} params - The configuration object for the editor
* @param {String|Object|Array} params.source - The source of the data to be retrieved can be a url string, a source object, or an array of source objects
* @param {String} params.source.type - If source is an object or an array of objects, the type describes the type of source object it is. Can either be [grnocProxy]() or [url]()
* @param {Object} params.source.config - If source is an object or an array of objects, the config provides the necessary information needed to craft the url.
* See (UrlFormatter)[] for the config options needed by the source.type you wish to use
* @param {String} params.source.respType='json' - The format of data you expect from the response, can be 'xml' or 'json'
* @param {function} params.onSuccess - The callback to be executed when the source successfully returns
* @param {function} params.onError - Optional callback to be executed when the source receives an error. The error is just logged to the console if no 
* callback is provided
*/
var DataSource = function(params){
    if(!params.source){
        console.error("Must pass in a source");
        return;
    }
    if(!params.noRequest && !params.onSuccess){
        console.error("Must pass in an onSuccess callback");
        return;
    }

    //default respType to json
    var respType = 'json';

    //format the url string if an object was passed in for the url
    var url_str;
    if(params.source.constructor === Array){
        return DataSourceArray(params);
    }
    else if(params.source.constructor === Object){
        var formatter = urlFormatter.getFormatter(params.source);
        if(!formatter){ return; } 
        url_str = formatter(params.source.config); 

        //let user manually override respType
        if(params.source.respType){
            respType = params.source.respType;
        }
    }
    //otherwise jsut assume they passed in a raw urlString
    else {
        url_str = params.source;
    }

    var reqCallback = function(error, d) {
        if(error){
            if(params.onError){
                return params.onError({ url: url_str, error_text: error.statusText });
            }
            console.error('Error retrieving data from url, '+url_str+': '+error.statusText);
            return;
        }

        var results;
        if(respType == 'json'){
            try {
                results = JSON.parse(d.response);
            } catch(e){
                error = { statusText: e.stack };
            }
            if(error){
                if(params.onError){
                    return params.onError({ url: url_str, error_text: error.statusText });
                }
                console.error('Error retrieving data from url, '+url_str+': '+error.statusText);
                return;
            }
        }else if(respType == 'xml'){
            results = d.responseXML;
        }
        return params.onSuccess({ data: results });
    };

    // To prevent an HTTP 414 error (GET request too long), we switch to a POST if the 
    // request is  close to over 2000 characters.  This is the GET limit on Internet Explorer
    var query_str;
    var conn_type = 'GET';
    if (url_str.length > 1500) {
        conn_type = 'POST';
        query_str = url_str.split('?')[1];
        url_str   = url_str.split('?')[0];
    }


    var mime_type;
    if(respType == 'json'){
        mime_type = 'application/json';
    }
    else if(respType == 'xml'){
        mime_type = 'application/xml';
    } 
    else {
        console.error("Do not know how to handle response type: "+respType);
        return;
    }

    //make the request
    if(!params.noRequest){
        if(conn_type == 'GET'){
            d3.xhr(url_str, mime_type)
                .get(reqCallback)
        }else {
            //d3.xhr(url_str, mime_type, reqCallback)
            d3.xhr(url_str, mime_type)
                .header("Content-Type","application/x-www-form-urlencoded")
                .post(query_str, reqCallback);
        }
    }

    return {
        url: url_str,
        queryStr: query_str,
        connType: conn_type,
        mimeType: mime_type
    };
};
module.exports = DataSource;

},{"./UrlFormatter.js":24,"d3":2}],19:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var Enums = {
    ARROW: {
        NONE: 0,
        AZ:   1,
        ZA:   2
    },
    MAP_TYPES: {
        'CESIUM': 'cesium',
        'EDITOR': 'editor',
        'GOOGLE': 'google',
        'MINI':   'mini',
        'LEAFLET': 'leaflet'
    },
    LAYER_TYPES: {
        'KML':     'kml',
        'GEOJSON': 'geoJson',
        'NETWORK': 'network',
        'TILE':    'tile',
	'TILE_WMS': 'tileWMS'
    }
};
module.exports = Enums;

},{}],20:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/



/**
* An object containing helper functions
* ```
* Functions.wrap(d3.select('#my_wrapper').node(), d3.select('#my_content').node());
* ```
* @class MapBackgrounds
* @static 
*/
var Functions = {
    /**
     * A method that wraps an HTMLElement around each element in an HTMLElement array.
     * @method onInit
     * @param {DOM Node} wrapper - The DOM Node to wrap around an element(s) 
     * @param {DOM Node|Array} elms - The elements to be wrapped 
     */
    wrap: function(wrapper, elms) {
        // Convert `elms` to an array, if necessary.
        if (!elms.length) elms = [elms];
        
        // Loops backwards to prevent having to clone the wrapper on the
        // first element (see `child` below).
        for (var i = elms.length - 1; i >= 0; i--) {
                console.log('here');
            var child = (i > 0) ? wrapper.cloneNode(true) : wrapper;
            var el    = elms[i];
            
            // Cache the current parent and sibling.
            var parent  = el.parentNode;
            var sibling = el.nextSibling;
            
            // Wrap the element (is automatically removed from its current
            // parent).
            child.appendChild(el);
            
            // If the element had a sibling, insert the wrapper before
            // the sibling to maintain the HTML structure; otherwise, just
            // append it to the parent.
            if (sibling) {
                parent.insertBefore(child, sibling);
            } else {
                parent.appendChild(child);
            }
        }
    },

    /**
     * A method that takes a string, optionally with appended SI prefix (k, M, G, etc.) and turns it into a number.
     * @method siToNumber
     * @param {string} str - string w/ SI size to convert to a number
     */
    siToNumber: function(str) {
        //must have at least 1 number (may be floating point), 0 or more spaces, and an optional si_prefix
        //of k, m, g or t case insensitive
        var match = str.toString()
            .replace(/,/g,'')
            .match(/^ *(-?\d+(?:\.\d+)?) *(k|m|g|t|p)? *$/i);

        // fails if it did not match our regex
        if (!match) { return null; }

        //otherwise pull out our value and si_prefix
        var val       = Number(match[1]);
        var si_prefix = match[2];

        //if the user did included an si prefix, adjust val
        if (si_prefix) {
            //convert the value to appropriate number given the si_prefix
            switch (si_prefix.toLowerCase()) {
                case 'k':
                    val *= 1e3;
                    break;
                case 'm':
                    val *= 1e6;
                    break;
                case 'g':
                    val *= 1e9;
                    break;
                case 't':
                    val *= 1e12;
                    break;
                case 'p':
                    val *= 1e15;
                    break;
                default:
                    console.error('Do not know how to convert maxBps to bits for value of ' + str);
                    return; 
            }
        }

        return val;
    }
};

module.exports = Functions;

},{}],21:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var _  = require('lodash');

//hlper function to get bounding box for an array of xy coordiantes
function _getBoundingBoxXy(params){
    //initialize values to be the first data point
    var min_x = params.xy[0][0];
    var max_x = params.xy[0][0];
    var min_y = params.xy[0][1];
    var max_y = params.xy[0][1];

    _.forEach(params.xy, function(xy){
        if(min_x > xy[0]){
            min_x = xy[0];
        } 
        if(max_x < xy[0]){
            max_x = xy[0];
        } 
        if(min_y > xy[1]){
            min_y = xy[1];
        } 
        if(max_y < xy[1]){
            max_y = xy[1];
        } 
    });

    return {
        left: min_x,
        right: max_x,
        top: min_y,
        bottom: max_y,
        width: max_x - min_x,
        height: max_y - min_y
    };
};

//hlper function to get bounding box for an array of latlng coordiantes
function _getBoundingBoxLatLng(params){
    //#todo don't need it yet
};

//fixes absolute position when scrolling see...
// http://stackoverflow.com/questions/17656623/position-absolute-scrolling
function absolutePosition(el) {
    var
        found,
        left = 0,
        top = 0,
        width = 0,
        height = 0,
        offsetBase = absolutePosition.offsetBase;
    if (!offsetBase && document.body) {
        offsetBase = absolutePosition.offsetBase = document.createElement('div');
        offsetBase.style.cssText = 'position:absolute;left:0;top:0';
        document.body.appendChild(offsetBase);
    }
    if (el && el.ownerDocument === document && 'getBoundingClientRect' in el && offsetBase) {
        var boundingRect = el.getBoundingClientRect();
        var baseRect = offsetBase.getBoundingClientRect();
        found = true;
        left = boundingRect.left - baseRect.left;
        top = boundingRect.top - baseRect.top;
        width = boundingRect.right - boundingRect.left;
        height = boundingRect.bottom - boundingRect.top;
    }
    return {
        found: found,
        left: left,
        top: top,
        width: width,
        height: height,
        right: left + width,
        bottom: top + height
    };
}

/**
* An object containing geometry related helper functions
* ```
* var bb = Geometry.getBoundingBox({ xy: xy });
* ```
* @class Geometry 
* @static 
*/
var Geometry = {
    /** 
     * Returns a bounding box given an array cartesian or latitude/longitude coordiates 
     * @method getBoundingBox
     * @param {Object} params - The method parameters
     * @param {Array} params.xy - An array of xy coordinates
     * @param {Array} params.latlng - An array of lat/lng  coordinates
     * @private 
     */
    getBoundingBox: function(params){
        var bb;
        if(params.xy){
            bb = _getBoundingBoxXy(params);
        }
        else if(params.latlng){
            bb = _getBoundingBoxLatLng(params);
        }
        else {
            console.error('Must pass in xy array or latlng array');
        }
        return bb;
    },
    /** 
     * Gets the xy coordinates of relative to a point on the outter edget of a bounding box or a DOM element 
     * @method align
     * @param {Object} params - The method parameters
     * @param {DOM Element|Optional} params.node - The DOM node to derive a bounding box from
     * @param {DOM Element|Optional} params.bb - The bounding box to retrieve a point from 
     * @param {Integer|Optional} params.height - The height of the element you're aligning to the node or bounding box
     * @param {Integer|Optional} params.width - The width of the element you're aligning to the node or bounding box
     * @param {String} params.position - The point on the bounding box to retrieve (c, ls, tc, rc, bc, bl, tl, tr, br)
     * @param {String|Optional} params.anchor - The point on the element you're aligning to the node or bounding box to anchor to 
     * @private 
     */
    align: function(params){
        if((!params.node && !params.bb) || !params.position){
            console.error("Must pass in a node|bb (bounding box) and position to align the dialog!");
            return;
        }

        var bb; 
        if(params.node){
            //bb = params.node.getBoundingClientRect();
            bb = absolutePosition(params.node);
        }else {
            bb = params.bb;
        }

        //calculate the center points 
        var xc = bb.left + (bb.width / 2);
        var yc = bb.top  + (bb.height / 2);

        var xy = [];
        switch(params.position){
            case 'c':
                xy[0] = xc;
                xy[1] = yc;
                break;
            case 'lc':
                xy[0] = bb.left;
                xy[1] = yc;
                break;
            case 'tc':
                xy[0] = xc;
                xy[1] = bb.top;
                break;
            case 'rc':
                xy[0] = bb.right;
                xy[1] = yc;
                break;
            case 'bc':
                xy[0] = xc;
                xy[1] = bb.bottom;
                break;
            case 'bl':
                xy[0] = bb.left;
                xy[1] = bb.bottom;
                break;
            case 'tl':
                xy[0] = bb.left;
                xy[1] = bb.top;
                break;
            case 'tr':
                xy[0] = bb.right;
                xy[1] = bb.top;
                break;
            case 'br':
                xy[0] = bb.right;
                xy[1] = bb.bottom;
                break;
            default:
                console.error('Do not know how to align to: '+params.position);
        }

        if(params.anchor){
            switch(params.anchor){
                case 'lc':
                    xy[1] -= (params.height / 2);
                    break;
                case 'tc':
                    xy[0] -= (params.width / 2);
                    break;
                case 'rc':
                    xy[0] -= params.width;
                    xy[1] -= (params.height / 2);
                    break;
                case 'bc':
                    xy[0] -= (params.width / 2);
                    xy[1] -= params.height
                    break;
                case 'bl':
                    console.log('height='+params.height);
                    xy[1] -= params.height
                    break;
                case 'tl':
                    //this is the default
                    break;
                case 'tr':
                    xy[0] -= params.width;
                    break;
                case 'br':
                    xy[0] -= params.width
                    xy[1] -= params.height;
                    break;
                default:
                    console.error('Do not know how to align to: '+params.position);
            }
        }
        
        console.debug(xy);

        return xy;
    }
};
module.exports = Geometry;

},{"lodash":3}],22:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
* ```
Interval(func, 60);```
* @class Interval
* @constructor Interval
* @static 
* @private
* @param {Object} params - The initialization parameters 
* @param {func} params.func- The function to call on an interval
* @param {integer} params.intervalSeconds - The seconds in between calling func
*/
var _ = require('lodash');
var Interval = function(params){
    if(!params.func){
        console.error("Must pass in func!");
        return;
    }
    if(!params.intervalSeconds){
        console.error("Must pass in intervalSeconds!");
        return;
    }

    var args;
    var active          = false;
    var intervalId      = _.uniqueId('interval_');
    var func            = params.func;
    //convert to milliseconds
    var intervalSeconds = params.intervalSeconds * 1000;

    var intervalFunc = function(){
        //apply new arguments to function if called again
        args = arguments;

        //don't call function again if we're already running
        if(active){ return true; }

        //set our state to active
        active = true;

        //define a loop function to keep
        var loop = function(){
            //short circuit execution if we toggled off after the timeout was set
            if(!active){ return; }

            func.apply(intervalFunc, args);
            setTimeout(loop, intervalSeconds);
        };
        loop.apply(intervalFunc, args);
    };

    /** 
     * Getter/Setter for intervalSeconds 
     * @method intervalSeconds
     * @param {Integer|Optional} value - The new value for intervalSeconds 
     */
    intervalFunc.intervalSeconds = function(value){
        if(!arguments.length){ return intervalSeconds; }
        //covert to milliseconds when setting
        intervalSeconds = value * 1000;
        return intervalSeconds;
    };

    /** 
     * Getter for the intervalId
     * @method intervalId
     */
    intervalFunc.intervalId = function(){
        return intervalId;
    };

    /** 
     * Stops the interval and sets func and the object itself to undefined
     * @method remove 
     * @param {Integer|Optional} value - The new value for intervalSeconds 
     */
    intervalFunc.remove = function(){
        intervalFunc.toggle(false);
        func         = undefined;
        intervalFunc = undefined;
    };

    /** 
     * Toggles whether the interval is running or not 
     * @method intervalFunc 
     * @param {Boolean} bool - A boolean flag that starts the interval when true and stops it when false 
     */
    intervalFunc.toggle = function(bool){
        var current_state = active;
        //start loop if we're toggling back on, otherwise this is 
        //a noop anyways
        intervalFunc.apply(intervalFunc, args);
    
        if(!arguments.length){
            active = !current_state;
        }else {
            active = bool;
        }
        
        return active;
    };
    
    return intervalFunc;
}
module.exports = Interval;

},{"lodash":3}],23:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var         _ = require('lodash');
var Functions = require('./Functions.js');
/**
* ```
*
* var topology = Topology(value);
* ```
* @class Topology 
* @constructor DataSourceArray
* @static 
* @private
* @param {Object} params - The object representing the network topology 
*/
var Topology = function(params, offsets){
    var data     = _.cloneDeep(params);
    var offsets = offsets;
    var poi            = [];
    var topology       = {};
    topology.__factory__ = 'Topology';

    var links = [];
    var endpoints = [];
    /** 
     * Sets the path for a given link 
     * @method getBoundingBox
     * @param {Integer} linkId - The link id of the link to modify 
     * @param {Array} path - The array of points that represent the link path 
     */
    topology.setPath = function(linkId, path) {
        var newPath = _.cloneDeep(path);
        var linkIdx = _.findIndex(data.links, function(link) {
            return link.linkId === linkId;
        });
        if (linkIdx) {
            data.links[linkIdx].path = newPath;
            data.links[linkIdx].name = 'Waypoint';
        } else {
            console.error('Could not find the links to add the new path.');
        };
    };

    /** 
     * When an adjacency endpoint is moved this function moves the relevant POP
     * with it along with the relevant endpoints of any adjacencies that terminate
     * on that endpoint
     * @method syncAdjEndpoints 
     * @param {Object} params - The method parameters 
     * @param {Object:Required} params.adj_moved - The topology's adjacency object whose position moved 
     */
    topology.syncLinkEndpoints = function(params){
        params = params || {};
        if(!params.link_moved && !params.endpoint_moved){
            console.error('Must pass in link_moved or endpoint_moved as an argument');
            return;
        }

        // build a hash of our adjacencies
        var adj_hash     = {};
        _.forEach(topology.data().links, function(link){
            var name   = link.name;
            var endp_a = link.path[0];
            var endp_z = link.path[adj.path.length - 1];

            var match  = name.match(/([^-]+)-([^-]+)/)
            adj_hash[name] = {};
            adj_hash[name].pops = [
                { name: match[1], coord: endp_a },
                { name: match[2], coord: endp_z }
            ];
        });

        // build a hash of our pops
        var pop_hash = {};
        if(params.pop_moved){
            pop_hash[params.pop_moved.name] = {
                updated: true,
                lat: params.pop_moved.lat,
                lon: params.pop_moved.lon
            };
        };
        _.forEach(topology.data().pops, function(pop){
            var name = pop.name;
            pop_hash[name] = {};
            pop_hash[name].updated = false;
        });
        
        // if an adjacency was moved, make the adjacency that has been moved first in the list so its 
        // pops are updated, then we can sync the other adjacencies to be aligned
        // with the new pop/endpoint locations
        if(params.adj_moved){
            var adjIndex      = _.findIndex(topology.data().adjacencies, { 'adjacencyId': params.adj_moved.adjacencyId });
            var adj_moved_obj = topology.data().adjacencies[adjIndex];
            _.remove(topology.data().adjacencies, function(adj) {
                return adj.adjacencyId === params.adj_moved.adjacencyId;
            });
            topology.data().links.unshift(adj_moved_obj);
        }

        _.forEach(topology.data().links, function(adj){
            var name = adj.name;
            for(var popIndex = 0; popIndex < adj_hash[name].pops.length; popIndex++){
                var adj_pop  = adj_hash[name].pops[popIndex];
                var pop_name = adj_pop.name;
                var coord    = adj_pop.coord;
                var pop_obj  = pop_hash[pop_name];
               
                // if we've already adjusted this pops coordinates
                // update the coord in this adjacencies path to be in
                // sync with the pops and move on
                if(pop_obj.updated){
                    var a_or_z = (popIndex == 0) ? 0 : (adj.path.length - 1);
                    adj.path[a_or_z].lat = pop_obj.lat;
                    adj.path[a_or_z].lon = pop_obj.lon;
                    
                    continue; 
                }

                // if we haven't updated this pop to be in sync with an
                // adj yet, use this adjacencies coord
                _.forEach(topology.data().pops, function(pop){
                    if(pop.name != pop_name){ return true; } //lodash continue
                    
                    pop.lat = coord.lat;
                    pop.lon = coord.lon;
                });
            
                // update pop hash
                pop_hash[pop_name] = {
                    updated: true,
                    lat: coord.lat,    
                    lon: coord.lon
                };
            }
        });

        var here = {};
    };

    topology.init = _.once(function(){
        //process links

        for(var i=0; i < data.links.length; i++){
            _.forEach(offsets, function(off){
		var link = data.links[i];
		link.az = {min: -1, max: -1, avg: -1};
		link.za = {min: -1, max: -1, avg: -1};

		var l = _.cloneDeep(link);
		
		if(!l.linkId || l.linkId === null || l.linkId === undefined){
                    l.linkId = _.uniqueId('link_');
		}
		var lastIndex = l.path.length - 1;
		
		//determine if this passes the 180/-180 boundary
		//if it does what is the shortest path?
		
		var firstPathElm = _.first(l.path);
		var firstEndpoint = _.get(l, ['endpoints', '0', 'name'], 'Waypoint');
		if (firstPathElm) { firstPathElm.name = firstEndpoint; }
		
		var lastPathElm = _.last(l.path);
		var lastEndpoint = _.get(l, ['endpoints', '1', 'name'], 'Waypoint');
		if (lastPathElm) { lastPathElm.name = lastEndpoint; }
		
		//so take lon and subtract them and take abs
		//if > 180 you want to go the other way!
		var dist = Math.abs(firstPathElm.lon - lastPathElm.lon);
		var path1 = [];
		var path2 = [];
		
		if(dist > 180){
		    
                    //ok we now know that we are not going the "best way"
                    //we need to break this into 2 paths!
                    //take the first endpoint follow the 
                    var first_path = 0;
                    var previous;
                    
                    _.each(l.path, function(p){
			
			if(previous !== undefined){
                            if(Math.abs(previous.lon - p.lon) > 180){
				first_path = 1;
                            }
			}
			
			previous = p;
			
			if(first_path == 0){
                            var new_p = _.cloneDeep(p);
                            if(p.lon >= 0){
				new_p.lon = parseFloat(new_p.lon) - 360;
                            }else{
				new_p.lon = parseFloat(new_p.lon) + 360;
                            }
                            path1.push(p);
                            path2.push(new_p);
			}else{
                            var new_p = _.cloneDeep(p);
                            if(p.lon >= 0){
				new_p.lon = parseFloat(new_p.lon) - 360;
                            }else{
				new_p.lon = parseFloat(new_p.lon) + 360;
                            }
                            path1.push(new_p);
                            path2.push(p);
			}
			
                    });
		    
                    var new_l_1 = _.cloneDeep(link);
                    new_l_1.path = path1;
                    var new_l_2 = _.cloneDeep(link);
                    new_l_2.path = path2;
                    data.links.push(new_l_1);
                    data.links.push(new_l_2);   
		}else{

		    _.each(l.path, function(p,i) {
			p.endpoint = false;
			if(i === 0 || i === lastIndex){
			    p.endpoint = true;
			}
			p.lon = parseFloat(p.lon) + off;
			p.name = 'Waypoint';

			if(!p.linkId || p.linkId === null || p.linkId === undefined){
			    p.linkId   = l.linkId;
			    p.linkName = l.name;
			}

			if(!p.waypointId || p.waypointId === null || p.waypointId === undefined){
			    p.waypointId = _.uniqueId('waypoint_');
			}
		    });
		    
		    //add points of interest as an element of adjacency to easily determine
		    //where to get utilization data from
		    //link.poi = getAdjPOI(adj);
		    links.push(l);
		}
            });
            
        }
	
        data.links = links;
	
        //add unique ids to all endpoints
	_.forEach(data.endpoints, function(endpoint){
            _.forEach(offsets, function(off){
		endpoint.endpointId = _.uniqueId('endpoint_');
            });
	});
    });

    /** 
     * Returns an array of endpoints with respect to any filters passed in 
     * @method endpoints
     * @param {Object} params - The method parameters 
     * @param {Array} params.endpointIds - The array of pop ids of the endpoints to return 
     * @return {Array} endpoints - An array of endpointss
     */
    topology.endpoints = function(params){
        var my_endpoints = data.endpoints;
        if(!params){ return my_endpoints; }

        //filter by endpointIds if passed in
        if(params.endpointIds){
            if(params.endpointIds.length === 0) { return []; }
            my_endpoints = _.filter(my_endpoints, function(d){
                return _.indexOf(params.endpointIds, d.endpointId) !== -1;
            });
        }

        return my_endpoints;
    };

    /** 
     * Returns an array of links with respect to any filters passed in 
     * @method links
     * @param {Object} params - The method parameters 
     * @param {Array} params.linkIds - The array of link ids of the links to return 
     * @return {Array} links - An array of links
     */
    topology.links = function(params){
        var my_links = data.links;
        if(!params){ return my_links; }

        //filter by linkIds if passed in
        if(params.linkIds){
            if(params.linkIds.length === 0) { return []; }
            my_links = _.filter(my_links, function(d){
                return _.indexOf(params.linkIds, d.linkId) !== -1;
            });
        }

        //filter by endpointNames if passed in
        if(params.endpointNames){
            if(params.endpointNames.length === 0) { return []; }
            my_links = _.filter(my_links, function(d){
                for(var i = 0; i < d.path.length; i++){
                    var path = d.path[i];
                    if(_.indexOf(params.endpointNames, path.name) !== -1){
                        return true;
                    }
                }
                return false;
            });
        }

	if(params.linkNames){
	    if(params.linkNames.length === 0){ return []; }
	    my_links = _.filter(my_links, function(l){
		if(_.indexOf(params.linkNames, l.name) !== -1){
		    return true;
		}
		return false;
	    });
	}

        return my_links;
    };

    /** 
     * Sets the selected flag to false on all links and endpoints 
     * @method deselectAll 
     */
    topology.deselectAll = function() {
        _.forEach(data.endpoints, function(endpoint){
            endpoint.selected = false;
        });
        _.forEach(data.links, function(link){
            link.selected = false;
        });
    };
    
    /** 
     * Returns a list of all the unique points of interest for this topology (i.e. all of the node/interface pairs we wish to use to gather data for links)
     * @method poi 
     * @return {Array} poi - Array of node/interfaces
     */
    topology.poi = function(){
        return poi;
    };

    /** 
     * Returns the object of topology data 
     * @method data
     * @return {Object} data - The topology data 
     */
    topology.data = function(){
        return data;
    };

    topology.init();

    return topology;
}

module.exports = Topology;

},{"./Functions.js":20,"lodash":3}],24:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var d3   = require('d3');
/**
* An object containg methods that help to form a url from an object
* ```
var url = urlFormatter.grnocProxy({
    urn: 'urn:publicid:IDN+grnoc.iu.edu:ThompsbpDEV:CDS:2:Network',
    method: 'get_network_maps',
    params: {
        network_map_id: 1
    }
});
```
* @class UrlFormatter
* @constructor UrlFormatter 
* @static
*/
var UrlFormatter = {
    /**
     * Does some error checking on a config passed in and returns the appropriate formatter if it checks out
     * @method getFormatter 
     * @param {Object} params - The method parameters 
     * @param {Object} params.type - The type of formatter to retrieve
     * @param {Object} params.config - The url config
     * @return {Function} formatter - The url formatter given the passed in type
     */
    getFormatter: function(params){
        if(!params.type){
            console.error('Must pass in the url.type if using a formatter to generate the url');
            return;
        }
        if(!params.config){
            console.error('Must pass in the url.config if using a formatter to generate the url');
            return;
        }

        if(UrlFormatter[params.type] === undefined){
            console.error('Do not know haw to format url.type '+params.type);
            return;
        }
            
        return UrlFormatter[params.type];
    },
    /**
     * Function that takes the value of a url parameter and looks for special placeholders in the form of [% PLACEHOLDER %]
     * and replaces them with real values
     * @method paramTemplate
     * @param {String} param - The param to interpolate  
     * @return {String} param - The interpolated parameter 
     */
    paramTemplate: function(param){
        if(param.constructor !== String){ return param; }

        //HANDLE DATE PLACEHOLDERS
        var format = d3.time.format("%m/%d/%Y %H:%M:%S");
        var now = new Date();
        now.setSeconds(0);

        // replace any instances of a now time placeholder
        var now_time_regex = /\[% *NOW *%\]/g;
        param = param.replace(now_time_regex, function(){
            return format(now);
        });

        // replace any instances of a time offset placeholder
        var time_offset_regex = /\[% *NOW_(MINUS|PLUS)_(\d+)_(MINUTES|HOURS|DAYS|WEEKS|MONTHS|YEARS) *%\]/g;
        param = param.replace(time_offset_regex, function(full_string, operator, unit, metric){
            var minutes;
            switch(metric){
                case 'MINUTES':
                    minutes = unit;
                    break;
                case 'HOURS':
                    minutes = unit * 60;
                    break;
                case 'DAYS':
                    minutes = unit * 1440;
                    break;
                case 'WEEKS':
                    minutes = unit * 1440 * 7;
                    break;
                case 'MONTHS':
                    minutes = unit * 1440 * 30;
                    break;
                case 'YEARS':
                    minutes = unit * 1440 * 365;
                    break;
                default:
                    console.error('How did this happen!?');
                    return;
            }
            if( operator == 'MINUS' ){
                minutes *= -1;
            }

            var past = d3.time.minute.offset(now,minutes);
            return format(past);
        }); 

        return param;
    },
    /**
     * Function to transform an object into url query string parameters
     * @method params
     * @param {Object} params - The hash of parameters to convert to querystring parameters 
     * @return {String} querystring - The querystring representation of the parameters 
     */
    params: function(params){
        if(!params){ return ''; }
        param_strs = [];
        for (var field in params) {
            if (params.hasOwnProperty(field)) {
                var value = params[field];
                if(value.constructor === Array){
                    param_strs.push(value.map(function(v){ 
                        return field+'='+encodeURIComponent(UrlFormatter.paramTemplate(v)); 
                    }).join('&'));
                }else {
                    param_strs.push(field+'='+encodeURIComponent(UrlFormatter.paramTemplate(value)));
                }
            }
        }
        return param_strs.join('&');
    },
    /**
     * A formatter that takes a url and a hash of parameters and returns a url with querystring parameters concatinated
     * @method url 
     * @param {Object} params - The method parameters 
     * @param {String} params.url - The base url
     * @param {Object} params.params - The hash of parameters to append to the url 
     * @return {String} url - The formed url 
     */
    url: function(params){
        var url = params.url;
        if(params.params){
            url += '?'+UrlFormatter.params(params.params);
        }
        return url;
    },
    /**
     * Function to transform an object into a grnocProxy request
     * @method grnocProxy
     * @param {Object} params - The method parameters 
     * @param {String|Options} params.url - The base url
     * @param {String|Options} params.urn - The URN of the service
     * @param {String} params.method - The method to call at the url or urn
     * @return {String} url - The formed url
     */
    grnocProxy: function(params){
        var url = '/proxy/remote_webservice.cgi?';
        if(params.url){
            url += '&method=remote_method';
            url += '&remote_webservice='+params.url;
        }
        if(params.urn){
            url += '&method=remote_urn_method';
            //allow the user to send in an object containing just the cloud and the resource
            if(params.urn.constructor === Object){
                url += '&service_identifier='+
                    encodeURIComponent('urn:publicid:IDN+grnoc.iu.edu:'+params.urn.cloud+':'+params.urn.resource);
            }
            //otherwise they passed in the whole urn
            else {
                url += '&service_identifier='+encodeURIComponent(params.urn);
            }
        }
        //remote_method_name and remote_parameters are required so send garbage if we don't need them
        url += '&remote_method_name='+((params.method) ? params.method : 'foo');
        url += '&remote_parameters='+((params.params) ? encodeURIComponent(UrlFormatter.params(params.params)) : 'bar');
        if(params.timeout){
            url += '&timeout='+params.timeout;
        }
                
        return url;
    }
};
module.exports = UrlFormatter;

},{"d3":2}],25:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var d3       = require('d3');
var _        = require('lodash');
var Geometry = require('../util/Geometry.js');
/**
* A infoDiv widget for use in conjunction with the Map Widgets to display supplemental information when clicking on features
* ```
var infoDiv = InfoDiv();
infoDiv.show({
    content: content,
    align: {
        node: document.getElementById('rect'),
        position: position,
        anchor: anchor
    }
});
```
* @class InfoDiv
* @constructor InfoDiv
* @static
* @param {Object} params - The configuration object for the editor
* @param {DOM Element} params.content - A [DOM Element](http://www.w3schools.com/jsref/dom_obj_all.asp) containing the infoDivs body markup
* @param {String} params.header - A string to use for the infoDiv's header 
* @param {String} params.onInit - A function that is executed the first time the infoDiv is shown 
*/
var InfoDiv = function(params){
    params = params || {};

    var infoDiv = {};

    var pin = false;


    var _infoDiv;
    if(params.align && params.align.relative){
        _infoDiv = d3.select(params.align.node).append('div');

        switch (params.align.position){ 
            case 'tl': 
                _infoDiv.style('position', 'relative')
                    .style('top', '0px')
                    .style('left', '0px');
                break;
            case 'bl': 
                _infoDiv.style('position', 'relative')
                    .style('bottom', '0px')
                    .style('left', '0px');
                break;
            case 'tr': 
                _infoDiv.style('position', 'relative')
                    .style('top', '0px')
                    .style('right', '0px');
                break;
            case 'br': 
                _infoDiv.style('position', 'relative')
                    .style('bottom', '0px')
                    .style('right', '0px');
                break;
            default: 
                console.error("Don't know how to render infoDiv with these parameters");
        } 
    }
    else if(params.align) {
        _infoDiv = d3.select('body').append('div')
            .style('position', 'absolute');
    }
    else {
        console.error('Must pass in align parameter!');
        return;
    }

    _infoDiv.attr('class', 'atlas-info-div')
        .style('opacity', 0);

    /**
    * Applies a class to the info div 
    * @method className 
    * @param {String} className - The name of the class to apply to the info di 
    * @return infoDiv object
    */
    infoDiv.className = function(className){
        _infoDiv.classed(className, true);
        return infoDiv;
    };

    /**
    * Shows the infoDiv
    * @method show
    * @param {Object} options - The configuration object for the editor
    * @param {Object} options.align - An object that defines what to align the infoDiv to, if not present it displays in the center of the screen 
    * @param {DOM Element} options.align.node The DOM Element to align the infoDiv to 
    * @param {String} options.align.position - A string representing which part of the node to align the infoDiv to
    * @param {String} options.align.anchor - A string representing which part of the infoDiv to align to the node
    * @param {DOM Element} options.content - A DOM Element containing the infoDivs body markup
    * @param {String} options.header - A string to use for the infoDiv's header 
    * @param {String} options.onInit - A function that is executed the first time the infoDiv is shown 
    */
    infoDiv.show = function(options){
        options = options || {};
        options.align = options.align || params.align;
        options.content = options.content || params.content;
	options.pos = options.pos;
        //options.height = options.height || params.height;
        //options.width = options.width || params.width;


        if(options.pin !== undefined){ infoDiv.pin(options.pin); }
        else if(infoDiv.pin()){ return; }

        if(options.height){
        //    _infoDiv.style('height', options.height+'px');
        }
        if(options.width){
        //    _infoDiv.style('width', options.width+'px');
        }
        if(options.content){
            infoDiv.setContent({ content: options.content });
        }


        if(options.align && !options.align.relative){
            var xy = Geometry.align(_.merge(options.align, {
                height: _infoDiv.node().getBoundingClientRect().height,            
                width:  _infoDiv.node().getBoundingClientRect().width
            })); 
            infoDiv.moveTo(options.pos);
        }

        _infoDiv 
          .transition()
          .duration(500)
          .style('opacity', 1);
	//console.log("Returning infoDiv in show(): ",infoDiv);
        return infoDiv;
    };

    /**
    * Getter/Setter of the pin flag for the dialog
    * @method pin
    * @param {String} className - The name of the class to apply to the info di 
    * @return {Bool} pin - The flag representing whether or not the info div is pinned
    */
    infoDiv.pin = function(isPinned){
        if(arguments.length){ pin = isPinned; }
        return pin;
    };

    /**
    * Moves the info div to the provided xy coordinates 
    * @method moveTo
    * @param {Object} options - The method parameters
    * @param {Array} options.xy - The xy position to move the info div to
    */
    infoDiv.moveTo = function(position){
	const padding_x = 20;
	const padding_y = 10;
	const infoDivWidth = _infoDiv.clientWidth;
	const infoDivHeight = _infoDiv.clientHeight;

	let left = position.page_x + padding_x;
	let top = position.page_y + padding_y;
	if(position.page_x + infoDivWidth > window.innerWidth){
	  left = position.page_x - infoDivWidth - padding_x;
	}

	if(position.page_y - window.pageYOffset + infoDivHeight > window.innerHeight){
	  top = position.page_y - infoDivHeight - padding_y;
	}
        //var cur_x = position.cur_x+10;
	//var cur_y = position.cur_y+15;
        _infoDiv.style('left', left+'px'); 
        _infoDiv.style('top',  top+'px'); 
    };

    /**
    * Hides the infoDiv
    * @method hide 
    * @param {Object} options - The method parameters
    * @param {Bool} options.pin - Whether or not the info div should stay visible 
    */
    infoDiv.hide = function(options){
        options = options || {};
        if(options.pin !== undefined){ infoDiv.pin(options.pin); }
        if(infoDiv.pin()){ return; }

        _infoDiv 
          .transition()
          .duration(500)
          .style('opacity', 0);
    };

    /**
    * Returns the DOM node of the infoDiv 
    * @method node 
    */
    infoDiv.node = function(){
        return _infoDiv.node();
    };

    /**
    * Sets the content of the info div 
    * @method setContent
    * @param {Object} options - The method parameters
    * @param {String} options.content - The markup to set the infoDiv's innerHTML to 
    */
    infoDiv.setContent = function(options){
        _infoDiv.html(options.content);
    };
    
    if(params.className){
        infoDiv.className(params.className);
    }
    //console.log("Returning infoDiv: ",infoDiv);
    return infoDiv;
};
module.exports = InfoDiv;

},{"../util/Geometry.js":21,"d3":2,"lodash":3}],26:[function(require,module,exports){
/*
Copyright 2018 The Trustees of Indiana University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

var d3       = require('d3');
var _        = require('lodash');
var InfoDiv  = require('./InfoDiv.js');
/**
* A legendDiv widget for use in conjunction with the Map Widgets to display supplemental information when clicking on features
* ```
var legendDiv = Legend();
legendDiv.show({
    content: content,
    align: {
        node: document.getElementById('rect'),
        position: position,
        anchor: anchor
    }
});
```
* @class Legend
* @constructor Legend
* @static
* @param {Object} params - The configuration object for the editor
* @param {DOM Element} params.content - A [DOM Element](http://www.w3schools.com/jsref/dom_obj_all.asp) containing the legendDivs body markup
* @param {String} params.header - A string to use for the legendDiv's header 
* @param {String} params.onInit - A function that is executed the first time the legendDiv is shown 
*/
var Legend = function(params){
    params = params || {};

    var legend = {};

    if(!params.align){
        console.error("Must pass in an align object!");
        return;
    }
    if(!params.items){
        console.error("Must pass in a list of items to create a legend for");
    }

    var infoDiv;
    var legendDiv = InfoDiv({
        className: 'atlas-legend', 
        align: params.align,
    }).className((params.orientation !== undefined) ? params.orientation : 'horizontal')
    .show();

    /**
    * Getter/Setter of the legenedDiv 
    * @method setContent
    * @param {Object} options - The method parameters
    * @param {String} options.content - The markup to set the infoDiv's innerHTML to 
    */
    legend.legendDiv = function(value){
        if(!arguments.length){ return legendDiv; }
        legendDiv = value;
        return legend;
    };

    /**
    * Getter/Setter of the infoDiv 
    * @method infoDiv 
    * @param {infoDiv} value - The new infoDiv object  
    * @return {infoDiv} infoDiv - The current infoDiv object
    * @chainable
    */
    legend.infoDiv = function(value){
        if(!arguments.length){ return infoDiv; }
        infoDiv = value;
        return legend;
    };

    legend.init = function(){

        _.forEach(params.items, function(item, i){
            var delta;
            if(i == 0){
                delta = params.items[i].value;
            }else {
                delta = params.items[i].value - params.items[i-1].value; 
            }
            item.width = delta; 
        });

        //create legend colors
        var updateItems = d3.select(legend.legendDiv().node())
            .selectAll('.item')
            .data(params.items);

        var enterItems = updateItems.enter();

        var items = enterItems.append('div')
            .classed('item', 'true')
            .style('width', function(d){
                return d.width + '%';
            })


        items.append('div')
            .classed('color', true)
            .style('width', function(d){
                return '100%';
            })
            .style('background-color', function(d){
                return d.color;
            })
            .style('border-color', function(d){
                return d3.rgb(d.color);
            });

        // create legend numbers
        var numberLocations = params.numberLocations;
        if(!_.isArray(numberLocations)){ numberLocations = [0,100]; }

        var numberDiv = d3.select(legend.legendDiv().node())
            .append('div')
            .classed('numbers', true)
            .style('color', 'white')
            .style('mix-blend-mode','exclusion');


        var numberItems = numberDiv.selectAll('.scale-num')
            .data(numberLocations).enter();
        numberItems.append('div')
            .classed('scale-num', true)      
            .classed('zero', function(d) { return d <= 0; })
            .classed('hundred', function(d) { return d >= 100; })
            .style('left', function(d){ return (d <= 0 || d >= 100) ? '0%' : (d-50) + '%'; })
            .html(function(d){ return d + '%'; });

        //if there's description text add another panel that appears when hovered over
        if(params.description){
            var infoDiv = InfoDiv({
                content: '<div>'+params.description+'</div>',
                className: 'atlas-legend-descr', 
                align: {
                    node: legendDiv.node(),
                    position: 'bl',
                    anchor: 'tl'
                } 
            }).className((params.orientation !== undefined) ? params.orientation : 'horizontal');
            d3.select(legendDiv.node()).on('mouseover', function(){
                infoDiv.show(); 
            });
            d3.select(legendDiv.node()).on('mouseout', function(){
                infoDiv.hide(); 
            });
            if(params.width){
                d3.select(legendDiv.node()).style('width', params.width + 'px');
            }
        }
    };

    legend.init();

    return legend;
};
module.exports = Legend;

},{"./InfoDiv.js":25,"d3":2,"lodash":3}]},{},[10])(10)
});